Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: 2007-08-21

mkDayMonthYear(2007-08-21,21,08,2007)
mkDayMonthYear(2007-08-21,21,08,2007)
Spans:
Span 0-1:  2007-08-21 => (date-entity :day 21 :month 8 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-08-21,(date-entity :day 21 :month 8 :year 2007),false)),Map(2 -> 8, 1 -> 21, 0 -> date-entity, 3 -> 2007),Map(2 -> 21, 8 -> 8, d -> date-entity, 22 -> 2007))),[Ljava.lang.String;@4a22f9e2,Annotation([Ljava.lang.String;@3c419631,[Ljava.lang.String;@418e7838,[Ljava.lang.String;@61230f6a),Annotation([Ljava.lang.String;@3c130745,[Ljava.lang.String;@cd3fee8,[Ledu.cmu.lti.nlp.amr.Dependency;@3e2e18f2),Annotation([Ljava.lang.String;@470f1802,[Ljava.lang.String;@63021689,[Ljava.lang.String;@703580bf),Annotation([Ljava.lang.String;@3e92efc3,[Ljava.lang.String;@1622f1b,[Ledu.cmu.lti.nlp.amr.Entity;@72a7c7e0))
AMR:
(d / date-entity, day, 2 / 21)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2007)

Decoded in 343,910 microseconds
Sentence: Iran (Islamic Republic of) (IR)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic" :op "of" :op ")"))
NER Entity: (organization :name (name :op "IR"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 2-5:  Islamic Republic of => (country :name (name :op "Islamic" :op "Republic" :op "of" :op ")"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,5,List(5, 4, 3, 2, 1, 0),Islamic Republic of,(country :name (name :op "Islamic" :op "Republic" :op "of" :op ")")),false), Span(0,1,List(8, 7, 6),Iran,(country :name (name :op "Iran")),false)),Map(2 -> "Islamic", 5 -> ")", 8 -> "Iran", 7 -> name, 1 -> name, 4 -> "of", 6 -> country, 0 -> country, 3 -> "Republic"),Map(n -> name, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@72057ecf,Annotation([Ljava.lang.String;@1afd44cb,[Ljava.lang.String;@6973b51b,[Ljava.lang.String;@1ab3a8c8),Annotation([Ljava.lang.String;@43195e57,[Ljava.lang.String;@333291e3,[Ledu.cmu.lti.nlp.amr.Dependency;@479d31f3),Annotation([Ljava.lang.String;@40ef3420,[Ljava.lang.String;@498d318c,[Ljava.lang.String;@6e171cd7),Annotation([Ljava.lang.String;@402bba4f,[Ljava.lang.String;@795cd85e,[Ledu.cmu.lti.nlp.amr.Entity;@59fd97a8))
AMR:
(c / country, calendar, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, ")")
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")
(n2 / name, op, "Iran")

Decoded in 201,808 microseconds
Sentence: International; weapons; politics; proliferation; energy

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 8-9:  energy => energy
Span 0-1:  International => international
Span 4-5:  politics => politics
Span 6-7:  proliferation => proliferate-01
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),energy,energy,false), Span(7,8,List(1),;,and,false), Span(6,7,List(2),proliferation,proliferate-01,false), Span(5,6,List(3),;,and,false), Span(4,5,List(4),politics,politics,false), Span(3,4,List(5),;,and,false), Span(2,3,List(6),weapons,weapon,false), Span(1,2,List(7),;,and,false), Span(0,1,List(8),International,international,false)),Map(2 -> proliferate-01, 5 -> and, 8 -> international, 7 -> and, 1 -> and, 4 -> politics, 6 -> weapon, 0 -> energy, 3 -> and),Map(w -> weapon, e -> energy, p2 -> politics, a3 -> and, p -> proliferate-01, a -> and, i -> international, a2 -> and, a4 -> and))),[Ljava.lang.String;@f5ac9e4,Annotation([Ljava.lang.String;@123ef382,[Ljava.lang.String;@dbf57b3,[Ljava.lang.String;@384ad17b),Annotation([Ljava.lang.String;@61862a7f,[Ljava.lang.String;@441772e,[Ledu.cmu.lti.nlp.amr.Dependency;@7334aada),Annotation([Ljava.lang.String;@1d9b7cce,[Ljava.lang.String;@4d9e68d0,[Ljava.lang.String;@42e99e4a),Annotation([Ljava.lang.String;@14dd9eb7,[Ljava.lang.String;@52e6fdee,[Ledu.cmu.lti.nlp.amr.Entity;@6c80d78a))
AMR:
(a / and, op, p / proliferate-01)
(a2 / and, op, a / and)
(a2 / and, op, e / energy)
(a3 / and, op, p / proliferate-01)
(a3 / and, op, p2 / politics)
(a4 / and, op, a3 / and)
(a4 / and, op, i / international)
(a4 / and, op, w / weapon)

Decoded in 144,754 microseconds
Sentence: The International Atomic Energy Agency reached an agreement with Iranian officials that stated there were no remaining issues and ambiguities regarding Iran's nuclear program and activities.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 26-27:  activities => activity
Span 7-8:  agreement => agree-01
Span 25-26:  and => and
Span 18-19:  and => and
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 21-22:  Iran => (country :name (name :op "Iran"))
Span 9-10:  Iranian => (country :name (name :op "Iran"))
Span 17-18:  issues => issue
Span 15-16:  no => -
Span 23-24:  nuclear => nucleus
Span 10-11:  officials => (have-org-role-91 :ARG2 official)
Span 24-25:  program => program
Span 5-6:  reached => reach-01
Span 16-17:  remaining => remain-01
Span 12-13:  stated => state-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),activities,activity,false), Span(25,26,List(1),and,and,false), Span(24,25,List(2),program,program,false), Span(23,24,List(3),nuclear,nucleus,false), Span(21,22,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(18,19,List(7),and,and,false), Span(17,18,List(8),issues,issue,false), Span(16,17,List(9),remaining,remain-01,false), Span(15,16,List(10),no,-,false), Span(12,13,List(11),stated,state-01,false), Span(10,11,List(13, 12),officials,(have-org-role-91 :ARG2 official),false), Span(9,10,List(16, 15, 14),Iranian,(country :name (name :op "Iran")),false), Span(7,8,List(17),agreement,agree-01,false), Span(5,6,List(18),reached,reach-01,false), Span(1,5,List(24, 23, 22, 21, 20, 19),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> program, 5 -> name, 12 -> have-org-role-91, 8 -> issue, 15 -> name, 21 -> "International", 18 -> reach-01, 24 -> "Agency", 7 -> and, 1 -> and, 17 -> agree-01, 23 -> "Energy", 4 -> country, 11 -> state-01, 14 -> country, 20 -> name, 6 -> "Iran", 9 -> remain-01, 0 -> activity, 22 -> "Atomic", 16 -> "Iran", 19 -> organization, 10 -> -, 3 -> nucleus, 13 -> official),Map(n -> nucleus, h -> have-org-role-91, n4 -> name, a3 -> and, s -> state-01, r2 -> reach-01, p -> program, n3 -> name, a -> activity, o2 -> organization, a2 -> and, i -> issue, r -> remain-01, - -> -, c -> country, o -> official, n2 -> name, c2 -> country, a4 -> agree-01))),[Ljava.lang.String;@8dbdac1,Annotation([Ljava.lang.String;@6e20b53a,[Ljava.lang.String;@71809907,[Ljava.lang.String;@3ce1e309),Annotation([Ljava.lang.String;@6aba2b86,[Ljava.lang.String;@158da8e,[Ledu.cmu.lti.nlp.amr.Dependency;@74e52303),Annotation([Ljava.lang.String;@47af7f3d,[Ljava.lang.String;@7c729a55,[Ljava.lang.String;@3bb9a3ff),Annotation([Ljava.lang.String;@661972b0,[Ljava.lang.String;@5af3afd9,[Ledu.cmu.lti.nlp.amr.Entity;@323b36e0))
AMR:
(a2 / and, op, a / activity)
(a2 / and, op, p / program)
(a3 / and, op, c / country)
(a3 / and, op, i / issue)
(a4 / agree-01, ARG0, o2 / organization)
(a4 / agree-01, ARG1, n / nucleus)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n2 / name, op, "Iran")
(n3 / name, op, "Iran")
(n4 / name, op, "Agency")
(n4 / name, op, "Atomic")
(n4 / name, op, "Energy")
(n4 / name, op, "International")
(o2 / organization, name, n4 / name)
(p / program, poss, c / country)
(r / remain-01, ARG1, i / issue)
(r / remain-01, ARG6, - / -)
(r2 / reach-01, ARG0, o / official)
(r2 / reach-01, ARG1, a4 / agree-01)
(s / state-01, ARG1, a3 / and)
(s / state-01, ARG6, h / have-org-role-91)

Decoded in 1,067,145 microseconds
Sentence: U.S. and European officials suspect that Iran's civilian nuclear energy program masks an effort to obtain technology that could be used in the production of an atomic bomb.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 1-2:  and => and
Span 27-28:  atomic => atom
Span 28-29:  bomb => bomb
Span 8-9:  civilian => civilian
Span 19-20:  could => possible
Span 14-15:  effort => effort
Span 10-11:  energy => energy
Span 2-3:  European => (continent :name (name :op "Europe"))
Span 6-7:  Iran => (country :name (name :op "Iran"))
Span 9-10:  nuclear => nucleus
Span 16-17:  obtain => obtain-01
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 24-25:  production => produce-01
Span 11-12:  program => program
Span 4-5:  suspect => suspect-01
Span 17-18:  technology => technology
Span 0-1:  U.S. => (country :name (name :op "U.S."))
Span 21-22:  used => use-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),bomb,bomb,false), Span(27,28,List(1),atomic,atom,false), Span(24,25,List(2),production,produce-01,false), Span(21,22,List(3),used,use-01,false), Span(19,20,List(4),could,possible,false), Span(17,18,List(5),technology,technology,false), Span(16,17,List(6),obtain,obtain-01,false), Span(14,15,List(7),effort,effort,false), Span(11,12,List(8),program,program,false), Span(10,11,List(9),energy,energy,false), Span(9,10,List(10),nuclear,nucleus,false), Span(8,9,List(11),civilian,civilian,false), Span(6,7,List(14, 13, 12),Iran,(country :name (name :op "Iran")),false), Span(4,5,List(15),suspect,suspect-01,false), Span(3,4,List(17, 16),officials,(have-org-role-91 :ARG2 official),false), Span(2,3,List(20, 19, 18),European,(continent :name (name :op "Europe")),false), Span(1,2,List(21),and,and,false), Span(0,1,List(24, 23, 22),U.S.,(country :name (name :op "U.S.")),false)),Map(2 -> produce-01, 5 -> technology, 12 -> country, 8 -> program, 15 -> suspect-01, 21 -> and, 18 -> continent, 24 -> "U.S.", 7 -> effort, 1 -> atom, 17 -> official, 23 -> name, 4 -> possible, 11 -> civilian, 14 -> "Iran", 20 -> "Europe", 6 -> obtain-01, 9 -> energy, 0 -> bomb, 22 -> country, 16 -> have-org-role-91, 19 -> name, 10 -> nucleus, 3 -> use-01, 13 -> name),Map(e -> effort, n -> nucleus, h -> have-org-role-91, b -> bomb, t -> technology, p2 -> possible, e2 -> energy, n4 -> name, c4 -> country, s -> suspect-01, p -> produce-01, n3 -> name, c3 -> continent, a -> atom, o2 -> official, a2 -> and, c -> civilian, u -> use-01, o -> obtain-01, p3 -> program, n2 -> name, c2 -> country))),[Ljava.lang.String;@2e005c4b,Annotation([Ljava.lang.String;@4567f35d,[Ljava.lang.String;@5ffead27,[Ljava.lang.String;@6356695f),Annotation([Ljava.lang.String;@4f18837a,[Ljava.lang.String;@359f7cdf,[Ledu.cmu.lti.nlp.amr.Dependency;@1fa268de),Annotation([Ljava.lang.String;@4f6ee6e4,[Ljava.lang.String;@4466af20,[Ljava.lang.String;@a514af7),Annotation([Ljava.lang.String;@6b927fb,[Ljava.lang.String;@3e58a80e,[Ledu.cmu.lti.nlp.amr.Entity;@4fb61f4a))
AMR:
(a2 / and, op, c4 / country)
(b / bomb, mod, a / atom)
(c2 / country, name, n2 / name)
(c3 / continent, name, n3 / name)
(c4 / country, name, n4 / name)
(e / effort, purpose, o / obtain-01)
(e2 / energy, mod, n / nucleus)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o2 / official)
(h / have-org-role-91, ARG6, c3 / continent)
(n2 / name, op, "Iran")
(n3 / name, op, "Europe")
(n4 / name, op, "U.S.")
(o / obtain-01, ARG0, c2 / country)
(o / obtain-01, ARG1, t / technology)
(p / produce-01, ARG1, b / bomb)
(p2 / possible, domain, u / use-01)
(p3 / program, mod, c / civilian)
(p3 / program, mod, e2 / energy)
(p3 / program, poss, c2 / country)
(s / suspect-01, ARG0, a2 / and)
(s / suspect-01, ARG1, p3 / program)
(u / use-01, ARG1, t / technology)
(u / use-01, ARG2, p / produce-01)

Decoded in 1,300,115 microseconds
Sentence: U.S. and European officials suspect that Iran's civilian nuclear energy program masks an effort to obtain technology that could be used in the production of an atomic bomb.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 1-2:  and => and
Span 27-28:  atomic => atom
Span 28-29:  bomb => bomb
Span 8-9:  civilian => civilian
Span 19-20:  could => possible
Span 14-15:  effort => effort
Span 10-11:  energy => energy
Span 2-3:  European => (continent :name (name :op "Europe"))
Span 6-7:  Iran => (country :name (name :op "Iran"))
Span 9-10:  nuclear => nucleus
Span 16-17:  obtain => obtain-01
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 24-25:  production => produce-01
Span 11-12:  program => program
Span 4-5:  suspect => suspect-01
Span 17-18:  technology => technology
Span 0-1:  U.S. => (country :name (name :op "U.S."))
Span 21-22:  used => use-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),bomb,bomb,false), Span(27,28,List(1),atomic,atom,false), Span(24,25,List(2),production,produce-01,false), Span(21,22,List(3),used,use-01,false), Span(19,20,List(4),could,possible,false), Span(17,18,List(5),technology,technology,false), Span(16,17,List(6),obtain,obtain-01,false), Span(14,15,List(7),effort,effort,false), Span(11,12,List(8),program,program,false), Span(10,11,List(9),energy,energy,false), Span(9,10,List(10),nuclear,nucleus,false), Span(8,9,List(11),civilian,civilian,false), Span(6,7,List(14, 13, 12),Iran,(country :name (name :op "Iran")),false), Span(4,5,List(15),suspect,suspect-01,false), Span(3,4,List(17, 16),officials,(have-org-role-91 :ARG2 official),false), Span(2,3,List(20, 19, 18),European,(continent :name (name :op "Europe")),false), Span(1,2,List(21),and,and,false), Span(0,1,List(24, 23, 22),U.S.,(country :name (name :op "U.S.")),false)),Map(2 -> produce-01, 5 -> technology, 12 -> country, 8 -> program, 15 -> suspect-01, 21 -> and, 18 -> continent, 24 -> "U.S.", 7 -> effort, 1 -> atom, 17 -> official, 23 -> name, 4 -> possible, 11 -> civilian, 14 -> "Iran", 20 -> "Europe", 6 -> obtain-01, 9 -> energy, 0 -> bomb, 22 -> country, 16 -> have-org-role-91, 19 -> name, 10 -> nucleus, 3 -> use-01, 13 -> name),Map(e -> effort, n -> nucleus, h -> have-org-role-91, b -> bomb, t -> technology, p2 -> possible, e2 -> energy, n4 -> name, c4 -> country, s -> suspect-01, p -> produce-01, n3 -> name, c3 -> continent, a -> atom, o2 -> official, a2 -> and, c -> civilian, u -> use-01, o -> obtain-01, p3 -> program, n2 -> name, c2 -> country))),[Ljava.lang.String;@4fb0f2b9,Annotation([Ljava.lang.String;@79924b,[Ljava.lang.String;@7b9a4292,[Ljava.lang.String;@4a94ee4),Annotation([Ljava.lang.String;@4cc451f2,[Ljava.lang.String;@6379eb,[Ledu.cmu.lti.nlp.amr.Dependency;@294425a7),Annotation([Ljava.lang.String;@67d48005,[Ljava.lang.String;@9f116cc,[Ljava.lang.String;@12468a38),Annotation([Ljava.lang.String;@1aa7ecca,[Ljava.lang.String;@59309333,[Ledu.cmu.lti.nlp.amr.Entity;@5876a9af))
AMR:
(a2 / and, op, c4 / country)
(b / bomb, mod, a / atom)
(c2 / country, name, n2 / name)
(c3 / continent, name, n3 / name)
(c4 / country, name, n4 / name)
(e / effort, purpose, o / obtain-01)
(e2 / energy, mod, n / nucleus)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o2 / official)
(h / have-org-role-91, ARG6, c3 / continent)
(n2 / name, op, "Iran")
(n3 / name, op, "Europe")
(n4 / name, op, "U.S.")
(o / obtain-01, ARG0, c2 / country)
(o / obtain-01, ARG1, t / technology)
(p / produce-01, ARG1, b / bomb)
(p2 / possible, domain, u / use-01)
(p3 / program, mod, c / civilian)
(p3 / program, mod, e2 / energy)
(p3 / program, poss, c2 / country)
(s / suspect-01, ARG0, a2 / and)
(s / suspect-01, ARG1, p3 / program)
(u / use-01, ARG1, t / technology)
(u / use-01, ARG2, p / produce-01)

Decoded in 1,260,791 microseconds
Sentence: U.S. and European officials may impose a 4th round of sanctions on Tehran when the U.N. Security Council considers the issue of Iran's nuclear energy program most likely in September 2007.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 1-2:  and => and
Span 18-19:  considers => consider-01
Span 25-26:  energy => energy
Span 2-3:  European => (continent :name (name :op "Europe"))
Span 5-6:  impose => impose-01
Span 22-23:  Iran => (country :name (name :op "Iran"))
Span 20-21:  issue => issue
Span 28-29:  likely => likely
Span 4-5:  may => possible
Span 27-28:  most => most
Span 24-25:  nuclear => nucleus
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 26-27:  program => program
Span 8-9:  round => round
Span 10-11:  sanctions => sanction-02
Span 16-18:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 30-32:  September 2007 => (date-entity :month 9 :year 2007)
Span 12-13:  Tehran => (city :name (name :op "Tehran"))
Span 15-16:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))
Span 0-1:  U.S. => (country :name (name :op "U.S."))

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,32,List(2, 1, 0),September 2007,(date-entity :month 9 :year 2007),false), Span(28,29,List(3),likely,likely,false), Span(27,28,List(4),most,most,false), Span(26,27,List(5),program,program,false), Span(25,26,List(6),energy,energy,false), Span(24,25,List(7),nuclear,nucleus,false), Span(22,23,List(10, 9, 8),Iran,(country :name (name :op "Iran")),false), Span(20,21,List(11),issue,issue,false), Span(18,19,List(12),considers,consider-01,false), Span(16,18,List(16, 15, 14, 13),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(15,16,List(20, 19, 18, 17),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false), Span(12,13,List(23, 22, 21),Tehran,(city :name (name :op "Tehran")),false), Span(10,11,List(24),sanctions,sanction-02,false), Span(8,9,List(25),round,round,false), Span(5,6,List(26),impose,impose-01,false), Span(4,5,List(27),may,possible,false), Span(3,4,List(29, 28),officials,(have-org-role-91 :ARG2 official),false), Span(2,3,List(32, 31, 30),European,(continent :name (name :op "Europe")),false), Span(1,2,List(33),and,and,false), Span(0,1,List(36, 35, 34),U.S.,(country :name (name :op "U.S.")),false)),Map(30 -> continent, 2 -> 2007, 5 -> program, 33 -> and, 27 -> possible, 12 -> consider-01, 8 -> country, 15 -> "Council", 36 -> "U.S.", 21 -> city, 18 -> government-organization, 24 -> sanction-02, 35 -> name, 7 -> nucleus, 1 -> 9, 17 -> have-org-role-91, 23 -> "Tehran", 26 -> impose-01, 4 -> most, 11 -> issue, 32 -> "Europe", 14 -> name, 29 -> official, 20 -> "U.N.", 34 -> country, 28 -> have-org-role-91, 6 -> energy, 9 -> name, 0 -> date-entity, 22 -> name, 16 -> "Security", 19 -> name, 10 -> "Iran", 3 -> likely, 31 -> name, 25 -> round, 13 -> organization),Map(e -> energy, n -> nucleus, h -> have-org-role-91, 2 -> 2007, h2 -> have-org-role-91, n7 -> name, p2 -> possible, c4 -> continent, n4 -> name, s -> sanction-02, m -> most, d -> date-entity, p -> program, g -> government-organization, a -> and, n3 -> name, c3 -> city, n6 -> name, o2 -> official, i2 -> impose-01, i -> issue, r -> round, c -> country, l -> likely, 9 -> 9, o -> organization, c2 -> consider-01, n2 -> name, c5 -> country, n5 -> name))),[Ljava.lang.String;@52bf72b5,Annotation([Ljava.lang.String;@37afeb11,[Ljava.lang.String;@515aebb0,[Ljava.lang.String;@dd8ba08),Annotation([Ljava.lang.String;@245b4bdc,[Ljava.lang.String;@6c64cb25,[Ledu.cmu.lti.nlp.amr.Dependency;@6ae5aa72),Annotation([Ljava.lang.String;@222545dc,[Ljava.lang.String;@5c5eefef,[Ljava.lang.String;@16293aa2),Annotation([Ljava.lang.String;@5158b42f,[Ljava.lang.String;@595b007d,[Ledu.cmu.lti.nlp.amr.Entity;@72d1ad2e))
AMR:
(a / and, op, c5 / country)
(c / country, name, n2 / name)
(c2 / consider-01, ARG0, o / organization)
(c2 / consider-01, ARG1, i / issue)
(c2 / consider-01, time, d / date-entity)
(c3 / city, name, n5 / name)
(c4 / continent, name, n6 / name)
(c5 / country, name, n7 / name)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2007)
(e / energy, mod, n / nucleus)
(g / government-organization, name, n4 / name)
(h / have-org-role-91, ARG0, o / organization)
(h / have-org-role-91, ARG1, g / government-organization)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, o2 / official)
(h2 / have-org-role-91, ARG6, c4 / continent)
(i / issue, poss, p / program)
(i2 / impose-01, ARG0, a / and)
(i2 / impose-01, ARG1, r / round)
(l / likely, degree, m / most)
(m / most, calendar, p / program)
(n2 / name, op, "Iran")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(n4 / name, op, "U.N.")
(n5 / name, op, "Tehran")
(n6 / name, op, "Europe")
(n7 / name, op, "U.S.")
(o / organization, name, n3 / name)
(p / program, mod, e / energy)
(p / program, poss, c / country)
(p2 / possible, domain, i2 / impose-01)
(r / round, mod, c4 / continent)
(s / sanction-02, ARG0, r / round)
(s / sanction-02, ARG1, c3 / city)

Decoded in 2,678,103 microseconds
Sentence: The International Atomic Energy Agency distributed limited copies of the IAEA report before a meeting on 11 September 2007 of the 35 members of the IAEA board.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (organization :name (name :op "IAEA"))
mkDayMonthYear(11	September	2007,11,September,2007)
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 16-19:  11 September 2007 => (date-entity :day 11 :month 9 :year 2007)
Span 21-22:  35 => 35
Span 12-13:  before => before
Span 26-27:  board => board-01
Span 7-8:  copies => copy-01
Span 5-6:  distributed => distribute-01
Span 25-26:  IAEA => (organization :name (name :op "IAEA"))
Span 10-11:  IAEA => (organization :name (name :op "IAEA"))
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 6-7:  limited => limit-01
Span 14-15:  meeting => meet-03
Span 22-23:  members => (have-org-role-91 :ARG2 member)
Span 11-12:  report => report

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),board,board-01,false), Span(25,26,List(3, 2, 1),IAEA,(organization :name (name :op "IAEA")),false), Span(22,23,List(5, 4),members,(have-org-role-91 :ARG2 member),false), Span(21,22,List(6),35,35,false), Span(16,19,List(10, 9, 8, 7),11 September 2007,(date-entity :day 11 :month 9 :year 2007),false), Span(14,15,List(11),meeting,meet-03,false), Span(12,13,List(12),before,before,false), Span(11,12,List(13),report,report,false), Span(10,11,List(16, 15, 14),IAEA,(organization :name (name :op "IAEA")),false), Span(7,8,List(17),copies,copy-01,false), Span(6,7,List(18),limited,limit-01,false), Span(5,6,List(19),distributed,distribute-01,false), Span(1,5,List(25, 24, 23, 22, 21, 20),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> name, 5 -> member, 12 -> before, 8 -> 11, 15 -> name, 21 -> name, 18 -> limit-01, 24 -> "Energy", 7 -> date-entity, 1 -> organization, 17 -> copy-01, 23 -> "Atomic", 4 -> have-org-role-91, 11 -> meet-03, 14 -> organization, 20 -> organization, 6 -> 35, 9 -> 9, 0 -> board-01, 22 -> "International", 16 -> "IAEA", 19 -> distribute-01, 10 -> 2007, 3 -> "IAEA", 25 -> "Agency", 13 -> report),Map(n -> name, h -> have-org-role-91, 2 -> 2007, b -> board-01, o3 -> organization, m2 -> meet-03, b2 -> before, m -> member, d -> date-entity, 1 -> 11, n3 -> name, d2 -> distribute-01, o2 -> organization, r -> report, c -> copy-01, l -> limit-01, 9 -> 9, o -> organization, 3 -> 35, n2 -> name))),[Ljava.lang.String;@2d7275fc,Annotation([Ljava.lang.String;@399f45b1,[Ljava.lang.String;@38c6f217,[Ljava.lang.String;@478190fc),Annotation([Ljava.lang.String;@79e2c065,[Ljava.lang.String;@3a93b025,[Ledu.cmu.lti.nlp.amr.Dependency;@35cabb2a),Annotation([Ljava.lang.String;@7e07db1f,[Ljava.lang.String;@1189dd52,[Ljava.lang.String;@36bc55de),Annotation([Ljava.lang.String;@564fabc8,[Ljava.lang.String;@16d04d3d,[Ledu.cmu.lti.nlp.amr.Entity;@49ec71f8))
AMR:
(b / board-01, ARG0, o / organization)
(b / board-01, ARG1, o2 / organization)
(b2 / before, op, m2 / meet-03)
(c / copy-01, ARG0, o3 / organization)
(c / copy-01, ARG1, r / report)
(d / date-entity, day, 1 / 11)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2007)
(d2 / distribute-01, ARG0, o3 / organization)
(d2 / distribute-01, ARG1, 3 / 35)
(d2 / distribute-01, time, b2 / before)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m / member)
(l / limit-01, ARG1, c / copy-01)
(m2 / meet-03, time, d / date-entity)
(n / name, op, "IAEA")
(n2 / name, op, "IAEA")
(n3 / name, op, "Agency")
(n3 / name, op, "Atomic")
(n3 / name, op, "Energy")
(n3 / name, op, "International")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(o3 / organization, name, n3 / name)
(r / report, poss, o2 / organization)

Decoded in 1,206,610 microseconds
Sentence: The findings reflect an agency agreement on 21 August 2007 with Tehran that Iranian officials began publicizing the week of 12 August 2007.

mkDayMonthYear(21	August	2007,21,August,2007)
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(12	August	2007,12,August,2007)
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Tehran"))
Spans:
Span 20-23:  12 August 2007 => (date-entity :day 12 :month 8 :year 2007)
Span 7-10:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Span 4-5:  agency => agency
Span 5-6:  agreement => agree-01
Span 15-16:  began => begin-01
Span 1-2:  findings => (thing :ARG1-of find-01)
Span 13-14:  Iranian => (country :name (name :op "Iran"))
Span 14-15:  officials => (have-org-role-91 :ARG2 official)
Span 2-3:  reflect => reflect-01
Span 11-12:  Tehran => (city :name (name :op "Tehran"))
Span 18-19:  week => week

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,23,List(3, 2, 1, 0),12 August 2007,(date-entity :day 12 :month 8 :year 2007),false), Span(18,19,List(4),week,week,false), Span(15,16,List(5),began,begin-01,false), Span(14,15,List(7, 6),officials,(have-org-role-91 :ARG2 official),false), Span(13,14,List(10, 9, 8),Iranian,(country :name (name :op "Iran")),false), Span(11,12,List(13, 12, 11),Tehran,(city :name (name :op "Tehran")),false), Span(7,10,List(17, 16, 15, 14),21 August 2007,(date-entity :day 21 :month 8 :year 2007),false), Span(5,6,List(18),agreement,agree-01,false), Span(4,5,List(19),agency,agency,false), Span(2,3,List(20),reflect,reflect-01,false), Span(1,2,List(22, 21),findings,(thing :ARG1-of find-01),false)),Map(2 -> 8, 5 -> begin-01, 12 -> name, 15 -> 21, 8 -> country, 21 -> thing, 18 -> agree-01, 7 -> official, 17 -> 2007, 1 -> 12, 4 -> week, 11 -> city, 14 -> date-entity, 20 -> reflect-01, 6 -> have-org-role-91, 22 -> find-01, 0 -> date-entity, 9 -> name, 16 -> 8, 19 -> agency, 3 -> 2007, 10 -> "Iran", 13 -> "Tehran"),Map(w -> week, n -> name, h -> have-org-role-91, 2 -> 2007, t -> thing, b -> begin-01, 8 -> 8, d -> date-entity, 1 -> 12, 23 -> 2007, a -> agree-01, 82 -> 8, d2 -> date-entity, r -> reflect-01, a2 -> agency, c -> country, f -> find-01, 22 -> 21, o -> official, c2 -> city, n2 -> name))),[Ljava.lang.String;@1d2adfbe,Annotation([Ljava.lang.String;@36902638,[Ljava.lang.String;@223d2c72,[Ljava.lang.String;@8f4ea7c),Annotation([Ljava.lang.String;@436813f3,[Ljava.lang.String;@74fe5c40,[Ledu.cmu.lti.nlp.amr.Dependency;@3febb011),Annotation([Ljava.lang.String;@10e31a9a,[Ljava.lang.String;@131774fe,[Ljava.lang.String;@158d2680),Annotation([Ljava.lang.String;@77847718,[Ljava.lang.String;@7f3b84b8,[Ledu.cmu.lti.nlp.amr.Entity;@57a3af25))
AMR:
(a / agree-01, ARG1, a2 / agency)
(b / begin-01, ARG0, o / official)
(b / begin-01, ARG1, w / week)
(b / begin-01, time, d / date-entity)
(b / begin-01, time, d2 / date-entity)
(c / country, name, n / name)
(c2 / city, name, n2 / name)
(d / date-entity, day, 1 / 12)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 2 / 2007)
(d2 / date-entity, day, 22 / 21)
(d2 / date-entity, month, 82 / 8)
(d2 / date-entity, year, 23 / 2007)
(f / find-01, ARG1, t / thing)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Iran")
(n2 / name, op, "Tehran")
(r / reflect-01, ARG0, t / thing)
(r / reflect-01, ARG1, b / begin-01)
(r / reflect-01, ARG2, a / agree-01)
(r / reflect-01, ARG3, c2 / city)

Decoded in 1,337,961 microseconds
Sentence: The accord said that there were no remaining issues and ambiguities regarding Iran's nuclear program and activities.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 1-2:  accord => accord
Span 17-18:  activities => activity
Span 16-17:  and => and
Span 9-10:  and => and
Span 12-13:  Iran => (country :name (name :op "Iran"))
Span 8-9:  issues => issue
Span 6-7:  no => -
Span 14-15:  nuclear => nucleus
Span 15-16:  program => program
Span 7-8:  remaining => remain-01
Span 2-3:  said => say-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),activities,activity,false), Span(16,17,List(1),and,and,false), Span(15,16,List(2),program,program,false), Span(14,15,List(3),nuclear,nucleus,false), Span(12,13,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(9,10,List(7),and,and,false), Span(8,9,List(8),issues,issue,false), Span(7,8,List(9),remaining,remain-01,false), Span(6,7,List(10),no,-,false), Span(2,3,List(11),said,say-01,false), Span(1,2,List(12),accord,accord,false)),Map(2 -> program, 5 -> name, 12 -> accord, 8 -> issue, 7 -> and, 1 -> and, 4 -> country, 11 -> say-01, 6 -> "Iran", 0 -> activity, 9 -> remain-01, 3 -> nucleus, 10 -> -),Map(n -> nucleus, s -> say-01, a3 -> and, p -> program, a -> activity, r -> remain-01, i -> issue, a2 -> and, - -> -, c -> country, n2 -> name, a4 -> accord))),[Ljava.lang.String;@2b662a77,Annotation([Ljava.lang.String;@7f0eb4b4,[Ljava.lang.String;@5c33f1a9,[Ljava.lang.String;@1623b78d),Annotation([Ljava.lang.String;@c8c12ac,[Ljava.lang.String;@6adbc9d,[Ledu.cmu.lti.nlp.amr.Dependency;@4550bb58),Annotation([Ljava.lang.String;@4ec4f3a0,[Ljava.lang.String;@223191a6,[Ljava.lang.String;@49139829),Annotation([Ljava.lang.String;@9597028,[Ljava.lang.String;@6069db50,[Ledu.cmu.lti.nlp.amr.Entity;@4efbca5a))
AMR:
(a2 / and, op, a / activity)
(a2 / and, op, p / program)
(a3 / and, op, c / country)
(a3 / and, op, i / issue)
(c / country, name, n2 / name)
(n2 / name, op, "Iran")
(p / program, mod, n / nucleus)
(p / program, poss, c / country)
(r / remain-01, ARG1, i / issue)
(r / remain-01, ARG6, - / -)
(s / say-01, ARG0, a4 / accord)
(s / say-01, ARG1, a2 / and)

Decoded in 227,787 microseconds
Sentence: According to an account by Reuters news agency the IAEA report said the work plan is a significant step forward.

NER Entity: (organization :name (name :op "Reuters"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 3-4:  account => account
Span 7-8:  agency => agency
Span 19-20:  forward => forward
Span 9-10:  IAEA => (organization :name (name :op "IAEA"))
Span 6-7:  news => news
Span 14-15:  plan => plan-01
Span 10-11:  report => report
Span 11-12:  said => say-01
Span 17-18:  significant => significant
Span 18-19:  step => step-01
Span 13-14:  work => work-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),forward,forward,false), Span(18,19,List(1),step,step-01,false), Span(17,18,List(2),significant,significant,false), Span(14,15,List(3),plan,plan-01,false), Span(13,14,List(4),work,work-01,false), Span(11,12,List(5),said,say-01,false), Span(10,11,List(6),report,report,false), Span(9,10,List(9, 8, 7),IAEA,(organization :name (name :op "IAEA")),false), Span(7,8,List(10),agency,agency,false), Span(6,7,List(11),news,news,false), Span(3,4,List(12),account,account,false)),Map(2 -> significant, 5 -> say-01, 12 -> account, 8 -> name, 7 -> organization, 1 -> step-01, 4 -> work-01, 11 -> news, 6 -> report, 0 -> forward, 9 -> "IAEA", 3 -> plan-01, 10 -> agency),Map(n -> name, w -> work-01, s2 -> significant, s -> step-01, p -> plan-01, a -> agency, a2 -> account, r -> report, s3 -> say-01, o -> organization, f -> forward, n2 -> news))),[Ljava.lang.String;@1b7cc17c,Annotation([Ljava.lang.String;@59662a0b,[Ljava.lang.String;@77fbd92c,[Ljava.lang.String;@67c27493),Annotation([Ljava.lang.String;@1a482e36,[Ljava.lang.String;@72967906,[Ledu.cmu.lti.nlp.amr.Dependency;@5b8dfcc1),Annotation([Ljava.lang.String;@2f9f7dcf,[Ljava.lang.String;@747ddf94,[Ljava.lang.String;@35e2d654),Annotation([Ljava.lang.String;@1bd4fdd,[Ljava.lang.String;@55183b20,[Ledu.cmu.lti.nlp.amr.Entity;@4f83df68))
AMR:
(a / agency, mod, n2 / news)
(a2 / account, poss, a / agency)
(n / name, op, "IAEA")
(o / organization, name, n / name)
(p / plan-01, ARG1, f / forward)
(p / plan-01, mod, s / step-01)
(r / report, poss, o / organization)
(s / step-01, ARG1, a / agency)
(s / step-01, mod, s2 / significant)
(s3 / say-01, ARG0, r / report)
(s3 / say-01, ARG1, s / step-01)
(w / work-01, ARG1, p / plan-01)

Decoded in 503,026 microseconds
Sentence: Reuters quoted a senior U.N. official as stating the Iranian government's efforts to enrich uranium had slowed.

NER Entity: (organization :name (name :op "Reuters"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "U.N."))
Spans:
Span 12-13:  efforts => effort
Span 14-15:  enrich => enrich-01
Span 10-11:  government => (government-organization :ARG0-of govern-01)
Span 9-10:  Iranian => (country :name (name :op "Iran"))
Span 5-6:  official => (have-org-role-91 :ARG2 official)
Span 1-2:  quoted => quote-01
Span 3-4:  senior => senior
Span 17-18:  slowed => slow-01
Span 7-8:  stating => state-01
Span 4-5:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))
Span 15-16:  uranium => uranium

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),slowed,slow-01,false), Span(15,16,List(1),uranium,uranium,false), Span(14,15,List(2),enrich,enrich-01,false), Span(12,13,List(3),efforts,effort,false), Span(10,11,List(5, 4),government,(government-organization :ARG0-of govern-01),false), Span(9,10,List(8, 7, 6),Iranian,(country :name (name :op "Iran")),false), Span(7,8,List(9),stating,state-01,false), Span(5,6,List(11, 10),official,(have-org-role-91 :ARG2 official),false), Span(4,5,List(15, 14, 13, 12),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false), Span(3,4,List(16),senior,senior,false), Span(1,2,List(17),quoted,quote-01,false)),Map(2 -> enrich-01, 5 -> govern-01, 12 -> have-org-role-91, 15 -> "U.N.", 8 -> "Iran", 7 -> name, 17 -> quote-01, 1 -> uranium, 4 -> government-organization, 11 -> official, 14 -> name, 6 -> country, 0 -> slow-01, 9 -> state-01, 16 -> senior, 3 -> effort, 10 -> have-org-role-91, 13 -> government-organization),Map(e -> enrich-01, n -> name, h -> have-org-role-91, g3 -> government-organization, q -> quote-01, s2 -> state-01, h2 -> have-org-role-91, e2 -> effort, s -> slow-01, g2 -> govern-01, g -> government-organization, s3 -> senior, c -> country, u -> uranium, o -> official, n2 -> name))),[Ljava.lang.String;@6cf0e0ba,Annotation([Ljava.lang.String;@7d8995e,[Ljava.lang.String;@130d63be,[Ljava.lang.String;@42a48628),Annotation([Ljava.lang.String;@293a5bf6,[Ljava.lang.String;@6aeb35e6,[Ledu.cmu.lti.nlp.amr.Dependency;@1283bb96),Annotation([Ljava.lang.String;@74f0ea28,[Ljava.lang.String;@f6efaab,[Ljava.lang.String;@3c19aaa5),Annotation([Ljava.lang.String;@3349e9bb,[Ljava.lang.String;@409bf450,[Ledu.cmu.lti.nlp.amr.Entity;@38d8f54a))
AMR:
(c / country, name, n / name)
(e / enrich-01, ARG1, u / uranium)
(e2 / effort, poss, g / government-organization)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(g3 / government-organization, name, n2 / name)
(h / have-org-role-91, ARG1, g3 / government-organization)
(h / have-org-role-91, ARG2, o / official)
(h2 / have-org-role-91, ARG1, g3 / government-organization)
(n / name, op, "Iran")
(n2 / name, op, "U.N.")
(o / official, mod, s3 / senior)
(q / quote-01, ARG1, h / have-org-role-91)
(q / quote-01, ARG2, s2 / state-01)
(s / slow-01, ARG1, u / uranium)
(s2 / state-01, ARG1, e2 / effort)
(s2 / state-01, ARG2, e / enrich-01)

Decoded in 1,036,950 microseconds
Sentence: The IAEA report stated that Iranian officials must continue to build confidence about the scope and nature of Iran's present and future nuclear program.

NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 12-13:  about => about
Span 21-22:  and => and
Span 15-16:  and => and
Span 10-11:  build => build-01
Span 11-12:  confidence => confidence
Span 8-9:  continue => continue-01
Span 22-23:  future => future
Span 1-2:  IAEA => (organization :name (name :op "IAEA"))
Span 18-19:  Iran => (country :name (name :op "Iran"))
Span 5-6:  Iranian => (country :name (name :op "Iran"))
Span 16-17:  nature => nature
Span 23-24:  nuclear => nucleus
Span 6-7:  officials => (have-org-role-91 :ARG2 official)
Span 20-21:  present => present
Span 24-25:  program => program
Span 2-3:  report => report
Span 3-4:  stated => state-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),program,program,false), Span(23,24,List(1),nuclear,nucleus,false), Span(22,23,List(2),future,future,false), Span(21,22,List(3),and,and,false), Span(20,21,List(4),present,present,false), Span(18,19,List(7, 6, 5),Iran,(country :name (name :op "Iran")),false), Span(16,17,List(8),nature,nature,false), Span(15,16,List(9),and,and,false), Span(12,13,List(10),about,about,false), Span(11,12,List(11),confidence,confidence,false), Span(10,11,List(12),build,build-01,false), Span(8,9,List(13),continue,continue-01,false), Span(6,7,List(15, 14),officials,(have-org-role-91 :ARG2 official),false), Span(5,6,List(18, 17, 16),Iranian,(country :name (name :op "Iran")),false), Span(3,4,List(19),stated,state-01,false), Span(2,3,List(20),report,report,false), Span(1,2,List(23, 22, 21),IAEA,(organization :name (name :op "IAEA")),false)),Map(2 -> future, 5 -> country, 12 -> build-01, 15 -> official, 8 -> nature, 21 -> organization, 18 -> "Iran", 7 -> "Iran", 17 -> name, 1 -> nucleus, 23 -> "IAEA", 4 -> present, 11 -> confidence, 14 -> have-org-role-91, 20 -> report, 6 -> name, 22 -> name, 0 -> program, 9 -> and, 16 -> country, 19 -> state-01, 3 -> and, 10 -> about, 13 -> continue-01),Map(n -> nucleus, h -> have-org-role-91, b -> build-01, p2 -> present, n4 -> name, c4 -> country, a3 -> about, s -> state-01, p -> program, a -> and, n3 -> nature, c3 -> continue-01, o2 -> organization, r -> report, a2 -> and, c -> country, f -> future, o -> official, n2 -> name, c2 -> confidence, n5 -> name))),[Ljava.lang.String;@49e53c76,Annotation([Ljava.lang.String;@351d00c0,[Ljava.lang.String;@2a3b5b47,[Ljava.lang.String;@55b699ef),Annotation([Ljava.lang.String;@35d019a3,[Ljava.lang.String;@689604d9,[Ledu.cmu.lti.nlp.amr.Dependency;@18078bef),Annotation([Ljava.lang.String;@799f10e1,[Ljava.lang.String;@4c371370,[Ljava.lang.String;@145f66e3),Annotation([Ljava.lang.String;@3023df74,[Ljava.lang.String;@313ac989,[Ledu.cmu.lti.nlp.amr.Entity;@4562e04d))
AMR:
(a / and, op, n3 / nature)
(a / and, op, p2 / present)
(a2 / and, op, n3 / nature)
(a3 / about, op, a2 / and)
(b / build-01, ARG0, o / official)
(b / build-01, ARG1, c2 / confidence)
(c / country, name, n2 / name)
(c2 / confidence, location, a3 / about)
(c3 / continue-01, ARG1, b / build-01)
(c4 / country, name, n4 / name)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, o / official)
(n2 / name, op, "Iran")
(n4 / name, op, "Iran")
(n5 / name, op, "IAEA")
(o2 / organization, name, n5 / name)
(p / program, mod, n / nucleus)
(p / program, poss, c / country)
(p / program, time, f / future)
(p2 / present, poss, c / country)
(r / report, poss, o2 / organization)
(s / state-01, ARG0, r / report)
(s / state-01, ARG1, c3 / continue-01)

Decoded in 1,360,725 microseconds
Sentence: Iranian officials on 30 August 2007 stated cooperation with the IAEA possibly to prevent a further round of international sanctions.

NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(30	August	2007,30,August,2007)
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 3-6:  30 August 2007 => (date-entity :day 30 :month 8 :year 2007)
Span 7-8:  cooperation => cooperate-01
Span 15-16:  further => further
Span 10-11:  IAEA => (organization :name (name :op "IAEA"))
Span 18-19:  international => international
Span 0-1:  Iranian => (country :name (name :op "Iran"))
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 11-12:  possibly => possible
Span 13-14:  prevent => prevent-01
Span 16-17:  round => round
Span 19-20:  sanctions => sanction-02
Span 6-7:  stated => state-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),sanctions,sanction-02,false), Span(18,19,List(1),international,international,false), Span(16,17,List(2),round,round,false), Span(15,16,List(3),further,further,false), Span(13,14,List(4),prevent,prevent-01,false), Span(11,12,List(5),possibly,possible,false), Span(10,11,List(8, 7, 6),IAEA,(organization :name (name :op "IAEA")),false), Span(7,8,List(9),cooperation,cooperate-01,false), Span(6,7,List(10),stated,state-01,false), Span(3,6,List(14, 13, 12, 11),30 August 2007,(date-entity :day 30 :month 8 :year 2007),false), Span(1,2,List(16, 15),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(19, 18, 17),Iranian,(country :name (name :op "Iran")),false)),Map(2 -> round, 5 -> possible, 12 -> 30, 15 -> have-org-role-91, 8 -> "IAEA", 18 -> name, 7 -> name, 17 -> country, 1 -> international, 4 -> prevent-01, 11 -> date-entity, 14 -> 2007, 6 -> organization, 0 -> sanction-02, 9 -> cooperate-01, 16 -> official, 19 -> "Iran", 3 -> further, 10 -> state-01, 13 -> 8),Map(n -> name, h -> have-org-role-91, 2 -> 2007, s2 -> state-01, 8 -> 8, p2 -> possible, s -> sanction-02, d -> date-entity, p -> prevent-01, o2 -> official, i -> international, r -> round, c -> cooperate-01, f -> further, o -> organization, 3 -> 30, n2 -> name, c2 -> country))),[Ljava.lang.String;@2a65fe7c,Annotation([Ljava.lang.String;@4135c3b,[Ljava.lang.String;@6302bbb1,[Ljava.lang.String;@31304f14),Annotation([Ljava.lang.String;@34a3d150,[Ljava.lang.String;@2a4fb17b,[Ledu.cmu.lti.nlp.amr.Dependency;@5c6648b0),Annotation([Ljava.lang.String;@6f1de4c7,[Ljava.lang.String;@459e9125,[Ljava.lang.String;@128d2484),Annotation([Ljava.lang.String;@7cc0cdad,[Ljava.lang.String;@7c7b252e,[Ledu.cmu.lti.nlp.amr.Entity;@4d5d943d))
AMR:
(c / cooperate-01, ARG0, o / organization)
(c / cooperate-01, ARG1, p / prevent-01)
(c2 / country, name, n2 / name)
(d / date-entity, day, 3 / 30)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 2 / 2007)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o2 / official)
(h / have-org-role-91, time, d / date-entity)
(n / name, op, "IAEA")
(n2 / name, op, "Iran")
(o / organization, name, n / name)
(p / prevent-01, ARG1, r / round)
(p / prevent-01, mod, p2 / possible)
(r / round, mod, f / further)
(s / sanction-02, ARG1, c2 / country)
(s / sanction-02, mod, i / international)
(s2 / state-01, ARG1, c / cooperate-01)
(s2 / state-01, time, d / date-entity)

Decoded in 856,465 microseconds
Sentence: Iran's representative to the IAEA Ali Asghar SOLTANIEH stated to Tehran's Fars news agency that the report emphasized that there exists no sign or evidence indicating diversion of Iran's nuclear activities and that all of Iran's nuclear materials have been audited.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (person :name (name :op "Ali" :op "Asghar"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (organization :name (name :op "Fars"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 33-34:  activities => activity
Span 15-16:  agency => agency
Span 6-8:  Ali Asghar => (person :name (name :op "Ali" :op "Asghar"))
Span 36-37:  all => all
Span 34-35:  and => and
Span 26-27:  evidence => (thing :ARG0-of evidence-01)
Span 5-6:  IAEA => (organization :name (name :op "IAEA"))
Span 38-39:  Iran => (country :name (name :op "Iran"))
Span 30-31:  Iran => (country :name (name :op "Iran"))
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 41-42:  materials => material
Span 14-15:  news => news
Span 23-24:  no => -
Span 40-41:  nuclear => nucleus
Span 32-33:  nuclear => nucleus
Span 25-26:  or => or
Span 18-19:  report => report
Span 2-3:  representative => represent-01
Span 24-25:  sign => sign-02
Span 9-10:  stated => state-01
Span 11-12:  Tehran => (city :name (name :op "Tehran"))

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),materials,material,false), Span(40,41,List(1),nuclear,nucleus,false), Span(38,39,List(4, 3, 2),Iran,(country :name (name :op "Iran")),false), Span(36,37,List(5),all,all,false), Span(34,35,List(6),and,and,false), Span(33,34,List(7),activities,activity,false), Span(32,33,List(8),nuclear,nucleus,false), Span(30,31,List(11, 10, 9),Iran,(country :name (name :op "Iran")),false), Span(26,27,List(13, 12),evidence,(thing :ARG0-of evidence-01),false), Span(25,26,List(14),or,or,false), Span(24,25,List(15),sign,sign-02,false), Span(23,24,List(16),no,-,false), Span(18,19,List(17),report,report,false), Span(15,16,List(18),agency,agency,false), Span(14,15,List(19),news,news,false), Span(11,12,List(22, 21, 20),Tehran,(city :name (name :op "Tehran")),false), Span(9,10,List(23),stated,state-01,false), Span(6,8,List(27, 26, 25, 24),Ali Asghar,(person :name (name :op "Ali" :op "Asghar")),false), Span(5,6,List(30, 29, 28),IAEA,(organization :name (name :op "IAEA")),false), Span(2,3,List(31),representative,represent-01,false), Span(0,1,List(34, 33, 32),Iran,(country :name (name :op "Iran")),false)),Map(30 -> "IAEA", 2 -> country, 5 -> all, 33 -> name, 27 -> "Asghar", 12 -> thing, 8 -> nucleus, 15 -> sign-02, 21 -> name, 18 -> agency, 24 -> person, 7 -> activity, 1 -> nucleus, 17 -> report, 23 -> state-01, 26 -> "Ali", 4 -> "Iran", 11 -> "Iran", 32 -> country, 14 -> or, 29 -> name, 20 -> city, 34 -> "Iran", 28 -> organization, 6 -> and, 9 -> country, 0 -> material, 22 -> "Tehran", 16 -> -, 19 -> news, 10 -> name, 3 -> name, 31 -> represent-01, 25 -> name, 13 -> evidence-01),Map(e -> evidence-01, n -> nucleus, s2 -> state-01, t -> thing, n7 -> name, c4 -> country, n4 -> name, a3 -> activity, s -> sign-02, m -> material, r2 -> represent-01, p -> person, n3 -> nucleus, a -> all, c3 -> city, n6 -> name, o2 -> organization, n9 -> name, a2 -> and, r -> report, - -> -, c -> country, n8 -> name, o -> or, c2 -> country, n2 -> name, a4 -> agency, n5 -> news))),[Ljava.lang.String;@368f2016,Annotation([Ljava.lang.String;@4c583ecf,[Ljava.lang.String;@692f203f,[Ljava.lang.String;@48f2bd5b),Annotation([Ljava.lang.String;@7b2bbc3,[Ljava.lang.String;@a1153bc,[Ledu.cmu.lti.nlp.amr.Dependency;@1aafa419),Annotation([Ljava.lang.String;@47eaca72,[Ljava.lang.String;@55141def,[Ljava.lang.String;@55182842),Annotation([Ljava.lang.String;@3270d194,[Ljava.lang.String;@235834f2,[Ledu.cmu.lti.nlp.amr.Entity;@5656be13))
AMR:
(a2 / and, op, a3 / activity)
(a2 / and, op, c / country)
(a2 / and, op, r / report)
(a2 / and, op, t / thing)
(a3 / activity, mod, n3 / nucleus)
(a3 / activity, poss, c2 / country)
(a4 / agency, mod, n5 / news)
(a4 / agency, poss, c3 / city)
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(c3 / city, name, n6 / name)
(c4 / country, name, n9 / name)
(e / evidence-01, ARG0, t / thing)
(e / evidence-01, ARG1, n / nucleus)
(m / material, poss, c / country)
(n2 / name, op, "Iran")
(n4 / name, op, "Iran")
(n6 / name, op, "Tehran")
(n7 / name, op, "Ali")
(n7 / name, op, "Asghar")
(n8 / name, op, "IAEA")
(n9 / name, op, "Iran")
(o / or, op, s / sign-02)
(o / or, op, t / thing)
(o2 / organization, name, n8 / name)
(p / person, name, n7 / name)
(p / person, poss, o2 / organization)
(r2 / represent-01, ARG0, c4 / country)
(r2 / represent-01, ARG1, o2 / organization)
(s / sign-02, ARG1, a / all)
(s / sign-02, ARG6, - / -)
(s2 / state-01, ARG0, r2 / represent-01)
(s2 / state-01, ARG1, a2 / and)
(s2 / state-01, ARG2, a4 / agency)

Decoded in 1,246,784 microseconds
Sentence: Some Nonproliferation Experts stated the IAEA was ceding too much to Iran.

NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 2-3:  Experts => (person :ARG1-of expert-41)
Span 5-6:  IAEA => (organization :name (name :op "IAEA"))
Span 11-12:  Iran => (country :name (name :op "Iran"))
Span 9-10:  much => much
Span 0-1:  Some => some
Span 3-4:  stated => state-01
Span 8-9:  too => too

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Iran,(country :name (name :op "Iran")),false), Span(9,10,List(3),much,much,false), Span(8,9,List(4),too,too,false), Span(5,6,List(7, 6, 5),IAEA,(organization :name (name :op "IAEA")),false), Span(3,4,List(8),stated,state-01,false), Span(2,3,List(10, 9),Experts,(person :ARG1-of expert-41),false), Span(0,1,List(11),Some,some,false)),Map(2 -> "Iran", 5 -> organization, 8 -> state-01, 7 -> "IAEA", 1 -> name, 11 -> some, 4 -> too, 6 -> name, 9 -> person, 0 -> country, 10 -> expert-41, 3 -> much),Map(e -> expert-41, n -> name, s2 -> some, t -> too, s -> state-01, m -> much, p -> person, c -> country, o -> organization, n2 -> name))),[Ljava.lang.String;@14cd1699,Annotation([Ljava.lang.String;@77888435,[Ljava.lang.String;@73a1e9a9,[Ljava.lang.String;@71d44a3),Annotation([Ljava.lang.String;@7b98f307,[Ljava.lang.String;@4802796d,[Ledu.cmu.lti.nlp.amr.Dependency;@34123d65),Annotation([Ljava.lang.String;@59474f18,[Ljava.lang.String;@65fb9ffc,[Ljava.lang.String;@3e694b3f),Annotation([Ljava.lang.String;@1bb5a082,[Ljava.lang.String;@78691363,[Ledu.cmu.lti.nlp.amr.Entity;@41d477ed))
AMR:
(c / country, name, n / name)
(e / expert-41, ARG1, p / person)
(e / expert-41, ARG6, s2 / some)
(m / much, degree, t / too)
(n / name, op, "Iran")
(n2 / name, op, "IAEA")
(o / organization, mod, c / country)
(o / organization, name, n2 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, o / organization)
(s / state-01, ARG6, t / too)

Decoded in 432,424 microseconds
Sentence: Arms-control experts David Albright and Jacqueline Shire of the Washington-based Institute for Science and International Security wrote in a criticism published the week of 19 August 2007 that the idea of closing files violates fundamental safeguards principles and that the agreement does not specify that Iranian officials would provide the IAEA access to key people, facilities, and documents that are needed to verify Iranian answers to the IAEA's questions.

NER Entity: (person :name (name :op "David" :op "Albright"))
NER Entity: (person :name (name :op "Jacqueline" :op "Shire"))
NER Entity: (organization :name (name :op "Washington" :op "-" :op "based" :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
mkDayMonthYear(19	August	2007,19,August,2007)
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 28-31:  19 August 2007 => (date-entity :day 19 :month 8 :year 2007)
Span 55-56:  access => access-01
Span 44-45:  agreement => agree-01
Span 5-7:  Albright and => (person :name (name :op "Jacqueline" :op "Shire"))
Span 62-63:  and => and
Span 41-42:  and => and
Span 17-18:  and => and
Span 0-1:  Arms => arms
Span 35-36:  closing => close-01
Span 2-4:  control experts => (person :name (name :op "David" :op "Albright"))
Span 23-24:  criticism => criticize-01
Span 63-64:  documents => document
Span 60-61:  facilities => facility
Span 36-37:  files => file
Span 38-39:  fundamental => fundamental
Span 73-74:  IAEA => (organization :name (name :op "IAEA"))
Span 54-55:  IAEA => (organization :name (name :op "IAEA"))
Span 33-34:  idea => idea
Span 18-19:  International => international
Span 69-70:  Iranian => (country :name (name :op "Iran"))
Span 49-50:  Iranian => (country :name (name :op "Iran"))
Span 57-58:  key => key
Span 66-67:  needed => need-01
Span 9-16:  of the Washington - based Institute for => (organization :name (name :op "Washington" :op "-" :op "based" :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 50-51:  officials => (have-org-role-91 :ARG2 official)
Span 58-59:  people => people
Span 40-41:  principles => principle
Span 52-53:  provide => provide-01
Span 24-25:  published => publish-01
Span 75-76:  questions => question
Span 39-40:  safeguards => safeguard-01
Span 47-48:  specify => specify-01
Span 68-69:  verify => verify-01
Span 26-27:  week => week
Span 20-21:  wrote => write-01

Langrangian relaxation converged after 71 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(75,76,List(0),questions,question,false), Span(73,74,List(3, 2, 1),IAEA,(organization :name (name :op "IAEA")),false), Span(69,70,List(6, 5, 4),Iranian,(country :name (name :op "Iran")),false), Span(68,69,List(7),verify,verify-01,false), Span(66,67,List(8),needed,need-01,false), Span(63,64,List(9),documents,document,false), Span(62,63,List(10),and,and,false), Span(60,61,List(11),facilities,facility,false), Span(58,59,List(12),people,people,false), Span(57,58,List(13),key,key,false), Span(55,56,List(14),access,access-01,false), Span(54,55,List(17, 16, 15),IAEA,(organization :name (name :op "IAEA")),false), Span(52,53,List(18),provide,provide-01,false), Span(50,51,List(20, 19),officials,(have-org-role-91 :ARG2 official),false), Span(49,50,List(23, 22, 21),Iranian,(country :name (name :op "Iran")),false), Span(47,48,List(24),specify,specify-01,false), Span(44,45,List(25),agreement,agree-01,false), Span(41,42,List(26),and,and,false), Span(40,41,List(27),principles,principle,false), Span(39,40,List(28),safeguards,safeguard-01,false), Span(38,39,List(29),fundamental,fundamental,false), Span(36,37,List(30),files,file,false), Span(35,36,List(31),closing,close-01,false), Span(33,34,List(32),idea,idea,false), Span(28,31,List(36, 35, 34, 33),19 August 2007,(date-entity :day 19 :month 8 :year 2007),false), Span(26,27,List(37),week,week,false), Span(24,25,List(38),published,publish-01,false), Span(23,24,List(39),criticism,criticize-01,false), Span(20,21,List(40),wrote,write-01,false), Span(18,19,List(41),International,international,false), Span(17,18,List(42),and,and,false), Span(9,16,List(53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43),of the Washington - based Institute for,(organization :name (name :op "Washington" :op "-" :op "based" :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false), Span(5,7,List(57, 56, 55, 54),Albright and,(person :name (name :op "Jacqueline" :op "Shire")),false), Span(2,4,List(61, 60, 59, 58),control experts,(person :name (name :op "David" :op "Albright")),false), Span(0,1,List(62),Arms,arms,false)),Map(57 -> "Shire", 30 -> file, 39 -> criticize-01, 45 -> "Washington", 51 -> "and", 2 -> name, 5 -> name, 48 -> "Institute", 33 -> date-entity, 27 -> principle, 54 -> person, 12 -> people, 60 -> "David", 8 -> need-01, 15 -> organization, 42 -> and, 36 -> 2007, 21 -> country, 18 -> provide-01, 24 -> specify-01, 53 -> "Security", 35 -> 8, 41 -> international, 62 -> arms, 56 -> "Jacqueline", 7 -> verify-01, 59 -> name, 17 -> "IAEA", 1 -> organization, 50 -> "Science", 44 -> name, 23 -> "Iran", 38 -> publish-01, 47 -> "based", 4 -> country, 26 -> and, 11 -> facility, 32 -> idea, 14 -> access-01, 20 -> official, 29 -> fundamental, 46 -> "-", 52 -> "International", 34 -> 19, 6 -> "Iran", 28 -> safeguard-01, 55 -> name, 40 -> write-01, 61 -> "Albright", 49 -> "for", 0 -> question, 9 -> document, 43 -> organization, 22 -> name, 58 -> person, 16 -> name, 37 -> week, 19 -> have-org-role-91, 3 -> "IAEA", 10 -> and, 25 -> agree-01, 31 -> close-01, 13 -> key),Map(w -> week, n -> name, h -> have-org-role-91, 2 -> 2007, q -> question, p5 -> person, s2 -> safeguard-01, k -> key, 8 -> 8, o3 -> official, n7 -> name, p2 -> provide-01, c4 -> criticize-01, n4 -> name, a3 -> agree-01, s -> specify-01, a6 -> arms, v -> verify-01, d -> document, 1 -> 19, p -> people, c3 -> close-01, a -> and, n3 -> need-01, p4 -> publish-01, n6 -> name, a5 -> and, d2 -> date-entity, o2 -> organization, f3 -> file, i2 -> international, w2 -> write-01, i -> idea, a2 -> access-01, c -> country, p6 -> person, f2 -> fundamental, n8 -> name, f -> facility, o -> organization, o4 -> organization, p3 -> principle, n2 -> name, c2 -> country, a4 -> and, n5 -> name))),[Ljava.lang.String;@3590fc5b,Annotation([Ljava.lang.String;@397fbdb,[Ljava.lang.String;@33d512c1,[Ljava.lang.String;@515c6049),Annotation([Ljava.lang.String;@639c2c1d,[Ljava.lang.String;@5fe94a96,[Ledu.cmu.lti.nlp.amr.Dependency;@443118b0),Annotation([Ljava.lang.String;@765d7657,[Ljava.lang.String;@74235045,[Ljava.lang.String;@618b19ad),Annotation([Ljava.lang.String;@2d3379b4,[Ljava.lang.String;@30c15d8b,[Ledu.cmu.lti.nlp.amr.Entity;@5e0e82ae))
AMR:
(a / and, op, c4 / criticize-01)
(a / and, op, f / facility)
(a2 / access-01, ARG0, o2 / organization)
(a2 / access-01, ARG1, p / people)
(a3 / agree-01, ARG1, o4 / organization)
(a4 / and, op, p3 / principle)
(a4 / and, op, s / specify-01)
(a4 / and, time, d2 / date-entity)
(a5 / and, op, i2 / international)
(a6 / arms, direction, p6 / person)
(c / country, name, n2 / name)
(c2 / country, name, n5 / name)
(c3 / close-01, ARG1, f3 / file)
(c4 / criticize-01, ARG0, p5 / person)
(c4 / criticize-01, ARG1, f3 / file)
(d2 / date-entity, day, 1 / 19)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 2 / 2007)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o3 / official)
(n / name, op, "IAEA")
(n2 / name, op, "Iran")
(n3 / need-01, ARG0, a / and)
(n3 / need-01, ARG1, d / document)
(n3 / need-01, purpose, v / verify-01)
(n4 / name, op, "IAEA")
(n5 / name, op, "Iran")
(n6 / name, op, "-")
(n6 / name, op, "Institute")
(n6 / name, op, "International")
(n6 / name, op, "Science")
(n6 / name, op, "Security")
(n6 / name, op, "Washington")
(n6 / name, op, "and")
(n6 / name, op, "based")
(n6 / name, op, "for")
(n7 / name, op, "Jacqueline")
(n7 / name, op, "Shire")
(n8 / name, op, "Albright")
(n8 / name, op, "David")
(o / organization, name, n / name)
(o2 / organization, name, n4 / name)
(o4 / organization, name, n6 / name)
(p / people, mod, k / key)
(p2 / provide-01, ARG0, o3 / official)
(p2 / provide-01, ARG1, a2 / access-01)
(p2 / provide-01, ARG2, c / country)
(p3 / principle, mod, f2 / fundamental)
(p4 / publish-01, ARG0, a4 / and)
(p4 / publish-01, ARG1, w / week)
(p4 / publish-01, ARG6, c4 / criticize-01)
(p5 / person, name, n7 / name)
(p6 / person, name, n7 / name)
(p6 / person, name, n8 / name)
(q / question, poss, o / organization)
(s / specify-01, ARG0, i / idea)
(s / specify-01, ARG1, a3 / agree-01)
(s / specify-01, ARG6, p2 / provide-01)
(s2 / safeguard-01, ARG1, p3 / principle)
(v / verify-01, ARG1, q / question)
(w2 / write-01, ARG0, p5 / person)
(w2 / write-01, ARG1, a5 / and)

Decoded in 10,391,682 microseconds
Sentence: Independent experts stated Iran's latest agreement with the IAEA which gives inspectors access to more nuclear sites and information falls short of the West's demand to halt the production of concentrated uranium that could potentially be used for a bomb.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "West" :op "'s"))
NER Entity: (country :name (name :op "West" :op "'s"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 13-14:  access => access-01
Span 6-7:  agreement => agree-01
Span 18-19:  and => and
Span 41-42:  bomb => bomb
Span 32-33:  concentrated => concentrate-02
Span 35-36:  could => possible
Span 26-27:  demand => demand-01
Span 1-2:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 11-12:  gives => give-01
Span 28-29:  halt => halt-01
Span 9-10:  IAEA => (organization :name (name :op "IAEA"))
Span 19-20:  information => information
Span 12-13:  inspectors => (person :ARG0-of inspect-01)
Span 3-4:  Iran => (country :name (name :op "Iran"))
Span 5-6:  latest => (late :degree most)
Span 15-16:  more => more
Span 16-17:  nuclear => nucleus
Span 36-37:  potentially => potential
Span 30-31:  production => produce-01
Span 21-22:  short => short
Span 17-18:  sites => site
Span 2-3:  stated => state-01
Span 33-34:  uranium => uranium
Span 38-39:  used => use-01
Span 24-25:  West => (world-region :name (name :op "West"))

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),bomb,bomb,false), Span(38,39,List(1),used,use-01,false), Span(36,37,List(2),potentially,potential,false), Span(35,36,List(3),could,possible,false), Span(33,34,List(4),uranium,uranium,false), Span(32,33,List(5),concentrated,concentrate-02,false), Span(30,31,List(6),production,produce-01,false), Span(28,29,List(7),halt,halt-01,false), Span(26,27,List(8),demand,demand-01,false), Span(24,25,List(11, 10, 9),West,(world-region :name (name :op "West")),false), Span(21,22,List(12),short,short,false), Span(19,20,List(13),information,information,false), Span(18,19,List(14),and,and,false), Span(17,18,List(15),sites,site,false), Span(16,17,List(16),nuclear,nucleus,false), Span(15,16,List(17),more,more,false), Span(13,14,List(18),access,access-01,false), Span(12,13,List(20, 19),inspectors,(person :ARG0-of inspect-01),false), Span(11,12,List(21),gives,give-01,false), Span(9,10,List(24, 23, 22),IAEA,(organization :name (name :op "IAEA")),false), Span(6,7,List(25),agreement,agree-01,false), Span(5,6,List(27, 26),latest,(late :degree most),false), Span(3,4,List(30, 29, 28),Iran,(country :name (name :op "Iran")),false), Span(2,3,List(31),stated,state-01,false), Span(1,2,List(34, 33, 32),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false)),Map(30 -> "Iran", 2 -> potential, 5 -> concentrate-02, 33 -> person, 27 -> most, 12 -> short, 8 -> demand-01, 15 -> site, 21 -> give-01, 18 -> access-01, 24 -> "IAEA", 7 -> halt-01, 1 -> use-01, 17 -> more, 23 -> name, 26 -> late, 4 -> uranium, 11 -> "West", 32 -> have-org-role-91, 14 -> and, 29 -> name, 20 -> inspect-01, 34 -> expert-41, 28 -> country, 6 -> produce-01, 9 -> world-region, 0 -> bomb, 22 -> organization, 16 -> nucleus, 19 -> person, 10 -> name, 3 -> possible, 31 -> state-01, 25 -> agree-01, 13 -> information),Map(e -> expert-41, n -> name, w -> world-region, h -> halt-01, p5 -> person, h2 -> have-org-role-91, s2 -> site, b -> bomb, m2 -> most, p2 -> possible, n4 -> name, a3 -> agree-01, u2 -> uranium, s -> short, d -> demand-01, m -> more, p -> potential, g -> give-01, a -> and, n3 -> name, p4 -> person, i2 -> inspect-01, i -> information, a2 -> access-01, c -> concentrate-02, s3 -> state-01, u -> use-01, l -> late, o -> organization, p3 -> produce-01, c2 -> country, n2 -> nucleus))),[Ljava.lang.String;@6771beb3,Annotation([Ljava.lang.String;@51399530,[Ljava.lang.String;@6b2ea799,[Ljava.lang.String;@411f53a0),Annotation([Ljava.lang.String;@2b71e916,[Ljava.lang.String;@36fc695d,[Ledu.cmu.lti.nlp.amr.Dependency;@28701274),Annotation([Ljava.lang.String;@13c9d689,[Ljava.lang.String;@3754a4bf,[Ljava.lang.String;@62379589),Annotation([Ljava.lang.String;@4afcd809,[Ljava.lang.String;@175c2241,[Ledu.cmu.lti.nlp.amr.Entity;@5bf0d49))
AMR:
(a / and, mod, s / short)
(a / and, op, i / information)
(a / and, op, s3 / state-01)
(a2 / access-01, ARG1, s2 / site)
(a3 / agree-01, ARG0, c2 / country)
(a3 / agree-01, ARG1, n2 / nucleus)
(a3 / agree-01, time, l / late)
(c / concentrate-02, ARG1, u2 / uranium)
(c2 / country, name, n4 / name)
(d / demand-01, ARG0, w / world-region)
(d / demand-01, ARG1, h / halt-01)
(e / expert-41, ARG1, p5 / person)
(g / give-01, ARG0, o / organization)
(g / give-01, ARG1, a2 / access-01)
(g / give-01, ARG2, p4 / person)
(h / halt-01, ARG1, p3 / produce-01)
(h2 / have-org-role-91, ARG1, w / world-region)
(h2 / have-org-role-91, ARG2, p5 / person)
(i2 / inspect-01, ARG0, p4 / person)
(l / late, degree, m2 / most)
(n / name, op, "West")
(n3 / name, op, "IAEA")
(n4 / name, op, "Iran")
(o / organization, name, n3 / name)
(p2 / possible, domain, u / use-01)
(p3 / produce-01, ARG1, u2 / uranium)
(s2 / site, quant, m / more)
(s3 / state-01, ARG0, p5 / person)
(s3 / state-01, ARG1, a3 / agree-01)
(s3 / state-01, medium, o / organization)
(u / use-01, ARG1, p / potential)
(u / use-01, ARG2, b / bomb)
(u2 / uranium, mod, p2 / possible)
(w / world-region, name, n / name)

Decoded in 2,944,304 microseconds
Sentence: U.S. State Department spokesman for the Bush administration Tom Casey stated that while the report may offer some new details or insight into the development of Iran's program Iranian officials have not met any international obligations regarding the nuclear program.

NER Entity: (organization :name (name :op "U.S." :op "State" :op "Department"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Tom" :op "Casey"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 7-8:  administration => administrate-01
Span 34-35:  any => any
Span 6-7:  Bush => (person :name (name :op "Bush"))
Span 19-20:  details => detail-01
Span 24-25:  development => develop-02
Span 21-22:  insight => insight
Span 35-36:  international => international
Span 26-27:  Iran => (country :name (name :op "Iran"))
Span 29-30:  Iranian => (country :name (name :op "Iran"))
Span 15-16:  may => possible
Span 33-34:  met => meet-03
Span 18-19:  new => new
Span 39-40:  nuclear => nucleus
Span 36-37:  obligations => obligation
Span 16-17:  offer => offer-01
Span 30-31:  officials => (have-org-role-91 :ARG2 official)
Span 20-21:  or => or
Span 40-41:  program => program
Span 28-29:  program => program
Span 14-15:  report => report
Span 17-18:  some => some
Span 3-4:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 10-11:  stated => state-01
Span 8-10:  Tom Casey => (person :name (name :op "Tom" :op "Casey"))
Span 0-3:  U.S. State Department => (organization :name (name :op "U.S." :op "State" :op "Department"))

Langrangian relaxation converged after 69 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),program,program,false), Span(39,40,List(1),nuclear,nucleus,false), Span(36,37,List(2),obligations,obligation,false), Span(35,36,List(3),international,international,false), Span(34,35,List(4),any,any,false), Span(33,34,List(5),met,meet-03,false), Span(30,31,List(7, 6),officials,(have-org-role-91 :ARG2 official),false), Span(29,30,List(10, 9, 8),Iranian,(country :name (name :op "Iran")),false), Span(28,29,List(11),program,program,false), Span(26,27,List(14, 13, 12),Iran,(country :name (name :op "Iran")),false), Span(24,25,List(15),development,develop-02,false), Span(21,22,List(16),insight,insight,false), Span(20,21,List(17),or,or,false), Span(19,20,List(18),details,detail-01,false), Span(18,19,List(19),new,new,false), Span(17,18,List(20),some,some,false), Span(16,17,List(21),offer,offer-01,false), Span(15,16,List(22),may,possible,false), Span(14,15,List(23),report,report,false), Span(10,11,List(24),stated,state-01,false), Span(8,10,List(28, 27, 26, 25),Tom Casey,(person :name (name :op "Tom" :op "Casey")),false), Span(7,8,List(29),administration,administrate-01,false), Span(6,7,List(32, 31, 30),Bush,(person :name (name :op "Bush")),false), Span(3,4,List(34, 33),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(0,3,List(39, 38, 37, 36, 35),U.S. State Department,(organization :name (name :op "U.S." :op "State" :op "Department")),false)),Map(39 -> "Department", 30 -> person, 2 -> obligation, 5 -> meet-03, 33 -> have-org-role-91, 27 -> "Tom", 12 -> country, 8 -> country, 15 -> develop-02, 36 -> name, 21 -> offer-01, 18 -> detail-01, 24 -> state-01, 35 -> organization, 7 -> official, 1 -> nucleus, 17 -> or, 23 -> report, 38 -> "State", 26 -> name, 4 -> any, 11 -> program, 32 -> "Bush", 14 -> "Iran", 29 -> administrate-01, 20 -> some, 34 -> spokesman, 28 -> "Casey", 6 -> have-org-role-91, 9 -> name, 0 -> program, 22 -> possible, 16 -> insight, 37 -> "U.S.", 19 -> new, 10 -> "Iran", 3 -> international, 31 -> name, 25 -> person, 13 -> name),Map(n -> nucleus, h -> have-org-role-91, h2 -> have-org-role-91, p5 -> person, s2 -> state-01, o3 -> or, n7 -> name, p2 -> program, n4 -> new, s -> some, m -> meet-03, d -> develop-02, o5 -> organization, p -> program, n3 -> name, a -> any, p4 -> person, n6 -> name, o2 -> official, d2 -> detail-01, i2 -> insight, a2 -> administrate-01, i -> international, r -> report, c -> country, s3 -> spokesman, o -> obligation, o4 -> offer-01, p3 -> possible, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@5b7a5baa,Annotation([Ljava.lang.String;@776aec5c,[Ljava.lang.String;@1d296da,[Ljava.lang.String;@7c7a06ec),Annotation([Ljava.lang.String;@75d4a5c2,[Ljava.lang.String;@557caf28,[Ledu.cmu.lti.nlp.amr.Dependency;@408d971b),Annotation([Ljava.lang.String;@6c6cb480,[Ljava.lang.String;@3c46e67a,[Ljava.lang.String;@c730b35),Annotation([Ljava.lang.String;@206a70ef,[Ljava.lang.String;@292b08d6,[Ledu.cmu.lti.nlp.amr.Entity;@22555ebf))
AMR:
(a2 / administrate-01, ARG0, p4 / person)
(a2 / administrate-01, ARG1, p5 / person)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(d / develop-02, ARG1, p2 / program)
(d2 / detail-01, ARG0, r / report)
(d2 / detail-01, ARG1, n / nucleus)
(d2 / detail-01, ARG6, s / some)
(d2 / detail-01, mod, n4 / new)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o2 / official)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, o5 / organization)
(h2 / have-org-role-91, ARG2, s3 / spokesman)
(m / meet-03, ARG0, p / program)
(m / meet-03, ARG1, o / obligation)
(m / meet-03, purpose, p3 / possible)
(n2 / name, op, "Iran")
(n3 / name, op, "Iran")
(n5 / name, op, "Casey")
(n5 / name, op, "Tom")
(n6 / name, op, "Bush")
(n7 / name, op, "Department")
(n7 / name, op, "State")
(n7 / name, op, "U.S.")
(o / obligation, mod, a / any)
(o / obligation, mod, i / international)
(o3 / or, op, d / develop-02)
(o3 / or, op, i2 / insight)
(o4 / offer-01, ARG0, r / report)
(o4 / offer-01, ARG1, o3 / or)
(o5 / organization, name, n7 / name)
(p2 / program, poss, c2 / country)
(p3 / possible, domain, o4 / offer-01)
(p4 / person, name, n5 / name)
(p5 / person, name, n6 / name)
(s2 / state-01, ARG0, p4 / person)
(s2 / state-01, ARG1, m / meet-03)

Decoded in 4,805,687 microseconds
Sentence: Casey stated the fact that the nuclear program continues to move forward shows that the Iranian regime is continuing on a path of defiance of the international community.

NER Entity: (person :name (name :op "Casey"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 27-28:  community => community
Span 8-9:  continues => continue-01
Span 18-19:  continuing => continue-01
Span 3-4:  fact => fact
Span 11-12:  forward => forward
Span 26-27:  international => international
Span 15-16:  Iranian => (country :name (name :op "Iran"))
Span 10-11:  move => move-02
Span 6-7:  nuclear => nucleus
Span 7-8:  program => program
Span 16-17:  regime => regime
Span 1-2:  stated => state-01

Langrangian relaxation converged after 75 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),community,community,false), Span(26,27,List(1),international,international,false), Span(18,19,List(2),continuing,continue-01,false), Span(16,17,List(3),regime,regime,false), Span(15,16,List(6, 5, 4),Iranian,(country :name (name :op "Iran")),false), Span(11,12,List(7),forward,forward,false), Span(10,11,List(8),move,move-02,false), Span(8,9,List(9),continues,continue-01,false), Span(7,8,List(10),program,program,false), Span(6,7,List(11),nuclear,nucleus,false), Span(3,4,List(12),fact,fact,false), Span(1,2,List(13),stated,state-01,false)),Map(2 -> continue-01, 5 -> name, 12 -> fact, 8 -> move-02, 7 -> forward, 1 -> international, 4 -> country, 11 -> nucleus, 6 -> "Iran", 0 -> community, 9 -> continue-01, 3 -> regime, 10 -> program, 13 -> state-01),Map(n -> name, c4 -> continue-01, s -> state-01, m -> move-02, p -> program, c3 -> country, i -> international, r -> regime, c -> community, f2 -> fact, f -> forward, c2 -> continue-01, n2 -> nucleus))),[Ljava.lang.String;@36ebc363,Annotation([Ljava.lang.String;@45752059,[Ljava.lang.String;@34e9fd99,[Ljava.lang.String;@3c41ed1d),Annotation([Ljava.lang.String;@54d9d12d,[Ljava.lang.String;@38425407,[Ledu.cmu.lti.nlp.amr.Dependency;@43bc63a3),Annotation([Ljava.lang.String;@702657cc,[Ljava.lang.String;@6a6cb05c,[Ljava.lang.String;@40a4337a),Annotation([Ljava.lang.String;@6025e1b6,[Ljava.lang.String;@22ff4249,[Ledu.cmu.lti.nlp.amr.Entity;@2d1ef81a))
AMR:
(c / community, mod, i / international)
(c2 / continue-01, ARG1, r / regime)
(c3 / country, name, n / name)
(c4 / continue-01, ARG0, p / program)
(c4 / continue-01, ARG1, m / move-02)
(m / move-02, ARG1, c2 / continue-01)
(m / move-02, direction, f / forward)
(n / name, op, "Iran")
(p / program, mod, n2 / nucleus)
(r / regime, mod, c3 / country)
(s / state-01, ARG0, i / international)
(s / state-01, ARG1, c4 / continue-01)
(s / state-01, ARG2, f2 / fact)

Decoded in 1,021,603 microseconds
Sentence: Most Western Nonproliferation Experts stated the Agreement on 21 August 2007 contained little that could dissuade policymakers in Washington, London, Paris and Berlin from moving forward with another round of Security Council sanctions.

NER Entity: (thing :name (name :op "Western" :op "Nonproliferation"))
mkDayMonthYear(21	August	2007,21,August,2007)
NER Entity: (country :name (name :op "Washington"))
NER Entity: (country :name (name :op "London"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "Berlin"))
NER Entity: (organization :name (name :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "London"))
NER Entity: (country :name (name :op "Washington"))
Spans:
Span 8-11:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Span 6-7:  Agreement => agreement
Span 23-24:  and => and
Span 29-30:  another => another
Span 11-12:  contained => contain-01
Span 14-15:  could => possible
Span 15-16:  dissuade => dissuade-01
Span 3-4:  Experts => (person :ARG1-of expert-41)
Span 27-28:  forward => forward
Span 12-13:  little => little
Span 20-21:  London => (city :name (name :op "London"))
Span 0-1:  Most => most
Span 26-27:  moving => move-02
Span 22-23:  Paris => (city :name (name :op "Paris"))
Span 16-17:  policymakers => policy
Span 30-31:  round => round
Span 34-35:  sanctions => sanction-02
Span 32-34:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 4-5:  stated => state-01
Span 18-19:  Washington => (city :name (name :op "Washington"))
Span 1-3:  Western Nonproliferation => (thing :name (name :op "Western" :op "Nonproliferation"))

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),sanctions,sanction-02,false), Span(32,34,List(4, 3, 2, 1),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(30,31,List(5),round,round,false), Span(29,30,List(6),another,another,false), Span(27,28,List(7),forward,forward,false), Span(26,27,List(8),moving,move-02,false), Span(23,24,List(9),and,and,false), Span(22,23,List(12, 11, 10),Paris,(city :name (name :op "Paris")),false), Span(20,21,List(15, 14, 13),London,(city :name (name :op "London")),false), Span(18,19,List(18, 17, 16),Washington,(city :name (name :op "Washington")),false), Span(16,17,List(19),policymakers,policy,false), Span(15,16,List(20),dissuade,dissuade-01,false), Span(14,15,List(21),could,possible,false), Span(12,13,List(22),little,little,false), Span(11,12,List(23),contained,contain-01,false), Span(8,11,List(27, 26, 25, 24),21 August 2007,(date-entity :day 21 :month 8 :year 2007),false), Span(6,7,List(28),Agreement,agreement,false), Span(4,5,List(29),stated,state-01,false), Span(3,4,List(31, 30),Experts,(person :ARG1-of expert-41),false), Span(1,3,List(35, 34, 33, 32),Western Nonproliferation,(thing :name (name :op "Western" :op "Nonproliferation")),false), Span(0,1,List(36),Most,most,false)),Map(30 -> person, 2 -> name, 5 -> round, 33 -> name, 27 -> 2007, 12 -> "Paris", 8 -> move-02, 15 -> "London", 36 -> most, 21 -> possible, 18 -> "Washington", 24 -> date-entity, 35 -> "Nonproliferation", 7 -> forward, 1 -> organization, 17 -> name, 23 -> contain-01, 26 -> 8, 4 -> "Security", 11 -> name, 32 -> thing, 14 -> name, 29 -> state-01, 20 -> dissuade-01, 34 -> "Western", 28 -> agreement, 6 -> another, 9 -> and, 0 -> sanction-02, 22 -> little, 16 -> city, 19 -> policy, 10 -> city, 3 -> "Council", 31 -> expert-41, 25 -> 21, 13 -> city),Map(e -> expert-41, n -> name, 2 -> 21, s2 -> state-01, t -> thing, m2 -> most, 8 -> 8, p2 -> possible, n4 -> name, c4 -> contain-01, a3 -> agreement, s -> sanction-02, m -> move-02, d -> dissuade-01, p -> policy, c3 -> city, n3 -> name, a -> another, d2 -> date-entity, a2 -> and, r -> round, c -> city, l -> little, f -> forward, 22 -> 2007, o -> organization, p3 -> person, c2 -> city, n2 -> name, n5 -> name))),[Ljava.lang.String;@4c402120,Annotation([Ljava.lang.String;@327514f,[Ljava.lang.String;@5b12b668,[Ljava.lang.String;@1165b38),Annotation([Ljava.lang.String;@4c12331b,[Ljava.lang.String;@7586beff,[Ledu.cmu.lti.nlp.amr.Dependency;@3b69e7d1),Annotation([Ljava.lang.String;@815b41f,[Ljava.lang.String;@5542c4ed,[Ljava.lang.String;@1573f9fc),Annotation([Ljava.lang.String;@6150c3ec,[Ljava.lang.String;@44c03695,[Ledu.cmu.lti.nlp.amr.Entity;@7e6f74c))
AMR:
(a2 / and, op, c / city)
(a2 / and, op, c2 / city)
(a2 / and, op, c3 / city)
(c / city, name, n2 / name)
(c2 / city, name, n3 / name)
(c3 / city, name, n4 / name)
(c4 / contain-01, ARG0, a3 / agreement)
(c4 / contain-01, ARG1, p2 / possible)
(c4 / contain-01, time, d2 / date-entity)
(d / dissuade-01, ARG0, m2 / most)
(d / dissuade-01, ARG1, a2 / and)
(d / dissuade-01, ARG2, m / move-02)
(d / dissuade-01, ARG6, l / little)
(d2 / date-entity, day, 2 / 21)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 22 / 2007)
(e / expert-41, ARG1, p3 / person)
(e / expert-41, ARG2, t / thing)
(m / move-02, ARG2, r / round)
(m / move-02, ARG6, f / forward)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "Paris")
(n3 / name, op, "London")
(n4 / name, op, "Washington")
(n5 / name, op, "Nonproliferation")
(n5 / name, op, "Western")
(o / organization, name, n / name)
(p2 / possible, domain, d / dissuade-01)
(p2 / possible, domain, p / policy)
(r / round, mod, a / another)
(s / sanction-02, ARG0, l / little)
(s / sanction-02, ARG1, o / organization)
(s2 / state-01, ARG0, p3 / person)
(s2 / state-01, ARG1, c4 / contain-01)
(t / thing, name, n5 / name)

Decoded in 2,974,098 microseconds
Sentence: Experts stated many of the transparency issues reportedly resolved in the Agreement on 21 August 2007 should have been resolved previously.

mkDayMonthYear(21	August	2007,21,August,2007)
Spans:
Span 13-16:  21 August 2007 => (date-entity :day 21 :month 8 :year 2007)
Span 11-12:  Agreement => agreement
Span 0-1:  Experts => (person :ARG1-of expert-41)
Span 6-7:  issues => issue
Span 2-3:  many => many
Span 20-21:  previously => previous
Span 7-8:  reportedly => report-01
Span 19-20:  resolved => resolve-01
Span 8-9:  resolved => resolve-01
Span 16-17:  should => recommend-01
Span 1-2:  stated => state-01
Span 5-6:  transparency => transparent

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),previously,previous,false), Span(19,20,List(1),resolved,resolve-01,false), Span(16,17,List(2),should,recommend-01,false), Span(13,16,List(6, 5, 4, 3),21 August 2007,(date-entity :day 21 :month 8 :year 2007),false), Span(11,12,List(7),Agreement,agreement,false), Span(8,9,List(8),resolved,resolve-01,false), Span(7,8,List(9),reportedly,report-01,false), Span(6,7,List(10),issues,issue,false), Span(5,6,List(11),transparency,transparent,false), Span(2,3,List(12),many,many,false), Span(1,2,List(13),stated,state-01,false), Span(0,1,List(15, 14),Experts,(person :ARG1-of expert-41),false)),Map(2 -> recommend-01, 5 -> 8, 12 -> many, 15 -> expert-41, 8 -> resolve-01, 7 -> agreement, 1 -> resolve-01, 4 -> 21, 11 -> transparent, 14 -> person, 6 -> 2007, 0 -> previous, 9 -> report-01, 3 -> date-entity, 10 -> issue, 13 -> state-01),Map(e -> expert-41, r3 -> resolve-01, 2 -> 21, t -> transparent, 8 -> 8, p2 -> person, s -> state-01, d -> date-entity, m -> many, p -> previous, r2 -> recommend-01, a -> agreement, r -> resolve-01, r4 -> report-01, i -> issue, 22 -> 2007))),[Ljava.lang.String;@dd05255,Annotation([Ljava.lang.String;@6a78afa0,[Ljava.lang.String;@2f4948e4,[Ljava.lang.String;@1f2586d6),Annotation([Ljava.lang.String;@10683d9d,[Ljava.lang.String;@3fc2959f,[Ledu.cmu.lti.nlp.amr.Dependency;@5aa9e4eb),Annotation([Ljava.lang.String;@6989da5e,[Ljava.lang.String;@385c9627,[Ljava.lang.String;@139982de),Annotation([Ljava.lang.String;@682b2fa,[Ljava.lang.String;@217ed35e,[Ledu.cmu.lti.nlp.amr.Entity;@7dcf94f8))
AMR:
(a / agreement, time, d / date-entity)
(d / date-entity, day, 2 / 21)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2007)
(e / expert-41, ARG1, p2 / person)
(i / issue, mod, t / transparent)
(r / resolve-01, ARG1, i / issue)
(r / resolve-01, time, p / previous)
(r2 / recommend-01, ARG1, r / resolve-01)
(r3 / resolve-01, ARG0, a / agreement)
(r3 / resolve-01, ARG1, i / issue)
(r4 / report-01, ARG1, r3 / resolve-01)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, r2 / recommend-01)
(s / state-01, ARG6, m / many)

Decoded in 921,533 microseconds
Sentence: Executive Director of nonpartisan Washington think tank the Arms Control Association Daryl G. Kimball stated the agreement does not address the problem that the Iranian government is pursuing an enrichment technology and capability that could lead to the production of nuclear bomb material.

NER Entity: (country :name (name :op "Washington"))
NER Entity: (organization :name (name :op "Arms" :op "Control" :op "Association"))
NER Entity: (person :name (name :op "Daryl" :op "G." :op "Kimball"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Washington"))
Spans:
Span 19-20:  address => address-02
Span 16-17:  agreement => agree-01
Span 31-32:  and => and
Span 8-11:  Arms Control Association => (organization :name (name :op "Arms" :op "Control" :op "Association"))
Span 41-42:  bomb => bomb
Span 32-33:  capability => capable-41
Span 34-35:  could => possible
Span 11-14:  Daryl G. Kimball => (person :name (name :op "Daryl" :op "G." :op "Kimball"))
Span 1-2:  Director => (have-org-role-91 :ARG2 director)
Span 29-30:  enrichment => enrich-01
Span 0-1:  Executive => executive
Span 25-26:  government => (government-organization :ARG0-of govern-01)
Span 24-25:  Iranian => (country :name (name :op "Iran"))
Span 35-36:  lead => lead-03
Span 42-43:  material => material
Span 40-41:  nuclear => nucleus
Span 21-22:  problem => problem
Span 38-39:  production => produce-01
Span 27-28:  pursuing => pursue-01
Span 14-15:  stated => state-01
Span 6-7:  tank => tank
Span 30-31:  technology => technology
Span 5-6:  think => think-01
Span 4-5:  Washington => (city :name (name :op "Washington"))

Langrangian relaxation converged after 84 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),material,material,false), Span(41,42,List(1),bomb,bomb,false), Span(40,41,List(2),nuclear,nucleus,false), Span(38,39,List(3),production,produce-01,false), Span(35,36,List(4),lead,lead-03,false), Span(34,35,List(5),could,possible,false), Span(32,33,List(6),capability,capable-41,false), Span(31,32,List(7),and,and,false), Span(30,31,List(8),technology,technology,false), Span(29,30,List(9),enrichment,enrich-01,false), Span(27,28,List(10),pursuing,pursue-01,false), Span(25,26,List(12, 11),government,(government-organization :ARG0-of govern-01),false), Span(24,25,List(15, 14, 13),Iranian,(country :name (name :op "Iran")),false), Span(21,22,List(16),problem,problem,false), Span(19,20,List(17),address,address-02,false), Span(16,17,List(18),agreement,agree-01,false), Span(14,15,List(19),stated,state-01,false), Span(11,14,List(24, 23, 22, 21, 20),Daryl G. Kimball,(person :name (name :op "Daryl" :op "G." :op "Kimball")),false), Span(8,11,List(29, 28, 27, 26, 25),Arms Control Association,(organization :name (name :op "Arms" :op "Control" :op "Association")),false), Span(6,7,List(30),tank,tank,false), Span(5,6,List(31),think,think-01,false), Span(4,5,List(34, 33, 32),Washington,(city :name (name :op "Washington")),false), Span(1,2,List(36, 35),Director,(have-org-role-91 :ARG2 director),false), Span(0,1,List(37),Executive,executive,false)),Map(30 -> tank, 2 -> nucleus, 5 -> possible, 33 -> name, 27 -> "Arms", 12 -> govern-01, 8 -> technology, 15 -> "Iran", 36 -> director, 21 -> name, 18 -> agree-01, 24 -> "Kimball", 35 -> have-org-role-91, 7 -> and, 1 -> bomb, 17 -> address-02, 23 -> "G.", 26 -> name, 4 -> lead-03, 11 -> government-organization, 32 -> city, 14 -> name, 29 -> "Association", 20 -> person, 34 -> "Washington", 28 -> "Control", 6 -> capable-41, 9 -> enrich-01, 0 -> material, 22 -> "Daryl", 16 -> problem, 37 -> executive, 19 -> state-01, 10 -> pursue-01, 3 -> produce-01, 31 -> think-01, 25 -> organization, 13 -> country),Map(e -> enrich-01, n -> nucleus, h -> have-org-role-91, p5 -> person, t -> technology, b -> bomb, e2 -> executive, p2 -> possible, a3 -> agree-01, n4 -> name, s -> state-01, d -> director, m -> material, g2 -> govern-01, t3 -> think-01, g -> government-organization, p -> produce-01, c3 -> city, a -> and, n3 -> name, p4 -> problem, t2 -> tank, a2 -> address-02, c -> capable-41, l -> lead-03, o -> organization, p3 -> pursue-01, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@229f66ed,Annotation([Ljava.lang.String;@31190526,[Ljava.lang.String;@662ac478,[Ljava.lang.String;@6743e411),Annotation([Ljava.lang.String;@3eb25e1a,[Ljava.lang.String;@477b4cdf,[Ledu.cmu.lti.nlp.amr.Dependency;@77c2494c),Annotation([Ljava.lang.String;@f5958c9,[Ljava.lang.String;@233795b6,[Ljava.lang.String;@3eb738bb),Annotation([Ljava.lang.String;@5bda8e08,[Ljava.lang.String;@1e800aaa,[Ledu.cmu.lti.nlp.amr.Entity;@185a6e9))
AMR:
(a / and, op, c / capable-41)
(a2 / address-02, ARG0, a3 / agree-01)
(a2 / address-02, ARG1, p4 / problem)
(a2 / address-02, ARG2, a / and)
(a3 / agree-01, ARG1, t2 / tank)
(c / capable-41, ARG1, o / organization)
(c2 / country, name, n2 / name)
(c3 / city, name, n5 / name)
(d / director, mod, e2 / executive)
(e / enrich-01, ARG1, c3 / city)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(h / have-org-role-91, ARG1, c3 / city)
(h / have-org-role-91, ARG2, d / director)
(l / lead-03, ARG1, a / and)
(l / lead-03, ARG2, p / produce-01)
(m / material, mod, b / bomb)
(m / material, mod, n / nucleus)
(n2 / name, op, "Iran")
(n3 / name, op, "Daryl")
(n3 / name, op, "G.")
(n3 / name, op, "Kimball")
(n4 / name, op, "Arms")
(n4 / name, op, "Association")
(n4 / name, op, "Control")
(n5 / name, op, "Washington")
(o / organization, name, n4 / name)
(p / produce-01, ARG1, m / material)
(p2 / possible, domain, l / lead-03)
(p3 / pursue-01, ARG0, g / government-organization)
(p3 / pursue-01, ARG1, t / technology)
(p3 / pursue-01, ARG2, a / and)
(p5 / person, name, n3 / name)
(s / state-01, ARG0, p5 / person)
(s / state-01, ARG1, a2 / address-02)
(t / technology, mod, e / enrich-01)
(t3 / think-01, ARG1, t2 / tank)

Decoded in 5,123,832 microseconds
Sentence: Kimball stated the Iranian government's design is to deflect criticism and pressure and to claim that progress is being made.

NER Entity: (person :name (name :op "Kimball"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 13-14:  and => and
Span 11-12:  and => and
Span 15-16:  claim => claim-01
Span 10-11:  criticism => criticize-01
Span 6-7:  design => design-01
Span 4-5:  government => (government-organization :ARG0-of govern-01)
Span 3-4:  Iranian => (country :name (name :op "Iran"))
Span 12-13:  pressure => pressure-01
Span 17-18:  progress => progress-01
Span 1-2:  stated => state-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),progress,progress-01,false), Span(15,16,List(1),claim,claim-01,false), Span(13,14,List(2),and,and,false), Span(12,13,List(3),pressure,pressure-01,false), Span(11,12,List(4),and,and,false), Span(10,11,List(5),criticism,criticize-01,false), Span(6,7,List(6),design,design-01,false), Span(4,5,List(8, 7),government,(government-organization :ARG0-of govern-01),false), Span(3,4,List(11, 10, 9),Iranian,(country :name (name :op "Iran")),false), Span(1,2,List(12),stated,state-01,false)),Map(2 -> and, 5 -> criticize-01, 12 -> state-01, 8 -> govern-01, 7 -> government-organization, 1 -> claim-01, 4 -> and, 11 -> "Iran", 6 -> design-01, 0 -> progress-01, 9 -> country, 3 -> pressure-01, 10 -> name),Map(n -> name, p2 -> pressure-01, s -> state-01, d -> design-01, g2 -> govern-01, g -> government-organization, p -> progress-01, c3 -> country, a -> and, a2 -> and, c -> claim-01, c2 -> criticize-01))),[Ljava.lang.String;@6f03482,Annotation([Ljava.lang.String;@9d5509a,[Ljava.lang.String;@179ece50,[Ljava.lang.String;@3b0090a4),Annotation([Ljava.lang.String;@3cd3e762,[Ljava.lang.String;@1fa121e2,[Ledu.cmu.lti.nlp.amr.Dependency;@7eac9008),Annotation([Ljava.lang.String;@4116aac9,[Ljava.lang.String;@62ddbd7e,[Ljava.lang.String;@74e52ef6),Annotation([Ljava.lang.String;@6ed3ccb2,[Ljava.lang.String;@1a677343,[Ledu.cmu.lti.nlp.amr.Entity;@15de0b3c))
AMR:
(a / and, op, c / claim-01)
(a / and, op, c2 / criticize-01)
(a / and, op, p2 / pressure-01)
(c / claim-01, ARG1, a2 / and)
(c3 / country, name, n / name)
(d / design-01, ARG1, g / government-organization)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(n / name, op, "Iran")
(p / progress-01, ARG1, a / and)
(p2 / pressure-01, ARG1, g / government-organization)
(s / state-01, ARG1, a / and)

Decoded in 373,144 microseconds
Sentence: Iranian officials stated a possible reduction in collaboration with inspectors in the event of more sanctions.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 7-8:  collaboration => collaborate-01
Span 12-13:  event => event
Span 9-10:  inspectors => (person :ARG0-of inspect-01)
Span 0-1:  Iranian => (country :name (name :op "Iran"))
Span 14-15:  more => more
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 4-5:  possible => possible
Span 5-6:  reduction => reduce-01
Span 15-16:  sanctions => sanction-02
Span 2-3:  stated => state-01

Langrangian relaxation converged after 67 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),sanctions,sanction-02,false), Span(14,15,List(1),more,more,false), Span(12,13,List(2),event,event,false), Span(9,10,List(4, 3),inspectors,(person :ARG0-of inspect-01),false), Span(7,8,List(5),collaboration,collaborate-01,false), Span(5,6,List(6),reduction,reduce-01,false), Span(4,5,List(7),possible,possible,false), Span(2,3,List(8),stated,state-01,false), Span(1,2,List(10, 9),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(13, 12, 11),Iranian,(country :name (name :op "Iran")),false)),Map(2 -> event, 5 -> collaborate-01, 12 -> name, 8 -> state-01, 7 -> possible, 1 -> more, 4 -> inspect-01, 11 -> country, 6 -> reduce-01, 0 -> sanction-02, 9 -> have-org-role-91, 3 -> person, 10 -> official, 13 -> "Iran"),Map(e -> event, n -> name, h -> have-org-role-91, s2 -> state-01, p2 -> possible, s -> sanction-02, m -> more, p -> person, i -> inspect-01, r -> reduce-01, c -> collaborate-01, o -> official, c2 -> country))),[Ljava.lang.String;@489115ef,Annotation([Ljava.lang.String;@3857f613,[Ljava.lang.String;@198b6731,[Ljava.lang.String;@7c6908d7),Annotation([Ljava.lang.String;@3c9754d8,[Ljava.lang.String;@3bf7ca37,[Ledu.cmu.lti.nlp.amr.Dependency;@79079097),Annotation([Ljava.lang.String;@4d1c00d0,[Ljava.lang.String;@4b2bac3f,[Ljava.lang.String;@4e08711f),Annotation([Ljava.lang.String;@bcec361,[Ljava.lang.String;@26794848,[Ledu.cmu.lti.nlp.amr.Entity;@302552ec))
AMR:
(c / collaborate-01, ARG0, h / have-org-role-91)
(c / collaborate-01, ARG1, p / person)
(c2 / country, name, n / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(i / inspect-01, ARG0, p / person)
(i / inspect-01, ARG1, e / event)
(n / name, op, "Iran")
(p2 / possible, domain, r / reduce-01)
(r / reduce-01, ARG1, c / collaborate-01)
(s / sanction-02, ARG1, c2 / country)
(s / sanction-02, quant, m / more)
(s2 / state-01, ARG1, r / reduce-01)

Decoded in 889,429 microseconds
Sentence: The Security Council has voted unanimously to impose sanctions against Iran but the penalties have been limited from U.S. demands under Chinese and Russian pressure.

NER Entity: (organization :name (name :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 22-23:  and => and
Span 11-12:  but => contrast-01
Span 21-22:  Chinese => (country :name (name :op "China"))
Span 19-20:  demands => demand-01
Span 7-8:  impose => impose-01
Span 10-11:  Iran => (country :name (name :op "Iran"))
Span 16-17:  limited => limit-01
Span 24-25:  pressure => pressure-01
Span 23-24:  Russian => (country :name (name :op "Russia"))
Span 8-9:  sanctions => sanction-02
Span 1-3:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 18-19:  U.S. => (country :name (name :op "U.S."))

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),pressure,pressure-01,false), Span(23,24,List(3, 2, 1),Russian,(country :name (name :op "Russia")),false), Span(22,23,List(4),and,and,false), Span(21,22,List(7, 6, 5),Chinese,(country :name (name :op "China")),false), Span(19,20,List(8),demands,demand-01,false), Span(18,19,List(11, 10, 9),U.S.,(country :name (name :op "U.S.")),false), Span(16,17,List(12),limited,limit-01,false), Span(11,12,List(13),but,contrast-01,false), Span(10,11,List(16, 15, 14),Iran,(country :name (name :op "Iran")),false), Span(8,9,List(17),sanctions,sanction-02,false), Span(7,8,List(18),impose,impose-01,false), Span(1,3,List(22, 21, 20, 19),Security Council,(organization :name (name :op "Council" :op "Security")),false)),Map(2 -> name, 5 -> country, 12 -> limit-01, 15 -> name, 8 -> demand-01, 21 -> "Council", 18 -> impose-01, 7 -> "China", 17 -> sanction-02, 1 -> country, 4 -> and, 11 -> "U.S.", 14 -> country, 20 -> name, 6 -> name, 22 -> "Security", 0 -> pressure-01, 9 -> country, 16 -> "Iran", 19 -> organization, 3 -> "Russia", 10 -> name, 13 -> contrast-01),Map(n -> name, c4 -> contrast-01, n4 -> name, s -> sanction-02, d -> demand-01, p -> pressure-01, a -> and, c3 -> country, n3 -> name, i -> impose-01, c -> country, l -> limit-01, o -> organization, c2 -> country, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@3d285d7e,Annotation([Ljava.lang.String;@40005471,[Ljava.lang.String;@2cd76f31,[Ljava.lang.String;@367ffa75),Annotation([Ljava.lang.String;@49438269,[Ljava.lang.String;@ba2f4ec,[Ledu.cmu.lti.nlp.amr.Dependency;@1c1bbc4e),Annotation([Ljava.lang.String;@55fe41ea,[Ljava.lang.String;@fbd1f6,[Ljava.lang.String;@1ce24091),Annotation([Ljava.lang.String;@5dda768f,[Ljava.lang.String;@7a8c8dcf,[Ledu.cmu.lti.nlp.amr.Entity;@24269709))
AMR:
(a / and, op, p / pressure-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / contrast-01, ARG1, l / limit-01)
(c5 / country, name, n4 / name)
(d / demand-01, ARG0, c3 / country)
(d / demand-01, ARG1, a / and)
(d / demand-01, location, c2 / country)
(i / impose-01, ARG0, o / organization)
(i / impose-01, ARG1, s / sanction-02)
(l / limit-01, ARG0, o / organization)
(l / limit-01, ARG1, d / demand-01)
(n / name, op, "Russia")
(n2 / name, op, "China")
(n3 / name, op, "U.S.")
(n4 / name, op, "Iran")
(n5 / name, op, "Council")
(n5 / name, op, "Security")
(o / organization, name, n5 / name)
(p / pressure-01, ARG1, c / country)
(s / sanction-02, ARG1, c5 / country)

Decoded in 1,191,497 microseconds
Sentence: SOLTANIEH stated in an interview with state-controlled Iranian television that the report and the measures taken make the intervention of any other international organization including the Security Council irrelevant and unjustified.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "Security" :op "Council"))
Spans:
Span 31-32:  and => and
Span 14-15:  and => and
Span 22-23:  any => any
Span 8-9:  controlled => control-01
Span 26-28:  including the => (organization :name (name :op "Security" :op "Council"))
Span 24-25:  international => international
Span 20-21:  intervention => intervene-01
Span 4-5:  interview => interview-01
Span 9-10:  Iranian => (country :name (name :op "Iran"))
Span 18-19:  make => make-01
Span 16-17:  measures => measure
Span 25-26:  organization => organization
Span 23-24:  other => other
Span 13-14:  report => report
Span 28-30:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 6-7:  state => state
Span 1-2:  stated => state-01
Span 17-18:  taken => take-01
Span 10-11:  television => television

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),and,and,false), Span(28,30,List(4, 3, 2, 1),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(26,28,List(8, 7, 6, 5),including the,(organization :name (name :op "Security" :op "Council")),false), Span(25,26,List(9),organization,organization,false), Span(24,25,List(10),international,international,false), Span(23,24,List(11),other,other,false), Span(22,23,List(12),any,any,false), Span(20,21,List(13),intervention,intervene-01,false), Span(18,19,List(14),make,make-01,false), Span(17,18,List(15),taken,take-01,false), Span(16,17,List(16),measures,measure,false), Span(14,15,List(17),and,and,false), Span(13,14,List(18),report,report,false), Span(10,11,List(19),television,television,false), Span(9,10,List(22, 21, 20),Iranian,(country :name (name :op "Iran")),false), Span(8,9,List(23),controlled,control-01,false), Span(6,7,List(24),state,state,false), Span(4,5,List(25),interview,interview-01,false), Span(1,2,List(26),stated,state-01,false)),Map(2 -> name, 5 -> organization, 12 -> any, 8 -> "Council", 15 -> take-01, 21 -> name, 18 -> report, 24 -> state, 7 -> "Security", 1 -> organization, 17 -> and, 23 -> control-01, 26 -> state-01, 4 -> "Security", 11 -> other, 14 -> make-01, 20 -> country, 6 -> name, 9 -> organization, 0 -> and, 22 -> "Iran", 16 -> measure, 19 -> television, 10 -> international, 3 -> "Council", 25 -> interview-01, 13 -> intervene-01),Map(n -> name, s2 -> state-01, t -> take-01, o3 -> organization, m2 -> measure, a3 -> and, s -> state, m -> make-01, i3 -> interview-01, n3 -> name, a -> and, o2 -> organization, t2 -> television, i2 -> intervene-01, r -> report, i -> international, a2 -> any, c -> country, o -> organization, o4 -> other, c2 -> control-01, n2 -> name))),[Ljava.lang.String;@2aceadd4,Annotation([Ljava.lang.String;@24aed80c,[Ljava.lang.String;@3a52dba3,[Ljava.lang.String;@2a5c8d3f),Annotation([Ljava.lang.String;@752325ad,[Ljava.lang.String;@279fedbd,[Ledu.cmu.lti.nlp.amr.Dependency;@b3ca52e),Annotation([Ljava.lang.String;@45c7e403,[Ljava.lang.String;@2925bf5b,[Ljava.lang.String;@710f4dc7),Annotation([Ljava.lang.String;@1ff4931d,[Ljava.lang.String;@65e98b1c,[Ledu.cmu.lti.nlp.amr.Entity;@61322f9d))
AMR:
(a / and, op, i2 / intervene-01)
(a / and, op, o / organization)
(c / country, name, n3 / name)
(c2 / control-01, ARG0, s / state)
(c2 / control-01, ARG1, t2 / television)
(i2 / intervene-01, ARG1, o3 / organization)
(i3 / interview-01, ARG1, t2 / television)
(m / make-01, ARG0, a3 / and)
(m / make-01, ARG1, i2 / intervene-01)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "Council")
(n2 / name, op, "Security")
(n3 / name, op, "Iran")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(o2 / organization, part, o3 / organization)
(o3 / organization, mod, a2 / any)
(o4 / other, mod, a2 / any)
(s2 / state-01, ARG1, m / make-01)
(s2 / state-01, medium, i3 / interview-01)
(t / take-01, ARG0, r / report)
(t / take-01, ARG1, m2 / measure)
(t / take-01, ARG2, i / international)
(t / take-01, ARG6, m / make-01)
(t2 / television, mod, c / country)

Decoded in 1,297,960 microseconds
Sentence: 2007-09-30

mkDayMonthYear(2007-09-30,30,09,2007)
mkDayMonthYear(2007-09-30,30,09,2007)
Spans:
Span 0-1:  2007-09-30 => (date-entity :day 30 :month 9 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-09-30,(date-entity :day 30 :month 9 :year 2007),false)),Map(2 -> 9, 1 -> 30, 0 -> date-entity, 3 -> 2007),Map(2 -> 2007, d -> date-entity, 9 -> 9, 3 -> 30))),[Ljava.lang.String;@6ad82709,Annotation([Ljava.lang.String;@510f3d34,[Ljava.lang.String;@7817fd62,[Ljava.lang.String;@8297b3a),Annotation([Ljava.lang.String;@2362f559,[Ljava.lang.String;@b2c9a9c,[Ledu.cmu.lti.nlp.amr.Dependency;@4c178a76),Annotation([Ljava.lang.String;@fa4c865,[Ljava.lang.String;@3bd82cf5,[Ljava.lang.String;@544fa968),Annotation([Ljava.lang.String;@247bddad,[Ljava.lang.String;@d35dea7,[Ledu.cmu.lti.nlp.amr.Entity;@7770f470))
AMR:
(d / date-entity, day, 3 / 30)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2007)

Decoded in 8,538 microseconds
Sentence: Israel (IL)

NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "IL"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 0-1:  Israel => (country :name (name :op "Israel"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Israel,(country :name (name :op "Israel")),false)),Map(2 -> "Israel", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@5e5d171f,Annotation([Ljava.lang.String;@24313fcc,[Ljava.lang.String;@7d20d0b,[Ljava.lang.String;@77f1baf5),Annotation([Ljava.lang.String;@41a2befb,[Ljava.lang.String;@6c40365c,[Ledu.cmu.lti.nlp.amr.Dependency;@7bedc48a),Annotation([Ljava.lang.String;@131ef10,[Ljava.lang.String;@55b0dcab,[Ljava.lang.String;@38afe297),Annotation([Ljava.lang.String;@2df3b89c,[Ljava.lang.String;@23348b5d,[Ledu.cmu.lti.nlp.amr.Entity;@70325e14))
AMR:
(c / country, name, n / name)
(n / name, op, "Israel")

Decoded in 5,991 microseconds
Sentence: proliferation; technology; international; politics

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  international => international
Span 6-7:  politics => politics
Span 0-1:  proliferation => proliferate-01
Span 2-3:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),politics,politics,false), Span(5,6,List(1),;,and,false), Span(4,5,List(2),international,international,false), Span(3,4,List(3),;,and,false), Span(2,3,List(4),technology,technology,false), Span(1,2,List(5),;,and,false), Span(0,1,List(6),proliferation,proliferate-01,false)),Map(2 -> international, 5 -> and, 1 -> and, 4 -> technology, 6 -> proliferate-01, 0 -> politics, 3 -> and),Map(t -> technology, p2 -> proliferate-01, a3 -> and, p -> politics, a -> and, a2 -> and, i -> international))),[Ljava.lang.String;@37ceb1df,Annotation([Ljava.lang.String;@7c9d8e2,[Ljava.lang.String;@20d525,[Ljava.lang.String;@6200f9cb),Annotation([Ljava.lang.String;@2002fc1d,[Ljava.lang.String;@69453e37,[Ledu.cmu.lti.nlp.amr.Dependency;@6f4a47c7),Annotation([Ljava.lang.String;@ae13544,[Ljava.lang.String;@3d34d211,[Ljava.lang.String;@7dc0f706),Annotation([Ljava.lang.String;@4009e306,[Ljava.lang.String;@43c1b556,[Ledu.cmu.lti.nlp.amr.Entity;@587e5365))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, i / international)
(a2 / and, op, p / politics)
(a3 / and, op, a2 / and)
(a3 / and, op, p2 / proliferate-01)
(a3 / and, op, t / technology)

Decoded in 24,681 microseconds
Sentence: Documents outlining the Israeli proposal to allow the international transfer of nuclear technology to States that have not signed on to nonproliferation rules were distributed to the Nuclear Suppliers Group.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "States"))
NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 6-7:  allow => allow-01
Span 24-25:  distributed => distribute-01
Span 0-1:  Documents => document
Span 8-9:  international => international
Span 3-4:  Israeli => (country :name (name :op "Israel"))
Span 11-12:  nuclear => nucleus
Span 27-30:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 4-5:  proposal => propose-01
Span 22-23:  rules => rule
Span 18-19:  signed => sign-02
Span 12-13:  technology => technology
Span 9-10:  transfer => transfer-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,30,List(4, 3, 2, 1, 0),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(24,25,List(5),distributed,distribute-01,false), Span(22,23,List(6),rules,rule,false), Span(18,19,List(7),signed,sign-02,false), Span(12,13,List(8),technology,technology,false), Span(11,12,List(9),nuclear,nucleus,false), Span(9,10,List(10),transfer,transfer-01,false), Span(8,9,List(11),international,international,false), Span(6,7,List(12),allow,allow-01,false), Span(4,5,List(13),proposal,propose-01,false), Span(3,4,List(16, 15, 14),Israeli,(country :name (name :op "Israel")),false), Span(0,1,List(17),Documents,document,false)),Map(2 -> "Nuclear", 5 -> distribute-01, 12 -> allow-01, 15 -> name, 8 -> technology, 7 -> sign-02, 17 -> document, 1 -> name, 4 -> "Group", 11 -> international, 14 -> country, 6 -> rule, 0 -> organization, 9 -> nucleus, 16 -> "Israel", 3 -> "Suppliers", 10 -> transfer-01, 13 -> propose-01),Map(n -> name, t -> technology, s -> sign-02, d -> distribute-01, p -> propose-01, a -> allow-01, n3 -> name, d2 -> document, t2 -> transfer-01, r -> rule, i -> international, c -> country, o -> organization, n2 -> nucleus))),[Ljava.lang.String;@22fcf7ab,Annotation([Ljava.lang.String;@2de23121,[Ljava.lang.String;@63475ace,[Ljava.lang.String;@4988d8b8),Annotation([Ljava.lang.String;@c0c2f8d,[Ljava.lang.String;@305b7c14,[Ledu.cmu.lti.nlp.amr.Dependency;@6913c1fb),Annotation([Ljava.lang.String;@66d18979,[Ljava.lang.String;@bccb269,[Ljava.lang.String;@609cd4d8),Annotation([Ljava.lang.String;@17f7cd29,[Ljava.lang.String;@7d8704ef,[Ledu.cmu.lti.nlp.amr.Entity;@13b6aecc))
AMR:
(a / allow-01, ARG1, t2 / transfer-01)
(a / allow-01, ARG6, d2 / document)
(c / country, name, n3 / name)
(d / distribute-01, ARG1, d2 / document)
(d / distribute-01, ARG2, o / organization)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n3 / name, op, "Israel")
(o / organization, location, r / rule)
(o / organization, name, n / name)
(p / propose-01, ARG0, c / country)
(p / propose-01, ARG1, a / allow-01)
(s / sign-02, ARG1, t2 / transfer-01)
(t / technology, mod, n2 / nucleus)
(t2 / transfer-01, ARG1, t / technology)
(t2 / transfer-01, mod, i / international)

Decoded in 526,620 microseconds
Sentence: The proposal may complicate the Bush administration's efforts to win an exemption for India to engage in nuclear trade.

NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 6-7:  administration => administrate-01
Span 5-6:  Bush => (person :name (name :op "Bush"))
Span 8-9:  efforts => effort
Span 16-17:  engage => engage-01
Span 12-13:  exemption => exempt-01
Span 14-15:  India => (country :name (name :op "India"))
Span 2-3:  may => possible
Span 18-19:  nuclear => nucleus
Span 1-2:  proposal => propose-01
Span 19-20:  trade => trade-01
Span 10-11:  win => win-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),trade,trade-01,false), Span(18,19,List(1),nuclear,nucleus,false), Span(16,17,List(2),engage,engage-01,false), Span(14,15,List(5, 4, 3),India,(country :name (name :op "India")),false), Span(12,13,List(6),exemption,exempt-01,false), Span(10,11,List(7),win,win-01,false), Span(8,9,List(8),efforts,effort,false), Span(6,7,List(9),administration,administrate-01,false), Span(5,6,List(12, 11, 10),Bush,(person :name (name :op "Bush")),false), Span(2,3,List(13),may,possible,false), Span(1,2,List(14),proposal,propose-01,false)),Map(2 -> engage-01, 5 -> "India", 12 -> "Bush", 8 -> effort, 7 -> win-01, 1 -> nucleus, 4 -> name, 11 -> name, 14 -> propose-01, 6 -> exempt-01, 0 -> trade-01, 9 -> administrate-01, 3 -> country, 10 -> person, 13 -> possible),Map(e -> engage-01, n -> nucleus, w -> win-01, t -> trade-01, e2 -> exempt-01, p2 -> possible, p -> person, a -> administrate-01, n3 -> name, c -> country, e3 -> effort, p3 -> propose-01, n2 -> name))),[Ljava.lang.String;@158a8276,Annotation([Ljava.lang.String;@3c3d9b6b,[Ljava.lang.String;@79d8407f,[Ljava.lang.String;@5fbe4146),Annotation([Ljava.lang.String;@1e66f1f5,[Ljava.lang.String;@4e50c791,[Ledu.cmu.lti.nlp.amr.Dependency;@7530ad9c),Annotation([Ljava.lang.String;@58a9760d,[Ljava.lang.String;@71e9ddb4,[Ljava.lang.String;@394df057),Annotation([Ljava.lang.String;@4961f6af,[Ljava.lang.String;@5aebe890,[Ledu.cmu.lti.nlp.amr.Entity;@65d09a04))
AMR:
(a / administrate-01, ARG1, p / person)
(c / country, name, n2 / name)
(e / engage-01, ARG0, c / country)
(e / engage-01, ARG2, t / trade-01)
(e2 / exempt-01, ARG1, e / engage-01)
(e3 / effort, poss, a / administrate-01)
(e3 / effort, purpose, w / win-01)
(n2 / name, op, "India")
(n3 / name, op, "Bush")
(p / person, name, n3 / name)
(p2 / possible, domain, p3 / propose-01)
(p3 / propose-01, ARG1, e2 / exempt-01)
(t / trade-01, ARG1, n / nucleus)
(w / win-01, ARG1, e2 / exempt-01)

Decoded in 461,269 microseconds
Sentence: Israeli officials convinced a key group of nations engaged in nuclear trade to adopt new guidelines allowing the international transfer of nuclear technology to States that have not signed on to nonproliferation rules.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "States"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 13-14:  adopt => adopt-01
Span 16-17:  allowing => allow-01
Span 2-3:  convinced => convince-01
Span 8-9:  engaged => engage-01
Span 5-6:  group => group
Span 15-16:  guidelines => guideline
Span 18-19:  international => international
Span 0-1:  Israeli => (country :name (name :op "Israel"))
Span 4-5:  key => key
Span 7-8:  nations => nation
Span 14-15:  new => new
Span 21-22:  nuclear => nucleus
Span 10-11:  nuclear => nucleus
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 32-33:  rules => rule
Span 28-29:  signed => sign-02
Span 22-23:  technology => technology
Span 11-12:  trade => trade-01
Span 19-20:  transfer => transfer-01

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),rules,rule,false), Span(28,29,List(1),signed,sign-02,false), Span(22,23,List(2),technology,technology,false), Span(21,22,List(3),nuclear,nucleus,false), Span(19,20,List(4),transfer,transfer-01,false), Span(18,19,List(5),international,international,false), Span(16,17,List(6),allowing,allow-01,false), Span(15,16,List(7),guidelines,guideline,false), Span(14,15,List(8),new,new,false), Span(13,14,List(9),adopt,adopt-01,false), Span(11,12,List(10),trade,trade-01,false), Span(10,11,List(11),nuclear,nucleus,false), Span(8,9,List(12),engaged,engage-01,false), Span(7,8,List(13),nations,nation,false), Span(5,6,List(14),group,group,false), Span(4,5,List(15),key,key,false), Span(2,3,List(16),convinced,convince-01,false), Span(1,2,List(18, 17),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(21, 20, 19),Israeli,(country :name (name :op "Israel")),false)),Map(2 -> technology, 5 -> international, 12 -> engage-01, 15 -> key, 8 -> new, 21 -> "Israel", 18 -> official, 7 -> guideline, 17 -> have-org-role-91, 1 -> sign-02, 4 -> transfer-01, 11 -> nucleus, 14 -> group, 20 -> name, 6 -> allow-01, 0 -> rule, 9 -> adopt-01, 16 -> convince-01, 19 -> country, 3 -> nucleus, 10 -> trade-01, 13 -> nation),Map(e -> engage-01, n -> nucleus, h -> have-org-role-91, k -> key, t -> technology, n4 -> nation, s -> sign-02, g2 -> group, t3 -> trade-01, g -> guideline, a -> allow-01, n3 -> nucleus, t2 -> transfer-01, r -> rule, i -> international, a2 -> adopt-01, c -> convince-01, o -> official, c2 -> country, n2 -> new, n5 -> name))),[Ljava.lang.String;@33c911a1,Annotation([Ljava.lang.String;@75db5df9,[Ljava.lang.String;@707194ba,[Ljava.lang.String;@1190200a),Annotation([Ljava.lang.String;@6a2f6f80,[Ljava.lang.String;@45b4c3a9,[Ledu.cmu.lti.nlp.amr.Dependency;@399c4be1),Annotation([Ljava.lang.String;@291caca8,[Ljava.lang.String;@385e9564,[Ljava.lang.String;@5b94b04d),Annotation([Ljava.lang.String;@8c3b9d,[Ljava.lang.String;@4c39bec8,[Ledu.cmu.lti.nlp.amr.Entity;@f79e))
AMR:
(a / allow-01, ARG0, g / guideline)
(a / allow-01, ARG1, t2 / transfer-01)
(a2 / adopt-01, ARG1, g / guideline)
(c / convince-01, ARG1, g2 / group)
(c2 / country, name, n5 / name)
(e / engage-01, ARG0, g2 / group)
(e / engage-01, ARG1, a2 / adopt-01)
(e / engage-01, ARG6, n4 / nation)
(g / guideline, mod, n2 / new)
(g2 / group, mod, k / key)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n5 / name, op, "Israel")
(s / sign-02, ARG1, t2 / transfer-01)
(s / sign-02, ARG2, r / rule)
(t / technology, mod, n / nucleus)
(t2 / transfer-01, ARG1, t / technology)
(t2 / transfer-01, ARG2, c2 / country)
(t2 / transfer-01, mod, i / international)
(t3 / trade-01, ARG1, a2 / adopt-01)
(t3 / trade-01, mod, n3 / nucleus)

Decoded in 1,705,538 microseconds
Sentence: Countries including India, Israel and Pakistan that have not signed the nuclear Non-Proliferation Treaty are prohibited from participating in international nuclear trade which includes purchasing reactors, uranium fuel or yellowcake.

NER Entity: (country :name (name :op "Countries"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Pakistan"))
NER Entity: (organization :name (name :op "Non" :op "-" :op "Proliferation" :op "Treaty"))
NER Entity: (country :name (name :op "Pakistan"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Countries"))
Spans:
Span 5-6:  and => and
Span 0-1:  Countries => country
Span 31-32:  fuel => fuel
Span 26-27:  includes => include-01
Span 1-2:  including => include-91
Span 2-3:  India => (country :name (name :op "India"))
Span 22-23:  international => international
Span 4-5:  Israel => (country :name (name :op "Israel"))
Span 13-17:  Non - Proliferation Treaty => (treaty :name (name :op "Treaty" :op "Non-Proliferation"))
Span 23-24:  nuclear => nucleus
Span 12-13:  nuclear => nucleus
Span 32-33:  or => or
Span 6-7:  Pakistan => (country :name (name :op "Pakistan"))
Span 20-21:  participating => participate-01
Span 18-19:  prohibited => prohibit-01
Span 27-28:  purchasing => purchase-01
Span 28-29:  reactors => reactor
Span 10-11:  signed => sign-02
Span 24-25:  trade => trade-01
Span 30-31:  uranium => uranium

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),or,or,false), Span(31,32,List(1),fuel,fuel,false), Span(30,31,List(2),uranium,uranium,false), Span(28,29,List(3),reactors,reactor,false), Span(27,28,List(4),purchasing,purchase-01,false), Span(26,27,List(5),includes,include-01,false), Span(24,25,List(6),trade,trade-01,false), Span(23,24,List(7),nuclear,nucleus,false), Span(22,23,List(8),international,international,false), Span(20,21,List(9),participating,participate-01,false), Span(18,19,List(10),prohibited,prohibit-01,false), Span(13,17,List(14, 13, 12, 11),Non - Proliferation Treaty,(treaty :name (name :op "Treaty" :op "Non-Proliferation")),false), Span(12,13,List(15),nuclear,nucleus,false), Span(10,11,List(16),signed,sign-02,false), Span(6,7,List(19, 18, 17),Pakistan,(country :name (name :op "Pakistan")),false), Span(5,6,List(20),and,and,false), Span(4,5,List(23, 22, 21),Israel,(country :name (name :op "Israel")),false), Span(2,3,List(26, 25, 24),India,(country :name (name :op "India")),false), Span(1,2,List(27),including,include-91,false), Span(0,1,List(28),Countries,country,false)),Map(2 -> uranium, 5 -> include-01, 27 -> include-91, 12 -> name, 8 -> international, 15 -> nucleus, 21 -> country, 18 -> name, 24 -> country, 7 -> nucleus, 1 -> fuel, 17 -> country, 23 -> "Israel", 26 -> "India", 4 -> purchase-01, 11 -> treaty, 14 -> "Non-Proliferation", 20 -> and, 28 -> country, 6 -> trade-01, 9 -> participate-01, 0 -> or, 22 -> name, 16 -> sign-02, 19 -> "Pakistan", 10 -> prohibit-01, 3 -> reactor, 25 -> name, 13 -> "Treaty"),Map(n -> nucleus, t -> trade-01, p2 -> participate-01, c4 -> country, n4 -> name, s -> sign-02, i3 -> include-91, p -> purchase-01, c3 -> country, a -> and, n3 -> nucleus, n6 -> name, i2 -> international, t2 -> treaty, r -> reactor, i -> include-01, c -> country, u -> uranium, f -> fuel, o -> or, p3 -> prohibit-01, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@7ee8290b,Annotation([Ljava.lang.String;@1f59a598,[Ljava.lang.String;@1e178745,[Ljava.lang.String;@192c3f1e),Annotation([Ljava.lang.String;@26b3fd41,[Ljava.lang.String;@7494f96a,[Ledu.cmu.lti.nlp.amr.Dependency;@561b6512),Annotation([Ljava.lang.String;@2e377400,[Ljava.lang.String;@1757cd72,[Ljava.lang.String;@445b295b),Annotation([Ljava.lang.String;@49e5f737,[Ljava.lang.String;@5c671d7f,[Ledu.cmu.lti.nlp.amr.Entity;@757277dc))
AMR:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(c / country, name, n4 / name)
(c2 / country, name, n5 / name)
(c3 / country, name, n6 / name)
(i / include-01, ARG0, t / trade-01)
(i / include-01, ARG1, r / reactor)
(i3 / include-91, ARG1, a / and)
(i3 / include-91, ARG2, c4 / country)
(n2 / name, op, "Non-Proliferation")
(n2 / name, op, "Treaty")
(n4 / name, op, "Pakistan")
(n5 / name, op, "Israel")
(n6 / name, op, "India")
(o / or, op, f / fuel)
(o / or, op, r / reactor)
(p / purchase-01, ARG1, r / reactor)
(p2 / participate-01, ARG0, t2 / treaty)
(p2 / participate-01, ARG1, t / trade-01)
(p3 / prohibit-01, ARG1, c4 / country)
(p3 / prohibit-01, ARG2, p2 / participate-01)
(s / sign-02, ARG0, u / uranium)
(s / sign-02, ARG1, t2 / treaty)
(s / sign-02, ARG2, c / country)
(t / trade-01, ARG1, n / nucleus)
(t / trade-01, mod, i2 / international)
(t2 / treaty, mod, n3 / nucleus)
(t2 / treaty, name, n2 / name)

Decoded in 1,738,480 microseconds
Sentence: Documents outlining the Israeli proposal were distributed to the 45-member Nuclear Suppliers Group (NSG) in March 2007.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 10-13:  - member Nuclear => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 9-10:  45 => 45
Span 6-7:  distributed => distribute-01
Span 0-1:  Documents => document
Span 14-15:  Group => group
Span 3-4:  Israeli => (country :name (name :op "Israel"))
Span 19-21:  March 2007 => (date-entity :month 3 :year 2007)
Span 4-5:  proposal => propose-01

Langrangian relaxation converged after 59 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,21,List(2, 1, 0),March 2007,(date-entity :month 3 :year 2007),false), Span(14,15,List(3),Group,group,false), Span(10,13,List(8, 7, 6, 5, 4),- member Nuclear,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(9,10,List(9),45,45,false), Span(6,7,List(10),distributed,distribute-01,false), Span(4,5,List(11),proposal,propose-01,false), Span(3,4,List(14, 13, 12),Israeli,(country :name (name :op "Israel")),false), Span(0,1,List(15),Documents,document,false)),Map(2 -> 2007, 5 -> name, 12 -> country, 15 -> document, 8 -> "Group", 7 -> "Suppliers", 1 -> 3, 4 -> organization, 11 -> propose-01, 14 -> "Israel", 6 -> "Nuclear", 0 -> date-entity, 9 -> 45, 3 -> group, 10 -> distribute-01, 13 -> name),Map(n -> name, 2 -> 2007, d3 -> document, d -> date-entity, p -> propose-01, g -> group, 4 -> 45, d2 -> distribute-01, c -> country, o -> organization, n2 -> name, 3 -> 3))),[Ljava.lang.String;@687e99d8,Annotation([Ljava.lang.String;@e4487af,[Ljava.lang.String;@6aaceffd,[Ljava.lang.String;@c86b9e3),Annotation([Ljava.lang.String;@10aa41f2,[Ljava.lang.String;@3af9c5b7,[Ledu.cmu.lti.nlp.amr.Dependency;@37271612),Annotation([Ljava.lang.String;@ed7f8b4,[Ljava.lang.String;@4c309d4d,[Ljava.lang.String;@38102d01),Annotation([Ljava.lang.String;@37883b97,[Ljava.lang.String;@6ab778a,[Ledu.cmu.lti.nlp.amr.Entity;@4e3958e7))
AMR:
(4 / 45, op, o / organization)
(c / country, name, n2 / name)
(d / date-entity, month, 3 / 3)
(d / date-entity, year, 2 / 2007)
(d2 / distribute-01, ARG1, g / group)
(d2 / distribute-01, ARG6, d3 / document)
(d2 / distribute-01, time, d / date-entity)
(g / group, mod, 4 / 45)
(g / group, mod, c / country)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n2 / name, op, "Israel")
(o / organization, name, n / name)
(p / propose-01, ARG0, c / country)

Decoded in 799,307 microseconds
Sentence: The Israeli presentation was made in a nonpaper that allows for official deniability.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 9-10:  allows => allow-01
Span 1-2:  Israeli => (country :name (name :op "Israel"))
Span 11-12:  official => (have-org-role-91 :ARG2 official)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),official,(have-org-role-91 :ARG2 official),false), Span(9,10,List(2),allows,allow-01,false), Span(1,2,List(5, 4, 3),Israeli,(country :name (name :op "Israel")),false)),Map(2 -> allow-01, 5 -> "Israel", 1 -> official, 4 -> name, 0 -> have-org-role-91, 3 -> country),Map(n -> name, h -> have-org-role-91, a -> allow-01, c -> country, o -> official))),[Ljava.lang.String;@77f80c04,Annotation([Ljava.lang.String;@1dac5ef,[Ljava.lang.String;@5c90e579,[Ljava.lang.String;@58ea606c),Annotation([Ljava.lang.String;@6f45df59,[Ljava.lang.String;@38e79ae3,[Ledu.cmu.lti.nlp.amr.Dependency;@63070bab),Annotation([Ljava.lang.String;@68e5eea7,[Ljava.lang.String;@291b4bf5,[Ljava.lang.String;@2d2ffcb7),Annotation([Ljava.lang.String;@762ef0ea,[Ljava.lang.String;@31f9b85e,[Ledu.cmu.lti.nlp.amr.Entity;@424e1977))
AMR:
(a / allow-01, ARG1, c / country)
(c / country, name, n / name)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Israel")

Decoded in 26,577 microseconds
Sentence: According to a letter from the Chairman of the NSG on 17 March 2007 the Israeli presentation was offered in the context of the NSG's debate over Indian officials' bid for an exemption.

NER Entity: (organization :name (name :op "NSG"))
mkDayMonthYear(17	March	2007,17,March,2007)
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 11-14:  17 March 2007 => (date-entity :day 17 :month 3 :year 2007)
Span 31-32:  bid => bid-01
Span 6-7:  Chairman => (have-org-role-91 :ARG2 chairman)
Span 26-27:  debate => debate-01
Span 34-35:  exemption => exempt-01
Span 28-29:  Indian => (country :name (name :op "India"))
Span 15-16:  Israeli => (country :name (name :op "Israel"))
Span 3-4:  letter => letter
Span 18-19:  offered => offer-01
Span 29-30:  officials => (have-org-role-91 :ARG2 official)
Span 27-28:  over => over

Langrangian relaxation converged after 83 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),exemption,exempt-01,false), Span(31,32,List(1),bid,bid-01,false), Span(29,30,List(3, 2),officials,(have-org-role-91 :ARG2 official),false), Span(28,29,List(6, 5, 4),Indian,(country :name (name :op "India")),false), Span(27,28,List(7),over,over,false), Span(26,27,List(8),debate,debate-01,false), Span(18,19,List(9),offered,offer-01,false), Span(15,16,List(12, 11, 10),Israeli,(country :name (name :op "Israel")),false), Span(11,14,List(16, 15, 14, 13),17 March 2007,(date-entity :day 17 :month 3 :year 2007),false), Span(6,7,List(18, 17),Chairman,(have-org-role-91 :ARG2 chairman),false), Span(3,4,List(19),letter,letter,false)),Map(2 -> have-org-role-91, 5 -> name, 12 -> "Israel", 15 -> 3, 8 -> debate-01, 18 -> chairman, 7 -> over, 17 -> have-org-role-91, 1 -> bid-01, 4 -> country, 11 -> name, 14 -> 17, 6 -> "India", 0 -> exempt-01, 9 -> offer-01, 16 -> 2007, 19 -> letter, 3 -> official, 10 -> country, 13 -> date-entity),Map(e -> exempt-01, n -> name, h -> have-org-role-91, 2 -> 2007, h2 -> have-org-role-91, b -> bid-01, o3 -> offer-01, d -> debate-01, 1 -> 17, c3 -> chairman, o2 -> over, d2 -> date-entity, c -> country, l -> letter, o -> official, 3 -> 3, c2 -> country, n2 -> name))),[Ljava.lang.String;@10d68fcd,Annotation([Ljava.lang.String;@117e949d,[Ljava.lang.String;@6db9f5a4,[Ljava.lang.String;@5f8edcc5),Annotation([Ljava.lang.String;@7b02881e,[Ljava.lang.String;@1ebd319f,[Ledu.cmu.lti.nlp.amr.Dependency;@3c0be339),Annotation([Ljava.lang.String;@15ca7889,[Ljava.lang.String;@7a675056,[Ljava.lang.String;@d21a74c),Annotation([Ljava.lang.String;@6e509ffa,[Ljava.lang.String;@2898ac89,[Ledu.cmu.lti.nlp.amr.Entity;@683dbc2c))
AMR:
(b / bid-01, ARG1, e / exempt-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / debate-01, ARG0, l / letter)
(d / debate-01, ARG1, o2 / over)
(d2 / date-entity, day, 1 / 17)
(d2 / date-entity, month, 3 / 3)
(d2 / date-entity, year, 2 / 2007)
(e / exempt-01, ARG0, c2 / country)
(e / exempt-01, ARG1, d2 / date-entity)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, c3 / chairman)
(n / name, op, "India")
(n2 / name, op, "Israel")
(o2 / over, op, b / bid-01)
(o3 / offer-01, ARG0, h / have-org-role-91)
(o3 / offer-01, ARG1, d / debate-01)

Decoded in 2,108,956 microseconds
Sentence: Among the nations that have not signed the Treaty only India and Israel would qualify for admission to the NSG under the Israeli proposal.

NER Entity: (country :name (name :op "Treaty"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Treaty"))
Spans:
Span 16-17:  admission => admit-02
Span 11-12:  and => and
Span 10-11:  India => (country :name (name :op "India"))
Span 12-13:  Israel => (country :name (name :op "Israel"))
Span 22-23:  Israeli => (country :name (name :op "Israel"))
Span 2-3:  nations => nation
Span 9-10:  only => only
Span 23-24:  proposal => propose-01
Span 6-7:  signed => sign-02
Span 8-9:  Treaty => treaty

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),proposal,propose-01,false), Span(22,23,List(3, 2, 1),Israeli,(country :name (name :op "Israel")),false), Span(16,17,List(4),admission,admit-02,false), Span(12,13,List(7, 6, 5),Israel,(country :name (name :op "Israel")),false), Span(11,12,List(8),and,and,false), Span(10,11,List(11, 10, 9),India,(country :name (name :op "India")),false), Span(9,10,List(12),only,only,false), Span(8,9,List(13),Treaty,treaty,false), Span(6,7,List(14),signed,sign-02,false), Span(2,3,List(15),nations,nation,false)),Map(2 -> name, 5 -> country, 12 -> only, 15 -> nation, 8 -> and, 7 -> "Israel", 1 -> country, 4 -> admit-02, 11 -> "India", 14 -> sign-02, 6 -> name, 0 -> propose-01, 9 -> country, 3 -> "Israel", 10 -> name, 13 -> treaty),Map(n -> name, t -> treaty, n4 -> nation, s -> sign-02, p -> propose-01, a -> admit-02, c3 -> country, n3 -> name, a2 -> and, c -> country, o -> only, c2 -> country, n2 -> name))),[Ljava.lang.String;@68267da0,Annotation([Ljava.lang.String;@2638011,[Ljava.lang.String;@6ff29830,[Ljava.lang.String;@6a2b953e),Annotation([Ljava.lang.String;@313b2ea6,[Ljava.lang.String;@2f465398,[Ledu.cmu.lti.nlp.amr.Dependency;@548e6d58),Annotation([Ljava.lang.String;@623a8092,[Ljava.lang.String;@a1cdc6d,[Ljava.lang.String;@175b9425),Annotation([Ljava.lang.String;@3098cf3b,[Ljava.lang.String;@610f7aa,[Ledu.cmu.lti.nlp.amr.Entity;@6a03bcb1))
AMR:
(a / admit-02, ARG1, c2 / country)
(a2 / and, mod, o / only)
(a2 / and, op, c2 / country)
(a2 / and, op, c3 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(n / name, op, "Israel")
(n2 / name, op, "Israel")
(n3 / name, op, "India")
(p / propose-01, ARG0, a2 / and)
(p / propose-01, ARG1, c / country)
(s / sign-02, ARG0, n4 / nation)
(s / sign-02, ARG1, t / treaty)
(s / sign-02, ARG2, o / only)

Decoded in 472,441 microseconds
Sentence: The Israeli plan offered 12 criteria for allowing nuclear trade with non-treaty states.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 4-5:  12 => 12
Span 7-8:  allowing => allow-01
Span 1-2:  Israeli => (country :name (name :op "Israel"))
Span 8-9:  nuclear => nucleus
Span 3-4:  offered => offer-01
Span 2-3:  plan => plan-01
Span 14-15:  states => state-01
Span 9-10:  trade => trade-01
Span 13-14:  treaty => treaty

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),states,state-01,false), Span(13,14,List(1),treaty,treaty,false), Span(9,10,List(2),trade,trade-01,false), Span(8,9,List(3),nuclear,nucleus,false), Span(7,8,List(4),allowing,allow-01,false), Span(4,5,List(5),12,12,false), Span(3,4,List(6),offered,offer-01,false), Span(2,3,List(7),plan,plan-01,false), Span(1,2,List(10, 9, 8),Israeli,(country :name (name :op "Israel")),false)),Map(2 -> trade-01, 5 -> 12, 8 -> country, 7 -> plan-01, 1 -> treaty, 4 -> allow-01, 6 -> offer-01, 9 -> name, 0 -> state-01, 10 -> "Israel", 3 -> nucleus),Map(n -> nucleus, t -> treaty, s -> state-01, p -> plan-01, 1 -> 12, a -> allow-01, t2 -> trade-01, c -> country, o -> offer-01, n2 -> name))),[Ljava.lang.String;@21b2e768,Annotation([Ljava.lang.String;@57250572,[Ljava.lang.String;@5609159b,[Ljava.lang.String;@2118cddf),Annotation([Ljava.lang.String;@17a7f733,[Ljava.lang.String;@68567e20,[Ledu.cmu.lti.nlp.amr.Dependency;@76ed1b7c),Annotation([Ljava.lang.String;@11fc564b,[Ljava.lang.String;@394a2528,[Ljava.lang.String;@6236eb5f),Annotation([Ljava.lang.String;@7c1e2a9e,[Ljava.lang.String;@fa36558,[Ledu.cmu.lti.nlp.amr.Entity;@672872e1))
AMR:
(a / allow-01, ARG1, t2 / trade-01)
(a / allow-01, manner, s / state-01)
(c / country, name, n2 / name)
(n2 / name, op, "Israel")
(o / offer-01, ARG1, p / plan-01)
(o / offer-01, ARG2, a / allow-01)
(p / plan-01, ARG0, c / country)
(p / plan-01, ARG1, t / treaty)
(s / state-01, ARG1, 1 / 12)
(t2 / trade-01, ARG1, n / nucleus)

Decoded in 322,484 microseconds
Sentence: 1 criterion indicated Israel's status as an undeclared nuclear weapons state and said a State should be allowed to engage in nuclear trade if the State applies stringent physical protection, control and accountancy measures to all nuclear weapons, nuclear facilities, source material and special nuclear material in the State's territory.

NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 0-1:  1 => 1
Span 37-38:  all => all
Span 18-19:  allowed => allow-01
Span 46-47:  and => and
Span 33-34:  and => and
Span 12-13:  and => and
Span 27-28:  applies => apply-02
Span 32-33:  control => control-01
Span 20-21:  engage => engage-01
Span 42-43:  facilities => facility
Span 2-3:  indicated => indicate-01
Span 3-4:  Israel => (country :name (name :op "Israel"))
Span 49-50:  material => material
Span 45-46:  material => material
Span 35-36:  measures => measure
Span 48-49:  nuclear => nucleus
Span 41-42:  nuclear => nucleus
Span 38-39:  nuclear => nucleus
Span 22-23:  nuclear => nucleus
Span 9-10:  nuclear => nucleus
Span 29-30:  physical => physical
Span 30-31:  protection => protect-01
Span 13-14:  said => say-01
Span 16-17:  should => recommend-01
Span 44-45:  source => source
Span 47-48:  special => special
Span 11-12:  state => state
Span 5-6:  status => status
Span 54-55:  territory => territory
Span 23-24:  trade => trade-01
Span 39-40:  weapons => weapon
Span 10-11:  weapons => weapon

Langrangian relaxation converged after 57 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),territory,territory,false), Span(49,50,List(1),material,material,false), Span(48,49,List(2),nuclear,nucleus,false), Span(47,48,List(3),special,special,false), Span(46,47,List(4),and,and,false), Span(45,46,List(5),material,material,false), Span(44,45,List(6),source,source,false), Span(42,43,List(7),facilities,facility,false), Span(41,42,List(8),nuclear,nucleus,false), Span(39,40,List(9),weapons,weapon,false), Span(38,39,List(10),nuclear,nucleus,false), Span(37,38,List(11),all,all,false), Span(35,36,List(12),measures,measure,false), Span(33,34,List(13),and,and,false), Span(32,33,List(14),control,control-01,false), Span(30,31,List(15),protection,protect-01,false), Span(29,30,List(16),physical,physical,false), Span(27,28,List(17),applies,apply-02,false), Span(23,24,List(18),trade,trade-01,false), Span(22,23,List(19),nuclear,nucleus,false), Span(20,21,List(20),engage,engage-01,false), Span(18,19,List(21),allowed,allow-01,false), Span(16,17,List(22),should,recommend-01,false), Span(13,14,List(23),said,say-01,false), Span(12,13,List(24),and,and,false), Span(11,12,List(25),state,state,false), Span(10,11,List(26),weapons,weapon,false), Span(9,10,List(27),nuclear,nucleus,false), Span(5,6,List(28),status,status,false), Span(3,4,List(31, 30, 29),Israel,(country :name (name :op "Israel")),false), Span(2,3,List(32),indicated,indicate-01,false), Span(0,1,List(33),1,1,false)),Map(30 -> name, 2 -> nucleus, 5 -> material, 33 -> 1, 27 -> nucleus, 12 -> measure, 8 -> nucleus, 15 -> protect-01, 21 -> allow-01, 18 -> trade-01, 24 -> and, 7 -> facility, 1 -> material, 17 -> apply-02, 23 -> say-01, 26 -> weapon, 4 -> and, 11 -> all, 32 -> indicate-01, 14 -> control-01, 29 -> country, 20 -> engage-01, 28 -> status, 6 -> source, 9 -> weapon, 0 -> territory, 22 -> recommend-01, 16 -> physical, 19 -> nucleus, 10 -> nucleus, 3 -> special, 31 -> "Israel", 25 -> state, 13 -> and),Map(s5 -> status, m3 -> measure, e -> engage-01, w -> weapon, n -> nucleus, s2 -> source, t -> territory, m2 -> material, p2 -> physical, a3 -> and, n4 -> nucleus, s -> special, s4 -> state, a6 -> and, m -> material, 1 -> 1, p -> protect-01, n3 -> nucleus, a -> and, n6 -> name, a5 -> allow-01, t2 -> trade-01, w2 -> weapon, i -> indicate-01, a2 -> all, r -> recommend-01, c -> control-01, s3 -> say-01, f -> facility, c2 -> country, n2 -> nucleus, a4 -> apply-02, n5 -> nucleus))),[Ljava.lang.String;@3571b748,Annotation([Ljava.lang.String;@3e96bacf,[Ljava.lang.String;@484970b0,[Ljava.lang.String;@4470f8a6),Annotation([Ljava.lang.String;@7c83dc97,[Ljava.lang.String;@7748410a,[Ledu.cmu.lti.nlp.amr.Dependency;@740773a3),Annotation([Ljava.lang.String;@37f1104d,[Ljava.lang.String;@55740540,[Ljava.lang.String;@60015ef5),Annotation([Ljava.lang.String;@2f54a33d,[Ljava.lang.String;@1018bde2,[Ledu.cmu.lti.nlp.amr.Entity;@65b3f4a4))
AMR:
(a / and, op, f / facility)
(a / and, op, w / weapon)
(a3 / and, op, c / control-01)
(a3 / and, op, p / protect-01)
(a4 / apply-02, ARG0, a3 / and)
(a4 / apply-02, ARG1, m3 / measure)
(a4 / apply-02, ARG2, a / and)
(a5 / allow-01, ARG1, e / engage-01)
(a5 / allow-01, ARG6, t2 / trade-01)
(a6 / and, op, s3 / say-01)
(c / control-01, ARG1, t / territory)
(c2 / country, name, n6 / name)
(e / engage-01, time, a4 / apply-02)
(f / facility, mod, n2 / nucleus)
(f / facility, mod, n3 / nucleus)
(i / indicate-01, ARG1, a6 / and)
(i / indicate-01, ARG2, s5 / status)
(m / material, location, t / territory)
(m / material, mod, n / nucleus)
(m / material, mod, s / special)
(n6 / name, op, "Israel")
(p / protect-01, ARG0, p2 / physical)
(r / recommend-01, ARG1, a5 / allow-01)
(s2 / source, location, m2 / material)
(s3 / say-01, ARG0, s2 / source)
(s3 / say-01, ARG1, r / recommend-01)
(s4 / state, mod, w2 / weapon)
(s5 / status, location, s4 / state)
(s5 / status, poss, c2 / country)
(t2 / trade-01, ARG0, 1 / 1)
(t2 / trade-01, ARG1, n4 / nucleus)
(w / weapon, quant, a2 / all)
(w2 / weapon, mod, n5 / nucleus)

Decoded in 4,166,090 microseconds
Sentence: The documents circulated on Capitol Hill in September 2007 as the Bush administration worked toward an agreement with Indian officials.

NER Entity: (country :name (name :op "Capitol" :op "Hill"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 12-13:  administration => administrate-01
Span 16-17:  agreement => agree-01
Span 11-12:  Bush => (person :name (name :op "Bush"))
Span 4-6:  Capitol Hill => (country :name (name :op "Capitol" :op "Hill"))
Span 1-2:  documents => document
Span 18-19:  Indian => (country :name (name :op "India"))
Span 19-20:  officials => (have-org-role-91 :ARG2 official)
Span 7-9:  September 2007 => (date-entity :month 9 :year 2007)
Span 13-14:  worked => work-01

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),officials,(have-org-role-91 :ARG2 official),false), Span(18,19,List(4, 3, 2),Indian,(country :name (name :op "India")),false), Span(16,17,List(5),agreement,agree-01,false), Span(13,14,List(6),worked,work-01,false), Span(12,13,List(7),administration,administrate-01,false), Span(11,12,List(10, 9, 8),Bush,(person :name (name :op "Bush")),false), Span(7,9,List(13, 12, 11),September 2007,(date-entity :month 9 :year 2007),false), Span(4,6,List(17, 16, 15, 14),Capitol Hill,(country :name (name :op "Capitol" :op "Hill")),false), Span(1,2,List(18),documents,document,false)),Map(2 -> country, 5 -> agree-01, 12 -> 9, 15 -> name, 8 -> person, 18 -> document, 7 -> administrate-01, 17 -> "Hill", 1 -> official, 4 -> "India", 11 -> date-entity, 14 -> country, 6 -> work-01, 0 -> have-org-role-91, 9 -> name, 16 -> "Capitol", 3 -> name, 10 -> "Bush", 13 -> 2007),Map(n -> name, w -> work-01, h -> have-org-role-91, 2 -> 2007, d -> date-entity, p -> person, n3 -> name, a -> agree-01, d2 -> document, a2 -> administrate-01, c -> country, 9 -> 9, o -> official, n2 -> name, c2 -> country))),[Ljava.lang.String;@f2ff811,Annotation([Ljava.lang.String;@568ff82,[Ljava.lang.String;@50caa560,[Ljava.lang.String;@2a266d09),Annotation([Ljava.lang.String;@5ab9e72c,[Ljava.lang.String;@186f8716,[Ledu.cmu.lti.nlp.amr.Dependency;@1d8bd0de),Annotation([Ljava.lang.String;@45ca843,[Ljava.lang.String;@11c9af63,[Ljava.lang.String;@757acd7b),Annotation([Ljava.lang.String;@36b4fe2a,[Ljava.lang.String;@574b560f,[Ledu.cmu.lti.nlp.amr.Entity;@ba54932))
AMR:
(a / agree-01, ARG1, d / date-entity)
(a2 / administrate-01, ARG1, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2007)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "India")
(n2 / name, op, "Bush")
(n3 / name, op, "Capitol")
(n3 / name, op, "Hill")
(p / person, name, n2 / name)
(w / work-01, ARG0, p / person)
(w / work-01, ARG1, a2 / administrate-01)
(w / work-01, ARG6, d2 / document)
(w / work-01, time, a / agree-01)

Decoded in 873,253 microseconds
Sentence: Executive Director of the Arms Control Association in Washington Daryl Kimball stated the Israeli document could affect the debate over India.

NER Entity: (organization :name (name :op "Arms" :op "Control" :op "Association"))
NER Entity: (country :name (name :op "Washington"))
NER Entity: (person :name (name :op "Daryl" :op "Kimball"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "Washington"))
Spans:
Span 16-17:  affect => affect-01
Span 4-7:  Arms Control Association => (organization :name (name :op "Arms" :op "Control" :op "Association"))
Span 15-16:  could => possible
Span 9-11:  Daryl Kimball => (person :name (name :op "Daryl" :op "Kimball"))
Span 18-19:  debate => debate-01
Span 1-2:  Director => (have-org-role-91 :ARG2 director)
Span 14-15:  document => document
Span 0-1:  Executive => executive
Span 20-21:  India => (country :name (name :op "India"))
Span 13-14:  Israeli => (country :name (name :op "Israel"))
Span 19-20:  over => over
Span 11-12:  stated => state-01
Span 8-9:  Washington => (city :name (name :op "Washington"))

Langrangian relaxation converged after 84 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(2, 1, 0),India,(country :name (name :op "India")),false), Span(19,20,List(3),over,over,false), Span(18,19,List(4),debate,debate-01,false), Span(16,17,List(5),affect,affect-01,false), Span(15,16,List(6),could,possible,false), Span(14,15,List(7),document,document,false), Span(13,14,List(10, 9, 8),Israeli,(country :name (name :op "Israel")),false), Span(11,12,List(11),stated,state-01,false), Span(9,11,List(15, 14, 13, 12),Daryl Kimball,(person :name (name :op "Daryl" :op "Kimball")),false), Span(8,9,List(18, 17, 16),Washington,(city :name (name :op "Washington")),false), Span(4,7,List(23, 22, 21, 20, 19),Arms Control Association,(organization :name (name :op "Arms" :op "Control" :op "Association")),false), Span(1,2,List(25, 24),Director,(have-org-role-91 :ARG2 director),false), Span(0,1,List(26),Executive,executive,false)),Map(2 -> "India", 5 -> affect-01, 12 -> person, 8 -> country, 15 -> "Kimball", 21 -> "Arms", 18 -> "Washington", 24 -> have-org-role-91, 7 -> document, 1 -> name, 17 -> name, 23 -> "Association", 26 -> executive, 4 -> debate-01, 11 -> state-01, 14 -> "Daryl", 20 -> name, 6 -> possible, 9 -> name, 0 -> country, 22 -> "Control", 16 -> city, 19 -> organization, 10 -> "Israel", 3 -> over, 25 -> director, 13 -> name),Map(e -> executive, n -> name, h -> have-org-role-91, d3 -> director, p2 -> person, n4 -> name, s -> state-01, d -> debate-01, p -> possible, a -> affect-01, n3 -> name, c3 -> city, o2 -> organization, d2 -> document, c -> country, o -> over, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@28975c28,Annotation([Ljava.lang.String;@3943a2be,[Ljava.lang.String;@343570b7,[Ljava.lang.String;@157853da),Annotation([Ljava.lang.String;@71c3b41,[Ljava.lang.String;@236e3f4e,[Ledu.cmu.lti.nlp.amr.Dependency;@3cc1435c),Annotation([Ljava.lang.String;@6bf0219d,[Ljava.lang.String;@dd0c991,[Ljava.lang.String;@5f16132a),Annotation([Ljava.lang.String;@69fb6037,[Ljava.lang.String;@36d585c,[Ledu.cmu.lti.nlp.amr.Entity;@87a85e1))
AMR:
(a / affect-01, ARG0, d2 / document)
(a / affect-01, ARG1, d / debate-01)
(a / affect-01, mod, p / possible)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / city, name, n4 / name)
(d / debate-01, ARG1, c / country)
(d2 / document, poss, c2 / country)
(d3 / director, mod, e / executive)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, d3 / director)
(n / name, op, "India")
(n2 / name, op, "Israel")
(n3 / name, op, "Daryl")
(n3 / name, op, "Kimball")
(n4 / name, op, "Washington")
(n5 / name, op, "Arms")
(n5 / name, op, "Association")
(n5 / name, op, "Control")
(o / over, op, c / country)
(o2 / organization, location, c3 / city)
(o2 / organization, name, n5 / name)
(p2 / person, name, n3 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, p / possible)

Decoded in 2,343,449 microseconds
Sentence: Kimball stated --

NER Entity: (person :name (name :op "Kimball"))
Spans:
Span 1-2:  stated => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),stated,state-01,false)),Map(0 -> state-01),Map(s -> state-01))),[Ljava.lang.String;@671a5887,Annotation([Ljava.lang.String;@5552768b,[Ljava.lang.String;@3c947bc5,[Ljava.lang.String;@609db43b),Annotation([Ljava.lang.String;@55f616cf,[Ljava.lang.String;@1356d4d4,[Ledu.cmu.lti.nlp.amr.Dependency;@c03cf28),Annotation([Ljava.lang.String;@1329eff,[Ljava.lang.String;@6497b078,[Ljava.lang.String;@41c2284a),Annotation([Ljava.lang.String;@53aad5d5,[Ljava.lang.String;@46fa7c39,[Ledu.cmu.lti.nlp.amr.Entity;@1fb700ee))
AMR:


Decoded in 3,307 microseconds
Sentence: The dynamics at the NSG are that officials from the countries do not want to be obstacles to India which is the largest country and the United States which is the most powerful country.

NER Entity: (organization :name (name :op "NSG"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 24-25:  and => and
Span 10-11:  countries => country
Span 33-34:  country => country
Span 23-24:  country => country
Span 11-12:  do => do-02
Span 18-19:  India => (country :name (name :op "India"))
Span 22-23:  largest => (large :degree most)
Span 31-32:  most => most
Span 16-17:  obstacles => obstacle
Span 7-8:  officials => (have-org-role-91 :ARG2 official)
Span 32-33:  powerful => powerful
Span 26-28:  United States => (country :name (name :op "United" :op "States"))
Span 13-14:  want => want-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),country,country,false), Span(32,33,List(1),powerful,powerful,false), Span(31,32,List(2),most,most,false), Span(26,28,List(6, 5, 4, 3),United States,(country :name (name :op "United" :op "States")),false), Span(24,25,List(7),and,and,false), Span(23,24,List(8),country,country,false), Span(22,23,List(10, 9),largest,(large :degree most),false), Span(18,19,List(13, 12, 11),India,(country :name (name :op "India")),false), Span(16,17,List(14),obstacles,obstacle,false), Span(13,14,List(15),want,want-01,false), Span(11,12,List(16),do,do-02,false), Span(10,11,List(17),countries,country,false), Span(7,8,List(19, 18),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> most, 5 -> "United", 12 -> name, 15 -> want-01, 8 -> country, 18 -> have-org-role-91, 7 -> and, 17 -> country, 1 -> powerful, 4 -> name, 11 -> country, 14 -> obstacle, 6 -> "States", 0 -> country, 9 -> large, 16 -> do-02, 19 -> official, 3 -> country, 10 -> most, 13 -> "India"),Map(n -> name, w -> want-01, h -> have-org-role-91, m2 -> most, c4 -> country, d -> do-02, m -> most, p -> powerful, a -> and, c3 -> country, o2 -> official, c -> country, l -> large, o -> obstacle, c2 -> country, n2 -> name, c5 -> country))),[Ljava.lang.String;@4f67eb2a,Annotation([Ljava.lang.String;@4a668b6e,[Ljava.lang.String;@5f683daf,[Ljava.lang.String;@78ffe6dc),Annotation([Ljava.lang.String;@8317c52,[Ljava.lang.String;@76f2bbc1,[Ledu.cmu.lti.nlp.amr.Dependency;@68e965f5),Annotation([Ljava.lang.String;@6f27a732,[Ljava.lang.String;@6c779568,[Ljava.lang.String;@f381794),Annotation([Ljava.lang.String;@2cdd0d4b,[Ljava.lang.String;@7e9131d5,[Ledu.cmu.lti.nlp.amr.Entity;@2e1d27ba))
AMR:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a / and, op, l / large)
(c / country, mod, p / powerful)
(c2 / country, location, c / country)
(c2 / country, name, n / name)
(c4 / country, name, n2 / name)
(d / do-02, ARG0, c5 / country)
(d / do-02, ARG1, w / want-01)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, o2 / official)
(l / large, degree, m2 / most)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "India")
(o / obstacle, location, c3 / country)
(p / powerful, degree, m / most)
(w / want-01, ARG0, o2 / official)
(w / want-01, ARG1, o / obstacle)

Decoded in 1,028,172 microseconds
Sentence: Consensus on India will be difficult to reach when the NSG meets in November 2007.

NER Entity: (country :name (name :op "India"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 5-6:  difficult => difficult
Span 2-3:  India => (country :name (name :op "India"))
Span 11-12:  meets => meet-03
Span 13-15:  November 2007 => (date-entity :month 11 :year 2007)
Span 7-8:  reach => reach-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,15,List(2, 1, 0),November 2007,(date-entity :month 11 :year 2007),false), Span(11,12,List(3),meets,meet-03,false), Span(7,8,List(4),reach,reach-01,false), Span(5,6,List(5),difficult,difficult,false), Span(2,3,List(8, 7, 6),India,(country :name (name :op "India")),false)),Map(2 -> 2007, 5 -> difficult, 8 -> "India", 7 -> name, 1 -> 11, 4 -> reach-01, 6 -> country, 0 -> date-entity, 3 -> meet-03),Map(n -> name, 2 -> 2007, m -> meet-03, d -> date-entity, 1 -> 11, d2 -> difficult, r -> reach-01, c -> country))),[Ljava.lang.String;@61d6015a,Annotation([Ljava.lang.String;@2525ff7e,[Ljava.lang.String;@524d6d96,[Ljava.lang.String;@152aa092),Annotation([Ljava.lang.String;@44a7bfbc,[Ljava.lang.String;@4ef37659,[Ledu.cmu.lti.nlp.amr.Dependency;@776b83cc),Annotation([Ljava.lang.String;@37858383,[Ljava.lang.String;@4e268090,[Ljava.lang.String;@1bb266b3),Annotation([Ljava.lang.String;@306cf3ea,[Ljava.lang.String;@2beee7ff,[Ledu.cmu.lti.nlp.amr.Entity;@5136d012))
AMR:
(c / country, name, n / name)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2007)
(d2 / difficult, domain, r / reach-01)
(m / meet-03, ARG1, c / country)
(m / meet-03, time, d / date-entity)
(n / name, op, "India")
(r / reach-01, ARG1, m / meet-03)

Decoded in 44,024 microseconds
Sentence: Israel's proposal gives officials from some countries reason to suggest an alternative approach to a specific exemption.

NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 12-13:  alternative => alternative
Span 13-14:  approach => approach-02
Span 7-8:  countries => country
Span 17-18:  exemption => exempt-01
Span 3-4:  gives => give-01
Span 0-1:  Israel => (country :name (name :op "Israel"))
Span 4-5:  officials => (have-org-role-91 :ARG2 official)
Span 2-3:  proposal => propose-01
Span 8-9:  reason => reason-01
Span 6-7:  some => some
Span 16-17:  specific => specific
Span 10-11:  suggest => suggest-01

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),exemption,exempt-01,false), Span(16,17,List(1),specific,specific,false), Span(13,14,List(2),approach,approach-02,false), Span(12,13,List(3),alternative,alternative,false), Span(10,11,List(4),suggest,suggest-01,false), Span(8,9,List(5),reason,reason-01,false), Span(7,8,List(6),countries,country,false), Span(6,7,List(7),some,some,false), Span(4,5,List(9, 8),officials,(have-org-role-91 :ARG2 official),false), Span(3,4,List(10),gives,give-01,false), Span(2,3,List(11),proposal,propose-01,false), Span(0,1,List(14, 13, 12),Israel,(country :name (name :op "Israel")),false)),Map(2 -> approach-02, 5 -> reason-01, 12 -> country, 8 -> have-org-role-91, 7 -> some, 1 -> specific, 4 -> suggest-01, 11 -> propose-01, 14 -> "Israel", 6 -> country, 0 -> exempt-01, 9 -> official, 3 -> alternative, 10 -> give-01, 13 -> name),Map(e -> exempt-01, n -> name, h -> have-org-role-91, s2 -> suggest-01, s -> specific, g -> give-01, p -> propose-01, a -> approach-02, a2 -> alternative, r -> reason-01, c -> country, s3 -> some, o -> official, c2 -> country))),[Ljava.lang.String;@5939a379,Annotation([Ljava.lang.String;@e1de817,[Ljava.lang.String;@52102734,[Ljava.lang.String;@3541cb24),Annotation([Ljava.lang.String;@2177849e,[Ljava.lang.String;@40cb8df7,[Ledu.cmu.lti.nlp.amr.Dependency;@13b13b5d),Annotation([Ljava.lang.String;@2892dae4,[Ljava.lang.String;@355ce81c,[Ljava.lang.String;@29647f75),Annotation([Ljava.lang.String;@3315d2d7,[Ljava.lang.String;@d6e7bab,[Ledu.cmu.lti.nlp.amr.Entity;@5fa07e12))
AMR:
(a / approach-02, ARG1, e / exempt-01)
(a / approach-02, mod, a2 / alternative)
(c2 / country, name, n / name)
(e / exempt-01, ARG1, s / specific)
(g / give-01, ARG0, p / propose-01)
(g / give-01, ARG1, r / reason-01)
(g / give-01, ARG2, h / have-org-role-91)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Israel")
(p / propose-01, ARG0, c2 / country)
(p / propose-01, ARG1, s3 / some)
(r / reason-01, ARG1, s2 / suggest-01)
(s2 / suggest-01, ARG1, a / approach-02)

Decoded in 478,798 microseconds
Sentence: Israel's record is good and better than India's in following international nuclear rules.

NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 5-6:  and => and
Span 6-7:  better => good
Span 11-12:  following => follow-01
Span 4-5:  good => good-41
Span 8-9:  India => (country :name (name :op "India"))
Span 12-13:  international => international
Span 0-1:  Israel => (country :name (name :op "Israel"))
Span 13-14:  nuclear => nucleus
Span 2-3:  record => record
Span 14-15:  rules => rule

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),rules,rule,false), Span(13,14,List(1),nuclear,nucleus,false), Span(12,13,List(2),international,international,false), Span(11,12,List(3),following,follow-01,false), Span(8,9,List(6, 5, 4),India,(country :name (name :op "India")),false), Span(6,7,List(7),better,good,false), Span(5,6,List(8),and,and,false), Span(4,5,List(9),good,good-41,false), Span(2,3,List(10),record,record,false), Span(0,1,List(13, 12, 11),Israel,(country :name (name :op "Israel")),false)),Map(2 -> international, 5 -> name, 12 -> name, 8 -> and, 7 -> good, 1 -> nucleus, 4 -> country, 11 -> country, 6 -> "India", 0 -> rule, 9 -> good-41, 3 -> follow-01, 10 -> record, 13 -> "Israel"),Map(n -> nucleus, r2 -> record, g2 -> good-41, g -> good, n3 -> name, a -> and, i -> international, r -> rule, c -> country, f -> follow-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@55b53d44,Annotation([Ljava.lang.String;@482bce4f,[Ljava.lang.String;@366647c2,[Ljava.lang.String;@6a6afff2),Annotation([Ljava.lang.String;@1649b0e6,[Ljava.lang.String;@865dd6,[Ledu.cmu.lti.nlp.amr.Dependency;@4da4253),Annotation([Ljava.lang.String;@3972a855,[Ljava.lang.String;@62e7f11d,[Ljava.lang.String;@503d687a),Annotation([Ljava.lang.String;@6a370f4,[Ljava.lang.String;@2abf4075,[Ledu.cmu.lti.nlp.amr.Entity;@770d3326))
AMR:
(a / and, op, g / good)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(f / follow-01, ARG1, r / rule)
(g2 / good-41, ARG0, r2 / record)
(g2 / good-41, ARG1, c / country)
(g2 / good-41, ARG2, f / follow-01)
(g2 / good-41, ARG6, g / good)
(n2 / name, op, "India")
(n3 / name, op, "Israel")
(r / rule, mod, i / international)
(r / rule, mod, n / nucleus)
(r2 / record, poss, c2 / country)

Decoded in 304,949 microseconds
Sentence: Despite ties between Israeli and U.S. governments the Bush Administration rejected the Israeli proposal.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (organization :name (name :op "Bush" :op "Administration"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 4-5:  and => and
Span 2-3:  between => between
Span 8-10:  Bush Administration => (organization :name (name :op "Bush" :op "Administration"))
Span 6-7:  governments => (government-organization :ARG0-of govern-01)
Span 12-13:  Israeli => (country :name (name :op "Israel"))
Span 3-4:  Israeli => (country :name (name :op "Israel"))
Span 13-14:  proposal => propose-01
Span 10-11:  rejected => reject-01
Span 1-2:  ties => tie-01
Span 5-6:  U.S. => (country :name (name :op "U.S."))

Langrangian relaxation converged after 72 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),proposal,propose-01,false), Span(12,13,List(3, 2, 1),Israeli,(country :name (name :op "Israel")),false), Span(10,11,List(4),rejected,reject-01,false), Span(8,10,List(8, 7, 6, 5),Bush Administration,(organization :name (name :op "Bush" :op "Administration")),false), Span(6,7,List(10, 9),governments,(government-organization :ARG0-of govern-01),false), Span(5,6,List(13, 12, 11),U.S.,(country :name (name :op "U.S.")),false), Span(4,5,List(14),and,and,false), Span(3,4,List(17, 16, 15),Israeli,(country :name (name :op "Israel")),false), Span(2,3,List(18),between,between,false), Span(1,2,List(19),ties,tie-01,false)),Map(2 -> name, 5 -> organization, 12 -> name, 15 -> country, 8 -> "Administration", 18 -> between, 7 -> "Bush", 17 -> "Israel", 1 -> country, 4 -> reject-01, 11 -> country, 14 -> and, 6 -> name, 0 -> propose-01, 9 -> government-organization, 16 -> name, 19 -> tie-01, 3 -> "Israel", 10 -> govern-01, 13 -> "U.S."),Map(n -> name, t -> tie-01, b -> between, n4 -> name, g2 -> govern-01, p -> propose-01, g -> government-organization, n3 -> name, a -> and, c3 -> country, r -> reject-01, c -> country, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@4cc8eb05,Annotation([Ljava.lang.String;@51f116b8,[Ljava.lang.String;@19d481b,[Ljava.lang.String;@1f97cf0d),Annotation([Ljava.lang.String;@140c9f39,[Ljava.lang.String;@4d910fd6,[Ledu.cmu.lti.nlp.amr.Dependency;@26275bef),Annotation([Ljava.lang.String;@7690781,[Ljava.lang.String;@77eca502,[Ljava.lang.String;@3246fb96),Annotation([Ljava.lang.String;@2e222612,[Ljava.lang.String;@61386958,[Ledu.cmu.lti.nlp.amr.Entity;@73ee04c8))
AMR:
(a / and, op, c3 / country)
(a / and, op, r / reject-01)
(b / between, op, g / government-organization)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "Israel")
(n2 / name, op, "Administration")
(n2 / name, op, "Bush")
(n3 / name, op, "U.S.")
(n4 / name, op, "Israel")
(o / organization, name, n2 / name)
(p / propose-01, ARG0, o / organization)
(p / propose-01, ARG1, c / country)
(r / reject-01, ARG1, p / propose-01)
(t / tie-01, ARG1, a / and)
(t / tie-01, ARG3, b / between)

Decoded in 1,334,118 microseconds
Sentence: The proposal may complicate the Bush administration's efforts to win an exemption for India to engage in nuclear trade.

NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 6-7:  administration => administrate-01
Span 5-6:  Bush => (person :name (name :op "Bush"))
Span 8-9:  efforts => effort
Span 16-17:  engage => engage-01
Span 12-13:  exemption => exempt-01
Span 14-15:  India => (country :name (name :op "India"))
Span 2-3:  may => possible
Span 18-19:  nuclear => nucleus
Span 1-2:  proposal => propose-01
Span 19-20:  trade => trade-01
Span 10-11:  win => win-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),trade,trade-01,false), Span(18,19,List(1),nuclear,nucleus,false), Span(16,17,List(2),engage,engage-01,false), Span(14,15,List(5, 4, 3),India,(country :name (name :op "India")),false), Span(12,13,List(6),exemption,exempt-01,false), Span(10,11,List(7),win,win-01,false), Span(8,9,List(8),efforts,effort,false), Span(6,7,List(9),administration,administrate-01,false), Span(5,6,List(12, 11, 10),Bush,(person :name (name :op "Bush")),false), Span(2,3,List(13),may,possible,false), Span(1,2,List(14),proposal,propose-01,false)),Map(2 -> engage-01, 5 -> "India", 12 -> "Bush", 8 -> effort, 7 -> win-01, 1 -> nucleus, 4 -> name, 11 -> name, 14 -> propose-01, 6 -> exempt-01, 0 -> trade-01, 9 -> administrate-01, 3 -> country, 10 -> person, 13 -> possible),Map(e -> engage-01, n -> nucleus, w -> win-01, t -> trade-01, e2 -> exempt-01, p2 -> possible, p -> person, a -> administrate-01, n3 -> name, c -> country, e3 -> effort, p3 -> propose-01, n2 -> name))),[Ljava.lang.String;@7671cb68,Annotation([Ljava.lang.String;@49dc7102,[Ljava.lang.String;@6b8ca3c8,[Ljava.lang.String;@68c72235),Annotation([Ljava.lang.String;@10959ece,[Ljava.lang.String;@3a6bb9bf,[Ledu.cmu.lti.nlp.amr.Dependency;@34f7cfd9),Annotation([Ljava.lang.String;@65f095f8,[Ljava.lang.String;@59af0466,[Ljava.lang.String;@3e6ef8ad),Annotation([Ljava.lang.String;@346d61be,[Ljava.lang.String;@55536d9e,[Ledu.cmu.lti.nlp.amr.Entity;@747edf66))
AMR:
(a / administrate-01, ARG1, p / person)
(c / country, name, n2 / name)
(e / engage-01, ARG0, c / country)
(e / engage-01, ARG2, t / trade-01)
(e2 / exempt-01, ARG1, e / engage-01)
(e3 / effort, poss, a / administrate-01)
(e3 / effort, purpose, w / win-01)
(n2 / name, op, "India")
(n3 / name, op, "Bush")
(p / person, name, n3 / name)
(p2 / possible, domain, p3 / propose-01)
(p3 / propose-01, ARG1, e2 / exempt-01)
(t / trade-01, ARG1, n / nucleus)
(w / win-01, ARG1, e2 / exempt-01)

Decoded in 460,533 microseconds
Sentence: President Bush and Secretary of State Condoleezza Rice view the Pact as an important part of the Bush administration's foreign policy legacy.

NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Condoleezza" :op "Rice"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Bush"))
Spans:
Span 18-19:  administration => administrate-01
Span 2-3:  and => and
Span 17-18:  Bush => (person :name (name :op "Bush"))
Span 1-2:  Bush => (person :name (name :op "Bush"))
Span 6-8:  Condoleezza Rice => (person :name (name :op "Condoleezza" :op "Rice"))
Span 20-21:  foreign => foreign
Span 13-14:  important => important
Span 22-23:  legacy => legacy
Span 21-22:  policy => policy
Span 0-1:  President => (have-org-role-91 :ARG2 president)
Span 3-4:  Secretary => (have-org-role-91 :ARG2 secretary)
Span 8-9:  view => view-02

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),legacy,legacy,false), Span(21,22,List(1),policy,policy,false), Span(20,21,List(2),foreign,foreign,false), Span(18,19,List(3),administration,administrate-01,false), Span(17,18,List(6, 5, 4),Bush,(person :name (name :op "Bush")),false), Span(13,14,List(7),important,important,false), Span(8,9,List(8),view,view-02,false), Span(6,8,List(12, 11, 10, 9),Condoleezza Rice,(person :name (name :op "Condoleezza" :op "Rice")),false), Span(3,4,List(14, 13),Secretary,(have-org-role-91 :ARG2 secretary),false), Span(2,3,List(15),and,and,false), Span(1,2,List(18, 17, 16),Bush,(person :name (name :op "Bush")),false), Span(0,1,List(20, 19),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> foreign, 5 -> name, 12 -> "Rice", 15 -> and, 8 -> view-02, 18 -> "Bush", 7 -> important, 17 -> name, 1 -> policy, 4 -> person, 11 -> "Condoleezza", 14 -> secretary, 20 -> president, 6 -> "Bush", 0 -> legacy, 9 -> person, 16 -> person, 19 -> have-org-role-91, 3 -> administrate-01, 10 -> name, 13 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, p5 -> president, h2 -> have-org-role-91, p2 -> person, s -> secretary, v -> view-02, p -> policy, n3 -> name, a -> administrate-01, p4 -> person, i -> important, a2 -> and, l -> legacy, f -> foreign, p3 -> person, n2 -> name))),[Ljava.lang.String;@3d1cfad4,Annotation([Ljava.lang.String;@62230c58,[Ljava.lang.String;@2cd2a21f,[Ljava.lang.String;@2e55dd0c),Annotation([Ljava.lang.String;@74455848,[Ljava.lang.String;@e7edb54,[Ledu.cmu.lti.nlp.amr.Dependency;@378542de),Annotation([Ljava.lang.String;@3738449f,[Ljava.lang.String;@69e1dd28,[Ljava.lang.String;@11bd0f3b),Annotation([Ljava.lang.String;@c333c60,[Ljava.lang.String;@79da8dc5,[Ledu.cmu.lti.nlp.amr.Entity;@1eb5174b))
AMR:
(a / administrate-01, ARG1, p2 / person)
(a2 / and, op, p2 / person)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, v / view-02)
(h / have-org-role-91, ARG2, s / secretary)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, i / important)
(h2 / have-org-role-91, ARG2, p5 / president)
(l / legacy, mod, p / policy)
(l / legacy, poss, a / administrate-01)
(n / name, op, "Bush")
(n2 / name, op, "Condoleezza")
(n2 / name, op, "Rice")
(n3 / name, op, "Bush")
(p / policy, mod, f / foreign)
(p2 / person, name, n / name)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(v / view-02, ARG0, p4 / person)
(v / view-02, ARG1, a2 / and)

Decoded in 1,338,429 microseconds
Sentence: The deal is controversial in India and Congress must give approval.

NER Entity: (country :name (name :op "India"))
NER Entity: (organization :name (name :op "Congress"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 6-7:  and => and
Span 10-11:  approval => approve-01
Span 3-4:  controversial => controversy
Span 1-2:  deal => deal-01
Span 9-10:  give => give-01
Span 5-6:  India => (country :name (name :op "India"))

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),approval,approve-01,false), Span(9,10,List(1),give,give-01,false), Span(6,7,List(2),and,and,false), Span(5,6,List(5, 4, 3),India,(country :name (name :op "India")),false), Span(3,4,List(6),controversial,controversy,false), Span(1,2,List(7),deal,deal-01,false)),Map(2 -> and, 5 -> "India", 7 -> deal-01, 1 -> give-01, 4 -> name, 6 -> controversy, 0 -> approve-01, 3 -> country),Map(n -> name, d -> deal-01, g -> give-01, a -> approve-01, a2 -> and, c -> country, c2 -> controversy))),[Ljava.lang.String;@67080771,Annotation([Ljava.lang.String;@72cde7cc,[Ljava.lang.String;@5fd4f8f5,[Ljava.lang.String;@696da30b),Annotation([Ljava.lang.String;@4e7912d8,[Ljava.lang.String;@53976f5c,[Ledu.cmu.lti.nlp.amr.Dependency;@2bfc268b),Annotation([Ljava.lang.String;@2f8dad04,[Ljava.lang.String;@29e495ff,[Ljava.lang.String;@41e1e210),Annotation([Ljava.lang.String;@be35cd9,[Ljava.lang.String;@4944252c,[Ledu.cmu.lti.nlp.amr.Entity;@44821a96))
AMR:
(a / approve-01, ARG1, c / country)
(c / country, name, n / name)
(c2 / controversy, domain, d / deal-01)
(d / deal-01, ARG1, g / give-01)
(g / give-01, ARG0, a2 / and)
(g / give-01, ARG1, a / approve-01)
(n / name, op, "India")

Decoded in 243,937 microseconds
Sentence: Delays in winning approval for the India deal could have a negative effect on the administration's foreign policy legacy with delay until an election year having the most negative effect.

NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 15-16:  administration => administrate-01
Span 3-4:  approval => approve-01
Span 8-9:  could => possible
Span 7-8:  deal => deal-01
Span 21-22:  delay => delay-01
Span 0-1:  Delays => delay-01
Span 30-31:  effect => effect
Span 12-13:  effect => effect
Span 24-25:  election => elect-01
Span 17-18:  foreign => foreign
Span 26-27:  having => have-03
Span 6-7:  India => (country :name (name :op "India"))
Span 19-20:  legacy => legacy
Span 28-29:  most => most
Span 29-30:  negative => negative
Span 11-12:  negative => negative
Span 18-19:  policy => policy
Span 22-23:  until => until
Span 25-26:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),effect,effect,false), Span(29,30,List(1),negative,negative,false), Span(28,29,List(2),most,most,false), Span(26,27,List(3),having,have-03,false), Span(25,26,List(5, 4),year,(temporal-quantity :unit year),false), Span(24,25,List(6),election,elect-01,false), Span(22,23,List(7),until,until,false), Span(21,22,List(8),delay,delay-01,false), Span(19,20,List(9),legacy,legacy,false), Span(18,19,List(10),policy,policy,false), Span(17,18,List(11),foreign,foreign,false), Span(15,16,List(12),administration,administrate-01,false), Span(12,13,List(13),effect,effect,false), Span(11,12,List(14),negative,negative,false), Span(8,9,List(15),could,possible,false), Span(7,8,List(16),deal,deal-01,false), Span(6,7,List(19, 18, 17),India,(country :name (name :op "India")),false), Span(3,4,List(20),approval,approve-01,false), Span(0,1,List(21),Delays,delay-01,false)),Map(2 -> most, 5 -> year, 12 -> administrate-01, 15 -> possible, 8 -> delay-01, 21 -> delay-01, 18 -> name, 7 -> until, 17 -> country, 1 -> negative, 4 -> temporal-quantity, 11 -> foreign, 14 -> negative, 20 -> approve-01, 6 -> elect-01, 0 -> effect, 9 -> legacy, 16 -> deal-01, 19 -> "India", 3 -> have-03, 10 -> policy, 13 -> effect),Map(e -> effect, n -> negative, h -> have-03, t -> temporal-quantity, d3 -> delay-01, p2 -> possible, e2 -> elect-01, m -> most, d -> delay-01, y -> year, p -> policy, n3 -> name, a -> administrate-01, d2 -> deal-01, a2 -> approve-01, c -> country, u -> until, l -> legacy, f -> foreign, e3 -> effect, n2 -> negative))),[Ljava.lang.String;@a3d8174,Annotation([Ljava.lang.String;@1ba9117e,[Ljava.lang.String;@732c2a62,[Ljava.lang.String;@272ed83b),Annotation([Ljava.lang.String;@41fecb8b,[Ljava.lang.String;@120f102b,[Ledu.cmu.lti.nlp.amr.Dependency;@625732),Annotation([Ljava.lang.String;@51dcb805,[Ljava.lang.String;@66498326,[Ljava.lang.String;@cad498c),Annotation([Ljava.lang.String;@1e6454ec,[Ljava.lang.String;@2accdbb5,[Ledu.cmu.lti.nlp.amr.Entity;@b62d79))
AMR:
(a2 / approve-01, ARG0, p2 / possible)
(a2 / approve-01, ARG1, d2 / deal-01)
(c / country, name, n3 / name)
(d / delay-01, ARG1, d2 / deal-01)
(d2 / deal-01, ARG1, c / country)
(d3 / delay-01, ARG1, a2 / approve-01)
(e / effect, mod, n / negative)
(e2 / elect-01, ARG1, t / temporal-quantity)
(e3 / effect, mod, n2 / negative)
(h / have-03, ARG0, c / country)
(h / have-03, ARG1, e / effect)
(l / legacy, mod, p / policy)
(l / legacy, poss, a / administrate-01)
(n / negative, degree, m / most)
(n3 / name, op, "India")
(p / policy, mod, f / foreign)
(p / policy, poss, d2 / deal-01)
(p2 / possible, domain, e3 / effect)
(t / temporal-quantity, unit, y / year)
(u / until, op, h / have-03)
(u / until, op, t / temporal-quantity)

Decoded in 1,420,738 microseconds
Sentence: State Department spokesman Tom Casey stated the U.S. government views the India deal as unique and does not see the deal as a precedent for any other country including Israel.

NER Entity: (organization :name (name :op "State" :op "Department"))
NER Entity: (person :name (name :op "Tom" :op "Casey"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 15-16:  and => and
Span 25-26:  any => any
Span 27-28:  country => country
Span 20-21:  deal => deal-01
Span 12-13:  deal => deal-01
Span 8-9:  government => (government-organization :ARG0-of govern-01)
Span 28-29:  including => include-91
Span 11-12:  India => (country :name (name :op "India"))
Span 29-30:  Israel => (country :name (name :op "Israel"))
Span 26-27:  other => other
Span 18-19:  see => see-01
Span 2-3:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 0-2:  State Department => (organization :name (name :op "State" :op "Department"))
Span 5-6:  stated => state-01
Span 3-5:  Tom Casey => (person :name (name :op "Tom" :op "Casey"))
Span 7-8:  U.S. => (country :name (name :op "U.S."))
Span 14-15:  unique => unique
Span 9-10:  views => view-02

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(2, 1, 0),Israel,(country :name (name :op "Israel")),false), Span(28,29,List(3),including,include-91,false), Span(27,28,List(4),country,country,false), Span(26,27,List(5),other,other,false), Span(25,26,List(6),any,any,false), Span(20,21,List(7),deal,deal-01,false), Span(18,19,List(8),see,see-01,false), Span(15,16,List(9),and,and,false), Span(14,15,List(10),unique,unique,false), Span(12,13,List(11),deal,deal-01,false), Span(11,12,List(14, 13, 12),India,(country :name (name :op "India")),false), Span(9,10,List(15),views,view-02,false), Span(8,9,List(17, 16),government,(government-organization :ARG0-of govern-01),false), Span(7,8,List(20, 19, 18),U.S.,(country :name (name :op "U.S.")),false), Span(5,6,List(21),stated,state-01,false), Span(3,5,List(25, 24, 23, 22),Tom Casey,(person :name (name :op "Tom" :op "Casey")),false), Span(2,3,List(27, 26),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(0,2,List(31, 30, 29, 28),State Department,(organization :name (name :op "State" :op "Department")),false)),Map(30 -> "State", 2 -> "Israel", 5 -> other, 27 -> spokesman, 12 -> country, 8 -> see-01, 15 -> view-02, 21 -> state-01, 18 -> country, 24 -> "Tom", 7 -> deal-01, 1 -> name, 17 -> govern-01, 23 -> name, 26 -> have-org-role-91, 4 -> country, 11 -> deal-01, 14 -> "India", 29 -> name, 20 -> "U.S.", 28 -> organization, 6 -> any, 9 -> and, 0 -> country, 22 -> person, 16 -> government-organization, 19 -> name, 10 -> unique, 3 -> include-91, 31 -> "Department", 25 -> "Casey", 13 -> name),Map(n -> name, h -> have-org-role-91, s2 -> state-01, c4 -> country, n4 -> name, s -> see-01, v -> view-02, d -> deal-01, g2 -> govern-01, g -> government-organization, p -> person, c3 -> country, a -> any, n3 -> name, d2 -> deal-01, o2 -> organization, a2 -> and, i -> include-91, c -> country, s3 -> spokesman, u -> unique, o -> other, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@6631f5ca,Annotation([Ljava.lang.String;@5ace1ed4,[Ljava.lang.String;@1613674b,[Ljava.lang.String;@27ff5d15),Annotation([Ljava.lang.String;@4e096385,[Ljava.lang.String;@649bec2e,[Ledu.cmu.lti.nlp.amr.Dependency;@693fe6c9),Annotation([Ljava.lang.String;@34f5090e,[Ljava.lang.String;@31e5415e,[Ljava.lang.String;@a2431d0),Annotation([Ljava.lang.String;@1cbb87f3,[Ljava.lang.String;@1a4013,[Ledu.cmu.lti.nlp.amr.Entity;@1b6e1eff))
AMR:
(a2 / and, op, v / view-02)
(c / country, name, n / name)
(c2 / country, mod, a / any)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(d / deal-01, ARG1, c2 / country)
(d2 / deal-01, ARG1, c3 / country)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c4 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, s3 / spokesman)
(i / include-91, ARG1, c / country)
(i / include-91, ARG2, c2 / country)
(n / name, op, "Israel")
(n2 / name, op, "India")
(n3 / name, op, "U.S.")
(n4 / name, op, "Casey")
(n4 / name, op, "Tom")
(n5 / name, op, "Department")
(n5 / name, op, "State")
(o / other, mod, a / any)
(o2 / organization, name, n5 / name)
(p / person, name, n4 / name)
(s / see-01, ARG0, g / government-organization)
(s / see-01, ARG1, d / deal-01)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, a2 / and)
(v / view-02, ARG0, g / government-organization)
(v / view-02, ARG1, u / unique)
(v / view-02, ARG6, d2 / deal-01)

Decoded in 2,411,982 microseconds
Sentence: Spokesman for the Israeli embassy David Siegel stated the suggestion that the Israeli government is demanding an exemption or linking efforts to any other issue including the India debate is grossly inaccurate.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (person :name (name :op "David" :op "Siegel"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 22-23:  any => any
Span 5-7:  David Siegel => (person :name (name :op "David" :op "Siegel"))
Span 28-29:  debate => debate-01
Span 15-16:  demanding => demand-01
Span 20-21:  efforts => effort
Span 4-5:  embassy => embassy
Span 17-18:  exemption => exempt-01
Span 13-14:  government => (government-organization :ARG0-of govern-01)
Span 25-26:  including => include-91
Span 27-28:  India => (country :name (name :op "India"))
Span 12-13:  Israeli => (country :name (name :op "Israel"))
Span 3-4:  Israeli => (country :name (name :op "Israel"))
Span 24-25:  issue => issue
Span 18-19:  or => or
Span 23-24:  other => other
Span 0-1:  Spokesman => spokesman
Span 7-8:  stated => state-01
Span 9-10:  suggestion => suggest-01

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),debate,debate-01,false), Span(27,28,List(3, 2, 1),India,(country :name (name :op "India")),false), Span(25,26,List(4),including,include-91,false), Span(24,25,List(5),issue,issue,false), Span(23,24,List(6),other,other,false), Span(22,23,List(7),any,any,false), Span(20,21,List(8),efforts,effort,false), Span(18,19,List(9),or,or,false), Span(17,18,List(10),exemption,exempt-01,false), Span(15,16,List(11),demanding,demand-01,false), Span(13,14,List(13, 12),government,(government-organization :ARG0-of govern-01),false), Span(12,13,List(16, 15, 14),Israeli,(country :name (name :op "Israel")),false), Span(9,10,List(17),suggestion,suggest-01,false), Span(7,8,List(18),stated,state-01,false), Span(5,7,List(22, 21, 20, 19),David Siegel,(person :name (name :op "David" :op "Siegel")),false), Span(4,5,List(23),embassy,embassy,false), Span(3,4,List(26, 25, 24),Israeli,(country :name (name :op "Israel")),false), Span(0,1,List(27),Spokesman,spokesman,false)),Map(2 -> name, 5 -> issue, 27 -> spokesman, 12 -> government-organization, 8 -> effort, 15 -> name, 21 -> "David", 18 -> state-01, 24 -> country, 7 -> any, 1 -> country, 17 -> suggest-01, 23 -> embassy, 26 -> "Israel", 4 -> include-91, 11 -> demand-01, 14 -> country, 20 -> name, 6 -> other, 9 -> or, 0 -> debate-01, 22 -> "Siegel", 16 -> "Israel", 19 -> person, 10 -> exempt-01, 3 -> "India", 25 -> name, 13 -> govern-01),Map(e -> effort, n -> name, s2 -> state-01, e2 -> exempt-01, n4 -> name, s -> suggest-01, d -> debate-01, g2 -> govern-01, p -> person, g -> government-organization, c3 -> country, n3 -> name, a -> any, o2 -> or, d2 -> demand-01, i2 -> issue, i -> include-91, s3 -> spokesman, c -> country, o -> other, e3 -> embassy, n2 -> name, c2 -> country))),[Ljava.lang.String;@306f16f3,Annotation([Ljava.lang.String;@702b8b12,[Ljava.lang.String;@22e357dc,[Ljava.lang.String;@49912c99),Annotation([Ljava.lang.String;@10163d6,[Ljava.lang.String;@2dde1bff,[Ledu.cmu.lti.nlp.amr.Dependency;@15bbf42f),Annotation([Ljava.lang.String;@550ee7e5,[Ljava.lang.String;@5f9b2141,[Ljava.lang.String;@247d8ae),Annotation([Ljava.lang.String;@48974e45,[Ljava.lang.String;@6a84a97d,[Ledu.cmu.lti.nlp.amr.Entity;@6c130c45))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n4 / name)
(d / debate-01, ARG1, c / country)
(d2 / demand-01, ARG0, g / government-organization)
(d2 / demand-01, ARG1, e2 / exempt-01)
(e2 / exempt-01, ARG1, i2 / issue)
(e3 / embassy, mod, c3 / country)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(i / include-91, ARG1, d / debate-01)
(i / include-91, ARG2, i2 / issue)
(i2 / issue, mod, a / any)
(i2 / issue, mod, o / other)
(n / name, op, "India")
(n2 / name, op, "Israel")
(n3 / name, op, "David")
(n3 / name, op, "Siegel")
(n4 / name, op, "Israel")
(o2 / or, op, d2 / demand-01)
(o2 / or, op, e / effort)
(o2 / or, op, s3 / spokesman)
(p / person, name, e3 / embassy)
(p / person, name, n3 / name)
(s / suggest-01, ARG0, p / person)
(s / suggest-01, ARG1, d2 / demand-01)
(s2 / state-01, ARG0, p / person)

Decoded in 1,977,863 microseconds
Sentence: Seigel stated --

NER Entity: (person :name (name :op "Seigel"))
Spans:
Span 1-2:  stated => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),stated,state-01,false)),Map(0 -> state-01),Map(s -> state-01))),[Ljava.lang.String;@50ad3bc1,Annotation([Ljava.lang.String;@223aa2f7,[Ljava.lang.String;@6d3a388c,[Ljava.lang.String;@193f604a),Annotation([Ljava.lang.String;@20f5239f,[Ljava.lang.String;@57af006c,[Ledu.cmu.lti.nlp.amr.Dependency;@6bedbc4d),Annotation([Ljava.lang.String;@932bc4a,[Ljava.lang.String;@d29f28,[Ljava.lang.String;@2fd1433e),Annotation([Ljava.lang.String;@29d89d5d,[Ljava.lang.String;@3514a4c0,[Ledu.cmu.lti.nlp.amr.Entity;@212b5695))
AMR:


Decoded in 3,304 microseconds
Sentence: The Israeli government has never asked the NSG for any exemption to nuclear supply guidelines or made any Israeli-specific request of the NSG.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli" :op "-" :op "specific"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli" :op "-" :op "specific"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 17-18:  any => any
Span 9-10:  any => any
Span 5-6:  asked => ask-02
Span 10-11:  exemption => exempt-01
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 14-15:  guidelines => guideline
Span 18-19:  Israeli => (country :name (name :op "Israel"))
Span 1-2:  Israeli => (country :name (name :op "Israel"))
Span 12-13:  nuclear => nucleus
Span 15-16:  or => or
Span 21-22:  request => request-01
Span 20-21:  specific => specific
Span 13-14:  supply => supply-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),request,request-01,false), Span(20,21,List(1),specific,specific,false), Span(18,19,List(4, 3, 2),Israeli,(country :name (name :op "Israel")),false), Span(17,18,List(5),any,any,false), Span(15,16,List(6),or,or,false), Span(14,15,List(7),guidelines,guideline,false), Span(13,14,List(8),supply,supply-01,false), Span(12,13,List(9),nuclear,nucleus,false), Span(10,11,List(10),exemption,exempt-01,false), Span(9,10,List(11),any,any,false), Span(5,6,List(12),asked,ask-02,false), Span(2,3,List(14, 13),government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(17, 16, 15),Israeli,(country :name (name :op "Israel")),false)),Map(2 -> country, 5 -> any, 12 -> ask-02, 15 -> country, 8 -> supply-01, 7 -> guideline, 17 -> "Israel", 1 -> specific, 4 -> "Israel", 11 -> any, 14 -> govern-01, 6 -> or, 0 -> request-01, 9 -> nucleus, 16 -> name, 3 -> name, 10 -> exempt-01, 13 -> government-organization),Map(e -> exempt-01, n -> name, g3 -> govern-01, s2 -> supply-01, a3 -> ask-02, s -> specific, g2 -> government-organization, g -> guideline, n3 -> name, a -> any, r -> request-01, a2 -> any, c -> country, o -> or, c2 -> country, n2 -> nucleus))),[Ljava.lang.String;@446293d,Annotation([Ljava.lang.String;@69997e9d,[Ljava.lang.String;@793be5ca,[Ljava.lang.String;@2df9b86),Annotation([Ljava.lang.String;@37654521,[Ljava.lang.String;@15aab8c6,[Ledu.cmu.lti.nlp.amr.Dependency;@33990a0c),Annotation([Ljava.lang.String;@4de4b452,[Ljava.lang.String;@50b5ac82,[Ljava.lang.String;@101952da),Annotation([Ljava.lang.String;@6babf3bf,[Ljava.lang.String;@3059cbc,[Ledu.cmu.lti.nlp.amr.Entity;@7ea9e1e2))
AMR:
(a3 / ask-02, ARG0, g2 / government-organization)
(a3 / ask-02, ARG1, e / exempt-01)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(e / exempt-01, ARG1, s2 / supply-01)
(e / exempt-01, mod, a2 / any)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c2 / country)
(n / name, op, "Israel")
(n3 / name, op, "Israel")
(o / or, op, a3 / ask-02)
(o / or, op, r / request-01)
(r / request-01, ARG0, c / country)
(r / request-01, ARG1, s / specific)
(r / request-01, mod, a / any)
(s2 / supply-01, ARG0, g / guideline)
(s2 / supply-01, ARG1, n2 / nucleus)

Decoded in 610,585 microseconds
Sentence: Israel is recognized as a full-fledged adherent to the NSG Guidelines.

NER Entity: (country :name (name :op "Israel"))
NER Entity: (organization :name (name :op "NSG" :op "Guidelines"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 5-6:  full => full
Span 0-1:  Israel => (country :name (name :op "Israel"))
Span 2-3:  recognized => recognize-02
Span 9-11:  to the => (organization :name (name :op "NSG" :op "Guidelines"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),to the,(organization :name (name :op "NSG" :op "Guidelines")),false), Span(5,6,List(4),full,full,false), Span(2,3,List(5),recognized,recognize-02,false), Span(0,1,List(8, 7, 6),Israel,(country :name (name :op "Israel")),false)),Map(2 -> "NSG", 5 -> recognize-02, 8 -> "Israel", 7 -> name, 1 -> name, 4 -> full, 6 -> country, 0 -> organization, 3 -> "Guidelines"),Map(n -> name, r -> recognize-02, c -> country, f -> full, o -> organization, n2 -> name))),[Ljava.lang.String;@24fcf36f,Annotation([Ljava.lang.String;@10feca44,[Ljava.lang.String;@3fb1549b,[Ljava.lang.String;@ea6147e),Annotation([Ljava.lang.String;@4d02f94e,[Ljava.lang.String;@2b48a640,[Ledu.cmu.lti.nlp.amr.Dependency;@1e683a3e),Annotation([Ljava.lang.String;@2053d869,[Ljava.lang.String;@7a419da4,[Ljava.lang.String;@14555e0a),Annotation([Ljava.lang.String;@4bb33f74,[Ljava.lang.String;@759d26fb,[Ledu.cmu.lti.nlp.amr.Entity;@3c73951))
AMR:
(c / country, name, n2 / name)
(f / full, time, o / organization)
(n / name, op, "Guidelines")
(n / name, op, "NSG")
(n2 / name, op, "Israel")
(o / organization, name, n / name)
(r / recognize-02, ARG1, c / country)
(r / recognize-02, ARG6, o / organization)

Decoded in 118,872 microseconds
Sentence: The Israeli government has urged the NSG to consider adopting a generic, multi-tiered, criteria-based approach towards nuclear technology transfers.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (organization :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 9-10:  adopting => adopt-01
Span 20-21:  approach => approach-02
Span 19-20:  based => base-01
Span 8-9:  consider => consider-02
Span 11-12:  generic => generic
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 1-2:  Israeli => (country :name (name :op "Israel"))
Span 22-23:  nuclear => nucleus
Span 23-24:  technology => technology
Span 24-25:  transfers => transfer-01
Span 4-5:  urged => urge-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),transfers,transfer-01,false), Span(23,24,List(1),technology,technology,false), Span(22,23,List(2),nuclear,nucleus,false), Span(20,21,List(3),approach,approach-02,false), Span(19,20,List(4),based,base-01,false), Span(11,12,List(5),generic,generic,false), Span(9,10,List(6),adopting,adopt-01,false), Span(8,9,List(7),consider,consider-02,false), Span(4,5,List(8),urged,urge-01,false), Span(2,3,List(10, 9),government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(13, 12, 11),Israeli,(country :name (name :op "Israel")),false)),Map(2 -> nucleus, 5 -> generic, 12 -> name, 8 -> urge-01, 7 -> consider-02, 1 -> technology, 4 -> base-01, 11 -> country, 6 -> adopt-01, 0 -> transfer-01, 9 -> government-organization, 3 -> approach-02, 10 -> govern-01, 13 -> "Israel"),Map(n -> nucleus, g3 -> govern-01, t -> transfer-01, b -> base-01, g2 -> government-organization, g -> generic, a -> approach-02, t2 -> technology, a2 -> adopt-01, c -> consider-02, u -> urge-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@3d5c822d,Annotation([Ljava.lang.String;@6f46426d,[Ljava.lang.String;@73700b80,[Ljava.lang.String;@49c7b90e),Annotation([Ljava.lang.String;@10d307f1,[Ljava.lang.String;@4d5b6aac,[Ledu.cmu.lti.nlp.amr.Dependency;@3e84448c),Annotation([Ljava.lang.String;@4a7f959b,[Ljava.lang.String;@429bffaa,[Ljava.lang.String;@5403f35f),Annotation([Ljava.lang.String;@483f6d77,[Ljava.lang.String;@7e5afaa6,[Ledu.cmu.lti.nlp.amr.Entity;@63a12c68))
AMR:
(a / approach-02, ARG1, t / transfer-01)
(a / approach-02, mod, g / generic)
(a2 / adopt-01, ARG1, a / approach-02)
(b / base-01, ARG1, a / approach-02)
(c / consider-02, ARG1, a2 / adopt-01)
(c2 / country, name, n2 / name)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c2 / country)
(n2 / name, op, "Israel")
(t / transfer-01, ARG1, t2 / technology)
(u / urge-01, ARG0, g2 / government-organization)
(u / urge-01, ARG1, n / nucleus)
(u / urge-01, ARG2, c / consider-02)

Decoded in 321,602 microseconds
Sentence: Some officials from NSG countries have previously suggested an approach like the Israeli plan.

NER Entity: (country :name (name :op "NSG"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 9-10:  approach => approach-02
Span 4-5:  countries => country
Span 12-13:  Israeli => (country :name (name :op "Israel"))
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 13-14:  plan => plan-01
Span 6-7:  previously => previous
Span 0-1:  Some => some
Span 7-8:  suggested => suggest-01

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),plan,plan-01,false), Span(12,13,List(3, 2, 1),Israeli,(country :name (name :op "Israel")),false), Span(9,10,List(4),approach,approach-02,false), Span(7,8,List(5),suggested,suggest-01,false), Span(6,7,List(6),previously,previous,false), Span(4,5,List(7),countries,country,false), Span(1,2,List(9, 8),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(10),Some,some,false)),Map(2 -> name, 5 -> suggest-01, 8 -> have-org-role-91, 7 -> country, 1 -> country, 4 -> approach-02, 6 -> previous, 9 -> official, 0 -> plan-01, 10 -> some, 3 -> "Israel"),Map(n -> name, h -> have-org-role-91, s2 -> some, p2 -> previous, s -> suggest-01, p -> plan-01, a -> approach-02, c -> country, o -> official, c2 -> country))),[Ljava.lang.String;@28f3b248,Annotation([Ljava.lang.String;@1b1426f4,[Ljava.lang.String;@32b260fa,[Ljava.lang.String;@581ac8a8),Annotation([Ljava.lang.String;@6d4e5011,[Ljava.lang.String;@57d7f8ca,[Ledu.cmu.lti.nlp.amr.Dependency;@76c3e77a),Annotation([Ljava.lang.String;@78123e82,[Ljava.lang.String;@67c33749,[Ljava.lang.String;@fba92d3),Annotation([Ljava.lang.String;@662b4c69,[Ljava.lang.String;@fa49800,[Ledu.cmu.lti.nlp.amr.Entity;@71238fc2))
AMR:
(a / approach-02, ARG0, c2 / country)
(a / approach-02, ARG1, p / plan-01)
(c / country, name, n / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Israel")
(p / plan-01, ARG0, c / country)
(p / plan-01, ARG1, s2 / some)
(s / suggest-01, ARG1, a / approach-02)
(s / suggest-01, time, p2 / previous)

Decoded in 475,722 microseconds
Sentence: If modification of the NSG Guidelines were to take place along the lines proposed by Israeli officials the nuclear nonproliferation regime would be considerably enhanced.

NER Entity: (organization :name (name :op "NSG" :op "Guidelines"))
NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 10-11:  along => along
Span 23-24:  considerably => considerable
Span 24-25:  enhanced => enhance-01
Span 15-16:  Israeli => (country :name (name :op "Israel"))
Span 12-13:  lines => line
Span 4-6:  NSG Guidelines => (organization :name (name :op "NSG" :op "Guidelines"))
Span 18-19:  nuclear => nucleus
Span 16-17:  officials => (have-org-role-91 :ARG2 official)
Span 9-10:  place => place
Span 13-14:  proposed => propose-01
Span 20-21:  regime => regime
Span 8-9:  take => take-01

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),enhanced,enhance-01,false), Span(23,24,List(1),considerably,considerable,false), Span(20,21,List(2),regime,regime,false), Span(18,19,List(3),nuclear,nucleus,false), Span(16,17,List(5, 4),officials,(have-org-role-91 :ARG2 official),false), Span(15,16,List(8, 7, 6),Israeli,(country :name (name :op "Israel")),false), Span(13,14,List(9),proposed,propose-01,false), Span(12,13,List(10),lines,line,false), Span(10,11,List(11),along,along,false), Span(9,10,List(12),place,place,false), Span(8,9,List(13),take,take-01,false), Span(4,6,List(17, 16, 15, 14),NSG Guidelines,(organization :name (name :op "NSG" :op "Guidelines")),false)),Map(2 -> regime, 5 -> official, 12 -> place, 15 -> name, 8 -> "Israel", 7 -> name, 17 -> "Guidelines", 1 -> considerable, 4 -> have-org-role-91, 11 -> along, 14 -> organization, 6 -> country, 0 -> enhance-01, 9 -> propose-01, 16 -> "NSG", 3 -> nucleus, 10 -> line, 13 -> take-01),Map(e -> enhance-01, n -> nucleus, h -> have-org-role-91, t -> take-01, p2 -> place, p -> propose-01, n3 -> name, a -> along, o2 -> organization, r -> regime, c -> considerable, l -> line, o -> official, c2 -> country, n2 -> name))),[Ljava.lang.String;@2a54a73f,Annotation([Ljava.lang.String;@16a0ee18,[Ljava.lang.String;@3d6f0054,[Ljava.lang.String;@505fc5a4),Annotation([Ljava.lang.String;@5fbdfdcf,[Ljava.lang.String;@4efc180e,[Ledu.cmu.lti.nlp.amr.Dependency;@bd4dc25),Annotation([Ljava.lang.String;@25084a1e,[Ljava.lang.String;@156b88f5,[Ljava.lang.String;@3bf9ce3e),Annotation([Ljava.lang.String;@16610890,[Ljava.lang.String;@71def8f8,[Ledu.cmu.lti.nlp.amr.Entity;@383bfa16))
AMR:
(a / along, op, l / line)
(c2 / country, name, n2 / name)
(e / enhance-01, ARG0, o2 / organization)
(e / enhance-01, ARG1, r / regime)
(e / enhance-01, manner, c / considerable)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n2 / name, op, "Israel")
(n3 / name, op, "Guidelines")
(n3 / name, op, "NSG")
(o2 / organization, name, n3 / name)
(p / propose-01, ARG0, o / official)
(p / propose-01, ARG1, l / line)
(r / regime, mod, n / nucleus)
(t / take-01, ARG0, o2 / organization)
(t / take-01, ARG1, p2 / place)
(t / take-01, ARG2, l / line)

Decoded in 740,506 microseconds
Sentence: 2008-07-26

mkDayMonthYear(2008-07-26,26,07,2008)
mkDayMonthYear(2008-07-26,26,07,2008)
Spans:
Span 0-1:  2008-07-26 => (date-entity :day 26 :month 7 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-07-26,(date-entity :day 26 :month 7 :year 2008),false)),Map(2 -> 7, 1 -> 26, 0 -> date-entity, 3 -> 2008),Map(2 -> 26, 7 -> 7, d -> date-entity, 22 -> 2008))),[Ljava.lang.String;@4d465b11,Annotation([Ljava.lang.String;@53fdffa1,[Ljava.lang.String;@5562c41e,[Ljava.lang.String;@32ee6fee),Annotation([Ljava.lang.String;@4d0f2471,[Ljava.lang.String;@7133da86,[Ledu.cmu.lti.nlp.amr.Dependency;@3232a28a),Annotation([Ljava.lang.String;@73e22a3d,[Ljava.lang.String;@47faa49c,[Ljava.lang.String;@28f2a10f),Annotation([Ljava.lang.String;@f736069,[Ljava.lang.String;@6da21078,[Ledu.cmu.lti.nlp.amr.Entity;@7fee8714))
AMR:
(d / date-entity, day, 2 / 26)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2008)

Decoded in 7,679 microseconds
Sentence: Iran (IR)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IR"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 0-1:  Iran => (country :name (name :op "Iran"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Iran,(country :name (name :op "Iran")),false)),Map(2 -> "Iran", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@4229bb3f,Annotation([Ljava.lang.String;@56cdfb3b,[Ljava.lang.String;@2b91004a,[Ljava.lang.String;@20ccf40b),Annotation([Ljava.lang.String;@2fb3536e,[Ljava.lang.String;@169e6180,[Ledu.cmu.lti.nlp.amr.Dependency;@35aea049),Annotation([Ljava.lang.String;@7205765b,[Ljava.lang.String;@47987356,[Ljava.lang.String;@22ef9844),Annotation([Ljava.lang.String;@6283d8b8,[Ljava.lang.String;@3b6ddd1d,[Ledu.cmu.lti.nlp.amr.Entity;@3f6b0be5))
AMR:
(c / country, name, n / name)
(n / name, op, "Iran")

Decoded in 5,029 microseconds
Sentence: International; proliferation

Spans:
Span 1-2:  ; => and
Span 0-1:  International => international
Span 2-3:  proliferation => proliferate-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),proliferation,proliferate-01,false), Span(1,2,List(1),;,and,false), Span(0,1,List(2),International,international,false)),Map(2 -> international, 1 -> and, 0 -> proliferate-01),Map(p -> proliferate-01, a -> and, i -> international))),[Ljava.lang.String;@611889f4,Annotation([Ljava.lang.String;@1da2cb77,[Ljava.lang.String;@48f278eb,[Ljava.lang.String;@2f217633),Annotation([Ljava.lang.String;@a530d0a,[Ljava.lang.String;@1a18644,[Ledu.cmu.lti.nlp.amr.Dependency;@5acf93bb),Annotation([Ljava.lang.String;@7e7be63f,[Ljava.lang.String;@6cd28fa7,[Ljava.lang.String;@614ca7df),Annotation([Ljava.lang.String;@4738a206,[Ljava.lang.String;@66d3eec0,[Ledu.cmu.lti.nlp.amr.Entity;@1e04fa0a))
AMR:
(a / and, op, i / international)
(a / and, op, p / proliferate-01)

Decoded in 6,180 microseconds
Sentence: Ahmadinejad announces expansion of Iranian uranium-producing capability.

NER Entity: (person :name (name :op "Ahmadinejad"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 1-2:  announces => announce-01
Span 8-9:  capability => capable-41
Span 2-3:  expansion => expand-01
Span 4-5:  Iranian => (country :name (name :op "Iran"))
Span 7-8:  producing => produce-01
Span 5-6:  uranium => uranium

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),capability,capable-41,false), Span(7,8,List(1),producing,produce-01,false), Span(5,6,List(2),uranium,uranium,false), Span(4,5,List(5, 4, 3),Iranian,(country :name (name :op "Iran")),false), Span(2,3,List(6),expansion,expand-01,false), Span(1,2,List(7),announces,announce-01,false)),Map(2 -> uranium, 5 -> "Iran", 7 -> announce-01, 1 -> produce-01, 4 -> name, 6 -> expand-01, 0 -> capable-41, 3 -> country),Map(e -> expand-01, n -> name, p -> produce-01, a -> announce-01, u -> uranium, c -> capable-41, c2 -> country))),[Ljava.lang.String;@1af2d44a,Annotation([Ljava.lang.String;@18d87d80,[Ljava.lang.String;@618425b5,[Ljava.lang.String;@58695725),Annotation([Ljava.lang.String;@543588e6,[Ljava.lang.String;@f5acb9d,[Ledu.cmu.lti.nlp.amr.Dependency;@4fb3ee4e),Annotation([Ljava.lang.String;@5d7148e2,[Ljava.lang.String;@25fb8912,[Ljava.lang.String;@7c24b813),Annotation([Ljava.lang.String;@2c35e847,[Ljava.lang.String;@7bd4937b,[Ledu.cmu.lti.nlp.amr.Entity;@21e360a))
AMR:
(a / announce-01, ARG1, e / expand-01)
(c / capable-41, ARG1, c2 / country)
(c / capable-41, ARG2, p / produce-01)
(c2 / country, name, n / name)
(e / expand-01, ARG1, c / capable-41)
(n / name, op, "Iran")
(p / produce-01, ARG1, u / uranium)

Decoded in 76,284 microseconds
Sentence: Iran refuses commitment to halt expansion but hints a possible future halt.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 6-7:  but => contrast-01
Span 2-3:  commitment => commit-01
Span 5-6:  expansion => expand-01
Span 10-11:  future => future
Span 11-12:  halt => halt-01
Span 4-5:  halt => halt-01
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 9-10:  possible => possible

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),halt,halt-01,false), Span(10,11,List(1),future,future,false), Span(9,10,List(2),possible,possible,false), Span(6,7,List(3),but,contrast-01,false), Span(5,6,List(4),expansion,expand-01,false), Span(4,5,List(5),halt,halt-01,false), Span(2,3,List(6),commitment,commit-01,false), Span(0,1,List(9, 8, 7),Iran,(country :name (name :op "Iran")),false)),Map(2 -> possible, 5 -> halt-01, 8 -> name, 7 -> country, 1 -> future, 4 -> expand-01, 6 -> commit-01, 9 -> "Iran", 0 -> halt-01, 3 -> contrast-01),Map(n -> name, e -> expand-01, h -> halt-01, h2 -> halt-01, p -> possible, c3 -> country, c -> contrast-01, f -> future, c2 -> commit-01))),[Ljava.lang.String;@5ba3f27a,Annotation([Ljava.lang.String;@58d75e99,[Ljava.lang.String;@74751b3,[Ljava.lang.String;@741a8937),Annotation([Ljava.lang.String;@306e95ec,[Ljava.lang.String;@52af26ee,[Ledu.cmu.lti.nlp.amr.Dependency;@6fd83fc1),Annotation([Ljava.lang.String;@4f2b503c,[Ljava.lang.String;@bae7dc0,[Ljava.lang.String;@209da20d),Annotation([Ljava.lang.String;@e15b7e8,[Ljava.lang.String;@1b2abca6,[Ledu.cmu.lti.nlp.amr.Entity;@6392827e))
AMR:
(c / contrast-01, ARG1, c2 / commit-01)
(c2 / commit-01, ARG0, c3 / country)
(c2 / commit-01, ARG1, h2 / halt-01)
(c3 / country, name, n / name)
(h / halt-01, ARG1, c3 / country)
(h / halt-01, time, f / future)
(h2 / halt-01, ARG1, e / expand-01)
(n / name, op, "Iran")
(p / possible, domain, h / halt-01)

Decoded in 103,659 microseconds
Sentence: 20080726 Iranian President Mahmoud ahmadinejad stated to scholars in the northeastern city of mashbad that Iran had expanded its arsenal of centrifuges producing enriched uranium to over 5000.

mkDayMonthYear(20080726,26,07,2008)
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (person :name (name :op "Mahmoud" :op "ahmadinejad"))
NER Entity: (country :name (name :op "mashbad"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(20080726,26,07,2008)
Spans:
Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Span 27-28:  5000 => 5000
Span 21-22:  centrifuges => centrifuge
Span 11-12:  city => city
Span 23-24:  enriched => enrich-01
Span 17-18:  expanded => expand-01
Span 15-16:  Iran => (country :name (name :op "Iran"))
Span 1-2:  Iranian => (country :name (name :op "Iran"))
Span 3-5:  Mahmoud ahmadinejad => (person :name (name :op "Mahmoud" :op "ahmadinejad"))
Span 10-11:  northeastern => northeast
Span 26-27:  over => over
Span 2-3:  President => (have-org-role-91 :ARG2 president)
Span 22-23:  producing => produce-01
Span 5-6:  stated => state-01
Span 24-25:  uranium => uranium

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),5000,5000,false), Span(26,27,List(1),over,over,false), Span(24,25,List(2),uranium,uranium,false), Span(23,24,List(3),enriched,enrich-01,false), Span(22,23,List(4),producing,produce-01,false), Span(21,22,List(5),centrifuges,centrifuge,false), Span(17,18,List(6),expanded,expand-01,false), Span(15,16,List(9, 8, 7),Iran,(country :name (name :op "Iran")),false), Span(11,12,List(10),city,city,false), Span(10,11,List(11),northeastern,northeast,false), Span(5,6,List(12),stated,state-01,false), Span(3,5,List(16, 15, 14, 13),Mahmoud ahmadinejad,(person :name (name :op "Mahmoud" :op "ahmadinejad")),false), Span(2,3,List(18, 17),President,(have-org-role-91 :ARG2 president),false), Span(1,2,List(21, 20, 19),Iranian,(country :name (name :op "Iran")),false), Span(0,1,List(25, 24, 23, 22),20080726,(date-entity :day 26 :month 7 :year 2008),false)),Map(2 -> uranium, 5 -> centrifuge, 12 -> state-01, 8 -> name, 15 -> "Mahmoud", 21 -> "Iran", 18 -> president, 24 -> 7, 7 -> country, 1 -> over, 17 -> have-org-role-91, 23 -> 26, 4 -> produce-01, 11 -> northeast, 14 -> name, 20 -> name, 6 -> expand-01, 9 -> "Iran", 0 -> 5000, 22 -> date-entity, 16 -> "ahmadinejad", 19 -> country, 10 -> city, 3 -> enrich-01, 25 -> 2008, 13 -> person),Map(e -> enrich-01, n -> name, h -> have-org-role-91, 2 -> 26, 5 -> 5000, e2 -> expand-01, p2 -> person, n4 -> name, c4 -> country, s -> state-01, 7 -> 7, d -> date-entity, p -> produce-01, n3 -> name, c3 -> city, c -> centrifuge, u -> uranium, 22 -> 2008, o -> over, p3 -> president, c2 -> country, n2 -> northeast))),[Ljava.lang.String;@2ed2d9cb,Annotation([Ljava.lang.String;@d5b810e,[Ljava.lang.String;@43dac38f,[Ljava.lang.String;@342c38f8),Annotation([Ljava.lang.String;@c88a337,[Ljava.lang.String;@5d0a1059,[Ledu.cmu.lti.nlp.amr.Dependency;@485966cc),Annotation([Ljava.lang.String;@1de76cc7,[Ljava.lang.String;@54bff557,[Ljava.lang.String;@593aaf41),Annotation([Ljava.lang.String;@5a56cdac,[Ljava.lang.String;@7c711375,[Ledu.cmu.lti.nlp.amr.Entity;@57cf54e1))
AMR:
(c / centrifuge, poss, c3 / city)
(c2 / country, name, n / name)
(c3 / city, mod, n2 / northeast)
(c4 / country, name, n4 / name)
(d / date-entity, day, 2 / 26)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2008)
(e / enrich-01, ARG1, u / uranium)
(e2 / expand-01, ARG0, c2 / country)
(e2 / expand-01, ARG1, p / produce-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, p3 / president)
(n / name, op, "Iran")
(n3 / name, op, "Mahmoud")
(n3 / name, op, "ahmadinejad")
(n4 / name, op, "Iran")
(o / over, op, 5 / 5000)
(p / produce-01, ARG0, c / centrifuge)
(p / produce-01, ARG1, u / uranium)
(p / produce-01, ARG6, 5 / 5000)
(p2 / person, name, n3 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, e2 / expand-01)
(s / state-01, time, d / date-entity)

Decoded in 2,239,567 microseconds
Sentence: The statement was ahmadinejad's first asserting an expansion since the 20080400 announcement that Iran was approaching the implementation of 6000 centrifuges.

mkDayMonthYear(20080400,00,04,2008)
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(20080400,00,04,2008)
Spans:
Span 11-12:  20080400 => (date-entity :day 0 :month 4 :year 2008)
Span 20-21:  6000 => 6000
Span 12-13:  announcement => (thing :ARG1-of announce-01)
Span 21-22:  centrifuges => centrifuge
Span 8-9:  expansion => expand-01
Span 18-19:  implementation => implement-01
Span 14-15:  Iran => (country :name (name :op "Iran"))
Span 9-10:  since => since
Span 1-2:  statement => state-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),centrifuges,centrifuge,false), Span(20,21,List(1),6000,6000,false), Span(18,19,List(2),implementation,implement-01,false), Span(14,15,List(5, 4, 3),Iran,(country :name (name :op "Iran")),false), Span(12,13,List(7, 6),announcement,(thing :ARG1-of announce-01),false), Span(11,12,List(11, 10, 9, 8),20080400,(date-entity :day 0 :month 4 :year 2008),false), Span(9,10,List(12),since,since,false), Span(8,9,List(13),expansion,expand-01,false), Span(1,2,List(14),statement,state-01,false)),Map(2 -> implement-01, 5 -> "Iran", 12 -> since, 8 -> date-entity, 7 -> announce-01, 1 -> 6000, 4 -> name, 11 -> 2008, 14 -> state-01, 6 -> thing, 0 -> centrifuge, 9 -> 0, 3 -> country, 10 -> 4, 13 -> expand-01),Map(e -> expand-01, n -> name, 2 -> 2008, s2 -> state-01, t -> thing, s -> since, d -> date-entity, a -> announce-01, 4 -> 4, i -> implement-01, c -> centrifuge, 6 -> 6000, 0 -> 0, c2 -> country))),[Ljava.lang.String;@5b03b9fe,Annotation([Ljava.lang.String;@37d4349f,[Ljava.lang.String;@434a63ab,[Ljava.lang.String;@6e0f5f7f),Annotation([Ljava.lang.String;@2805d709,[Ljava.lang.String;@3ee37e5a,[Ledu.cmu.lti.nlp.amr.Dependency;@2ea41516),Annotation([Ljava.lang.String;@3a44431a,[Ljava.lang.String;@3c7f66c4,[Ljava.lang.String;@194bcebf),Annotation([Ljava.lang.String;@17497425,[Ljava.lang.String;@f0da945,[Ledu.cmu.lti.nlp.amr.Entity;@4803b726))
AMR:
(a / announce-01, ARG1, t / thing)
(a / announce-01, time, d / date-entity)
(c2 / country, name, n / name)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2008)
(e / expand-01, ARG1, i / implement-01)
(e / expand-01, time, s / since)
(i / implement-01, ARG0, c2 / country)
(i / implement-01, ARG1, c / centrifuge)
(n / name, op, "Iran")
(s / since, op, t / thing)
(s2 / state-01, ARG0, 6 / 6000)
(s2 / state-01, ARG1, t / thing)

Decoded in 767,571 microseconds
Sentence: Iran articulated the goal of 50000 centrifuges operating at the enrichment plant near the town of Natanz.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 5-6:  50000 => 50000
Span 6-7:  centrifuges => centrifuge
Span 10-11:  enrichment => enrich-01
Span 3-4:  goal => goal
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 16-17:  Natanz => (city :name (name :op "Natanz"))
Span 12-13:  near => near
Span 7-8:  operating => operate-01
Span 11-12:  plant => plant
Span 14-15:  town => town

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),Natanz,(city :name (name :op "Natanz")),false), Span(14,15,List(3),town,town,false), Span(12,13,List(4),near,near,false), Span(11,12,List(5),plant,plant,false), Span(10,11,List(6),enrichment,enrich-01,false), Span(7,8,List(7),operating,operate-01,false), Span(6,7,List(8),centrifuges,centrifuge,false), Span(5,6,List(9),50000,50000,false), Span(3,4,List(10),goal,goal,false), Span(0,1,List(13, 12, 11),Iran,(country :name (name :op "Iran")),false)),Map(2 -> "Natanz", 5 -> plant, 12 -> name, 8 -> centrifuge, 7 -> operate-01, 1 -> name, 4 -> near, 11 -> country, 6 -> enrich-01, 0 -> city, 9 -> 50000, 3 -> town, 10 -> goal, 13 -> "Iran"),Map(e -> enrich-01, n -> name, 5 -> 50000, t -> town, g -> goal, p -> plant, n3 -> name, c3 -> country, c -> city, o -> operate-01, c2 -> centrifuge, n2 -> near))),[Ljava.lang.String;@ffaa6af,Annotation([Ljava.lang.String;@53ce1329,[Ljava.lang.String;@316bcf94,[Ljava.lang.String;@6404f418),Annotation([Ljava.lang.String;@3e11f9e9,[Ljava.lang.String;@1de5f259,[Ledu.cmu.lti.nlp.amr.Dependency;@729d991e),Annotation([Ljava.lang.String;@31fa1761,[Ljava.lang.String;@957e06,[Ljava.lang.String;@32502377),Annotation([Ljava.lang.String;@2c1b194a,[Ljava.lang.String;@4dbb42b7,[Ledu.cmu.lti.nlp.amr.Entity;@66f57048))
AMR:
(c / city, name, n / name)
(c3 / country, name, n3 / name)
(e / enrich-01, ARG1, 5 / 50000)
(g / goal, poss, c3 / country)
(n / name, op, "Natanz")
(n2 / near, op, t / town)
(n3 / name, op, "Iran")
(o / operate-01, ARG0, c2 / centrifuge)
(o / operate-01, ARG2, p / plant)
(p / plant, location, c3 / country)
(p / plant, location, t / town)
(p / plant, mod, e / enrich-01)
(t / town, location, c / city)

Decoded in 400,179 microseconds
Sentence: The international community has demanded that Iran halt the production of nuclear material.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 2-3:  community => community
Span 4-5:  demanded => demand-01
Span 7-8:  halt => halt-01
Span 1-2:  international => international
Span 6-7:  Iran => (country :name (name :op "Iran"))
Span 12-13:  material => material
Span 11-12:  nuclear => nucleus
Span 9-10:  production => produce-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),material,material,false), Span(11,12,List(1),nuclear,nucleus,false), Span(9,10,List(2),production,produce-01,false), Span(7,8,List(3),halt,halt-01,false), Span(6,7,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(4,5,List(7),demanded,demand-01,false), Span(2,3,List(8),community,community,false), Span(1,2,List(9),international,international,false)),Map(2 -> produce-01, 5 -> name, 8 -> community, 7 -> demand-01, 1 -> nucleus, 4 -> country, 6 -> "Iran", 9 -> international, 0 -> material, 3 -> halt-01),Map(n -> nucleus, h -> halt-01, d -> demand-01, m -> material, p -> produce-01, i -> international, c -> country, c2 -> community, n2 -> name))),[Ljava.lang.String;@550dbc7a,Annotation([Ljava.lang.String;@21282ed8,[Ljava.lang.String;@36916eb0,[Ljava.lang.String;@7bab3f1a),Annotation([Ljava.lang.String;@437da279,[Ljava.lang.String;@23c30a20,[Ledu.cmu.lti.nlp.amr.Dependency;@1e1a0406),Annotation([Ljava.lang.String;@3cebbb30,[Ljava.lang.String;@12aba8be,[Ljava.lang.String;@290222c1),Annotation([Ljava.lang.String;@67f639d3,[Ljava.lang.String;@6253c26,[Ledu.cmu.lti.nlp.amr.Entity;@49049a04))
AMR:
(c / country, name, n2 / name)
(c2 / community, mod, i / international)
(d / demand-01, ARG0, c2 / community)
(d / demand-01, ARG1, h / halt-01)
(h / halt-01, ARG0, c / country)
(h / halt-01, ARG1, p / produce-01)
(m / material, mod, n / nucleus)
(n2 / name, op, "Iran")
(p / produce-01, ARG1, m / material)

Decoded in 167,620 microseconds
Sentence: Media reports differed on the number of centrifuges ahmadinejad cited.

Spans:
Span 7-8:  centrifuges => centrifuge
Span 9-10:  cited => cite-01
Span 0-1:  Media => media
Span 5-6:  number => number
Span 1-2:  reports => report-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),cited,cite-01,false), Span(7,8,List(1),centrifuges,centrifuge,false), Span(5,6,List(2),number,number,false), Span(1,2,List(3),reports,report-01,false), Span(0,1,List(4),Media,media,false)),Map(2 -> number, 1 -> centrifuge, 4 -> media, 0 -> cite-01, 3 -> report-01),Map(n -> number, m -> media, r -> report-01, c -> cite-01, c2 -> centrifuge))),[Ljava.lang.String;@71a8adcf,Annotation([Ljava.lang.String;@27462a88,[Ljava.lang.String;@82de64a,[Ljava.lang.String;@659499f1),Annotation([Ljava.lang.String;@51e69659,[Ljava.lang.String;@47e2e487,[Ledu.cmu.lti.nlp.amr.Dependency;@201a4587),Annotation([Ljava.lang.String;@61001b64,[Ljava.lang.String;@4310d43,[Ljava.lang.String;@54a7079e),Annotation([Ljava.lang.String;@26e356f0,[Ljava.lang.String;@47d9a273,[Ledu.cmu.lti.nlp.amr.Entity;@4b8ee4de))
AMR:
(c / cite-01, ARG0, r / report-01)
(c / cite-01, ARG1, n / number)
(c2 / centrifuge, quant, n / number)
(r / report-01, ARG0, m / media)

Decoded in 70,596 microseconds
Sentence: An Iranian news agency reported that ahmadinejad stated Iran had 6000 working centrifuges but the agency subsequently removed the statement from the Internet.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Internet"))
NER Entity: (thing :name (name :op "Internet"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 10-11:  6000 => 6000
Span 15-16:  agency => agency
Span 3-4:  agency => agency
Span 13-14:  but => contrast-01
Span 12-13:  centrifuges => centrifuge
Span 22-23:  Internet => internet
Span 8-9:  Iran => (country :name (name :op "Iran"))
Span 1-2:  Iranian => (country :name (name :op "Iran"))
Span 2-3:  news => news
Span 17-18:  removed => remove-01
Span 4-5:  reported => report-01
Span 7-8:  stated => state-01
Span 19-20:  statement => state-01
Span 16-17:  subsequently => subsequent
Span 11-12:  working => work-01

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),Internet,internet,false), Span(19,20,List(1),statement,state-01,false), Span(17,18,List(2),removed,remove-01,false), Span(16,17,List(3),subsequently,subsequent,false), Span(15,16,List(4),agency,agency,false), Span(13,14,List(5),but,contrast-01,false), Span(12,13,List(6),centrifuges,centrifuge,false), Span(11,12,List(7),working,work-01,false), Span(10,11,List(8),6000,6000,false), Span(8,9,List(11, 10, 9),Iran,(country :name (name :op "Iran")),false), Span(7,8,List(12),stated,state-01,false), Span(4,5,List(13),reported,report-01,false), Span(3,4,List(14),agency,agency,false), Span(2,3,List(15),news,news,false), Span(1,2,List(18, 17, 16),Iranian,(country :name (name :op "Iran")),false)),Map(2 -> remove-01, 5 -> contrast-01, 12 -> state-01, 15 -> news, 8 -> 6000, 18 -> "Iran", 7 -> work-01, 17 -> name, 1 -> state-01, 4 -> agency, 11 -> "Iran", 14 -> agency, 6 -> centrifuge, 0 -> internet, 9 -> country, 16 -> country, 3 -> subsequent, 10 -> name, 13 -> report-01),Map(w -> work-01, n -> name, s2 -> subsequent, c4 -> country, s -> state-01, r2 -> report-01, n3 -> name, a -> agency, c3 -> country, a2 -> agency, i -> internet, r -> remove-01, c -> contrast-01, 6 -> 6000, s3 -> state-01, n2 -> news, c2 -> centrifuge))),[Ljava.lang.String;@27f981c6,Annotation([Ljava.lang.String;@1b11171f,[Ljava.lang.String;@1151e434,[Ljava.lang.String;@2dc54ad4),Annotation([Ljava.lang.String;@4659191b,[Ljava.lang.String;@55634720,[Ledu.cmu.lti.nlp.amr.Dependency;@4b0d79fc),Annotation([Ljava.lang.String;@4c1909a3,[Ljava.lang.String;@428640fa,[Ljava.lang.String;@d9345cd),Annotation([Ljava.lang.String;@2d710f1a,[Ljava.lang.String;@29215f06,[Ledu.cmu.lti.nlp.amr.Entity;@59505b48))
AMR:
(a2 / agency, mod, c4 / country)
(a2 / agency, mod, n2 / news)
(c / contrast-01, ARG1, r2 / report-01)
(c / contrast-01, ARG2, r / remove-01)
(c3 / country, name, n / name)
(c4 / country, name, n3 / name)
(n / name, op, "Iran")
(n3 / name, op, "Iran")
(r / remove-01, ARG0, a / agency)
(r / remove-01, ARG1, s / state-01)
(r / remove-01, location, i / internet)
(r / remove-01, mod, s2 / subsequent)
(r2 / report-01, ARG0, a2 / agency)
(r2 / report-01, ARG1, s3 / state-01)
(s / state-01, ARG1, 6 / 6000)
(s3 / state-01, ARG1, c3 / country)
(w / work-01, ARG0, a2 / agency)
(w / work-01, ARG1, c2 / centrifuge)

Decoded in 1,169,128 microseconds
Sentence: Another Iranian news agency stated that ahmadinejad referred to 100000s of centrifuges.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 3-4:  agency => agency
Span 0-1:  Another => another
Span 11-12:  centrifuges => centrifuge
Span 1-2:  Iranian => (country :name (name :op "Iran"))
Span 2-3:  news => news
Span 7-8:  referred => refer-01
Span 4-5:  stated => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),centrifuges,centrifuge,false), Span(7,8,List(1),referred,refer-01,false), Span(4,5,List(2),stated,state-01,false), Span(3,4,List(3),agency,agency,false), Span(2,3,List(4),news,news,false), Span(1,2,List(7, 6, 5),Iranian,(country :name (name :op "Iran")),false), Span(0,1,List(8),Another,another,false)),Map(2 -> state-01, 5 -> country, 8 -> another, 7 -> "Iran", 1 -> refer-01, 4 -> news, 6 -> name, 0 -> centrifuge, 3 -> agency),Map(n -> news, s -> state-01, a -> agency, a2 -> another, r -> refer-01, c -> centrifuge, n2 -> name, c2 -> country))),[Ljava.lang.String;@4efac082,Annotation([Ljava.lang.String;@6bd61f98,[Ljava.lang.String;@48aca48b,[Ljava.lang.String;@13fd2ccd),Annotation([Ljava.lang.String;@b9b00e0,[Ljava.lang.String;@506ae4d4,[Ledu.cmu.lti.nlp.amr.Dependency;@7d4f9aae),Annotation([Ljava.lang.String;@72e5a8e,[Ljava.lang.String;@54e1c68b,[Ljava.lang.String;@53aac487),Annotation([Ljava.lang.String;@52b1beb6,[Ljava.lang.String;@273e7444,[Ledu.cmu.lti.nlp.amr.Entity;@7db12bb6))
AMR:
(a / agency, mod, a2 / another)
(a / agency, mod, c2 / country)
(a / agency, mod, n / news)
(c2 / country, name, n2 / name)
(n2 / name, op, "Iran")
(r / refer-01, ARG1, c / centrifuge)
(s / state-01, ARG0, a / agency)
(s / state-01, ARG1, r / refer-01)

Decoded in 41,171 microseconds
Sentence: Experts discounted the significance of ahmadinejad's claim in the absence of information on the centrifuges' functionality.

Spans:
Span 15-16:  centrifuges => centrifuge
Span 7-8:  claim => claim-01
Span 0-1:  Experts => (person :ARG1-of expert-41)
Span 12-13:  information => information

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),centrifuges,centrifuge,false), Span(12,13,List(1),information,information,false), Span(7,8,List(2),claim,claim-01,false), Span(0,1,List(4, 3),Experts,(person :ARG1-of expert-41),false)),Map(2 -> claim-01, 1 -> information, 4 -> expert-41, 0 -> centrifuge, 3 -> person),Map(e -> expert-41, p -> person, i -> information, c -> centrifuge, c2 -> claim-01))),[Ljava.lang.String;@783a467b,Annotation([Ljava.lang.String;@272113c4,[Ljava.lang.String;@73e9cf30,[Ljava.lang.String;@771a660),Annotation([Ljava.lang.String;@2d52216b,[Ljava.lang.String;@242b836,[Ledu.cmu.lti.nlp.amr.Dependency;@3f6f6701),Annotation([Ljava.lang.String;@3527942a,[Ljava.lang.String;@942a29c,[Ljava.lang.String;@1ed6388a),Annotation([Ljava.lang.String;@5a45133e,[Ljava.lang.String;@534a5a98,[Ledu.cmu.lti.nlp.amr.Entity;@4f80542f))
AMR:
(c2 / claim-01, ARG0, p / person)
(c2 / claim-01, ARG1, c / centrifuge)
(e / expert-41, ARG1, p / person)
(i / information, location, c / centrifuge)

Decoded in 90,017 microseconds
Sentence: A Western diplomat in Tehran speaking under condition of anonymity stated that the quantity of centrifuges is less important than whether the machines are operational and efficient but that ahmadinejad's assertion will hinder a resolution of the diplomatic standoff between Iran and the West.

NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 42-43:  and => and
Span 25-26:  and => and
Span 9-10:  anonymity => anonymity
Span 40-41:  between => between
Span 27-28:  but => contrast-01
Span 15-16:  centrifuges => centrifuge
Span 7-8:  condition => condition
Span 38-39:  diplomatic => diplomacy
Span 26-27:  efficient => efficient-41
Span 18-19:  important => important
Span 41-42:  Iran => (country :name (name :op "Iran"))
Span 17-18:  less => less
Span 22-23:  machines => machine
Span 24-25:  operational => operate-01
Span 13-14:  quantity => quantity
Span 35-36:  resolution => resolution
Span 5-6:  speaking => speak-01
Span 39-40:  standoff => standoff
Span 10-11:  stated => state-01
Span 4-5:  Tehran => (city :name (name :op "Tehran"))
Span 44-45:  West => (world-region :name (name :op "West"))
Span 1-2:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(2, 1, 0),West,(world-region :name (name :op "West")),false), Span(42,43,List(3),and,and,false), Span(41,42,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(40,41,List(7),between,between,false), Span(39,40,List(8),standoff,standoff,false), Span(38,39,List(9),diplomatic,diplomacy,false), Span(35,36,List(10),resolution,resolution,false), Span(27,28,List(11),but,contrast-01,false), Span(26,27,List(12),efficient,efficient-41,false), Span(25,26,List(13),and,and,false), Span(24,25,List(14),operational,operate-01,false), Span(22,23,List(15),machines,machine,false), Span(18,19,List(16),important,important,false), Span(17,18,List(17),less,less,false), Span(15,16,List(18),centrifuges,centrifuge,false), Span(13,14,List(19),quantity,quantity,false), Span(10,11,List(20),stated,state-01,false), Span(9,10,List(21),anonymity,anonymity,false), Span(7,8,List(22),condition,condition,false), Span(5,6,List(23),speaking,speak-01,false), Span(4,5,List(26, 25, 24),Tehran,(city :name (name :op "Tehran")),false), Span(1,2,List(29, 28, 27),Western,(world-region :name (name :op "West")),false)),Map(2 -> "West", 5 -> name, 27 -> world-region, 12 -> efficient-41, 8 -> standoff, 15 -> machine, 21 -> anonymity, 18 -> centrifuge, 24 -> city, 7 -> between, 1 -> name, 17 -> less, 23 -> speak-01, 26 -> "Tehran", 4 -> country, 11 -> contrast-01, 14 -> operate-01, 29 -> "West", 20 -> state-01, 28 -> name, 6 -> "Iran", 9 -> diplomacy, 0 -> world-region, 22 -> condition, 16 -> important, 19 -> quantity, 10 -> resolution, 3 -> and, 25 -> name, 13 -> and),Map(e -> efficient-41, n -> name, w -> world-region, q -> quantity, s2 -> state-01, b -> between, n4 -> name, a3 -> anonymity, c4 -> condition, s -> standoff, d -> diplomacy, m -> machine, a -> and, c3 -> centrifuge, n3 -> name, w2 -> world-region, a2 -> and, r -> resolution, i -> important, c -> country, s3 -> speak-01, l -> less, o -> operate-01, c2 -> contrast-01, n2 -> name, c5 -> city))),[Ljava.lang.String;@60bd273d,Annotation([Ljava.lang.String;@121314f7,[Ljava.lang.String;@130c12b7,[Ljava.lang.String;@5e600dd5),Annotation([Ljava.lang.String;@576d5deb,[Ljava.lang.String;@5d534f5d,[Ledu.cmu.lti.nlp.amr.Dependency;@2e3967ea),Annotation([Ljava.lang.String;@70e9c95d,[Ljava.lang.String;@4d5650ae,[Ljava.lang.String;@a38c7fe),Annotation([Ljava.lang.String;@6fdbe764,[Ljava.lang.String;@51c668e3,[Ledu.cmu.lti.nlp.amr.Entity;@2e6a8155))
AMR:
(a / and, instrument, r / resolution)
(a / and, op, c / country)
(a / and, op, o / operate-01)
(a / and, op, w / world-region)
(a2 / and, op, o / operate-01)
(b / between, op, c / country)
(c / country, name, n2 / name)
(c2 / contrast-01, ARG1, i / important)
(c2 / contrast-01, ARG6, e / efficient-41)
(c3 / centrifuge, quant, q / quantity)
(c4 / condition, mod, a3 / anonymity)
(c5 / city, name, n3 / name)
(i / important, degree, l / less)
(i / important, domain, q / quantity)
(m / machine, mod, c2 / contrast-01)
(n / name, op, "West")
(n2 / name, op, "Iran")
(n3 / name, op, "Tehran")
(n4 / name, op, "West")
(o / operate-01, ARG0, w2 / world-region)
(o / operate-01, ARG1, m / machine)
(s / standoff, domain, b / between)
(s / standoff, mod, d / diplomacy)
(s2 / state-01, ARG0, c4 / condition)
(s2 / state-01, ARG1, c2 / contrast-01)
(s3 / speak-01, ARG1, c5 / city)
(s3 / speak-01, location, c4 / condition)
(w / world-region, name, n / name)
(w2 / world-region, name, n4 / name)

Decoded in 2,261,668 microseconds
Sentence: Arms control expert Jeffrey G. Lewis of the new America Foundation think tank stated that the Foundation was aware of Iran's goal of assembling 6000 centrifuges but the operational status of the machines is unknown.

NER Entity: (person :name (name :op "Jeffrey" :op "G." :op "Lewis"))
NER Entity: (thing :name (name :op "America" :op "Foundation"))
NER Entity: (organization :name (name :op "think" :op "tank"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 25-26:  6000 => 6000
Span 9-11:  America Foundation => (thing :name (name :op "America" :op "Foundation"))
Span 0-1:  Arms => arms
Span 24-25:  assembling => assemble-01
Span 27-28:  but => contrast-01
Span 26-27:  centrifuges => centrifuge
Span 1-2:  control => control-01
Span 2-3:  expert => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 22-23:  goal => goal
Span 20-21:  Iran => (country :name (name :op "Iran"))
Span 3-6:  Jeffrey G. Lewis => (person :name (name :op "Jeffrey" :op "G." :op "Lewis"))
Span 33-34:  machines => machine
Span 8-9:  new => new
Span 29-30:  operational => operate-01
Span 13-14:  stated => state-01
Span 30-31:  status => status
Span 11-13:  think tank => (organization :name (name :op "think" :op "tank"))
Span 35-36:  unknown => (know-01 :polarity -)

Langrangian relaxation converged after 59 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(1, 0),unknown,(know-01 :polarity -),false), Span(33,34,List(2),machines,machine,false), Span(30,31,List(3),status,status,false), Span(29,30,List(4),operational,operate-01,false), Span(27,28,List(5),but,contrast-01,false), Span(26,27,List(6),centrifuges,centrifuge,false), Span(25,26,List(7),6000,6000,false), Span(24,25,List(8),assembling,assemble-01,false), Span(22,23,List(9),goal,goal,false), Span(20,21,List(12, 11, 10),Iran,(country :name (name :op "Iran")),false), Span(13,14,List(13),stated,state-01,false), Span(11,13,List(17, 16, 15, 14),think tank,(organization :name (name :op "think" :op "tank")),false), Span(9,11,List(21, 20, 19, 18),America Foundation,(thing :name (name :op "America" :op "Foundation")),false), Span(8,9,List(22),new,new,false), Span(3,6,List(27, 26, 25, 24, 23),Jeffrey G. Lewis,(person :name (name :op "Jeffrey" :op "G." :op "Lewis")),false), Span(2,3,List(30, 29, 28),expert,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(1,2,List(31),control,control-01,false), Span(0,1,List(32),Arms,arms,false)),Map(30 -> expert-41, 2 -> machine, 5 -> contrast-01, 27 -> "Lewis", 12 -> "Iran", 8 -> assemble-01, 15 -> name, 21 -> "Foundation", 18 -> thing, 24 -> name, 7 -> 6000, 1 -> -, 17 -> "tank", 23 -> person, 26 -> "G.", 4 -> operate-01, 11 -> name, 32 -> arms, 14 -> organization, 29 -> person, 20 -> "America", 28 -> have-org-role-91, 6 -> centrifuge, 9 -> goal, 0 -> know-01, 22 -> new, 16 -> "think", 19 -> name, 10 -> country, 3 -> status, 31 -> control-01, 25 -> "Jeffrey", 13 -> state-01),Map(e -> expert-41, n -> name, h -> have-org-role-91, s2 -> state-01, t -> thing, k -> know-01, p2 -> person, c4 -> control-01, n4 -> new, s -> status, m -> machine, p -> person, g -> goal, n3 -> name, a -> assemble-01, c3 -> country, o2 -> organization, a2 -> arms, c -> contrast-01, 6 -> 6000, o -> operate-01, n2 -> name, c2 -> centrifuge, n5 -> name))),[Ljava.lang.String;@6221a451,Annotation([Ljava.lang.String;@52719fb6,[Ljava.lang.String;@3012646b,[Ljava.lang.String;@4a883b15),Annotation([Ljava.lang.String;@25641d39,[Ljava.lang.String;@7b36aa0c,[Ledu.cmu.lti.nlp.amr.Dependency;@5824a83d),Annotation([Ljava.lang.String;@537f60bf,[Ljava.lang.String;@5677323c,[Ljava.lang.String;@18df8434),Annotation([Ljava.lang.String;@65c7a252,[Ljava.lang.String;@4d154ccd,[Ledu.cmu.lti.nlp.amr.Entity;@229c6181))
AMR:
(a / assemble-01, ARG1, c2 / centrifuge)
(a / assemble-01, ARG2, c / contrast-01)
(c / contrast-01, ARG1, o2 / organization)
(c3 / country, name, n / name)
(c4 / control-01, ARG1, a2 / arms)
(e / expert-41, ARG1, p2 / person)
(g / goal, mod, a / assemble-01)
(g / goal, poss, c3 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, a2 / arms)
(h / have-org-role-91, ARG2, p2 / person)
(k / know-01, ARG1, o2 / organization)
(k / know-01, ARG6, s / status)
(k / know-01, polarity, -)
(n / name, op, "Iran")
(n2 / name, op, "tank")
(n2 / name, op, "think")
(n3 / name, op, "America")
(n3 / name, op, "Foundation")
(n5 / name, op, "G.")
(n5 / name, op, "Jeffrey")
(n5 / name, op, "Lewis")
(o / operate-01, ARG1, 6 / 6000)
(o2 / organization, name, n2 / name)
(p / person, name, n5 / name)
(s / status, mod, o / operate-01)
(s / status, poss, m / machine)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, c / contrast-01)
(t / thing, mod, n4 / new)
(t / thing, name, n3 / name)
(t / thing, name, o2 / organization)

Decoded in 2,597,031 microseconds
Sentence: Diplomats and arms control experts stated that the Iranian enrichment program is hindered by technical problems.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 1-2:  and => and
Span 2-3:  arms => arm
Span 3-4:  control => control-01
Span 9-10:  enrichment => enrich-01
Span 4-5:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 12-13:  hindered => hinder-01
Span 8-9:  Iranian => (country :name (name :op "Iran"))
Span 15-16:  problems => problem
Span 10-11:  program => program
Span 5-6:  stated => state-01
Span 14-15:  technical => technique

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),problems,problem,false), Span(14,15,List(1),technical,technique,false), Span(12,13,List(2),hindered,hinder-01,false), Span(10,11,List(3),program,program,false), Span(9,10,List(4),enrichment,enrich-01,false), Span(8,9,List(7, 6, 5),Iranian,(country :name (name :op "Iran")),false), Span(5,6,List(8),stated,state-01,false), Span(4,5,List(11, 10, 9),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(3,4,List(12),control,control-01,false), Span(2,3,List(13),arms,arm,false), Span(1,2,List(14),and,and,false)),Map(2 -> hinder-01, 5 -> country, 12 -> control-01, 8 -> state-01, 7 -> "Iran", 1 -> technique, 4 -> enrich-01, 11 -> expert-41, 14 -> and, 6 -> name, 0 -> problem, 9 -> have-org-role-91, 3 -> program, 10 -> person, 13 -> arm),Map(e -> enrich-01, n -> name, h -> hinder-01, h2 -> have-org-role-91, t -> technique, p2 -> program, e2 -> expert-41, s -> state-01, p -> problem, a -> arm, a2 -> and, c -> country, p3 -> person, c2 -> control-01))),[Ljava.lang.String;@4686afc2,Annotation([Ljava.lang.String;@1e0b4072,[Ljava.lang.String;@791f145a,[Ljava.lang.String;@38cee291),Annotation([Ljava.lang.String;@4b45a2f5,[Ljava.lang.String;@f09733f,[Ledu.cmu.lti.nlp.amr.Dependency;@e350b40),Annotation([Ljava.lang.String;@41a0aa7d,[Ljava.lang.String;@2794eab6,[Ljava.lang.String;@6340e5f0),Annotation([Ljava.lang.String;@45099dd3,[Ljava.lang.String;@13e344d,[Ledu.cmu.lti.nlp.amr.Entity;@1ffaf86))
AMR:
(c / country, name, n / name)
(c2 / control-01, ARG0, a2 / and)
(c2 / control-01, ARG1, s / state-01)
(e / enrich-01, ARG1, c / country)
(e2 / expert-41, ARG1, p3 / person)
(h / hinder-01, ARG1, p2 / program)
(h / hinder-01, ARG2, p / problem)
(h2 / have-org-role-91, ARG1, a / arm)
(h2 / have-org-role-91, ARG2, p3 / person)
(n / name, op, "Iran")
(p / problem, mod, t / technique)
(p2 / program, mod, e / enrich-01)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, h / hinder-01)

Decoded in 535,930 microseconds
Sentence: Iran has repeatedly asserted that its nuclear program aims to produce only electricity because nuclear weapon production contradicts Islamic principles.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Islamic"))
NER Entity: (thing :name (name :op "Islamic"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  aims => aim-01
Span 13-14:  because => cause-01
Span 12-13:  electricity => electricity
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 18-19:  Islamic => (religious-group :name (name :op "Islam"))
Span 14-15:  nuclear => nucleus
Span 6-7:  nuclear => nucleus
Span 11-12:  only => only
Span 19-20:  principles => principle
Span 10-11:  produce => produce-01
Span 16-17:  production => produce-01
Span 7-8:  program => program
Span 2-3:  repeatedly => repeat-01
Span 15-16:  weapon => weapon

Langrangian relaxation converged after 78 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),principles,principle,false), Span(18,19,List(3, 2, 1),Islamic,(religious-group :name (name :op "Islam")),false), Span(16,17,List(4),production,produce-01,false), Span(15,16,List(5),weapon,weapon,false), Span(14,15,List(6),nuclear,nucleus,false), Span(13,14,List(7),because,cause-01,false), Span(12,13,List(8),electricity,electricity,false), Span(11,12,List(9),only,only,false), Span(10,11,List(10),produce,produce-01,false), Span(8,9,List(11),aims,aim-01,false), Span(7,8,List(12),program,program,false), Span(6,7,List(13),nuclear,nucleus,false), Span(2,3,List(14),repeatedly,repeat-01,false), Span(0,1,List(17, 16, 15),Iran,(country :name (name :op "Iran")),false)),Map(2 -> name, 5 -> weapon, 12 -> program, 15 -> country, 8 -> electricity, 7 -> cause-01, 17 -> "Iran", 1 -> religious-group, 4 -> produce-01, 11 -> aim-01, 14 -> repeat-01, 6 -> nucleus, 0 -> principle, 9 -> only, 16 -> name, 3 -> "Islam", 10 -> produce-01, 13 -> nucleus),Map(e -> electricity, n -> name, w -> weapon, p2 -> produce-01, n4 -> name, r2 -> repeat-01, p -> principle, a -> aim-01, n3 -> nucleus, p4 -> program, r -> religious-group, c -> cause-01, o -> only, p3 -> produce-01, c2 -> country, n2 -> nucleus))),[Ljava.lang.String;@6574a52c,Annotation([Ljava.lang.String;@6c1a5b54,[Ljava.lang.String;@1c7696c6,[Ljava.lang.String;@60099951),Annotation([Ljava.lang.String;@20140db9,[Ljava.lang.String;@1e6a3214,[Ledu.cmu.lti.nlp.amr.Dependency;@368247b9),Annotation([Ljava.lang.String;@1a6d8329,[Ljava.lang.String;@1a942c18,[Ljava.lang.String;@55a147cc),Annotation([Ljava.lang.String;@71ba6d4e,[Ljava.lang.String;@738dc9b,[Ledu.cmu.lti.nlp.amr.Entity;@3c77d488))
AMR:
(a / aim-01, ARG0, p4 / program)
(a / aim-01, ARG1, p3 / produce-01)
(c / cause-01, ARG0, p / principle)
(c / cause-01, ARG1, p3 / produce-01)
(c2 / country, name, n4 / name)
(e / electricity, mod, o / only)
(n / name, op, "Islam")
(n4 / name, op, "Iran")
(p / principle, mod, r / religious-group)
(p2 / produce-01, ARG1, w / weapon)
(p3 / produce-01, ARG1, e / electricity)
(p3 / produce-01, ARG6, p2 / produce-01)
(p4 / program, poss, c2 / country)
(r / religious-group, name, n / name)
(r2 / repeat-01, ARG0, c2 / country)
(r2 / repeat-01, ARG1, n3 / nucleus)
(w / weapon, mod, n2 / nucleus)

Decoded in 1,455,693 microseconds
Sentence: The US, Israel, Europe and the majority of Western arms control experts believe that Iran is pursuing the capability to produce bombs immediately in the event of a decision.

NER Entity: (country :name (name :op "The" :op "US"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Israel"))
Spans:
Span 6-7:  and => and
Span 11-12:  arms => arm
Span 14-15:  believe => believe-01
Span 23-24:  bombs => bomb
Span 20-21:  capability => capable-41
Span 12-13:  control => control-01
Span 30-31:  decision => decide-01
Span 5-6:  Europe => (continent :name (name :op "Europe"))
Span 27-28:  event => event
Span 13-14:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 24-25:  immediately => immediate
Span 16-17:  Iran => (country :name (name :op "Iran"))
Span 3-4:  Israel => (country :name (name :op "Israel"))
Span 8-9:  majority => majority
Span 22-23:  produce => produce-01
Span 18-19:  pursuing => pursue-01
Span 0-2:  The US => (country :name (name :op "The" :op "US"))
Span 10-11:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),decision,decide-01,false), Span(27,28,List(1),event,event,false), Span(24,25,List(2),immediately,immediate,false), Span(23,24,List(3),bombs,bomb,false), Span(22,23,List(4),produce,produce-01,false), Span(20,21,List(5),capability,capable-41,false), Span(18,19,List(6),pursuing,pursue-01,false), Span(16,17,List(9, 8, 7),Iran,(country :name (name :op "Iran")),false), Span(14,15,List(10),believe,believe-01,false), Span(13,14,List(13, 12, 11),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(12,13,List(14),control,control-01,false), Span(11,12,List(15),arms,arm,false), Span(10,11,List(18, 17, 16),Western,(world-region :name (name :op "West")),false), Span(8,9,List(19),majority,majority,false), Span(6,7,List(20),and,and,false), Span(5,6,List(23, 22, 21),Europe,(continent :name (name :op "Europe")),false), Span(3,4,List(26, 25, 24),Israel,(country :name (name :op "Israel")),false), Span(0,2,List(30, 29, 28, 27),The US,(country :name (name :op "The" :op "US")),false)),Map(30 -> "US", 2 -> immediate, 5 -> capable-41, 27 -> country, 12 -> person, 8 -> name, 15 -> arm, 21 -> continent, 18 -> "West", 24 -> country, 7 -> country, 1 -> event, 17 -> name, 23 -> "Europe", 26 -> "Israel", 4 -> produce-01, 11 -> have-org-role-91, 14 -> control-01, 29 -> "The", 20 -> and, 28 -> name, 6 -> pursue-01, 9 -> "Iran", 0 -> decide-01, 22 -> name, 16 -> world-region, 19 -> majority, 10 -> believe-01, 3 -> bomb, 25 -> name, 13 -> expert-41),Map(e -> event, n -> name, w -> world-region, h -> have-org-role-91, b -> bomb, b2 -> believe-01, e2 -> expert-41, p2 -> pursue-01, c4 -> continent, n4 -> name, d -> decide-01, m -> majority, p -> produce-01, c3 -> control-01, a -> arm, n3 -> name, c6 -> country, i -> immediate, a2 -> and, c -> capable-41, p3 -> person, c2 -> country, n2 -> name, c5 -> country, n5 -> name))),[Ljava.lang.String;@63376bed,Annotation([Ljava.lang.String;@4145bad8,[Ljava.lang.String;@d86a6f,[Ljava.lang.String;@2892d68),Annotation([Ljava.lang.String;@5ab956d7,[Ljava.lang.String;@3646a422,[Ledu.cmu.lti.nlp.amr.Dependency;@750e2b97),Annotation([Ljava.lang.String;@3e27aa33,[Ljava.lang.String;@2e385cce,[Ljava.lang.String;@2ddc9a9f),Annotation([Ljava.lang.String;@298a5e20,[Ljava.lang.String;@2a7f1f10,[Ledu.cmu.lti.nlp.amr.Entity;@46cdf8bd))
AMR:
(a2 / and, op, c4 / continent)
(a2 / and, op, c5 / country)
(a2 / and, op, m / majority)
(b2 / believe-01, ARG0, a2 / and)
(b2 / believe-01, ARG1, c2 / country)
(c / capable-41, ARG0, e / event)
(c / capable-41, ARG1, c6 / country)
(c / capable-41, ARG2, p / produce-01)
(c / capable-41, time, d / decide-01)
(c2 / country, name, n / name)
(c3 / control-01, ARG0, c2 / country)
(c3 / control-01, ARG1, a / arm)
(c4 / continent, name, n3 / name)
(c5 / country, name, n4 / name)
(c6 / country, name, n5 / name)
(d / decide-01, ARG1, w / world-region)
(e2 / expert-41, ARG1, p3 / person)
(h / have-org-role-91, ARG1, c3 / control-01)
(h / have-org-role-91, ARG2, p3 / person)
(n / name, op, "Iran")
(n2 / name, op, "West")
(n3 / name, op, "Europe")
(n4 / name, op, "Israel")
(n5 / name, op, "The")
(n5 / name, op, "US")
(p / produce-01, ARG1, b / bomb)
(p / produce-01, ARG6, i / immediate)
(p2 / pursue-01, ARG0, c2 / country)
(p2 / pursue-01, ARG1, c / capable-41)
(w / world-region, name, n2 / name)

Decoded in 1,940,222 microseconds
Sentence: Experts stated that producing weapons-grade uranium from reactor-grade material is relatively simple.

Spans:
Span 0-1:  Experts => (person :ARG1-of expert-41)
Span 11-12:  grade => grade
Span 6-7:  grade => grade
Span 12-13:  material => material
Span 3-4:  producing => produce-01
Span 9-10:  reactor => reactor
Span 1-2:  stated => state-01
Span 7-8:  uranium => uranium
Span 4-5:  weapons => weapon

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),material,material,false), Span(11,12,List(1),grade,grade,false), Span(9,10,List(2),reactor,reactor,false), Span(7,8,List(3),uranium,uranium,false), Span(6,7,List(4),grade,grade,false), Span(4,5,List(5),weapons,weapon,false), Span(3,4,List(6),producing,produce-01,false), Span(1,2,List(7),stated,state-01,false), Span(0,1,List(9, 8),Experts,(person :ARG1-of expert-41),false)),Map(2 -> reactor, 5 -> weapon, 8 -> person, 7 -> state-01, 1 -> grade, 4 -> grade, 6 -> produce-01, 9 -> expert-41, 0 -> material, 3 -> uranium),Map(e -> expert-41, w -> weapon, p2 -> person, s -> state-01, m -> material, p -> produce-01, g2 -> grade, g -> grade, r -> reactor, u -> uranium))),[Ljava.lang.String;@f0c8a99,Annotation([Ljava.lang.String;@740cae06,[Ljava.lang.String;@26d9b808,[Ljava.lang.String;@f78a47e),Annotation([Ljava.lang.String;@644baf4a,[Ljava.lang.String;@7526515b,[Ledu.cmu.lti.nlp.amr.Dependency;@1ed4ae0f),Annotation([Ljava.lang.String;@54c5a2ff,[Ljava.lang.String;@6d4d66d2,[Ljava.lang.String;@2a265ea9),Annotation([Ljava.lang.String;@11392934,[Ljava.lang.String;@6892b3b6,[Ledu.cmu.lti.nlp.amr.Entity;@6e6f2380))
AMR:
(e / expert-41, ARG1, p2 / person)
(g / grade, mod, r / reactor)
(g2 / grade, mod, w / weapon)
(m / material, mod, g / grade)
(p / produce-01, ARG1, u / uranium)
(p / produce-01, time, m / material)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, m / material)
(u / uranium, mod, g2 / grade)

Decoded in 219,954 microseconds
Sentence: Ahmadinejad stated that after Iran resisted the West's demands for a halt in nuclear activities, the West still pursued the resumption of negotiations.

NER Entity: (person :name (name :op "Ahmadinejad"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 15-16:  activities => activity
Span 3-4:  after => after
Span 9-10:  demands => demand-01
Span 12-13:  halt => halt-01
Span 4-5:  Iran => (country :name (name :op "Iran"))
Span 24-25:  negotiations => negotiate-01
Span 14-15:  nuclear => nucleus
Span 20-21:  pursued => pursue-01
Span 5-6:  resisted => resist-01
Span 1-2:  stated => state-01
Span 19-20:  still => still
Span 18-19:  West => (world-region :name (name :op "West"))
Span 7-8:  West => (world-region :name (name :op "West"))

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),negotiations,negotiate-01,false), Span(20,21,List(1),pursued,pursue-01,false), Span(19,20,List(2),still,still,false), Span(18,19,List(5, 4, 3),West,(world-region :name (name :op "West")),false), Span(15,16,List(6),activities,activity,false), Span(14,15,List(7),nuclear,nucleus,false), Span(12,13,List(8),halt,halt-01,false), Span(9,10,List(9),demands,demand-01,false), Span(7,8,List(12, 11, 10),West,(world-region :name (name :op "West")),false), Span(5,6,List(13),resisted,resist-01,false), Span(4,5,List(16, 15, 14),Iran,(country :name (name :op "Iran")),false), Span(3,4,List(17),after,after,false), Span(1,2,List(18),stated,state-01,false)),Map(2 -> still, 5 -> "West", 12 -> "West", 15 -> name, 8 -> halt-01, 18 -> state-01, 7 -> nucleus, 17 -> after, 1 -> pursue-01, 4 -> name, 11 -> name, 14 -> country, 6 -> activity, 0 -> negotiate-01, 9 -> demand-01, 16 -> "Iran", 3 -> world-region, 10 -> world-region, 13 -> resist-01),Map(n -> negotiate-01, w -> world-region, h -> halt-01, s2 -> state-01, n4 -> name, s -> still, d -> demand-01, p -> pursue-01, a -> activity, n3 -> nucleus, w2 -> world-region, a2 -> after, r -> resist-01, c -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@76a4ebf2,Annotation([Ljava.lang.String;@2e8c1c9b,[Ljava.lang.String;@53fe15ff,[Ljava.lang.String;@449a4f23),Annotation([Ljava.lang.String;@1530c739,[Ljava.lang.String;@5b1669c0,[Ledu.cmu.lti.nlp.amr.Dependency;@78e4deb0),Annotation([Ljava.lang.String;@6e9175d8,[Ljava.lang.String;@7d0b7e3c,[Ljava.lang.String;@15bb5034),Annotation([Ljava.lang.String;@4b741d6d,[Ljava.lang.String;@2eae8e6e,[Ledu.cmu.lti.nlp.amr.Entity;@8f2ef19))
AMR:
(a2 / after, op, r / resist-01)
(c / country, name, n5 / name)
(d / demand-01, ARG0, w2 / world-region)
(d / demand-01, ARG1, h / halt-01)
(h / halt-01, ARG1, a / activity)
(n / negotiate-01, ARG1, n3 / nucleus)
(n2 / name, op, "West")
(n4 / name, op, "West")
(n5 / name, op, "Iran")
(p / pursue-01, ARG0, w / world-region)
(p / pursue-01, ARG1, n / negotiate-01)
(p / pursue-01, mod, s / still)
(p / pursue-01, time, a2 / after)
(r / resist-01, ARG0, c / country)
(r / resist-01, ARG1, d / demand-01)
(s2 / state-01, ARG1, p / pursue-01)
(w / world-region, name, n2 / name)
(w2 / world-region, name, n4 / name)

Decoded in 201,694 microseconds
Sentence: EU foreign policy chief Javier Solana recently presented Iran with 2 offers --

NER Entity: (organization :name (name :op "EU"))
NER Entity: (person :name (name :op "Javier" :op "Solana"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "EU"))
Spans:
Span 10-11:  2 => 2
Span 3-4:  chief => chief
Span 0-1:  EU => (organization :name (name :op "EU"))
Span 1-2:  foreign => foreign
Span 8-9:  Iran => (country :name (name :op "Iran"))
Span 4-6:  Javier Solana => (person :name (name :op "Javier" :op "Solana"))
Span 11-12:  offers => offer-01
Span 2-3:  policy => policy
Span 7-8:  presented => present-01
Span 6-7:  recently => recent

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),offers,offer-01,false), Span(10,11,List(1),2,2,false), Span(8,9,List(4, 3, 2),Iran,(country :name (name :op "Iran")),false), Span(7,8,List(5),presented,present-01,false), Span(6,7,List(6),recently,recent,false), Span(4,6,List(10, 9, 8, 7),Javier Solana,(person :name (name :op "Javier" :op "Solana")),false), Span(3,4,List(11),chief,chief,false), Span(2,3,List(12),policy,policy,false), Span(1,2,List(13),foreign,foreign,false), Span(0,1,List(16, 15, 14),EU,(organization :name (name :op "EU")),false)),Map(2 -> country, 5 -> present-01, 12 -> policy, 15 -> name, 8 -> name, 7 -> person, 1 -> 2, 4 -> "Iran", 11 -> chief, 14 -> organization, 6 -> recent, 0 -> offer-01, 9 -> "Javier", 16 -> "EU", 3 -> name, 10 -> "Solana", 13 -> foreign),Map(n -> name, 2 -> 2, p2 -> person, p -> present-01, n3 -> name, o2 -> organization, r -> recent, c -> country, f -> foreign, o -> offer-01, p3 -> policy, n2 -> name, c2 -> chief))),[Ljava.lang.String;@470734c3,Annotation([Ljava.lang.String;@2cf3d63b,[Ljava.lang.String;@7674f035,[Ljava.lang.String;@69e153c5),Annotation([Ljava.lang.String;@173ed316,[Ljava.lang.String;@25ce9dc4,[Ledu.cmu.lti.nlp.amr.Dependency;@74ea2410),Annotation([Ljava.lang.String;@17f62e33,[Ljava.lang.String;@76b1e9b8,[Ljava.lang.String;@27406a17),Annotation([Ljava.lang.String;@2af004b,[Ljava.lang.String;@248e319b,[Ledu.cmu.lti.nlp.amr.Entity;@5d0bf09b))
AMR:
(c / country, name, n / name)
(c2 / chief, mod, f / foreign)
(c2 / chief, poss, o2 / organization)
(c2 / chief, poss, p3 / policy)
(n / name, op, "Iran")
(n2 / name, op, "Javier")
(n2 / name, op, "Solana")
(n3 / name, op, "EU")
(o / offer-01, ARG1, r / recent)
(o / offer-01, quant, 2 / 2)
(o2 / organization, name, n3 / name)
(p / present-01, ARG0, p2 / person)
(p / present-01, ARG1, c / country)
(p / present-01, time, r / recent)
(p2 / person, mod, c2 / chief)
(p2 / person, name, n2 / name)

Decoded in 367,917 microseconds
Sentence: A US-endorsed package of incentives to cease enriched uranium production

NER Entity: (thing :name (name :op "US" :op "-" :op "endorsed"))
NER Entity: (thing :name (name :op "US" :op "-" :op "endorsed"))
Spans:
Span 8-9:  cease => cease-01
Span 3-4:  endorsed => endorse-01
Span 9-10:  enriched => enrich-01
Span 6-7:  incentives => (thing :ARG0-of incentivize-01)
Span 4-5:  package => package
Span 11-12:  production => produce-01
Span 10-11:  uranium => uranium
Span 1-2:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),production,produce-01,false), Span(10,11,List(1),uranium,uranium,false), Span(9,10,List(2),enriched,enrich-01,false), Span(8,9,List(3),cease,cease-01,false), Span(6,7,List(5, 4),incentives,(thing :ARG0-of incentivize-01),false), Span(4,5,List(6),package,package,false), Span(3,4,List(7),endorsed,endorse-01,false), Span(1,2,List(10, 9, 8),US,(country :name (name :op "US")),false)),Map(2 -> enrich-01, 5 -> incentivize-01, 8 -> country, 7 -> endorse-01, 1 -> uranium, 4 -> thing, 6 -> package, 9 -> name, 0 -> produce-01, 10 -> "US", 3 -> cease-01),Map(n -> name, e -> enrich-01, t -> thing, e2 -> endorse-01, p2 -> package, p -> produce-01, i -> incentivize-01, c -> cease-01, u -> uranium, c2 -> country))),[Ljava.lang.String;@793f29ff,Annotation([Ljava.lang.String;@3e8c3cb,[Ljava.lang.String;@563f38c4,[Ljava.lang.String;@543295b0),Annotation([Ljava.lang.String;@54422e18,[Ljava.lang.String;@117159c0,[Ledu.cmu.lti.nlp.amr.Dependency;@3e27ba32),Annotation([Ljava.lang.String;@7ef82753,[Ljava.lang.String;@3b0fe47a,[Ljava.lang.String;@202b0582),Annotation([Ljava.lang.String;@235ecd9f,[Ljava.lang.String;@1ca3b418,[Ledu.cmu.lti.nlp.amr.Entity;@58cbafc2))
AMR:
(c / cease-01, ARG1, p / produce-01)
(c2 / country, name, n / name)
(e / enrich-01, ARG1, p / produce-01)
(e2 / endorse-01, ARG0, c2 / country)
(e2 / endorse-01, ARG1, p2 / package)
(i / incentivize-01, ARG0, t / thing)
(i / incentivize-01, ARG1, c / cease-01)
(n / name, op, "US")
(p / produce-01, ARG0, c2 / country)
(p / produce-01, ARG1, u / uranium)

Decoded in 363,398 microseconds
Sentence: A 6-week pre-negotiation' freeze for freeze' period during which Iran would add no centrifuges and the West would refrain from promoting a 4th round of economic sanctions against Iran at the UN Security Council.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "West"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "UN" :op "Security" :op "Council"))
Spans:
Span 1-2:  6 => 6
Span 20-21:  and => and
Span 19-20:  centrifuges => centrifuge
Span 13-14:  during => during
Span 31-34:  economic sanctions against => (organization :name (name :op "UN" :op "Security" :op "Council"))
Span 10-11:  freeze => freeze-02
Span 8-9:  freeze => freeze-02
Span 34-35:  Iran => (country :name (name :op "Iran"))
Span 15-16:  Iran => (country :name (name :op "Iran"))
Span 6-7:  negotiation => negotiate-01
Span 18-19:  no => -
Span 12-13:  period => period
Span 26-27:  promoting => promote-02
Span 24-25:  refrain => refrain-01
Span 29-30:  round => round
Span 37-40:  UN Security Council => (organization :name (name :op "Council" :op "Security" :op "UN"))
Span 3-4:  week => week
Span 22-23:  West => (world-region :name (name :op "West"))

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,40,List(4, 3, 2, 1, 0),UN Security Council,(organization :name (name :op "Council" :op "Security" :op "UN")),false), Span(34,35,List(7, 6, 5),Iran,(country :name (name :op "Iran")),false), Span(31,34,List(12, 11, 10, 9, 8),economic sanctions against,(organization :name (name :op "UN" :op "Security" :op "Council")),false), Span(29,30,List(13),round,round,false), Span(26,27,List(14),promoting,promote-02,false), Span(24,25,List(15),refrain,refrain-01,false), Span(22,23,List(18, 17, 16),West,(world-region :name (name :op "West")),false), Span(20,21,List(19),and,and,false), Span(19,20,List(20),centrifuges,centrifuge,false), Span(18,19,List(21),no,-,false), Span(15,16,List(24, 23, 22),Iran,(country :name (name :op "Iran")),false), Span(13,14,List(25),during,during,false), Span(12,13,List(26),period,period,false), Span(10,11,List(27),freeze,freeze-02,false), Span(8,9,List(28),freeze,freeze-02,false), Span(6,7,List(29),negotiation,negotiate-01,false), Span(3,4,List(30),week,week,false), Span(1,2,List(31),6,6,false)),Map(30 -> week, 2 -> "Council", 5 -> country, 27 -> freeze-02, 12 -> "Council", 8 -> organization, 15 -> refrain-01, 21 -> -, 18 -> "West", 24 -> "Iran", 7 -> "Iran", 1 -> name, 17 -> name, 23 -> name, 26 -> period, 4 -> "UN", 11 -> "Security", 14 -> promote-02, 29 -> negotiate-01, 20 -> centrifuge, 28 -> freeze-02, 6 -> name, 9 -> name, 0 -> organization, 22 -> country, 16 -> world-region, 19 -> and, 10 -> "UN", 3 -> "Security", 31 -> 6, 25 -> during, 13 -> round),Map(n -> name, w -> world-region, p2 -> period, n4 -> name, d -> during, p -> promote-02, r2 -> refrain-01, c3 -> country, n3 -> name, a -> and, n6 -> negotiate-01, o2 -> organization, w2 -> week, r -> round, - -> -, 6 -> 6, c -> country, f2 -> freeze-02, f -> freeze-02, o -> organization, n2 -> name, c2 -> centrifuge, n5 -> name))),[Ljava.lang.String;@2034b64c,Annotation([Ljava.lang.String;@75d3a5e0,[Ljava.lang.String;@74d1dc36,[Ljava.lang.String;@7161d8d1),Annotation([Ljava.lang.String;@74e28667,[Ljava.lang.String;@1cf6d1be,[Ledu.cmu.lti.nlp.amr.Dependency;@663c9e7a),Annotation([Ljava.lang.String;@19e4653c,[Ljava.lang.String;@795509d9,[Ljava.lang.String;@53045c6c),Annotation([Ljava.lang.String;@5149d738,[Ljava.lang.String;@6bbe85a8,[Ledu.cmu.lti.nlp.amr.Entity;@3a7442c7))
AMR:
(a / and, op, c2 / centrifuge)
(a / and, op, w / world-region)
(c / country, name, n2 / name)
(c3 / country, name, n5 / name)
(d / during, calendar, p2 / period)
(f / freeze-02, ARG1, - / -)
(f2 / freeze-02, ARG0, n6 / negotiate-01)
(f2 / freeze-02, ARG1, p2 / period)
(n / name, op, "Council")
(n / name, op, "Security")
(n / name, op, "UN")
(n2 / name, op, "Iran")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(n3 / name, op, "UN")
(n3 / name, op, c / country)
(n4 / name, op, "West")
(n5 / name, op, "Iran")
(n6 / negotiate-01, ARG1, c3 / country)
(n6 / negotiate-01, mod, w2 / week)
(o / organization, name, n / name)
(o2 / organization, name, n3 / name)
(p / promote-02, ARG0, a / and)
(p / promote-02, ARG1, r / round)
(p / promote-02, ARG2, o2 / organization)
(p / promote-02, instrument, o / organization)
(p2 / period, poss, f / freeze-02)
(r2 / refrain-01, ARG0, c3 / country)
(r2 / refrain-01, ARG1, p / promote-02)
(w / world-region, name, n4 / name)
(w2 / week, mod, 6 / 6)

Decoded in 1,848,305 microseconds
Sentence: US officials repeatedly stated that no negotiations can begin before Iran verifiably halts all enrichment-related activities but the Bush administration recently agreed to the' freeze for freeze' proposal and dispatch burns to Geneva.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "Geneva"))
NER Entity: (country :name (name :op "Geneva"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 17-18:  activities => activity
Span 21-22:  administration => administrate-01
Span 23-24:  agreed => agree-01
Span 13-14:  all => all
Span 32-33:  and => and
Span 9-10:  before => before
Span 8-9:  begin => begin-01
Span 20-21:  Bush => (person :name (name :op "Bush"))
Span 18-19:  but => contrast-01
Span 7-8:  can => possible
Span 33-34:  dispatch => dispatch-01
Span 14-15:  enrichment => enrich-01
Span 29-30:  freeze => freeze-02
Span 27-28:  freeze => freeze-02
Span 36-37:  Geneva => (city :name (name :op "Geneva"))
Span 10-11:  Iran => (country :name (name :op "Iran"))
Span 6-7:  negotiations => negotiate-01
Span 5-6:  no => -
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 31-32:  proposal => propose-01
Span 22-23:  recently => recent
Span 16-17:  related => relate-01
Span 2-3:  repeatedly => repeat-01
Span 3-4:  stated => state-01
Span 0-1:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(2, 1, 0),Geneva,(city :name (name :op "Geneva")),false), Span(33,34,List(3),dispatch,dispatch-01,false), Span(32,33,List(4),and,and,false), Span(31,32,List(5),proposal,propose-01,false), Span(29,30,List(6),freeze,freeze-02,false), Span(27,28,List(7),freeze,freeze-02,false), Span(23,24,List(8),agreed,agree-01,false), Span(22,23,List(9),recently,recent,false), Span(21,22,List(10),administration,administrate-01,false), Span(20,21,List(13, 12, 11),Bush,(person :name (name :op "Bush")),false), Span(18,19,List(14),but,contrast-01,false), Span(17,18,List(15),activities,activity,false), Span(16,17,List(16),related,relate-01,false), Span(14,15,List(17),enrichment,enrich-01,false), Span(13,14,List(18),all,all,false), Span(10,11,List(21, 20, 19),Iran,(country :name (name :op "Iran")),false), Span(9,10,List(22),before,before,false), Span(8,9,List(23),begin,begin-01,false), Span(7,8,List(24),can,possible,false), Span(6,7,List(25),negotiations,negotiate-01,false), Span(5,6,List(26),no,-,false), Span(3,4,List(27),stated,state-01,false), Span(2,3,List(28),repeatedly,repeat-01,false), Span(1,2,List(30, 29),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(33, 32, 31),US,(country :name (name :op "US")),false)),Map(30 -> official, 2 -> "Geneva", 5 -> propose-01, 33 -> "US", 27 -> state-01, 12 -> name, 8 -> agree-01, 15 -> activity, 21 -> "Iran", 18 -> all, 24 -> possible, 7 -> freeze-02, 1 -> name, 17 -> enrich-01, 23 -> begin-01, 26 -> -, 4 -> and, 11 -> person, 32 -> name, 14 -> contrast-01, 29 -> have-org-role-91, 20 -> name, 28 -> repeat-01, 6 -> freeze-02, 9 -> recent, 0 -> city, 22 -> before, 16 -> relate-01, 19 -> country, 10 -> administrate-01, 3 -> dispatch-01, 31 -> country, 25 -> negotiate-01, 13 -> "Bush"),Map(e -> enrich-01, n -> name, h -> have-org-role-91, r3 -> repeat-01, b -> before, b2 -> begin-01, p2 -> person, c4 -> country, a3 -> administrate-01, n4 -> negotiate-01, s -> state-01, d -> dispatch-01, r2 -> relate-01, p -> propose-01, a -> and, c3 -> country, n3 -> name, a5 -> all, r -> recent, a2 -> agree-01, - -> -, c -> city, f2 -> freeze-02, f -> freeze-02, o -> official, p3 -> possible, c2 -> contrast-01, n2 -> name, a4 -> activity, n5 -> name))),[Ljava.lang.String;@4be29ed9,Annotation([Ljava.lang.String;@548d708a,[Ljava.lang.String;@4b013c76,[Ljava.lang.String;@53fb3dab),Annotation([Ljava.lang.String;@cb0755b,[Ljava.lang.String;@33065d67,[Ledu.cmu.lti.nlp.amr.Dependency;@712625fd),Annotation([Ljava.lang.String;@7bba5817,[Ljava.lang.String;@742ff096,[Ljava.lang.String;@75437611),Annotation([Ljava.lang.String;@350aac89,[Ljava.lang.String;@1c5920df,[Ledu.cmu.lti.nlp.amr.Entity;@17f9d882))
AMR:
(a / and, op, b2 / begin-01)
(a / and, op, d / dispatch-01)
(a2 / agree-01, ARG1, f2 / freeze-02)
(a2 / agree-01, ARG6, a3 / administrate-01)
(a2 / agree-01, time, r / recent)
(a3 / administrate-01, ARG1, p2 / person)
(a4 / activity, mod, a5 / all)
(b2 / begin-01, ARG0, n4 / negotiate-01)
(b2 / begin-01, ARG1, a4 / activity)
(b2 / begin-01, time, b / before)
(c / city, name, n / name)
(c2 / contrast-01, ARG1, a4 / activity)
(c2 / contrast-01, ARG2, a3 / administrate-01)
(c3 / country, name, n3 / name)
(c4 / country, name, n5 / name)
(d / dispatch-01, ARG1, c / city)
(e / enrich-01, ARG1, r2 / relate-01)
(f / freeze-02, ARG1, c3 / country)
(f2 / freeze-02, ARG1, p / propose-01)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Geneva")
(n2 / name, op, "Bush")
(n3 / name, op, "Iran")
(n4 / negotiate-01, ARG1, - / -)
(n5 / name, op, "US")
(p / propose-01, ARG1, f / freeze-02)
(p2 / person, name, n2 / name)
(p3 / possible, domain, b2 / begin-01)
(r2 / relate-01, ARG1, a4 / activity)
(r3 / repeat-01, ARG1, s / state-01)
(r3 / repeat-01, ARG2, h / have-org-role-91)
(s / state-01, ARG1, p3 / possible)

Decoded in 3,368,327 microseconds
Sentence: 20080726 during talks in Geneva attended by US Undersecretary of State William J. Burns Iran refused to respond to Solana's offers.

mkDayMonthYear(20080726,26,07,2008)
NER Entity: (country :name (name :op "Geneva"))
NER Entity: (organization :name (name :op "US" :op "Undersecretary" :op "of" :op "State"))
NER Entity: (person :name (name :op "William" :op "J." :op "Burns"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (person :name (name :op "Solana"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Geneva"))
mkDayMonthYear(20080726,26,07,2008)
Spans:
Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Span 5-6:  attended => attend-01
Span 1-2:  during => during
Span 4-5:  Geneva => (city :name (name :op "Geneva"))
Span 14-15:  Iran => (country :name (name :op "Iran"))
Span 21-22:  offers => offer-01
Span 15-16:  refused => refuse-01
Span 17-18:  respond => respond-01
Span 2-3:  talks => talk-01
Span 7-11:  US Undersecretary of State => (organization :name (name :op "US" :op "Undersecretary" :op "of" :op "State"))
Span 11-14:  William J. Burns => (person :name (name :op "William" :op "J." :op "Burns"))

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),offers,offer-01,false), Span(17,18,List(1),respond,respond-01,false), Span(15,16,List(2),refused,refuse-01,false), Span(14,15,List(5, 4, 3),Iran,(country :name (name :op "Iran")),false), Span(11,14,List(10, 9, 8, 7, 6),William J. Burns,(person :name (name :op "William" :op "J." :op "Burns")),false), Span(7,11,List(16, 15, 14, 13, 12, 11),US Undersecretary of State,(organization :name (name :op "US" :op "Undersecretary" :op "of" :op "State")),false), Span(5,6,List(17),attended,attend-01,false), Span(4,5,List(20, 19, 18),Geneva,(city :name (name :op "Geneva")),false), Span(2,3,List(21),talks,talk-01,false), Span(1,2,List(22),during,during,false), Span(0,1,List(26, 25, 24, 23),20080726,(date-entity :day 26 :month 7 :year 2008),false)),Map(2 -> refuse-01, 5 -> "Iran", 12 -> name, 8 -> "William", 15 -> "of", 21 -> talk-01, 18 -> city, 24 -> 26, 7 -> name, 1 -> respond-01, 17 -> attend-01, 23 -> date-entity, 26 -> 2008, 4 -> name, 11 -> organization, 14 -> "Undersecretary", 20 -> "Geneva", 6 -> person, 9 -> "J.", 0 -> offer-01, 22 -> during, 16 -> "State", 19 -> name, 10 -> "Burns", 3 -> country, 25 -> 7, 13 -> "US"),Map(n -> name, 2 -> 26, t -> talk-01, n4 -> name, 7 -> 7, d -> during, r2 -> refuse-01, p -> person, n3 -> name, a -> attend-01, d2 -> date-entity, o2 -> organization, r -> respond-01, c -> country, 22 -> 2008, o -> offer-01, n2 -> name, c2 -> city))),[Ljava.lang.String;@79e4c792,Annotation([Ljava.lang.String;@196a42c3,[Ljava.lang.String;@4c60d6e9,[Ljava.lang.String;@15043a2f),Annotation([Ljava.lang.String;@4a83a74a,[Ljava.lang.String;@1349883,[Ledu.cmu.lti.nlp.amr.Dependency;@4b29d1d2),Annotation([Ljava.lang.String;@7f485fda,[Ljava.lang.String;@28261e8e,[Ljava.lang.String;@d737b89),Annotation([Ljava.lang.String;@8519cb4,[Ljava.lang.String;@35dab4eb,[Ledu.cmu.lti.nlp.amr.Entity;@2d901eb0))
AMR:
(a / attend-01, ARG0, p / person)
(a / attend-01, ARG1, t / talk-01)
(a / attend-01, ARG6, d2 / date-entity)
(c / country, name, n / name)
(c2 / city, name, n4 / name)
(d / during, op, t / talk-01)
(d2 / date-entity, day, 2 / 26)
(d2 / date-entity, month, 7 / 7)
(d2 / date-entity, year, 22 / 2008)
(n / name, op, "Iran")
(n2 / name, op, "Burns")
(n2 / name, op, "J.")
(n2 / name, op, "William")
(n3 / name, op, "State")
(n3 / name, op, "US")
(n3 / name, op, "Undersecretary")
(n3 / name, op, "of")
(n4 / name, op, "Geneva")
(o2 / organization, name, n3 / name)
(o2 / organization, op, r2 / refuse-01)
(p / person, name, n2 / name)
(r / respond-01, ARG0, c / country)
(r / respond-01, ARG1, o / offer-01)
(r2 / refuse-01, ARG1, r / respond-01)
(t / talk-01, ARG1, r2 / refuse-01)
(t / talk-01, location, c2 / city)

Decoded in 1,206,295 microseconds
Sentence: The talks constituted the highest-level diplomatic contact between the US and Iran for nearly 30 years.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 16-17:  30 => 30
Span 12-13:  and => and
Span 9-10:  between => between
Span 2-3:  constituted => constitute-01
Span 8-9:  contact => contact-01
Span 7-8:  diplomatic => diplomacy
Span 4-5:  highest => (high :degree most)
Span 13-14:  Iran => (country :name (name :op "Iran"))
Span 6-7:  level => level
Span 15-16:  nearly => near
Span 1-2:  talks => talk-01
Span 11-12:  US => (country :name (name :op "US"))
Span 17-18:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(1, 0),years,(temporal-quantity :unit year),false), Span(16,17,List(2),30,30,false), Span(15,16,List(3),nearly,near,false), Span(13,14,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(12,13,List(7),and,and,false), Span(11,12,List(10, 9, 8),US,(country :name (name :op "US")),false), Span(9,10,List(11),between,between,false), Span(8,9,List(12),contact,contact-01,false), Span(7,8,List(13),diplomatic,diplomacy,false), Span(6,7,List(14),level,level,false), Span(4,5,List(16, 15),highest,(high :degree most),false), Span(2,3,List(17),constituted,constitute-01,false), Span(1,2,List(18),talks,talk-01,false)),Map(2 -> 30, 5 -> name, 12 -> contact-01, 15 -> high, 8 -> country, 18 -> talk-01, 7 -> and, 17 -> constitute-01, 1 -> year, 4 -> country, 11 -> between, 14 -> level, 6 -> "Iran", 0 -> temporal-quantity, 9 -> name, 16 -> most, 3 -> near, 10 -> "US", 13 -> diplomacy),Map(n -> near, h -> high, t -> temporal-quantity, b -> between, c4 -> constitute-01, m -> most, d -> diplomacy, y -> year, a -> and, n3 -> name, c3 -> contact-01, t2 -> talk-01, c -> country, l -> level, 3 -> 30, n2 -> name, c2 -> country))),[Ljava.lang.String;@3ba987b8,Annotation([Ljava.lang.String;@3f191845,[Ljava.lang.String;@5f049ea1,[Ljava.lang.String;@72cc7e6f),Annotation([Ljava.lang.String;@5afa3c9,[Ljava.lang.String;@72035809,[Ledu.cmu.lti.nlp.amr.Dependency;@909217e),Annotation([Ljava.lang.String;@18271936,[Ljava.lang.String;@606e4010,[Ljava.lang.String;@8458f04),Annotation([Ljava.lang.String;@48075da3,[Ljava.lang.String;@68c9133c,[Ledu.cmu.lti.nlp.amr.Entity;@7a35b0f5))
AMR:
(a / and, op, c2 / country)
(b / between, op, c / country)
(b / between, op, c2 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / contact-01, ARG0, c2 / country)
(c3 / contact-01, mod, d / diplomacy)
(c3 / contact-01, mod, l / level)
(c4 / constitute-01, ARG0, t2 / talk-01)
(c4 / constitute-01, ARG1, c3 / contact-01)
(h / high, degree, m / most)
(l / level, mod, h / high)
(n / near, op, t / temporal-quantity)
(n2 / name, op, "Iran")
(n3 / name, op, "US")
(t / temporal-quantity, quant, 3 / 30)
(t / temporal-quantity, unit, y / year)
(t2 / talk-01, ARG1, n / near)

Decoded in 575,399 microseconds
Sentence: Solana, burns and European envoys set a deadline for Iran to respond positively before initiating new sanctions including prohibitions on selling Iran refined petroleum products vital to the country's economy.

NER Entity: (person :name (name :op "Solana"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "European"))
Spans:
Span 3-4:  and => and
Span 14-15:  before => before
Span 29-30:  country => country
Span 31-32:  economy => economy
Span 4-5:  European => (continent :name (name :op "Europe"))
Span 18-19:  including => include-91
Span 22-23:  Iran => (country :name (name :op "Iran"))
Span 10-11:  Iran => (country :name (name :op "Iran"))
Span 16-17:  new => new
Span 24-25:  petroleum => petroleum
Span 25-26:  products => product
Span 23-24:  refined => refine-01
Span 12-13:  respond => respond-01
Span 17-18:  sanctions => sanction-02
Span 21-22:  selling => sell-01
Span 26-27:  vital => vital

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),economy,economy,false), Span(29,30,List(1),country,country,false), Span(26,27,List(2),vital,vital,false), Span(25,26,List(3),products,product,false), Span(24,25,List(4),petroleum,petroleum,false), Span(23,24,List(5),refined,refine-01,false), Span(22,23,List(8, 7, 6),Iran,(country :name (name :op "Iran")),false), Span(21,22,List(9),selling,sell-01,false), Span(18,19,List(10),including,include-91,false), Span(17,18,List(11),sanctions,sanction-02,false), Span(16,17,List(12),new,new,false), Span(14,15,List(13),before,before,false), Span(12,13,List(14),respond,respond-01,false), Span(10,11,List(17, 16, 15),Iran,(country :name (name :op "Iran")),false), Span(4,5,List(20, 19, 18),European,(continent :name (name :op "Europe")),false), Span(3,4,List(21),and,and,false)),Map(2 -> vital, 5 -> refine-01, 12 -> new, 15 -> country, 8 -> "Iran", 21 -> and, 18 -> continent, 7 -> name, 17 -> "Iran", 1 -> country, 4 -> petroleum, 11 -> sanction-02, 14 -> respond-01, 20 -> "Europe", 6 -> country, 0 -> economy, 9 -> sell-01, 16 -> name, 19 -> name, 3 -> product, 10 -> include-91, 13 -> before),Map(e -> economy, n -> name, s2 -> sanction-02, b -> before, p2 -> petroleum, n4 -> name, c4 -> continent, s -> sell-01, v -> vital, r2 -> respond-01, p -> product, a -> and, n3 -> name, c3 -> country, r -> refine-01, i -> include-91, c -> country, c2 -> country, n2 -> new))),[Ljava.lang.String;@5e2c3d18,Annotation([Ljava.lang.String;@2cb4893b,[Ljava.lang.String;@cc43f62,[Ljava.lang.String;@5b218417),Annotation([Ljava.lang.String;@645aa696,[Ljava.lang.String;@6caf0677,[Ledu.cmu.lti.nlp.amr.Dependency;@413d1baf),Annotation([Ljava.lang.String;@16eb3ea3,[Ljava.lang.String;@273444fe,[Ljava.lang.String;@33bc72d1),Annotation([Ljava.lang.String;@1a75e76a,[Ljava.lang.String;@5524cca1,[Ledu.cmu.lti.nlp.amr.Entity;@5032714f))
AMR:
(c / country, mod, p2 / petroleum)
(c2 / country, name, n / name)
(c3 / country, name, n3 / name)
(c4 / continent, name, n4 / name)
(e / economy, poss, c / country)
(i / include-91, ARG1, a / and)
(i / include-91, ARG2, s2 / sanction-02)
(i / include-91, manner, s / sell-01)
(n / name, op, "Iran")
(n3 / name, op, "Iran")
(n4 / name, op, "Europe")
(p / product, mod, p2 / petroleum)
(r / refine-01, ARG1, p / product)
(r2 / respond-01, ARG0, c3 / country)
(r2 / respond-01, ARG1, c4 / continent)
(r2 / respond-01, time, b / before)
(s / sell-01, ARG0, c2 / country)
(s / sell-01, ARG1, p / product)
(s2 / sanction-02, ARG1, b / before)
(s2 / sanction-02, mod, n2 / new)
(v / vital, domain, p / product)

Decoded in 953,310 microseconds
Sentence: Iranian officials refused to commit to stopping expansion or to observe the deadline.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 4-5:  commit => commit-02
Span 7-8:  expansion => expand-01
Span 0-1:  Iranian => (country :name (name :op "Iran"))
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 8-9:  or => or
Span 2-3:  refused => refuse-01
Span 6-7:  stopping => stop-01

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),or,or,false), Span(7,8,List(1),expansion,expand-01,false), Span(6,7,List(2),stopping,stop-01,false), Span(4,5,List(3),commit,commit-02,false), Span(2,3,List(4),refused,refuse-01,false), Span(1,2,List(6, 5),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(9, 8, 7),Iranian,(country :name (name :op "Iran")),false)),Map(2 -> stop-01, 5 -> have-org-role-91, 8 -> name, 7 -> country, 1 -> expand-01, 4 -> refuse-01, 6 -> official, 9 -> "Iran", 0 -> or, 3 -> commit-02),Map(n -> name, e -> expand-01, h -> have-org-role-91, s -> stop-01, o2 -> official, r -> refuse-01, c -> commit-02, o -> or, c2 -> country))),[Ljava.lang.String;@48bb62,Annotation([Ljava.lang.String;@353352b6,[Ljava.lang.String;@4681c175,[Ljava.lang.String;@57a78e3),Annotation([Ljava.lang.String;@402c4085,[Ljava.lang.String;@6fa51cd4,[Ledu.cmu.lti.nlp.amr.Dependency;@2767e23c),Annotation([Ljava.lang.String;@710c2b53,[Ljava.lang.String;@5386659f,[Ljava.lang.String;@14028087),Annotation([Ljava.lang.String;@cecf639,[Ljava.lang.String;@1caa0244,[Ledu.cmu.lti.nlp.amr.Entity;@7ce026d3))
AMR:
(c / commit-02, ARG1, e / expand-01)
(c2 / country, name, n / name)
(e / expand-01, ARG1, s / stop-01)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o2 / official)
(n / name, op, "Iran")
(o / or, op, c / commit-02)
(r / refuse-01, ARG1, c / commit-02)
(s / stop-01, ARG1, c2 / country)

Decoded in 384,063 microseconds
Sentence: 20080726 ahmadinejad appeared to suggest that Iran might potentially halt expansion at a higher number of centrifuges that previously expected and for over 6 weeks.

mkDayMonthYear(20080726,26,07,2008)
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(20080726,26,07,2008)
Spans:
Span 0-1:  20080726 => (date-entity :day 26 :month 7 :year 2008)
Span 23-24:  6 => 6
Span 20-21:  and => and
Span 2-3:  appeared => appear-02
Span 16-17:  centrifuges => centrifuge
Span 10-11:  expansion => expand-01
Span 19-20:  expected => expect-01
Span 9-10:  halt => halt-01
Span 13-14:  higher => high
Span 6-7:  Iran => (country :name (name :op "Iran"))
Span 14-15:  number => number
Span 22-23:  over => over
Span 8-9:  potentially => potential
Span 18-19:  previously => previous
Span 4-5:  suggest => suggest-01
Span 24-25:  weeks => week

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),weeks,week,false), Span(23,24,List(1),6,6,false), Span(22,23,List(2),over,over,false), Span(20,21,List(3),and,and,false), Span(19,20,List(4),expected,expect-01,false), Span(18,19,List(5),previously,previous,false), Span(16,17,List(6),centrifuges,centrifuge,false), Span(14,15,List(7),number,number,false), Span(13,14,List(8),higher,high,false), Span(10,11,List(9),expansion,expand-01,false), Span(9,10,List(10),halt,halt-01,false), Span(8,9,List(11),potentially,potential,false), Span(6,7,List(14, 13, 12),Iran,(country :name (name :op "Iran")),false), Span(4,5,List(15),suggest,suggest-01,false), Span(2,3,List(16),appeared,appear-02,false), Span(0,1,List(20, 19, 18, 17),20080726,(date-entity :day 26 :month 7 :year 2008),false)),Map(2 -> over, 5 -> previous, 12 -> country, 15 -> suggest-01, 8 -> high, 18 -> 26, 7 -> number, 17 -> date-entity, 1 -> 6, 4 -> expect-01, 11 -> potential, 14 -> "Iran", 20 -> 2008, 6 -> centrifuge, 0 -> week, 9 -> expand-01, 16 -> appear-02, 19 -> 7, 3 -> and, 10 -> halt-01, 13 -> name),Map(e -> expect-01, w -> week, n -> number, h -> high, 2 -> 26, h2 -> halt-01, e2 -> expand-01, p2 -> potential, s -> suggest-01, 7 -> 7, d -> date-entity, p -> previous, a -> and, a2 -> appear-02, 6 -> 6, c -> centrifuge, 22 -> 2008, o -> over, n2 -> name, c2 -> country))),[Ljava.lang.String;@7ce69770,Annotation([Ljava.lang.String;@1750fbeb,[Ljava.lang.String;@5b247367,[Ljava.lang.String;@268f106e),Annotation([Ljava.lang.String;@6e9a5ed8,[Ljava.lang.String;@7e057f43,[Ledu.cmu.lti.nlp.amr.Dependency;@6c284af),Annotation([Ljava.lang.String;@5890e879,[Ljava.lang.String;@6440112d,[Ljava.lang.String;@31ea9581),Annotation([Ljava.lang.String;@231f98ef,[Ljava.lang.String;@7c137fd5,[Ledu.cmu.lti.nlp.amr.Entity;@183ec003))
AMR:
(a / and, op, e / expect-01)
(a2 / appear-02, ARG0, 6 / 6)
(a2 / appear-02, ARG1, s / suggest-01)
(c / centrifuge, quant, n / number)
(c2 / country, name, n2 / name)
(d / date-entity, day, 2 / 26)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2008)
(e / expect-01, ARG0, c / centrifuge)
(e / expect-01, ARG1, d / date-entity)
(e / expect-01, time, p / previous)
(e2 / expand-01, ARG1, n / number)
(h2 / halt-01, ARG0, c2 / country)
(h2 / halt-01, ARG1, e2 / expand-01)
(h2 / halt-01, manner, p2 / potential)
(n / number, mod, h / high)
(n2 / name, op, "Iran")
(s / suggest-01, ARG1, c2 / country)
(w / week, quant, 6 / 6)
(w / week, quant, o / over)

Decoded in 1,358,060 microseconds
Sentence: Ahmadinejad stated that the West had consented to the existing 5000-6000 centrifuges in operation provided that the number did not increase.

NER Entity: (person :name (name :op "Ahmadinejad"))
NER Entity: (country :name (name :op "West"))
mkDayMonthYear(5000-6000,00,60,5000)
mkDayMonthYear(5000-6000,00,60,5000)
NER Entity: (country :name (name :op "West"))
Spans:
Span 10-11:  5000-6000 => (date-entity :day 0 :month 60 :year 5000)
Span 11-12:  centrifuges => centrifuge
Span 6-7:  consented => consent-01
Span 9-10:  existing => exist-01
Span 20-21:  increase => increase-01
Span 17-18:  number => number
Span 13-14:  operation => operation
Span 14-15:  provided => provide-01
Span 1-2:  stated => state-01
Span 4-5:  West => (world-region :name (name :op "West"))

Langrangian relaxation converged after 71 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),increase,increase-01,false), Span(17,18,List(1),number,number,false), Span(14,15,List(2),provided,provide-01,false), Span(13,14,List(3),operation,operation,false), Span(11,12,List(4),centrifuges,centrifuge,false), Span(10,11,List(8, 7, 6, 5),5000-6000,(date-entity :day 0 :month 60 :year 5000),false), Span(9,10,List(9),existing,exist-01,false), Span(6,7,List(10),consented,consent-01,false), Span(4,5,List(13, 12, 11),West,(world-region :name (name :op "West")),false), Span(1,2,List(14),stated,state-01,false)),Map(2 -> provide-01, 5 -> date-entity, 12 -> name, 8 -> 5000, 7 -> 60, 1 -> number, 4 -> centrifuge, 11 -> world-region, 14 -> state-01, 6 -> 0, 0 -> increase-01, 9 -> exist-01, 3 -> operation, 10 -> consent-01, 13 -> "West"),Map(e -> exist-01, n -> number, w -> world-region, 5 -> 5000, s -> state-01, d -> date-entity, p -> provide-01, i -> increase-01, c -> centrifuge, 6 -> 60, 0 -> 0, o -> operation, c2 -> consent-01, n2 -> name))),[Ljava.lang.String;@7d9d0818,Annotation([Ljava.lang.String;@221a3fa4,[Ljava.lang.String;@451001e5,[Ljava.lang.String;@2b40ff9c),Annotation([Ljava.lang.String;@3e08ff24,[Ljava.lang.String;@4d1c005e,[Ledu.cmu.lti.nlp.amr.Dependency;@8462f31),Annotation([Ljava.lang.String;@24569dba,[Ljava.lang.String;@5ddeb7cb,[Ljava.lang.String;@70ed52de),Annotation([Ljava.lang.String;@496bc455,[Ljava.lang.String;@59402b8f,[Ledu.cmu.lti.nlp.amr.Entity;@7188af83))
AMR:
(c / centrifuge, time, d / date-entity)
(c2 / consent-01, ARG0, w / world-region)
(c2 / consent-01, ARG1, c / centrifuge)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 6 / 60)
(d / date-entity, year, 5 / 5000)
(e / exist-01, ARG1, c / centrifuge)
(i / increase-01, ARG1, n / number)
(n2 / name, op, "West")
(p / provide-01, ARG0, n / number)
(p / provide-01, ARG1, o / operation)
(p / provide-01, ARG2, c / centrifuge)
(s / state-01, ARG1, c2 / consent-01)
(w / world-region, name, n2 / name)

Decoded in 1,106,901 microseconds
Sentence: 5000 centrifuges can produce sufficient nuclear material for a power plant or an atomic bomb if the material is highly enriched.

Spans:
Span 0-1:  5000 => 5000
Span 13-14:  atomic => atom
Span 14-15:  bomb => bomb
Span 2-3:  can => possible
Span 1-2:  centrifuges => centrifuge
Span 20-21:  enriched => enrich-01
Span 19-20:  highly => high
Span 17-18:  material => material
Span 6-7:  material => material
Span 5-6:  nuclear => nucleus
Span 11-12:  or => or
Span 10-11:  plant => plant
Span 9-10:  power => power
Span 3-4:  produce => produce-01
Span 4-5:  sufficient => suffice-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),enriched,enrich-01,false), Span(19,20,List(1),highly,high,false), Span(17,18,List(2),material,material,false), Span(14,15,List(3),bomb,bomb,false), Span(13,14,List(4),atomic,atom,false), Span(11,12,List(5),or,or,false), Span(10,11,List(6),plant,plant,false), Span(9,10,List(7),power,power,false), Span(6,7,List(8),material,material,false), Span(5,6,List(9),nuclear,nucleus,false), Span(4,5,List(10),sufficient,suffice-01,false), Span(3,4,List(11),produce,produce-01,false), Span(2,3,List(12),can,possible,false), Span(1,2,List(13),centrifuges,centrifuge,false), Span(0,1,List(14),5000,5000,false)),Map(2 -> material, 5 -> or, 12 -> possible, 8 -> material, 7 -> power, 1 -> high, 4 -> atom, 11 -> produce-01, 14 -> 5000, 6 -> plant, 0 -> enrich-01, 9 -> nucleus, 3 -> bomb, 10 -> suffice-01, 13 -> centrifuge),Map(e -> enrich-01, n -> nucleus, h -> high, 5 -> 5000, b -> bomb, m2 -> material, p2 -> power, s -> suffice-01, m -> material, p -> plant, a -> atom, p4 -> possible, c -> centrifuge, o -> or, p3 -> produce-01))),[Ljava.lang.String;@6be968ce,Annotation([Ljava.lang.String;@7c37508a,[Ljava.lang.String;@247310d0,[Ljava.lang.String;@1033576a),Annotation([Ljava.lang.String;@303cf2ba,[Ljava.lang.String;@76494737,[Ledu.cmu.lti.nlp.amr.Dependency;@4a003cbe),Annotation([Ljava.lang.String;@4082ba93,[Ljava.lang.String;@17fc391b,[Ljava.lang.String;@2b30a42c),Annotation([Ljava.lang.String;@609e8838,[Ljava.lang.String;@359df09a,[Ledu.cmu.lti.nlp.amr.Entity;@43df23d3))
AMR:
(b / bomb, mod, a / atom)
(c / centrifuge, mod, 5 / 5000)
(e / enrich-01, ARG1, m / material)
(e / enrich-01, ARG2, p3 / produce-01)
(e / enrich-01, extent, h / high)
(m2 / material, mod, n / nucleus)
(o / or, op, b / bomb)
(o / or, op, p / plant)
(p / plant, mod, p2 / power)
(p3 / produce-01, ARG0, c / centrifuge)
(p3 / produce-01, ARG1, m2 / material)
(p3 / produce-01, location, p / plant)
(p4 / possible, domain, p3 / produce-01)
(s / suffice-01, ARG1, m2 / material)

Decoded in 713,247 microseconds
Sentence: 6000 centrifuges running continuously can produce sufficient weapons-grade uranium for 1 bomb in 6 months.

Spans:
Span 12-13:  1 => 1
Span 15-16:  6 => 6
Span 0-1:  6000 => 6000
Span 13-14:  bomb => bomb
Span 4-5:  can => possible
Span 1-2:  centrifuges => centrifuge
Span 3-4:  continuously => continue-01
Span 9-10:  grade => grade
Span 16-17:  months => (temporal-quantity :unit month)
Span 5-6:  produce => produce-01
Span 2-3:  running => run-01
Span 6-7:  sufficient => suffice-01
Span 10-11:  uranium => uranium
Span 7-8:  weapons => weapon

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),months,(temporal-quantity :unit month),false), Span(15,16,List(2),6,6,false), Span(13,14,List(3),bomb,bomb,false), Span(12,13,List(4),1,1,false), Span(10,11,List(5),uranium,uranium,false), Span(9,10,List(6),grade,grade,false), Span(7,8,List(7),weapons,weapon,false), Span(6,7,List(8),sufficient,suffice-01,false), Span(5,6,List(9),produce,produce-01,false), Span(4,5,List(10),can,possible,false), Span(3,4,List(11),continuously,continue-01,false), Span(2,3,List(12),running,run-01,false), Span(1,2,List(13),centrifuges,centrifuge,false), Span(0,1,List(14),6000,6000,false)),Map(2 -> 6, 5 -> uranium, 12 -> run-01, 8 -> suffice-01, 7 -> weapon, 1 -> month, 4 -> 1, 11 -> continue-01, 14 -> 6000, 6 -> grade, 0 -> temporal-quantity, 9 -> produce-01, 3 -> bomb, 10 -> possible, 13 -> centrifuge),Map(w -> weapon, t -> temporal-quantity, b -> bomb, p2 -> possible, s -> suffice-01, 62 -> 6000, m -> month, 1 -> 1, g -> grade, p -> produce-01, r -> run-01, 6 -> 6, c -> continue-01, u -> uranium, c2 -> centrifuge))),[Ljava.lang.String;@6d60fe40,Annotation([Ljava.lang.String;@792b749c,[Ljava.lang.String;@23e84203,[Ljava.lang.String;@19932c16),Annotation([Ljava.lang.String;@73eb439a,[Ljava.lang.String;@514646ef,[Ledu.cmu.lti.nlp.amr.Dependency;@305ffe9e),Annotation([Ljava.lang.String;@302c971f,[Ljava.lang.String;@1972e513,[Ljava.lang.String;@7ae0a9ec),Annotation([Ljava.lang.String;@35841320,[Ljava.lang.String;@61c4eee0,[Ledu.cmu.lti.nlp.amr.Entity;@6f10d5b6))
AMR:
(b / bomb, quant, 1 / 1)
(c / continue-01, ARG1, r / run-01)
(g / grade, mod, w / weapon)
(p / produce-01, ARG0, c2 / centrifuge)
(p / produce-01, ARG1, u / uranium)
(p / produce-01, ARG2, b / bomb)
(p / produce-01, location, t / temporal-quantity)
(p2 / possible, domain, p / produce-01)
(r / run-01, ARG1, c2 / centrifuge)
(r / run-01, ARG6, 62 / 6000)
(s / suffice-01, ARG1, u / uranium)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, m / month)
(u / uranium, mod, g / grade)

Decoded in 418,716 microseconds
Sentence: 20080500 the International Atomic Energy Agency stated that Iran possessed 3500 centrifuges in operations.

mkDayMonthYear(20080500,00,05,2008)
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(20080500,00,05,2008)
Spans:
Span 0-1:  20080500 => (date-entity :day 0 :month 5 :year 2008)
Span 10-11:  3500 => 3500
Span 11-12:  centrifuges => centrifuge
Span 2-6:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 8-9:  Iran => (country :name (name :op "Iran"))
Span 13-14:  operations => operation
Span 9-10:  possessed => possess-01
Span 6-7:  stated => state-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),operations,operation,false), Span(11,12,List(1),centrifuges,centrifuge,false), Span(10,11,List(2),3500,3500,false), Span(9,10,List(3),possessed,possess-01,false), Span(8,9,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(6,7,List(7),stated,state-01,false), Span(2,6,List(13, 12, 11, 10, 9, 8),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(0,1,List(17, 16, 15, 14),20080500,(date-entity :day 0 :month 5 :year 2008),false)),Map(2 -> 3500, 5 -> name, 12 -> "Energy", 15 -> 0, 8 -> organization, 7 -> state-01, 17 -> 2008, 1 -> centrifuge, 4 -> country, 11 -> "Atomic", 14 -> date-entity, 6 -> "Iran", 0 -> operation, 9 -> name, 16 -> 5, 3 -> possess-01, 10 -> "International", 13 -> "Agency"),Map(n -> name, 2 -> 2008, 5 -> 5, s -> state-01, d -> date-entity, p -> possess-01, o2 -> organization, c -> centrifuge, 0 -> 0, o -> operation, 3 -> 3500, c2 -> country, n2 -> name))),[Ljava.lang.String;@1040be71,Annotation([Ljava.lang.String;@548a24a,[Ljava.lang.String;@433defed,[Ljava.lang.String;@2a693f59),Annotation([Ljava.lang.String;@3f4faf53,[Ljava.lang.String;@7fd50002,[Ledu.cmu.lti.nlp.amr.Dependency;@533bda92),Annotation([Ljava.lang.String;@304bb45b,[Ljava.lang.String;@723ca036,[Ljava.lang.String;@25be7b63),Annotation([Ljava.lang.String;@28dcca0c,[Ljava.lang.String;@45d84a20,[Ledu.cmu.lti.nlp.amr.Entity;@52f27fbd))
AMR:
(c / centrifuge, location, o / operation)
(c / centrifuge, quant, 3 / 3500)
(c2 / country, name, n / name)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 5 / 5)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Iran")
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(o2 / organization, name, n2 / name)
(p / possess-01, ARG0, c2 / country)
(p / possess-01, ARG1, c / centrifuge)
(s / state-01, ARG0, o2 / organization)
(s / state-01, ARG1, p / possess-01)
(s / state-01, time, d / date-entity)

Decoded in 320,398 microseconds
Sentence: 2008-11-14

mkDayMonthYear(2008-11-14,14,11,2008)
mkDayMonthYear(2008-11-14,14,11,2008)
Spans:
Span 0-1:  2008-11-14 => (date-entity :day 14 :month 11 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-11-14,(date-entity :day 14 :month 11 :year 2008),false)),Map(2 -> 11, 1 -> 14, 0 -> date-entity, 3 -> 2008),Map(2 -> 2008, 12 -> 11, d -> date-entity, 1 -> 14))),[Ljava.lang.String;@4c163e3,Annotation([Ljava.lang.String;@4a8355dd,[Ljava.lang.String;@4d0d9fe7,[Ljava.lang.String;@c430e6c),Annotation([Ljava.lang.String;@312aa7c,[Ljava.lang.String;@536f2a7e,[Ledu.cmu.lti.nlp.amr.Dependency;@72bc6553),Annotation([Ljava.lang.String;@66982506,[Ljava.lang.String;@70cf32e3,[Ljava.lang.String;@5a59ca5e),Annotation([Ljava.lang.String;@4bdeaabb,[Ljava.lang.String;@6c4906d3,[Ledu.cmu.lti.nlp.amr.Entity;@65987993))
AMR:
(d / date-entity, day, 1 / 14)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 2 / 2008)

Decoded in 7,571 microseconds
Sentence: Iran (IR); Russian Federation (RU); China (CN); France (FR); United States (US)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "IR"))
NER Entity: (country :name (name :op "Russian" :op "Federation"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 20-21:  ; => and
Span 15-16:  ; => and
Span 10-11:  ; => and
Span 4-5:  ; => and
Span 11-12:  China => (country :name (name :op "China"))
Span 16-17:  France => (country :name (name :op "France"))
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 5-7:  Russian Federation => (country :name (name :op "Russian" :op "Federation"))
Span 21-23:  United States => (country :name (name :op "United" :op "States"))
Span 24-25:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),US,(country :name (name :op "US")),false), Span(21,23,List(6, 5, 4, 3),United States,(country :name (name :op "United" :op "States")),false), Span(20,21,List(7),;,and,false), Span(16,17,List(10, 9, 8),France,(country :name (name :op "France")),false), Span(15,16,List(11),;,and,false), Span(11,12,List(14, 13, 12),China,(country :name (name :op "China")),false), Span(10,11,List(15),;,and,false), Span(5,7,List(19, 18, 17, 16),Russian Federation,(country :name (name :op "Russian" :op "Federation")),false), Span(4,5,List(20),;,and,false), Span(0,1,List(23, 22, 21),Iran,(country :name (name :op "Iran")),false)),Map(2 -> "US", 5 -> "United", 12 -> country, 15 -> and, 8 -> country, 21 -> country, 18 -> "Russian", 7 -> and, 17 -> name, 1 -> name, 23 -> "Iran", 4 -> name, 11 -> and, 14 -> "China", 20 -> and, 6 -> "States", 22 -> name, 0 -> country, 9 -> name, 16 -> country, 19 -> "Federation", 3 -> country, 10 -> "France", 13 -> name),Map(n -> name, c4 -> country, n4 -> name, a3 -> and, a -> and, c3 -> country, n3 -> name, n6 -> name, c6 -> country, a2 -> and, c -> country, c2 -> country, n2 -> name, a4 -> and, c5 -> country, n5 -> name))),[Ljava.lang.String;@71075444,Annotation([Ljava.lang.String;@4f32a3ad,[Ljava.lang.String;@6b695b06,[Ljava.lang.String;@4d1bf319),Annotation([Ljava.lang.String;@6f53b8a,[Ljava.lang.String;@5c80cf32,[Ledu.cmu.lti.nlp.amr.Dependency;@7d900ecf),Annotation([Ljava.lang.String;@6f01b95f,[Ljava.lang.String;@4007f65e,[Ljava.lang.String;@1a245833),Annotation([Ljava.lang.String;@673fdbce,[Ljava.lang.String;@5965d37,[Ledu.cmu.lti.nlp.amr.Entity;@7a5ceedd))
AMR:
(a / and, op, c2 / country)
(a2 / and, op, c3 / country)
(a3 / and, op, c4 / country)
(a3 / and, op, c5 / country)
(a4 / and, op, a / and)
(a4 / and, op, a2 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, c / country)
(a4 / and, op, c6 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(n / name, op, "US")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "France")
(n4 / name, op, "China")
(n5 / name, op, "Federation")
(n5 / name, op, "Russian")
(n6 / name, op, "Iran")

Decoded in 146,969 microseconds
Sentence: International; weapons; proliferation; Government; politics; energy

Spans:
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 10-11:  energy => energy
Span 6-7:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 8-9:  politics => politics
Span 4-5:  proliferation => proliferate-01
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),energy,energy,false), Span(9,10,List(1),;,and,false), Span(8,9,List(2),politics,politics,false), Span(7,8,List(3),;,and,false), Span(6,7,List(5, 4),Government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(6),;,and,false), Span(4,5,List(7),proliferation,proliferate-01,false), Span(3,4,List(8),;,and,false), Span(2,3,List(9),weapons,weapon,false), Span(1,2,List(10),;,and,false), Span(0,1,List(11),International,international,false)),Map(2 -> politics, 5 -> govern-01, 8 -> and, 7 -> proliferate-01, 1 -> and, 11 -> international, 4 -> government-organization, 6 -> and, 9 -> weapon, 0 -> energy, 10 -> and, 3 -> and),Map(w -> weapon, e -> energy, p2 -> proliferate-01, a3 -> and, g2 -> govern-01, g -> government-organization, p -> politics, a -> and, a5 -> and, i -> international, a2 -> and, a4 -> and))),[Ljava.lang.String;@4201c465,Annotation([Ljava.lang.String;@5b799640,[Ljava.lang.String;@6cb107fd,[Ljava.lang.String;@710636b0),Annotation([Ljava.lang.String;@3de8f619,[Ljava.lang.String;@2ab4bc72,[Ledu.cmu.lti.nlp.amr.Dependency;@4e5ed836),Annotation([Ljava.lang.String;@eadd4fb,[Ljava.lang.String;@740fb309,[Ljava.lang.String;@7bd7d6d6),Annotation([Ljava.lang.String;@43f02ef2,[Ljava.lang.String;@239a307b,[Ledu.cmu.lti.nlp.amr.Entity;@2a8448fa))
AMR:
(a / and, op, a2 / and)
(a2 / and, op, p / politics)
(a4 / and, op, a3 / and)
(a4 / and, op, p / politics)
(a5 / and, op, a4 / and)
(a5 / and, op, e / energy)
(a5 / and, op, g / government-organization)
(a5 / and, op, i / international)
(a5 / and, op, p2 / proliferate-01)
(a5 / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 63,985 microseconds
Sentence: A diplomatic meeting in Paris concludes with no agreement on further steps to pressure Iran to halt uranium enrichment at Iran's facility in Natanz.

NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Paris"))
Spans:
Span 8-9:  agreement => agree-01
Span 1-2:  diplomatic => diplomacy
Span 18-19:  enrichment => enrich-01
Span 22-23:  facility => facility
Span 10-11:  further => further
Span 16-17:  halt => halt-01
Span 20-21:  Iran => (country :name (name :op "Iran"))
Span 14-15:  Iran => (country :name (name :op "Iran"))
Span 2-3:  meeting => meet-03
Span 24-25:  Natanz => (city :name (name :op "Natanz"))
Span 7-8:  no => -
Span 4-5:  Paris => (city :name (name :op "Paris"))
Span 13-14:  pressure => pressure-01
Span 11-12:  steps => step
Span 17-18:  uranium => uranium

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),Natanz,(city :name (name :op "Natanz")),false), Span(22,23,List(3),facility,facility,false), Span(20,21,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(18,19,List(7),enrichment,enrich-01,false), Span(17,18,List(8),uranium,uranium,false), Span(16,17,List(9),halt,halt-01,false), Span(14,15,List(12, 11, 10),Iran,(country :name (name :op "Iran")),false), Span(13,14,List(13),pressure,pressure-01,false), Span(11,12,List(14),steps,step,false), Span(10,11,List(15),further,further,false), Span(8,9,List(16),agreement,agree-01,false), Span(7,8,List(17),no,-,false), Span(4,5,List(20, 19, 18),Paris,(city :name (name :op "Paris")),false), Span(2,3,List(21),meeting,meet-03,false), Span(1,2,List(22),diplomatic,diplomacy,false)),Map(2 -> "Natanz", 5 -> name, 12 -> "Iran", 15 -> further, 8 -> uranium, 21 -> meet-03, 18 -> city, 7 -> enrich-01, 17 -> -, 1 -> name, 4 -> country, 11 -> name, 14 -> step, 20 -> "Paris", 6 -> "Iran", 22 -> diplomacy, 0 -> city, 9 -> halt-01, 16 -> agree-01, 19 -> name, 3 -> facility, 10 -> country, 13 -> pressure-01),Map(e -> enrich-01, n -> name, h -> halt-01, n4 -> name, c4 -> city, s -> step, d -> diplomacy, m -> meet-03, p -> pressure-01, a -> agree-01, c3 -> country, n3 -> name, - -> -, c -> city, u -> uranium, f2 -> further, f -> facility, c2 -> country, n2 -> name))),[Ljava.lang.String;@6f204a1a,Annotation([Ljava.lang.String;@2de56eb2,[Ljava.lang.String;@5f8e8a9d,[Ljava.lang.String;@5745ca0e),Annotation([Ljava.lang.String;@3ad83a66,[Ljava.lang.String;@3cce5371,[Ledu.cmu.lti.nlp.amr.Dependency;@17bffc17),Annotation([Ljava.lang.String;@6e535154,[Ljava.lang.String;@15a34df2,[Ljava.lang.String;@5b38c1ec),Annotation([Ljava.lang.String;@338fc1d8,[Ljava.lang.String;@4722ef0c,[Ledu.cmu.lti.nlp.amr.Entity;@48e1f6c7))
AMR:
(a / agree-01, ARG1, s / step)
(a / agree-01, ARG6, - / -)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / city, name, n4 / name)
(e / enrich-01, ARG1, u / uranium)
(e / enrich-01, ARG2, f / facility)
(f / facility, location, c / city)
(f / facility, poss, c2 / country)
(h / halt-01, ARG0, c3 / country)
(h / halt-01, ARG1, e / enrich-01)
(m / meet-03, ARG0, d / diplomacy)
(m / meet-03, ARG1, p / pressure-01)
(m / meet-03, location, c4 / city)
(n / name, op, "Natanz")
(n2 / name, op, "Iran")
(n3 / name, op, "Iran")
(n4 / name, op, "Paris")
(p / pressure-01, ARG0, s / step)
(p / pressure-01, ARG1, c3 / country)
(s / step, mod, f2 / further)

Decoded in 1,789,975 microseconds
Sentence: On 081114 diplomats stated to the media that American, European, Russian and Chinese officials at a meeting on 081113 in Paris did not reach agreement on further actions to persuade Iran to halt uranium enrichment at Iran's facility in Natanz.

mkDayMonthYear(081114,14,11,2008)
mkDayMonthYear(081114,14,11,08)
NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Chinese"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Natanz"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Paris"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (thing :name (name :op "American"))
mkDayMonthYear(081114,14,11,2008)
mkDayMonthYear(081114,14,11,08)
Spans:
Span 20-21:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 1-2:  081114 => (date-entity :day 14 :month 11 :year 08)
Span 29-30:  actions => action
Span 26-27:  agreement => agree-01
Span 8-9:  American => (country :name (name :op "America"))
Span 13-14:  and => and
Span 14-15:  Chinese => (country :name (name :op "China"))
Span 2-3:  diplomats => (have-org-role-91 :ARG2 diplomat)
Span 36-37:  enrichment => enrich-01
Span 10-11:  European => (continent :name (name :op "Europe"))
Span 40-41:  facility => facility
Span 28-29:  further => further
Span 34-35:  halt => halt-01
Span 38-39:  Iran => (country :name (name :op "Iran"))
Span 32-33:  Iran => (country :name (name :op "Iran"))
Span 6-7:  media => media
Span 18-19:  meeting => meet-03
Span 42-43:  Natanz => (city :name (name :op "Natanz"))
Span 15-16:  officials => (have-org-role-91 :ARG2 official)
Span 22-23:  Paris => (city :name (name :op "Paris"))
Span 25-26:  reach => reach-01
Span 12-13:  Russian => (country :name (name :op "Russia"))
Span 3-4:  stated => state-01
Span 35-36:  uranium => uranium

Langrangian relaxation converged after 62 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(2, 1, 0),Natanz,(city :name (name :op "Natanz")),false), Span(40,41,List(3),facility,facility,false), Span(38,39,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(36,37,List(7),enrichment,enrich-01,false), Span(35,36,List(8),uranium,uranium,false), Span(34,35,List(9),halt,halt-01,false), Span(32,33,List(12, 11, 10),Iran,(country :name (name :op "Iran")),false), Span(29,30,List(13),actions,action,false), Span(28,29,List(14),further,further,false), Span(26,27,List(15),agreement,agree-01,false), Span(25,26,List(16),reach,reach-01,false), Span(22,23,List(19, 18, 17),Paris,(city :name (name :op "Paris")),false), Span(20,21,List(23, 22, 21, 20),081113,(date-entity :day 13 :month 11 :year 08),false), Span(18,19,List(24),meeting,meet-03,false), Span(15,16,List(26, 25),officials,(have-org-role-91 :ARG2 official),false), Span(14,15,List(29, 28, 27),Chinese,(country :name (name :op "China")),false), Span(13,14,List(30),and,and,false), Span(12,13,List(33, 32, 31),Russian,(country :name (name :op "Russia")),false), Span(10,11,List(36, 35, 34),European,(continent :name (name :op "Europe")),false), Span(8,9,List(39, 38, 37),American,(country :name (name :op "America")),false), Span(6,7,List(40),media,media,false), Span(3,4,List(41),stated,state-01,false), Span(2,3,List(43, 42),diplomats,(have-org-role-91 :ARG2 diplomat),false), Span(1,2,List(47, 46, 45, 44),081114,(date-entity :day 14 :month 11 :year 08),false)),Map(45 -> 14, 39 -> "America", 30 -> and, 2 -> "Natanz", 5 -> name, 33 -> "Russia", 27 -> country, 12 -> "Iran", 8 -> uranium, 15 -> agree-01, 42 -> have-org-role-91, 36 -> "Europe", 21 -> 13, 18 -> name, 24 -> meet-03, 41 -> state-01, 35 -> name, 7 -> enrich-01, 1 -> name, 17 -> city, 44 -> date-entity, 23 -> 08, 38 -> name, 47 -> 08, 26 -> official, 4 -> country, 11 -> name, 32 -> name, 14 -> further, 29 -> "China", 20 -> date-entity, 46 -> 11, 34 -> continent, 28 -> name, 6 -> "Iran", 40 -> media, 43 -> diplomat, 9 -> halt-01, 0 -> city, 22 -> 11, 16 -> reach-01, 37 -> country, 19 -> "Paris", 10 -> country, 3 -> facility, 31 -> country, 25 -> have-org-role-91, 13 -> action),Map(e -> enrich-01, n -> name, c8 -> country, h -> halt-01, h2 -> have-org-role-91, 12 -> 11, m2 -> media, d3 -> date-entity, n7 -> name, c7 -> continent, a3 -> and, c4 -> city, n4 -> name, s -> state-01, d -> date-entity, m -> meet-03, 1 -> 13, a -> action, n3 -> name, c3 -> country, 14 -> 11, d2 -> diplomat, n6 -> name, c6 -> country, 02 -> 08, a2 -> agree-01, r -> reach-01, h3 -> have-org-role-91, c -> city, f2 -> further, u -> uranium, n8 -> name, 0 -> 08, f -> facility, o -> official, n2 -> name, c2 -> country, 13 -> 14, c5 -> country, n5 -> name))),[Ljava.lang.String;@55cb6996,Annotation([Ljava.lang.String;@1807e3f6,[Ljava.lang.String;@480d3575,[Ljava.lang.String;@f1da57d),Annotation([Ljava.lang.String;@194fad1,[Ljava.lang.String;@26abb146,[Ledu.cmu.lti.nlp.amr.Dependency;@72c8e7b),Annotation([Ljava.lang.String;@65f8f5ae,[Ljava.lang.String;@431cd9b2,[Ljava.lang.String;@38467116),Annotation([Ljava.lang.String;@5b7a7f33,[Ljava.lang.String;@790da477,[Ledu.cmu.lti.nlp.amr.Entity;@5c7933ad))
AMR:
(a / action, mod, f2 / further)
(a2 / agree-01, ARG1, a / action)
(a2 / agree-01, ARG2, h3 / have-org-role-91)
(a3 / and, op, m / meet-03)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / city, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(c7 / continent, name, n7 / name)
(c8 / country, name, n8 / name)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 0 / 08)
(d3 / date-entity, day, 13 / 14)
(d3 / date-entity, month, 14 / 11)
(d3 / date-entity, year, 02 / 08)
(e / enrich-01, ARG0, c8 / country)
(e / enrich-01, ARG1, u / uranium)
(e / enrich-01, ARG2, f / facility)
(f / facility, location, c / city)
(f / facility, poss, c2 / country)
(h / halt-01, ARG0, c3 / country)
(h / halt-01, ARG1, e / enrich-01)
(h2 / have-org-role-91, ARG1, c5 / country)
(h2 / have-org-role-91, ARG2, o / official)
(h3 / have-org-role-91, ARG1, c6 / country)
(h3 / have-org-role-91, ARG2, d2 / diplomat)
(m / meet-03, ARG0, c7 / continent)
(m / meet-03, ARG1, c4 / city)
(m / meet-03, time, d / date-entity)
(n / name, op, "Natanz")
(n2 / name, op, "Iran")
(n3 / name, op, "Iran")
(n4 / name, op, "Paris")
(n5 / name, op, "China")
(n6 / name, op, "Russia")
(n7 / name, op, "Europe")
(n8 / name, op, "America")
(r / reach-01, ARG0, a3 / and)
(r / reach-01, ARG1, a2 / agree-01)
(r / reach-01, ARG2, h / halt-01)
(s / state-01, ARG1, a3 / and)
(s / state-01, ARG2, m2 / media)
(s / state-01, ARG3, h2 / have-org-role-91)
(s / state-01, time, d3 / date-entity)

Decoded in 6,410,240 microseconds
Sentence: Uranium enrichment is a highly technical process that can produce fuel for a nuclear power plant or fissile material for atomic weapons.

Spans:
Span 20-21:  atomic => atom
Span 8-9:  can => possible
Span 1-2:  enrichment => enrich-01
Span 17-18:  fissile => fissile
Span 10-11:  fuel => fuel
Span 4-5:  highly => high
Span 18-19:  material => material
Span 13-14:  nuclear => nucleus
Span 16-17:  or => or
Span 15-16:  plant => plant
Span 14-15:  power => power
Span 6-7:  process => process
Span 9-10:  produce => produce-01
Span 5-6:  technical => technique
Span 21-22:  weapons => weapon

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),weapons,weapon,false), Span(20,21,List(1),atomic,atom,false), Span(18,19,List(2),material,material,false), Span(17,18,List(3),fissile,fissile,false), Span(16,17,List(4),or,or,false), Span(15,16,List(5),plant,plant,false), Span(14,15,List(6),power,power,false), Span(13,14,List(7),nuclear,nucleus,false), Span(10,11,List(8),fuel,fuel,false), Span(9,10,List(9),produce,produce-01,false), Span(8,9,List(10),can,possible,false), Span(6,7,List(11),process,process,false), Span(5,6,List(12),technical,technique,false), Span(4,5,List(13),highly,high,false), Span(1,2,List(14),enrichment,enrich-01,false)),Map(2 -> material, 5 -> plant, 12 -> technique, 8 -> fuel, 7 -> nucleus, 1 -> atom, 4 -> or, 11 -> process, 14 -> enrich-01, 6 -> power, 0 -> weapon, 9 -> produce-01, 3 -> fissile, 10 -> possible, 13 -> high),Map(e -> enrich-01, w -> weapon, n -> nucleus, h -> high, p5 -> process, t -> technique, p2 -> power, m -> material, p -> plant, a -> atom, p4 -> possible, f2 -> fuel, f -> fissile, o -> or, p3 -> produce-01))),[Ljava.lang.String;@57bc27f5,Annotation([Ljava.lang.String;@5fb759d6,[Ljava.lang.String;@4b8d604b,[Ljava.lang.String;@5e7cd6cc),Annotation([Ljava.lang.String;@68c9d179,[Ljava.lang.String;@d554c5f,[Ledu.cmu.lti.nlp.amr.Dependency;@2dfaea86),Annotation([Ljava.lang.String;@15888343,[Ljava.lang.String;@33ecda92,[Ljava.lang.String;@14fc5f04),Annotation([Ljava.lang.String;@6e2829c7,[Ljava.lang.String;@3feb2dda,[Ledu.cmu.lti.nlp.amr.Entity;@6a8658ff))
AMR:
(e / enrich-01, ARG1, p5 / process)
(e / enrich-01, mod, t / technique)
(m / material, mod, f / fissile)
(m / material, poss, w / weapon)
(o / or, op, m / material)
(o / or, op, p / plant)
(p / plant, mod, p2 / power)
(p2 / power, mod, n / nucleus)
(p3 / produce-01, ARG0, p5 / process)
(p3 / produce-01, ARG1, f2 / fuel)
(p3 / produce-01, ARG2, p / plant)
(p4 / possible, domain, p3 / produce-01)
(t / technique, degree, h / high)
(w / weapon, mod, a / atom)

Decoded in 420,504 microseconds
Sentence: The 081113 meeting ended without any new measures to announce.

mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
Spans:
Span 1-2:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 9-10:  announce => announce-01
Span 5-6:  any => any
Span 3-4:  ended => end-01
Span 7-8:  measures => measure
Span 2-3:  meeting => meet-03
Span 6-7:  new => new

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),announce,announce-01,false), Span(7,8,List(1),measures,measure,false), Span(6,7,List(2),new,new,false), Span(5,6,List(3),any,any,false), Span(3,4,List(4),ended,end-01,false), Span(2,3,List(5),meeting,meet-03,false), Span(1,2,List(9, 8, 7, 6),081113,(date-entity :day 13 :month 11 :year 08),false)),Map(2 -> new, 5 -> meet-03, 8 -> 11, 7 -> 13, 1 -> measure, 4 -> end-01, 6 -> date-entity, 9 -> 08, 0 -> announce-01, 3 -> any),Map(e -> end-01, n -> new, 12 -> 11, m2 -> meet-03, d -> date-entity, m -> measure, 1 -> 13, a -> announce-01, a2 -> any, 0 -> 08))),[Ljava.lang.String;@1c742ed4,Annotation([Ljava.lang.String;@333d4a8c,[Ljava.lang.String;@55de24cc,[Ljava.lang.String;@dc7df28),Annotation([Ljava.lang.String;@30f842ca,[Ljava.lang.String;@69c81773,[Ledu.cmu.lti.nlp.amr.Dependency;@4d14b6c2),Annotation([Ljava.lang.String;@7e990ed7,[Ljava.lang.String;@c05fddc,[Ljava.lang.String;@25df00a0),Annotation([Ljava.lang.String;@4d15107f,[Ljava.lang.String;@7b4c50bc,[Ledu.cmu.lti.nlp.amr.Entity;@5884a914))
AMR:
(a / announce-01, ARG0, m / measure)
(a / announce-01, ARG1, a2 / any)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 0 / 08)
(e / end-01, ARG1, m2 / meet-03)
(e / end-01, ARG2, a / announce-01)
(m / measure, mod, n / new)
(m2 / meet-03, time, d / date-entity)

Decoded in 123,120 microseconds
Sentence: After the 081113 meeting the French foreign ministry released a statement declaring the international community had reaffirmed the importance of the dual-track approach of engaging diplomatically with Iran and working towards sanctions.

mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (thing :name (name :op "French"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "French"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
Spans:
Span 2-3:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 0-1:  After => after
Span 30-31:  and => and
Span 24-25:  approach => approach-02
Span 14-15:  community => community
Span 27-28:  diplomatically => diplomatic
Span 21-22:  dual => dual
Span 6-8:  foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Span 5-6:  French => (country :name (name :op "France"))
Span 18-19:  importance => importance
Span 13-14:  international => international
Span 29-30:  Iran => (country :name (name :op "Iran"))
Span 3-4:  meeting => meet-03
Span 8-9:  released => release-01
Span 33-34:  sanctions => sanction-02
Span 10-11:  statement => state-01
Span 23-24:  track => track-01
Span 31-32:  working => work-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),sanctions,sanction-02,false), Span(31,32,List(1),working,work-01,false), Span(30,31,List(2),and,and,false), Span(29,30,List(5, 4, 3),Iran,(country :name (name :op "Iran")),false), Span(27,28,List(6),diplomatically,diplomatic,false), Span(24,25,List(7),approach,approach-02,false), Span(23,24,List(8),track,track-01,false), Span(21,22,List(9),dual,dual,false), Span(18,19,List(10),importance,importance,false), Span(14,15,List(11),community,community,false), Span(13,14,List(12),international,international,false), Span(10,11,List(13),statement,state-01,false), Span(8,9,List(14),released,release-01,false), Span(6,8,List(18, 17, 16, 15),foreign ministry,(government-organization :name (name :op "Ministry" :op "Foreign")),false), Span(5,6,List(21, 20, 19),French,(country :name (name :op "France")),false), Span(3,4,List(22),meeting,meet-03,false), Span(2,3,List(26, 25, 24, 23),081113,(date-entity :day 13 :month 11 :year 08),false), Span(0,1,List(27),After,after,false)),Map(2 -> and, 5 -> "Iran", 27 -> after, 12 -> international, 8 -> track-01, 15 -> government-organization, 21 -> "France", 18 -> "Foreign", 24 -> 13, 7 -> approach-02, 1 -> work-01, 17 -> "Ministry", 23 -> date-entity, 26 -> 08, 4 -> name, 11 -> community, 14 -> release-01, 20 -> name, 6 -> diplomatic, 9 -> dual, 0 -> sanction-02, 22 -> meet-03, 16 -> name, 19 -> country, 10 -> importance, 3 -> country, 25 -> 11, 13 -> state-01),Map(w -> work-01, n -> name, s2 -> state-01, 12 -> 11, t -> track-01, d3 -> date-entity, a3 -> after, s -> sanction-02, m -> meet-03, d -> diplomatic, 1 -> 13, g -> government-organization, n3 -> name, c3 -> country, a -> and, d2 -> dual, i2 -> international, r -> release-01, a2 -> approach-02, i -> importance, c -> country, 0 -> 08, n2 -> name, c2 -> community))),[Ljava.lang.String;@50378a4,Annotation([Ljava.lang.String;@60f00693,[Ljava.lang.String;@79207381,[Ljava.lang.String;@491b9b8),Annotation([Ljava.lang.String;@1a4927d6,[Ljava.lang.String;@7a6d7e92,[Ledu.cmu.lti.nlp.amr.Dependency;@aba625),Annotation([Ljava.lang.String;@97e93f1,[Ljava.lang.String;@5a5a729f,[Ljava.lang.String;@4b520ea8),Annotation([Ljava.lang.String;@16150369,[Ljava.lang.String;@6b09fb41,[Ledu.cmu.lti.nlp.amr.Entity;@624ea235))
AMR:
(a / and, op, c / country)
(a / and, op, w / work-01)
(a2 / approach-02, ARG2, a / and)
(a3 / after, op, m / meet-03)
(c / country, name, n / name)
(c2 / community, mod, i2 / international)
(c3 / country, name, n3 / name)
(d3 / date-entity, day, 1 / 13)
(d3 / date-entity, month, 12 / 11)
(d3 / date-entity, year, 0 / 08)
(g / government-organization, name, n2 / name)
(g / government-organization, poss, c3 / country)
(i / importance, poss, g / government-organization)
(m / meet-03, ARG1, d / diplomatic)
(m / meet-03, time, d3 / date-entity)
(n / name, op, "Iran")
(n2 / name, op, "Foreign")
(n2 / name, op, "Ministry")
(n3 / name, op, "France")
(r / release-01, ARG0, g / government-organization)
(r / release-01, ARG1, s2 / state-01)
(r / release-01, time, a3 / after)
(s2 / state-01, ARG0, a / and)
(s2 / state-01, ARG1, c2 / community)
(t / track-01, ARG1, a2 / approach-02)
(t / track-01, ARG2, d2 / dual)
(w / work-01, ARG1, s / sanction-02)

Decoded in 1,816,791 microseconds
Sentence: Russia and China have resisted new sanctions against Iran.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 1-2:  and => and
Span 2-3:  China => (country :name (name :op "China"))
Span 8-9:  Iran => (country :name (name :op "Iran"))
Span 5-6:  new => new
Span 4-5:  resisted => resist-01
Span 0-1:  Russia => (country :name (name :op "Russia"))
Span 6-7:  sanctions => sanction-02

Langrangian relaxation converged after 86 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(2, 1, 0),Iran,(country :name (name :op "Iran")),false), Span(6,7,List(3),sanctions,sanction-02,false), Span(5,6,List(4),new,new,false), Span(4,5,List(5),resisted,resist-01,false), Span(2,3,List(8, 7, 6),China,(country :name (name :op "China")),false), Span(1,2,List(9),and,and,false), Span(0,1,List(12, 11, 10),Russia,(country :name (name :op "Russia")),false)),Map(2 -> "Iran", 5 -> resist-01, 12 -> "Russia", 8 -> "China", 7 -> name, 1 -> name, 4 -> new, 11 -> name, 6 -> country, 0 -> country, 9 -> and, 3 -> sanction-02, 10 -> country),Map(n -> name, n4 -> name, s -> sanction-02, c3 -> country, a -> and, n3 -> name, r -> resist-01, c -> country, c2 -> country, n2 -> new))),[Ljava.lang.String;@3932c79a,Annotation([Ljava.lang.String;@782859e,[Ljava.lang.String;@23f5b5dc,[Ljava.lang.String;@34bde49d),Annotation([Ljava.lang.String;@1b1cfb87,[Ljava.lang.String;@821330f,[Ledu.cmu.lti.nlp.amr.Dependency;@6f43c82),Annotation([Ljava.lang.String;@5db6b9cd,[Ljava.lang.String;@210ab13f,[Ljava.lang.String;@20b2475a),Annotation([Ljava.lang.String;@7857fe2,[Ljava.lang.String;@6f15d60e,[Ledu.cmu.lti.nlp.amr.Entity;@1be2019a))
AMR:
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(n / name, op, "Iran")
(n3 / name, op, "China")
(n4 / name, op, "Russia")
(r / resist-01, ARG0, a / and)
(r / resist-01, ARG1, s / sanction-02)
(s / sanction-02, ARG0, c3 / country)
(s / sanction-02, ARG1, c / country)
(s / sanction-02, mod, n2 / new)

Decoded in 772,068 microseconds
Sentence: Russia and China have close political and business ties with Iran and feel no domestic pressure to act against the Islamic Republic of Iran.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 17-18:  act => act-02
Span 11-12:  and => and
Span 6-7:  and => and
Span 1-2:  and => and
Span 7-8:  business => business
Span 2-3:  China => (country :name (name :op "China"))
Span 14-15:  domestic => domestic
Span 10-11:  Iran => (country :name (name :op "Iran"))
Span 20-24:  Islamic Republic of Iran => (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
Span 13-14:  no => -
Span 5-6:  political => politics
Span 15-16:  pressure => pressure-01
Span 0-1:  Russia => (country :name (name :op "Russia"))
Span 8-9:  ties => tie-01

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,24,List(5, 4, 3, 2, 1, 0),Islamic Republic of Iran,(country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran")),false), Span(17,18,List(6),act,act-02,false), Span(15,16,List(7),pressure,pressure-01,false), Span(14,15,List(8),domestic,domestic,false), Span(13,14,List(9),no,-,false), Span(11,12,List(10),and,and,false), Span(10,11,List(13, 12, 11),Iran,(country :name (name :op "Iran")),false), Span(8,9,List(14),ties,tie-01,false), Span(7,8,List(15),business,business,false), Span(6,7,List(16),and,and,false), Span(5,6,List(17),political,politics,false), Span(2,3,List(20, 19, 18),China,(country :name (name :op "China")),false), Span(1,2,List(21),and,and,false), Span(0,1,List(24, 23, 22),Russia,(country :name (name :op "Russia")),false)),Map(2 -> "Islamic", 5 -> "Iran", 12 -> name, 8 -> domestic, 15 -> business, 21 -> and, 18 -> country, 24 -> "Russia", 7 -> pressure-01, 1 -> name, 17 -> politics, 23 -> name, 4 -> "of", 11 -> country, 14 -> tie-01, 20 -> "China", 6 -> act-02, 9 -> -, 0 -> country, 22 -> country, 16 -> and, 19 -> name, 10 -> and, 3 -> "Republic", 13 -> "Iran"),Map(n -> name, t -> tie-01, b -> business, p2 -> politics, n4 -> name, c4 -> country, a3 -> and, d -> domestic, p -> pressure-01, n3 -> name, a -> act-02, c3 -> country, a2 -> and, - -> -, c -> country, c2 -> country, n2 -> name, a4 -> and))),[Ljava.lang.String;@29d80d2b,Annotation([Ljava.lang.String;@58e1d9d,[Ljava.lang.String;@446a1e84,[Ljava.lang.String;@4f0f2942),Annotation([Ljava.lang.String;@2657d4dd,[Ljava.lang.String;@5340477f,[Ledu.cmu.lti.nlp.amr.Dependency;@47caedad),Annotation([Ljava.lang.String;@7139992f,[Ljava.lang.String;@69504ae9,[Ljava.lang.String;@387a8303),Annotation([Ljava.lang.String;@28cda624,[Ljava.lang.String;@1500b2f3,[Ledu.cmu.lti.nlp.amr.Entity;@7eecb5b8))
AMR:
(a / act-02, ARG0, c / country)
(a / act-02, ARG1, b / business)
(a2 / and, op, p / pressure-01)
(a3 / and, op, t / tie-01)
(a4 / and, mod, p2 / politics)
(a4 / and, op, c3 / country)
(a4 / and, op, c4 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(n / name, op, "Iran")
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")
(n2 / name, op, "Iran")
(n3 / name, op, "China")
(n4 / name, op, "Russia")
(p / pressure-01, ARG1, a / act-02)
(p / pressure-01, ARG6, - / -)
(p / pressure-01, mod, d / domestic)
(t / tie-01, ARG0, a4 / and)
(t / tie-01, ARG1, c2 / country)
(t / tie-01, ARG2, a2 / and)

Decoded in 555,279 microseconds
Sentence: The United States does not have close political and business ties with Iran and feels domestic pressure to act against the Islamic Republic of Iran.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 18-19:  act => act-02
Span 13-14:  and => and
Span 8-9:  and => and
Span 9-10:  business => business
Span 15-16:  domestic => domestic
Span 12-13:  Iran => (country :name (name :op "Iran"))
Span 21-25:  Islamic Republic of Iran => (country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran"))
Span 7-8:  political => politics
Span 16-17:  pressure => pressure-01
Span 10-11:  ties => tie-01
Span 1-3:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,25,List(5, 4, 3, 2, 1, 0),Islamic Republic of Iran,(country :name (name :op "Islamic" :op "Republic" :op "of" :op "Iran")),false), Span(18,19,List(6),act,act-02,false), Span(16,17,List(7),pressure,pressure-01,false), Span(15,16,List(8),domestic,domestic,false), Span(13,14,List(9),and,and,false), Span(12,13,List(12, 11, 10),Iran,(country :name (name :op "Iran")),false), Span(10,11,List(13),ties,tie-01,false), Span(9,10,List(14),business,business,false), Span(8,9,List(15),and,and,false), Span(7,8,List(16),political,politics,false), Span(1,3,List(20, 19, 18, 17),United States,(country :name (name :op "United" :op "States")),false)),Map(2 -> "Islamic", 5 -> "Iran", 12 -> "Iran", 15 -> and, 8 -> domestic, 18 -> name, 7 -> pressure-01, 17 -> country, 1 -> name, 4 -> "of", 11 -> name, 14 -> business, 20 -> "States", 6 -> act-02, 0 -> country, 9 -> and, 16 -> politics, 19 -> "United", 3 -> "Republic", 10 -> country, 13 -> tie-01),Map(n -> name, t -> tie-01, b -> business, p2 -> politics, a3 -> and, d -> domestic, p -> pressure-01, n3 -> name, a -> act-02, c3 -> country, a2 -> and, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@126253fd,Annotation([Ljava.lang.String;@57db2b13,[Ljava.lang.String;@475c9c31,[Ljava.lang.String;@5c86a017),Annotation([Ljava.lang.String;@5c7bfdc1,[Ljava.lang.String;@5276d6ee,[Ledu.cmu.lti.nlp.amr.Dependency;@71687585),Annotation([Ljava.lang.String;@1807f5a7,[Ljava.lang.String;@1b919693,[Ljava.lang.String;@7fb4f2a9),Annotation([Ljava.lang.String;@4dc27487,[Ljava.lang.String;@6a4f1a55,[Ledu.cmu.lti.nlp.amr.Entity;@7dfd3c81))
AMR:
(a / act-02, ARG0, c / country)
(a / act-02, ARG1, p2 / politics)
(a2 / and, op, p / pressure-01)
(a3 / and, op, t / tie-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(n / name, op, "Iran")
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")
(n2 / name, op, "Iran")
(n3 / name, op, "States")
(n3 / name, op, "United")
(p / pressure-01, ARG1, a / act-02)
(p / pressure-01, mod, d / domestic)
(t / tie-01, ARG0, c3 / country)
(t / tie-01, ARG1, c2 / country)
(t / tie-01, ARG2, a2 / and)
(t / tie-01, ARG6, b / business)

Decoded in 613,506 microseconds
Sentence: Russia and China hold veto power over Security Council decisions.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "Security" :op "Council"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 1-2:  and => and
Span 2-3:  China => (country :name (name :op "China"))
Span 3-4:  hold => hold-04
Span 6-7:  over => over
Span 5-6:  power => power
Span 0-1:  Russia => (country :name (name :op "Russia"))
Span 7-9:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 4-5:  veto => veto

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,9,List(3, 2, 1, 0),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(6,7,List(4),over,over,false), Span(5,6,List(5),power,power,false), Span(4,5,List(6),veto,veto,false), Span(3,4,List(7),hold,hold-04,false), Span(2,3,List(10, 9, 8),China,(country :name (name :op "China")),false), Span(1,2,List(11),and,and,false), Span(0,1,List(14, 13, 12),Russia,(country :name (name :op "Russia")),false)),Map(2 -> "Council", 5 -> power, 12 -> country, 8 -> country, 7 -> hold-04, 1 -> name, 4 -> over, 11 -> and, 14 -> "Russia", 6 -> veto, 0 -> organization, 9 -> name, 3 -> "Security", 10 -> "China", 13 -> name),Map(n -> name, h -> hold-04, v -> veto, p -> power, n3 -> name, a -> and, o2 -> over, c -> country, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@2584b82d,Annotation([Ljava.lang.String;@7bbc8656,[Ljava.lang.String;@6933b6c6,[Ljava.lang.String;@7d3e8655),Annotation([Ljava.lang.String;@7dfb0c0f,[Ljava.lang.String;@626abbd0,[Ledu.cmu.lti.nlp.amr.Dependency;@169bb4dd),Annotation([Ljava.lang.String;@1f9e9475,[Ljava.lang.String;@3aa078fd,[Ljava.lang.String;@d23e042),Annotation([Ljava.lang.String;@46d59067,[Ljava.lang.String;@2d0399f4,[Ledu.cmu.lti.nlp.amr.Entity;@14dd7b39))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, o / organization)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(h / hold-04, ARG0, a / and)
(h / hold-04, ARG1, p / power)
(h / hold-04, ARG6, o2 / over)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "China")
(n3 / name, op, "Russia")
(o / organization, name, n / name)
(p / power, mod, v / veto)

Decoded in 322,912 microseconds
Sentence: Moscow's Interfax news agency quoted Russian diplomat Sergei ryabkov as stating that the parties struck no deal on sanctions against Iran at the 081113 meeting and that the Western countries are in favor of the sanctions against Iran while China and Russia did not support sanctions against Iran.

NER Entity: (country :name (name :op "Moscow"))
NER Entity: (organization :name (name :op "Interfax"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Sergei" :op "ryabkov"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Western"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 24-25:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 41-42:  and => and
Span 26-27:  and => and
Span 40-41:  China => (country :name (name :op "China"))
Span 30-31:  countries => country
Span 17-18:  deal => deal-01
Span 33-34:  favor => favor
Span 2-5:  Interfax news agency => (company :name (name :op "agency" :op "new" :op "Interfax"))
Span 48-49:  Iran => (country :name (name :op "Iran"))
Span 38-39:  Iran => (country :name (name :op "Iran"))
Span 21-22:  Iran => (country :name (name :op "Iran"))
Span 25-26:  meeting => meet-03
Span 0-1:  Moscow => (city :name (name :op "Moscow"))
Span 16-17:  no => -
Span 14-15:  parties => party
Span 5-6:  quoted => quote-01
Span 42-43:  Russia => (country :name (name :op "Russia"))
Span 6-7:  Russian => (country :name (name :op "Russia"))
Span 46-47:  sanctions => sanction-02
Span 36-37:  sanctions => sanction-02
Span 19-20:  sanctions => sanction-02
Span 8-10:  Sergei ryabkov => (person :name (name :op "Sergei" :op "ryabkov"))
Span 11-12:  stating => state-01
Span 15-16:  struck => strike-01
Span 45-46:  support => support-01
Span 29-30:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 97 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(2, 1, 0),Iran,(country :name (name :op "Iran")),false), Span(46,47,List(3),sanctions,sanction-02,false), Span(45,46,List(4),support,support-01,false), Span(42,43,List(7, 6, 5),Russia,(country :name (name :op "Russia")),false), Span(41,42,List(8),and,and,false), Span(40,41,List(11, 10, 9),China,(country :name (name :op "China")),false), Span(38,39,List(14, 13, 12),Iran,(country :name (name :op "Iran")),false), Span(36,37,List(15),sanctions,sanction-02,false), Span(33,34,List(16),favor,favor,false), Span(30,31,List(17),countries,country,false), Span(29,30,List(20, 19, 18),Western,(world-region :name (name :op "West")),false), Span(26,27,List(21),and,and,false), Span(25,26,List(22),meeting,meet-03,false), Span(24,25,List(26, 25, 24, 23),081113,(date-entity :day 13 :month 11 :year 08),false), Span(21,22,List(29, 28, 27),Iran,(country :name (name :op "Iran")),false), Span(19,20,List(30),sanctions,sanction-02,false), Span(17,18,List(31),deal,deal-01,false), Span(16,17,List(32),no,-,false), Span(15,16,List(33),struck,strike-01,false), Span(14,15,List(34),parties,party,false), Span(11,12,List(35),stating,state-01,false), Span(8,10,List(39, 38, 37, 36),Sergei ryabkov,(person :name (name :op "Sergei" :op "ryabkov")),false), Span(6,7,List(42, 41, 40),Russian,(country :name (name :op "Russia")),false), Span(5,6,List(43),quoted,quote-01,false), Span(2,5,List(48, 47, 46, 45, 44),Interfax news agency,(company :name (name :op "agency" :op "new" :op "Interfax")),false), Span(0,1,List(51, 50, 49),Moscow,(city :name (name :op "Moscow")),false)),Map(30 -> sanction-02, 39 -> "ryabkov", 45 -> name, 51 -> "Moscow", 2 -> "Iran", 5 -> country, 48 -> "Interfax", 33 -> strike-01, 27 -> country, 12 -> country, 8 -> and, 15 -> sanction-02, 42 -> "Russia", 36 -> person, 21 -> and, 18 -> world-region, 24 -> 13, 35 -> state-01, 41 -> name, 7 -> "Russia", 17 -> country, 1 -> name, 50 -> name, 44 -> company, 23 -> date-entity, 38 -> "Sergei", 47 -> "new", 4 -> support-01, 26 -> 08, 11 -> "China", 32 -> -, 14 -> "Iran", 20 -> "West", 29 -> "Iran", 46 -> "agency", 34 -> party, 6 -> name, 28 -> name, 40 -> country, 49 -> city, 0 -> country, 9 -> country, 43 -> quote-01, 22 -> meet-03, 16 -> favor, 37 -> name, 19 -> name, 3 -> sanction-02, 10 -> name, 25 -> 11, 31 -> deal-01, 13 -> name),Map(s5 -> strike-01, n -> name, w -> world-region, c8 -> company, q -> quote-01, s2 -> support-01, 12 -> 11, c7 -> country, n7 -> name, p2 -> person, n4 -> name, c4 -> country, s -> sanction-02, s4 -> sanction-02, m -> meet-03, d -> date-entity, 1 -> 13, p -> party, n3 -> name, c3 -> country, a -> and, d2 -> deal-01, n6 -> name, n10 -> name, c6 -> country, c9 -> city, n9 -> name, a2 -> and, - -> -, c -> country, s3 -> sanction-02, n8 -> name, 0 -> 08, f -> favor, s6 -> state-01, n2 -> name, c2 -> country, c5 -> country, n5 -> name))),[Ljava.lang.String;@66ea810,Annotation([Ljava.lang.String;@6cd24612,[Ljava.lang.String;@5dafbe45,[Ljava.lang.String;@2254127a),Annotation([Ljava.lang.String;@51891008,[Ljava.lang.String;@2f953efd,[Ledu.cmu.lti.nlp.amr.Dependency;@f68f0dc),Annotation([Ljava.lang.String;@d2de489,[Ljava.lang.String;@14bdbc74,[Ljava.lang.String;@12591ac8),Annotation([Ljava.lang.String;@5a7fe64f,[Ljava.lang.String;@38145825,[Ledu.cmu.lti.nlp.amr.Entity;@41330d4f))
AMR:
(a / and, op, c2 / country)
(a / and, op, c5 / country)
(a2 / and, op, s5 / strike-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, mod, w / world-region)
(c6 / country, name, n6 / name)
(c7 / country, name, n8 / name)
(c8 / company, name, n9 / name)
(c8 / company, poss, c9 / city)
(c9 / city, name, n10 / name)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 0 / 08)
(d2 / deal-01, ARG1, s4 / sanction-02)
(d2 / deal-01, ARG6, - / -)
(m / meet-03, ARG0, p / party)
(m / meet-03, time, d / date-entity)
(n / name, op, "Iran")
(n10 / name, op, "Moscow")
(n2 / name, op, "Russia")
(n3 / name, op, "China")
(n4 / name, op, "Iran")
(n5 / name, op, "West")
(n6 / name, op, "Iran")
(n7 / name, op, "Sergei")
(n7 / name, op, "ryabkov")
(n8 / name, op, "Russia")
(n9 / name, op, "Interfax")
(n9 / name, op, "agency")
(n9 / name, op, "new")
(p2 / person, name, n7 / name)
(q / quote-01, ARG0, c8 / company)
(q / quote-01, ARG1, c7 / country)
(q / quote-01, ARG2, s6 / state-01)
(s / sanction-02, ARG0, f / favor)
(s / sanction-02, ARG1, c / country)
(s2 / support-01, ARG0, c3 / country)
(s2 / support-01, ARG1, s / sanction-02)
(s2 / support-01, medium, a / and)
(s3 / sanction-02, ARG0, p / party)
(s3 / sanction-02, ARG1, c4 / country)
(s4 / sanction-02, ARG1, c6 / country)
(s5 / strike-01, ARG0, p / party)
(s5 / strike-01, ARG1, d2 / deal-01)
(s5 / strike-01, ARG6, c5 / country)
(s6 / state-01, ARG0, p2 / person)
(s6 / state-01, ARG1, a2 / and)
(w / world-region, name, n5 / name)

Decoded in 9,571,086 microseconds
Sentence: Sergei ryabkov attended the 081113 meeting.

NER Entity: (person :name (name :op "Sergei"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
Spans:
Span 4-5:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 2-3:  attended => attend-01
Span 5-6:  meeting => meet-03

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),meeting,meet-03,false), Span(4,5,List(4, 3, 2, 1),081113,(date-entity :day 13 :month 11 :year 08),false), Span(2,3,List(5),attended,attend-01,false)),Map(2 -> 13, 5 -> attend-01, 1 -> date-entity, 4 -> 08, 0 -> meet-03, 3 -> 11),Map(12 -> 11, d -> date-entity, m -> meet-03, 1 -> 13, a -> attend-01, 0 -> 08))),[Ljava.lang.String;@1b66c0fb,Annotation([Ljava.lang.String;@3e0e1046,[Ljava.lang.String;@24c1b2d2,[Ljava.lang.String;@7dc19a70),Annotation([Ljava.lang.String;@508dec2b,[Ljava.lang.String;@1e4f4a5c,[Ledu.cmu.lti.nlp.amr.Dependency;@37313c65),Annotation([Ljava.lang.String;@465232e9,[Ljava.lang.String;@798162bc,[Ljava.lang.String;@1df8da7a),Annotation([Ljava.lang.String;@23941fb4,[Ljava.lang.String;@7486b455,[Ledu.cmu.lti.nlp.amr.Entity;@660acfb))
AMR:
(a / attend-01, ARG1, m / meet-03)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 0 / 08)
(m / meet-03, time, d / date-entity)

Decoded in 20,181 microseconds
Sentence: A report released this week says Iran has made significant progress at Iran's heavy-water research reactor facility near the city of Arak.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 24-25:  Arak => (city :name (name :op "Arak"))
Span 22-23:  city => city
Span 19-20:  facility => facility
Span 14-15:  heavy => heavy
Span 12-13:  Iran => (country :name (name :op "Iran"))
Span 6-7:  Iran => (country :name (name :op "Iran"))
Span 20-21:  near => near
Span 10-11:  progress => progress-01
Span 18-19:  reactor => reactor
Span 2-3:  released => release-01
Span 1-2:  report => report
Span 17-18:  research => research-01
Span 5-6:  says => say-01
Span 9-10:  significant => significant
Span 3-4:  this => this
Span 16-17:  water => water
Span 4-5:  week => week

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),Arak,(city :name (name :op "Arak")),false), Span(22,23,List(3),city,city,false), Span(20,21,List(4),near,near,false), Span(19,20,List(5),facility,facility,false), Span(18,19,List(6),reactor,reactor,false), Span(17,18,List(7),research,research-01,false), Span(16,17,List(8),water,water,false), Span(14,15,List(9),heavy,heavy,false), Span(12,13,List(12, 11, 10),Iran,(country :name (name :op "Iran")),false), Span(10,11,List(13),progress,progress-01,false), Span(9,10,List(14),significant,significant,false), Span(6,7,List(17, 16, 15),Iran,(country :name (name :op "Iran")),false), Span(5,6,List(18),says,say-01,false), Span(4,5,List(19),week,week,false), Span(3,4,List(20),this,this,false), Span(2,3,List(21),released,release-01,false), Span(1,2,List(22),report,report,false)),Map(2 -> "Arak", 5 -> facility, 12 -> "Iran", 15 -> country, 8 -> water, 21 -> release-01, 18 -> say-01, 7 -> research-01, 17 -> "Iran", 1 -> name, 4 -> near, 11 -> name, 14 -> significant, 20 -> this, 6 -> reactor, 22 -> report, 0 -> city, 9 -> heavy, 16 -> name, 19 -> week, 3 -> city, 10 -> country, 13 -> progress-01),Map(n -> name, w -> water, r3 -> release-01, h -> heavy, s2 -> say-01, t -> this, n4 -> name, c4 -> country, s -> significant, r2 -> research-01, p -> progress-01, c3 -> country, n3 -> name, w2 -> week, r4 -> report, r -> reactor, c -> city, f -> facility, c2 -> city, n2 -> near))),[Ljava.lang.String;@5d908d47,Annotation([Ljava.lang.String;@5efa40fe,[Ljava.lang.String;@1f9f6368,[Ljava.lang.String;@1c9b0314),Annotation([Ljava.lang.String;@45385f75,[Ljava.lang.String;@49c90a9c,[Ledu.cmu.lti.nlp.amr.Dependency;@2d29b4ee),Annotation([Ljava.lang.String;@69ee81fc,[Ljava.lang.String;@6e2aa843,[Ljava.lang.String;@6f36c2f0),Annotation([Ljava.lang.String;@f58853c,[Ljava.lang.String;@1224144a,[Ledu.cmu.lti.nlp.amr.Entity;@29f7cefd))
AMR:
(c / city, name, n / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(f / facility, location, n2 / near)
(f / facility, poss, c3 / country)
(f / facility, poss, c4 / country)
(f / facility, poss, r / reactor)
(n / name, op, "Arak")
(n2 / near, op, c2 / city)
(n3 / name, op, "Iran")
(n4 / name, op, "Iran")
(p / progress-01, ARG1, f / facility)
(p / progress-01, ARG2, s / significant)
(r / reactor, mod, r2 / research-01)
(r2 / research-01, ARG1, w / water)
(r3 / release-01, ARG0, c / city)
(r3 / release-01, ARG1, r4 / report)
(r3 / release-01, time, w2 / week)
(s2 / say-01, ARG0, r4 / report)
(s2 / say-01, ARG1, p / progress-01)
(w / water, mod, h / heavy)
(w2 / week, mod, t / this)

Decoded in 1,241,863 microseconds
Sentence: Iran's heavy-water research reactor near Arak could eventually produce plutonium that might be used in a nuclear weapon.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  Arak => (city :name (name :op "Arak"))
Span 9-10:  could => possible
Span 10-11:  eventually => eventual
Span 2-3:  heavy => heavy
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 7-8:  near => near
Span 19-20:  nuclear => nucleus
Span 12-13:  plutonium => plutonium
Span 11-12:  produce => produce-01
Span 6-7:  reactor => reactor
Span 5-6:  research => research-01
Span 16-17:  used => use-01
Span 4-5:  water => water
Span 20-21:  weapon => weapon

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),weapon,weapon,false), Span(19,20,List(1),nuclear,nucleus,false), Span(16,17,List(2),used,use-01,false), Span(12,13,List(3),plutonium,plutonium,false), Span(11,12,List(4),produce,produce-01,false), Span(10,11,List(5),eventually,eventual,false), Span(9,10,List(6),could,possible,false), Span(8,9,List(9, 8, 7),Arak,(city :name (name :op "Arak")),false), Span(7,8,List(10),near,near,false), Span(6,7,List(11),reactor,reactor,false), Span(5,6,List(12),research,research-01,false), Span(4,5,List(13),water,water,false), Span(2,3,List(14),heavy,heavy,false), Span(0,1,List(17, 16, 15),Iran,(country :name (name :op "Iran")),false)),Map(2 -> use-01, 5 -> eventual, 12 -> research-01, 15 -> country, 8 -> name, 7 -> city, 17 -> "Iran", 1 -> nucleus, 4 -> produce-01, 11 -> reactor, 14 -> heavy, 6 -> possible, 0 -> weapon, 9 -> "Arak", 16 -> name, 3 -> plutonium, 10 -> near, 13 -> water),Map(e -> eventual, w -> weapon, n -> nucleus, h -> heavy, p2 -> produce-01, n4 -> name, p -> plutonium, r2 -> research-01, n3 -> near, w2 -> water, r -> reactor, c -> city, u -> use-01, p3 -> possible, c2 -> country, n2 -> name))),[Ljava.lang.String;@700fb871,Annotation([Ljava.lang.String;@3b35a229,[Ljava.lang.String;@9816741,[Ljava.lang.String;@1e16c0aa),Annotation([Ljava.lang.String;@13d73f29,[Ljava.lang.String;@565f390,[Ledu.cmu.lti.nlp.amr.Dependency;@7dc3712),Annotation([Ljava.lang.String;@2f67a4d3,[Ljava.lang.String;@5e3f861,[Ljava.lang.String;@2fb0623e),Annotation([Ljava.lang.String;@49b2a47d,[Ljava.lang.String;@5be1d0a4,[Ledu.cmu.lti.nlp.amr.Entity;@415b0b49))
AMR:
(c / city, location, c2 / country)
(c / city, name, n2 / name)
(c2 / country, name, n4 / name)
(n2 / name, op, "Arak")
(n3 / near, op, c / city)
(n4 / name, op, "Iran")
(p2 / produce-01, ARG0, r / reactor)
(p2 / produce-01, ARG1, p / plutonium)
(p2 / produce-01, time, e / eventual)
(p3 / possible, domain, p2 / produce-01)
(r / reactor, mod, r2 / research-01)
(r / reactor, poss, c2 / country)
(r2 / research-01, ARG0, h / heavy)
(r2 / research-01, ARG1, w2 / water)
(u / use-01, ARG1, p / plutonium)
(u / use-01, ARG2, w / weapon)
(w / weapon, mod, n / nucleus)

Decoded in 491,911 microseconds
Sentence: Satellite images published by the Institute for Science and International Security show construction at the heavy-water research reactor facility near the city of Arak has progressed significantly between 080200 and 081000.

NER Entity: (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
NER Entity: (country :name (name :op "Arak"))
mkDayMonthYear(080200,00,02,08)
mkDayMonthYear(081000,00,10,08)
mkDayMonthYear(081000,00,10,08)
mkDayMonthYear(080200,00,02,08)
NER Entity: (country :name (name :op "Arak"))
Spans:
Span 30-31:  080200 => (date-entity :day 0 :month 2 :year 08)
Span 32-33:  081000 => (date-entity :day 0 :month 10 :year 08)
Span 31-32:  and => and
Span 25-26:  Arak => (city :name (name :op "Arak"))
Span 29-30:  between => between
Span 23-24:  city => city
Span 12-13:  construction => construct-01
Span 20-21:  facility => facility
Span 15-16:  heavy => heavy
Span 1-2:  images => image
Span 5-11:  Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 21-22:  near => near
Span 27-28:  progressed => progress-01
Span 2-3:  published => publish-01
Span 19-20:  reactor => reactor
Span 18-19:  research => research-01
Span 11-12:  show => show-01
Span 28-29:  significantly => significant
Span 17-18:  water => water

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(3, 2, 1, 0),081000,(date-entity :day 0 :month 10 :year 08),false), Span(31,32,List(4),and,and,false), Span(30,31,List(8, 7, 6, 5),080200,(date-entity :day 0 :month 2 :year 08),false), Span(29,30,List(9),between,between,false), Span(28,29,List(10),significantly,significant,false), Span(27,28,List(11),progressed,progress-01,false), Span(25,26,List(14, 13, 12),Arak,(city :name (name :op "Arak")),false), Span(23,24,List(15),city,city,false), Span(21,22,List(16),near,near,false), Span(20,21,List(17),facility,facility,false), Span(19,20,List(18),reactor,reactor,false), Span(18,19,List(19),research,research-01,false), Span(17,18,List(20),water,water,false), Span(15,16,List(21),heavy,heavy,false), Span(12,13,List(22),construction,construct-01,false), Span(11,12,List(23),show,show-01,false), Span(5,11,List(31, 30, 29, 28, 27, 26, 25, 24),Institute for Science and International Security,(organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false), Span(2,3,List(32),published,publish-01,false), Span(1,2,List(33),images,image,false)),Map(30 -> "International", 2 -> 10, 5 -> date-entity, 33 -> image, 27 -> "for", 12 -> city, 8 -> 08, 15 -> city, 21 -> heavy, 18 -> reactor, 24 -> organization, 7 -> 2, 1 -> 0, 17 -> facility, 23 -> show-01, 26 -> "Institute", 4 -> and, 11 -> progress-01, 32 -> publish-01, 14 -> "Arak", 29 -> "and", 20 -> water, 28 -> "Science", 6 -> 0, 9 -> between, 0 -> date-entity, 22 -> construct-01, 16 -> near, 19 -> research-01, 10 -> significant, 3 -> 08, 31 -> "Security", 25 -> name, 13 -> name),Map(n -> name, w -> water, h -> heavy, 2 -> 2, s2 -> show-01, b -> between, 03 -> 0, p2 -> publish-01, s -> significant, d -> date-entity, 1 -> 10, r2 -> research-01, p -> progress-01, a -> and, c3 -> construct-01, n3 -> name, d2 -> date-entity, 02 -> 08, i -> image, r -> reactor, c -> city, 0 -> 0, f -> facility, o -> organization, 04 -> 08, c2 -> city, n2 -> near))),[Ljava.lang.String;@6d5620ce,Annotation([Ljava.lang.String;@311bf055,[Ljava.lang.String;@642a7222,[Ljava.lang.String;@7d322cad),Annotation([Ljava.lang.String;@21be3395,[Ljava.lang.String;@4f49f6af,[Ledu.cmu.lti.nlp.amr.Dependency;@78452606),Annotation([Ljava.lang.String;@147e2ae7,[Ljava.lang.String;@448c8166,[Ljava.lang.String;@4470fbd6),Annotation([Ljava.lang.String;@15d49048,[Ljava.lang.String;@7098b907,[Ledu.cmu.lti.nlp.amr.Entity;@503f91c3))
AMR:
(a / and, op, d / date-entity)
(b / between, mod, s / significant)
(c / city, name, n / name)
(c3 / construct-01, ARG0, c / city)
(c3 / construct-01, ARG1, r2 / research-01)
(c3 / construct-01, ARG6, o / organization)
(c3 / construct-01, location, f / facility)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 02 / 08)
(d2 / date-entity, day, 03 / 0)
(d2 / date-entity, month, 2 / 2)
(d2 / date-entity, year, 04 / 08)
(f / facility, location, n2 / near)
(f / facility, poss, r / reactor)
(n / name, op, "Arak")
(n2 / near, op, c2 / city)
(n3 / name, op, "Institute")
(n3 / name, op, "International")
(n3 / name, op, "Science")
(n3 / name, op, "Security")
(n3 / name, op, "and")
(n3 / name, op, "for")
(o / organization, name, n3 / name)
(p / progress-01, ARG0, i / image)
(p / progress-01, ARG1, a / and)
(p / progress-01, degree, s / significant)
(p / progress-01, time, d2 / date-entity)
(p2 / publish-01, ARG1, i / image)
(p2 / publish-01, location, f / facility)
(r2 / research-01, ARG1, w / water)
(s2 / show-01, ARG1, o / organization)
(w / water, mod, h / heavy)

Decoded in 1,999,256 microseconds
Sentence: David Albright stated that Iran's heavy-water research reactor near Arak has evaded the international security community's notice.

NER Entity: (person :name (name :op "David" :op "Albright"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 12-13:  Arak => (city :name (name :op "Arak"))
Span 18-19:  community => community
Span 0-2:  David Albright => (person :name (name :op "David" :op "Albright"))
Span 6-7:  heavy => heavy
Span 16-17:  international => international
Span 4-5:  Iran => (country :name (name :op "Iran"))
Span 11-12:  near => near
Span 10-11:  reactor => reactor
Span 9-10:  research => research-01
Span 17-18:  security => security
Span 2-3:  stated => state-01
Span 8-9:  water => water

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),community,community,false), Span(17,18,List(1),security,security,false), Span(16,17,List(2),international,international,false), Span(12,13,List(5, 4, 3),Arak,(city :name (name :op "Arak")),false), Span(11,12,List(6),near,near,false), Span(10,11,List(7),reactor,reactor,false), Span(9,10,List(8),research,research-01,false), Span(8,9,List(9),water,water,false), Span(6,7,List(10),heavy,heavy,false), Span(4,5,List(13, 12, 11),Iran,(country :name (name :op "Iran")),false), Span(2,3,List(14),stated,state-01,false), Span(0,2,List(18, 17, 16, 15),David Albright,(person :name (name :op "David" :op "Albright")),false)),Map(2 -> international, 5 -> "Arak", 12 -> name, 15 -> person, 8 -> research-01, 18 -> "Albright", 7 -> reactor, 17 -> "David", 1 -> security, 4 -> name, 11 -> country, 14 -> state-01, 6 -> near, 0 -> community, 9 -> water, 16 -> name, 3 -> city, 10 -> heavy, 13 -> "Iran"),Map(n -> name, w -> water, h -> heavy, s2 -> state-01, n4 -> name, s -> security, p -> person, r2 -> research-01, c3 -> country, n3 -> name, i -> international, r -> reactor, c -> community, c2 -> city, n2 -> near))),[Ljava.lang.String;@13526e59,Annotation([Ljava.lang.String;@2235eaab,[Ljava.lang.String;@17503f6b,[Ljava.lang.String;@3bcd05cb),Annotation([Ljava.lang.String;@3b6d844d,[Ljava.lang.String;@36804139,[Ledu.cmu.lti.nlp.amr.Dependency;@20bd8be5),Annotation([Ljava.lang.String;@730d2164,[Ljava.lang.String;@24959ca4,[Ljava.lang.String;@10289886),Annotation([Ljava.lang.String;@5c86dbc5,[Ljava.lang.String;@461ad730,[Ledu.cmu.lti.nlp.amr.Entity;@4ee203eb))
AMR:
(c / community, mod, s / security)
(c2 / city, location, c3 / country)
(c2 / city, name, n / name)
(c3 / country, name, n3 / name)
(n / name, op, "Arak")
(n2 / near, op, c2 / city)
(n3 / name, op, "Iran")
(n4 / name, op, "Albright")
(n4 / name, op, "David")
(p / person, mod, c3 / country)
(p / person, name, n4 / name)
(r / reactor, mod, r2 / research-01)
(r / reactor, poss, c3 / country)
(r2 / research-01, ARG0, h / heavy)
(r2 / research-01, ARG1, w / water)
(s / security, mod, i / international)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, i / international)

Decoded in 733,326 microseconds
Sentence: David Albright stated that Iran's heavy-water research reactor near Arak is making significant progress according to the satellite images and that in a year and a half the heavy-water research reactor near Arak has progressed from building frames to a largely finished facility.

NER Entity: (person :name (name :op "David" :op "Albright"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Arak"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 27-28:  and => and
Span 22-23:  and => and
Span 37-38:  Arak => (city :name (name :op "Arak"))
Span 12-13:  Arak => (city :name (name :op "Arak"))
Span 41-42:  building => build-01
Span 0-2:  David Albright => (person :name (name :op "David" :op "Albright"))
Span 47-48:  facility => facility
Span 46-47:  finished => finish
Span 29-30:  half => half
Span 31-32:  heavy => heavy
Span 6-7:  heavy => heavy
Span 21-22:  images => image
Span 4-5:  Iran => (country :name (name :op "Iran"))
Span 45-46:  largely => large
Span 14-15:  making => make-01
Span 36-37:  near => near
Span 11-12:  near => near
Span 16-17:  progress => progress-01
Span 39-40:  progressed => progress-01
Span 35-36:  reactor => reactor
Span 10-11:  reactor => reactor
Span 34-35:  research => research-01
Span 9-10:  research => research-01
Span 20-21:  satellite => satellite
Span 15-16:  significant => significant
Span 2-3:  stated => state-01
Span 33-34:  water => water
Span 8-9:  water => water
Span 26-27:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),facility,facility,false), Span(46,47,List(1),finished,finish,false), Span(45,46,List(2),largely,large,false), Span(41,42,List(3),building,build-01,false), Span(39,40,List(4),progressed,progress-01,false), Span(37,38,List(7, 6, 5),Arak,(city :name (name :op "Arak")),false), Span(36,37,List(8),near,near,false), Span(35,36,List(9),reactor,reactor,false), Span(34,35,List(10),research,research-01,false), Span(33,34,List(11),water,water,false), Span(31,32,List(12),heavy,heavy,false), Span(29,30,List(13),half,half,false), Span(27,28,List(14),and,and,false), Span(26,27,List(16, 15),year,(temporal-quantity :unit year),false), Span(22,23,List(17),and,and,false), Span(21,22,List(18),images,image,false), Span(20,21,List(19),satellite,satellite,false), Span(16,17,List(20),progress,progress-01,false), Span(15,16,List(21),significant,significant,false), Span(14,15,List(22),making,make-01,false), Span(12,13,List(25, 24, 23),Arak,(city :name (name :op "Arak")),false), Span(11,12,List(26),near,near,false), Span(10,11,List(27),reactor,reactor,false), Span(9,10,List(28),research,research-01,false), Span(8,9,List(29),water,water,false), Span(6,7,List(30),heavy,heavy,false), Span(4,5,List(33, 32, 31),Iran,(country :name (name :op "Iran")),false), Span(2,3,List(34),stated,state-01,false), Span(0,2,List(38, 37, 36, 35),David Albright,(person :name (name :op "David" :op "Albright")),false)),Map(30 -> heavy, 2 -> large, 5 -> city, 33 -> "Iran", 27 -> reactor, 12 -> heavy, 8 -> near, 15 -> temporal-quantity, 36 -> name, 21 -> significant, 18 -> image, 24 -> name, 35 -> person, 7 -> "Arak", 1 -> finish, 17 -> and, 23 -> city, 38 -> "Albright", 26 -> near, 4 -> progress-01, 11 -> water, 32 -> name, 14 -> and, 29 -> water, 20 -> progress-01, 34 -> state-01, 28 -> research-01, 6 -> name, 9 -> reactor, 0 -> facility, 22 -> make-01, 16 -> year, 37 -> "David", 19 -> satellite, 10 -> research-01, 3 -> build-01, 31 -> country, 25 -> "Arak", 13 -> half),Map(w -> water, n -> name, r3 -> reactor, h -> heavy, h2 -> half, s2 -> significant, t -> temporal-quantity, b -> build-01, p2 -> progress-01, n4 -> near, s -> satellite, m -> make-01, r2 -> research-01, y -> year, p -> progress-01, c3 -> country, a -> and, n3 -> name, n6 -> name, w2 -> water, r -> reactor, a2 -> and, i -> image, r4 -> research-01, h3 -> heavy, c -> city, s3 -> state-01, f2 -> finish, l -> large, f -> facility, p3 -> person, n2 -> near, c2 -> city, n5 -> name))),[Ljava.lang.String;@1a5a4e19,Annotation([Ljava.lang.String;@7068e664,[Ljava.lang.String;@60db1c0e,[Ljava.lang.String;@3e78b6a5),Annotation([Ljava.lang.String;@769a1df5,[Ljava.lang.String;@41f69e84,[Ledu.cmu.lti.nlp.amr.Dependency;@7975d1d8),Annotation([Ljava.lang.String;@2438dcd,[Ljava.lang.String;@24105dc5,[Ljava.lang.String;@5167f57d),Annotation([Ljava.lang.String;@64b0598,[Ljava.lang.String;@18f8cd79,[Ledu.cmu.lti.nlp.amr.Entity;@3e2055d6))
AMR:
(a / and, op, h2 / half)
(a / and, op, t / temporal-quantity)
(a2 / and, op, m / make-01)
(a2 / and, op, p / progress-01)
(b / build-01, ARG1, a2 / and)
(b / build-01, location, i / image)
(c / city, name, n / name)
(c2 / city, location, c3 / country)
(c2 / city, name, n3 / name)
(c3 / country, name, n5 / name)
(f / facility, mod, f2 / finish)
(f / facility, poss, r / reactor)
(f2 / finish, mod, l / large)
(i / image, mod, s / satellite)
(m / make-01, ARG0, r3 / reactor)
(m / make-01, ARG1, p2 / progress-01)
(n / name, op, "Arak")
(n2 / near, op, c / city)
(n3 / name, op, "Arak")
(n4 / near, op, c2 / city)
(n5 / name, op, "Iran")
(n6 / name, op, "Albright")
(n6 / name, op, "David")
(p / progress-01, ARG1, r / reactor)
(p / progress-01, topic, a / and)
(p2 / progress-01, ARG1, s2 / significant)
(p3 / person, name, n6 / name)
(r / reactor, location, n2 / near)
(r / reactor, mod, r2 / research-01)
(r2 / research-01, ARG0, h / heavy)
(r2 / research-01, ARG1, w / water)
(r3 / reactor, mod, r4 / research-01)
(r3 / reactor, poss, c3 / country)
(r4 / research-01, ARG0, h3 / heavy)
(r4 / research-01, ARG1, w2 / water)
(s3 / state-01, ARG0, p3 / person)
(s3 / state-01, ARG1, a2 / and)
(t / temporal-quantity, unit, y / year)

Decoded in 2,431,401 microseconds
Sentence: David Albright is a former arms inspector and Director of the Institute for Science and International Security that is based in Washington, D.C..

NER Entity: (person :name (name :op "David" :op "Albright"))
NER Entity: (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
NER Entity: (country :name (name :op "Washington"))
NER Entity: (country :name (name :op "D.C."))
NER Entity: (country :name (name :op "Washington"))
Spans:
Span 7-8:  and => and
Span 5-6:  arms => arm
Span 19-20:  based => base-01
Span 0-2:  David Albright => (person :name (name :op "David" :op "Albright"))
Span 8-9:  Director => (have-org-role-91 :ARG2 director)
Span 4-5:  former => former
Span 6-7:  inspector => inspect-01
Span 11-17:  Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 21-22:  Washington => (city :name (name :op "Washington"))

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(2, 1, 0),Washington,(city :name (name :op "Washington")),false), Span(19,20,List(3),based,base-01,false), Span(11,17,List(11, 10, 9, 8, 7, 6, 5, 4),Institute for Science and International Security,(organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false), Span(8,9,List(13, 12),Director,(have-org-role-91 :ARG2 director),false), Span(7,8,List(14),and,and,false), Span(6,7,List(15),inspector,inspect-01,false), Span(5,6,List(16),arms,arm,false), Span(4,5,List(17),former,former,false), Span(0,2,List(21, 20, 19, 18),David Albright,(person :name (name :op "David" :op "Albright")),false)),Map(2 -> "Washington", 5 -> name, 12 -> have-org-role-91, 15 -> inspect-01, 8 -> "Science", 21 -> "Albright", 18 -> person, 7 -> "for", 17 -> former, 1 -> name, 4 -> organization, 11 -> "Security", 14 -> and, 20 -> "David", 6 -> "Institute", 0 -> city, 9 -> "and", 16 -> arm, 19 -> name, 3 -> base-01, 10 -> "International", 13 -> director),Map(n -> name, h -> have-org-role-91, b -> base-01, d -> director, p -> person, a -> and, n3 -> name, i -> inspect-01, a2 -> arm, c -> city, f -> former, o -> organization, n2 -> name))),[Ljava.lang.String;@50029372,Annotation([Ljava.lang.String;@e3b3b2f,[Ljava.lang.String;@50f6ac94,[Ljava.lang.String;@6cc4cdb9),Annotation([Ljava.lang.String;@28194a50,[Ljava.lang.String;@7f2cfe3f,[Ledu.cmu.lti.nlp.amr.Dependency;@1a5b6f42),Annotation([Ljava.lang.String;@5038d0b5,[Ljava.lang.String;@32115b28,[Ljava.lang.String;@2ad48653),Annotation([Ljava.lang.String;@6bb4dd34,[Ljava.lang.String;@7d9f158f,[Ledu.cmu.lti.nlp.amr.Entity;@45efd90f))
AMR:
(a / and, op, p / person)
(a2 / arm, mod, f / former)
(b / base-01, ARG0, a / and)
(b / base-01, location, c / city)
(c / city, name, n / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, d / director)
(i / inspect-01, ARG1, a2 / arm)
(i / inspect-01, domain, p / person)
(n / name, op, "Washington")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n2 / name, op, "Security")
(n2 / name, op, "and")
(n2 / name, op, "for")
(n3 / name, op, "Albright")
(n3 / name, op, "David")
(o / organization, name, n2 / name)
(p / person, name, n3 / name)

Decoded in 1,003,834 microseconds
Sentence: Iran stated that Iran is pursuing nuclear technology to produce energy and conduct research.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 11-12:  and => and
Span 12-13:  conduct => conduct-01
Span 10-11:  energy => energy
Span 3-4:  Iran => (country :name (name :op "Iran"))
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 6-7:  nuclear => nucleus
Span 9-10:  produce => produce-01
Span 5-6:  pursuing => pursue-01
Span 13-14:  research => research-01
Span 1-2:  stated => state-01
Span 7-8:  technology => technology

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),research,research-01,false), Span(12,13,List(1),conduct,conduct-01,false), Span(11,12,List(2),and,and,false), Span(10,11,List(3),energy,energy,false), Span(9,10,List(4),produce,produce-01,false), Span(7,8,List(5),technology,technology,false), Span(6,7,List(6),nuclear,nucleus,false), Span(5,6,List(7),pursuing,pursue-01,false), Span(3,4,List(10, 9, 8),Iran,(country :name (name :op "Iran")),false), Span(1,2,List(11),stated,state-01,false), Span(0,1,List(14, 13, 12),Iran,(country :name (name :op "Iran")),false)),Map(2 -> and, 5 -> technology, 12 -> country, 8 -> country, 7 -> pursue-01, 1 -> conduct-01, 4 -> produce-01, 11 -> state-01, 14 -> "Iran", 6 -> nucleus, 0 -> research-01, 9 -> name, 3 -> energy, 10 -> "Iran", 13 -> name),Map(e -> energy, n -> nucleus, t -> technology, p2 -> pursue-01, s -> state-01, p -> produce-01, a -> and, c3 -> country, n3 -> name, r -> research-01, c -> conduct-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@4b8729ff,Annotation([Ljava.lang.String;@61710c6,[Ljava.lang.String;@3214ee6,[Ljava.lang.String;@383dc82c),Annotation([Ljava.lang.String;@4a07d605,[Ljava.lang.String;@74287ea3,[Ledu.cmu.lti.nlp.amr.Dependency;@7d7758be),Annotation([Ljava.lang.String;@2bdd8394,[Ljava.lang.String;@5f9edf14,[Ljava.lang.String;@68746f22),Annotation([Ljava.lang.String;@2f01783a,[Ljava.lang.String;@68878f6d,[Ledu.cmu.lti.nlp.amr.Entity;@41488b16))
AMR:
(a / and, op, c / conduct-01)
(a / and, op, r / research-01)
(c / conduct-01, ARG1, e / energy)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(n2 / name, op, "Iran")
(n3 / name, op, "Iran")
(p / produce-01, ARG0, t / technology)
(p / produce-01, ARG1, a / and)
(p2 / pursue-01, ARG0, c2 / country)
(p2 / pursue-01, ARG1, t / technology)
(r / research-01, ARG1, n / nucleus)
(s / state-01, ARG0, c3 / country)
(s / state-01, ARG1, p2 / pursue-01)

Decoded in 656,337 microseconds
Sentence: The United States and its western allies suspect that Iran's efforts to produce is a precursor to creating a nuclear-weapons infrastructure.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 6-7:  allies => ally-01
Span 3-4:  and => and
Span 18-19:  creating => create-01
Span 11-12:  efforts => effort
Span 23-24:  infrastructure => infrastructure
Span 9-10:  Iran => (country :name (name :op "Iran"))
Span 20-21:  nuclear => nucleus
Span 16-17:  precursor => precursor
Span 13-14:  produce => produce-01
Span 7-8:  suspect => suspect-01
Span 1-3:  United States => (country :name (name :op "United" :op "States"))
Span 22-23:  weapons => weapon
Span 5-6:  western => western

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),infrastructure,infrastructure,false), Span(22,23,List(1),weapons,weapon,false), Span(20,21,List(2),nuclear,nucleus,false), Span(18,19,List(3),creating,create-01,false), Span(16,17,List(4),precursor,precursor,false), Span(13,14,List(5),produce,produce-01,false), Span(11,12,List(6),efforts,effort,false), Span(9,10,List(9, 8, 7),Iran,(country :name (name :op "Iran")),false), Span(7,8,List(10),suspect,suspect-01,false), Span(6,7,List(11),allies,ally-01,false), Span(5,6,List(12),western,western,false), Span(3,4,List(13),and,and,false), Span(1,3,List(17, 16, 15, 14),United States,(country :name (name :op "United" :op "States")),false)),Map(2 -> nucleus, 5 -> produce-01, 12 -> western, 15 -> name, 8 -> name, 7 -> country, 17 -> "States", 1 -> weapon, 4 -> precursor, 11 -> ally-01, 14 -> country, 6 -> effort, 0 -> infrastructure, 9 -> "Iran", 16 -> "United", 3 -> create-01, 10 -> suspect-01, 13 -> and),Map(e -> effort, w -> weapon, n -> nucleus, p2 -> produce-01, s -> suspect-01, p -> precursor, n3 -> name, c3 -> country, a -> ally-01, w2 -> western, i -> infrastructure, a2 -> and, c -> create-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@a8ef162,Annotation([Ljava.lang.String;@2eea88a1,[Ljava.lang.String;@7ac296f6,[Ljava.lang.String;@7fd7a283),Annotation([Ljava.lang.String;@22f59fa,[Ljava.lang.String;@78fa769e,[Ledu.cmu.lti.nlp.amr.Dependency;@16612a51),Annotation([Ljava.lang.String;@54e041a4,[Ljava.lang.String;@2c78324b,[Ljava.lang.String;@79defdc),Annotation([Ljava.lang.String;@18317edc,[Ljava.lang.String;@4e0ae11f,[Ledu.cmu.lti.nlp.amr.Entity;@238d68ff))
AMR:
(a / ally-01, ARG1, w2 / western)
(a / ally-01, ARG2, c3 / country)
(a2 / and, op, a / ally-01)
(c / create-01, ARG1, i / infrastructure)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(e / effort, poss, c2 / country)
(e / effort, purpose, p2 / produce-01)
(i / infrastructure, mod, w / weapon)
(n2 / name, op, "Iran")
(n3 / name, op, "States")
(n3 / name, op, "United")
(p / precursor, prep-to, c / create-01)
(p2 / produce-01, ARG1, p / precursor)
(s / suspect-01, ARG0, c3 / country)
(s / suspect-01, ARG1, p / precursor)
(w / weapon, mod, n / nucleus)

Decoded in 538,634 microseconds
Sentence: Low-grade uranium production is legal under international arms-control regulations.

Spans:
Span 9-10:  arms => arm
Span 11-12:  control => control-01
Span 2-3:  grade => grade
Span 8-9:  international => international
Span 6-7:  legal => legal
Span 4-5:  production => produce-01
Span 3-4:  uranium => uranium

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),control,control-01,false), Span(9,10,List(1),arms,arm,false), Span(8,9,List(2),international,international,false), Span(6,7,List(3),legal,legal,false), Span(4,5,List(4),production,produce-01,false), Span(3,4,List(5),uranium,uranium,false), Span(2,3,List(6),grade,grade,false)),Map(2 -> international, 5 -> uranium, 1 -> arm, 4 -> produce-01, 6 -> grade, 0 -> control-01, 3 -> legal),Map(g -> grade, p -> produce-01, a -> arm, i -> international, u -> uranium, l -> legal, c -> control-01))),[Ljava.lang.String;@4b86805d,Annotation([Ljava.lang.String;@5852c06f,[Ljava.lang.String;@4149c063,[Ljava.lang.String;@9cb8225),Annotation([Ljava.lang.String;@76b07f29,[Ljava.lang.String;@38af9828,[Ledu.cmu.lti.nlp.amr.Dependency;@376a0d86),Annotation([Ljava.lang.String;@62656be4,[Ljava.lang.String;@17d919b6,[Ljava.lang.String;@53f3bdbd),Annotation([Ljava.lang.String;@34129c78,[Ljava.lang.String;@7d61eb55,[Ledu.cmu.lti.nlp.amr.Entity;@222a59e6))
AMR:
(a / arm, mod, i / international)
(c / control-01, ARG0, g / grade)
(c / control-01, ARG1, a / arm)
(l / legal, calendar, p / produce-01)
(p / produce-01, ARG1, u / uranium)
(p / produce-01, mod, g / grade)

Decoded in 182,957 microseconds
Sentence: The latest developments in Iran's nuclear technology development show the complex diplomatic and technical challenges facing the incoming foreign policy team of United States President-elect Barack Obama when it takes on the task of stopping Iran from mastering technology that could be used to manufacture and deliver nuclear weapons.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "Barack" :op "Obama"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 26-28:  - elect => (person :name (name :op "Barack" :op "Obama"))
Span 48-49:  and => and
Span 13-14:  and => and
Span 11-12:  complex => complex
Span 43-44:  could => possible
Span 49-50:  deliver => deliver-01
Span 8-9:  development => develop-02
Span 2-3:  developments => develop-02
Span 12-13:  diplomatic => diplomacy
Span 16-17:  facing => face-01
Span 19-20:  foreign => foreign
Span 38-39:  Iran => (country :name (name :op "Iran"))
Span 4-5:  Iran => (country :name (name :op "Iran"))
Span 31-32:  it => it
Span 1-2:  latest => (late :degree most)
Span 47-48:  manufacture => manufacture-01
Span 50-51:  nuclear => nucleus
Span 6-7:  nuclear => nucleus
Span 20-21:  policy => policy
Span 25-26:  President => (have-org-role-91 :ARG2 president)
Span 9-10:  show => show-01
Span 37-38:  stopping => stop-01
Span 32-33:  takes => take-01
Span 35-36:  task => task-01
Span 21-22:  team => team
Span 14-15:  technical => technique
Span 41-42:  technology => technology
Span 7-8:  technology => technology
Span 23-25:  United States => (country :name (name :op "United" :op "States"))
Span 45-46:  used => use-01
Span 51-52:  weapons => weapon

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(0),weapons,weapon,false), Span(50,51,List(1),nuclear,nucleus,false), Span(49,50,List(2),deliver,deliver-01,false), Span(48,49,List(3),and,and,false), Span(47,48,List(4),manufacture,manufacture-01,false), Span(45,46,List(5),used,use-01,false), Span(43,44,List(6),could,possible,false), Span(41,42,List(7),technology,technology,false), Span(38,39,List(10, 9, 8),Iran,(country :name (name :op "Iran")),false), Span(37,38,List(11),stopping,stop-01,false), Span(35,36,List(12),task,task-01,false), Span(32,33,List(13),takes,take-01,false), Span(31,32,List(14),it,it,false), Span(26,28,List(18, 17, 16, 15),- elect,(person :name (name :op "Barack" :op "Obama")),false), Span(25,26,List(20, 19),President,(have-org-role-91 :ARG2 president),false), Span(23,25,List(24, 23, 22, 21),United States,(country :name (name :op "United" :op "States")),false), Span(21,22,List(25),team,team,false), Span(20,21,List(26),policy,policy,false), Span(19,20,List(27),foreign,foreign,false), Span(16,17,List(28),facing,face-01,false), Span(14,15,List(29),technical,technique,false), Span(13,14,List(30),and,and,false), Span(12,13,List(31),diplomatic,diplomacy,false), Span(11,12,List(32),complex,complex,false), Span(9,10,List(33),show,show-01,false), Span(8,9,List(34),development,develop-02,false), Span(7,8,List(35),technology,technology,false), Span(6,7,List(36),nuclear,nucleus,false), Span(4,5,List(39, 38, 37),Iran,(country :name (name :op "Iran")),false), Span(2,3,List(40),developments,develop-02,false), Span(1,2,List(42, 41),latest,(late :degree most),false)),Map(39 -> "Iran", 30 -> and, 2 -> deliver-01, 5 -> use-01, 33 -> show-01, 27 -> foreign, 12 -> task-01, 8 -> country, 15 -> person, 42 -> most, 36 -> nucleus, 21 -> country, 18 -> "Obama", 24 -> "States", 41 -> late, 35 -> technology, 7 -> technology, 1 -> nucleus, 17 -> "Barack", 23 -> "United", 38 -> name, 26 -> policy, 4 -> manufacture-01, 11 -> stop-01, 32 -> complex, 14 -> it, 29 -> technique, 20 -> president, 34 -> develop-02, 28 -> face-01, 6 -> possible, 40 -> develop-02, 9 -> name, 0 -> weapon, 22 -> name, 16 -> name, 37 -> country, 19 -> have-org-role-91, 10 -> "Iran", 3 -> and, 31 -> diplomacy, 25 -> team, 13 -> take-01),Map(n -> nucleus, w -> weapon, h -> have-org-role-91, t4 -> team, s2 -> show-01, t -> technology, m2 -> most, d3 -> develop-02, p2 -> person, c4 -> country, n4 -> name, t6 -> technology, s -> stop-01, m -> manufacture-01, d -> deliver-01, t3 -> take-01, p -> possible, c3 -> complex, a -> and, n3 -> name, p4 -> policy, n6 -> name, d2 -> diplomacy, t2 -> task-01, t5 -> technique, a2 -> and, i -> it, c -> country, f2 -> face-01, l -> late, u -> use-01, d4 -> develop-02, f -> foreign, p3 -> president, n2 -> name, c2 -> country, n5 -> nucleus))),[Ljava.lang.String;@6c7a164b,Annotation([Ljava.lang.String;@4c2bb6e0,[Ljava.lang.String;@3e62d773,[Ljava.lang.String;@4ef74c30),Annotation([Ljava.lang.String;@7283d3eb,[Ljava.lang.String;@638ef7ed,[Ledu.cmu.lti.nlp.amr.Dependency;@4bff7da0),Annotation([Ljava.lang.String;@3f1d2e23,[Ljava.lang.String;@536dbea0,[Ljava.lang.String;@47c81abf),Annotation([Ljava.lang.String;@776a6d9b,[Ljava.lang.String;@21d03963,[Ledu.cmu.lti.nlp.amr.Entity;@1f760b47))
AMR:
(a / and, op, d / deliver-01)
(a / and, op, m / manufacture-01)
(a2 / and, mod, c3 / complex)
(a2 / and, op, d2 / diplomacy)
(a2 / and, op, t5 / technique)
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(c4 / country, name, n6 / name)
(d / deliver-01, ARG1, p2 / person)
(d3 / develop-02, ARG0, c4 / country)
(d3 / develop-02, ARG1, t6 / technology)
(d4 / develop-02, ARG1, d3 / develop-02)
(d4 / develop-02, time, l / late)
(f2 / face-01, ARG1, t4 / team)
(f2 / face-01, ARG6, a2 / and)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, p3 / president)
(h / have-org-role-91, ARG3, t4 / team)
(l / late, degree, m2 / most)
(m / manufacture-01, ARG1, w / weapon)
(n2 / name, op, "Iran")
(n3 / name, op, "Barack")
(n3 / name, op, "Obama")
(n4 / name, op, "States")
(n4 / name, op, "United")
(n6 / name, op, "Iran")
(p / possible, domain, u / use-01)
(p2 / person, name, n3 / name)
(s / stop-01, ARG1, c / country)
(s2 / show-01, ARG0, d4 / develop-02)
(s2 / show-01, ARG1, f2 / face-01)
(t / technology, domain, u / use-01)
(t2 / task-01, ARG0, t / technology)
(t2 / task-01, ARG1, s / stop-01)
(t3 / take-01, ARG0, i / it)
(t3 / take-01, ARG1, t2 / task-01)
(t4 / team, mod, f / foreign)
(t4 / team, mod, p4 / policy)
(t6 / technology, mod, n5 / nucleus)
(u / use-01, ARG1, a / and)
(w / weapon, mod, n / nucleus)

Decoded in 3,209,588 microseconds
Sentence: The administration of United States President George W. Bush in its last months in power has managed to synchronize United States policies with the European Union, British, French and German leaders, to press for tougher sanctions and diplomatic action against Iran.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "George" :op "W." :op "Bush"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "European" :op "Union"))
NER Entity: (thing :name (name :op "British"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "British"))
Spans:
Span 41-42:  action => action
Span 1-2:  administration => administrate-01
Span 39-40:  and => and
Span 30-31:  and => and
Span 27-28:  British => (country :name (name :op "Britain"))
Span 40-41:  diplomatic => diplomacy
Span 24-26:  European Union => (organization :name (name :op "European" :op "Union"))
Span 29-30:  French => (country :name (name :op "France"))
Span 6-9:  George W. Bush => (person :name (name :op "Bush" :op "W." :op "George"))
Span 31-32:  German => (country :name (name :op "Germany"))
Span 43-44:  Iran => (country :name (name :op "Iran"))
Span 11-12:  last => last
Span 32-33:  leaders => (person :ARG0-of lead-02)
Span 16-17:  managed => manage-02
Span 12-13:  months => (temporal-quantity :unit month)
Span 21-22:  policies => policy
Span 14-15:  power => power
Span 5-6:  President => (have-org-role-91 :ARG2 president)
Span 35-36:  press => press
Span 38-39:  sanctions => sanction-02
Span 37-38:  tougher => tough
Span 19-21:  United States => (country :name (name :op "United" :op "States"))
Span 3-5:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(2, 1, 0),Iran,(country :name (name :op "Iran")),false), Span(41,42,List(3),action,action,false), Span(40,41,List(4),diplomatic,diplomacy,false), Span(39,40,List(5),and,and,false), Span(38,39,List(6),sanctions,sanction-02,false), Span(37,38,List(7),tougher,tough,false), Span(35,36,List(8),press,press,false), Span(32,33,List(10, 9),leaders,(person :ARG0-of lead-02),false), Span(31,32,List(13, 12, 11),German,(country :name (name :op "Germany")),false), Span(30,31,List(14),and,and,false), Span(29,30,List(17, 16, 15),French,(country :name (name :op "France")),false), Span(27,28,List(20, 19, 18),British,(country :name (name :op "Britain")),false), Span(24,26,List(24, 23, 22, 21),European Union,(organization :name (name :op "European" :op "Union")),false), Span(21,22,List(25),policies,policy,false), Span(19,21,List(29, 28, 27, 26),United States,(country :name (name :op "United" :op "States")),false), Span(16,17,List(30),managed,manage-02,false), Span(14,15,List(31),power,power,false), Span(12,13,List(33, 32),months,(temporal-quantity :unit month),false), Span(11,12,List(34),last,last,false), Span(6,9,List(39, 38, 37, 36, 35),George W. Bush,(person :name (name :op "Bush" :op "W." :op "George")),false), Span(5,6,List(41, 40),President,(have-org-role-91 :ARG2 president),false), Span(3,5,List(45, 44, 43, 42),United States,(country :name (name :op "United" :op "States")),false), Span(1,2,List(46),administration,administrate-01,false)),Map(45 -> "States", 39 -> "George", 30 -> manage-02, 2 -> "Iran", 5 -> and, 33 -> month, 27 -> name, 12 -> name, 8 -> press, 15 -> country, 42 -> country, 36 -> name, 21 -> organization, 18 -> country, 24 -> "Union", 41 -> president, 35 -> person, 7 -> tough, 1 -> name, 17 -> "France", 44 -> "United", 23 -> "European", 38 -> "W.", 26 -> country, 4 -> diplomacy, 11 -> country, 32 -> temporal-quantity, 14 -> and, 29 -> "States", 20 -> "Britain", 46 -> administrate-01, 34 -> last, 28 -> "United", 6 -> sanction-02, 40 -> have-org-role-91, 43 -> name, 9 -> person, 0 -> country, 22 -> name, 16 -> name, 37 -> "Bush", 19 -> name, 10 -> lead-02, 3 -> action, 31 -> power, 25 -> policy, 13 -> "Germany"),Map(n -> name, h -> have-org-role-91, p5 -> person, t -> tough, m2 -> month, n7 -> name, p2 -> person, a3 -> and, c4 -> country, n4 -> name, s -> sanction-02, d -> diplomacy, m -> manage-02, p -> press, a -> action, c3 -> country, n3 -> name, p4 -> power, n6 -> name, c6 -> country, t2 -> temporal-quantity, l2 -> last, a2 -> and, c -> country, p6 -> president, l -> lead-02, n8 -> name, o -> organization, p3 -> policy, n2 -> name, c2 -> country, a4 -> administrate-01, n5 -> name, c5 -> country))),[Ljava.lang.String;@18ece7f4,Annotation([Ljava.lang.String;@3cce57c7,[Ljava.lang.String;@1cf56a1c,[Ljava.lang.String;@33f676f6),Annotation([Ljava.lang.String;@4c5ae43b,[Ljava.lang.String;@264f218,[Ledu.cmu.lti.nlp.amr.Dependency;@3576ddc2),Annotation([Ljava.lang.String;@35b74c5c,[Ljava.lang.String;@2e570ded,[Ljava.lang.String;@b86de0d),Annotation([Ljava.lang.String;@81d9a72,[Ljava.lang.String;@747f281,[Ledu.cmu.lti.nlp.amr.Entity;@1169afe1))
AMR:
(a / action, location, c / country)
(a / action, mod, d / diplomacy)
(a2 / and, op, a / action)
(a2 / and, op, p / press)
(a2 / and, time, p2 / person)
(a3 / and, op, c2 / country)
(a3 / and, op, c3 / country)
(a3 / and, op, p5 / person)
(a4 / administrate-01, ARG1, p5 / person)
(a4 / administrate-01, ARG2, p4 / power)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n6 / name)
(c6 / country, name, n8 / name)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG1, c6 / country)
(h / have-org-role-91, ARG2, p6 / president)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, c2 / country)
(l / lead-02, ARG6, o / organization)
(m / manage-02, ARG0, p5 / person)
(m / manage-02, ARG1, p3 / policy)
(m2 / month, mod, l2 / last)
(n / name, op, "Iran")
(n2 / name, op, "Germany")
(n3 / name, op, "France")
(n4 / name, op, "Britain")
(n5 / name, op, "European")
(n5 / name, op, "Union")
(n6 / name, op, "States")
(n6 / name, op, "United")
(n7 / name, op, "Bush")
(n7 / name, op, "George")
(n7 / name, op, "W.")
(n8 / name, op, "States")
(n8 / name, op, "United")
(o / organization, name, n5 / name)
(p / press, accompanier, s / sanction-02)
(p3 / policy, mod, c5 / country)
(p5 / person, name, n7 / name)
(p5 / person, prep-as, t2 / temporal-quantity)
(s / sanction-02, ARG1, c4 / country)
(s / sanction-02, mod, t / tough)
(t2 / temporal-quantity, unit, m2 / month)

Decoded in 3,625,782 microseconds
Sentence: The International Atomic Energy Agency is expected to release a report critical of Iran next week.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 11-12:  critical => critical
Span 6-7:  expected => expect-01
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 13-14:  Iran => (country :name (name :op "Iran"))
Span 14-15:  next => next
Span 8-9:  release => release-01
Span 10-11:  report => report
Span 15-16:  week => week

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),week,week,false), Span(14,15,List(1),next,next,false), Span(13,14,List(4, 3, 2),Iran,(country :name (name :op "Iran")),false), Span(11,12,List(5),critical,critical,false), Span(10,11,List(6),report,report,false), Span(8,9,List(7),release,release-01,false), Span(6,7,List(8),expected,expect-01,false), Span(1,5,List(14, 13, 12, 11, 10, 9),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> country, 5 -> critical, 12 -> "Atomic", 8 -> expect-01, 7 -> release-01, 1 -> next, 4 -> "Iran", 11 -> "International", 14 -> "Agency", 6 -> report, 0 -> week, 9 -> organization, 3 -> name, 10 -> name, 13 -> "Energy"),Map(e -> expect-01, n -> next, w -> week, r2 -> release-01, n3 -> name, r -> report, c -> country, o -> organization, c2 -> critical, n2 -> name))),[Ljava.lang.String;@2ca26d77,Annotation([Ljava.lang.String;@4808bc9b,[Ljava.lang.String;@70e38ce1,[Ljava.lang.String;@2ca923bb),Annotation([Ljava.lang.String;@13df2a8c,[Ljava.lang.String;@1ebea008,[Ledu.cmu.lti.nlp.amr.Dependency;@72d6b3ba),Annotation([Ljava.lang.String;@1787f2a0,[Ljava.lang.String;@7de62196,[Ljava.lang.String;@163370c2),Annotation([Ljava.lang.String;@51bf5add,[Ljava.lang.String;@7905a0b8,[Ledu.cmu.lti.nlp.amr.Entity;@35a3d49f))
AMR:
(c / country, name, n2 / name)
(e / expect-01, ARG1, r2 / release-01)
(n2 / name, op, "Iran")
(n3 / name, op, "Agency")
(n3 / name, op, "Atomic")
(n3 / name, op, "Energy")
(n3 / name, op, "International")
(o / organization, name, n3 / name)
(r / report, example, c / country)
(r / report, mod, c2 / critical)
(r2 / release-01, ARG0, o / organization)
(r2 / release-01, ARG1, r / report)
(r2 / release-01, ARG6, w / week)
(w / week, mod, n / next)

Decoded in 292,548 microseconds
Sentence: The International Atomic Energy Agency is the United Nations's nuclear watchdog agency.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
Spans:
Span 12-13:  agency => agency
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 10-11:  nuclear => nucleus
Span 7-9:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),agency,agency,false), Span(10,11,List(1),nuclear,nucleus,false), Span(7,9,List(5, 4, 3, 2),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(1,5,List(11, 10, 9, 8, 7, 6),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> organization, 5 -> "Nations", 8 -> "International", 7 -> name, 1 -> nucleus, 11 -> "Agency", 4 -> "United", 6 -> organization, 9 -> "Atomic", 0 -> agency, 10 -> "Energy", 3 -> name),Map(n -> nucleus, n3 -> name, a -> agency, o2 -> organization, o -> organization, n2 -> name))),[Ljava.lang.String;@389b0789,Annotation([Ljava.lang.String;@13d9cbf5,[Ljava.lang.String;@478db956,[Ljava.lang.String;@6ca18a14),Annotation([Ljava.lang.String;@c667f46,[Ljava.lang.String;@51bd8b5c,[Ledu.cmu.lti.nlp.amr.Dependency;@7b50df34),Annotation([Ljava.lang.String;@1b410b60,[Ljava.lang.String;@2462cb01,[Ljava.lang.String;@19b843ba),Annotation([Ljava.lang.String;@64ec96c6,[Ljava.lang.String;@77659b30,[Ledu.cmu.lti.nlp.amr.Entity;@456d6c1e))
AMR:
(a / agency, domain, o2 / organization)
(a / agency, mod, n / nucleus)
(a / agency, poss, o / organization)
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(n3 / name, op, "Agency")
(n3 / name, op, "Atomic")
(n3 / name, op, "Energy")
(n3 / name, op, "International")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)

Decoded in 33,044 microseconds
Sentence: Due to the Act that no new initiatives regarding Iran's nuclear program emerged from the 081113 Paris talks the hopes of imposing another set of United Nations Security Council sanctions before the end of President Bush's term were decreasing.

NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (country :name (name :op "Paris"))
NER Entity: (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (person :name (name :op "Bush"))
NER Entity: (country :name (name :op "Paris"))
mkDayMonthYear(081113,13,11,2008)
mkDayMonthYear(081113,13,11,08)
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 16-17:  081113 => (date-entity :day 13 :month 11 :year 08)
Span 23-24:  another => another
Span 31-32:  before => before
Span 36-37:  Bush => (person :name (name :op "Bush"))
Span 40-41:  decreasing => decrease-01
Span 13-14:  emerged => emerge-02
Span 33-34:  end => end-01
Span 20-21:  hopes => hope-01
Span 22-23:  imposing => impose-01
Span 7-8:  initiatives => initiate-01
Span 9-10:  Iran => (country :name (name :op "Iran"))
Span 6-7:  new => new
Span 5-6:  no => -
Span 11-12:  nuclear => nucleus
Span 17-18:  Paris => (city :name (name :op "Paris"))
Span 35-36:  President => (have-org-role-91 :ARG2 president)
Span 12-13:  program => program
Span 30-31:  sanctions => sanction-02
Span 18-19:  talks => talk-01
Span 38-39:  term => term
Span 26-30:  United Nations Security Council => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),decreasing,decrease-01,false), Span(38,39,List(1),term,term,false), Span(36,37,List(4, 3, 2),Bush,(person :name (name :op "Bush")),false), Span(35,36,List(6, 5),President,(have-org-role-91 :ARG2 president),false), Span(33,34,List(7),end,end-01,false), Span(31,32,List(8),before,before,false), Span(30,31,List(9),sanctions,sanction-02,false), Span(26,30,List(15, 14, 13, 12, 11, 10),United Nations Security Council,(organization :name (name :op "United" :op "Nations" :op "Security" :op "Council")),false), Span(23,24,List(16),another,another,false), Span(22,23,List(17),imposing,impose-01,false), Span(20,21,List(18),hopes,hope-01,false), Span(18,19,List(19),talks,talk-01,false), Span(17,18,List(22, 21, 20),Paris,(city :name (name :op "Paris")),false), Span(16,17,List(26, 25, 24, 23),081113,(date-entity :day 13 :month 11 :year 08),false), Span(13,14,List(27),emerged,emerge-02,false), Span(12,13,List(28),program,program,false), Span(11,12,List(29),nuclear,nucleus,false), Span(9,10,List(32, 31, 30),Iran,(country :name (name :op "Iran")),false), Span(7,8,List(33),initiatives,initiate-01,false), Span(6,7,List(34),new,new,false), Span(5,6,List(35),no,-,false)),Map(30 -> country, 2 -> person, 5 -> have-org-role-91, 33 -> initiate-01, 27 -> emerge-02, 12 -> "United", 8 -> before, 15 -> "Council", 21 -> name, 18 -> hope-01, 24 -> 13, 35 -> -, 7 -> end-01, 1 -> term, 17 -> impose-01, 23 -> date-entity, 26 -> 08, 4 -> "Bush", 11 -> name, 32 -> "Iran", 14 -> "Security", 29 -> nucleus, 20 -> city, 34 -> new, 28 -> program, 6 -> president, 9 -> sanction-02, 0 -> decrease-01, 22 -> "Paris", 16 -> another, 19 -> talk-01, 10 -> organization, 3 -> name, 31 -> name, 25 -> 11, 13 -> "Nations"),Map(e -> end-01, n -> name, h -> have-org-role-91, h2 -> hope-01, t -> term, 12 -> 11, b -> before, p2 -> president, e2 -> emerge-02, n4 -> nucleus, s -> sanction-02, d -> decrease-01, 1 -> 13, p -> person, a -> another, n3 -> name, n6 -> new, d2 -> date-entity, i2 -> initiate-01, t2 -> talk-01, i -> impose-01, - -> -, c -> city, 0 -> 08, o -> organization, p3 -> program, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@1e13529a,Annotation([Ljava.lang.String;@1ec9bd38,[Ljava.lang.String;@452e19ca,[Ljava.lang.String;@6b0d80ed),Annotation([Ljava.lang.String;@6f8e8894,[Ljava.lang.String;@3cfdd820,[Ledu.cmu.lti.nlp.amr.Dependency;@928763c),Annotation([Ljava.lang.String;@e25951c,[Ljava.lang.String;@15f47664,[Ljava.lang.String;@471a9022),Annotation([Ljava.lang.String;@dc9876b,[Ljava.lang.String;@2f666ebb,[Ledu.cmu.lti.nlp.amr.Entity;@19976a65))
AMR:
(b / before, op, d / decrease-01)
(c / city, name, n3 / name)
(c2 / country, name, n5 / name)
(d / decrease-01, ARG1, e / end-01)
(d2 / date-entity, day, 1 / 13)
(d2 / date-entity, month, 12 / 11)
(d2 / date-entity, year, 0 / 08)
(e / end-01, ARG1, p / person)
(e2 / emerge-02, ARG0, p3 / program)
(e2 / emerge-02, ARG1, t2 / talk-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / hope-01, ARG1, i / impose-01)
(i / impose-01, ARG2, o / organization)
(i / impose-01, ARG6, a / another)
(i2 / initiate-01, ARG1, - / -)
(i2 / initiate-01, mod, n6 / new)
(n / name, op, "Bush")
(n2 / name, op, "Council")
(n2 / name, op, "Nations")
(n2 / name, op, "Security")
(n2 / name, op, "United")
(n3 / name, op, "Paris")
(n5 / name, op, "Iran")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(p3 / program, mod, n4 / nucleus)
(p3 / program, poss, c2 / country)
(s / sanction-02, ARG1, h2 / hope-01)
(s / sanction-02, time, b / before)
(t / term, poss, p / person)
(t2 / talk-01, ARG0, i2 / initiate-01)
(t2 / talk-01, ARG1, c / city)
(t2 / talk-01, time, d2 / date-entity)

Decoded in 3,116,367 microseconds
Sentence: While diplomatic maneuvering is taking place Iran continues to work towards mastering nuclear and missile technology.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 13-14:  and => and
Span 7-8:  continues => continue-01
Span 1-2:  diplomatic => diplomacy
Span 6-7:  Iran => (country :name (name :op "Iran"))
Span 14-15:  missile => missile
Span 12-13:  nuclear => nucleus
Span 5-6:  place => place
Span 4-5:  taking => take-01
Span 15-16:  technology => technology
Span 9-10:  work => work-01

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),technology,technology,false), Span(14,15,List(1),missile,missile,false), Span(13,14,List(2),and,and,false), Span(12,13,List(3),nuclear,nucleus,false), Span(9,10,List(4),work,work-01,false), Span(7,8,List(5),continues,continue-01,false), Span(6,7,List(8, 7, 6),Iran,(country :name (name :op "Iran")),false), Span(5,6,List(9),place,place,false), Span(4,5,List(10),taking,take-01,false), Span(1,2,List(11),diplomatic,diplomacy,false)),Map(2 -> and, 5 -> continue-01, 8 -> "Iran", 7 -> name, 1 -> missile, 11 -> diplomacy, 4 -> work-01, 6 -> country, 9 -> place, 0 -> technology, 10 -> take-01, 3 -> nucleus),Map(w -> work-01, n -> nucleus, t -> technology, d -> diplomacy, m -> missile, p -> place, a -> and, t2 -> take-01, c -> continue-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@a1f72f5,Annotation([Ljava.lang.String;@4b2c5e02,[Ljava.lang.String;@57a3e26a,[Ljava.lang.String;@75c56eb9),Annotation([Ljava.lang.String;@4bc222e,[Ljava.lang.String;@2dc9b0f5,[Ledu.cmu.lti.nlp.amr.Dependency;@6531a794),Annotation([Ljava.lang.String;@3b5fad2d,[Ljava.lang.String;@5e17553a,[Ljava.lang.String;@3eb91815),Annotation([Ljava.lang.String;@56dc1551,[Ljava.lang.String;@102cec62,[Ledu.cmu.lti.nlp.amr.Entity;@74f6c5d8))
AMR:
(a / and, op, n / nucleus)
(a / and, op, t / technology)
(c / continue-01, ARG0, c2 / country)
(c / continue-01, ARG1, d / diplomacy)
(c2 / country, name, n2 / name)
(n2 / name, op, "Iran")
(t / technology, mod, m / missile)
(t2 / take-01, ARG0, c2 / country)
(t2 / take-01, ARG1, p / place)
(w / work-01, ARG0, c2 / country)
(w / work-01, ARG1, a / and)

Decoded in 351,563 microseconds
Sentence: Some Israeli officials have stated their alarm about Iran's test-firing this week of a solid-fuel, two-stage rocket with a range of 1200 miles.

NER Entity: (thing :name (name :op "Israeli"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Israeli"))
Spans:
Span 29-30:  1200 => 1200
Span 7-8:  about => about
Span 6-7:  alarm => alarm-01
Span 12-13:  firing => fire-01
Span 19-20:  fuel => fuel
Span 8-9:  Iran => (country :name (name :op "Iran"))
Span 1-2:  Israeli => (country :name (name :op "Israel"))
Span 30-31:  miles => (distance-quantity :unit mile)
Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Span 27-28:  range => range
Span 24-25:  rocket => rocket
Span 17-18:  solid => solid
Span 0-1:  Some => some
Span 23-24:  stage => stage
Span 4-5:  stated => state-01
Span 10-11:  test => test-01
Span 13-14:  this => this
Span 21-22:  two => 2
Span 14-15:  week => week

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(1, 0),miles,(distance-quantity :unit mile),false), Span(29,30,List(2),1200,1200,false), Span(27,28,List(3),range,range,false), Span(24,25,List(4),rocket,rocket,false), Span(23,24,List(5),stage,stage,false), Span(21,22,List(6),two,2,false), Span(19,20,List(7),fuel,fuel,false), Span(17,18,List(8),solid,solid,false), Span(14,15,List(9),week,week,false), Span(13,14,List(10),this,this,false), Span(12,13,List(11),firing,fire-01,false), Span(10,11,List(12),test,test-01,false), Span(8,9,List(15, 14, 13),Iran,(country :name (name :op "Iran")),false), Span(7,8,List(16),about,about,false), Span(6,7,List(17),alarm,alarm-01,false), Span(4,5,List(18),stated,state-01,false), Span(2,3,List(20, 19),officials,(have-org-role-91 :ARG2 official),false), Span(1,2,List(23, 22, 21),Israeli,(country :name (name :op "Israel")),false), Span(0,1,List(24),Some,some,false)),Map(2 -> 1200, 5 -> stage, 12 -> test-01, 8 -> solid, 15 -> "Iran", 21 -> country, 18 -> state-01, 24 -> some, 7 -> fuel, 1 -> mile, 17 -> alarm-01, 23 -> "Israel", 4 -> rocket, 11 -> fire-01, 14 -> name, 20 -> official, 6 -> 2, 9 -> week, 0 -> distance-quantity, 22 -> name, 16 -> about, 19 -> have-org-role-91, 10 -> this, 3 -> range, 13 -> country),Map(n -> name, w -> week, h -> have-org-role-91, 2 -> 2, s2 -> solid, t -> this, s -> stage, s4 -> some, d -> distance-quantity, m -> mile, 1 -> 1200, r2 -> rocket, a -> about, t2 -> test-01, a2 -> alarm-01, r -> range, s3 -> state-01, c -> country, f2 -> fire-01, f -> fuel, o -> official, n2 -> name, c2 -> country))),[Ljava.lang.String;@27912e3,Annotation([Ljava.lang.String;@34b9f960,[Ljava.lang.String;@43015c69,[Ljava.lang.String;@19b89d4),Annotation([Ljava.lang.String;@4bbf6d0e,[Ljava.lang.String;@30b6ffe0,[Ledu.cmu.lti.nlp.amr.Dependency;@791d1f8b),Annotation([Ljava.lang.String;@2415fc55,[Ljava.lang.String;@14f232c4,[Ljava.lang.String;@13bc8645),Annotation([Ljava.lang.String;@24c22fe,[Ljava.lang.String;@93081b6,[Ledu.cmu.lti.nlp.amr.Entity;@cd1e646))
AMR:
(a2 / alarm-01, ARG0, h / have-org-role-91)
(a2 / alarm-01, ARG1, t2 / test-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / distance-quantity, quant, 1 / 1200)
(d / distance-quantity, unit, m / mile)
(f2 / fire-01, ARG0, c / country)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Iran")
(n2 / name, op, "Israel")
(r / range, poss, d / distance-quantity)
(r2 / rocket, mod, f / fuel)
(r2 / rocket, mod, s / stage)
(r2 / rocket, mod, s2 / solid)
(r2 / rocket, poss, r / range)
(s / stage, quant, 2 / 2)
(s3 / state-01, ARG1, a2 / alarm-01)
(s3 / state-01, duration, a / about)
(s3 / state-01, time, w / week)
(s4 / some, mod, 2 / 2)
(t2 / test-01, ARG0, c / country)
(t2 / test-01, ARG1, r2 / rocket)
(w / week, mod, t / this)

Decoded in 1,424,067 microseconds
Sentence: The city of Tel Aviv is fewer than 650 miles from Iranian territory.

NER Entity: (country :name (name :op "Tel" :op "Aviv"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 8-9:  650 => 650
Span 1-2:  city => city
Span 6-7:  fewer => few
Span 11-12:  Iranian => (country :name (name :op "Iran"))
Span 9-10:  miles => (distance-quantity :unit mile)
Span 3-5:  Tel Aviv => (city :name (name :op "Aviv" :op "Tel"))
Span 12-13:  territory => territory

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),territory,territory,false), Span(11,12,List(3, 2, 1),Iranian,(country :name (name :op "Iran")),false), Span(9,10,List(5, 4),miles,(distance-quantity :unit mile),false), Span(8,9,List(6),650,650,false), Span(6,7,List(7),fewer,few,false), Span(3,5,List(11, 10, 9, 8),Tel Aviv,(city :name (name :op "Aviv" :op "Tel")),false), Span(1,2,List(12),city,city,false)),Map(2 -> name, 5 -> mile, 12 -> city, 8 -> city, 7 -> few, 1 -> country, 4 -> distance-quantity, 11 -> "Tel", 6 -> 650, 0 -> territory, 9 -> name, 3 -> "Iran", 10 -> "Aviv"),Map(n -> name, t -> territory, m -> mile, d -> distance-quantity, c3 -> city, 6 -> 650, c -> country, f -> few, n2 -> name, c2 -> city))),[Ljava.lang.String;@7ba8c737,Annotation([Ljava.lang.String;@1890516e,[Ljava.lang.String;@15a04efb,[Ljava.lang.String;@16c069df),Annotation([Ljava.lang.String;@2bec854f,[Ljava.lang.String;@31edaa7d,[Ledu.cmu.lti.nlp.amr.Dependency;@26adfd2d),Annotation([Ljava.lang.String;@3336e6b6,[Ljava.lang.String;@7c3fdb62,[Ljava.lang.String;@205d38da),Annotation([Ljava.lang.String;@6950ed69,[Ljava.lang.String;@6dd7b5a3,[Ledu.cmu.lti.nlp.amr.Entity;@6f3187b0))
AMR:
(c / country, name, n / name)
(c2 / city, location, c / country)
(c2 / city, name, n2 / name)
(d / distance-quantity, quant, 6 / 650)
(d / distance-quantity, unit, m / mile)
(f / few, op, d / distance-quantity)
(n / name, op, "Iran")
(n2 / name, op, "Aviv")
(n2 / name, op, "Tel")
(t / territory, mod, c / country)
(t / territory, poss, c3 / city)
(t / territory, quant, f / few)

Decoded in 51,239 microseconds
Sentence: 2002-04-06

mkDayMonthYear(2002-04-06,06,04,2002)
mkDayMonthYear(2002-04-06,06,04,2002)
Spans:
Span 0-1:  2002-04-06 => (date-entity :day 6 :month 4 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-04-06,(date-entity :day 6 :month 4 :year 2002),false)),Map(2 -> 4, 1 -> 6, 0 -> date-entity, 3 -> 2002),Map(2 -> 2002, d -> date-entity, 4 -> 4, 6 -> 6))),[Ljava.lang.String;@2663e964,Annotation([Ljava.lang.String;@48b67364,[Ljava.lang.String;@189cbd7c,[Ljava.lang.String;@7bf3a5d8),Annotation([Ljava.lang.String;@42e25b0b,[Ljava.lang.String;@39b43d60,[Ledu.cmu.lti.nlp.amr.Dependency;@44be0077),Annotation([Ljava.lang.String;@2205a05d,[Ljava.lang.String;@72ef8d15,[Ljava.lang.String;@6aa8e115),Annotation([Ljava.lang.String;@5e21e98f,[Ljava.lang.String;@51a9ad5e,[Ledu.cmu.lti.nlp.amr.Entity;@5f20155b))
AMR:
(d / date-entity, day, 6 / 6)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2002)

Decoded in 7,406 microseconds
Sentence: Russian Federation (RU)

NER Entity: (country :name (name :op "Russian" :op "Federation"))
Spans:
Span 0-2:  Russian Federation => (country :name (name :op "Russian" :op "Federation"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,2,List(3, 2, 1, 0),Russian Federation,(country :name (name :op "Russian" :op "Federation")),false)),Map(2 -> "Russian", 1 -> name, 0 -> country, 3 -> "Federation"),Map(n -> name, c -> country))),[Ljava.lang.String;@72ade7e3,Annotation([Ljava.lang.String;@239105a8,[Ljava.lang.String;@3fce8fd9,[Ljava.lang.String;@609bcfb6),Annotation([Ljava.lang.String;@7d94beb9,[Ljava.lang.String;@560348e6,[Ledu.cmu.lti.nlp.amr.Dependency;@1df8b5b8),Annotation([Ljava.lang.String;@23202fce,[Ljava.lang.String;@7b993c65,[Ljava.lang.String;@37911f88),Annotation([Ljava.lang.String;@6f1c29b7,[Ljava.lang.String;@4d6025c5,[Ledu.cmu.lti.nlp.amr.Entity;@7f284218))
AMR:
(c / country, name, n / name)
(n / name, op, "Federation")
(n / name, op, "Russian")

Decoded in 6,384 microseconds
Sentence: International; science; energy; weapons

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  energy => energy
Span 0-1:  International => international
Span 2-3:  science => science
Span 6-7:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),weapons,weapon,false), Span(5,6,List(1),;,and,false), Span(4,5,List(2),energy,energy,false), Span(3,4,List(3),;,and,false), Span(2,3,List(4),science,science,false), Span(1,2,List(5),;,and,false), Span(0,1,List(6),International,international,false)),Map(2 -> energy, 5 -> and, 1 -> and, 4 -> science, 6 -> international, 0 -> weapon, 3 -> and),Map(e -> energy, w -> weapon, a3 -> and, s -> science, a -> and, i -> international, a2 -> and))),[Ljava.lang.String;@407a7f2a,Annotation([Ljava.lang.String;@4ea5b703,[Ljava.lang.String;@2a7ed1f,[Ljava.lang.String;@3fa247d1),Annotation([Ljava.lang.String;@2cb2fc20,[Ljava.lang.String;@4f4c4b1a,[Ledu.cmu.lti.nlp.amr.Dependency;@723e88f9),Annotation([Ljava.lang.String;@5f0fd5a0,[Ljava.lang.String;@64e7619d,[Ljava.lang.String;@495ee280),Annotation([Ljava.lang.String;@4fa1c212,[Ljava.lang.String;@6ea2bc93,[Ledu.cmu.lti.nlp.amr.Entity;@3116c353))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, s / science)
(a2 / and, op, w / weapon)
(a3 / and, op, a2 / and)
(a3 / and, op, e / energy)
(a3 / and, op, i / international)

Decoded in 23,490 microseconds
Sentence: A high-security Russian laboratory complex storing anthrax, plague and other deadly bacteria faces loosing electricity for lack of payment to the mosenergo electric utility.

NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 11-12:  and => and
Span 8-9:  anthrax => anthrax
Span 14-15:  bacteria => bacterium
Span 6-7:  complex => complex
Span 17-18:  electricity => electricity
Span 15-16:  faces => face-01
Span 1-2:  high => high
Span 5-6:  laboratory => laboratory
Span 19-20:  lack => lack-01
Span 24-27:  mosenergo electric utility => (utility :name (name :op "utility" :op "electric" :op "Mosenergo"))
Span 12-13:  other => other
Span 10-11:  plague => plague
Span 4-5:  Russian => (country :name (name :op "Russia"))
Span 3-4:  security => security
Span 7-8:  storing => store-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,27,List(4, 3, 2, 1, 0),mosenergo electric utility,(utility :name (name :op "utility" :op "electric" :op "Mosenergo")),false), Span(19,20,List(5),lack,lack-01,false), Span(17,18,List(6),electricity,electricity,false), Span(15,16,List(7),faces,face-01,false), Span(14,15,List(8),bacteria,bacterium,false), Span(12,13,List(9),other,other,false), Span(11,12,List(10),and,and,false), Span(10,11,List(11),plague,plague,false), Span(8,9,List(12),anthrax,anthrax,false), Span(7,8,List(13),storing,store-01,false), Span(6,7,List(14),complex,complex,false), Span(5,6,List(15),laboratory,laboratory,false), Span(4,5,List(18, 17, 16),Russian,(country :name (name :op "Russia")),false), Span(3,4,List(19),security,security,false), Span(1,2,List(20),high,high,false)),Map(2 -> "utility", 5 -> lack-01, 12 -> anthrax, 15 -> laboratory, 8 -> bacterium, 18 -> "Russia", 7 -> face-01, 17 -> name, 1 -> name, 4 -> "Mosenergo", 11 -> plague, 14 -> complex, 20 -> high, 6 -> electricity, 0 -> utility, 9 -> other, 16 -> country, 19 -> security, 3 -> "electric", 10 -> and, 13 -> store-01),Map(e -> electricity, n -> name, h -> high, s2 -> security, b -> bacterium, s -> store-01, p -> plague, a -> and, l2 -> laboratory, a2 -> anthrax, c -> complex, u -> utility, l -> lack-01, f -> face-01, o -> other, n2 -> name, c2 -> country))),[Ljava.lang.String;@f627d13,Annotation([Ljava.lang.String;@4e928fbf,[Ljava.lang.String;@352ff4da,[Ljava.lang.String;@3224a577),Annotation([Ljava.lang.String;@2e32ccc5,[Ljava.lang.String;@748741cb,[Ledu.cmu.lti.nlp.amr.Dependency;@3e44f2a5),Annotation([Ljava.lang.String;@295cf707,[Ljava.lang.String;@1130520d,[Ljava.lang.String;@5f77d0f9),Annotation([Ljava.lang.String;@463fd068,[Ljava.lang.String;@895e367,[Ledu.cmu.lti.nlp.amr.Entity;@1b266842))
AMR:
(a / and, op, a2 / anthrax)
(a / and, op, b / bacterium)
(a / and, op, p / plague)
(c / complex, mod, c2 / country)
(c / complex, mod, l2 / laboratory)
(c / complex, mod, s2 / security)
(c2 / country, name, n2 / name)
(f / face-01, ARG0, c / complex)
(f / face-01, ARG1, e / electricity)
(l / lack-01, ARG0, c / complex)
(l / lack-01, ARG1, o / other)
(n / name, op, "Mosenergo")
(n / name, op, "electric")
(n / name, op, "utility")
(n2 / name, op, "Russia")
(s / store-01, ARG0, c / complex)
(s / store-01, ARG1, a / and)
(s2 / security, mod, h / high)
(u / utility, name, n / name)
(u / utility, poss, e / electricity)

Decoded in 929,357 microseconds
Sentence: A large repository of anthrax, plague and other deadly bacteria stored in a high-security Russian laboratory complex 100 miles south of Moscow is facing the threat of loosing electricity.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 20-21:  100 => 100
Span 7-8:  and => and
Span 4-5:  anthrax => anthrax
Span 10-11:  bacteria => bacterium
Span 19-20:  complex => complex
Span 31-32:  electricity => electricity
Span 26-27:  facing => face-01
Span 14-15:  high => high
Span 18-19:  laboratory => laboratory
Span 1-2:  large => large
Span 21-22:  miles => (distance-quantity :unit mile)
Span 24-25:  Moscow => (city :name (name :op "Moscow"))
Span 8-9:  other => other
Span 6-7:  plague => plague
Span 2-3:  repository => repository
Span 17-18:  Russian => (country :name (name :op "Russia"))
Span 16-17:  security => security
Span 22-23:  south => south
Span 11-12:  stored => store-01
Span 28-29:  threat => threaten-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),electricity,electricity,false), Span(28,29,List(1),threat,threaten-01,false), Span(26,27,List(2),facing,face-01,false), Span(24,25,List(5, 4, 3),Moscow,(city :name (name :op "Moscow")),false), Span(22,23,List(6),south,south,false), Span(21,22,List(8, 7),miles,(distance-quantity :unit mile),false), Span(20,21,List(9),100,100,false), Span(19,20,List(10),complex,complex,false), Span(18,19,List(11),laboratory,laboratory,false), Span(17,18,List(14, 13, 12),Russian,(country :name (name :op "Russia")),false), Span(16,17,List(15),security,security,false), Span(14,15,List(16),high,high,false), Span(11,12,List(17),stored,store-01,false), Span(10,11,List(18),bacteria,bacterium,false), Span(8,9,List(19),other,other,false), Span(7,8,List(20),and,and,false), Span(6,7,List(21),plague,plague,false), Span(4,5,List(22),anthrax,anthrax,false), Span(2,3,List(23),repository,repository,false), Span(1,2,List(24),large,large,false)),Map(2 -> face-01, 5 -> "Moscow", 12 -> country, 8 -> mile, 15 -> security, 21 -> plague, 18 -> bacterium, 24 -> large, 7 -> distance-quantity, 1 -> threaten-01, 17 -> store-01, 23 -> repository, 4 -> name, 11 -> laboratory, 14 -> "Russia", 20 -> and, 6 -> south, 9 -> 100, 0 -> electricity, 22 -> anthrax, 16 -> high, 19 -> other, 10 -> complex, 3 -> city, 13 -> name),Map(e -> electricity, n -> name, h -> high, s2 -> security, b -> bacterium, t -> threaten-01, s -> south, d -> distance-quantity, m -> mile, 1 -> 100, p -> plague, a -> and, c3 -> country, l2 -> large, r -> repository, a2 -> anthrax, s3 -> store-01, c -> city, l -> laboratory, f -> face-01, o -> other, c2 -> complex, n2 -> name))),[Ljava.lang.String;@7a3793c7,Annotation([Ljava.lang.String;@42b3b079,[Ljava.lang.String;@651aed93,[Ljava.lang.String;@4dd6fd0a),Annotation([Ljava.lang.String;@bb9e6dc,[Ljava.lang.String;@5456afaa,[Ledu.cmu.lti.nlp.amr.Dependency;@6692b6c6),Annotation([Ljava.lang.String;@1cd629b3,[Ljava.lang.String;@589da3f3,[Ljava.lang.String;@39d76cb5),Annotation([Ljava.lang.String;@4a00d9cf,[Ljava.lang.String;@6736fa8d,[Ledu.cmu.lti.nlp.amr.Entity;@52815fa3))
AMR:
(a / and, consist, r / repository)
(a / and, op, a2 / anthrax)
(a / and, op, b / bacterium)
(a / and, op, p / plague)
(b / bacterium, mod, o / other)
(c / city, name, n / name)
(c2 / complex, mod, c3 / country)
(c2 / complex, mod, l / laboratory)
(c2 / complex, mod, s2 / security)
(c3 / country, name, n2 / name)
(d / distance-quantity, quant, 1 / 100)
(d / distance-quantity, unit, m / mile)
(f / face-01, ARG0, c / city)
(f / face-01, ARG1, t / threaten-01)
(f / face-01, ARG2, e / electricity)
(l2 / large, mod, s / south)
(n / name, op, "Moscow")
(n2 / name, op, "Russia")
(r / repository, mod, l2 / large)
(s2 / security, mod, h / high)
(s3 / store-01, ARG1, r / repository)
(s3 / store-01, location, c2 / complex)
(t / threaten-01, ARG0, r / repository)
(t / threaten-01, ARG1, d / distance-quantity)

Decoded in 1,095,511 microseconds
Sentence: An official from the Moscow region's mosenergo electric utility arrived recently at the Russian laboratory complex and threatened to turn off the electricity for lack of payment.

NER Entity: (country :name (name :op "Moscow"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Moscow"))
Spans:
Span 17-18:  and => and
Span 10-11:  arrived => arrive-01
Span 16-17:  complex => complex
Span 23-24:  electricity => electricity
Span 15-16:  laboratory => laboratory
Span 25-26:  lack => lack-01
Span 4-5:  Moscow => (city :name (name :op "Moscow"))
Span 7-10:  mosenergo electric utility => (utility :name (name :op "utility" :op "electric" :op "Mosenergo"))
Span 21-22:  off => off
Span 1-2:  official => (have-org-role-91 :ARG2 official)
Span 11-12:  recently => recent
Span 5-6:  region => region
Span 14-15:  Russian => (country :name (name :op "Russia"))
Span 18-19:  threatened => threaten-01
Span 20-21:  turn => turn-07

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),lack,lack-01,false), Span(23,24,List(1),electricity,electricity,false), Span(21,22,List(2),off,off,false), Span(20,21,List(3),turn,turn-07,false), Span(18,19,List(4),threatened,threaten-01,false), Span(17,18,List(5),and,and,false), Span(16,17,List(6),complex,complex,false), Span(15,16,List(7),laboratory,laboratory,false), Span(14,15,List(10, 9, 8),Russian,(country :name (name :op "Russia")),false), Span(11,12,List(11),recently,recent,false), Span(10,11,List(12),arrived,arrive-01,false), Span(7,10,List(17, 16, 15, 14, 13),mosenergo electric utility,(utility :name (name :op "utility" :op "electric" :op "Mosenergo")),false), Span(5,6,List(18),region,region,false), Span(4,5,List(21, 20, 19),Moscow,(city :name (name :op "Moscow")),false), Span(1,2,List(23, 22),official,(have-org-role-91 :ARG2 official),false)),Map(2 -> off, 5 -> and, 12 -> arrive-01, 15 -> "utility", 8 -> country, 21 -> "Moscow", 18 -> region, 7 -> laboratory, 17 -> "Mosenergo", 1 -> electricity, 23 -> official, 4 -> threaten-01, 11 -> recent, 14 -> name, 20 -> name, 6 -> complex, 22 -> have-org-role-91, 0 -> lack-01, 9 -> name, 16 -> "electric", 19 -> city, 3 -> turn-07, 10 -> "Russia", 13 -> utility),Map(e -> electricity, n -> name, h -> have-org-role-91, t -> turn-07, r2 -> region, n3 -> name, c3 -> city, a -> and, o2 -> official, t2 -> threaten-01, l2 -> laboratory, r -> recent, a2 -> arrive-01, c -> complex, l -> lack-01, u -> utility, o -> off, n2 -> name, c2 -> country))),[Ljava.lang.String;@50313382,Annotation([Ljava.lang.String;@1cb346ea,[Ljava.lang.String;@4c012563,[Ljava.lang.String;@14a50707),Annotation([Ljava.lang.String;@4d518b32,[Ljava.lang.String;@4bd31064,[Ledu.cmu.lti.nlp.amr.Dependency;@e3c0e40),Annotation([Ljava.lang.String;@329dbdbf,[Ljava.lang.String;@7354b8c5,[Ljava.lang.String;@20d7d6fb),Annotation([Ljava.lang.String;@4ef782af,[Ljava.lang.String;@11d8ae8b,[Ledu.cmu.lti.nlp.amr.Entity;@479cbee5))
AMR:
(a / and, op, a2 / arrive-01)
(a / and, op, t2 / threaten-01)
(a2 / arrive-01, ARG1, r / recent)
(a2 / arrive-01, ARG4, c / complex)
(c / complex, mod, c2 / country)
(c / complex, mod, l2 / laboratory)
(c2 / country, name, n / name)
(c3 / city, name, n3 / name)
(h / have-org-role-91, ARG1, u / utility)
(h / have-org-role-91, ARG2, o2 / official)
(l / lack-01, ARG1, o / off)
(n / name, op, "Russia")
(n2 / name, op, "Mosenergo")
(n2 / name, op, "electric")
(n2 / name, op, "utility")
(n3 / name, op, "Moscow")
(r2 / region, mod, c3 / city)
(t / turn-07, ARG0, h / have-org-role-91)
(t / turn-07, ARG1, e / electricity)
(t / turn-07, ARG6, o / off)
(t2 / threaten-01, ARG1, t / turn-07)
(u / utility, location, r2 / region)
(u / utility, name, n2 / name)

Decoded in 1,537,744 microseconds
Sentence: The Russian laboratory complex is a 90-building campus and served as the location for Russia's secret biological weapons program in the Soviet era.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Soviet"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 6-7:  90 => 90
Span 10-11:  and => and
Span 19-20:  biological => biology
Span 8-9:  building => build-01
Span 9-10:  campus => campus
Span 3-4:  complex => complex
Span 25-26:  era => era
Span 2-3:  laboratory => laboratory
Span 14-15:  location => location
Span 21-22:  program => program
Span 16-17:  Russia => (country :name (name :op "Russia"))
Span 1-2:  Russian => (country :name (name :op "Russia"))
Span 18-19:  secret => secret
Span 11-12:  served => serve-01
Span 24-25:  Soviet => "Soviet"
Span 20-21:  weapons => weapon

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),era,era,false), Span(24,25,List(1),Soviet,"Soviet",false), Span(21,22,List(2),program,program,false), Span(20,21,List(3),weapons,weapon,false), Span(19,20,List(4),biological,biology,false), Span(18,19,List(5),secret,secret,false), Span(16,17,List(8, 7, 6),Russia,(country :name (name :op "Russia")),false), Span(14,15,List(9),location,location,false), Span(11,12,List(10),served,serve-01,false), Span(10,11,List(11),and,and,false), Span(9,10,List(12),campus,campus,false), Span(8,9,List(13),building,build-01,false), Span(6,7,List(14),90,90,false), Span(3,4,List(15),complex,complex,false), Span(2,3,List(16),laboratory,laboratory,false), Span(1,2,List(19, 18, 17),Russian,(country :name (name :op "Russia")),false)),Map(2 -> program, 5 -> secret, 12 -> campus, 15 -> complex, 8 -> "Russia", 18 -> name, 7 -> name, 17 -> country, 1 -> "Soviet", 4 -> biology, 11 -> and, 14 -> 90, 6 -> country, 0 -> era, 9 -> location, 16 -> laboratory, 19 -> "Russia", 3 -> weapon, 10 -> serve-01, 13 -> build-01),Map(S -> "Soviet", e -> era, w -> weapon, n -> name, s2 -> serve-01, b -> biology, b2 -> build-01, c4 -> country, s -> secret, p -> program, c3 -> complex, a -> and, l2 -> laboratory, c -> country, l -> location, 9 -> 90, n2 -> name, c2 -> campus))),[Ljava.lang.String;@59e2d8e3,Annotation([Ljava.lang.String;@2b72cb8a,[Ljava.lang.String;@7f8a9499,[Ljava.lang.String;@5d43661b),Annotation([Ljava.lang.String;@12299890,[Ljava.lang.String;@2fba3fc4,[Ledu.cmu.lti.nlp.amr.Dependency;@4bf48f6),Annotation([Ljava.lang.String;@420a85c4,[Ljava.lang.String;@1c39680d,[Ljava.lang.String;@62833051),Annotation([Ljava.lang.String;@1c852c0f,[Ljava.lang.String;@a37aefe,[Ledu.cmu.lti.nlp.amr.Entity;@5d99c6b5))
AMR:
(a / and, op, s2 / serve-01)
(b2 / build-01, ARG0, S / "Soviet")
(b2 / build-01, ARG1, c3 / complex)
(b2 / build-01, ARG6, 9 / 90)
(c / country, name, n / name)
(c2 / campus, domain, c3 / complex)
(c3 / complex, mod, c4 / country)
(c3 / complex, mod, l2 / laboratory)
(c4 / country, name, n2 / name)
(n / name, op, "Russia")
(n2 / name, op, "Russia")
(p / program, location, l / location)
(p / program, mod, s / secret)
(p / program, poss, c / country)
(p / program, topic, w / weapon)
(s2 / serve-01, ARG0, c2 / campus)
(s2 / serve-01, ARG1, l / location)
(s2 / serve-01, time, e / era)
(w / weapon, mod, b / biology)

Decoded in 601,075 microseconds
Sentence: An incorrect headline in the newspaper Izvestia stated that deadly viruses from a Moscow regional depository threaten Moscow.

NER Entity: (organization :name (name :op "Izvestia"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (organization :name (name :op "Izvestia"))
Spans:
Span 15-16:  depository => depository
Span 2-3:  headline => headline
Span 1-2:  incorrect => (correct :polarity -)
Span 6-7:  Izvestia => (name :op "Izvestia")
Span 17-18:  Moscow => (city :name (name :op "Moscow"))
Span 13-14:  Moscow => (city :name (name :op "Moscow"))
Span 5-6:  newspaper => newspaper
Span 14-15:  regional => region
Span 7-8:  stated => state-01
Span 16-17:  threaten => threaten-01
Span 10-11:  viruses => virus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(2, 1, 0),Moscow,(city :name (name :op "Moscow")),false), Span(16,17,List(3),threaten,threaten-01,false), Span(15,16,List(4),depository,depository,false), Span(14,15,List(5),regional,region,false), Span(13,14,List(8, 7, 6),Moscow,(city :name (name :op "Moscow")),false), Span(10,11,List(9),viruses,virus,false), Span(7,8,List(10),stated,state-01,false), Span(6,7,List(12, 11),Izvestia,(name :op "Izvestia"),false), Span(5,6,List(13),newspaper,newspaper,false), Span(2,3,List(14),headline,headline,false), Span(1,2,List(16, 15),incorrect,(correct :polarity -),false)),Map(2 -> "Moscow", 5 -> region, 12 -> "Izvestia", 15 -> correct, 8 -> "Moscow", 7 -> name, 1 -> name, 4 -> depository, 11 -> name, 14 -> headline, 6 -> city, 0 -> city, 9 -> virus, 16 -> -, 3 -> threaten-01, 10 -> state-01, 13 -> newspaper),Map(n -> name, h -> headline, t -> threaten-01, n4 -> newspaper, s -> state-01, v -> virus, d -> depository, n3 -> name, c3 -> correct, r -> region, c -> city, c2 -> city, n2 -> name))),[Ljava.lang.String;@266374ef,Annotation([Ljava.lang.String;@13b3d178,[Ljava.lang.String;@24c4ddae,[Ljava.lang.String;@37fb0bed),Annotation([Ljava.lang.String;@a82c5f1,[Ljava.lang.String;@7b7fdc8,[Ledu.cmu.lti.nlp.amr.Dependency;@51c693d),Annotation([Ljava.lang.String;@6a57ae10,[Ljava.lang.String;@766653e6,[Ljava.lang.String;@4e07b95f),Annotation([Ljava.lang.String;@28b46423,[Ljava.lang.String;@7fc4780b,[Ledu.cmu.lti.nlp.amr.Entity;@3b79fd76))
AMR:
(c / city, name, n / name)
(c2 / city, name, n2 / name)
(c3 / correct, polarity, -)
(d / depository, mod, c2 / city)
(d / depository, mod, r / region)
(h / headline, medium, n4 / newspaper)
(h / headline, mod, c3 / correct)
(n / name, op, "Moscow")
(n2 / name, op, "Moscow")
(n3 / name, op, "Izvestia")
(n4 / newspaper, name, n3 / name)
(s / state-01, ARG0, h / headline)
(s / state-01, ARG1, t / threaten-01)
(t / threaten-01, ARG1, c / city)
(t / threaten-01, ARG2, c2 / city)
(v / virus, source, d / depository)

Decoded in 94,132 microseconds
Sentence: There are no viruses at the State Scientific Center of applied Microbiology in obolensk.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Spans:
Span 2-3:  no => -
Span 13-14:  obolensk => (city :name (name :op "Obolensk"))
Span 6-12:  State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Span 3-4:  viruses => virus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(2, 1, 0),obolensk,(city :name (name :op "Obolensk")),false), Span(6,12,List(10, 9, 8, 7, 6, 5, 4, 3),State Scientific Center of applied Microbiology,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology")),false), Span(3,4,List(11),viruses,virus,false), Span(2,3,List(12),no,-,false)),Map(2 -> "Obolensk", 5 -> "State", 12 -> -, 8 -> "of", 7 -> "Center", 1 -> name, 4 -> name, 11 -> virus, 6 -> "Scientific", 0 -> city, 9 -> "applied", 3 -> organization, 10 -> "Microbiology"),Map(n -> name, v -> virus, - -> -, c -> city, o -> organization, n2 -> name))),[Ljava.lang.String;@48c76607,Annotation([Ljava.lang.String;@43599640,[Ljava.lang.String;@1f81aa00,[Ljava.lang.String;@6b6776cb),Annotation([Ljava.lang.String;@1863d2fe,[Ljava.lang.String;@1787bc24,[Ledu.cmu.lti.nlp.amr.Dependency;@544d57e),Annotation([Ljava.lang.String;@55c53a33,[Ljava.lang.String;@53b7f657,[Ljava.lang.String;@797b0699),Annotation([Ljava.lang.String;@5a37d3ed,[Ljava.lang.String;@26df6e3a,[Ledu.cmu.lti.nlp.amr.Entity;@4a3631f8))
AMR:
(- / -, calendar, v / virus)
(- / -, op, o / organization)
(c / city, name, n / name)
(n / name, op, "Obolensk")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "applied")
(n2 / name, op, "of")
(o / organization, location, c / city)
(o / organization, name, n2 / name)

Decoded in 33,651 microseconds
Sentence: At the State Scientific Center of applied microbiology there is every kind of deadly bacteria that was studied for use in the secret biological weapons program of the Soviet Union.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (country :name (name :op "Soviet" :op "Union"))
Spans:
Span 14-15:  bacteria => bacterium
Span 23-24:  biological => biology
Span 10-11:  every => every
Span 11-12:  kind => kind
Span 25-26:  program => program
Span 22-23:  secret => secret
Span 28-30:  Soviet Union => (country :name (name :op "Union" :op "Soviet"))
Span 2-6:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 17-18:  studied => study-01
Span 19-20:  use => use-01
Span 24-25:  weapons => weapon

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,30,List(3, 2, 1, 0),Soviet Union,(country :name (name :op "Union" :op "Soviet")),false), Span(25,26,List(4),program,program,false), Span(24,25,List(5),weapons,weapon,false), Span(23,24,List(6),biological,biology,false), Span(22,23,List(7),secret,secret,false), Span(19,20,List(8),use,use-01,false), Span(17,18,List(9),studied,study-01,false), Span(14,15,List(10),bacteria,bacterium,false), Span(11,12,List(11),kind,kind,false), Span(10,11,List(12),every,every,false), Span(2,6,List(18, 17, 16, 15, 14, 13),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false)),Map(2 -> "Union", 5 -> weapon, 12 -> every, 15 -> "State", 8 -> use-01, 18 -> "of", 7 -> secret, 17 -> "Center", 1 -> name, 4 -> program, 11 -> kind, 14 -> name, 6 -> biology, 0 -> country, 9 -> study-01, 16 -> "Scientific", 3 -> "Soviet", 10 -> bacterium, 13 -> organization),Map(e -> every, n -> name, w -> weapon, s2 -> study-01, b -> biology, k -> kind, b2 -> bacterium, s -> secret, p -> program, c -> country, u -> use-01, o -> organization, n2 -> name))),[Ljava.lang.String;@6b58b9e9,Annotation([Ljava.lang.String;@f14a7d4,[Ljava.lang.String;@52e7a6b2,[Ljava.lang.String;@29a5f4e7),Annotation([Ljava.lang.String;@79c97cb,[Ljava.lang.String;@2d9caaeb,[Ledu.cmu.lti.nlp.amr.Dependency;@42a15bdc),Annotation([Ljava.lang.String;@44a59da3,[Ljava.lang.String;@27e47833,[Ljava.lang.String;@6f6745d6),Annotation([Ljava.lang.String;@27508c5d,[Ljava.lang.String;@4f704591,[Ledu.cmu.lti.nlp.amr.Entity;@4b5189ac))
AMR:
(b2 / bacterium, mod, k / kind)
(c / country, name, n / name)
(k / kind, mod, e / every)
(n / name, op, "Soviet")
(n / name, op, "Union")
(n2 / name, op, "Center")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(o / organization, name, n2 / name)
(p / program, mod, s / secret)
(p / program, poss, c / country)
(p / program, topic, w / weapon)
(s2 / study-01, ARG1, b2 / bacterium)
(u / use-01, ARG0, o / organization)
(u / use-01, ARG1, b2 / bacterium)
(u / use-01, ARG2, p / program)
(w / weapon, mod, b / biology)

Decoded in 290,614 microseconds
Sentence: A large virus repository is located in Siberia.

NER Entity: (country :name (name :op "Siberia"))
NER Entity: (country :name (name :op "Siberia"))
Spans:
Span 1-2:  large => large
Span 5-6:  located => locate-01
Span 3-4:  repository => repository
Span 7-8:  Siberia => (country-region :name (name :op "Siberia"))
Span 2-3:  virus => virus

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(2, 1, 0),Siberia,(country-region :name (name :op "Siberia")),false), Span(5,6,List(3),located,locate-01,false), Span(3,4,List(4),repository,repository,false), Span(2,3,List(5),virus,virus,false), Span(1,2,List(6),large,large,false)),Map(2 -> "Siberia", 5 -> virus, 1 -> name, 4 -> repository, 6 -> large, 0 -> country-region, 3 -> locate-01),Map(n -> name, v -> virus, l2 -> large, r -> repository, l -> locate-01, c -> country-region))),[Ljava.lang.String;@1e4d3ce5,Annotation([Ljava.lang.String;@3ddc6915,[Ljava.lang.String;@704deff2,[Ljava.lang.String;@379614be),Annotation([Ljava.lang.String;@404bbcbd,[Ljava.lang.String;@1e81f160,[Ledu.cmu.lti.nlp.amr.Dependency;@1acaf3d),Annotation([Ljava.lang.String;@6986852,[Ljava.lang.String;@1bab8268,[Ljava.lang.String;@a307a8c),Annotation([Ljava.lang.String;@6e01f9b0,[Ljava.lang.String;@2b9ed6da,[Ledu.cmu.lti.nlp.amr.Entity;@6c61a903))
AMR:
(c / country-region, name, n / name)
(l / locate-01, ARG1, v / virus)
(l / locate-01, location, c / country-region)
(n / name, op, "Siberia")
(r / repository, mod, l2 / large)
(r / repository, mod, v / virus)

Decoded in 96,375 microseconds
Sentence: Both Russian and Western officials have stated that it is unlikely that any public health threat would result from a power cutoff at the State Scientific Center of applied microbiology.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 2-3:  and => and
Span 12-13:  any => any
Span 0-1:  Both => both
Span 14-15:  health => health
Span 8-9:  it => it
Span 4-5:  officials => (have-org-role-91 :ARG2 official)
Span 20-21:  power => power
Span 13-14:  public => public
Span 17-18:  result => result-01
Span 1-2:  Russian => (country :name (name :op "Russia"))
Span 24-28:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 6-7:  stated => state-01
Span 15-16:  threat => threaten-01
Span 10-11:  unlikely => (likely :polarity -)
Span 3-4:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,28,List(5, 4, 3, 2, 1, 0),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(20,21,List(6),power,power,false), Span(17,18,List(7),result,result-01,false), Span(15,16,List(8),threat,threaten-01,false), Span(14,15,List(9),health,health,false), Span(13,14,List(10),public,public,false), Span(12,13,List(11),any,any,false), Span(10,11,List(13, 12),unlikely,(likely :polarity -),false), Span(8,9,List(14),it,it,false), Span(6,7,List(15),stated,state-01,false), Span(4,5,List(17, 16),officials,(have-org-role-91 :ARG2 official),false), Span(3,4,List(20, 19, 18),Western,(world-region :name (name :op "West")),false), Span(2,3,List(21),and,and,false), Span(1,2,List(24, 23, 22),Russian,(country :name (name :op "Russia")),false), Span(0,1,List(25),Both,both,false)),Map(2 -> "State", 5 -> "of", 12 -> likely, 8 -> threaten-01, 15 -> state-01, 21 -> and, 18 -> world-region, 24 -> "Russia", 7 -> result-01, 1 -> name, 17 -> official, 23 -> name, 4 -> "Center", 11 -> any, 14 -> it, 20 -> "West", 6 -> power, 9 -> health, 0 -> organization, 22 -> country, 16 -> have-org-role-91, 19 -> name, 10 -> public, 3 -> "Scientific", 25 -> both, 13 -> -),Map(w -> world-region, n -> name, h -> health, h2 -> have-org-role-91, b -> both, t -> threaten-01, p2 -> public, s -> state-01, p -> power, n3 -> name, a -> any, o2 -> official, a2 -> and, r -> result-01, i -> it, c -> country, l -> likely, o -> organization, n2 -> name))),[Ljava.lang.String;@658c5a19,Annotation([Ljava.lang.String;@421e361,[Ljava.lang.String;@59d4cd39,[Ljava.lang.String;@389c4eb1),Annotation([Ljava.lang.String;@3fc79729,[Ljava.lang.String;@34f6515b,[Ledu.cmu.lti.nlp.amr.Dependency;@4b34fff9),Annotation([Ljava.lang.String;@1187c9e8,[Ljava.lang.String;@127a7a2e,[Ljava.lang.String;@14008db3),Annotation([Ljava.lang.String;@78a773fd,[Ljava.lang.String;@57c03d88,[Ledu.cmu.lti.nlp.amr.Entity;@16aa8654))
AMR:
(a2 / and, op, w / world-region)
(a2 / and, quant, b / both)
(c / country, name, n3 / name)
(h / health, mod, p2 / public)
(h2 / have-org-role-91, ARG0, p / power)
(h2 / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG2, o2 / official)
(l / likely, domain, i / it)
(l / likely, domain, r / result-01)
(l / likely, polarity, -)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "West")
(n3 / name, op, "Russia")
(o / organization, name, n / name)
(o2 / official, mod, b / both)
(r / result-01, ARG2, t / threaten-01)
(s / state-01, ARG0, a2 / and)
(s / state-01, ARG1, l / likely)
(t / threaten-01, ARG0, c / country)
(t / threaten-01, ARG1, h / health)
(t / threaten-01, mod, a / any)
(w / world-region, name, n2 / name)

Decoded in 1,127,439 microseconds
Sentence: Russian and Western officials have stated that there is enough uncertainty that they could not be positive a loss of power at the State Scientific Center of applied microbiology would not cause a public health threat.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 1-2:  and => and
Span 31-32:  cause => cause-01
Span 13-14:  could => possible
Span 9-10:  enough => enough
Span 34-35:  health => health
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 16-17:  positive => positive
Span 20-21:  power => power
Span 33-34:  public => public
Span 0-1:  Russian => (country :name (name :op "Russia"))
Span 23-27:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 5-6:  stated => state-01
Span 12-13:  they => they
Span 35-36:  threat => threaten-01
Span 10-11:  uncertainty => certainty
Span 2-3:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 68 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),threat,threaten-01,false), Span(34,35,List(1),health,health,false), Span(33,34,List(2),public,public,false), Span(31,32,List(3),cause,cause-01,false), Span(23,27,List(9, 8, 7, 6, 5, 4),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(20,21,List(10),power,power,false), Span(16,17,List(11),positive,positive,false), Span(13,14,List(12),could,possible,false), Span(12,13,List(13),they,they,false), Span(10,11,List(14),uncertainty,certainty,false), Span(9,10,List(15),enough,enough,false), Span(5,6,List(16),stated,state-01,false), Span(3,4,List(18, 17),officials,(have-org-role-91 :ARG2 official),false), Span(2,3,List(21, 20, 19),Western,(world-region :name (name :op "West")),false), Span(1,2,List(22),and,and,false), Span(0,1,List(25, 24, 23),Russian,(country :name (name :op "Russia")),false)),Map(2 -> public, 5 -> name, 12 -> possible, 8 -> "Center", 15 -> enough, 21 -> "West", 18 -> official, 24 -> name, 7 -> "Scientific", 1 -> health, 17 -> have-org-role-91, 23 -> country, 4 -> organization, 11 -> positive, 14 -> certainty, 20 -> name, 6 -> "State", 9 -> "of", 0 -> threaten-01, 22 -> and, 16 -> state-01, 19 -> world-region, 10 -> power, 3 -> cause-01, 25 -> "Russia", 13 -> they),Map(e -> enough, w -> world-region, n -> name, h -> health, h2 -> have-org-role-91, t -> threaten-01, p2 -> power, s -> state-01, p -> public, n3 -> name, c3 -> country, a -> and, p4 -> possible, o2 -> official, t2 -> they, c -> cause-01, o -> organization, p3 -> positive, n2 -> name, c2 -> certainty))),[Ljava.lang.String;@6d7fc27,Annotation([Ljava.lang.String;@45ac5f9b,[Ljava.lang.String;@135606db,[Ljava.lang.String;@518caac3),Annotation([Ljava.lang.String;@68034211,[Ljava.lang.String;@4f74980d,[Ledu.cmu.lti.nlp.amr.Dependency;@6c372fe6),Annotation([Ljava.lang.String;@58594a11,[Ljava.lang.String;@2a3888c1,[Ljava.lang.String;@4167d97b),Annotation([Ljava.lang.String;@14fa86ae,[Ljava.lang.String;@6e15fe2,[Ledu.cmu.lti.nlp.amr.Entity;@68f1b17f))
AMR:
(a / and, op, o / organization)
(a / and, op, w / world-region)
(c / cause-01, ARG0, c2 / certainty)
(c / cause-01, ARG1, p4 / possible)
(c / cause-01, ARG6, t / threaten-01)
(c2 / certainty, mod, e / enough)
(c3 / country, name, n3 / name)
(h / health, mod, p / public)
(h2 / have-org-role-91, ARG0, p2 / power)
(h2 / have-org-role-91, ARG1, o / organization)
(h2 / have-org-role-91, ARG2, o2 / official)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "West")
(n3 / name, op, "Russia")
(o / organization, name, n / name)
(p4 / possible, calendar, t2 / they)
(p4 / possible, domain, p3 / positive)
(s / state-01, ARG0, a / and)
(s / state-01, ARG1, c2 / certainty)
(t / threaten-01, ARG0, c3 / country)
(t / threaten-01, ARG1, h / health)
(w / world-region, name, n2 / name)

Decoded in 2,141,282 microseconds
Sentence: General Nikolai N. Urakov stated by telephone that the State Scientific Center of applied microbiology has quite reliable systems of protection in case of emergency.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 22-23:  case => case
Span 24-25:  emergency => emergency
Span 0-1:  General => (have-org-role-91 :ARG2 general)
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 20-21:  protection => protect-01
Span 16-17:  quite => quite
Span 17-18:  reliable => reliable
Span 9-13:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 4-5:  stated => state-01
Span 18-19:  systems => system
Span 6-7:  telephone => telephone

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),emergency,emergency,false), Span(22,23,List(1),case,case,false), Span(20,21,List(2),protection,protect-01,false), Span(18,19,List(3),systems,system,false), Span(17,18,List(4),reliable,reliable,false), Span(16,17,List(5),quite,quite,false), Span(9,13,List(11, 10, 9, 8, 7, 6),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(6,7,List(12),telephone,telephone,false), Span(4,5,List(13),stated,state-01,false), Span(1,4,List(18, 17, 16, 15, 14),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(0,1,List(20, 19),General,(have-org-role-91 :ARG2 general),false)),Map(2 -> protect-01, 5 -> quite, 12 -> telephone, 15 -> name, 8 -> "State", 18 -> "Urakov", 7 -> name, 17 -> "N.", 1 -> case, 4 -> reliable, 11 -> "of", 14 -> person, 20 -> general, 6 -> organization, 0 -> emergency, 9 -> "Scientific", 16 -> "Nikolai", 19 -> have-org-role-91, 3 -> system, 10 -> "Center", 13 -> state-01),Map(e -> emergency, n -> name, h -> have-org-role-91, q -> quite, s2 -> state-01, t -> telephone, p2 -> person, s -> system, g -> general, p -> protect-01, r -> reliable, c -> case, o -> organization, n2 -> name))),[Ljava.lang.String;@1722011b,Annotation([Ljava.lang.String;@57ad2aa7,[Ljava.lang.String;@5b3f61ff,[Ljava.lang.String;@3e2059ae),Annotation([Ljava.lang.String;@398dada8,[Ljava.lang.String;@7cb502c,[Ledu.cmu.lti.nlp.amr.Dependency;@275bf9b3),Annotation([Ljava.lang.String;@1b8a29df,[Ljava.lang.String;@4fbe37eb,[Ljava.lang.String;@12a94400),Annotation([Ljava.lang.String;@6a47b187,[Ljava.lang.String;@2049a9c1,[Ledu.cmu.lti.nlp.amr.Entity;@1ef6d34c))
AMR:
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, g / general)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(o / organization, name, n / name)
(p / protect-01, ARG0, s / system)
(p / protect-01, ARG1, c / case)
(p / protect-01, condition, e / emergency)
(p2 / person, name, n2 / name)
(r / reliable, degree, q / quite)
(s / system, mod, r / reliable)
(s2 / state-01, ARG0, p2 / person)
(s2 / state-01, ARG1, s / system)
(s2 / state-01, medium, t / telephone)

Decoded in 129,788 microseconds
Sentence: General Nikolai N. Urakov is the longtime director of the the State Scientific Center of applied microbiology.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 7-8:  director => (have-org-role-91 :ARG2 director)
Span 0-1:  General => (have-org-role-91 :ARG2 general)
Span 6-7:  longtime => longtime
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 11-15:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,15,List(5, 4, 3, 2, 1, 0),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(7,8,List(7, 6),director,(have-org-role-91 :ARG2 director),false), Span(6,7,List(8),longtime,longtime,false), Span(1,4,List(13, 12, 11, 10, 9),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(0,1,List(15, 14),General,(have-org-role-91 :ARG2 general),false)),Map(2 -> "State", 5 -> "of", 12 -> "N.", 15 -> general, 8 -> longtime, 7 -> director, 1 -> name, 4 -> "Center", 11 -> "Nikolai", 14 -> have-org-role-91, 6 -> have-org-role-91, 0 -> organization, 9 -> person, 3 -> "Scientific", 10 -> name, 13 -> "Urakov"),Map(n -> name, h -> have-org-role-91, h2 -> have-org-role-91, d -> director, g -> general, p -> person, l -> longtime, o -> organization, n2 -> name))),[Ljava.lang.String;@46271dd6,Annotation([Ljava.lang.String;@11bb571c,[Ljava.lang.String;@7c51f34b,[Ljava.lang.String;@5495333e),Annotation([Ljava.lang.String;@2a225dd7,[Ljava.lang.String;@61eaec38,[Ledu.cmu.lti.nlp.amr.Dependency;@125290e5),Annotation([Ljava.lang.String;@6fa34d52,[Ljava.lang.String;@57576994,[Ljava.lang.String;@616ac46a),Annotation([Ljava.lang.String;@67b9b51a,[Ljava.lang.String;@1205bd62,[Ledu.cmu.lti.nlp.amr.Entity;@7ef27d7f))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, d / director)
(h / have-org-role-91, duration, l / longtime)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG2, g / general)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(o / organization, name, n / name)
(p / person, name, n2 / name)

Decoded in 58,360 microseconds
Sentence: The State scientific center of applied microbiology has been working with Western scientists to convert the complex into a biomedical manufacturing site.

NER Entity: (organization :name (name :op "State" :op "scientific"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 19-20:  biomedical => biomedicine
Span 16-17:  complex => complex
Span 14-15:  convert => convert-01
Span 20-21:  manufacturing => manufacture-01
Span 12-13:  scientists => scientist
Span 21-22:  site => site
Span 1-7:  State scientific center of applied microbiology => (research-institute :name (name :op "microbiology" :op "applied" :op "of" :op "Center" :op "Scientific" :op "State"))
Span 11-12:  Western => (world-region :name (name :op "West"))
Span 9-10:  working => work-01

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),site,site,false), Span(20,21,List(1),manufacturing,manufacture-01,false), Span(19,20,List(2),biomedical,biomedicine,false), Span(16,17,List(3),complex,complex,false), Span(14,15,List(4),convert,convert-01,false), Span(12,13,List(5),scientists,scientist,false), Span(11,12,List(8, 7, 6),Western,(world-region :name (name :op "West")),false), Span(9,10,List(9),working,work-01,false), Span(1,7,List(17, 16, 15, 14, 13, 12, 11, 10),State scientific center of applied microbiology,(research-institute :name (name :op "microbiology" :op "applied" :op "of" :op "Center" :op "Scientific" :op "State")),false)),Map(2 -> biomedicine, 5 -> scientist, 12 -> "microbiology", 15 -> "Center", 8 -> "West", 7 -> name, 17 -> "State", 1 -> manufacture-01, 4 -> convert-01, 11 -> name, 14 -> "of", 6 -> world-region, 0 -> site, 9 -> work-01, 16 -> "Scientific", 3 -> complex, 10 -> research-institute, 13 -> "applied"),Map(n -> name, w -> world-region, s2 -> scientist, b -> biomedicine, s -> site, m -> manufacture-01, r -> research-institute, w2 -> work-01, c -> complex, n2 -> name, c2 -> convert-01))),[Ljava.lang.String;@490caf5f,Annotation([Ljava.lang.String;@6337c201,[Ljava.lang.String;@5c669da8,[Ljava.lang.String;@31920ade),Annotation([Ljava.lang.String;@1d483de4,[Ljava.lang.String;@4032d386,[Ledu.cmu.lti.nlp.amr.Dependency;@28d18df5),Annotation([Ljava.lang.String;@934b6cb,[Ljava.lang.String;@55cf0d14,[Ljava.lang.String;@3b74ac8),Annotation([Ljava.lang.String;@27adc16e,[Ljava.lang.String;@b83a9be,[Ledu.cmu.lti.nlp.amr.Entity;@2609b277))
AMR:
(c2 / convert-01, ARG1, c / complex)
(c2 / convert-01, ARG2, s / site)
(m / manufacture-01, ARG1, b / biomedicine)
(m / manufacture-01, location, s / site)
(n / name, op, "West")
(n2 / name, op, "Center")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "applied")
(n2 / name, op, "microbiology")
(n2 / name, op, "of")
(r / research-institute, name, n2 / name)
(s2 / scientist, mod, w / world-region)
(w / world-region, name, n / name)
(w2 / work-01, ARG0, r / research-institute)
(w2 / work-01, ARG1, c2 / convert-01)
(w2 / work-01, ARG3, s2 / scientist)

Decoded in 537,111 microseconds
Sentence: General Nikolai N. Urakov stated by telephone that the people at the State Scientific Center of applied microbiology are scared by this threat of a sudden shutdown of electricity because it is a kind of psychological pressure on the people at the State Scientific Center of applied microbiology.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 29-30:  because => cause-01
Span 28-29:  electricity => electricity
Span 0-1:  General => (have-org-role-91 :ARG2 general)
Span 30-31:  it => it
Span 33-34:  kind => kind
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 39-40:  people => people
Span 9-10:  people => people
Span 36-37:  pressure => pressure-01
Span 35-36:  psychological => psychology
Span 19-20:  scared => scare-01
Span 26-27:  shutdown => shut-05
Span 42-46:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 12-16:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 4-5:  stated => state-01
Span 25-26:  sudden => sudden
Span 6-7:  telephone => telephone
Span 21-22:  this => this
Span 22-23:  threat => threaten-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,46,List(5, 4, 3, 2, 1, 0),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(39,40,List(6),people,people,false), Span(36,37,List(7),pressure,pressure-01,false), Span(35,36,List(8),psychological,psychology,false), Span(33,34,List(9),kind,kind,false), Span(30,31,List(10),it,it,false), Span(29,30,List(11),because,cause-01,false), Span(28,29,List(12),electricity,electricity,false), Span(26,27,List(13),shutdown,shut-05,false), Span(25,26,List(14),sudden,sudden,false), Span(22,23,List(15),threat,threaten-01,false), Span(21,22,List(16),this,this,false), Span(19,20,List(17),scared,scare-01,false), Span(12,16,List(23, 22, 21, 20, 19, 18),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(9,10,List(24),people,people,false), Span(6,7,List(25),telephone,telephone,false), Span(4,5,List(26),stated,state-01,false), Span(1,4,List(31, 30, 29, 28, 27),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(0,1,List(33, 32),General,(have-org-role-91 :ARG2 general),false)),Map(30 -> "N.", 2 -> "State", 5 -> "of", 33 -> general, 27 -> person, 12 -> electricity, 8 -> psychology, 15 -> threaten-01, 21 -> "Scientific", 18 -> organization, 24 -> people, 7 -> pressure-01, 1 -> name, 17 -> scare-01, 23 -> "of", 26 -> state-01, 4 -> "Center", 11 -> cause-01, 32 -> have-org-role-91, 14 -> sudden, 29 -> "Nikolai", 20 -> "State", 28 -> name, 6 -> people, 9 -> kind, 0 -> organization, 22 -> "Center", 16 -> this, 19 -> name, 10 -> it, 3 -> "Scientific", 31 -> "Urakov", 25 -> telephone, 13 -> shut-05),Map(e -> electricity, n -> name, h -> have-org-role-91, p5 -> person, s2 -> sudden, k -> kind, t -> threaten-01, p2 -> pressure-01, s -> shut-05, s4 -> state-01, t3 -> telephone, g -> general, p -> people, n3 -> name, p4 -> people, o2 -> organization, t2 -> this, i -> it, s3 -> scare-01, c -> cause-01, o -> organization, p3 -> psychology, n2 -> name))),[Ljava.lang.String;@1fd14d74,Annotation([Ljava.lang.String;@563e4951,[Ljava.lang.String;@4066c471,[Ljava.lang.String;@2b175c00),Annotation([Ljava.lang.String;@3eb81efb,[Ljava.lang.String;@1ae8bcbc,[Ledu.cmu.lti.nlp.amr.Dependency;@6cdba6dc),Annotation([Ljava.lang.String;@7d3d101b,[Ljava.lang.String;@30c8681,[Ljava.lang.String;@5cdec700),Annotation([Ljava.lang.String;@6d026701,[Ljava.lang.String;@78aa1f72,[Ledu.cmu.lti.nlp.amr.Entity;@1f75a668))
AMR:
(c / cause-01, ARG0, p2 / pressure-01)
(c / cause-01, ARG1, s3 / scare-01)
(c / cause-01, ARG6, i / it)
(h / have-org-role-91, ARG0, p5 / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, g / general)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Center")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(n3 / name, op, "N.")
(n3 / name, op, "Nikolai")
(n3 / name, op, "Urakov")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(p2 / pressure-01, ARG0, p / people)
(p2 / pressure-01, ARG1, o / organization)
(p2 / pressure-01, mod, k / kind)
(p2 / pressure-01, mod, p3 / psychology)
(p5 / person, name, n3 / name)
(s / shut-05, ARG1, e / electricity)
(s / shut-05, mod, s2 / sudden)
(s3 / scare-01, ARG1, p4 / people)
(s3 / scare-01, ARG2, t / threaten-01)
(s4 / state-01, ARG0, p5 / person)
(s4 / state-01, ARG1, s3 / scare-01)
(s4 / state-01, medium, t3 / telephone)
(t / threaten-01, ARG1, s / shut-05)
(t / threaten-01, mod, t2 / this)

Decoded in 1,278,394 microseconds
Sentence: General Nikolai N. Urakov stated by telephone that in the event of a power shutdown at the State Scientific Center of applied microbiology scientists must destroy all bacteriological experiments under way.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 26-27:  all => all
Span 27-28:  bacteriological => bacteriology
Span 25-26:  destroy => destroy-01
Span 10-11:  event => event
Span 28-29:  experiments => experiment-01
Span 0-1:  General => (have-org-role-91 :ARG2 general)
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 13-14:  power => power
Span 23-24:  scientists => scientist
Span 14-15:  shutdown => shut-05
Span 17-21:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 4-5:  stated => state-01
Span 6-7:  telephone => telephone
Span 30-31:  way => way

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),way,way,false), Span(28,29,List(1),experiments,experiment-01,false), Span(27,28,List(2),bacteriological,bacteriology,false), Span(26,27,List(3),all,all,false), Span(25,26,List(4),destroy,destroy-01,false), Span(23,24,List(5),scientists,scientist,false), Span(17,21,List(11, 10, 9, 8, 7, 6),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(14,15,List(12),shutdown,shut-05,false), Span(13,14,List(13),power,power,false), Span(10,11,List(14),event,event,false), Span(6,7,List(15),telephone,telephone,false), Span(4,5,List(16),stated,state-01,false), Span(1,4,List(21, 20, 19, 18, 17),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(0,1,List(23, 22),General,(have-org-role-91 :ARG2 general),false)),Map(2 -> bacteriology, 5 -> scientist, 12 -> shut-05, 15 -> telephone, 8 -> "State", 21 -> "Urakov", 18 -> name, 7 -> name, 17 -> person, 1 -> experiment-01, 23 -> general, 4 -> destroy-01, 11 -> "of", 14 -> event, 20 -> "N.", 6 -> organization, 22 -> have-org-role-91, 0 -> way, 9 -> "Scientific", 16 -> state-01, 19 -> "Nikolai", 3 -> all, 10 -> "Center", 13 -> power),Map(e -> experiment-01, w -> way, n -> name, h -> have-org-role-91, s2 -> shut-05, b -> bacteriology, t -> telephone, p2 -> person, e2 -> event, s -> scientist, d -> destroy-01, g -> general, p -> power, a -> all, s3 -> state-01, o -> organization, n2 -> name))),[Ljava.lang.String;@35399441,Annotation([Ljava.lang.String;@4b7dc788,[Ljava.lang.String;@6304101a,[Ljava.lang.String;@5170bcf4),Annotation([Ljava.lang.String;@2812b107,[Ljava.lang.String;@df6620a,[Ledu.cmu.lti.nlp.amr.Dependency;@4e31276e),Annotation([Ljava.lang.String;@1a72a540,[Ljava.lang.String;@27d5a580,[Ljava.lang.String;@198d6542),Annotation([Ljava.lang.String;@5e403b4a,[Ljava.lang.String;@5117dd67,[Ledu.cmu.lti.nlp.amr.Entity;@5be49b60))
AMR:
(d / destroy-01, ARG0, s / scientist)
(d / destroy-01, ARG1, e / experiment-01)
(e / experiment-01, ARG1, b / bacteriology)
(e / experiment-01, mod, a / all)
(e / experiment-01, prep-under, w / way)
(e2 / event, prep-from, s2 / shut-05)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, g / general)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(o / organization, name, n / name)
(p2 / person, name, n2 / name)
(s2 / shut-05, ARG0, o / organization)
(s2 / shut-05, ARG1, p / power)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, a / all)
(s3 / state-01, medium, t / telephone)

Decoded in 1,183,796 microseconds
Sentence: General Nikolai N. Urakov would like the United States and Western countries that have contributed about 6 million United States dollars to the transformation of the former bioweapons complex to contribute another 500000 United States dollars per year to pay the State Scientific Center of applied microbiology's electric bills and arrears.

NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "United" :op "States"))
mkDayMonthYear(500000,00,00,50)
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
mkDayMonthYear(500000,00,00,50)
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 32-33:  500000 => 500000
Span 16-17:  6 => 6
Span 15-16:  about => about
Span 50-51:  and => and
Span 9-10:  and => and
Span 31-32:  another => another
Span 51-52:  arrears => arrear
Span 49-50:  bills => bill-01
Span 27-28:  bioweapons => bioweapon
Span 28-29:  complex => complex
Span 30-31:  contribute => contribute-01
Span 14-15:  contributed => contribute-01
Span 11-12:  countries => country
Span 35-36:  dollars => (monetary-quantity :unit dollar)
Span 20-21:  dollars => (monetary-quantity :unit dollar)
Span 48-49:  electric => electric
Span 26-27:  former => former
Span 0-1:  General => (have-org-role-91 :ARG2 general)
Span 1-4:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 39-40:  pay => pay-01
Span 41-45:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 23-24:  transformation => transform-01
Span 33-35:  United States => (country :name (name :op "United" :op "States"))
Span 18-20:  United States => (country :name (name :op "United" :op "States"))
Span 7-9:  United States => (country :name (name :op "United" :op "States"))
Span 10-11:  Western => (world-region :name (name :op "West"))
Span 37-38:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(51,52,List(0),arrears,arrear,false), Span(50,51,List(1),and,and,false), Span(49,50,List(2),bills,bill-01,false), Span(48,49,List(3),electric,electric,false), Span(41,45,List(9, 8, 7, 6, 5, 4),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(39,40,List(10),pay,pay-01,false), Span(37,38,List(12, 11),year,(temporal-quantity :unit year),false), Span(35,36,List(14, 13),dollars,(monetary-quantity :unit dollar),false), Span(33,35,List(18, 17, 16, 15),United States,(country :name (name :op "United" :op "States")),false), Span(32,33,List(19),500000,500000,false), Span(31,32,List(20),another,another,false), Span(30,31,List(21),contribute,contribute-01,false), Span(28,29,List(22),complex,complex,false), Span(27,28,List(23),bioweapons,bioweapon,false), Span(26,27,List(24),former,former,false), Span(23,24,List(25),transformation,transform-01,false), Span(20,21,List(27, 26),dollars,(monetary-quantity :unit dollar),false), Span(18,20,List(31, 30, 29, 28),United States,(country :name (name :op "United" :op "States")),false), Span(16,17,List(32),6,6,false), Span(15,16,List(33),about,about,false), Span(14,15,List(34),contributed,contribute-01,false), Span(11,12,List(35),countries,country,false), Span(10,11,List(38, 37, 36),Western,(world-region :name (name :op "West")),false), Span(9,10,List(39),and,and,false), Span(7,9,List(43, 42, 41, 40),United States,(country :name (name :op "United" :op "States")),false), Span(1,4,List(48, 47, 46, 45, 44),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(0,1,List(50, 49),General,(have-org-role-91 :ARG2 general),false)),Map(30 -> "United", 39 -> and, 45 -> name, 2 -> bill-01, 5 -> name, 48 -> "Urakov", 33 -> about, 27 -> dollar, 12 -> year, 8 -> "Center", 15 -> country, 42 -> "United", 36 -> world-region, 21 -> contribute-01, 18 -> "States", 24 -> former, 35 -> country, 41 -> name, 7 -> "Scientific", 17 -> "United", 1 -> and, 50 -> general, 44 -> person, 23 -> bioweapon, 38 -> "West", 47 -> "N.", 4 -> organization, 26 -> monetary-quantity, 11 -> temporal-quantity, 32 -> 6, 14 -> dollar, 20 -> another, 29 -> name, 46 -> "Nikolai", 34 -> contribute-01, 6 -> "State", 28 -> country, 40 -> country, 49 -> have-org-role-91, 0 -> arrear, 9 -> "of", 43 -> "States", 22 -> complex, 16 -> name, 37 -> name, 19 -> 500000, 3 -> electric, 10 -> pay-01, 25 -> transform-01, 31 -> "States", 13 -> monetary-quantity),Map(e -> electric, w -> world-region, n -> name, h -> have-org-role-91, 5 -> 500000, t -> temporal-quantity, b -> bill-01, b2 -> bioweapon, m2 -> monetary-quantity, c7 -> country, p2 -> person, n4 -> name, a3 -> another, c4 -> country, d -> dollar, m -> monetary-quantity, y -> year, g -> general, p -> pay-01, a -> arrear, c3 -> complex, n3 -> name, n6 -> name, a5 -> and, d2 -> dollar, c6 -> country, t2 -> transform-01, a2 -> and, c -> country, 6 -> 6, f -> former, o -> organization, n2 -> name, c2 -> contribute-01, a4 -> about, n5 -> name, c5 -> contribute-01))),[Ljava.lang.String;@2931522b,Annotation([Ljava.lang.String;@7674b62c,[Ljava.lang.String;@19e7a160,[Ljava.lang.String;@662706a7),Annotation([Ljava.lang.String;@45a4b042,[Ljava.lang.String;@16b2bb0c,[Ledu.cmu.lti.nlp.amr.Dependency;@327af41b),Annotation([Ljava.lang.String;@6cb6decd,[Ljava.lang.String;@c7045b9,[Ljava.lang.String;@f99f5e0),Annotation([Ljava.lang.String;@6aa61224,[Ljava.lang.String;@30bce90b,[Ledu.cmu.lti.nlp.amr.Entity;@3e6f3f28))
AMR:
(a2 / and, op, c6 / country)
(a2 / and, op, c7 / country)
(a4 / about, op, m2 / monetary-quantity)
(a5 / and, op, a / arrear)
(a5 / and, op, b / bill-01)
(b / bill-01, ARG1, b2 / bioweapon)
(b / bill-01, mod, e / electric)
(c / country, name, n2 / name)
(c2 / contribute-01, ARG0, a2 / and)
(c2 / contribute-01, ARG1, m / monetary-quantity)
(c2 / contribute-01, ARG2, t2 / transform-01)
(c3 / complex, mod, f / former)
(c4 / country, name, n3 / name)
(c5 / contribute-01, ARG0, a2 / and)
(c5 / contribute-01, ARG1, a5 / and)
(c6 / country, location, w / world-region)
(c7 / country, name, n5 / name)
(d2 / dollar, mod, c4 / country)
(d2 / dollar, mod, c7 / country)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c7 / country)
(h / have-org-role-91, ARG2, g / general)
(m / monetary-quantity, mod, a3 / another)
(m / monetary-quantity, quant, 5 / 500000)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, quant, 6 / 6)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "West")
(n5 / name, op, "States")
(n5 / name, op, "United")
(n6 / name, op, "N.")
(n6 / name, op, "Nikolai")
(n6 / name, op, "Urakov")
(o / organization, name, n / name)
(o / organization, op, a2 / and)
(p / pay-01, ARG0, a2 / and)
(p / pay-01, ARG1, c / country)
(p / pay-01, ARG6, t / temporal-quantity)
(p2 / person, name, n6 / name)
(t / temporal-quantity, unit, y / year)
(t2 / transform-01, ARG1, c3 / complex)
(w / world-region, name, n4 / name)

Decoded in 4,313,556 microseconds
Sentence: An American scientist who works closely with the State Scientific Center of applied microbiology stated that the Russian government was responsible for paying for the State Scientific Center of applied microbiology's electric bills.

NER Entity: (thing :name (name :op "American"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "American"))
Spans:
Span 1-2:  American => (country :name (name :op "America"))
Span 33-34:  bills => bill-01
Span 5-6:  closely => close
Span 32-33:  electric => electric
Span 18-19:  government => (government-organization :ARG0-of govern-01)
Span 22-23:  paying => pay-01
Span 20-21:  responsible => responsible-41
Span 17-18:  Russian => (country :name (name :op "Russia"))
Span 2-3:  scientist => scientist
Span 25-29:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 8-12:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 14-15:  stated => state-01
Span 4-5:  works => work-01

Langrangian relaxation converged after 86 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),bills,bill-01,false), Span(32,33,List(1),electric,electric,false), Span(25,29,List(7, 6, 5, 4, 3, 2),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(22,23,List(8),paying,pay-01,false), Span(20,21,List(9),responsible,responsible-41,false), Span(18,19,List(11, 10),government,(government-organization :ARG0-of govern-01),false), Span(17,18,List(14, 13, 12),Russian,(country :name (name :op "Russia")),false), Span(14,15,List(15),stated,state-01,false), Span(8,12,List(21, 20, 19, 18, 17, 16),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(5,6,List(22),closely,close,false), Span(4,5,List(23),works,work-01,false), Span(2,3,List(24),scientist,scientist,false), Span(1,2,List(27, 26, 25),American,(country :name (name :op "America")),false)),Map(2 -> organization, 5 -> "Scientific", 27 -> "America", 12 -> country, 8 -> pay-01, 15 -> state-01, 21 -> "of", 18 -> "State", 24 -> scientist, 7 -> "of", 1 -> electric, 17 -> name, 23 -> work-01, 26 -> name, 4 -> "State", 11 -> govern-01, 14 -> "Russia", 20 -> "Center", 6 -> "Center", 9 -> responsible-41, 0 -> bill-01, 22 -> close, 16 -> organization, 19 -> "Scientific", 10 -> government-organization, 3 -> name, 25 -> country, 13 -> name),Map(e -> electric, w -> work-01, n -> name, s2 -> scientist, b -> bill-01, n4 -> name, s -> state-01, g2 -> govern-01, p -> pay-01, g -> government-organization, c3 -> country, n3 -> name, o2 -> organization, r -> responsible-41, c -> country, o -> organization, c2 -> close, n2 -> name))),[Ljava.lang.String;@7e19ebf0,Annotation([Ljava.lang.String;@2474f125,[Ljava.lang.String;@7357a011,[Ljava.lang.String;@3406472c),Annotation([Ljava.lang.String;@5717c37,[Ljava.lang.String;@68f4865,[Ledu.cmu.lti.nlp.amr.Dependency;@4816278d),Annotation([Ljava.lang.String;@4eaf3684,[Ljava.lang.String;@40317ba2,[Ljava.lang.String;@3c01cfa1),Annotation([Ljava.lang.String;@45d2ade3,[Ljava.lang.String;@727eb8cb,[Ledu.cmu.lti.nlp.amr.Entity;@39d9314d))
AMR:
(b / bill-01, ARG1, e / electric)
(c / country, name, n2 / name)
(c3 / country, name, n4 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Russia")
(n3 / name, op, "Center")
(n3 / name, op, "Scientific")
(n3 / name, op, "State")
(n3 / name, op, "of")
(n4 / name, op, "America")
(o / organization, name, n / name)
(o2 / organization, name, n3 / name)
(p / pay-01, ARG0, g / government-organization)
(p / pay-01, ARG1, o / organization)
(p / pay-01, ARG3, b / bill-01)
(r / responsible-41, ARG1, g / government-organization)
(r / responsible-41, ARG2, p / pay-01)
(s / state-01, ARG0, s2 / scientist)
(s / state-01, ARG1, r / responsible-41)
(s2 / scientist, mod, c3 / country)
(w / work-01, ARG0, s2 / scientist)
(w / work-01, ARG1, o2 / organization)
(w / work-01, degree, c2 / close)

Decoded in 2,467,620 microseconds
Sentence: Western aid for conversion of General Nikolai N. Urakov's one time bioweapons laboratory peaked in 970000 because it was learned that Iran had made offers to the State Scientific Center of applied microbiology to purchase its expertise.

NER Entity: (thing :name (name :op "Western"))
NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
mkDayMonthYear(970000,00,00,97)
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (country :name (name :op "Iran"))
mkDayMonthYear(970000,00,00,97)
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 16-17:  970000 => (date-entity :year 1997)
Span 1-2:  aid => aid-01
Span 17-18:  because => cause-01
Span 12-13:  bioweapons => bioweapon
Span 3-4:  conversion => convert-01
Span 37-38:  expertise => expertise
Span 5-6:  General => (have-org-role-91 :ARG2 general)
Span 22-23:  Iran => (country :name (name :op "Iran"))
Span 18-19:  it => it
Span 13-14:  laboratory => laboratory
Span 20-21:  learned => learn-01
Span 6-9:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 25-26:  offers => offer-01
Span 10-11:  one => 1
Span 14-15:  peaked => peak-01
Span 35-36:  purchase => purchase-01
Span 28-32:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 11-12:  time => time
Span 0-1:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 82 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),expertise,expertise,false), Span(35,36,List(1),purchase,purchase-01,false), Span(28,32,List(7, 6, 5, 4, 3, 2),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(25,26,List(8),offers,offer-01,false), Span(22,23,List(11, 10, 9),Iran,(country :name (name :op "Iran")),false), Span(20,21,List(12),learned,learn-01,false), Span(18,19,List(13),it,it,false), Span(17,18,List(14),because,cause-01,false), Span(16,17,List(16, 15),970000,(date-entity :year 1997),false), Span(14,15,List(17),peaked,peak-01,false), Span(13,14,List(18),laboratory,laboratory,false), Span(12,13,List(19),bioweapons,bioweapon,false), Span(11,12,List(20),time,time,false), Span(10,11,List(21),one,1,false), Span(6,9,List(26, 25, 24, 23, 22),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(5,6,List(28, 27),General,(have-org-role-91 :ARG2 general),false), Span(3,4,List(29),conversion,convert-01,false), Span(1,2,List(30),aid,aid-01,false), Span(0,1,List(33, 32, 31),Western,(world-region :name (name :op "West")),false)),Map(30 -> aid-01, 2 -> organization, 5 -> "Scientific", 33 -> "West", 27 -> have-org-role-91, 12 -> learn-01, 8 -> offer-01, 15 -> date-entity, 21 -> 1, 18 -> laboratory, 24 -> "Nikolai", 7 -> "of", 1 -> purchase-01, 17 -> peak-01, 23 -> name, 26 -> "Urakov", 4 -> "State", 11 -> "Iran", 32 -> name, 14 -> cause-01, 29 -> convert-01, 20 -> time, 28 -> general, 6 -> "Center", 9 -> country, 0 -> expertise, 22 -> person, 16 -> 1997, 19 -> bioweapon, 10 -> name, 3 -> name, 31 -> world-region, 25 -> "N.", 13 -> it),Map(e -> expertise, n -> name, w -> world-region, h -> have-org-role-91, t -> time, 12 -> 1, b -> bioweapon, p2 -> peak-01, n4 -> name, d -> date-entity, 1 -> 1997, p -> purchase-01, g -> general, n3 -> name, c3 -> convert-01, a -> aid-01, o2 -> offer-01, l2 -> laboratory, i -> it, c -> country, l -> learn-01, o -> organization, p3 -> person, c2 -> cause-01, n2 -> name))),[Ljava.lang.String;@b978d10,Annotation([Ljava.lang.String;@5b7a8434,[Ljava.lang.String;@5c45d770,[Ljava.lang.String;@2ce6c6ec),Annotation([Ljava.lang.String;@1bae316d,[Ljava.lang.String;@147a5d08,[Ledu.cmu.lti.nlp.amr.Dependency;@6676f6a0),Annotation([Ljava.lang.String;@7cbd9d24,[Ljava.lang.String;@1672fe87,[Ljava.lang.String;@5026735c),Annotation([Ljava.lang.String;@1b45c0e,[Ljava.lang.String;@11f0a5a1,[Ledu.cmu.lti.nlp.amr.Entity;@10f7f7de))
AMR:
(a / aid-01, ARG0, w / world-region)
(a / aid-01, ARG1, c3 / convert-01)
(c / country, name, n2 / name)
(c2 / cause-01, ARG0, l / learn-01)
(c2 / cause-01, ARG1, p2 / peak-01)
(c3 / convert-01, ARG1, l2 / laboratory)
(d / date-entity, year, 1 / 1997)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, 12 / 1)
(h / have-org-role-91, ARG2, g / general)
(l / learn-01, ARG1, o2 / offer-01)
(l / learn-01, ARG6, i / it)
(l2 / laboratory, mod, b / bioweapon)
(l2 / laboratory, poss, p3 / person)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Iran")
(n3 / name, op, "N.")
(n3 / name, op, "Nikolai")
(n3 / name, op, "Urakov")
(n4 / name, op, "West")
(o / organization, name, n / name)
(o2 / offer-01, ARG0, c / country)
(o2 / offer-01, ARG1, p / purchase-01)
(o2 / offer-01, ARG3, o / organization)
(p / purchase-01, ARG1, e / expertise)
(p2 / peak-01, ARG0, t / time)
(p2 / peak-01, ARG1, a / aid-01)
(p2 / peak-01, time, d / date-entity)
(p3 / person, name, n3 / name)
(w / world-region, name, n4 / name)

Decoded in 3,811,575 microseconds
Sentence: Russian scientists and military leaders who now depend on Western financing to destroy nuclear, chemical and biological weapons have been known to orchestrate a sense of crisis to increase financing.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 16-17:  and => and
Span 2-3:  and => and
Span 17-18:  biological => biology
Span 15-16:  chemical => chemical
Span 27-28:  crisis => crisis
Span 7-8:  depend => depend-01
Span 12-13:  destroy => destroy-01
Span 30-31:  financing => finance-01
Span 10-11:  financing => finance-01
Span 29-30:  increase => increase-01
Span 21-22:  known => know-01
Span 4-5:  leaders => (person :ARG0-of lead-02)
Span 3-4:  military => military
Span 6-7:  now => now
Span 13-14:  nuclear => nucleus
Span 23-24:  orchestrate => orchestrate-01
Span 0-1:  Russian => (country :name (name :op "Russia"))
Span 1-2:  scientists => scientist
Span 25-26:  sense => sense-01
Span 18-19:  weapons => weapon
Span 9-10:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 93 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),financing,finance-01,false), Span(29,30,List(1),increase,increase-01,false), Span(27,28,List(2),crisis,crisis,false), Span(25,26,List(3),sense,sense-01,false), Span(23,24,List(4),orchestrate,orchestrate-01,false), Span(21,22,List(5),known,know-01,false), Span(18,19,List(6),weapons,weapon,false), Span(17,18,List(7),biological,biology,false), Span(16,17,List(8),and,and,false), Span(15,16,List(9),chemical,chemical,false), Span(13,14,List(10),nuclear,nucleus,false), Span(12,13,List(11),destroy,destroy-01,false), Span(10,11,List(12),financing,finance-01,false), Span(9,10,List(15, 14, 13),Western,(world-region :name (name :op "West")),false), Span(7,8,List(16),depend,depend-01,false), Span(6,7,List(17),now,now,false), Span(4,5,List(19, 18),leaders,(person :ARG0-of lead-02),false), Span(3,4,List(20),military,military,false), Span(2,3,List(21),and,and,false), Span(1,2,List(22),scientists,scientist,false), Span(0,1,List(25, 24, 23),Russian,(country :name (name :op "Russia")),false)),Map(2 -> crisis, 5 -> know-01, 12 -> finance-01, 8 -> and, 15 -> "West", 21 -> and, 18 -> person, 24 -> name, 7 -> biology, 1 -> increase-01, 17 -> now, 23 -> country, 4 -> orchestrate-01, 11 -> destroy-01, 14 -> name, 20 -> military, 6 -> weapon, 9 -> chemical, 0 -> finance-01, 22 -> scientist, 16 -> depend-01, 19 -> lead-02, 10 -> nucleus, 3 -> sense-01, 25 -> "Russia", 13 -> world-region),Map(w -> weapon, n -> nucleus, s2 -> scientist, k -> know-01, b -> biology, n4 -> name, s -> sense-01, m -> military, d -> destroy-01, p -> person, c3 -> country, n3 -> now, a -> and, d2 -> depend-01, w2 -> world-region, a2 -> and, i -> increase-01, c -> crisis, l -> lead-02, f2 -> finance-01, f -> finance-01, o -> orchestrate-01, n2 -> name, c2 -> chemical))),[Ljava.lang.String;@73a8da0f,Annotation([Ljava.lang.String;@50dfbc58,[Ljava.lang.String;@4416d64f,[Ljava.lang.String;@6bf08014),Annotation([Ljava.lang.String;@5e3d57c7,[Ljava.lang.String;@732d0d24,[Ledu.cmu.lti.nlp.amr.Dependency;@1fb19a0),Annotation([Ljava.lang.String;@6ee4d9ab,[Ljava.lang.String;@5a5338df,[Ljava.lang.String;@418c5a9c),Annotation([Ljava.lang.String;@18e36d14,[Ljava.lang.String;@5082d622,[Ledu.cmu.lti.nlp.amr.Entity;@13d4992d))
AMR:
(a / and, op, w / weapon)
(a2 / and, op, p / person)
(a2 / and, op, s2 / scientist)
(c3 / country, name, n4 / name)
(d / destroy-01, ARG1, a / and)
(d2 / depend-01, ARG0, a2 / and)
(d2 / depend-01, ARG1, f / finance-01)
(d2 / depend-01, purpose, d / destroy-01)
(d2 / depend-01, time, n3 / now)
(f / finance-01, ARG0, w2 / world-region)
(f / finance-01, ARG1, c2 / chemical)
(f2 / finance-01, ARG1, d / destroy-01)
(i / increase-01, ARG1, f2 / finance-01)
(k / know-01, ARG0, n / nucleus)
(k / know-01, ARG1, a2 / and)
(k / know-01, ARG2, o / orchestrate-01)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, m / military)
(n2 / name, op, "West")
(n4 / name, op, "Russia")
(o / orchestrate-01, ARG0, a2 / and)
(o / orchestrate-01, ARG1, s / sense-01)
(s / sense-01, ARG1, c / crisis)
(s2 / scientist, mod, c3 / country)
(w / weapon, mod, b / biology)
(w2 / world-region, name, n2 / name)

Decoded in 3,546,798 microseconds
Sentence: American scientist Randall Lee Beatty is working on the conversion of the State Scientific Center of applied Microbiology in obolensk.

NER Entity: (thing :name (name :op "American"))
NER Entity: (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
NER Entity: (thing :name (name :op "American"))
Spans:
Span 0-1:  American => (country :name (name :op "America"))
Span 9-10:  conversion => convert-01
Span 19-20:  obolensk => (city :name (name :op "Obolensk"))
Span 2-5:  Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))
Span 1-2:  scientist => scientist
Span 12-18:  State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Span 6-7:  working => work-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(2, 1, 0),obolensk,(city :name (name :op "Obolensk")),false), Span(12,18,List(10, 9, 8, 7, 6, 5, 4, 3),State Scientific Center of applied Microbiology,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology")),false), Span(9,10,List(11),conversion,convert-01,false), Span(6,7,List(12),working,work-01,false), Span(2,5,List(17, 16, 15, 14, 13),Randall Lee Beatty,(person :name (name :op "Beatty" :op "Lee" :op "Randall")),false), Span(1,2,List(18),scientist,scientist,false), Span(0,1,List(21, 20, 19),American,(country :name (name :op "America")),false)),Map(2 -> "Obolensk", 5 -> "State", 12 -> work-01, 15 -> "Beatty", 8 -> "of", 21 -> "America", 18 -> scientist, 7 -> "Center", 17 -> "Randall", 1 -> name, 4 -> name, 11 -> convert-01, 14 -> name, 20 -> name, 6 -> "Scientific", 0 -> city, 9 -> "applied", 16 -> "Lee", 19 -> country, 3 -> organization, 10 -> "Microbiology", 13 -> person),Map(w -> work-01, n -> name, n4 -> name, s -> scientist, p -> person, c3 -> country, n3 -> name, c -> city, o -> organization, c2 -> convert-01, n2 -> name))),[Ljava.lang.String;@302f7971,Annotation([Ljava.lang.String;@332729ad,[Ljava.lang.String;@75d2da2d,[Ljava.lang.String;@4278284b),Annotation([Ljava.lang.String;@9573584,[Ljava.lang.String;@3370f42,[Ledu.cmu.lti.nlp.amr.Dependency;@6057aebb),Annotation([Ljava.lang.String;@63eef88a,[Ljava.lang.String;@53251a66,[Ljava.lang.String;@6853425f),Annotation([Ljava.lang.String;@352c1b98,[Ljava.lang.String;@21129f1f,[Ledu.cmu.lti.nlp.amr.Entity;@5a9f4771))
AMR:
(c / city, name, n / name)
(c2 / convert-01, ARG0, s / scientist)
(c2 / convert-01, ARG1, o / organization)
(c3 / country, name, n4 / name)
(n / name, op, "Obolensk")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "applied")
(n2 / name, op, "of")
(n3 / name, op, "Beatty")
(n3 / name, op, "Lee")
(n3 / name, op, "Randall")
(n4 / name, op, "America")
(o / organization, location, c / city)
(o / organization, name, n2 / name)
(p / person, name, n3 / name)
(s / scientist, mod, c3 / country)
(w / work-01, ARG0, p / person)
(w / work-01, ARG1, c2 / convert-01)

Decoded in 86,836 microseconds
Sentence: Beatty stated that this threat to cut electricity to the State Scientific Center of applied microbiology is a crisis.

NER Entity: (person :name (name :op "Beatty"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
NER Entity: (person :name (name :op "Beatty"))
Spans:
Span 0-1:  Beatty => (person :name (name :op "Beatty"))
Span 18-19:  crisis => crisis
Span 6-7:  cut => cut-02
Span 7-8:  electricity => electricity
Span 10-14:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 1-2:  stated => state-01
Span 3-4:  this => this
Span 4-5:  threat => threaten-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),crisis,crisis,false), Span(10,14,List(6, 5, 4, 3, 2, 1),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(7,8,List(7),electricity,electricity,false), Span(6,7,List(8),cut,cut-02,false), Span(4,5,List(9),threat,threaten-01,false), Span(3,4,List(10),this,this,false), Span(1,2,List(11),stated,state-01,false), Span(0,1,List(14, 13, 12),Beatty,(person :name (name :op "Beatty")),false)),Map(2 -> name, 5 -> "Center", 12 -> person, 8 -> cut-02, 7 -> electricity, 1 -> organization, 4 -> "Scientific", 11 -> state-01, 14 -> "Beatty", 6 -> "of", 0 -> crisis, 9 -> threaten-01, 3 -> "State", 10 -> this, 13 -> name),Map(e -> electricity, n -> name, t -> threaten-01, s -> state-01, p -> person, t2 -> this, c -> crisis, o -> organization, n2 -> name, c2 -> cut-02))),[Ljava.lang.String;@282cb7c7,Annotation([Ljava.lang.String;@7d898981,[Ljava.lang.String;@48d61b48,[Ljava.lang.String;@68d279ec),Annotation([Ljava.lang.String;@258d79be,[Ljava.lang.String;@14f9390f,[Ledu.cmu.lti.nlp.amr.Dependency;@6c0d7c83),Annotation([Ljava.lang.String;@176b75f7,[Ljava.lang.String;@5965be2d,[Ljava.lang.String;@409c54f),Annotation([Ljava.lang.String;@3e74829,[Ljava.lang.String;@4f6f416f,[Ledu.cmu.lti.nlp.amr.Entity;@3b8f0a79))
AMR:
(c / crisis, domain, t / threaten-01)
(c2 / cut-02, ARG1, e / electricity)
(c2 / cut-02, prep-to, o / organization)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Beatty")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c / crisis)
(t / threaten-01, ARG1, c2 / cut-02)
(t / threaten-01, mod, t2 / this)

Decoded in 240,798 microseconds
Sentence: Randall Lee Beatty is a Director of the International Science and Technology Center.

NER Entity: (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
NER Entity: (organization :name (name :op "International" :op "Science"))
NER Entity: (organization :name (name :op "Technology" :op "Center"))
Spans:
Span 5-6:  Director => (have-org-role-91 :ARG2 director)
Span 8-13:  International Science and Technology Center => (research-institute :name (name :op "Center" :op "Technology" :op "and" :op "Science" :op "International"))
Span 0-3:  Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,13,List(6, 5, 4, 3, 2, 1, 0),International Science and Technology Center,(research-institute :name (name :op "Center" :op "Technology" :op "and" :op "Science" :op "International")),false), Span(5,6,List(8, 7),Director,(have-org-role-91 :ARG2 director),false), Span(0,3,List(13, 12, 11, 10, 9),Randall Lee Beatty,(person :name (name :op "Beatty" :op "Lee" :op "Randall")),false)),Map(2 -> "Center", 5 -> "Science", 12 -> "Lee", 8 -> director, 7 -> have-org-role-91, 1 -> name, 4 -> "and", 11 -> "Beatty", 6 -> "International", 0 -> research-institute, 9 -> person, 3 -> "Technology", 10 -> name, 13 -> "Randall"),Map(n -> name, h -> have-org-role-91, d -> director, p -> person, r -> research-institute, n2 -> name))),[Ljava.lang.String;@71e693fa,Annotation([Ljava.lang.String;@48793bef,[Ljava.lang.String;@7d286fb6,[Ljava.lang.String;@3eb77ea8),Annotation([Ljava.lang.String;@7b8b43c7,[Ljava.lang.String;@7aaca91a,[Ledu.cmu.lti.nlp.amr.Dependency;@44c73c26),Annotation([Ljava.lang.String;@41005828,[Ljava.lang.String;@60b4beb4,[Ljava.lang.String;@7fcf2fc1),Annotation([Ljava.lang.String;@2141a12,[Ljava.lang.String;@4196c360,[Ledu.cmu.lti.nlp.amr.Entity;@41294f8))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, r / research-institute)
(h / have-org-role-91, ARG2, d / director)
(n / name, op, "Center")
(n / name, op, "International")
(n / name, op, "Science")
(n / name, op, "Technology")
(n / name, op, "and")
(n2 / name, op, "Beatty")
(n2 / name, op, "Lee")
(n2 / name, op, "Randall")
(p / person, name, n2 / name)
(r / research-institute, name, n / name)

Decoded in 33,272 microseconds
Sentence: The International Science and Technology Center finances approximately half of General Nikolai N. Urakov's budget to support about 350 Russian biowarfare scientists and technicians.

NER Entity: (organization :name (name :op "International" :op "Science"))
NER Entity: (organization :name (name :op "Technology" :op "Center"))
NER Entity: (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 19-20:  350 => 350
Span 18-19:  about => about
Span 23-24:  and => and
Span 7-8:  approximately => approximately
Span 21-22:  biowarfare => biowarfare
Span 15-16:  budget => budget-01
Span 6-7:  finances => finance-01
Span 10-11:  General => (have-org-role-91 :ARG2 general)
Span 8-9:  half => half
Span 1-6:  International Science and Technology Center => (research-institute :name (name :op "Center" :op "Technology" :op "and" :op "Science" :op "International"))
Span 11-14:  Nikolai N. Urakov => (person :name (name :op "Nikolai" :op "N." :op "Urakov"))
Span 20-21:  Russian => (country :name (name :op "Russia"))
Span 22-23:  scientists => scientist
Span 17-18:  support => support-01
Span 24-25:  technicians => technician

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),technicians,technician,false), Span(23,24,List(1),and,and,false), Span(22,23,List(2),scientists,scientist,false), Span(21,22,List(3),biowarfare,biowarfare,false), Span(20,21,List(6, 5, 4),Russian,(country :name (name :op "Russia")),false), Span(19,20,List(7),350,350,false), Span(18,19,List(8),about,about,false), Span(17,18,List(9),support,support-01,false), Span(15,16,List(10),budget,budget-01,false), Span(11,14,List(15, 14, 13, 12, 11),Nikolai N. Urakov,(person :name (name :op "Nikolai" :op "N." :op "Urakov")),false), Span(10,11,List(17, 16),General,(have-org-role-91 :ARG2 general),false), Span(8,9,List(18),half,half,false), Span(7,8,List(19),approximately,approximately,false), Span(6,7,List(20),finances,finance-01,false), Span(1,6,List(27, 26, 25, 24, 23, 22, 21),International Science and Technology Center,(research-institute :name (name :op "Center" :op "Technology" :op "and" :op "Science" :op "International")),false)),Map(2 -> scientist, 5 -> name, 27 -> "International", 12 -> name, 8 -> about, 15 -> "Urakov", 21 -> research-institute, 18 -> half, 24 -> "Technology", 7 -> 350, 1 -> and, 17 -> general, 23 -> "Center", 26 -> "Science", 4 -> country, 11 -> person, 14 -> "N.", 20 -> finance-01, 6 -> "Russia", 9 -> support-01, 0 -> technician, 22 -> name, 16 -> have-org-role-91, 19 -> approximately, 10 -> budget-01, 3 -> biowarfare, 25 -> "and", 13 -> "Nikolai"),Map(n -> name, h -> have-org-role-91, h2 -> half, s2 -> support-01, t -> technician, b -> biowarfare, b2 -> budget-01, a3 -> approximately, s -> scientist, g -> general, p -> person, n3 -> name, a -> and, r -> research-institute, a2 -> about, c -> country, f -> finance-01, 3 -> 350, n2 -> name))),[Ljava.lang.String;@225129c,Annotation([Ljava.lang.String;@20435c40,[Ljava.lang.String;@573906eb,[Ljava.lang.String;@479ceda0),Annotation([Ljava.lang.String;@6d07a63d,[Ljava.lang.String;@571c5681,[Ledu.cmu.lti.nlp.amr.Dependency;@488d1cd7),Annotation([Ljava.lang.String;@68dc098b,[Ljava.lang.String;@38ba6ce3,[Ljava.lang.String;@d278d2b),Annotation([Ljava.lang.String;@2d6c53fc,[Ljava.lang.String;@25f4878b,[Ledu.cmu.lti.nlp.amr.Entity;@4e423aa2))
AMR:
(a / and, mod, b / biowarfare)
(a / and, op, s / scientist)
(a / and, op, t / technician)
(a / and, quant, 3 / 350)
(a2 / about, op, a / and)
(b2 / budget-01, ARG1, p / person)
(b2 / budget-01, ARG2, s2 / support-01)
(c / country, name, n / name)
(f / finance-01, ARG0, r / research-institute)
(f / finance-01, ARG1, h2 / half)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, g / general)
(h2 / half, calendar, a3 / approximately)
(n / name, op, "Russia")
(n2 / name, op, "N.")
(n2 / name, op, "Nikolai")
(n2 / name, op, "Urakov")
(n3 / name, op, "Center")
(n3 / name, op, "International")
(n3 / name, op, "Science")
(n3 / name, op, "Technology")
(n3 / name, op, "and")
(p / person, name, n2 / name)
(r / research-institute, name, n3 / name)
(s / scientist, mod, c / country)
(s2 / support-01, ARG0, r / research-institute)
(s2 / support-01, ARG1, a2 / about)

Decoded in 546,274 microseconds
Sentence: Randall Lee Beatty stated that it is known that the State Scientific Center of applied microbiology has not paid its electricity bill for 14 months.

NER Entity: (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 23-24:  14 => 14
Span 21-22:  bill => bill
Span 20-21:  electricity => electricity
Span 5-6:  it => it
Span 7-8:  known => know-01
Span 24-25:  months => (temporal-quantity :unit month)
Span 18-19:  paid => pay-01
Span 0-3:  Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))
Span 10-14:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 3-4:  stated => state-01

Langrangian relaxation converged after 88 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),months,(temporal-quantity :unit month),false), Span(23,24,List(2),14,14,false), Span(21,22,List(3),bill,bill,false), Span(20,21,List(4),electricity,electricity,false), Span(18,19,List(5),paid,pay-01,false), Span(10,14,List(11, 10, 9, 8, 7, 6),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(7,8,List(12),known,know-01,false), Span(5,6,List(13),it,it,false), Span(3,4,List(14),stated,state-01,false), Span(0,3,List(19, 18, 17, 16, 15),Randall Lee Beatty,(person :name (name :op "Beatty" :op "Lee" :op "Randall")),false)),Map(2 -> 14, 5 -> pay-01, 12 -> know-01, 15 -> person, 8 -> "State", 18 -> "Lee", 7 -> name, 17 -> "Beatty", 1 -> month, 4 -> electricity, 11 -> "of", 14 -> state-01, 6 -> organization, 0 -> temporal-quantity, 9 -> "Scientific", 16 -> name, 19 -> "Randall", 3 -> bill, 10 -> "Center", 13 -> it),Map(e -> electricity, n -> name, t -> temporal-quantity, b -> bill, k -> know-01, p2 -> person, s -> state-01, m -> month, 1 -> 14, p -> pay-01, i -> it, o -> organization, n2 -> name))),[Ljava.lang.String;@7fbdb894,Annotation([Ljava.lang.String;@3081f72c,[Ljava.lang.String;@3148f668,[Ljava.lang.String;@6e005dc9),Annotation([Ljava.lang.String;@7ceb3185,[Ljava.lang.String;@436c81a3,[Ledu.cmu.lti.nlp.amr.Dependency;@3561c410),Annotation([Ljava.lang.String;@59e32960,[Ljava.lang.String;@7c214cc0,[Ljava.lang.String;@5b67bb7e),Annotation([Ljava.lang.String;@609db546,[Ljava.lang.String;@20f5281c,[Ledu.cmu.lti.nlp.amr.Entity;@56c4278e))
AMR:
(b / bill, mod, e / electricity)
(k / know-01, ARG1, p / pay-01)
(k / know-01, ARG6, i / it)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Beatty")
(n2 / name, op, "Lee")
(n2 / name, op, "Randall")
(o / organization, name, n / name)
(p / pay-01, ARG0, o / organization)
(p / pay-01, ARG1, b / bill)
(p / pay-01, duration, t / temporal-quantity)
(p2 / person, name, n2 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, k / know-01)
(t / temporal-quantity, quant, 1 / 14)
(t / temporal-quantity, unit, m / month)

Decoded in 1,422,366 microseconds
Sentence: Randall Lee Beatty stated that the State Scientific Center of applied microbiology is one of the important archives for dangerous pathogens in the world and it would be a shame if those archives were destroyed for not paying the electricity utility.

NER Entity: (person :name (name :op "Randall" :op "Lee" :op "Beatty"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 24-25:  and => and
Span 32-33:  archives => archive-01
Span 17-18:  archives => archive-01
Span 19-20:  dangerous => dangerous
Span 34-35:  destroyed => destroy-01
Span 39-40:  electricity => electricity
Span 16-17:  important => important
Span 25-26:  it => it
Span 13-14:  one => 1
Span 20-21:  pathogens => pathogen
Span 37-38:  paying => pay-01
Span 0-3:  Randall Lee Beatty => (person :name (name :op "Beatty" :op "Lee" :op "Randall"))
Span 29-30:  shame => shame-01
Span 6-10:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 3-4:  stated => state-01
Span 40-41:  utility => utility
Span 23-24:  world => world

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),utility,utility,false), Span(39,40,List(1),electricity,electricity,false), Span(37,38,List(2),paying,pay-01,false), Span(34,35,List(3),destroyed,destroy-01,false), Span(32,33,List(4),archives,archive-01,false), Span(29,30,List(5),shame,shame-01,false), Span(25,26,List(6),it,it,false), Span(24,25,List(7),and,and,false), Span(23,24,List(8),world,world,false), Span(20,21,List(9),pathogens,pathogen,false), Span(19,20,List(10),dangerous,dangerous,false), Span(17,18,List(11),archives,archive-01,false), Span(16,17,List(12),important,important,false), Span(13,14,List(13),one,1,false), Span(6,10,List(19, 18, 17, 16, 15, 14),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(3,4,List(20),stated,state-01,false), Span(0,3,List(25, 24, 23, 22, 21),Randall Lee Beatty,(person :name (name :op "Beatty" :op "Lee" :op "Randall")),false)),Map(2 -> pay-01, 5 -> shame-01, 12 -> important, 8 -> world, 15 -> name, 21 -> person, 18 -> "Center", 24 -> "Lee", 7 -> and, 1 -> electricity, 17 -> "Scientific", 23 -> "Beatty", 4 -> archive-01, 11 -> archive-01, 14 -> organization, 20 -> state-01, 6 -> it, 9 -> pathogen, 0 -> utility, 22 -> name, 16 -> "State", 19 -> "of", 10 -> dangerous, 3 -> destroy-01, 25 -> "Randall", 13 -> 1),Map(e -> electricity, n -> name, w -> world, s2 -> state-01, p2 -> pathogen, a3 -> archive-01, s -> shame-01, d -> destroy-01, 1 -> 1, p -> pay-01, a -> archive-01, d2 -> dangerous, i2 -> important, i -> it, a2 -> and, u -> utility, o -> organization, p3 -> person, n2 -> name))),[Ljava.lang.String;@301eda63,Annotation([Ljava.lang.String;@3d246ea3,[Ljava.lang.String;@341814d3,[Ljava.lang.String;@4397ad89),Annotation([Ljava.lang.String;@59cba5a,[Ljava.lang.String;@1bd39d3c,[Ledu.cmu.lti.nlp.amr.Dependency;@6f19ac19),Annotation([Ljava.lang.String;@119cbf96,[Ljava.lang.String;@71329995,[Ljava.lang.String;@768fc0f2),Annotation([Ljava.lang.String;@5454d35e,[Ljava.lang.String;@20c0a64d,[Ledu.cmu.lti.nlp.amr.Entity;@455b6df1))
AMR:
(a / archive-01, ARG1, o / organization)
(a2 / and, op, i / it)
(a2 / and, op, s / shame-01)
(a3 / archive-01, ARG1, p2 / pathogen)
(a3 / archive-01, ARG6, 1 / 1)
(a3 / archive-01, location, w / world)
(a3 / archive-01, mod, i2 / important)
(d / destroy-01, ARG1, a / archive-01)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Beatty")
(n2 / name, op, "Lee")
(n2 / name, op, "Randall")
(o / organization, name, n / name)
(p / pay-01, ARG1, a / archive-01)
(p / pay-01, ARG3, u / utility)
(p2 / pathogen, mod, d2 / dangerous)
(p3 / person, name, n2 / name)
(s / shame-01, ARG0, d / destroy-01)
(s / shame-01, ARG1, 1 / 1)
(s2 / state-01, ARG0, p3 / person)
(s2 / state-01, ARG1, a2 / and)
(u / utility, mod, e / electricity)

Decoded in 1,294,404 microseconds
Sentence: Approximately 3000 strains of bacteria are stored at the State Scientific Center of applied microbiology and many of the bacteria are stored in cryogenic casks cooled with liquid nitrogen and isolated from the environment by layered enclosures and oversize air-handling systems that all depend on electricity to function.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 1-2:  3000 => (date-entity :year 3000)
Span 39-40:  air => air
Span 44-45:  all => all
Span 37-38:  and => and
Span 29-30:  and => and
Span 15-16:  and => and
Span 0-1:  Approximately => approximately
Span 19-20:  bacteria => bacterium
Span 4-5:  bacteria => bacterium
Span 24-25:  casks => cask
Span 25-26:  cooled => cool-01
Span 23-24:  cryogenic => cryogen
Span 45-46:  depend => depend-01
Span 47-48:  electricity => electricity
Span 36-37:  enclosures => enclosure
Span 33-34:  environment => environment
Span 49-50:  function => function-01
Span 41-42:  handling => handle-01
Span 30-31:  isolated => isolate-01
Span 35-36:  layered => layer-00
Span 27-28:  liquid => liquid
Span 16-17:  many => many
Span 28-29:  nitrogen => nitrogen
Span 38-39:  oversize => oversize
Span 9-13:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 21-22:  stored => store-01
Span 6-7:  stored => store-01
Span 2-3:  strains => strain
Span 42-43:  systems => system

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(49,50,List(0),function,function-01,false), Span(47,48,List(1),electricity,electricity,false), Span(45,46,List(2),depend,depend-01,false), Span(44,45,List(3),all,all,false), Span(42,43,List(4),systems,system,false), Span(41,42,List(5),handling,handle-01,false), Span(39,40,List(6),air,air,false), Span(38,39,List(7),oversize,oversize,false), Span(37,38,List(8),and,and,false), Span(36,37,List(9),enclosures,enclosure,false), Span(35,36,List(10),layered,layer-00,false), Span(33,34,List(11),environment,environment,false), Span(30,31,List(12),isolated,isolate-01,false), Span(29,30,List(13),and,and,false), Span(28,29,List(14),nitrogen,nitrogen,false), Span(27,28,List(15),liquid,liquid,false), Span(25,26,List(16),cooled,cool-01,false), Span(24,25,List(17),casks,cask,false), Span(23,24,List(18),cryogenic,cryogen,false), Span(21,22,List(19),stored,store-01,false), Span(19,20,List(20),bacteria,bacterium,false), Span(16,17,List(21),many,many,false), Span(15,16,List(22),and,and,false), Span(9,13,List(28, 27, 26, 25, 24, 23),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(6,7,List(29),stored,store-01,false), Span(4,5,List(30),bacteria,bacterium,false), Span(2,3,List(31),strains,strain,false), Span(1,2,List(33, 32),3000,(date-entity :year 3000),false), Span(0,1,List(34),Approximately,approximately,false)),Map(30 -> bacterium, 2 -> depend-01, 5 -> handle-01, 33 -> 3000, 27 -> "Center", 12 -> isolate-01, 8 -> and, 15 -> liquid, 21 -> many, 18 -> cryogen, 24 -> name, 7 -> oversize, 1 -> electricity, 17 -> cask, 23 -> organization, 26 -> "Scientific", 4 -> system, 11 -> environment, 32 -> date-entity, 14 -> nitrogen, 29 -> store-01, 20 -> bacterium, 34 -> approximately, 28 -> "of", 6 -> air, 9 -> enclosure, 0 -> function-01, 22 -> and, 16 -> cool-01, 19 -> store-01, 10 -> layer-00, 3 -> all, 31 -> strain, 25 -> "State", 13 -> and),Map(e -> electricity, n -> nitrogen, h -> handle-01, s2 -> store-01, b -> bacterium, b2 -> bacterium, e2 -> enclosure, a3 -> and, s -> system, a6 -> approximately, s4 -> strain, d -> depend-01, m -> many, a -> all, c3 -> cryogen, d2 -> date-entity, a5 -> and, o2 -> organization, l2 -> liquid, i -> isolate-01, a2 -> air, c -> cool-01, s3 -> store-01, l -> layer-00, f -> function-01, o -> oversize, e3 -> environment, 3 -> 3000, c2 -> cask, n2 -> name, a4 -> and))),[Ljava.lang.String;@4ddbbdf8,Annotation([Ljava.lang.String;@3f67593e,[Ljava.lang.String;@1ab06251,[Ljava.lang.String;@41ab013),Annotation([Ljava.lang.String;@14bee915,[Ljava.lang.String;@1115ec15,[Ledu.cmu.lti.nlp.amr.Dependency;@82ea68c),Annotation([Ljava.lang.String;@59e505b2,[Ljava.lang.String;@3af0a9da,[Ljava.lang.String;@43b9fd5),Annotation([Ljava.lang.String;@79dc5318,[Ljava.lang.String;@8e50104,[Ledu.cmu.lti.nlp.amr.Entity;@37e4d7bb))
AMR:
(a3 / and, op, e2 / enclosure)
(a4 / and, op, e2 / enclosure)
(a4 / and, op, s / system)
(a4 / and, quant, a / all)
(a5 / and, op, s2 / store-01)
(a5 / and, op, s3 / store-01)
(a6 / approximately, op, d2 / date-entity)
(b / bacterium, mod, s4 / strain)
(b2 / bacterium, quant, m / many)
(c / cool-01, ARG1, c2 / cask)
(c / cool-01, instrument, n / nitrogen)
(c2 / cask, mod, c3 / cryogen)
(d / depend-01, ARG0, a4 / and)
(d / depend-01, ARG1, e / electricity)
(d / depend-01, purpose, f / function-01)
(d2 / date-entity, year, 3 / 3000)
(f / function-01, ARG1, l2 / liquid)
(h / handle-01, ARG0, s / system)
(h / handle-01, ARG1, a2 / air)
(i / isolate-01, ARG1, c2 / cask)
(i / isolate-01, ARG2, e3 / environment)
(i / isolate-01, instrument, a4 / and)
(l / layer-00, ARG1, e2 / enclosure)
(n2 / name, op, "Center")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "of")
(o2 / organization, name, n2 / name)
(s / system, mod, o / oversize)
(s2 / store-01, ARG1, b / bacterium)
(s3 / store-01, ARG1, b2 / bacterium)
(s3 / store-01, location, c2 / cask)
(s3 / store-01, location, o2 / organization)
(s4 / strain, quant, a6 / approximately)

Decoded in 1,464,964 microseconds
Sentence: The greatest danger from a shutdown of electric power at the State Scientific Center of applied microbiology would be the defrosting of live germs that are currently preserved in a frozen state.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 26-27:  currently => current
Span 2-3:  danger => danger
Span 20-21:  defrosting => defrost-01
Span 7-8:  electric => electric
Span 30-31:  frozen => freeze-02
Span 23-24:  germs => germ
Span 1-2:  greatest => (great :degree most)
Span 22-23:  live => live-01
Span 8-9:  power => power
Span 27-28:  preserved => preserve-01
Span 5-6:  shutdown => shut-05
Span 31-32:  state => state
Span 11-15:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),state,state,false), Span(30,31,List(1),frozen,freeze-02,false), Span(27,28,List(2),preserved,preserve-01,false), Span(26,27,List(3),currently,current,false), Span(23,24,List(4),germs,germ,false), Span(22,23,List(5),live,live-01,false), Span(20,21,List(6),defrosting,defrost-01,false), Span(11,15,List(12, 11, 10, 9, 8, 7),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(8,9,List(13),power,power,false), Span(7,8,List(14),electric,electric,false), Span(5,6,List(15),shutdown,shut-05,false), Span(2,3,List(16),danger,danger,false), Span(1,2,List(18, 17),greatest,(great :degree most),false)),Map(2 -> preserve-01, 5 -> live-01, 12 -> "of", 15 -> shut-05, 8 -> name, 18 -> most, 7 -> organization, 17 -> great, 1 -> freeze-02, 4 -> germ, 11 -> "Center", 14 -> electric, 6 -> defrost-01, 0 -> state, 9 -> "State", 16 -> danger, 3 -> current, 10 -> "Scientific", 13 -> power),Map(e -> electric, n -> name, s2 -> shut-05, p2 -> power, s -> state, m -> most, d -> defrost-01, g2 -> great, p -> preserve-01, g -> germ, d2 -> danger, c -> current, l -> live-01, f -> freeze-02, o -> organization))),[Ljava.lang.String;@6f7923a5,Annotation([Ljava.lang.String;@74a6f9c1,[Ljava.lang.String;@54eb2b70,[Ljava.lang.String;@45a37759),Annotation([Ljava.lang.String;@63611043,[Ljava.lang.String;@20ca951f,[Ledu.cmu.lti.nlp.amr.Dependency;@2d778add),Annotation([Ljava.lang.String;@73302995,[Ljava.lang.String;@1838ccb8,[Ljava.lang.String;@6c2ed0cd),Annotation([Ljava.lang.String;@7d9e8ef7,[Ljava.lang.String;@f107c50,[Ledu.cmu.lti.nlp.amr.Entity;@51133c06))
AMR:
(d / defrost-01, ARG1, g / germ)
(d2 / danger, mod, d / defrost-01)
(d2 / danger, mod, g2 / great)
(d2 / danger, prep-from, s2 / shut-05)
(f / freeze-02, ARG1, s / state)
(g2 / great, degree, m / most)
(l / live-01, ARG0, g / germ)
(l / live-01, ARG1, o / organization)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(o / organization, name, n / name)
(p / preserve-01, ARG1, g / germ)
(p / preserve-01, mod, s / state)
(p / preserve-01, time, c / current)
(p2 / power, mod, e / electric)
(s2 / shut-05, ARG1, p2 / power)

Decoded in 823,692 microseconds
Sentence: A biological warfare expert at the Monterey Institute of International Studies named Raymond zilinskas stated that the main threat from cutting power to the State Scientific Center of applied microbiology would be to the organisms themselves rather than that they might escape.

NER Entity: (organization :name (name :op "Monterey" :op "Institute" :op "of" :op "International" :op "Studies"))
NER Entity: (person :name (name :op "Raymond" :op "zilinskas"))
NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Spans:
Span 1-2:  biological => biology
Span 20-21:  cutting => cut-02
Span 41-42:  escape => escape-01
Span 3-4:  expert => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 17-18:  main => main
Span 6-11:  Monterey Institute of International Studies => (organization :name (name :op "Studies" :op "International" :op "of" :op "Institute" :op "Monterey"))
Span 34-35:  organisms => organism
Span 21-22:  power => power
Span 12-14:  Raymond zilinskas => (person :name (name :op "Zilinskas" :op "Raymond"))
Span 24-28:  State Scientific Center of => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of"))
Span 14-15:  stated => state-01
Span 39-40:  they => they
Span 18-19:  threat => threaten-01
Span 2-3:  warfare => warfare

Langrangian relaxation converged after 103 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(0),escape,escape-01,false), Span(39,40,List(1),they,they,false), Span(34,35,List(2),organisms,organism,false), Span(24,28,List(8, 7, 6, 5, 4, 3),State Scientific Center of,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of")),false), Span(21,22,List(9),power,power,false), Span(20,21,List(10),cutting,cut-02,false), Span(18,19,List(11),threat,threaten-01,false), Span(17,18,List(12),main,main,false), Span(14,15,List(13),stated,state-01,false), Span(12,14,List(17, 16, 15, 14),Raymond zilinskas,(person :name (name :op "Zilinskas" :op "Raymond")),false), Span(6,11,List(24, 23, 22, 21, 20, 19, 18),Monterey Institute of International Studies,(organization :name (name :op "Studies" :op "International" :op "of" :op "Institute" :op "Monterey")),false), Span(3,4,List(27, 26, 25),expert,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(2,3,List(28),warfare,warfare,false), Span(1,2,List(29),biological,biology,false)),Map(2 -> organism, 5 -> "State", 27 -> expert-41, 12 -> main, 8 -> "of", 15 -> name, 21 -> "International", 18 -> organization, 24 -> "Monterey", 7 -> "Center", 1 -> they, 17 -> "Raymond", 23 -> "Institute", 26 -> person, 4 -> name, 11 -> threaten-01, 14 -> person, 29 -> biology, 20 -> "Studies", 28 -> warfare, 6 -> "Scientific", 9 -> power, 0 -> escape-01, 22 -> "of", 16 -> "Zilinskas", 19 -> name, 10 -> cut-02, 3 -> organization, 25 -> have-org-role-91, 13 -> state-01),Map(e -> escape-01, w -> warfare, n -> name, h -> have-org-role-91, b -> biology, t -> they, o3 -> organization, e2 -> expert-41, p2 -> person, s -> state-01, m -> main, p -> power, n3 -> name, o2 -> organization, t2 -> threaten-01, c -> cut-02, o -> organism, p3 -> person, n2 -> name))),[Ljava.lang.String;@4b213651,Annotation([Ljava.lang.String;@4241e0f4,[Ljava.lang.String;@4ebff610,[Ljava.lang.String;@60410cd),Annotation([Ljava.lang.String;@44d52de2,[Ljava.lang.String;@95e33cc,[Ledu.cmu.lti.nlp.amr.Dependency;@38604b81),Annotation([Ljava.lang.String;@1e44b638,[Ljava.lang.String;@7393222f,[Ljava.lang.String;@babafc2),Annotation([Ljava.lang.String;@31add175,[Ljava.lang.String;@ae3540e,[Ledu.cmu.lti.nlp.amr.Entity;@600b9d27))
AMR:
(c / cut-02, ARG1, p / power)
(c / cut-02, prep-to, o2 / organization)
(e / escape-01, ARG0, t / they)
(e / escape-01, ARG1, o / organism)
(e2 / expert-41, ARG1, p3 / person)
(e2 / expert-41, ARG2, w / warfare)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, o3 / organization)
(h / have-org-role-91, ARG2, p3 / person)
(n / name, op, "Center")
(n / name, op, "Scientific")
(n / name, op, "State")
(n / name, op, "of")
(n2 / name, op, "Raymond")
(n2 / name, op, "Zilinskas")
(n3 / name, op, "Institute")
(n3 / name, op, "International")
(n3 / name, op, "Monterey")
(n3 / name, op, "Studies")
(n3 / name, op, "of")
(o2 / organization, name, n / name)
(o3 / organization, name, n3 / name)
(p2 / person, name, n2 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, t / they)
(t2 / threaten-01, ARG1, c / cut-02)
(t2 / threaten-01, ARG2, o / organism)
(t2 / threaten-01, mod, m / main)
(w / warfare, mod, b / biology)

Decoded in 3,269,145 microseconds
Sentence: Raymond zilinskas stated that in the worst case the bacteria would be defrosted from minus 70 degrees and it would be a real mess to clean up afterward because it would not be known for certain whether all the bacteria was dead.

NER Entity: (person :name (name :op "Raymond" :op "zilinskas"))
Spans:
Span 15-16:  70 => 70
Span 27-28:  afterward => afterward
Span 37-38:  all => all
Span 17-18:  and => and
Span 39-40:  bacteria => bacterium
Span 9-10:  bacteria => bacterium
Span 28-29:  because => cause-01
Span 7-8:  case => case
Span 35-36:  certain => certain
Span 25-26:  clean => clean-02
Span 12-13:  defrosted => defrost-01
Span 29-30:  it => it
Span 18-19:  it => it
Span 33-34:  known => know-01
Span 23-24:  mess => mess
Span 0-2:  Raymond zilinskas => (person :name (name :op "Zilinskas" :op "Raymond"))
Span 22-23:  real => real
Span 2-3:  stated => state-01
Span 6-7:  worst => bad

Langrangian relaxation converged after 59 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),bacteria,bacterium,false), Span(37,38,List(1),all,all,false), Span(35,36,List(2),certain,certain,false), Span(33,34,List(3),known,know-01,false), Span(29,30,List(4),it,it,false), Span(28,29,List(5),because,cause-01,false), Span(27,28,List(6),afterward,afterward,false), Span(25,26,List(7),clean,clean-02,false), Span(23,24,List(8),mess,mess,false), Span(22,23,List(9),real,real,false), Span(18,19,List(10),it,it,false), Span(17,18,List(11),and,and,false), Span(15,16,List(12),70,70,false), Span(12,13,List(13),defrosted,defrost-01,false), Span(9,10,List(14),bacteria,bacterium,false), Span(7,8,List(15),case,case,false), Span(6,7,List(16),worst,bad,false), Span(2,3,List(17),stated,state-01,false), Span(0,2,List(21, 20, 19, 18),Raymond zilinskas,(person :name (name :op "Zilinskas" :op "Raymond")),false)),Map(2 -> certain, 5 -> cause-01, 12 -> 70, 15 -> case, 8 -> mess, 21 -> "Raymond", 18 -> person, 7 -> clean-02, 17 -> state-01, 1 -> all, 4 -> it, 11 -> and, 14 -> bacterium, 20 -> "Zilinskas", 6 -> afterward, 0 -> bacterium, 9 -> real, 16 -> bad, 19 -> name, 3 -> know-01, 10 -> it, 13 -> defrost-01),Map(n -> name, b3 -> bad, b -> bacterium, k -> know-01, b2 -> bacterium, c4 -> case, a3 -> and, s -> state-01, d -> defrost-01, m -> mess, 7 -> 70, p -> person, a -> all, c3 -> clean-02, i2 -> it, i -> it, a2 -> afterward, r -> real, c -> certain, c2 -> cause-01))),[Ljava.lang.String;@3688eb5b,Annotation([Ljava.lang.String;@69f1a286,[Ljava.lang.String;@7922d892,[Ljava.lang.String;@457c9034),Annotation([Ljava.lang.String;@345f69f3,[Ljava.lang.String;@50de186c,[Ledu.cmu.lti.nlp.amr.Dependency;@3f57bcad),Annotation([Ljava.lang.String;@1e8b7643,[Ljava.lang.String;@51549490,[Ljava.lang.String;@71e9ebae),Annotation([Ljava.lang.String;@73d983ea,[Ljava.lang.String;@36a5cabc,[Ledu.cmu.lti.nlp.amr.Entity;@432038ec))
AMR:
(a3 / and, op, d / defrost-01)
(a3 / and, op, i2 / it)
(a3 / and, op, m / mess)
(b2 / bacterium, mod, a / all)
(c2 / cause-01, ARG0, k / know-01)
(c2 / cause-01, ARG1, m / mess)
(c3 / clean-02, ARG1, m / mess)
(c3 / clean-02, time, a2 / afterward)
(c4 / case, mod, b3 / bad)
(d / defrost-01, ARG1, b / bacterium)
(d / defrost-01, ARG6, b2 / bacterium)
(d / defrost-01, condition, c4 / case)
(k / know-01, ARG0, 7 / 70)
(k / know-01, ARG1, i / it)
(k / know-01, mod, c / certain)
(m / mess, mod, r / real)
(n / name, op, "Raymond")
(n / name, op, "Zilinskas")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a3 / and)

Decoded in 1,769,375 microseconds
Sentence: The confrontation between the mosenergo electric utility and the State Scientific Center of applied Microbiology in obolensk is another example of how the basic capitalist imperative for enterprises to be self-sustaining can clash in a dangerous way with the old remnants of Soviet weapons science.

NER Entity: (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
NER Entity: (thing :name (name :op "Soviet"))
Spans:
Span 7-8:  and => and
Span 18-19:  another => another
Span 23-24:  basic => basic
Span 2-3:  between => between
Span 33-34:  can => possible
Span 24-25:  capitalist => capitalism
Span 34-35:  clash => clash-01
Span 1-2:  confrontation => confront-01
Span 37-38:  dangerous => dangerous
Span 27-28:  enterprises => enterprise
Span 19-20:  example => example
Span 25-26:  imperative => imperative
Span 4-7:  mosenergo electric utility => (utility :name (name :op "utility" :op "electric" :op "Mosenergo"))
Span 16-17:  obolensk => (city :name (name :op "Obolensk"))
Span 41-42:  old => old
Span 46-47:  science => science
Span 30-31:  self => self
Span 44-45:  Soviet => "Soviet"
Span 9-15:  State Scientific Center of applied Microbiology => (organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology"))
Span 32-33:  sustaining => sustain-01
Span 38-39:  way => way
Span 45-46:  weapons => weapon

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),science,science,false), Span(45,46,List(1),weapons,weapon,false), Span(44,45,List(2),Soviet,"Soviet",false), Span(41,42,List(3),old,old,false), Span(38,39,List(4),way,way,false), Span(37,38,List(5),dangerous,dangerous,false), Span(34,35,List(6),clash,clash-01,false), Span(33,34,List(7),can,possible,false), Span(32,33,List(8),sustaining,sustain-01,false), Span(30,31,List(9),self,self,false), Span(27,28,List(10),enterprises,enterprise,false), Span(25,26,List(11),imperative,imperative,false), Span(24,25,List(12),capitalist,capitalism,false), Span(23,24,List(13),basic,basic,false), Span(19,20,List(14),example,example,false), Span(18,19,List(15),another,another,false), Span(16,17,List(18, 17, 16),obolensk,(city :name (name :op "Obolensk")),false), Span(9,15,List(26, 25, 24, 23, 22, 21, 20, 19),State Scientific Center of applied Microbiology,(organization :name (name :op "State" :op "Scientific" :op "Center" :op "of" :op "applied" :op "Microbiology")),false), Span(7,8,List(27),and,and,false), Span(4,7,List(32, 31, 30, 29, 28),mosenergo electric utility,(utility :name (name :op "utility" :op "electric" :op "Mosenergo")),false), Span(2,3,List(33),between,between,false), Span(1,2,List(34),confrontation,confront-01,false)),Map(30 -> "utility", 2 -> "Soviet", 5 -> dangerous, 33 -> between, 27 -> and, 12 -> capitalism, 8 -> sustain-01, 15 -> another, 21 -> "State", 18 -> "Obolensk", 24 -> "of", 7 -> possible, 1 -> weapon, 17 -> name, 23 -> "Center", 26 -> "Microbiology", 4 -> way, 11 -> imperative, 32 -> "Mosenergo", 14 -> example, 29 -> name, 20 -> name, 34 -> confront-01, 28 -> utility, 6 -> clash-01, 9 -> self, 0 -> science, 22 -> "Scientific", 16 -> city, 19 -> organization, 10 -> enterprise, 3 -> old, 31 -> "electric", 25 -> "applied", 13 -> basic),Map(e -> enterprise, S -> "Soviet", w -> weapon, n -> name, s2 -> sustain-01, b -> basic, b2 -> between, e2 -> example, c4 -> confront-01, s -> science, d -> dangerous, p -> possible, a -> another, c3 -> city, n3 -> name, o2 -> organization, w2 -> way, i -> imperative, a2 -> and, c -> clash-01, s3 -> self, u -> utility, o -> old, c2 -> capitalism, n2 -> name))),[Ljava.lang.String;@7daa0fbd,Annotation([Ljava.lang.String;@42530531,[Ljava.lang.String;@5a3bc7ed,[Ljava.lang.String;@181e731e),Annotation([Ljava.lang.String;@35645047,[Ljava.lang.String;@6f44a157,[Ledu.cmu.lti.nlp.amr.Dependency;@6bc407fd),Annotation([Ljava.lang.String;@291f18,[Ljava.lang.String;@17d88132,[Ljava.lang.String;@5ddcc487),Annotation([Ljava.lang.String;@16eccb2e,[Ljava.lang.String;@5ef5c734,[Ledu.cmu.lti.nlp.amr.Entity;@d771cc9))
AMR:
(a2 / and, op, o2 / organization)
(a2 / and, op, p / possible)
(b / basic, mod, S / "Soviet")
(c / clash-01, ARG0, i / imperative)
(c / clash-01, ARG1, w2 / way)
(c / clash-01, manner, d / dangerous)
(c3 / city, name, n / name)
(c4 / confront-01, ARG0, u / utility)
(c4 / confront-01, ARG1, o2 / organization)
(c4 / confront-01, location, b2 / between)
(e2 / example, example, c / clash-01)
(e2 / example, mod, a / another)
(i / imperative, mod, b / basic)
(i / imperative, mod, c2 / capitalism)
(i / imperative, topic, s2 / sustain-01)
(n / name, op, "Obolensk")
(n2 / name, op, "Center")
(n2 / name, op, "Microbiology")
(n2 / name, op, "Scientific")
(n2 / name, op, "State")
(n2 / name, op, "applied")
(n2 / name, op, "of")
(n3 / name, op, "Mosenergo")
(n3 / name, op, "electric")
(n3 / name, op, "utility")
(o / old, mod, e2 / example)
(o2 / organization, location, c3 / city)
(o2 / organization, name, n2 / name)
(p / possible, domain, c / clash-01)
(s / science, mod, w / weapon)
(s2 / sustain-01, ARG1, e / enterprise)
(s3 / self, ARG0, e / enterprise)
(u / utility, name, n3 / name)
(w2 / way, poss, w / weapon)

Decoded in 855,847 microseconds
Sentence: Due to an overdue power bill in 000000 the Russian National Power Company cut off electricity to a strategic base where nuclear missiles stood on high alert.

mkDayMonthYear(000000,00,00,00)
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "National"))
NER Entity: (organization :name (name :op "Power" :op "Company"))
NER Entity: (thing :name (name :op "Russian"))
mkDayMonthYear(000000,00,00,00)
Spans:
Span 7-8:  000000 => (date-entity :year 2000)
Span 26-27:  alert => alert-01
Span 19-20:  base => base
Span 5-6:  bill => bill
Span 13-14:  cut => cut-02
Span 15-16:  electricity => electricity
Span 25-26:  high => high
Span 22-23:  missiles => missile
Span 21-22:  nuclear => nucleus
Span 14-15:  off => off
Span 3-4:  overdue => overdue
Span 4-5:  power => power
Span 11-13:  Power Company => (organization :name (name :op "Power" :op "Company"))
Span 9-10:  Russian => (country :name (name :op "Russia"))
Span 23-24:  stood => stand-02
Span 18-19:  strategic => strategy

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),alert,alert-01,false), Span(25,26,List(1),high,high,false), Span(23,24,List(2),stood,stand-02,false), Span(22,23,List(3),missiles,missile,false), Span(21,22,List(4),nuclear,nucleus,false), Span(19,20,List(5),base,base,false), Span(18,19,List(6),strategic,strategy,false), Span(15,16,List(7),electricity,electricity,false), Span(14,15,List(8),off,off,false), Span(13,14,List(9),cut,cut-02,false), Span(11,13,List(13, 12, 11, 10),Power Company,(organization :name (name :op "Power" :op "Company")),false), Span(9,10,List(16, 15, 14),Russian,(country :name (name :op "Russia")),false), Span(7,8,List(18, 17),000000,(date-entity :year 2000),false), Span(5,6,List(19),bill,bill,false), Span(4,5,List(20),power,power,false), Span(3,4,List(21),overdue,overdue,false)),Map(2 -> stand-02, 5 -> base, 12 -> "Power", 15 -> name, 8 -> off, 21 -> overdue, 18 -> 2000, 7 -> electricity, 17 -> date-entity, 1 -> high, 4 -> nucleus, 11 -> name, 14 -> country, 20 -> power, 6 -> strategy, 0 -> alert-01, 9 -> cut-02, 16 -> "Russia", 19 -> bill, 3 -> missile, 10 -> organization, 13 -> "Company"),Map(e -> electricity, n -> nucleus, h -> high, 2 -> 2000, s2 -> strategy, b -> base, o3 -> overdue, b2 -> bill, s -> stand-02, d -> date-entity, m -> missile, p -> power, n3 -> name, a -> alert-01, o2 -> organization, c -> cut-02, o -> off, n2 -> name, c2 -> country))),[Ljava.lang.String;@36b4091c,Annotation([Ljava.lang.String;@4671115f,[Ljava.lang.String;@36cda2c2,[Ljava.lang.String;@3697186),Annotation([Ljava.lang.String;@1583741e,[Ljava.lang.String;@5b367418,[Ledu.cmu.lti.nlp.amr.Dependency;@36060e),Annotation([Ljava.lang.String;@481ba2cf,[Ljava.lang.String;@46b61c56,[Ljava.lang.String;@2e48362c),Annotation([Ljava.lang.String;@1efe439d,[Ljava.lang.String;@be68757,[Ledu.cmu.lti.nlp.amr.Entity;@7d446ed1))
AMR:
(a / alert-01, ARG1, o3 / overdue)
(a / alert-01, mod, h / high)
(b / base, mod, s2 / strategy)
(b2 / bill, mod, o3 / overdue)
(b2 / bill, mod, p / power)
(b2 / bill, time, d / date-entity)
(c / cut-02, ARG0, o2 / organization)
(c / cut-02, ARG1, e / electricity)
(c / cut-02, ARG6, o / off)
(c / cut-02, location, b / base)
(c2 / country, name, n3 / name)
(d / date-entity, year, 2 / 2000)
(m / missile, mod, n / nucleus)
(n2 / name, op, "Company")
(n2 / name, op, "Power")
(n3 / name, op, "Russia")
(o2 / organization, name, n2 / name)
(o2 / organization, poss, c2 / country)
(s / stand-02, ARG1, m / missile)
(s / stand-02, ARG2, a / alert-01)
(s / stand-02, location, b / base)

Decoded in 622,099 microseconds
Sentence: The nuclear missile silos themselves did not lose power.

Spans:
Span 7-8:  lose => lose-06
Span 2-3:  missile => missile
Span 1-2:  nuclear => nucleus
Span 8-9:  power => power
Span 3-4:  silos => silo

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),power,power,false), Span(7,8,List(1),lose,lose-06,false), Span(3,4,List(2),silos,silo,false), Span(2,3,List(3),missile,missile,false), Span(1,2,List(4),nuclear,nucleus,false)),Map(2 -> silo, 1 -> lose-06, 4 -> nucleus, 0 -> power, 3 -> missile),Map(n -> nucleus, s -> silo, m -> missile, p -> power, l -> lose-06))),[Ljava.lang.String;@12d2ce03,Annotation([Ljava.lang.String;@7e5c856f,[Ljava.lang.String;@413f69cc,[Ljava.lang.String;@1f53a5dc),Annotation([Ljava.lang.String;@1b75c2e3,[Ljava.lang.String;@1984b1f,[Ledu.cmu.lti.nlp.amr.Dependency;@3bd323e9),Annotation([Ljava.lang.String;@39ac0c0a,[Ljava.lang.String;@c7ba306,[Ljava.lang.String;@4ff8d125),Annotation([Ljava.lang.String;@6d167f58,[Ljava.lang.String;@3403e2ac,[Ledu.cmu.lti.nlp.amr.Entity;@65b104b9))
AMR:
(l / lose-06, ARG0, s / silo)
(l / lose-06, ARG1, p / power)
(m / missile, mod, n / nucleus)
(s / silo, mod, m / missile)

Decoded in 27,403 microseconds
Sentence: Armed troops marched to the substations and turned the power back on.

Spans:
Span 6-7:  and => and
Span 0-1:  Armed => arm-01
Span 10-11:  back => back
Span 2-3:  marched => march-01
Span 9-10:  power => power
Span 5-6:  substations => substation
Span 1-2:  troops => troop
Span 7-8:  turned => turn-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),back,back,false), Span(9,10,List(1),power,power,false), Span(7,8,List(2),turned,turn-02,false), Span(6,7,List(3),and,and,false), Span(5,6,List(4),substations,substation,false), Span(2,3,List(5),marched,march-01,false), Span(1,2,List(6),troops,troop,false), Span(0,1,List(7),Armed,arm-01,false)),Map(2 -> turn-02, 5 -> march-01, 7 -> arm-01, 1 -> power, 4 -> substation, 6 -> troop, 0 -> back, 3 -> and),Map(t -> turn-02, b -> back, s -> substation, m -> march-01, p -> power, a -> and, t2 -> troop, a2 -> arm-01))),[Ljava.lang.String;@6c4980d3,Annotation([Ljava.lang.String;@327bcebd,[Ljava.lang.String;@19c65cdc,[Ljava.lang.String;@74bf1791),Annotation([Ljava.lang.String;@54504ecd,[Ljava.lang.String;@38b27cdc,[Ledu.cmu.lti.nlp.amr.Dependency;@1339e7aa),Annotation([Ljava.lang.String;@1fb669c3,[Ljava.lang.String;@49c66ade,[Ljava.lang.String;@6239aba6),Annotation([Ljava.lang.String;@3e6104fc,[Ljava.lang.String;@12359a82,[Ledu.cmu.lti.nlp.amr.Entity;@68df9280))
AMR:
(a / and, op, m / march-01)
(a / and, op, t / turn-02)
(a2 / arm-01, ARG1, t2 / troop)
(m / march-01, ARG0, t2 / troop)
(m / march-01, destination, s / substation)
(t / turn-02, ARG0, t2 / troop)
(t / turn-02, ARG1, p / power)
(t / turn-02, mod, b / back)

Decoded in 37,374 microseconds
Sentence: In 010100 and 010200 the national utility, United energy systems cut power to a number of military installations around Russia.

mkDayMonthYear(010100,00,01,01)
mkDayMonthYear(010200,00,02,01)
NER Entity: (thing :name (name :op "United"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
mkDayMonthYear(010200,00,02,01)
mkDayMonthYear(010100,00,01,01)
Spans:
Span 1-2:  010100 => (date-entity :month 1 :year 2001)
Span 3-4:  010200 => (date-entity :month 2 :year 2001)
Span 2-3:  and => and
Span 19-20:  around => around
Span 11-12:  cut => cut-02
Span 18-19:  installations => installation
Span 17-18:  military => military
Span 5-6:  national => nation
Span 15-16:  number => number
Span 12-13:  power => power
Span 20-21:  Russia => (country :name (name :op "Russia"))
Span 8-11:  United energy systems => (name :op "systems" :op "energy" :op "United")
Span 6-7:  utility => utility

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(2, 1, 0),Russia,(country :name (name :op "Russia")),false), Span(19,20,List(3),around,around,false), Span(18,19,List(4),installations,installation,false), Span(17,18,List(5),military,military,false), Span(15,16,List(6),number,number,false), Span(12,13,List(7),power,power,false), Span(11,12,List(8),cut,cut-02,false), Span(8,11,List(12, 11, 10, 9),United energy systems,(name :op "systems" :op "energy" :op "United"),false), Span(6,7,List(13),utility,utility,false), Span(5,6,List(14),national,nation,false), Span(3,4,List(17, 16, 15),010200,(date-entity :month 2 :year 2001),false), Span(2,3,List(18),and,and,false), Span(1,2,List(21, 20, 19),010100,(date-entity :month 1 :year 2001),false)),Map(2 -> "Russia", 5 -> military, 12 -> "United", 15 -> date-entity, 8 -> cut-02, 21 -> 2001, 18 -> and, 7 -> power, 17 -> 2001, 1 -> name, 4 -> installation, 11 -> "energy", 14 -> nation, 20 -> 1, 6 -> number, 0 -> country, 9 -> name, 16 -> 2, 19 -> date-entity, 3 -> around, 10 -> "systems", 13 -> utility),Map(n -> name, 2 -> 2, n4 -> nation, m -> military, d -> date-entity, 1 -> 1, 23 -> 2001, p -> power, a -> around, n3 -> name, d2 -> date-entity, a2 -> and, i -> installation, c -> country, u -> utility, 22 -> 2001, n2 -> number, c2 -> cut-02))),[Ljava.lang.String;@479460a6,Annotation([Ljava.lang.String;@7164ca4c,[Ljava.lang.String;@4f3bbf68,[Ljava.lang.String;@5be46f9d),Annotation([Ljava.lang.String;@3f91b517,[Ljava.lang.String;@68702e03,[Ledu.cmu.lti.nlp.amr.Dependency;@7a220c9a),Annotation([Ljava.lang.String;@2421cc4,[Ljava.lang.String;@30c93896,[Ljava.lang.String;@59a008ba),Annotation([Ljava.lang.String;@338c99c8,[Ljava.lang.String;@21ba0741,[Ledu.cmu.lti.nlp.amr.Entity;@58ce9668))
AMR:
(a / around, op, c / country)
(c / country, name, n / name)
(c2 / cut-02, ARG0, u / utility)
(c2 / cut-02, ARG1, p / power)
(c2 / cut-02, location, i / installation)
(c2 / cut-02, time, a2 / and)
(d / date-entity, month, 2 / 2)
(d / date-entity, year, 22 / 2001)
(d2 / date-entity, month, 1 / 1)
(d2 / date-entity, year, 23 / 2001)
(i / installation, location, a / around)
(i / installation, mod, m / military)
(i / installation, quant, n2 / number)
(n / name, op, "Russia")
(n3 / name, op, "United")
(n3 / name, op, "energy")
(n3 / name, op, "systems")
(p / power, time, d / date-entity)
(p / power, time, d2 / date-entity)
(u / utility, mod, n4 / nation)
(u / utility, name, n3 / name)

Decoded in 761,783 microseconds
Sentence: The military installations that lost power included the Russian space forces monitoring center on the Kamchatka Peninsula.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Kamchatka" :op "Peninsula"))
Spans:
Span 12-13:  center => center
Span 6-7:  included => include-01
Span 2-3:  installations => installation
Span 15-17:  Kamchatka Peninsula => (peninsula :name (name :op "Peninsula" :op "Kamchatka"))
Span 4-5:  lost => lose-02
Span 1-2:  military => military
Span 11-12:  monitoring => monitor-01
Span 5-6:  power => power
Span 8-11:  Russian space forces => (organization :name (name :op "Forces" :op "Space" :op "Russian"))

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,17,List(3, 2, 1, 0),Kamchatka Peninsula,(peninsula :name (name :op "Peninsula" :op "Kamchatka")),false), Span(12,13,List(4),center,center,false), Span(11,12,List(5),monitoring,monitor-01,false), Span(8,11,List(10, 9, 8, 7, 6),Russian space forces,(organization :name (name :op "Forces" :op "Space" :op "Russian")),false), Span(6,7,List(11),included,include-01,false), Span(5,6,List(12),power,power,false), Span(4,5,List(13),lost,lose-02,false), Span(2,3,List(14),installations,installation,false), Span(1,2,List(15),military,military,false)),Map(2 -> "Peninsula", 5 -> monitor-01, 12 -> power, 15 -> military, 8 -> "Forces", 7 -> name, 1 -> name, 4 -> center, 11 -> include-01, 14 -> installation, 6 -> organization, 0 -> peninsula, 9 -> "Space", 3 -> "Kamchatka", 10 -> "Russian", 13 -> lose-02),Map(n -> name, m2 -> military, p2 -> power, m -> monitor-01, p -> peninsula, i2 -> installation, i -> include-01, l -> lose-02, c -> center, o -> organization, n2 -> name))),[Ljava.lang.String;@172b013,Annotation([Ljava.lang.String;@56673b2c,[Ljava.lang.String;@2796aeae,[Ljava.lang.String;@b4711e2),Annotation([Ljava.lang.String;@1fa1cab1,[Ljava.lang.String;@70f02c32,[Ledu.cmu.lti.nlp.amr.Dependency;@62010f5c),Annotation([Ljava.lang.String;@51fadaff,[Ljava.lang.String;@401f7633,[Ljava.lang.String;@31ff43be),Annotation([Ljava.lang.String;@5b6ec132,[Ljava.lang.String;@5c44c582,[Ledu.cmu.lti.nlp.amr.Entity;@67d18ed7))
AMR:
(c / center, location, p / peninsula)
(i / include-01, ARG1, c / center)
(i / include-01, ARG2, i2 / installation)
(i2 / installation, mod, m2 / military)
(l / lose-02, ARG0, i2 / installation)
(l / lose-02, ARG1, p2 / power)
(m / monitor-01, ARG0, c / center)
(m / monitor-01, ARG1, o / organization)
(n / name, op, "Kamchatka")
(n / name, op, "Peninsula")
(n2 / name, op, "Forces")
(n2 / name, op, "Russian")
(n2 / name, op, "Space")
(o / organization, name, n2 / name)
(p / peninsula, name, n / name)

Decoded in 95,628 microseconds
Sentence: In most cases of military installations having their electricity cut off the electricity has been quickly restored.

Spans:
Span 2-3:  cases => case
Span 9-10:  cut => cut-02
Span 12-13:  electricity => electricity
Span 8-9:  electricity => electricity
Span 6-7:  having => have-03
Span 5-6:  installations => installation
Span 4-5:  military => military
Span 1-2:  most => most
Span 10-11:  off => off
Span 15-16:  quickly => quick
Span 16-17:  restored => restore-01

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),restored,restore-01,false), Span(15,16,List(1),quickly,quick,false), Span(12,13,List(2),electricity,electricity,false), Span(10,11,List(3),off,off,false), Span(9,10,List(4),cut,cut-02,false), Span(8,9,List(5),electricity,electricity,false), Span(6,7,List(6),having,have-03,false), Span(5,6,List(7),installations,installation,false), Span(4,5,List(8),military,military,false), Span(2,3,List(9),cases,case,false), Span(1,2,List(10),most,most,false)),Map(2 -> electricity, 5 -> electricity, 8 -> military, 7 -> installation, 1 -> quick, 4 -> cut-02, 6 -> have-03, 9 -> case, 0 -> restore-01, 10 -> most, 3 -> off),Map(e -> electricity, h -> have-03, q -> quick, m2 -> most, e2 -> electricity, m -> military, i -> installation, r -> restore-01, c -> cut-02, o -> off, c2 -> case))),[Ljava.lang.String;@2c78d320,Annotation([Ljava.lang.String;@132e0cc,[Ljava.lang.String;@7b205dbd,[Ljava.lang.String;@106cc338),Annotation([Ljava.lang.String;@7a67e3c6,[Ljava.lang.String;@6cc558c6,[Ledu.cmu.lti.nlp.amr.Dependency;@15713d56),Annotation([Ljava.lang.String;@63f259c3,[Ljava.lang.String;@26ceffa8,[Ljava.lang.String;@600b90df),Annotation([Ljava.lang.String;@7c8c9a05,[Ljava.lang.String;@d41f816,[Ledu.cmu.lti.nlp.amr.Entity;@5c2375a9))
AMR:
(c / cut-02, ARG1, e2 / electricity)
(c / cut-02, ARG4, i / installation)
(c / cut-02, ARG6, o / off)
(c2 / case, mod, i / installation)
(c2 / case, quant, m2 / most)
(h / have-03, ARG1, e2 / electricity)
(i / installation, mod, m / military)
(r / restore-01, ARG1, e / electricity)
(r / restore-01, mod, q / quick)
(r / restore-01, time, c2 / case)

Decoded in 475,620 microseconds
Sentence: Often investigations show that the tug of war with the utility forces the military to spend budgeted funds for electrical power instead of diverting money for other uses.

Spans:
Span 16-17:  budgeted => budget-01
Span 23-24:  diverting => divert-01
Span 19-20:  electrical => electricity
Span 11-12:  forces => force
Span 17-18:  funds => fund
Span 21-22:  instead => instead
Span 1-2:  investigations => investigate-01
Span 13-14:  military => military
Span 24-25:  money => money
Span 0-1:  Often => often
Span 26-27:  other => other
Span 20-21:  power => power
Span 2-3:  show => show-01
Span 15-16:  spend => spend-02
Span 5-6:  tug => tug-02
Span 27-28:  uses => use-01
Span 10-11:  utility => utility
Span 7-8:  war => war

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),uses,use-01,false), Span(26,27,List(1),other,other,false), Span(24,25,List(2),money,money,false), Span(23,24,List(3),diverting,divert-01,false), Span(21,22,List(4),instead,instead,false), Span(20,21,List(5),power,power,false), Span(19,20,List(6),electrical,electricity,false), Span(17,18,List(7),funds,fund,false), Span(16,17,List(8),budgeted,budget-01,false), Span(15,16,List(9),spend,spend-02,false), Span(13,14,List(10),military,military,false), Span(11,12,List(11),forces,force,false), Span(10,11,List(12),utility,utility,false), Span(7,8,List(13),war,war,false), Span(5,6,List(14),tug,tug-02,false), Span(2,3,List(15),show,show-01,false), Span(1,2,List(16),investigations,investigate-01,false), Span(0,1,List(17),Often,often,false)),Map(2 -> money, 5 -> power, 12 -> utility, 15 -> show-01, 8 -> budget-01, 7 -> fund, 17 -> often, 1 -> other, 4 -> instead, 11 -> force, 14 -> tug-02, 6 -> electricity, 0 -> use-01, 9 -> spend-02, 16 -> investigate-01, 3 -> divert-01, 10 -> military, 13 -> war),Map(e -> electricity, w -> war, s2 -> show-01, t -> tug-02, b -> budget-01, m2 -> military, s -> spend-02, u2 -> utility, m -> money, d -> divert-01, p -> power, o2 -> often, i2 -> investigate-01, i -> instead, u -> use-01, f2 -> force, f -> fund, o -> other))),[Ljava.lang.String;@60129b9a,Annotation([Ljava.lang.String;@78d6692f,[Ljava.lang.String;@7a55af6b,[Ljava.lang.String;@3d9c13b5),Annotation([Ljava.lang.String;@492691d7,[Ljava.lang.String;@27216cd,[Ledu.cmu.lti.nlp.amr.Dependency;@558bdf1f),Annotation([Ljava.lang.String;@8576fa0,[Ljava.lang.String;@7582ff54,[Ljava.lang.String;@67545b57),Annotation([Ljava.lang.String;@6c2c1385,[Ljava.lang.String;@5f354bcf,[Ledu.cmu.lti.nlp.amr.Entity;@3daf7722))
AMR:
(b / budget-01, ARG0, f / fund)
(b / budget-01, ARG1, m2 / military)
(d / divert-01, ARG0, m2 / military)
(d / divert-01, ARG1, m / money)
(d / divert-01, ARG3, u / use-01)
(d / divert-01, ARG6, i / instead)
(d / divert-01, prep-instead, s / spend-02)
(f2 / force, purpose, s / spend-02)
(s / spend-02, ARG0, u2 / utility)
(s / spend-02, ARG1, p / power)
(s2 / show-01, ARG0, i2 / investigate-01)
(s2 / show-01, ARG1, t / tug-02)
(s2 / show-01, frequency, o2 / often)
(t / tug-02, ARG1, f2 / force)
(t / tug-02, mod, w / war)
(u / use-01, ARG1, e / electricity)
(u / use-01, mod, o / other)

Decoded in 1,422,470 microseconds
Sentence: Some of the budgeted funds cut at times have included the building country residences for generals.

Spans:
Span 3-4:  budgeted => budget-01
Span 11-12:  building => build-01
Span 12-13:  country => country
Span 5-6:  cut => cut-02
Span 4-5:  funds => fund
Span 15-16:  generals => general
Span 9-10:  included => include-01
Span 13-14:  residences => residence
Span 0-1:  Some => some

Langrangian relaxation converged after 73 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),generals,general,false), Span(13,14,List(1),residences,residence,false), Span(12,13,List(2),country,country,false), Span(11,12,List(3),building,build-01,false), Span(9,10,List(4),included,include-01,false), Span(5,6,List(5),cut,cut-02,false), Span(4,5,List(6),funds,fund,false), Span(3,4,List(7),budgeted,budget-01,false), Span(0,1,List(8),Some,some,false)),Map(2 -> country, 5 -> cut-02, 8 -> some, 7 -> budget-01, 1 -> residence, 4 -> include-01, 6 -> fund, 0 -> general, 3 -> build-01),Map(b -> build-01, b2 -> budget-01, s -> some, g -> general, i -> include-01, r -> residence, c -> country, f -> fund, c2 -> cut-02))),[Ljava.lang.String;@78641d23,Annotation([Ljava.lang.String;@74589991,[Ljava.lang.String;@146dfe6,[Ljava.lang.String;@4716be8b),Annotation([Ljava.lang.String;@1fc32e4f,[Ljava.lang.String;@2f67b837,[Ledu.cmu.lti.nlp.amr.Dependency;@1869fbd2),Annotation([Ljava.lang.String;@6af9fcb2,[Ljava.lang.String;@6cce16f4,[Ljava.lang.String;@7efaad5a),Annotation([Ljava.lang.String;@291a7e3c,[Ljava.lang.String;@ca30bc1,[Ledu.cmu.lti.nlp.amr.Entity;@1046d517))
AMR:
(b / build-01, ARG1, r / residence)
(b2 / budget-01, ARG0, f / fund)
(b2 / budget-01, ARG1, i / include-01)
(c2 / cut-02, ARG0, g / general)
(c2 / cut-02, ARG1, f / fund)
(f / fund, quant, s / some)
(i / include-01, ARG1, r / residence)
(r / residence, location, c / country)

Decoded in 479,360 microseconds
Sentence: 2004-07-24

mkDayMonthYear(2004-07-24,24,07,2004)
mkDayMonthYear(2004-07-24,24,07,2004)
Spans:
Span 0-1:  2004-07-24 => (date-entity :day 24 :month 7 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-07-24,(date-entity :day 24 :month 7 :year 2004),false)),Map(2 -> 7, 1 -> 24, 0 -> date-entity, 3 -> 2004),Map(2 -> 24, 7 -> 7, d -> date-entity, 22 -> 2004))),[Ljava.lang.String;@3b7d3a38,Annotation([Ljava.lang.String;@416c58f5,[Ljava.lang.String;@5505ae1a,[Ljava.lang.String;@73cd37c0),Annotation([Ljava.lang.String;@21337f7b,[Ljava.lang.String;@2bb3058,[Ledu.cmu.lti.nlp.amr.Dependency;@7a362b6b),Annotation([Ljava.lang.String;@60df60da,[Ljava.lang.String;@5a2d131d,[Ljava.lang.String;@14fc1f0),Annotation([Ljava.lang.String;@4ae9cfc1,[Ljava.lang.String;@512baff6,[Ledu.cmu.lti.nlp.amr.Entity;@632ceb35))
AMR:
(d / date-entity, day, 2 / 24)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2004)

Decoded in 7,230 microseconds
Sentence: Brazil (BR)

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (organization :name (name :op "BR"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 0-1:  Brazil => (country :name (name :op "Brazil"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> "Brazil", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@1c93f6e1,Annotation([Ljava.lang.String;@1800a575,[Ljava.lang.String;@1458ed9c,[Ljava.lang.String;@10a9d961),Annotation([Ljava.lang.String;@130e116b,[Ljava.lang.String;@e383572,[Ledu.cmu.lti.nlp.amr.Dependency;@5ddf0d24),Annotation([Ljava.lang.String;@363a52f,[Ljava.lang.String;@60856961,[Ljava.lang.String;@2fd953a6),Annotation([Ljava.lang.String;@a4add54,[Ljava.lang.String;@141e5bef,[Ledu.cmu.lti.nlp.amr.Entity;@5f9be66c))
AMR:
(c / country, name, n / name)
(n / name, op, "Brazil")

Decoded in 4,902 microseconds
Sentence: International; crime; Government; narcotics

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 2-3:  crime => crime
Span 4-5:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 6-7:  narcotics => narcotic

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),narcotics,narcotic,false), Span(5,6,List(1),;,and,false), Span(4,5,List(3, 2),Government,(government-organization :ARG0-of govern-01),false), Span(3,4,List(4),;,and,false), Span(2,3,List(5),crime,crime,false), Span(1,2,List(6),;,and,false), Span(0,1,List(7),International,international,false)),Map(2 -> government-organization, 5 -> crime, 7 -> international, 1 -> and, 4 -> and, 6 -> and, 0 -> narcotic, 3 -> govern-01),Map(n -> narcotic, a3 -> and, g2 -> govern-01, g -> government-organization, a -> and, i -> international, a2 -> and, c -> crime))),[Ljava.lang.String;@3abada5a,Annotation([Ljava.lang.String;@66c61024,[Ljava.lang.String;@61fe30,[Ljava.lang.String;@c9d0d6),Annotation([Ljava.lang.String;@6ccdb29f,[Ljava.lang.String;@3adcc812,[Ledu.cmu.lti.nlp.amr.Dependency;@35432107),Annotation([Ljava.lang.String;@7b420819,[Ljava.lang.String;@7a1a14a4,[Ljava.lang.String;@265adfad),Annotation([Ljava.lang.String;@a3d9978,[Ljava.lang.String;@61544ae6,[Ledu.cmu.lti.nlp.amr.Entity;@4b41dd5c))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, g / government-organization)
(a3 / and, op, a2 / and)
(a3 / and, op, c / crime)
(a3 / and, op, i / international)
(a3 / and, op, n / narcotic)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 28,599 microseconds
Sentence: Brazil to implement law allowing air force to target drug trafficking aircraft in Brazilian airspace.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 5-7:  air force => (military :name (name :op "force" :op "air"))
Span 11-12:  aircraft => aircraft
Span 14-15:  airspace => airspace
Span 4-5:  allowing => allow-01
Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Span 13-14:  Brazilian => (country :name (name :op "Brazil"))
Span 9-10:  drug => drug
Span 2-3:  implement => implement-01
Span 3-4:  law => law
Span 8-9:  target => target-01
Span 10-11:  trafficking => traffic-00

Langrangian relaxation converged after 59 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),airspace,airspace,false), Span(13,14,List(3, 2, 1),Brazilian,(country :name (name :op "Brazil")),false), Span(11,12,List(4),aircraft,aircraft,false), Span(10,11,List(5),trafficking,traffic-00,false), Span(9,10,List(6),drug,drug,false), Span(8,9,List(7),target,target-01,false), Span(5,7,List(11, 10, 9, 8),air force,(military :name (name :op "force" :op "air")),false), Span(4,5,List(12),allowing,allow-01,false), Span(3,4,List(13),law,law,false), Span(2,3,List(14),implement,implement-01,false), Span(0,1,List(17, 16, 15),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> name, 5 -> traffic-00, 12 -> allow-01, 15 -> country, 8 -> military, 7 -> target-01, 17 -> "Brazil", 1 -> country, 4 -> aircraft, 11 -> "air", 14 -> implement-01, 6 -> drug, 0 -> airspace, 9 -> name, 16 -> name, 3 -> "Brazil", 10 -> "force", 13 -> law),Map(n -> name, t -> traffic-00, a3 -> allow-01, d -> drug, m -> military, n3 -> name, a -> airspace, t2 -> target-01, a2 -> aircraft, i -> implement-01, c -> country, l -> law, n2 -> name, c2 -> country))),[Ljava.lang.String;@3b96c42e,Annotation([Ljava.lang.String;@5d066c7d,[Ljava.lang.String;@1e461e41,[Ljava.lang.String;@5ba88be8),Annotation([Ljava.lang.String;@56928307,[Ljava.lang.String;@3899782c,[Ledu.cmu.lti.nlp.amr.Dependency;@1603cd68),Annotation([Ljava.lang.String;@9ebe38b,[Ljava.lang.String;@4b23c30a,[Ljava.lang.String;@38089a5a),Annotation([Ljava.lang.String;@30e868be,[Ljava.lang.String;@66c92293,[Ledu.cmu.lti.nlp.amr.Entity;@332796d3))
AMR:
(a / airspace, mod, c / country)
(a / airspace, mod, c2 / country)
(a3 / allow-01, ARG0, l / law)
(a3 / allow-01, ARG1, t2 / target-01)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(i / implement-01, ARG0, c2 / country)
(i / implement-01, ARG1, l / law)
(m / military, name, n2 / name)
(n / name, op, "Brazil")
(n2 / name, op, "air")
(n2 / name, op, "force")
(n3 / name, op, "Brazil")
(t / traffic-00, ARG0, a2 / aircraft)
(t / traffic-00, ARG1, d / drug)
(t2 / target-01, ARG0, m / military)
(t2 / target-01, ARG1, a2 / aircraft)

Decoded in 944,909 microseconds
Sentence: US concerned over liability in the event of misidentification of a civilian plane.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 11-12:  civilian => civilian
Span 1-2:  concerned => concern-01
Span 6-7:  event => event
Span 3-4:  liability => liability
Span 8-9:  misidentification => misidentify-00
Span 2-3:  over => over
Span 12-13:  plane => plane
Span 0-1:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),plane,plane,false), Span(11,12,List(1),civilian,civilian,false), Span(8,9,List(2),misidentification,misidentify-00,false), Span(6,7,List(3),event,event,false), Span(3,4,List(4),liability,liability,false), Span(2,3,List(5),over,over,false), Span(1,2,List(6),concerned,concern-01,false), Span(0,1,List(9, 8, 7),US,(country :name (name :op "US")),false)),Map(2 -> misidentify-00, 5 -> over, 8 -> name, 7 -> country, 1 -> civilian, 4 -> liability, 6 -> concern-01, 9 -> "US", 0 -> plane, 3 -> event),Map(n -> name, e -> event, m -> misidentify-00, p -> plane, c3 -> country, l -> liability, c -> civilian, o -> over, c2 -> concern-01))),[Ljava.lang.String;@4f0100a7,Annotation([Ljava.lang.String;@3cdf2c61,[Ljava.lang.String;@13ad5cd3,[Ljava.lang.String;@1c33c17b),Annotation([Ljava.lang.String;@5bf0fe62,[Ljava.lang.String;@1e097d59,[Ledu.cmu.lti.nlp.amr.Dependency;@673be18f),Annotation([Ljava.lang.String;@6581dc0a,[Ljava.lang.String;@39de3d36,[Ljava.lang.String;@6ce86ce1),Annotation([Ljava.lang.String;@54e7df6a,[Ljava.lang.String;@3fed2870,[Ledu.cmu.lti.nlp.amr.Entity;@77128536))
AMR:
(c2 / concern-01, ARG0, l / liability)
(c2 / concern-01, ARG1, c3 / country)
(c3 / country, name, n / name)
(l / liability, condition, m / misidentify-00)
(l / liability, poss, e / event)
(m / misidentify-00, ARG1, p / plane)
(n / name, op, "US")
(o / over, op, l / liability)
(p / plane, mod, c / civilian)

Decoded in 160,568 microseconds
Sentence: Brazil announced that the air force will begin shooting down aircraft used in trafficking illegal drugs in Brazilian airspace.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 4-6:  air force => (military :name (name :op "force" :op "air"))
Span 10-11:  aircraft => aircraft
Span 18-19:  airspace => airspace
Span 1-2:  announced => announce-01
Span 7-8:  begin => begin-01
Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Span 17-18:  Brazilian => (country :name (name :op "Brazil"))
Span 9-10:  down => down
Span 15-16:  drugs => drug
Span 14-15:  illegal => (law :polarity -)
Span 8-9:  shooting => shoot-05
Span 13-14:  trafficking => traffic-00
Span 11-12:  used => use-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),airspace,airspace,false), Span(17,18,List(3, 2, 1),Brazilian,(country :name (name :op "Brazil")),false), Span(15,16,List(4),drugs,drug,false), Span(14,15,List(6, 5),illegal,(law :polarity -),false), Span(13,14,List(7),trafficking,traffic-00,false), Span(11,12,List(8),used,use-01,false), Span(10,11,List(9),aircraft,aircraft,false), Span(9,10,List(10),down,down,false), Span(8,9,List(11),shooting,shoot-05,false), Span(7,8,List(12),begin,begin-01,false), Span(4,6,List(16, 15, 14, 13),air force,(military :name (name :op "force" :op "air")),false), Span(1,2,List(17),announced,announce-01,false), Span(0,1,List(20, 19, 18),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> name, 5 -> law, 12 -> begin-01, 15 -> "force", 8 -> use-01, 18 -> country, 7 -> traffic-00, 17 -> announce-01, 1 -> country, 4 -> drug, 11 -> shoot-05, 14 -> name, 20 -> "Brazil", 6 -> -, 0 -> airspace, 9 -> aircraft, 16 -> "air", 19 -> name, 3 -> "Brazil", 10 -> down, 13 -> military),Map(n -> name, t -> traffic-00, b -> begin-01, a3 -> announce-01, s -> shoot-05, d -> drug, m -> military, n3 -> name, a -> airspace, d2 -> down, a2 -> aircraft, c -> country, l -> law, u -> use-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@58326051,Annotation([Ljava.lang.String;@32c4e8b2,[Ljava.lang.String;@64bce832,[Ljava.lang.String;@764faa6),Annotation([Ljava.lang.String;@4c1f22f3,[Ljava.lang.String;@598bd2ba,[Ledu.cmu.lti.nlp.amr.Dependency;@5a755cc1),Annotation([Ljava.lang.String;@7ae42ce3,[Ljava.lang.String;@4f5991f6,[Ljava.lang.String;@484094a5),Annotation([Ljava.lang.String;@38234a38,[Ljava.lang.String;@63fbfaeb,[Ledu.cmu.lti.nlp.amr.Entity;@602e0143))
AMR:
(a / airspace, mod, c / country)
(a / airspace, mod, c2 / country)
(a3 / announce-01, ARG0, c2 / country)
(a3 / announce-01, ARG1, b / begin-01)
(b / begin-01, ARG0, m / military)
(b / begin-01, ARG1, s / shoot-05)
(b / begin-01, ARG6, d2 / down)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(d / drug, mod, l / law)
(l / law, polarity, -)
(m / military, name, n2 / name)
(n / name, op, "Brazil")
(n2 / name, op, "air")
(n2 / name, op, "force")
(n3 / name, op, "Brazil")
(s / shoot-05, ARG0, m / military)
(s / shoot-05, ARG1, a2 / aircraft)
(t / traffic-00, ARG1, d / drug)
(t / traffic-00, location, a / airspace)
(u / use-01, ARG1, a2 / aircraft)

Decoded in 636,319 microseconds
Sentence: The plan requires 8 precautionary steps before the order to shoot down a plane may be issued.

Spans:
Span 3-4:  8 => 8
Span 6-7:  before => before
Span 11-12:  down => down
Span 16-17:  issued => issue-01
Span 14-15:  may => possible
Span 1-2:  plan => plan-01
Span 13-14:  plane => plane
Span 4-5:  precautionary => precaution
Span 2-3:  requires => require-01
Span 10-11:  shoot => shoot-05
Span 5-6:  steps => step

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),issued,issue-01,false), Span(14,15,List(1),may,possible,false), Span(13,14,List(2),plane,plane,false), Span(11,12,List(3),down,down,false), Span(10,11,List(4),shoot,shoot-05,false), Span(6,7,List(5),before,before,false), Span(5,6,List(6),steps,step,false), Span(4,5,List(7),precautionary,precaution,false), Span(3,4,List(8),8,8,false), Span(2,3,List(9),requires,require-01,false), Span(1,2,List(10),plan,plan-01,false)),Map(2 -> plane, 5 -> before, 8 -> 8, 7 -> precaution, 1 -> possible, 4 -> shoot-05, 6 -> step, 9 -> require-01, 0 -> issue-01, 10 -> plan-01, 3 -> down),Map(s2 -> step, b -> before, 8 -> 8, p2 -> plane, s -> shoot-05, d -> down, p -> possible, p4 -> plan-01, r -> require-01, i -> issue-01, p3 -> precaution))),[Ljava.lang.String;@2c07545f,Annotation([Ljava.lang.String;@e57b96d,[Ljava.lang.String;@32c726ee,[Ljava.lang.String;@22f31dec),Annotation([Ljava.lang.String;@34c01041,[Ljava.lang.String;@76f4b65,[Ledu.cmu.lti.nlp.amr.Dependency;@c94fd30),Annotation([Ljava.lang.String;@36328d33,[Ljava.lang.String;@2c4d1ac,[Ljava.lang.String;@7f0d96f2),Annotation([Ljava.lang.String;@545b995e,[Ljava.lang.String;@76a2ddf3,[Ledu.cmu.lti.nlp.amr.Entity;@524f3b3a))
AMR:
(b / before, op, p / possible)
(i / issue-01, ARG1, s / shoot-05)
(p / possible, domain, i / issue-01)
(p4 / plan-01, ARG1, d / down)
(r / require-01, ARG1, s2 / step)
(r / require-01, ARG2, p4 / plan-01)
(r / require-01, time, b / before)
(s / shoot-05, ARG1, p2 / plane)
(s2 / step, mod, p3 / precaution)
(s2 / step, quant, 8 / 8)

Decoded in 296,917 microseconds
Sentence: Prior to the policy taking effect late 20041000 a publicity campaign will notify ranchers and others of the need to file flight plans.

mkDayMonthYear(20041000,00,10,2004)
mkDayMonthYear(20041000,00,10,2004)
Spans:
Span 7-8:  20041000 => 2004
Span 14-15:  and => and
Span 10-11:  campaign => campaign-01
Span 5-6:  effect => effect
Span 20-21:  file => file-01
Span 21-22:  flight => flight
Span 6-7:  late => late
Span 18-19:  need => need-01
Span 12-13:  notify => notify-01
Span 15-16:  others => other
Span 22-23:  plans => plan-01
Span 3-4:  policy => policy
Span 0-1:  Prior => prior
Span 9-10:  publicity => publicity
Span 13-14:  ranchers => (person :ARG0-of ranch-01)
Span 4-5:  taking => take-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),plans,plan-01,false), Span(21,22,List(1),flight,flight,false), Span(20,21,List(2),file,file-01,false), Span(18,19,List(3),need,need-01,false), Span(15,16,List(4),others,other,false), Span(14,15,List(5),and,and,false), Span(13,14,List(7, 6),ranchers,(person :ARG0-of ranch-01),false), Span(12,13,List(8),notify,notify-01,false), Span(10,11,List(9),campaign,campaign-01,false), Span(9,10,List(10),publicity,publicity,false), Span(7,8,List(11),20041000,2004,false), Span(6,7,List(12),late,late,false), Span(5,6,List(13),effect,effect,false), Span(4,5,List(14),taking,take-01,false), Span(3,4,List(15),policy,policy,false), Span(0,1,List(16),Prior,prior,false)),Map(2 -> file-01, 5 -> and, 12 -> late, 15 -> policy, 8 -> notify-01, 7 -> ranch-01, 1 -> flight, 4 -> other, 11 -> 2004, 14 -> take-01, 6 -> person, 0 -> plan-01, 9 -> campaign-01, 16 -> prior, 3 -> need-01, 10 -> publicity, 13 -> effect),Map(e -> effect, n -> need-01, 2 -> 2004, p5 -> prior, t -> take-01, p2 -> person, p -> plan-01, a -> and, p4 -> policy, r -> ranch-01, c -> campaign-01, f2 -> file-01, l -> late, f -> flight, o -> other, p3 -> publicity, n2 -> notify-01))),[Ljava.lang.String;@41e68d87,Annotation([Ljava.lang.String;@49ff7d8c,[Ljava.lang.String;@29526c05,[Ljava.lang.String;@2ef14fe),Annotation([Ljava.lang.String;@77102b91,[Ljava.lang.String;@45312be2,[Ledu.cmu.lti.nlp.amr.Dependency;@7fb95505),Annotation([Ljava.lang.String;@58be6e8,[Ljava.lang.String;@7331196b,[Ljava.lang.String;@3f9342d4),Annotation([Ljava.lang.String;@ab7395e,[Ljava.lang.String;@50d13246,[Ledu.cmu.lti.nlp.amr.Entity;@2bd08376))
AMR:
(a / and, op, o / other)
(a / and, op, p2 / person)
(c / campaign-01, mod, p3 / publicity)
(f2 / file-01, ARG0, a / and)
(f2 / file-01, ARG1, p / plan-01)
(n / need-01, ARG1, f2 / file-01)
(n2 / notify-01, ARG0, c / campaign-01)
(n2 / notify-01, ARG1, a / and)
(n2 / notify-01, time, p5 / prior)
(p / plan-01, ARG1, f / flight)
(p5 / prior, op, t / take-01)
(r / ranch-01, ARG0, p2 / person)
(r / ranch-01, ARG1, 2 / 2004)
(t / take-01, ARG0, p4 / policy)
(t / take-01, ARG1, e / effect)
(t / take-01, time, l / late)

Decoded in 585,853 microseconds
Sentence: The Law to permit such an action was originally approved in 1998 but 1995-2003 President Fernando Henrique Cardoso never put the policy into effect.

mkDayMonthYear(1995-2003,03,20,1995)
NER Entity: (person :name (name :op "Fernando" :op "Henrique" :op "Cardoso"))
mkDayMonthYear(1995-2003,03,20,1995)
Spans:
Span 13-14:  1995-2003 => 1995
Span 11-12:  1998 => (date-entity :year 1998)
Span 6-7:  action => action
Span 9-10:  approved => approve-01
Span 12-13:  but => contrast-01
Span 23-24:  effect => effect
Span 15-18:  Fernando Henrique Cardoso => (person :name (name :op "Fernando" :op "Henrique" :op "Cardoso"))
Span 1-2:  Law => law
Span 8-9:  originally => original
Span 3-4:  permit => permit-01
Span 21-22:  policy => policy
Span 14-15:  President => (have-org-role-91 :ARG2 president)
Span 19-20:  put => put-03
Span 4-5:  such => such

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),effect,effect,false), Span(21,22,List(1),policy,policy,false), Span(19,20,List(2),put,put-03,false), Span(15,18,List(7, 6, 5, 4, 3),Fernando Henrique Cardoso,(person :name (name :op "Fernando" :op "Henrique" :op "Cardoso")),false), Span(14,15,List(9, 8),President,(have-org-role-91 :ARG2 president),false), Span(13,14,List(10),1995-2003,1995,false), Span(12,13,List(11),but,contrast-01,false), Span(11,12,List(13, 12),1998,(date-entity :year 1998),false), Span(9,10,List(14),approved,approve-01,false), Span(8,9,List(15),originally,original,false), Span(6,7,List(16),action,action,false), Span(4,5,List(17),such,such,false), Span(3,4,List(18),permit,permit-01,false), Span(1,2,List(19),Law,law,false)),Map(2 -> put-03, 5 -> "Fernando", 12 -> date-entity, 15 -> original, 8 -> have-org-role-91, 18 -> permit-01, 7 -> "Cardoso", 17 -> such, 1 -> policy, 4 -> name, 11 -> contrast-01, 14 -> approve-01, 6 -> "Henrique", 0 -> effect, 9 -> president, 16 -> action, 19 -> law, 3 -> person, 10 -> 1995, 13 -> 1998),Map(e -> effect, n -> name, h -> have-org-role-91, p5 -> permit-01, 12 -> 1998, p2 -> put-03, s -> such, d -> date-entity, 1 -> 1995, p -> policy, a -> approve-01, p4 -> president, a2 -> action, c -> contrast-01, l -> law, o -> original, p3 -> person))),[Ljava.lang.String;@e70f13a,Annotation([Ljava.lang.String;@3d3e5463,[Ljava.lang.String;@64a40280,[Ljava.lang.String;@4b40f651),Annotation([Ljava.lang.String;@42b02722,[Ljava.lang.String;@d62fe5b,[Ledu.cmu.lti.nlp.amr.Dependency;@49964d75),Annotation([Ljava.lang.String;@528c868,[Ljava.lang.String;@466276d8,[Ljava.lang.String;@5ce8d869),Annotation([Ljava.lang.String;@27eedb64,[Ljava.lang.String;@64c63c79,[Ledu.cmu.lti.nlp.amr.Entity;@31c7528f))
AMR:
(a / approve-01, ARG1, l / law)
(a / approve-01, mod, o / original)
(a / approve-01, time, d / date-entity)
(a2 / action, mod, s / such)
(c / contrast-01, ARG1, a / approve-01)
(c / contrast-01, ARG2, p2 / put-03)
(d / date-entity, year, 12 / 1998)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, 1 / 1995)
(h / have-org-role-91, ARG2, p4 / president)
(n / name, op, "Cardoso")
(n / name, op, "Fernando")
(n / name, op, "Henrique")
(p2 / put-03, ARG0, p3 / person)
(p2 / put-03, ARG1, p / policy)
(p2 / put-03, ARG2, e / effect)
(p3 / person, name, n / name)
(p5 / permit-01, ARG0, l / law)
(p5 / permit-01, ARG1, a2 / action)

Decoded in 321,999 microseconds
Sentence: The United States dissuaded Cardoso from signing the decree out of concern that the accidental downing of civilian aircraft could expose the US government and companies to lawsuits.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "Cardoso"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Cardoso"))
Spans:
Span 14-15:  accidental => accident
Span 18-19:  aircraft => aircraft
Span 24-25:  and => and
Span 4-5:  Cardoso => (person :name (name :op "Cardoso"))
Span 17-18:  civilian => civilian
Span 25-26:  companies => company
Span 11-12:  concern => concern-01
Span 19-20:  could => possible
Span 8-9:  decree => decree
Span 3-4:  dissuaded => dissuade-01
Span 15-16:  downing => down-01
Span 20-21:  expose => expose-01
Span 23-24:  government => (government-organization :ARG0-of govern-01)
Span 27-28:  lawsuits => lawsuit
Span 9-10:  out => out
Span 6-7:  signing => sign-01
Span 1-3:  United States => (country :name (name :op "United" :op "States"))
Span 22-23:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),lawsuits,lawsuit,false), Span(25,26,List(1),companies,company,false), Span(24,25,List(2),and,and,false), Span(23,24,List(4, 3),government,(government-organization :ARG0-of govern-01),false), Span(22,23,List(7, 6, 5),US,(country :name (name :op "US")),false), Span(20,21,List(8),expose,expose-01,false), Span(19,20,List(9),could,possible,false), Span(18,19,List(10),aircraft,aircraft,false), Span(17,18,List(11),civilian,civilian,false), Span(15,16,List(12),downing,down-01,false), Span(14,15,List(13),accidental,accident,false), Span(11,12,List(14),concern,concern-01,false), Span(9,10,List(15),out,out,false), Span(8,9,List(16),decree,decree,false), Span(6,7,List(17),signing,sign-01,false), Span(4,5,List(20, 19, 18),Cardoso,(person :name (name :op "Cardoso")),false), Span(3,4,List(21),dissuaded,dissuade-01,false), Span(1,3,List(25, 24, 23, 22),United States,(country :name (name :op "United" :op "States")),false)),Map(2 -> and, 5 -> country, 12 -> down-01, 8 -> expose-01, 15 -> out, 21 -> dissuade-01, 18 -> person, 24 -> "United", 7 -> "US", 1 -> company, 17 -> sign-01, 23 -> name, 4 -> govern-01, 11 -> civilian, 14 -> concern-01, 20 -> "Cardoso", 6 -> name, 9 -> possible, 0 -> lawsuit, 22 -> country, 16 -> decree, 19 -> name, 10 -> aircraft, 3 -> government-organization, 25 -> "States", 13 -> accident),Map(e -> expose-01, n -> name, d3 -> dissuade-01, p2 -> person, c4 -> concern-01, a3 -> accident, s -> sign-01, d -> down-01, g2 -> govern-01, g -> government-organization, p -> possible, n3 -> name, a -> and, c3 -> civilian, d2 -> decree, a2 -> aircraft, c -> company, l -> lawsuit, o -> out, n2 -> name, c2 -> country, c5 -> country))),[Ljava.lang.String;@2b76ff4e,Annotation([Ljava.lang.String;@7a1234bf,[Ljava.lang.String;@2f62ea70,[Ljava.lang.String;@24ba9639),Annotation([Ljava.lang.String;@38aa816f,[Ljava.lang.String;@53f6fd09,[Ledu.cmu.lti.nlp.amr.Dependency;@6bffbc6d),Annotation([Ljava.lang.String;@1b84f475,[Ljava.lang.String;@7749bf93,[Ljava.lang.String;@13330ac6),Annotation([Ljava.lang.String;@539d019,[Ljava.lang.String;@39a2bb97,[Ledu.cmu.lti.nlp.amr.Entity;@3ad2e17))
AMR:
(a / and, op, c / company)
(a / and, op, g / government-organization)
(a2 / aircraft, mod, c3 / civilian)
(c2 / country, name, n / name)
(c4 / concern-01, ARG0, p / possible)
(c4 / concern-01, ARG1, c5 / country)
(c5 / country, name, n3 / name)
(d / down-01, ARG1, a2 / aircraft)
(d / down-01, mod, a3 / accident)
(d3 / dissuade-01, ARG0, c5 / country)
(d3 / dissuade-01, ARG1, p2 / person)
(d3 / dissuade-01, ARG2, s / sign-01)
(e / expose-01, ARG0, d / down-01)
(e / expose-01, ARG1, a / and)
(e / expose-01, ARG2, l / lawsuit)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "US")
(n2 / name, op, "Cardoso")
(n3 / name, op, "States")
(n3 / name, op, "United")
(p / possible, domain, e / expose-01)
(p2 / person, name, n2 / name)
(s / sign-01, ARG0, p2 / person)
(s / sign-01, ARG1, d2 / decree)
(s / sign-01, mod, o / out)

Decoded in 2,223,683 microseconds
Sentence: 20010400 the United States reduced previous support for operations targeting drug-running aircraft when a Peruvian jet shot down a small plane misidentified as a drug carrier and killed an American missionary and her child.

mkDayMonthYear(20010400,00,04,2001)
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "American"))
mkDayMonthYear(20010400,00,04,2001)
Spans:
Span 0-1:  20010400 => 2001
Span 13-14:  aircraft => aircraft
Span 31-32:  American => (country :name (name :op "America"))
Span 33-34:  and => and
Span 28-29:  and => and
Span 27-28:  carrier => carry-01
Span 35-36:  child => child
Span 19-20:  down => down
Span 26-27:  drug => drug
Span 10-11:  drug => drug
Span 17-18:  jet => jet
Span 29-30:  killed => kill-01
Span 23-24:  misidentified => misidentify-00
Span 32-33:  missionary => missionary
Span 8-9:  operations => operation
Span 16-17:  Peruvian => (country :name (name :op "Peru"))
Span 22-23:  plane => plane
Span 5-6:  previous => previous
Span 4-5:  reduced => reduce-01
Span 12-13:  running => run-01
Span 18-19:  shot => shoot-02
Span 21-22:  small => small
Span 6-7:  support => support-01
Span 9-10:  targeting => target-01
Span 2-4:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),child,child,false), Span(33,34,List(1),and,and,false), Span(32,33,List(2),missionary,missionary,false), Span(31,32,List(5, 4, 3),American,(country :name (name :op "America")),false), Span(29,30,List(6),killed,kill-01,false), Span(28,29,List(7),and,and,false), Span(27,28,List(8),carrier,carry-01,false), Span(26,27,List(9),drug,drug,false), Span(23,24,List(10),misidentified,misidentify-00,false), Span(22,23,List(11),plane,plane,false), Span(21,22,List(12),small,small,false), Span(19,20,List(13),down,down,false), Span(18,19,List(14),shot,shoot-02,false), Span(17,18,List(15),jet,jet,false), Span(16,17,List(18, 17, 16),Peruvian,(country :name (name :op "Peru")),false), Span(13,14,List(19),aircraft,aircraft,false), Span(12,13,List(20),running,run-01,false), Span(10,11,List(21),drug,drug,false), Span(9,10,List(22),targeting,target-01,false), Span(8,9,List(23),operations,operation,false), Span(6,7,List(24),support,support-01,false), Span(5,6,List(25),previous,previous,false), Span(4,5,List(26),reduced,reduce-01,false), Span(2,4,List(30, 29, 28, 27),United States,(country :name (name :op "United" :op "States")),false), Span(0,1,List(31),20010400,2001,false)),Map(30 -> "States", 2 -> missionary, 5 -> "America", 27 -> country, 12 -> small, 8 -> carry-01, 15 -> jet, 21 -> drug, 18 -> "Peru", 24 -> support-01, 7 -> and, 1 -> and, 17 -> name, 23 -> operation, 26 -> reduce-01, 4 -> name, 11 -> plane, 14 -> shoot-02, 29 -> "United", 20 -> run-01, 28 -> name, 6 -> kill-01, 9 -> drug, 0 -> child, 22 -> target-01, 16 -> country, 19 -> aircraft, 10 -> misidentify-00, 3 -> country, 31 -> 2001, 25 -> previous, 13 -> down),Map(n -> name, 2 -> 2001, s2 -> shoot-02, t -> target-01, k -> kill-01, m2 -> misidentify-00, d3 -> drug, p2 -> previous, j -> jet, c4 -> country, a3 -> aircraft, s -> small, d -> drug, m -> missionary, r2 -> reduce-01, p -> plane, n3 -> name, c3 -> carry-01, a -> and, d2 -> down, a2 -> and, r -> run-01, c -> child, s3 -> support-01, o -> operation, c2 -> country, n2 -> name, c5 -> country))),[Ljava.lang.String;@8c3619e,Annotation([Ljava.lang.String;@4331d187,[Ljava.lang.String;@6f63b475,[Ljava.lang.String;@554e218),Annotation([Ljava.lang.String;@1608bcbd,[Ljava.lang.String;@5bf8fa12,[Ledu.cmu.lti.nlp.amr.Dependency;@29ca3d04),Annotation([Ljava.lang.String;@b2c5e07,[Ljava.lang.String;@5812f68b,[Ljava.lang.String;@4426bff1),Annotation([Ljava.lang.String;@3c7c886c,[Ljava.lang.String;@55493582,[Ledu.cmu.lti.nlp.amr.Entity;@1a20270e))
AMR:
(a2 / and, op, k / kill-01)
(c / child, poss, m / missionary)
(c2 / country, name, n / name)
(c3 / carry-01, ARG0, 2 / 2001)
(c3 / carry-01, ARG1, d3 / drug)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(d2 / down, op, p / plane)
(j / jet, mod, c4 / country)
(k / kill-01, ARG0, j / jet)
(k / kill-01, ARG1, a / and)
(m / missionary, mod, c2 / country)
(m / missionary, mod, c5 / country)
(m2 / misidentify-00, ARG1, p / plane)
(m2 / misidentify-00, ARG2, c3 / carry-01)
(n / name, op, "America")
(n2 / name, op, "Peru")
(n3 / name, op, "States")
(n3 / name, op, "United")
(p / plane, mod, s / small)
(r / run-01, ARG0, a3 / aircraft)
(r / run-01, ARG1, d / drug)
(r2 / reduce-01, ARG0, c5 / country)
(r2 / reduce-01, ARG1, s3 / support-01)
(r2 / reduce-01, time, a2 / and)
(s2 / shoot-02, ARG0, j / jet)
(s2 / shoot-02, ARG1, p / plane)
(s3 / support-01, ARG1, o / operation)
(s3 / support-01, time, p2 / previous)
(t / target-01, ARG0, o / operation)
(t / target-01, ARG1, a3 / aircraft)

Decoded in 2,302,304 microseconds
Sentence: Relatives of the victims sued the US government and won a settlement due to the Government's provision of intelligence and technical support to the operation.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 20-21:  and => and
Span 8-9:  and => and
Span 15-16:  Government => (government-organization :ARG0-of govern-01)
Span 7-8:  government => (government-organization :ARG0-of govern-01)
Span 19-20:  intelligence => intelligence
Span 25-26:  operation => operation
Span 17-18:  provision => provision
Span 0-1:  Relatives => relative
Span 11-12:  settlement => settle-02
Span 4-5:  sued => sue-01
Span 22-23:  support => support-01
Span 21-22:  technical => technique
Span 6-7:  US => (country :name (name :op "US"))
Span 3-4:  victims => victim
Span 9-10:  won => win-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),operation,operation,false), Span(22,23,List(1),support,support-01,false), Span(21,22,List(2),technical,technique,false), Span(20,21,List(3),and,and,false), Span(19,20,List(4),intelligence,intelligence,false), Span(17,18,List(5),provision,provision,false), Span(15,16,List(7, 6),Government,(government-organization :ARG0-of govern-01),false), Span(11,12,List(8),settlement,settle-02,false), Span(9,10,List(9),won,win-01,false), Span(8,9,List(10),and,and,false), Span(7,8,List(12, 11),government,(government-organization :ARG0-of govern-01),false), Span(6,7,List(15, 14, 13),US,(country :name (name :op "US")),false), Span(4,5,List(16),sued,sue-01,false), Span(3,4,List(17),victims,victim,false), Span(0,1,List(18),Relatives,relative,false)),Map(2 -> technique, 5 -> provision, 12 -> govern-01, 15 -> "US", 8 -> settle-02, 18 -> relative, 7 -> govern-01, 17 -> victim, 1 -> support-01, 4 -> intelligence, 11 -> government-organization, 14 -> name, 6 -> government-organization, 0 -> operation, 9 -> win-01, 16 -> sue-01, 3 -> and, 10 -> and, 13 -> country),Map(n -> name, w -> win-01, g3 -> government-organization, s2 -> settle-02, t -> technique, s -> support-01, v -> victim, g2 -> govern-01, p -> provision, g -> government-organization, a -> and, r -> relative, i -> intelligence, a2 -> and, s3 -> sue-01, c -> country, o -> operation, g4 -> govern-01))),[Ljava.lang.String;@6b88ca8c,Annotation([Ljava.lang.String;@336f1079,[Ljava.lang.String;@2f16c6b3,[Ljava.lang.String;@34158c08),Annotation([Ljava.lang.String;@19e4fcac,[Ljava.lang.String;@52c3cb31,[Ledu.cmu.lti.nlp.amr.Dependency;@4b79ac84),Annotation([Ljava.lang.String;@53941c2f,[Ljava.lang.String;@6dab9b6d,[Ljava.lang.String;@21fd5faa),Annotation([Ljava.lang.String;@2766ca9d,[Ljava.lang.String;@5460cf3a,[Ledu.cmu.lti.nlp.amr.Entity;@65a15628))
AMR:
(a / and, op, i / intelligence)
(a / and, op, s / support-01)
(a2 / and, op, s3 / sue-01)
(a2 / and, op, w / win-01)
(c / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c / country)
(n / name, op, "US")
(p / provision, op, o / operation)
(p / provision, poss, g / government-organization)
(r / relative, poss, v / victim)
(s / support-01, ARG1, p / provision)
(s / support-01, mod, t / technique)
(s3 / sue-01, ARG0, r / relative)
(s3 / sue-01, ARG1, g3 / government-organization)
(w / win-01, ARG0, r / relative)
(w / win-01, ARG1, s2 / settle-02)

Decoded in 493,694 microseconds
Sentence: A US State Department official stated --

NER Entity: (organization :name (name :op "US" :op "State" :op "Department"))
Spans:
Span 4-5:  official => (have-org-role-91 :ARG2 official)
Span 5-6:  stated => state-01
Span 1-4:  US State Department => (government-organization :name (name :op "Department" :op "State" :op "US"))

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),stated,state-01,false), Span(4,5,List(2, 1),official,(have-org-role-91 :ARG2 official),false), Span(1,4,List(7, 6, 5, 4, 3),US State Department,(government-organization :name (name :op "Department" :op "State" :op "US")),false)),Map(2 -> official, 5 -> "Department", 7 -> "US", 1 -> have-org-role-91, 4 -> name, 6 -> "State", 0 -> state-01, 3 -> government-organization),Map(n -> name, h -> have-org-role-91, s -> state-01, g -> government-organization, o -> official))),[Ljava.lang.String;@2e6a5539,Annotation([Ljava.lang.String;@3fc9504b,[Ljava.lang.String;@6d025197,[Ljava.lang.String;@27d4a09),Annotation([Ljava.lang.String;@7e4204e2,[Ljava.lang.String;@b7c4869,[Ledu.cmu.lti.nlp.amr.Dependency;@740d2e78),Annotation([Ljava.lang.String;@1c481ff2,[Ljava.lang.String;@72437d8d,[Ljava.lang.String;@1b955cac),Annotation([Ljava.lang.String;@676cf48,[Ljava.lang.String;@5a1de7fb,[Ledu.cmu.lti.nlp.amr.Entity;@335b5620))
AMR:
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, o / official)
(h / have-org-role-91, ARG6, s / state-01)
(n / name, op, "Department")
(n / name, op, "State")
(n / name, op, "US")

Decoded in 52,186 microseconds
Sentence: US law may forbid assistance to countries that implement shoot-down laws under certain conditions.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 4-5:  assistance => assist-01
Span 14-15:  certain => certain
Span 15-16:  conditions => condition
Span 6-7:  countries => country
Span 11-12:  down => down
Span 3-4:  forbid => forbid-01
Span 8-9:  implement => implement-01
Span 1-2:  law => law
Span 12-13:  laws => law
Span 2-3:  may => possible
Span 9-10:  shoot => shoot-05
Span 0-1:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),conditions,condition,false), Span(14,15,List(1),certain,certain,false), Span(12,13,List(2),laws,law,false), Span(11,12,List(3),down,down,false), Span(9,10,List(4),shoot,shoot-05,false), Span(8,9,List(5),implement,implement-01,false), Span(6,7,List(6),countries,country,false), Span(4,5,List(7),assistance,assist-01,false), Span(3,4,List(8),forbid,forbid-01,false), Span(2,3,List(9),may,possible,false), Span(1,2,List(10),law,law,false), Span(0,1,List(13, 12, 11),US,(country :name (name :op "US")),false)),Map(2 -> law, 5 -> implement-01, 12 -> name, 8 -> forbid-01, 7 -> assist-01, 1 -> certain, 4 -> shoot-05, 11 -> country, 6 -> country, 0 -> condition, 9 -> possible, 3 -> down, 10 -> law, 13 -> "US"),Map(n -> name, c4 -> country, s -> shoot-05, d -> down, p -> possible, c3 -> country, a -> assist-01, l2 -> law, i -> implement-01, c -> condition, l -> law, f -> forbid-01, c2 -> certain))),[Ljava.lang.String;@29a0cdb,Annotation([Ljava.lang.String;@32a68f4f,[Ljava.lang.String;@73194df,[Ljava.lang.String;@6eb2384f),Annotation([Ljava.lang.String;@3c9c0d96,[Ljava.lang.String;@3a4621bd,[Ledu.cmu.lti.nlp.amr.Dependency;@31dadd46),Annotation([Ljava.lang.String;@4ed5eb72,[Ljava.lang.String;@12f9af83,[Ljava.lang.String;@19b93fa8),Annotation([Ljava.lang.String;@7e6ef134,[Ljava.lang.String;@1f010bf0,[Ledu.cmu.lti.nlp.amr.Entity;@40db2a24))
AMR:
(a / assist-01, ARG1, c3 / country)
(c / condition, mod, c2 / certain)
(c4 / country, name, n / name)
(f / forbid-01, ARG0, l / law)
(f / forbid-01, ARG1, a / assist-01)
(i / implement-01, ARG0, c3 / country)
(i / implement-01, ARG1, l2 / law)
(l / law, location, c / condition)
(l / law, mod, c4 / country)
(l2 / law, mod, d / down)
(n / name, op, "US")
(p / possible, domain, f / forbid-01)
(s / shoot-05, ARG1, d / down)

Decoded in 394,630 microseconds
Sentence: The US agrees with the Brazilian assessment that the threat posed by drug traffickers is both very serious and increasing.

NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 2-3:  agrees => agree-01
Span 18-19:  and => and
Span 6-7:  assessment => assess-01
Span 15-16:  both => both
Span 5-6:  Brazilian => (country :name (name :op "Brazil"))
Span 12-13:  drug => drug
Span 19-20:  increasing => increase-01
Span 10-11:  posed => pose-02
Span 17-18:  serious => serious
Span 9-10:  threat => threaten-01
Span 13-14:  traffickers => (person :ARG0-of traffic-00)
Span 1-2:  US => (country :name (name :op "US"))
Span 16-17:  very => very

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),increasing,increase-01,false), Span(18,19,List(1),and,and,false), Span(17,18,List(2),serious,serious,false), Span(16,17,List(3),very,very,false), Span(15,16,List(4),both,both,false), Span(13,14,List(6, 5),traffickers,(person :ARG0-of traffic-00),false), Span(12,13,List(7),drug,drug,false), Span(10,11,List(8),posed,pose-02,false), Span(9,10,List(9),threat,threaten-01,false), Span(6,7,List(10),assessment,assess-01,false), Span(5,6,List(13, 12, 11),Brazilian,(country :name (name :op "Brazil")),false), Span(2,3,List(14),agrees,agree-01,false), Span(1,2,List(17, 16, 15),US,(country :name (name :op "US")),false)),Map(2 -> serious, 5 -> person, 12 -> name, 15 -> country, 8 -> pose-02, 7 -> drug, 17 -> "US", 1 -> and, 4 -> both, 11 -> country, 14 -> agree-01, 6 -> traffic-00, 0 -> increase-01, 9 -> threaten-01, 16 -> name, 3 -> very, 10 -> assess-01, 13 -> "Brazil"),Map(n -> name, b -> both, t -> traffic-00, p2 -> pose-02, a3 -> agree-01, s -> serious, v -> very, d -> drug, p -> person, a -> and, t2 -> threaten-01, i -> increase-01, a2 -> assess-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@10cf09e8,Annotation([Ljava.lang.String;@1921ad94,[Ljava.lang.String;@ee86bcb,[Ljava.lang.String;@177bea38),Annotation([Ljava.lang.String;@7f132176,[Ljava.lang.String;@6bca7e0d,[Ledu.cmu.lti.nlp.amr.Dependency;@2631f68c),Annotation([Ljava.lang.String;@6ed3f258,[Ljava.lang.String;@8ad6665,[Ljava.lang.String;@30af5b6b),Annotation([Ljava.lang.String;@19835e64,[Ljava.lang.String;@68b32e3e,[Ledu.cmu.lti.nlp.amr.Entity;@bcef303))
AMR:
(a / and, op, i / increase-01)
(a2 / assess-01, ARG1, c / country)
(a2 / assess-01, ARG2, a / and)
(a3 / agree-01, ARG0, c2 / country)
(a3 / agree-01, ARG1, a2 / assess-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(i / increase-01, ARG1, t2 / threaten-01)
(n / name, op, "Brazil")
(n2 / name, op, "US")
(p2 / pose-02, ARG1, t2 / threaten-01)
(s / serious, degree, v / very)
(s / serious, domain, t2 / threaten-01)
(t / traffic-00, ARG0, p / person)
(t / traffic-00, ARG1, d / drug)
(t2 / threaten-01, ARG0, p / person)
(t2 / threaten-01, ARG1, b / both)

Decoded in 248,676 microseconds
Sentence: The US government has consulted the Brazilian Government about the provisions of US law.

NER Entity: (country :name (name :op "The" :op "US"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 8-9:  about => about
Span 6-7:  Brazilian => (country :name (name :op "Brazil"))
Span 4-5:  consulted => consult-01
Span 7-8:  Government => (government-organization :ARG0-of govern-01)
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 13-14:  law => law
Span 10-11:  provisions => provision
Span 0-2:  The US => (country :name (name :op "The" :op "US"))
Span 12-13:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 95 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),law,law,false), Span(12,13,List(3, 2, 1),US,(country :name (name :op "US")),false), Span(10,11,List(4),provisions,provision,false), Span(8,9,List(5),about,about,false), Span(7,8,List(7, 6),Government,(government-organization :ARG0-of govern-01),false), Span(6,7,List(10, 9, 8),Brazilian,(country :name (name :op "Brazil")),false), Span(4,5,List(11),consulted,consult-01,false), Span(2,3,List(13, 12),government,(government-organization :ARG0-of govern-01),false), Span(0,2,List(17, 16, 15, 14),The US,(country :name (name :op "The" :op "US")),false)),Map(2 -> name, 5 -> about, 12 -> government-organization, 15 -> name, 8 -> country, 7 -> govern-01, 17 -> "US", 1 -> country, 4 -> provision, 11 -> consult-01, 14 -> country, 6 -> government-organization, 0 -> law, 9 -> name, 16 -> "The", 3 -> "US", 10 -> "Brazil", 13 -> govern-01),Map(n -> name, g3 -> government-organization, c4 -> country, g2 -> govern-01, p -> provision, g -> government-organization, n3 -> name, a -> about, c3 -> consult-01, c -> country, l -> law, c2 -> country, n2 -> name, g4 -> govern-01))),[Ljava.lang.String;@41709512,Annotation([Ljava.lang.String;@42039326,[Ljava.lang.String;@33308786,[Ljava.lang.String;@4f9a2c08),Annotation([Ljava.lang.String;@a87f8ec,[Ljava.lang.String;@5443d039,[Ledu.cmu.lti.nlp.amr.Dependency;@63787180),Annotation([Ljava.lang.String;@7d1cfb8b,[Ljava.lang.String;@48e92c5c,[Ljava.lang.String;@2e1ef60),Annotation([Ljava.lang.String;@22356acd,[Ljava.lang.String;@386f0da3,[Ledu.cmu.lti.nlp.amr.Entity;@39655d3e))
AMR:
(a / about, op, p / provision)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / consult-01, ARG0, g3 / government-organization)
(c3 / consult-01, ARG1, g / government-organization)
(c4 / country, name, n3 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c4 / country)
(l / law, mod, c3 / consult-01)
(l / law, poss, c / country)
(n / name, op, "US")
(n2 / name, op, "Brazil")
(n3 / name, op, "The")
(n3 / name, op, "US")
(p / provision, mod, l / law)

Decoded in 1,490,977 microseconds
Sentence: Brazilian Defense Minister Jose Viegas stated that Brazil has encountered difficulties in securing US support for the plan but recent bilateral talks led to certainty that the decree would be accepted by the US government without exposing Brazil to commercial sanctions.

NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Jose" :op "Viegas"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 30-31:  accepted => accept-01
Span 20-21:  bilateral => bilateral
Span 37-38:  Brazil => (country :name (name :op "Brazil"))
Span 7-8:  Brazil => (country :name (name :op "Brazil"))
Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Span 18-19:  but => contrast-01
Span 24-25:  certainty => certainty
Span 39-40:  commercial => commerce
Span 27-28:  decree => decree
Span 1-2:  Defense => defense
Span 10-11:  difficulties => difficulty
Span 9-10:  encountered => encounter-01
Span 36-37:  exposing => expose-01
Span 34-35:  government => (government-organization :ARG0-of govern-01)
Span 3-5:  Jose Viegas => (person :name (name :op "Viegas" :op "Jose"))
Span 22-23:  led => lead-02
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 17-18:  plan => plan-01
Span 19-20:  recent => recent
Span 40-41:  sanctions => sanction-02
Span 12-13:  securing => secure-01
Span 5-6:  stated => state-01
Span 14-15:  support => support-01
Span 21-22:  talks => talk-01
Span 33-34:  US => (country :name (name :op "US"))
Span 13-14:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),sanctions,sanction-02,false), Span(39,40,List(1),commercial,commerce,false), Span(37,38,List(4, 3, 2),Brazil,(country :name (name :op "Brazil")),false), Span(36,37,List(5),exposing,expose-01,false), Span(34,35,List(7, 6),government,(government-organization :ARG0-of govern-01),false), Span(33,34,List(10, 9, 8),US,(country :name (name :op "US")),false), Span(30,31,List(11),accepted,accept-01,false), Span(27,28,List(12),decree,decree,false), Span(24,25,List(13),certainty,certainty,false), Span(22,23,List(14),led,lead-02,false), Span(21,22,List(15),talks,talk-01,false), Span(20,21,List(16),bilateral,bilateral,false), Span(19,20,List(17),recent,recent,false), Span(18,19,List(18),but,contrast-01,false), Span(17,18,List(19),plan,plan-01,false), Span(14,15,List(20),support,support-01,false), Span(13,14,List(23, 22, 21),US,(country :name (name :op "US")),false), Span(12,13,List(24),securing,secure-01,false), Span(10,11,List(25),difficulties,difficulty,false), Span(9,10,List(26),encountered,encounter-01,false), Span(7,8,List(29, 28, 27),Brazil,(country :name (name :op "Brazil")),false), Span(5,6,List(30),stated,state-01,false), Span(3,5,List(34, 33, 32, 31),Jose Viegas,(person :name (name :op "Viegas" :op "Jose")),false), Span(2,3,List(36, 35),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(37),Defense,defense,false), Span(0,1,List(40, 39, 38),Brazilian,(country :name (name :op "Brazil")),false)),Map(39 -> name, 30 -> state-01, 2 -> country, 5 -> expose-01, 33 -> "Viegas", 27 -> country, 12 -> decree, 8 -> country, 15 -> talk-01, 36 -> minister, 21 -> country, 18 -> contrast-01, 24 -> secure-01, 35 -> have-org-role-91, 7 -> govern-01, 1 -> commerce, 17 -> recent, 23 -> "US", 38 -> country, 26 -> encounter-01, 4 -> "Brazil", 11 -> accept-01, 32 -> name, 14 -> lead-02, 29 -> "Brazil", 20 -> support-01, 34 -> "Jose", 28 -> name, 6 -> government-organization, 40 -> "Brazil", 9 -> name, 0 -> sanction-02, 22 -> name, 16 -> bilateral, 37 -> defense, 19 -> plan-01, 10 -> "US", 3 -> name, 31 -> person, 25 -> difficulty, 13 -> certainty),Map(e -> expose-01, n -> name, c8 -> country, h -> have-org-role-91, s2 -> support-01, t -> talk-01, b -> bilateral, d3 -> defense, c7 -> country, p2 -> person, e2 -> encounter-01, n4 -> name, c4 -> certainty, s -> sanction-02, s4 -> state-01, m -> minister, d -> decree, g2 -> govern-01, g -> government-organization, p -> plan-01, a -> accept-01, c3 -> country, n3 -> name, n6 -> name, d2 -> difficulty, c6 -> country, r -> recent, c -> commerce, s3 -> secure-01, l -> lead-02, n2 -> name, c2 -> country, n5 -> name, c5 -> contrast-01))),[Ljava.lang.String;@34f22f9d,Annotation([Ljava.lang.String;@3d1848cc,[Ljava.lang.String;@7dda48d9,[Ljava.lang.String;@6e4566f1),Annotation([Ljava.lang.String;@4b6e2263,[Ljava.lang.String;@344f4dea,[Ledu.cmu.lti.nlp.amr.Dependency;@1b7c473a),Annotation([Ljava.lang.String;@5e4bd84a,[Ljava.lang.String;@648c94da,[Ljava.lang.String;@2a62b5bc),Annotation([Ljava.lang.String;@53de625d,[Ljava.lang.String;@535779e4,[Ledu.cmu.lti.nlp.amr.Entity;@53fd0d10))
AMR:
(a / accept-01, ARG0, g / government-organization)
(a / accept-01, ARG1, d / decree)
(a / accept-01, manner, e / expose-01)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / certainty, domain, a / accept-01)
(c5 / contrast-01, ARG1, e2 / encounter-01)
(c5 / contrast-01, ARG2, l / lead-02)
(c6 / country, name, n3 / name)
(c7 / country, name, n4 / name)
(c8 / country, name, n6 / name)
(e / expose-01, ARG1, c2 / country)
(e / expose-01, ARG2, s / sanction-02)
(e2 / encounter-01, ARG0, c7 / country)
(e2 / encounter-01, ARG1, d2 / difficulty)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c8 / country)
(h / have-org-role-91, ARG2, m / minister)
(l / lead-02, ARG1, t / talk-01)
(n / name, op, "Brazil")
(n2 / name, op, "US")
(n3 / name, op, "US")
(n4 / name, op, "Brazil")
(n5 / name, op, "Jose")
(n5 / name, op, "Viegas")
(n6 / name, op, "Brazil")
(p / plan-01, ARG1, d3 / defense)
(p2 / person, name, n5 / name)
(s / sanction-02, ARG1, c7 / country)
(s / sanction-02, mod, c / commerce)
(s2 / support-01, ARG0, c6 / country)
(s2 / support-01, ARG1, p / plan-01)
(s3 / secure-01, ARG0, c7 / country)
(s3 / secure-01, ARG1, s2 / support-01)
(s4 / state-01, ARG0, p2 / person)
(s4 / state-01, ARG1, c5 / contrast-01)
(t / talk-01, mod, b / bilateral)
(t / talk-01, time, r / recent)

Decoded in 3,412,664 microseconds
Sentence: Brazilian officials have expressed hope that the policy will be endorsed by the US before going into effect.

NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 14-15:  before => before
Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Span 17-18:  effect => effect
Span 10-11:  endorsed => endorse-01
Span 3-4:  expressed => express-01
Span 15-16:  going => go-02
Span 4-5:  hope => hope-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 7-8:  policy => policy
Span 13-14:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 79 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),effect,effect,false), Span(15,16,List(1),going,go-02,false), Span(14,15,List(2),before,before,false), Span(13,14,List(5, 4, 3),US,(country :name (name :op "US")),false), Span(10,11,List(6),endorsed,endorse-01,false), Span(7,8,List(7),policy,policy,false), Span(4,5,List(8),hope,hope-01,false), Span(3,4,List(9),expressed,express-01,false), Span(1,2,List(11, 10),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(14, 13, 12),Brazilian,(country :name (name :op "Brazil")),false)),Map(2 -> before, 5 -> "US", 12 -> country, 8 -> hope-01, 7 -> policy, 1 -> go-02, 4 -> name, 11 -> official, 14 -> "Brazil", 6 -> endorse-01, 0 -> effect, 9 -> express-01, 3 -> country, 10 -> have-org-role-91, 13 -> name),Map(e -> effect, n -> name, h -> hope-01, h2 -> have-org-role-91, b -> before, e2 -> endorse-01, g -> go-02, p -> policy, c -> country, o -> official, e3 -> express-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@6c0d9d86,Annotation([Ljava.lang.String;@4ce1d6d0,[Ljava.lang.String;@24111ef1,[Ljava.lang.String;@1f3f02ee),Annotation([Ljava.lang.String;@1fde5d22,[Ljava.lang.String;@5dcb4f5f,[Ledu.cmu.lti.nlp.amr.Dependency;@71812481),Annotation([Ljava.lang.String;@16ce702d,[Ljava.lang.String;@7b94089b,[Ljava.lang.String;@7ca20101),Annotation([Ljava.lang.String;@47f9738,[Ljava.lang.String;@6155d082,[Ledu.cmu.lti.nlp.amr.Entity;@3a5ecce3))
AMR:
(b / before, op, g / go-02)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e2 / endorse-01, ARG0, c / country)
(e2 / endorse-01, ARG1, p / policy)
(e2 / endorse-01, time, b / before)
(e3 / express-01, ARG1, h / hope-01)
(g / go-02, ARG1, p / policy)
(g / go-02, ARG2, e / effect)
(h / hope-01, ARG1, e2 / endorse-01)
(h / hope-01, ARG6, h2 / have-org-role-91)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, o / official)
(n / name, op, "US")
(n2 / name, op, "Brazil")

Decoded in 1,099,417 microseconds
Sentence: The US is scheduled to provide 10.2 million dollars in drug and law enforcement aid to Brazil in 2004.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 18-19:  2004 => (date-entity :year 2004)
Span 14-15:  aid => aid-01
Span 11-12:  and => and
Span 16-17:  Brazil => (country :name (name :op "Brazil"))
Span 8-9:  dollars => (monetary-quantity :unit dollar)
Span 10-11:  drug => drug
Span 13-14:  enforcement => enforce-01
Span 12-13:  law => law
Span 5-6:  provide => provide-01
Span 3-4:  scheduled => schedule-01
Span 1-2:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 64 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),2004,(date-entity :year 2004),false), Span(16,17,List(4, 3, 2),Brazil,(country :name (name :op "Brazil")),false), Span(14,15,List(5),aid,aid-01,false), Span(13,14,List(6),enforcement,enforce-01,false), Span(12,13,List(7),law,law,false), Span(11,12,List(8),and,and,false), Span(10,11,List(9),drug,drug,false), Span(8,9,List(11, 10),dollars,(monetary-quantity :unit dollar),false), Span(5,6,List(12),provide,provide-01,false), Span(3,4,List(13),scheduled,schedule-01,false), Span(1,2,List(16, 15, 14),US,(country :name (name :op "US")),false)),Map(2 -> country, 5 -> aid-01, 12 -> provide-01, 15 -> name, 8 -> and, 7 -> law, 1 -> 2004, 4 -> "Brazil", 11 -> dollar, 14 -> country, 6 -> enforce-01, 0 -> date-entity, 9 -> drug, 16 -> "US", 3 -> name, 10 -> monetary-quantity, 13 -> schedule-01),Map(e -> enforce-01, n -> name, 2 -> 2004, d3 -> dollar, s -> schedule-01, d -> date-entity, m -> monetary-quantity, p -> provide-01, a -> aid-01, d2 -> drug, a2 -> and, c -> country, l -> law, n2 -> name, c2 -> country))),[Ljava.lang.String;@561868a0,Annotation([Ljava.lang.String;@2ea6e30c,[Ljava.lang.String;@6138e79a,[Ljava.lang.String;@2dcd168a),Annotation([Ljava.lang.String;@388526fb,[Ljava.lang.String;@21a21c64,[Ledu.cmu.lti.nlp.amr.Dependency;@7803bfd),Annotation([Ljava.lang.String;@42bc14c1,[Ljava.lang.String;@531f4093,[Ljava.lang.String;@62ef27a8),Annotation([Ljava.lang.String;@6436a7db,[Ljava.lang.String;@460ebd80,[Ledu.cmu.lti.nlp.amr.Entity;@6f3c660a))
AMR:
(a / aid-01, ARG0, c2 / country)
(a / aid-01, ARG1, d2 / drug)
(a / aid-01, mod, e / enforce-01)
(a2 / and, op, a / aid-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / date-entity, year, 2 / 2004)
(e / enforce-01, ARG1, l / law)
(m / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Brazil")
(n2 / name, op, "US")
(p / provide-01, ARG0, c2 / country)
(p / provide-01, ARG1, m / monetary-quantity)
(p / provide-01, ARG2, c / country)
(s / schedule-01, ARG1, c2 / country)
(s / schedule-01, ARG2, p / provide-01)
(s / schedule-01, ARG3, d / date-entity)

Decoded in 1,135,517 microseconds
Sentence: Former air force chief and current Director of the Air Institute at estacio de sa University in Rio de Janeiro General Mauro Jose Miranda gandra stated that the measure was a courageous step by the Government but the impact may be more political than practical because of self-imposed restrictions by the Brazilian government.

NER Entity: (organization :name (name :op "Air" :op "Institute"))
NER Entity: (country :name (name :op "Rio" :op "de" :op "Janeiro"))
NER Entity: (person :name (name :op "Mauro" :op "Jose" :op "Miranda" :op "gandra"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 1-3:  air force => (military :name (name :op "force" :op "air"))
Span 9-11:  Air Institute => (research-institute :name (name :op "Institute" :op "Air"))
Span 4-5:  and => and
Span 45-46:  because => cause-01
Span 53-54:  Brazilian => (country :name (name :op "Brazil"))
Span 36-37:  but => contrast-01
Span 3-4:  chief => chief
Span 31-32:  courageous => courageous
Span 5-6:  current => current
Span 6-7:  Director => (have-org-role-91 :ARG2 director)
Span 12-16:  estacio de sa University => (university :name (name :op "University" :op "Sa" :op "de" :op "Estacio"))
Span 0-1:  Former => former
Span 20-21:  General => (have-org-role-91 :ARG2 general)
Span 54-55:  government => (government-organization :ARG0-of govern-01)
Span 35-36:  Government => (government-organization :ARG0-of govern-01)
Span 38-39:  impact => impact-01
Span 49-50:  imposed => impose-01
Span 21-25:  Mauro Jose Miranda gandra => (person :name (name :op "Gandra" :op "Miranda" :op "Jose" :op "Mauro"))
Span 39-40:  may => possible
Span 28-29:  measure => measure
Span 41-42:  more => more
Span 42-43:  political => politics
Span 44-45:  practical => practical
Span 50-51:  restrictions => restrict-01
Span 17-20:  Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Span 47-48:  self => self
Span 25-26:  stated => state-01
Span 32-33:  step => step-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(1, 0),government,(government-organization :ARG0-of govern-01),false), Span(53,54,List(4, 3, 2),Brazilian,(country :name (name :op "Brazil")),false), Span(50,51,List(5),restrictions,restrict-01,false), Span(49,50,List(6),imposed,impose-01,false), Span(47,48,List(7),self,self,false), Span(45,46,List(8),because,cause-01,false), Span(44,45,List(9),practical,practical,false), Span(42,43,List(10),political,politics,false), Span(41,42,List(11),more,more,false), Span(39,40,List(12),may,possible,false), Span(38,39,List(13),impact,impact-01,false), Span(36,37,List(14),but,contrast-01,false), Span(35,36,List(16, 15),Government,(government-organization :ARG0-of govern-01),false), Span(32,33,List(17),step,step-01,false), Span(31,32,List(18),courageous,courageous,false), Span(28,29,List(19),measure,measure,false), Span(25,26,List(20),stated,state-01,false), Span(21,25,List(26, 25, 24, 23, 22, 21),Mauro Jose Miranda gandra,(person :name (name :op "Gandra" :op "Miranda" :op "Jose" :op "Mauro")),false), Span(20,21,List(28, 27),General,(have-org-role-91 :ARG2 general),false), Span(17,20,List(33, 32, 31, 30, 29),Rio de Janeiro,(city :name (name :op "Janeiro" :op "de" :op "Rio")),false), Span(12,16,List(39, 38, 37, 36, 35, 34),estacio de sa University,(university :name (name :op "University" :op "Sa" :op "de" :op "Estacio")),false), Span(9,11,List(43, 42, 41, 40),Air Institute,(research-institute :name (name :op "Institute" :op "Air")),false), Span(6,7,List(45, 44),Director,(have-org-role-91 :ARG2 director),false), Span(5,6,List(46),current,current,false), Span(4,5,List(47),and,and,false), Span(3,4,List(48),chief,chief,false), Span(1,3,List(52, 51, 50, 49),air force,(military :name (name :op "force" :op "air")),false), Span(0,1,List(53),Former,former,false)),Map(30 -> name, 39 -> "Estacio", 45 -> director, 51 -> "force", 2 -> country, 5 -> restrict-01, 48 -> chief, 33 -> "Rio", 27 -> have-org-role-91, 12 -> possible, 8 -> cause-01, 15 -> government-organization, 42 -> "Institute", 36 -> "University", 21 -> person, 18 -> courageous, 24 -> "Miranda", 53 -> former, 35 -> name, 41 -> name, 7 -> self, 17 -> step-01, 1 -> govern-01, 50 -> name, 44 -> have-org-role-91, 23 -> "Gandra", 38 -> "de", 47 -> and, 4 -> "Brazil", 26 -> "Mauro", 11 -> more, 32 -> "de", 14 -> contrast-01, 20 -> state-01, 29 -> city, 46 -> current, 52 -> "air", 34 -> university, 6 -> impose-01, 28 -> general, 40 -> research-institute, 49 -> military, 0 -> government-organization, 9 -> practical, 43 -> "Air", 22 -> name, 16 -> govern-01, 37 -> "Sa", 19 -> measure, 3 -> name, 10 -> politics, 25 -> "Jose", 31 -> "Janeiro", 13 -> impact-01),Map(m3 -> military, n -> name, g3 -> government-organization, h -> have-org-role-91, h2 -> have-org-role-91, s2 -> step-01, m2 -> measure, c7 -> chief, p2 -> politics, n4 -> name, c4 -> courageous, s -> self, d -> director, m -> more, g2 -> govern-01, r2 -> research-institute, p -> practical, g -> government-organization, a -> and, n3 -> name, c3 -> contrast-01, p4 -> person, g5 -> general, n6 -> name, c6 -> current, i2 -> impact-01, i -> impose-01, r -> restrict-01, c -> country, s3 -> state-01, u -> university, f -> former, p3 -> possible, c2 -> cause-01, g4 -> govern-01, n2 -> name, n5 -> name, c5 -> city))),[Ljava.lang.String;@74f5ce22,Annotation([Ljava.lang.String;@25aca718,[Ljava.lang.String;@16fdec90,[Ljava.lang.String;@1afdd473),Annotation([Ljava.lang.String;@40238dd0,[Ljava.lang.String;@7776ab,[Ledu.cmu.lti.nlp.amr.Dependency;@79179359),Annotation([Ljava.lang.String;@dbd8e44,[Ljava.lang.String;@51acdf2e,[Ljava.lang.String;@6a55299e),Annotation([Ljava.lang.String;@2f1de2d6,[Ljava.lang.String;@4eb386df,[Ledu.cmu.lti.nlp.amr.Entity;@79517588))
AMR:
(a / and, op, c7 / chief)
(c / country, name, n / name)
(c2 / cause-01, ARG1, p3 / possible)
(c3 / contrast-01, ARG1, s2 / step-01)
(c3 / contrast-01, ARG2, p3 / possible)
(c5 / city, name, n3 / name)
(c7 / chief, mod, f / former)
(c7 / chief, mod, m3 / military)
(d / director, time, c6 / current)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG2, g5 / general)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, r2 / research-institute)
(h2 / have-org-role-91, ARG2, d / director)
(i / impose-01, ARG1, r / restrict-01)
(i / impose-01, ARG2, g3 / government-organization)
(i2 / impact-01, ARG1, m / more)
(m3 / military, name, n6 / name)
(n / name, op, "Brazil")
(n2 / name, op, "Gandra")
(n2 / name, op, "Jose")
(n2 / name, op, "Mauro")
(n2 / name, op, "Miranda")
(n3 / name, op, "Janeiro")
(n3 / name, op, "Rio")
(n3 / name, op, "de")
(n4 / name, op, "Estacio")
(n4 / name, op, "Sa")
(n4 / name, op, "University")
(n4 / name, op, "de")
(n5 / name, op, "Air")
(n5 / name, op, "Institute")
(n6 / name, op, "air")
(n6 / name, op, "force")
(p2 / politics, compared-to, p / practical)
(p2 / politics, domain, i2 / impact-01)
(p3 / possible, domain, p2 / politics)
(p4 / person, name, n2 / name)
(r / restrict-01, ARG1, c2 / cause-01)
(r2 / research-institute, name, n5 / name)
(s / self, mod, g3 / government-organization)
(s2 / step-01, ARG1, h / have-org-role-91)
(s2 / step-01, domain, m2 / measure)
(s2 / step-01, mod, c4 / courageous)
(s3 / state-01, ARG0, a / and)
(s3 / state-01, ARG1, c3 / contrast-01)
(u / university, location, c5 / city)
(u / university, name, n4 / name)
(u / university, part, r2 / research-institute)

Decoded in 3,329,489 microseconds
Sentence: Brazilian officials stated that the policy would be inapplicable against aircraft with children on board.

NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 10-11:  aircraft => aircraft
Span 14-15:  board => board-01
Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Span 12-13:  children => child
Span 8-9:  inapplicable => (apply-02 :polarity -)
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 5-6:  policy => policy
Span 2-3:  stated => state-01

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),board,board-01,false), Span(12,13,List(1),children,child,false), Span(10,11,List(2),aircraft,aircraft,false), Span(8,9,List(4, 3),inapplicable,(apply-02 :polarity -),false), Span(5,6,List(5),policy,policy,false), Span(2,3,List(6),stated,state-01,false), Span(1,2,List(8, 7),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(11, 10, 9),Brazilian,(country :name (name :op "Brazil")),false)),Map(2 -> aircraft, 5 -> policy, 8 -> official, 7 -> have-org-role-91, 1 -> child, 11 -> "Brazil", 4 -> -, 6 -> state-01, 9 -> country, 0 -> board-01, 10 -> name, 3 -> apply-02),Map(n -> name, h -> have-org-role-91, b -> board-01, s -> state-01, p -> policy, a -> aircraft, a2 -> apply-02, c -> child, o -> official, c2 -> country))),[Ljava.lang.String;@3a0baae5,Annotation([Ljava.lang.String;@7ac0e420,[Ljava.lang.String;@289710d9,[Ljava.lang.String;@5a18cd76),Annotation([Ljava.lang.String;@3da30852,[Ljava.lang.String;@403f0a22,[Ledu.cmu.lti.nlp.amr.Dependency;@503ecb24),Annotation([Ljava.lang.String;@4c51cf28,[Ljava.lang.String;@6995bf68,[Ljava.lang.String;@5143c662),Annotation([Ljava.lang.String;@77825085,[Ljava.lang.String;@3568f9d2,[Ledu.cmu.lti.nlp.amr.Entity;@71c27ee8))
AMR:
(a2 / apply-02, ARG1, p / policy)
(a2 / apply-02, ARG2, a / aircraft)
(a2 / apply-02, ARG6, h / have-org-role-91)
(a2 / apply-02, polarity, -)
(b / board-01, ARG0, c / child)
(b / board-01, ARG1, a / aircraft)
(c2 / country, name, n / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Brazil")
(s / state-01, ARG1, a2 / apply-02)

Decoded in 311,290 microseconds
Sentence: Viegas stated that the limitation was necessary.

NER Entity: (person :name (name :op "Viegas"))
NER Entity: (person :name (name :op "Viegas"))
Spans:
Span 4-5:  limitation => limit-01
Span 1-2:  stated => state-01
Span 0-1:  Viegas => (person :name (name :op "Viegas"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),limitation,limit-01,false), Span(1,2,List(1),stated,state-01,false), Span(0,1,List(4, 3, 2),Viegas,(person :name (name :op "Viegas")),false)),Map(2 -> person, 1 -> state-01, 4 -> "Viegas", 0 -> limit-01, 3 -> name),Map(n -> name, s -> state-01, p -> person, l -> limit-01))),[Ljava.lang.String;@3e7dd664,Annotation([Ljava.lang.String;@5b1ebf56,[Ljava.lang.String;@294a6b8e,[Ljava.lang.String;@4b1d6571),Annotation([Ljava.lang.String;@1b835480,[Ljava.lang.String;@3549bca9,[Ledu.cmu.lti.nlp.amr.Dependency;@4f25b795),Annotation([Ljava.lang.String;@6fb365ed,[Ljava.lang.String;@6e950bcf,[Ljava.lang.String;@16414e40),Annotation([Ljava.lang.String;@74bada02,[Ljava.lang.String;@525575,[Ledu.cmu.lti.nlp.amr.Entity;@46dffdc3))
AMR:
(n / name, op, "Viegas")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG6, l / limit-01)

Decoded in 13,338 microseconds
Sentence: Gandra stated that the provision undermines the decree's essential purpose by granting immunity to drug-smuggling aircraft carrying children and thus introducing the possibility of kidnapped children being used as human shields.

NER Entity: (country :name (name :op "Gandra"))
NER Entity: (country :name (name :op "Gandra"))
Spans:
Span 18-19:  aircraft => aircraft
Span 21-22:  and => and
Span 19-20:  carrying => carry-01
Span 28-29:  children => child
Span 20-21:  children => child
Span 7-8:  decree => decree
Span 15-16:  drug => drug
Span 9-10:  essential => essential
Span 0-1:  Gandra => (person :name (name :op "Gandra"))
Span 12-13:  granting => grant-01
Span 32-33:  human => human
Span 13-14:  immunity => immunity
Span 23-24:  introducing => introduce-02
Span 27-28:  kidnapped => kidnap-01
Span 25-26:  possibility => possible
Span 4-5:  provision => provision
Span 10-11:  purpose => purpose-01
Span 33-34:  shields => shield-01
Span 17-18:  smuggling => smuggle-01
Span 1-2:  stated => state-01
Span 5-6:  undermines => undermine-01
Span 30-31:  used => use-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),shields,shield-01,false), Span(32,33,List(1),human,human,false), Span(30,31,List(2),used,use-01,false), Span(28,29,List(3),children,child,false), Span(27,28,List(4),kidnapped,kidnap-01,false), Span(25,26,List(5),possibility,possible,false), Span(23,24,List(6),introducing,introduce-02,false), Span(21,22,List(7),and,and,false), Span(20,21,List(8),children,child,false), Span(19,20,List(9),carrying,carry-01,false), Span(18,19,List(10),aircraft,aircraft,false), Span(17,18,List(11),smuggling,smuggle-01,false), Span(15,16,List(12),drug,drug,false), Span(13,14,List(13),immunity,immunity,false), Span(12,13,List(14),granting,grant-01,false), Span(10,11,List(15),purpose,purpose-01,false), Span(9,10,List(16),essential,essential,false), Span(7,8,List(17),decree,decree,false), Span(5,6,List(18),undermines,undermine-01,false), Span(4,5,List(19),provision,provision,false), Span(1,2,List(20),stated,state-01,false), Span(0,1,List(23, 22, 21),Gandra,(person :name (name :op "Gandra")),false)),Map(2 -> use-01, 5 -> possible, 12 -> drug, 15 -> purpose-01, 8 -> child, 21 -> person, 18 -> undermine-01, 7 -> and, 17 -> decree, 1 -> human, 23 -> "Gandra", 4 -> kidnap-01, 11 -> smuggle-01, 14 -> grant-01, 20 -> state-01, 6 -> introduce-02, 22 -> name, 0 -> shield-01, 9 -> carry-01, 16 -> essential, 19 -> provision, 3 -> child, 10 -> aircraft, 13 -> immunity),Map(e -> essential, n -> name, h -> human, s2 -> smuggle-01, k -> kidnap-01, p2 -> purpose-01, u2 -> undermine-01, s -> shield-01, d -> drug, g -> grant-01, p -> possible, a -> and, c3 -> carry-01, p4 -> person, d2 -> decree, i2 -> immunity, i -> introduce-02, a2 -> aircraft, s3 -> state-01, c -> child, u -> use-01, p3 -> provision, c2 -> child))),[Ljava.lang.String;@5a709816,Annotation([Ljava.lang.String;@78383390,[Ljava.lang.String;@6ad3381f,[Ljava.lang.String;@53dbe163),Annotation([Ljava.lang.String;@db57326,[Ljava.lang.String;@34a875b3,[Ledu.cmu.lti.nlp.amr.Dependency;@4748a0f9),Annotation([Ljava.lang.String;@4b14918a,[Ljava.lang.String;@6d1ef78d,[Ljava.lang.String;@1a6c1270),Annotation([Ljava.lang.String;@18a136ac,[Ljava.lang.String;@77d67cf3,[Ledu.cmu.lti.nlp.amr.Entity;@6dee4f1b))
AMR:
(a / and, op, i / introduce-02)
(c3 / carry-01, ARG0, a2 / aircraft)
(c3 / carry-01, ARG1, c / child)
(g / grant-01, ARG0, p3 / provision)
(g / grant-01, ARG1, i2 / immunity)
(g / grant-01, ARG2, a2 / aircraft)
(i / introduce-02, ARG0, p3 / provision)
(i / introduce-02, ARG1, p / possible)
(k / kidnap-01, ARG1, c2 / child)
(n / name, op, "Gandra")
(p / possible, domain, u / use-01)
(p2 / purpose-01, ARG1, d2 / decree)
(p4 / person, name, n / name)
(s / shield-01, ARG1, e / essential)
(s / shield-01, mod, h / human)
(s2 / smuggle-01, ARG0, a2 / aircraft)
(s2 / smuggle-01, ARG1, d / drug)
(s3 / state-01, ARG0, p4 / person)
(s3 / state-01, ARG1, u2 / undermine-01)
(u / use-01, ARG1, c2 / child)
(u / use-01, ARG2, s / shield-01)
(u2 / undermine-01, ARG0, p3 / provision)
(u2 / undermine-01, ARG1, p2 / purpose-01)
(u2 / undermine-01, instrument, g / grant-01)

Decoded in 781,139 microseconds
Sentence: Viegas stated in an interview in Brasilia that the government will use the law to more powerfully dissuade drug traffickers who have previously entered Brazilian airspace feeling unthreatened by the air force.

NER Entity: (person :name (name :op "Viegas"))
NER Entity: (country :name (name :op "Brasilia"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (country :name (name :op "Brasilia"))
NER Entity: (person :name (name :op "Viegas"))
Spans:
Span 30-32:  air force => (military :name (name :op "force" :op "air"))
Span 25-26:  airspace => airspace
Span 6-7:  Brasilia => (city :name (name :op "Brasilia"))
Span 24-25:  Brazilian => (country :name (name :op "Brazil"))
Span 17-18:  dissuade => dissuade-01
Span 18-19:  drug => drug
Span 23-24:  entered => enter-01
Span 26-27:  feeling => feel-01
Span 9-10:  government => (government-organization :ARG0-of govern-01)
Span 4-5:  interview => interview-01
Span 13-14:  law => law
Span 15-16:  more => more
Span 16-17:  powerfully => powerful
Span 22-23:  previously => previous
Span 1-2:  stated => state-01
Span 19-20:  traffickers => (person :ARG0-of traffic-00)
Span 27-28:  unthreatened => (threaten-01 :polarity -)
Span 11-12:  use => use-01
Span 0-1:  Viegas => (person :name (name :op "Viegas"))

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,32,List(3, 2, 1, 0),air force,(military :name (name :op "force" :op "air")),false), Span(27,28,List(5, 4),unthreatened,(threaten-01 :polarity -),false), Span(26,27,List(6),feeling,feel-01,false), Span(25,26,List(7),airspace,airspace,false), Span(24,25,List(10, 9, 8),Brazilian,(country :name (name :op "Brazil")),false), Span(23,24,List(11),entered,enter-01,false), Span(22,23,List(12),previously,previous,false), Span(19,20,List(14, 13),traffickers,(person :ARG0-of traffic-00),false), Span(18,19,List(15),drug,drug,false), Span(17,18,List(16),dissuade,dissuade-01,false), Span(16,17,List(17),powerfully,powerful,false), Span(15,16,List(18),more,more,false), Span(13,14,List(19),law,law,false), Span(11,12,List(20),use,use-01,false), Span(9,10,List(22, 21),government,(government-organization :ARG0-of govern-01),false), Span(6,7,List(25, 24, 23),Brasilia,(city :name (name :op "Brasilia")),false), Span(4,5,List(26),interview,interview-01,false), Span(1,2,List(27),stated,state-01,false), Span(0,1,List(30, 29, 28),Viegas,(person :name (name :op "Viegas")),false)),Map(30 -> "Viegas", 2 -> "force", 5 -> -, 27 -> state-01, 12 -> previous, 8 -> country, 15 -> drug, 21 -> government-organization, 18 -> more, 24 -> name, 7 -> airspace, 1 -> name, 17 -> powerful, 23 -> city, 26 -> interview-01, 4 -> threaten-01, 11 -> enter-01, 14 -> traffic-00, 29 -> name, 20 -> use-01, 28 -> person, 6 -> feel-01, 9 -> name, 0 -> military, 22 -> govern-01, 16 -> dissuade-01, 19 -> law, 10 -> "Brazil", 3 -> "air", 25 -> "Brasilia", 13 -> person),Map(e -> enter-01, n -> name, t -> threaten-01, m2 -> more, p2 -> person, n4 -> name, s -> state-01, d -> drug, m -> military, g2 -> govern-01, p -> previous, g -> government-organization, a -> airspace, n3 -> name, p4 -> person, d2 -> dissuade-01, t2 -> traffic-00, i -> interview-01, c -> country, l -> law, u -> use-01, f -> feel-01, p3 -> powerful, n2 -> name, c2 -> city))),[Ljava.lang.String;@176b3f44,Annotation([Ljava.lang.String;@6ee6f53,[Ljava.lang.String;@421bba99,[Ljava.lang.String;@5d12a356),Annotation([Ljava.lang.String;@134d26af,[Ljava.lang.String;@66ac5762,[Ledu.cmu.lti.nlp.amr.Dependency;@797cf65c),Annotation([Ljava.lang.String;@31bcf236,[Ljava.lang.String;@4b3ed2f0,[Ljava.lang.String;@4fad9bb2),Annotation([Ljava.lang.String;@517d4a0d,[Ljava.lang.String;@7862f56,[Ledu.cmu.lti.nlp.amr.Entity;@3a12c404))
AMR:
(a / airspace, mod, c / country)
(c / country, name, n2 / name)
(c2 / city, name, n3 / name)
(d2 / dissuade-01, ARG0, g / government-organization)
(d2 / dissuade-01, ARG1, p2 / person)
(d2 / dissuade-01, manner, p3 / powerful)
(e / enter-01, ARG0, p2 / person)
(e / enter-01, ARG1, a / airspace)
(e / enter-01, time, p / previous)
(f / feel-01, ARG0, p2 / person)
(f / feel-01, ARG1, t / threaten-01)
(g2 / govern-01, ARG0, g / government-organization)
(i / interview-01, ARG1, p4 / person)
(m / military, name, n / name)
(n / name, op, "air")
(n / name, op, "force")
(n2 / name, op, "Brazil")
(n3 / name, op, "Brasilia")
(n4 / name, op, "Viegas")
(p3 / powerful, degree, m2 / more)
(p4 / person, name, n4 / name)
(s / state-01, ARG0, p4 / person)
(s / state-01, ARG1, u / use-01)
(s / state-01, location, c2 / city)
(s / state-01, medium, i / interview-01)
(t / threaten-01, ARG0, m / military)
(t / threaten-01, ARG2, p2 / person)
(t / threaten-01, polarity, -)
(t2 / traffic-00, ARG0, p2 / person)
(t2 / traffic-00, ARG1, d / drug)
(u / use-01, ARG0, g / government-organization)
(u / use-01, ARG1, l / law)
(u / use-01, ARG2, d2 / dissuade-01)

Decoded in 962,122 microseconds
Sentence: The Government was prompted to act due to the deteriorating public security situation with increasingly powerful and violent drug gangs in Sao Paolo and particularly Rio de Janeiro.

NER Entity: (country :name (name :op "Sao" :op "Paolo"))
NER Entity: (country :name (name :op "Rio" :op "de" :op "Janeiro"))
Spans:
Span 5-6:  act => act-02
Span 23-24:  and => and
Span 16-17:  and => and
Span 9-10:  deteriorating => deteriorate-01
Span 18-19:  drug => drug
Span 19-20:  gangs => gang
Span 1-2:  Government => (government-organization :ARG0-of govern-01)
Span 14-15:  increasingly => increase-01
Span 24-25:  particularly => particular
Span 15-16:  powerful => powerful
Span 3-4:  prompted => prompt-02
Span 10-11:  public => public
Span 25-28:  Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Span 21-23:  Sao Paolo => (country :name (name :op "Sao" :op "Paolo"))
Span 11-12:  security => security
Span 12-13:  situation => situation
Span 17-18:  violent => violence

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,28,List(4, 3, 2, 1, 0),Rio de Janeiro,(city :name (name :op "Janeiro" :op "de" :op "Rio")),false), Span(24,25,List(5),particularly,particular,false), Span(23,24,List(6),and,and,false), Span(21,23,List(10, 9, 8, 7),Sao Paolo,(country :name (name :op "Sao" :op "Paolo")),false), Span(19,20,List(11),gangs,gang,false), Span(18,19,List(12),drug,drug,false), Span(17,18,List(13),violent,violence,false), Span(16,17,List(14),and,and,false), Span(15,16,List(15),powerful,powerful,false), Span(14,15,List(16),increasingly,increase-01,false), Span(12,13,List(17),situation,situation,false), Span(11,12,List(18),security,security,false), Span(10,11,List(19),public,public,false), Span(9,10,List(20),deteriorating,deteriorate-01,false), Span(5,6,List(21),act,act-02,false), Span(3,4,List(22),prompted,prompt-02,false), Span(1,2,List(24, 23),Government,(government-organization :ARG0-of govern-01),false)),Map(2 -> "Janeiro", 5 -> particular, 12 -> drug, 8 -> name, 15 -> powerful, 21 -> act-02, 18 -> security, 24 -> govern-01, 7 -> country, 1 -> name, 17 -> situation, 23 -> government-organization, 4 -> "Rio", 11 -> gang, 14 -> and, 20 -> deteriorate-01, 6 -> and, 9 -> "Sao", 0 -> city, 22 -> prompt-02, 16 -> increase-01, 19 -> public, 10 -> "Paolo", 3 -> "de", 13 -> violence),Map(n -> name, g3 -> govern-01, s2 -> security, p2 -> powerful, a3 -> act-02, s -> situation, v -> violence, d -> drug, g2 -> government-organization, p -> particular, g -> gang, a -> and, p4 -> prompt-02, d2 -> deteriorate-01, a2 -> and, i -> increase-01, c -> city, p3 -> public, c2 -> country, n2 -> name))),[Ljava.lang.String;@1941a8ff,Annotation([Ljava.lang.String;@22d7b4f8,[Ljava.lang.String;@149dd36b,[Ljava.lang.String;@38831718),Annotation([Ljava.lang.String;@2c1156a7,[Ljava.lang.String;@33fe57a9,[Ledu.cmu.lti.nlp.amr.Dependency;@4982cc36),Annotation([Ljava.lang.String;@691939c9,[Ljava.lang.String;@4f1bfe23,[Ljava.lang.String;@e19bb76),Annotation([Ljava.lang.String;@512535ff,[Ljava.lang.String;@71529963,[Ledu.cmu.lti.nlp.amr.Entity;@61a88b8c))
AMR:
(a / and, op, c2 / country)
(a2 / and, op, c / city)
(a2 / and, op, c2 / country)
(a3 / act-02, ARG0, g2 / government-organization)
(c / city, mod, p / particular)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(d2 / deteriorate-01, ARG0, s / situation)
(g / gang, location, a2 / and)
(g / gang, mod, d / drug)
(g / gang, mod, p2 / powerful)
(g / gang, mod, v / violence)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c2 / country)
(i / increase-01, ARG1, v / violence)
(n / name, op, "Janeiro")
(n / name, op, "Rio")
(n / name, op, "de")
(n2 / name, op, "Paolo")
(n2 / name, op, "Sao")
(p4 / prompt-02, ARG1, g2 / government-organization)
(p4 / prompt-02, ARG2, a3 / act-02)
(s / situation, mod, s2 / security)
(s / situation, prep-with, g / gang)
(s2 / security, mod, p3 / public)

Decoded in 1,677,993 microseconds
Sentence: Rio de Janeiro drug gangs have more firepower than the police and have successfully attacked police stations and forced businesses and schools to close.

NER Entity: (country :name (name :op "Rio" :op "de" :op "Janeiro"))
Spans:
Span 20-21:  and => and
Span 17-18:  and => and
Span 11-12:  and => and
Span 14-15:  attacked => attack-01
Span 19-20:  businesses => business
Span 3-4:  drug => drug
Span 7-8:  firepower => firepower
Span 18-19:  forced => force-01
Span 4-5:  gangs => gang
Span 6-7:  more => more
Span 15-16:  police => police
Span 10-11:  police => police
Span 0-3:  Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Span 21-22:  schools => school
Span 16-17:  stations => station
Span 13-14:  successfully => success

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),schools,school,false), Span(20,21,List(1),and,and,false), Span(19,20,List(2),businesses,business,false), Span(18,19,List(3),forced,force-01,false), Span(17,18,List(4),and,and,false), Span(16,17,List(5),stations,station,false), Span(15,16,List(6),police,police,false), Span(14,15,List(7),attacked,attack-01,false), Span(13,14,List(8),successfully,success,false), Span(11,12,List(9),and,and,false), Span(10,11,List(10),police,police,false), Span(7,8,List(11),firepower,firepower,false), Span(6,7,List(12),more,more,false), Span(4,5,List(13),gangs,gang,false), Span(3,4,List(14),drug,drug,false), Span(0,3,List(19, 18, 17, 16, 15),Rio de Janeiro,(city :name (name :op "Janeiro" :op "de" :op "Rio")),false)),Map(2 -> business, 5 -> station, 12 -> more, 15 -> city, 8 -> success, 18 -> "de", 7 -> attack-01, 17 -> "Janeiro", 1 -> and, 4 -> and, 11 -> firepower, 14 -> drug, 6 -> police, 0 -> school, 9 -> and, 16 -> name, 19 -> "Rio", 3 -> force-01, 10 -> police, 13 -> gang),Map(n -> name, s2 -> station, b -> business, p2 -> police, a3 -> attack-01, s -> school, d -> drug, m -> more, g -> gang, p -> police, a -> and, a2 -> and, c -> city, s3 -> success, f2 -> firepower, f -> force-01, a4 -> and))),[Ljava.lang.String;@22295ec4,Annotation([Ljava.lang.String;@5adb0db3,[Ljava.lang.String;@3f270e0a,[Ljava.lang.String;@1a760689),Annotation([Ljava.lang.String;@7241a47d,[Ljava.lang.String;@70f59913,[Ledu.cmu.lti.nlp.amr.Dependency;@77258e59),Annotation([Ljava.lang.String;@5dcd8c7a,[Ljava.lang.String;@2250b9f2,[Ljava.lang.String;@7e3181aa),Annotation([Ljava.lang.String;@253d9f73,[Ljava.lang.String;@142269f2,[Ledu.cmu.lti.nlp.amr.Entity;@331acdad))
AMR:
(a2 / and, op, b / business)
(a2 / and, op, f / force-01)
(a2 / and, op, s / school)
(a3 / attack-01, ARG0, g / gang)
(a3 / attack-01, ARG1, s2 / station)
(a4 / and, op, a3 / attack-01)
(a4 / and, op, f / force-01)
(c / city, name, n / name)
(f / force-01, ARG0, g / gang)
(f / force-01, ARG1, a / and)
(f2 / firepower, compared-to, p / police)
(f2 / firepower, mod, m / more)
(g / gang, location, c / city)
(g / gang, mod, d / drug)
(n / name, op, "Janeiro")
(n / name, op, "Rio")
(n / name, op, "de")
(s2 / station, mod, p / police)
(s2 / station, mod, p2 / police)
(s3 / success, ARG0, g / gang)

Decoded in 1,077,593 microseconds
Sentence: President Luiz Inacio Lula da Silva stated in a 2003 interview with foreign correspondents --

NER Entity: (person :name (name :op "Luiz" :op "Inacio" :op "Lula" :op "da" :op "Silva"))
Spans:
Span 9-10:  2003 => (date-entity :year 2003)
Span 13-14:  correspondents => correspondent
Span 12-13:  foreign => foreign
Span 10-11:  interview => interview-01
Span 1-6:  Luiz Inacio Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula" :op "Inacio" :op "Luiz"))
Span 0-1:  President => (have-org-role-91 :ARG2 president)
Span 6-7:  stated => state-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),correspondents,correspondent,false), Span(12,13,List(1),foreign,foreign,false), Span(10,11,List(2),interview,interview-01,false), Span(9,10,List(4, 3),2003,(date-entity :year 2003),false), Span(6,7,List(5),stated,state-01,false), Span(1,6,List(12, 11, 10, 9, 8, 7, 6),Luiz Inacio Lula da Silva,(person :name (name :op "Silva" :op "da" :op "Lula" :op "Inacio" :op "Luiz")),false), Span(0,1,List(14, 13),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> interview-01, 5 -> state-01, 12 -> "Luiz", 8 -> "Silva", 7 -> name, 1 -> foreign, 4 -> 2003, 11 -> "Inacio", 14 -> president, 6 -> person, 0 -> correspondent, 9 -> "da", 3 -> date-entity, 10 -> "Lula", 13 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, 2 -> 2003, p2 -> president, s -> state-01, d -> date-entity, p -> person, i -> interview-01, c -> correspondent, f -> foreign))),[Ljava.lang.String;@41d426b5,Annotation([Ljava.lang.String;@8dbfffb,[Ljava.lang.String;@f316aeb,[Ljava.lang.String;@6aa3a905),Annotation([Ljava.lang.String;@a22cb6a,[Ljava.lang.String;@5dd1c9f2,[Ledu.cmu.lti.nlp.amr.Dependency;@59b38691),Annotation([Ljava.lang.String;@2e2ff723,[Ljava.lang.String;@324a0017,[Ljava.lang.String;@6187d1f5),Annotation([Ljava.lang.String;@2445445a,[Ljava.lang.String;@7502291e,[Ledu.cmu.lti.nlp.amr.Entity;@17aad511))
AMR:
(c / correspondent, mod, f / foreign)
(d / date-entity, year, 2 / 2003)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / president)
(i / interview-01, ARG0, c / correspondent)
(i / interview-01, ARG1, p / person)
(i / interview-01, time, d / date-entity)
(n / name, op, "Inacio")
(n / name, op, "Luiz")
(n / name, op, "Lula")
(n / name, op, "Silva")
(n / name, op, "da")
(p / person, name, n / name)
(s / state-01, medium, i / interview-01)

Decoded in 111,896 microseconds
Sentence: The policy is a matter of national sovereignty and security.

Spans:
Span 8-9:  and => and
Span 4-5:  matter => matter
Span 6-7:  national => nation
Span 1-2:  policy => policy
Span 9-10:  security => security
Span 7-8:  sovereignty => sovereignty

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),security,security,false), Span(8,9,List(1),and,and,false), Span(7,8,List(2),sovereignty,sovereignty,false), Span(6,7,List(3),national,nation,false), Span(4,5,List(4),matter,matter,false), Span(1,2,List(5),policy,policy,false)),Map(2 -> sovereignty, 5 -> policy, 1 -> and, 4 -> matter, 0 -> security, 3 -> nation),Map(n -> nation, s2 -> sovereignty, s -> security, m -> matter, p -> policy, a -> and))),[Ljava.lang.String;@487db668,Annotation([Ljava.lang.String;@46944ca9,[Ljava.lang.String;@22bac7bc,[Ljava.lang.String;@63798ca7),Annotation([Ljava.lang.String;@4612b856,[Ljava.lang.String;@22875539,[Ledu.cmu.lti.nlp.amr.Dependency;@5674e1f2),Annotation([Ljava.lang.String;@79c7532f,[Ljava.lang.String;@2a448449,[Ljava.lang.String;@32f232a5),Annotation([Ljava.lang.String;@43f82e78,[Ljava.lang.String;@e54303,[Ledu.cmu.lti.nlp.amr.Entity;@e8df99a))
AMR:
(a / and, op, s2 / sovereignty)
(m / matter, domain, p / policy)
(m / matter, topic, a / and)
(s / security, mod, n / nation)
(s2 / sovereignty, mod, n / nation)

Decoded in 23,297 microseconds
Sentence: Some pilots of drug-running aircraft felt so confidently immune from retribution as to make obscene gestures at pursuing Brazilian air force pilots.

NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 6-7:  aircraft => aircraft
Span 20-23:  Brazilian air force => (have-org-role-91 :ARG1 (military :name (name :op "Force" :op "Air" :op "Brazilian")))
Span 9-10:  confidently => confident-41
Span 3-4:  drug => drug
Span 7-8:  felt => feel-01
Span 17-18:  gestures => gesture-01
Span 10-11:  immune => immune
Span 15-16:  make => make-01
Span 16-17:  obscene => obscene
Span 23-24:  pilots => pilot-01
Span 1-2:  pilots => pilot-01
Span 19-20:  pursuing => pursue-01
Span 12-13:  retribution => retribution
Span 5-6:  running => run-01
Span 8-9:  so => so
Span 0-1:  Some => some

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),pilots,pilot-01,false), Span(20,23,List(6, 5, 4, 3, 2, 1),Brazilian air force,(have-org-role-91 :ARG1 (military :name (name :op "Force" :op "Air" :op "Brazilian"))),false), Span(19,20,List(7),pursuing,pursue-01,false), Span(17,18,List(8),gestures,gesture-01,false), Span(16,17,List(9),obscene,obscene,false), Span(15,16,List(10),make,make-01,false), Span(12,13,List(11),retribution,retribution,false), Span(10,11,List(12),immune,immune,false), Span(9,10,List(13),confidently,confident-41,false), Span(8,9,List(14),so,so,false), Span(7,8,List(15),felt,feel-01,false), Span(6,7,List(16),aircraft,aircraft,false), Span(5,6,List(17),running,run-01,false), Span(3,4,List(18),drug,drug,false), Span(1,2,List(19),pilots,pilot-01,false), Span(0,1,List(20),Some,some,false)),Map(2 -> military, 5 -> "Air", 12 -> immune, 15 -> feel-01, 8 -> gesture-01, 18 -> drug, 7 -> pursue-01, 17 -> run-01, 1 -> have-org-role-91, 4 -> "Force", 11 -> retribution, 14 -> so, 20 -> some, 6 -> "Brazilian", 0 -> pilot-01, 9 -> obscene, 16 -> aircraft, 19 -> pilot-01, 3 -> name, 10 -> make-01, 13 -> confident-41),Map(n -> name, h -> have-org-role-91, s2 -> some, m2 -> make-01, p2 -> pursue-01, s -> so, d -> drug, m -> military, r2 -> run-01, p -> pilot-01, g -> gesture-01, a -> aircraft, r -> retribution, i -> immune, c -> confident-41, f -> feel-01, o -> obscene, p3 -> pilot-01))),[Ljava.lang.String;@2dc995f4,Annotation([Ljava.lang.String;@2f40e5db,[Ljava.lang.String;@517566b,[Ljava.lang.String;@64b73e7a),Annotation([Ljava.lang.String;@530712d,[Ljava.lang.String;@2df6226d,[Ledu.cmu.lti.nlp.amr.Dependency;@12ed9db6),Annotation([Ljava.lang.String;@4ff4357f,[Ljava.lang.String;@49cb9cb5,[Ljava.lang.String;@55322aab),Annotation([Ljava.lang.String;@2b4c1d96,[Ljava.lang.String;@45fd9a4d,[Ledu.cmu.lti.nlp.amr.Entity;@50468873))
AMR:
(c / confident-41, ARG1, p / pilot-01)
(c / confident-41, ARG2, i / immune)
(f / feel-01, ARG1, i / immune)
(f / feel-01, ARG2, r / retribution)
(g / gesture-01, ARG1, o / obscene)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG3, p3 / pilot-01)
(i / immune, degree, s / so)
(m / military, name, n / name)
(m2 / make-01, ARG1, g / gesture-01)
(m2 / make-01, purpose, p2 / pursue-01)
(n / name, op, "Air")
(n / name, op, "Brazilian")
(n / name, op, "Force")
(p / pilot-01, ARG0, s2 / some)
(p / pilot-01, ARG1, a / aircraft)
(p2 / pursue-01, ARG1, p / pilot-01)
(p3 / pilot-01, ARG1, r / retribution)
(r2 / run-01, ARG0, a / aircraft)
(r2 / run-01, ARG1, d / drug)

Decoded in 1,068,273 microseconds
Sentence: The constitutionality of the law has been questioned under Brazil's prohibition of the death penalty as punishment for criminal acts.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 20-21:  acts => act
Span 9-10:  Brazil => (country :name (name :op "Brazil"))
Span 1-2:  constitutionality => constitution
Span 19-20:  criminal => crime
Span 14-15:  death => die-01
Span 4-5:  law => law
Span 15-16:  penalty => penalize-01
Span 11-12:  prohibition => prohibit-01
Span 17-18:  punishment => punish-01
Span 7-8:  questioned => question-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),acts,act,false), Span(19,20,List(1),criminal,crime,false), Span(17,18,List(2),punishment,punish-01,false), Span(15,16,List(3),penalty,penalize-01,false), Span(14,15,List(4),death,die-01,false), Span(11,12,List(5),prohibition,prohibit-01,false), Span(9,10,List(8, 7, 6),Brazil,(country :name (name :op "Brazil")),false), Span(7,8,List(9),questioned,question-01,false), Span(4,5,List(10),law,law,false), Span(1,2,List(11),constitutionality,constitution,false)),Map(2 -> punish-01, 5 -> prohibit-01, 8 -> "Brazil", 7 -> name, 1 -> crime, 11 -> constitution, 4 -> die-01, 6 -> country, 9 -> question-01, 0 -> act, 10 -> law, 3 -> penalize-01),Map(n -> name, q -> question-01, p2 -> penalize-01, d -> die-01, p -> punish-01, c3 -> constitution, a -> act, l -> law, c -> crime, c2 -> country, p3 -> prohibit-01))),[Ljava.lang.String;@146587a2,Annotation([Ljava.lang.String;@5f0e9815,[Ljava.lang.String;@76884e4b,[Ljava.lang.String;@126945f9),Annotation([Ljava.lang.String;@2a898881,[Ljava.lang.String;@16c63f5,[Ledu.cmu.lti.nlp.amr.Dependency;@35229f85),Annotation([Ljava.lang.String;@6d3c5255,[Ljava.lang.String;@b1712f3,[Ljava.lang.String;@6986bbaf),Annotation([Ljava.lang.String;@4879dfad,[Ljava.lang.String;@4758820d,[Ledu.cmu.lti.nlp.amr.Entity;@74eb909f))
AMR:
(a / act, mod, c / crime)
(c2 / country, name, n / name)
(c3 / constitution, domain, l / law)
(n / name, op, "Brazil")
(p / punish-01, ARG1, a / act)
(p2 / penalize-01, ARG1, p / punish-01)
(p2 / penalize-01, instrument, d / die-01)
(p3 / prohibit-01, ARG0, c2 / country)
(p3 / prohibit-01, ARG1, p2 / penalize-01)
(q / question-01, ARG1, c3 / constitution)
(q / question-01, prep-under, p3 / prohibit-01)

Decoded in 80,929 microseconds
Sentence: Some legal experts and other commentators stated that contrary to government claims, the Statute amounts to a de facto execution of drug traffickers.

Spans:
Span 15-16:  amounts => amount
Span 3-4:  and => and
Span 11-12:  claims => claim-01
Span 5-6:  commentators => (person :ARG0-of comment-01)
Span 8-9:  contrary => contrary-41
Span 22-23:  drug => drug
Span 20-21:  execution => execute-01
Span 2-3:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 10-11:  government => (government-organization :ARG0-of govern-01)
Span 1-2:  legal => legal
Span 4-5:  other => other
Span 0-1:  Some => some
Span 6-7:  stated => state-01
Span 14-15:  Statute => statute
Span 23-24:  traffickers => (person :ARG0-of traffic-00)

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),traffickers,(person :ARG0-of traffic-00),false), Span(22,23,List(2),drug,drug,false), Span(20,21,List(3),execution,execute-01,false), Span(15,16,List(4),amounts,amount,false), Span(14,15,List(5),Statute,statute,false), Span(11,12,List(6),claims,claim-01,false), Span(10,11,List(8, 7),government,(government-organization :ARG0-of govern-01),false), Span(8,9,List(9),contrary,contrary-41,false), Span(6,7,List(10),stated,state-01,false), Span(5,6,List(12, 11),commentators,(person :ARG0-of comment-01),false), Span(4,5,List(13),other,other,false), Span(3,4,List(14),and,and,false), Span(2,3,List(17, 16, 15),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(1,2,List(18),legal,legal,false), Span(0,1,List(19),Some,some,false)),Map(2 -> drug, 5 -> statute, 12 -> comment-01, 15 -> have-org-role-91, 8 -> govern-01, 18 -> legal, 7 -> government-organization, 17 -> expert-41, 1 -> traffic-00, 4 -> amount, 11 -> person, 14 -> and, 6 -> claim-01, 0 -> person, 9 -> contrary-41, 16 -> person, 19 -> some, 3 -> execute-01, 10 -> state-01, 13 -> other),Map(e -> execute-01, h -> have-org-role-91, s2 -> state-01, t -> traffic-00, e2 -> expert-41, p2 -> person, s -> statute, d -> drug, g2 -> govern-01, p -> person, g -> government-organization, a -> amount, c3 -> comment-01, a2 -> and, s3 -> some, c -> claim-01, l -> legal, o -> other, p3 -> person, c2 -> contrary-41))),[Ljava.lang.String;@28ec166e,Annotation([Ljava.lang.String;@2eee3069,[Ljava.lang.String;@2da59753,[Ljava.lang.String;@5629510),Annotation([Ljava.lang.String;@4df5bcb4,[Ljava.lang.String;@12c7a01b,[Ledu.cmu.lti.nlp.amr.Dependency;@13d9b21f),Annotation([Ljava.lang.String;@2826f61,[Ljava.lang.String;@62727399,[Ljava.lang.String;@4d9ac0b4),Annotation([Ljava.lang.String;@130dca52,[Ljava.lang.String;@2654635,[Ledu.cmu.lti.nlp.amr.Entity;@737a135b))
AMR:
(a / amount, domain, e / execute-01)
(a / amount, mod, s / statute)
(a2 / and, op, p2 / person)
(c / claim-01, ARG0, g / government-organization)
(c / claim-01, ARG1, l / legal)
(c2 / contrary-41, ARG1, a / amount)
(c2 / contrary-41, ARG2, c / claim-01)
(c3 / comment-01, ARG0, p2 / person)
(c3 / comment-01, ARG1, s3 / some)
(e / execute-01, ARG1, p / person)
(e2 / expert-41, ARG1, p3 / person)
(g2 / govern-01, ARG0, g / government-organization)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, p3 / person)
(p2 / person, mod, o / other)
(s2 / state-01, ARG0, a2 / and)
(s2 / state-01, ARG1, a / amount)
(t / traffic-00, ARG0, p / person)
(t / traffic-00, ARG1, d / drug)

Decoded in 1,413,095 microseconds
Sentence: The daily newspaper O Estado de Sao Paolo stated in an editorial the week of 20040718-20040824 -- the extreme measure raises ethical and juridical problems exceeding any potential benefits.

NER Entity: (country :name (name :op "O" :op "Estado" :op "de"))
NER Entity: (country :name (name :op "Sao" :op "Paolo"))
Spans:
Span 15-16:  20040718-20040824 => 2004
Span 22-23:  and => and
Span 26-27:  any => any
Span 28-29:  benefits => benefit-01
Span 1-2:  daily => daily
Span 11-12:  editorial => editorial
Span 21-22:  ethical => ethics
Span 25-26:  exceeding => exceed-01
Span 18-19:  extreme => extreme
Span 23-24:  juridical => juridical
Span 19-20:  measure => measure
Span 2-3:  newspaper => newspaper
Span 3-8:  O Estado de Sao Paolo => (name :op "Paolo" :op "Sao" :op "de" :op "Estado" :op "O")
Span 27-28:  potential => potential
Span 24-25:  problems => problem
Span 20-21:  raises => raise-01
Span 8-9:  stated => state-01
Span 13-14:  week => week

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),benefits,benefit-01,false), Span(27,28,List(1),potential,potential,false), Span(26,27,List(2),any,any,false), Span(25,26,List(3),exceeding,exceed-01,false), Span(24,25,List(4),problems,problem,false), Span(23,24,List(5),juridical,juridical,false), Span(22,23,List(6),and,and,false), Span(21,22,List(7),ethical,ethics,false), Span(20,21,List(8),raises,raise-01,false), Span(19,20,List(9),measure,measure,false), Span(18,19,List(10),extreme,extreme,false), Span(15,16,List(11),20040718-20040824,2004,false), Span(13,14,List(12),week,week,false), Span(11,12,List(13),editorial,editorial,false), Span(8,9,List(14),stated,state-01,false), Span(3,8,List(20, 19, 18, 17, 16, 15),O Estado de Sao Paolo,(name :op "Paolo" :op "Sao" :op "de" :op "Estado" :op "O"),false), Span(2,3,List(21),newspaper,newspaper,false), Span(1,2,List(22),daily,daily,false)),Map(2 -> any, 5 -> juridical, 12 -> week, 15 -> name, 8 -> raise-01, 21 -> newspaper, 18 -> "de", 7 -> ethics, 17 -> "Sao", 1 -> potential, 4 -> problem, 11 -> 2004, 14 -> state-01, 20 -> "O", 6 -> and, 22 -> daily, 0 -> benefit-01, 9 -> measure, 16 -> "Paolo", 19 -> "Estado", 3 -> exceed-01, 10 -> extreme, 13 -> editorial),Map(e -> exceed-01, n -> name, w -> week, 2 -> 2004, b -> benefit-01, p2 -> problem, e2 -> ethics, j -> juridical, s -> state-01, d -> daily, m -> measure, p -> potential, a -> any, e4 -> editorial, a2 -> and, r -> raise-01, e3 -> extreme, n2 -> newspaper))),[Ljava.lang.String;@687ef2e0,Annotation([Ljava.lang.String;@15dcfae7,[Ljava.lang.String;@3da05287,[Ljava.lang.String;@1e636ea3),Annotation([Ljava.lang.String;@115667d,[Ljava.lang.String;@736caf7a,[Ledu.cmu.lti.nlp.amr.Dependency;@4ce7fffa),Annotation([Ljava.lang.String;@497486b3,[Ljava.lang.String;@63f8276e,[Ljava.lang.String;@75f95314),Annotation([Ljava.lang.String;@6127a7e,[Ljava.lang.String;@6bbe2511,[Ledu.cmu.lti.nlp.amr.Entity;@495fac5f))
AMR:
(a2 / and, op, p2 / problem)
(b / benefit-01, ARG1, d / daily)
(b / benefit-01, mod, a / any)
(b / benefit-01, mod, p / potential)
(e / exceed-01, ARG0, p2 / problem)
(e / exceed-01, ARG1, b / benefit-01)
(m / measure, mod, e3 / extreme)
(n / name, op, "Estado")
(n / name, op, "O")
(n / name, op, "Paolo")
(n / name, op, "Sao")
(n / name, op, "de")
(n2 / newspaper, mod, e2 / ethics)
(n2 / newspaper, name, n / name)
(p2 / problem, mod, j / juridical)
(r / raise-01, ARG0, m / measure)
(r / raise-01, ARG1, a2 / and)
(s / state-01, ARG0, n2 / newspaper)
(s / state-01, ARG1, r / raise-01)
(s / state-01, ARG6, 2 / 2004)
(s / state-01, medium, e4 / editorial)
(s / state-01, time, w / week)

Decoded in 1,184,477 microseconds
Sentence: The penalty will be applied extrajudicially by administrative decision of the Commander of the Air Force.

NER Entity: (organization :name (name :op "Air" :op "Force"))
Spans:
Span 7-8:  administrative => administrate-01
Span 14-16:  Air Force => (organization :name (name :op "Air" :op "Force"))
Span 11-12:  Commander => (have-org-role-91 :ARG2 commander)
Span 8-9:  decision => decide-01
Span 5-6:  extrajudicially => extrajudicial
Span 1-2:  penalty => penalize-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(3, 2, 1, 0),Air Force,(organization :name (name :op "Air" :op "Force")),false), Span(11,12,List(5, 4),Commander,(have-org-role-91 :ARG2 commander),false), Span(8,9,List(6),decision,decide-01,false), Span(7,8,List(7),administrative,administrate-01,false), Span(5,6,List(8),extrajudicially,extrajudicial,false), Span(1,2,List(9),penalty,penalize-01,false)),Map(2 -> "Air", 5 -> commander, 8 -> extrajudicial, 7 -> administrate-01, 1 -> name, 4 -> have-org-role-91, 6 -> decide-01, 9 -> penalize-01, 0 -> organization, 3 -> "Force"),Map(e -> extrajudicial, n -> name, h -> have-org-role-91, d -> decide-01, p -> penalize-01, a -> administrate-01, c -> commander, o -> organization))),[Ljava.lang.String;@76012793,Annotation([Ljava.lang.String;@635572a7,[Ljava.lang.String;@79d94571,[Ljava.lang.String;@4dd02341),Annotation([Ljava.lang.String;@3212a8d7,[Ljava.lang.String;@7a1a3478,[Ledu.cmu.lti.nlp.amr.Dependency;@495b0487),Annotation([Ljava.lang.String;@55dfcc6,[Ljava.lang.String;@222eb8aa,[Ljava.lang.String;@93cf163),Annotation([Ljava.lang.String;@1852a3ff,[Ljava.lang.String;@7203c7ff,[Ledu.cmu.lti.nlp.amr.Entity;@25bfcafd))
AMR:
(a / administrate-01, ARG1, e / extrajudicial)
(d / decide-01, ARG0, o / organization)
(d / decide-01, ARG1, p / penalize-01)
(d / decide-01, mod, a / administrate-01)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, c / commander)
(n / name, op, "Air")
(n / name, op, "Force")
(o / organization, name, n / name)

Decoded in 227,161 microseconds
Sentence: This person will gain life and death power over crew members and passengers of irregular flights.

Spans:
Span 11-12:  and => and
Span 5-6:  and => and
Span 9-10:  crew => crew
Span 6-7:  death => die-01
Span 3-4:  gain => gain-02
Span 4-5:  life => life
Span 10-11:  members => (have-org-role-91 :ARG2 member)
Span 8-9:  over => over
Span 12-13:  passengers => passenger
Span 1-2:  person => person
Span 7-8:  power => power
Span 0-1:  This => this

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),passengers,passenger,false), Span(11,12,List(1),and,and,false), Span(10,11,List(3, 2),members,(have-org-role-91 :ARG2 member),false), Span(9,10,List(4),crew,crew,false), Span(8,9,List(5),over,over,false), Span(7,8,List(6),power,power,false), Span(6,7,List(7),death,die-01,false), Span(5,6,List(8),and,and,false), Span(4,5,List(9),life,life,false), Span(3,4,List(10),gain,gain-02,false), Span(1,2,List(11),person,person,false), Span(0,1,List(12),This,this,false)),Map(2 -> have-org-role-91, 5 -> over, 12 -> this, 8 -> and, 7 -> die-01, 1 -> and, 4 -> crew, 11 -> person, 6 -> power, 0 -> passenger, 9 -> life, 3 -> member, 10 -> gain-02),Map(h -> have-org-role-91, t -> this, p2 -> power, m -> member, d -> die-01, p -> passenger, g -> gain-02, a -> and, a2 -> and, c -> crew, l -> life, o -> over, p3 -> person))),[Ljava.lang.String;@4b6690c0,Annotation([Ljava.lang.String;@46268f08,[Ljava.lang.String;@2a76840c,[Ljava.lang.String;@71454b9d),Annotation([Ljava.lang.String;@eda25e5,[Ljava.lang.String;@7cf6a5f9,[Ledu.cmu.lti.nlp.amr.Dependency;@623e088f),Annotation([Ljava.lang.String;@39fcbef6,[Ljava.lang.String;@66565121,[Ljava.lang.String;@2fc6f97f),Annotation([Ljava.lang.String;@3d2ee678,[Ljava.lang.String;@6179e425,[Ledu.cmu.lti.nlp.amr.Entity;@35f26e72))
AMR:
(a / and, op, p / passenger)
(a2 / and, op, l / life)
(d / die-01, ARG1, a / and)
(g / gain-02, ARG0, p3 / person)
(g / gain-02, ARG1, p2 / power)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, c / crew)
(h / have-org-role-91, ARG2, m / member)
(o / over, op, a2 / and)
(p2 / power, mod, d / die-01)
(p2 / power, mod, o / over)
(p3 / person, mod, t / this)

Decoded in 450,877 microseconds
Sentence: In 2002 Brazil inaugurated the 1.4 billion dollar SIVAM radar system allowing the government to monitor air activity throughout the expansive Amazon region for the first time.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 5-6:  1.4 => 1.4
Span 1-2:  2002 => (date-entity :year 2002)
Span 17-18:  activity => activity
Span 16-17:  air => air
Span 11-12:  allowing => allow-01
Span 21-22:  Amazon => (world-region :name (name :op "Amazon"))
Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Span 7-8:  dollar => (monetary-quantity :unit dollar)
Span 20-21:  expansive => expansive
Span 13-14:  government => (government-organization :ARG0-of govern-01)
Span 3-4:  inaugurated => inaugurate-02
Span 15-16:  monitor => monitor-01
Span 9-10:  radar => radar
Span 22-23:  region => region
Span 8-9:  SIVAM => (name :op "SIVAM")
Span 10-11:  system => system
Span 18-19:  throughout => throughout
Span 26-27:  time => time

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),time,time,false), Span(22,23,List(1),region,region,false), Span(21,22,List(4, 3, 2),Amazon,(world-region :name (name :op "Amazon")),false), Span(20,21,List(5),expansive,expansive,false), Span(18,19,List(6),throughout,throughout,false), Span(17,18,List(7),activity,activity,false), Span(16,17,List(8),air,air,false), Span(15,16,List(9),monitor,monitor-01,false), Span(13,14,List(11, 10),government,(government-organization :ARG0-of govern-01),false), Span(11,12,List(12),allowing,allow-01,false), Span(10,11,List(13),system,system,false), Span(9,10,List(14),radar,radar,false), Span(8,9,List(16, 15),SIVAM,(name :op "SIVAM"),false), Span(7,8,List(18, 17),dollar,(monetary-quantity :unit dollar),false), Span(5,6,List(19),1.4,1.4,false), Span(3,4,List(20),inaugurated,inaugurate-02,false), Span(2,3,List(23, 22, 21),Brazil,(country :name (name :op "Brazil")),false), Span(1,2,List(25, 24),2002,(date-entity :year 2002),false)),Map(2 -> world-region, 5 -> expansive, 12 -> allow-01, 8 -> air, 15 -> name, 21 -> country, 18 -> dollar, 24 -> date-entity, 7 -> activity, 1 -> region, 17 -> monetary-quantity, 23 -> "Brazil", 4 -> "Amazon", 11 -> govern-01, 14 -> radar, 20 -> inaugurate-02, 6 -> throughout, 9 -> monitor-01, 0 -> time, 22 -> name, 16 -> "SIVAM", 19 -> 1.4, 10 -> government-organization, 3 -> name, 25 -> 2002, 13 -> system),Map(e -> expansive, w -> world-region, n -> name, 2 -> 2002, t -> time, m2 -> monetary-quantity, a3 -> allow-01, s -> system, d -> dollar, m -> monitor-01, 1 -> 1.4, g2 -> govern-01, r2 -> radar, g -> government-organization, n3 -> name, a -> activity, d2 -> date-entity, t2 -> throughout, i -> inaugurate-02, r -> region, a2 -> air, c -> country, n2 -> name))),[Ljava.lang.String;@2d6764b2,Annotation([Ljava.lang.String;@67304a40,[Ljava.lang.String;@49c6c24f,[Ljava.lang.String;@6fe1b4fb),Annotation([Ljava.lang.String;@79351f41,[Ljava.lang.String;@1c32386d,[Ledu.cmu.lti.nlp.amr.Dependency;@6399551e),Annotation([Ljava.lang.String;@13d73fa,[Ljava.lang.String;@5023bb8b,[Ljava.lang.String;@5d5f10b2),Annotation([Ljava.lang.String;@74c79fa2,[Ljava.lang.String;@1e0f9063,[Ledu.cmu.lti.nlp.amr.Entity;@53bd8fca))
AMR:
(a / activity, mod, a2 / air)
(a3 / allow-01, ARG0, s / system)
(a3 / allow-01, ARG1, m / monitor-01)
(c / country, name, n3 / name)
(d2 / date-entity, year, 2 / 2002)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, t / time)
(i / inaugurate-02, ARG0, c / country)
(i / inaugurate-02, ARG1, s / system)
(i / inaugurate-02, ARG6, 1 / 1.4)
(i / inaugurate-02, time, d2 / date-entity)
(m / monitor-01, ARG0, g / government-organization)
(m / monitor-01, ARG1, a / activity)
(m / monitor-01, location, r / region)
(m2 / monetary-quantity, unit, d / dollar)
(n / name, op, "Amazon")
(n2 / name, mod, m2 / monetary-quantity)
(n2 / name, op, "SIVAM")
(n3 / name, op, "Brazil")
(r / region, extent, t2 / throughout)
(r / region, mod, e / expansive)
(r / region, mod, w / world-region)
(s / system, mod, r2 / radar)
(s / system, name, n2 / name)
(w / world-region, name, n / name)

Decoded in 874,428 microseconds
Sentence: The system uses American technology.

NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "American"))
Spans:
Span 3-4:  American => (country :name (name :op "America"))
Span 1-2:  system => system
Span 4-5:  technology => technology
Span 2-3:  uses => use-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),technology,technology,false), Span(3,4,List(3, 2, 1),American,(country :name (name :op "America")),false), Span(2,3,List(4),uses,use-01,false), Span(1,2,List(5),system,system,false)),Map(2 -> name, 5 -> system, 1 -> country, 4 -> use-01, 0 -> technology, 3 -> "America"),Map(n -> name, t -> technology, s -> system, u -> use-01, c -> country))),[Ljava.lang.String;@7642df8f,Annotation([Ljava.lang.String;@3e30646a,[Ljava.lang.String;@5cde6747,[Ljava.lang.String;@63a270c9),Annotation([Ljava.lang.String;@37c7595,[Ljava.lang.String;@3ed242a4,[Ledu.cmu.lti.nlp.amr.Dependency;@1199fe66),Annotation([Ljava.lang.String;@614df0a4,[Ljava.lang.String;@1fdf1c5,[Ljava.lang.String;@2d96543c),Annotation([Ljava.lang.String;@73a2e526,[Ljava.lang.String;@7d64e326,[Ledu.cmu.lti.nlp.amr.Entity;@13f95696))
AMR:
(c / country, name, n / name)
(n / name, op, "America")
(t / technology, mod, c / country)
(u / use-01, ARG0, s / system)
(u / use-01, ARG1, t / technology)

Decoded in 17,147 microseconds
Sentence: Illegal Flights initially declined 30 percent due to trafficker's concerns about improved tracking capabilities but subsequently reaccelerated.

Spans:
Span 4-5:  30 => 30
Span 11-12:  about => about
Span 15-16:  but => contrast-01
Span 14-15:  capabilities => capable-41
Span 10-11:  concerns => concern-01
Span 3-4:  declined => decline-01
Span 0-1:  Illegal => law
Span 12-13:  improved => improve-01
Span 2-3:  initially => initial
Span 5-6:  percent => percentage-entity
Span 17-18:  reaccelerated => reaccelerate-00
Span 16-17:  subsequently => subsequent
Span 13-14:  tracking => track-01
Span 8-9:  trafficker => (person :ARG0-of traffic-00)

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),reaccelerated,reaccelerate-00,false), Span(16,17,List(1),subsequently,subsequent,false), Span(15,16,List(2),but,contrast-01,false), Span(14,15,List(3),capabilities,capable-41,false), Span(13,14,List(4),tracking,track-01,false), Span(12,13,List(5),improved,improve-01,false), Span(11,12,List(6),about,about,false), Span(10,11,List(7),concerns,concern-01,false), Span(8,9,List(9, 8),trafficker,(person :ARG0-of traffic-00),false), Span(5,6,List(10),percent,percentage-entity,false), Span(4,5,List(11),30,30,false), Span(3,4,List(12),declined,decline-01,false), Span(2,3,List(13),initially,initial,false), Span(0,1,List(14),Illegal,law,false)),Map(2 -> contrast-01, 5 -> improve-01, 12 -> decline-01, 8 -> person, 7 -> concern-01, 1 -> subsequent, 4 -> track-01, 11 -> 30, 14 -> law, 6 -> about, 0 -> reaccelerate-00, 9 -> traffic-00, 3 -> capable-41, 10 -> percentage-entity, 13 -> initial),Map(t -> track-01, p2 -> percentage-entity, s -> subsequent, d -> decline-01, p -> person, a -> about, c3 -> concern-01, i2 -> initial, t2 -> traffic-00, r -> reaccelerate-00, i -> improve-01, c -> contrast-01, l -> law, 3 -> 30, c2 -> capable-41))),[Ljava.lang.String;@cd1d761,Annotation([Ljava.lang.String;@68be8808,[Ljava.lang.String;@32193bea,[Ljava.lang.String;@6b8d96d9),Annotation([Ljava.lang.String;@69653e16,[Ljava.lang.String;@758705fa,[Ledu.cmu.lti.nlp.amr.Dependency;@ebaa6cb),Annotation([Ljava.lang.String;@906d29b,[Ljava.lang.String;@49d3c823,[Ljava.lang.String;@436bc36),Annotation([Ljava.lang.String;@5fe1ce85,[Ljava.lang.String;@604c5de8,[Ledu.cmu.lti.nlp.amr.Entity;@37091312))
AMR:
(c / contrast-01, ARG1, d / decline-01)
(c / contrast-01, ARG2, r / reaccelerate-00)
(c2 / capable-41, ARG1, t / track-01)
(c3 / concern-01, ARG1, p / person)
(c3 / concern-01, ARG2, i / improve-01)
(d / decline-01, ARG1, c2 / capable-41)
(d / decline-01, time, a / about)
(d / decline-01, time, i2 / initial)
(i / improve-01, ARG1, c2 / capable-41)
(p2 / percentage-entity, value, 3 / 30)
(r / reaccelerate-00, ARG1, p2 / percentage-entity)
(r / reaccelerate-00, mod, s / subsequent)
(t / track-01, ARG1, l / law)
(t2 / traffic-00, ARG0, p / person)

Decoded in 796,785 microseconds
Sentence: Brazil recorded 4128 unauthorized flights in 2003.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 6-7:  2003 => (date-entity :year 2003)
Span 2-3:  4128 => 4128
Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Span 1-2:  recorded => record-01
Span 3-4:  unauthorized => (authorize-01 :polarity -)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(1, 0),2003,(date-entity :year 2003),false), Span(3,4,List(3, 2),unauthorized,(authorize-01 :polarity -),false), Span(2,3,List(4),4128,4128,false), Span(1,2,List(5),recorded,record-01,false), Span(0,1,List(8, 7, 6),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> authorize-01, 5 -> record-01, 8 -> "Brazil", 7 -> name, 1 -> 2003, 4 -> 4128, 6 -> country, 0 -> date-entity, 3 -> -),Map(n -> name, 2 -> 2003, d -> date-entity, 4 -> 4128, a -> authorize-01, r -> record-01, c -> country))),[Ljava.lang.String;@66fdec9,Annotation([Ljava.lang.String;@57abad67,[Ljava.lang.String;@550a1967,[Ljava.lang.String;@2a640157),Annotation([Ljava.lang.String;@52851b44,[Ljava.lang.String;@584f54e6,[Ledu.cmu.lti.nlp.amr.Dependency;@5d8bafa9),Annotation([Ljava.lang.String;@576f63f6,[Ljava.lang.String;@2dca0d64,[Ljava.lang.String;@f80945f),Annotation([Ljava.lang.String;@ff684e1,[Ljava.lang.String;@23aa363a,[Ledu.cmu.lti.nlp.amr.Entity;@5ef6ae06))
AMR:
(a / authorize-01, ARG1, c / country)
(a / authorize-01, ARG6, 4 / 4128)
(a / authorize-01, polarity, -)
(c / country, name, n / name)
(d / date-entity, year, 2 / 2003)
(n / name, op, "Brazil")
(r / record-01, ARG0, c / country)
(r / record-01, time, d / date-entity)

Decoded in 26,713 microseconds
Sentence: Some of these flights were innocent violations by ranchers in the Amazon flying between plantations.

NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Amazon"))
Spans:
Span 11-12:  Amazon => (world-region :name (name :op "Amazon"))
Span 13-14:  between => between
Span 12-13:  flying => fly-01
Span 5-6:  innocent => innocent-41
Span 14-15:  plantations => plantation
Span 8-9:  ranchers => (person :ARG0-of ranch-01)
Span 0-1:  Some => some
Span 6-7:  violations => violate-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),plantations,plantation,false), Span(13,14,List(1),between,between,false), Span(12,13,List(2),flying,fly-01,false), Span(11,12,List(5, 4, 3),Amazon,(world-region :name (name :op "Amazon")),false), Span(8,9,List(7, 6),ranchers,(person :ARG0-of ranch-01),false), Span(6,7,List(8),violations,violate-01,false), Span(5,6,List(9),innocent,innocent-41,false), Span(0,1,List(10),Some,some,false)),Map(2 -> fly-01, 5 -> "Amazon", 8 -> violate-01, 7 -> ranch-01, 1 -> between, 4 -> name, 6 -> person, 9 -> innocent-41, 0 -> plantation, 10 -> some, 3 -> world-region),Map(n -> name, w -> world-region, b -> between, p2 -> person, s -> some, v -> violate-01, p -> plantation, i -> innocent-41, r -> ranch-01, f -> fly-01))),[Ljava.lang.String;@55dfebeb,Annotation([Ljava.lang.String;@6e35bc3d,[Ljava.lang.String;@1cdc4c27,[Ljava.lang.String;@77b14724),Annotation([Ljava.lang.String;@5d9b7a8a,[Ljava.lang.String;@1e8ce150,[Ledu.cmu.lti.nlp.amr.Dependency;@604f2bd2),Annotation([Ljava.lang.String;@1d3ac898,[Ljava.lang.String;@1b73be9f,[Ljava.lang.String;@628c4ac0),Annotation([Ljava.lang.String;@7b84fcf8,[Ljava.lang.String;@30b19518,[Ledu.cmu.lti.nlp.amr.Entity;@363042d7))
AMR:
(b / between, op, p / plantation)
(f / fly-01, ARG1, b / between)
(f / fly-01, mod, s / some)
(i / innocent-41, ARG1, v / violate-01)
(n / name, op, "Amazon")
(p2 / person, location, w / world-region)
(r / ranch-01, ARG0, p2 / person)
(v / violate-01, ARG0, p2 / person)
(v / violate-01, ARG1, f / fly-01)
(w / world-region, name, n / name)

Decoded in 90,172 microseconds
Sentence: Viegas stated that there was a significant increase in deliberate violations of Brazilian airspace, apparently by drug smugglers realizing that the government was incapable of retaliation.

NER Entity: (person :name (name :op "Viegas"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Viegas"))
Spans:
Span 13-14:  airspace => airspace
Span 15-16:  apparently => apparent
Span 12-13:  Brazilian => (country :name (name :op "Brazil"))
Span 9-10:  deliberate => deliberate
Span 17-18:  drug => drug
Span 22-23:  government => (government-organization :ARG0-of govern-01)
Span 24-25:  incapable => (capable-41 :polarity -)
Span 7-8:  increase => increase-01
Span 19-20:  realizing => realize-01
Span 26-27:  retaliation => retaliate-01
Span 6-7:  significant => significant
Span 18-19:  smugglers => (person :ARG0-of smuggle-01)
Span 1-2:  stated => state-01
Span 0-1:  Viegas => (person :name (name :op "Viegas"))
Span 10-11:  violations => violate-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),retaliation,retaliate-01,false), Span(24,25,List(2, 1),incapable,(capable-41 :polarity -),false), Span(22,23,List(4, 3),government,(government-organization :ARG0-of govern-01),false), Span(19,20,List(5),realizing,realize-01,false), Span(18,19,List(7, 6),smugglers,(person :ARG0-of smuggle-01),false), Span(17,18,List(8),drug,drug,false), Span(15,16,List(9),apparently,apparent,false), Span(13,14,List(10),airspace,airspace,false), Span(12,13,List(13, 12, 11),Brazilian,(country :name (name :op "Brazil")),false), Span(10,11,List(14),violations,violate-01,false), Span(9,10,List(15),deliberate,deliberate,false), Span(7,8,List(16),increase,increase-01,false), Span(6,7,List(17),significant,significant,false), Span(1,2,List(18),stated,state-01,false), Span(0,1,List(21, 20, 19),Viegas,(person :name (name :op "Viegas")),false)),Map(2 -> -, 5 -> realize-01, 12 -> name, 15 -> deliberate, 8 -> drug, 21 -> "Viegas", 18 -> state-01, 7 -> smuggle-01, 17 -> significant, 1 -> capable-41, 4 -> govern-01, 11 -> country, 14 -> violate-01, 20 -> name, 6 -> person, 0 -> retaliate-01, 9 -> apparent, 16 -> increase-01, 19 -> person, 3 -> government-organization, 10 -> airspace, 13 -> "Brazil"),Map(n -> name, s2 -> significant, p2 -> person, s -> smuggle-01, v -> violate-01, d -> drug, g2 -> govern-01, g -> government-organization, r2 -> realize-01, p -> person, a -> apparent, d2 -> deliberate, i -> increase-01, r -> retaliate-01, a2 -> airspace, s3 -> state-01, c -> capable-41, n2 -> name, c2 -> country))),[Ljava.lang.String;@366ac49b,Annotation([Ljava.lang.String;@6ad59d92,[Ljava.lang.String;@56f0cc85,[Ljava.lang.String;@62e20a76),Annotation([Ljava.lang.String;@2cc44ad,[Ljava.lang.String;@44b3606b,[Ledu.cmu.lti.nlp.amr.Dependency;@1477089c),Annotation([Ljava.lang.String;@663411de,[Ljava.lang.String;@63dd899,[Ljava.lang.String;@59d2400d),Annotation([Ljava.lang.String;@75cd8043,[Ljava.lang.String;@33b1c5c5,[Ledu.cmu.lti.nlp.amr.Entity;@5b202a3a))
AMR:
(a2 / airspace, mod, c2 / country)
(c / capable-41, ARG1, g / government-organization)
(c / capable-41, ARG2, r / retaliate-01)
(c / capable-41, polarity, -)
(c2 / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(i / increase-01, ARG1, v / violate-01)
(i / increase-01, ARG2, s2 / significant)
(n / name, op, "Brazil")
(n2 / name, op, "Viegas")
(p2 / person, name, n2 / name)
(r / retaliate-01, ARG1, a / apparent)
(r2 / realize-01, ARG0, p / person)
(r2 / realize-01, ARG1, c / capable-41)
(s / smuggle-01, ARG0, p / person)
(s / smuggle-01, ARG1, d / drug)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, i / increase-01)
(v / violate-01, ARG0, p / person)
(v / violate-01, ARG1, a2 / airspace)
(v / violate-01, mod, d2 / deliberate)

Decoded in 619,114 microseconds
Sentence: 20010400 Rio de Janeiro's most notorious drug boss, Fernandinho Beira-Mar, was captured in Colombia in a guns-for drugs pipeline involving left-wing guerrillas.

mkDayMonthYear(20010400,00,04,2001)
NER Entity: (country :name (name :op "Rio" :op "de" :op "Janeiro"))
NER Entity: (person :name (name :op "Fernandinho" :op "Beira" :op "-" :op "Mar"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Colombia"))
mkDayMonthYear(20010400,00,04,2001)
Spans:
Span 0-1:  20010400 => 2001
Span 8-9:  boss => boss
Span 16-17:  captured => capture-01
Span 18-19:  Colombia => (country :name (name :op "Colombia"))
Span 7-8:  drug => drug
Span 24-25:  drugs => drug
Span 10-14:  Fernandinho Beira - Mar => (name :op "Beira-Mar" :op "Fernandinho")
Span 30-31:  guerrillas => guerrilla
Span 21-22:  guns => gun
Span 26-27:  involving => involve-01
Span 27-28:  left => leave-01
Span 5-6:  most => most
Span 6-7:  notorious => notorious-41
Span 25-26:  pipeline => pipeline
Span 1-4:  Rio de Janeiro => (city :name (name :op "Janeiro" :op "de" :op "Rio"))
Span 29-30:  wing => wing

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),guerrillas,guerrilla,false), Span(29,30,List(1),wing,wing,false), Span(27,28,List(2),left,leave-01,false), Span(26,27,List(3),involving,involve-01,false), Span(25,26,List(4),pipeline,pipeline,false), Span(24,25,List(5),drugs,drug,false), Span(21,22,List(6),guns,gun,false), Span(18,19,List(9, 8, 7),Colombia,(country :name (name :op "Colombia")),false), Span(16,17,List(10),captured,capture-01,false), Span(10,14,List(13, 12, 11),Fernandinho Beira - Mar,(name :op "Beira-Mar" :op "Fernandinho"),false), Span(8,9,List(14),boss,boss,false), Span(7,8,List(15),drug,drug,false), Span(6,7,List(16),notorious,notorious-41,false), Span(5,6,List(17),most,most,false), Span(1,4,List(22, 21, 20, 19, 18),Rio de Janeiro,(city :name (name :op "Janeiro" :op "de" :op "Rio")),false), Span(0,1,List(23),20010400,2001,false)),Map(2 -> leave-01, 5 -> drug, 12 -> "Beira-Mar", 15 -> drug, 8 -> name, 21 -> "de", 18 -> city, 7 -> country, 17 -> most, 1 -> wing, 23 -> 2001, 4 -> pipeline, 11 -> name, 14 -> boss, 20 -> "Janeiro", 6 -> gun, 22 -> "Rio", 0 -> guerrilla, 9 -> "Colombia", 16 -> notorious-41, 19 -> name, 3 -> involve-01, 10 -> capture-01, 13 -> "Fernandinho"),Map(w -> wing, n -> name, 2 -> 2001, b -> boss, n4 -> name, m -> most, d -> drug, g2 -> gun, g -> guerrilla, p -> pipeline, c3 -> city, n3 -> notorious-41, d2 -> drug, i -> involve-01, c -> country, l -> leave-01, c2 -> capture-01, n2 -> name))),[Ljava.lang.String;@10b9db7b,Annotation([Ljava.lang.String;@9ef8eb7,[Ljava.lang.String;@34cdeda2,[Ljava.lang.String;@6ee660fb),Annotation([Ljava.lang.String;@305a0c5f,[Ljava.lang.String;@4535b6d5,[Ledu.cmu.lti.nlp.amr.Dependency;@1ecee32c),Annotation([Ljava.lang.String;@4372b9b6,[Ljava.lang.String;@232a7d73,[Ljava.lang.String;@4b41e4dd),Annotation([Ljava.lang.String;@22ffa91a,[Ljava.lang.String;@74960bfa,[Ledu.cmu.lti.nlp.amr.Entity;@42721fe))
AMR:
(2 / 2001, op, i / involve-01)
(b / boss, mod, d / drug)
(b / boss, name, n2 / name)
(b / boss, poss, c3 / city)
(c / country, name, n / name)
(c2 / capture-01, ARG1, b / boss)
(c2 / capture-01, location, c / country)
(c2 / capture-01, location, p / pipeline)
(c3 / city, name, n4 / name)
(g / guerrilla, mod, w / wing)
(g2 / gun, prep-for, d2 / drug)
(i / involve-01, ARG1, g / guerrilla)
(i / involve-01, ARG2, p / pipeline)
(l / leave-01, ARG1, w / wing)
(n / name, op, "Colombia")
(n2 / name, op, "Beira-Mar")
(n2 / name, op, "Fernandinho")
(n3 / notorious-41, ARG1, b / boss)
(n3 / notorious-41, degree, m / most)
(n4 / name, op, "Janeiro")
(n4 / name, op, "Rio")
(n4 / name, op, "de")
(p / pipeline, mod, g2 / gun)

Decoded in 823,567 microseconds
Sentence: Brazil's northern Amazon corridor has become an increasingly busy and essential route in the global drug trade and is used for smuggling arms, gold and diamonds.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 3-4:  Amazon => (world-region :name (name :op "Amazon"))
Span 26-27:  and => and
Span 18-19:  and => and
Span 10-11:  and => and
Span 23-24:  arms => arm
Span 6-7:  become => become-01
Span 0-1:  Brazil => (country :name (name :op "Brazil"))
Span 9-10:  busy => busy
Span 4-5:  corridor => corridor
Span 27-28:  diamonds => diamond
Span 16-17:  drug => drug
Span 11-12:  essential => essential
Span 15-16:  global => globe
Span 25-26:  gold => gold
Span 8-9:  increasingly => increase-01
Span 2-3:  northern => north
Span 12-13:  route => route-01
Span 22-23:  smuggling => smuggle-01
Span 17-18:  trade => trade-01
Span 20-21:  used => use-01

Langrangian relaxation converged after 81 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),diamonds,diamond,false), Span(26,27,List(1),and,and,false), Span(25,26,List(2),gold,gold,false), Span(23,24,List(3),arms,arm,false), Span(22,23,List(4),smuggling,smuggle-01,false), Span(20,21,List(5),used,use-01,false), Span(18,19,List(6),and,and,false), Span(17,18,List(7),trade,trade-01,false), Span(16,17,List(8),drug,drug,false), Span(15,16,List(9),global,globe,false), Span(12,13,List(10),route,route-01,false), Span(11,12,List(11),essential,essential,false), Span(10,11,List(12),and,and,false), Span(9,10,List(13),busy,busy,false), Span(8,9,List(14),increasingly,increase-01,false), Span(6,7,List(15),become,become-01,false), Span(4,5,List(16),corridor,corridor,false), Span(3,4,List(19, 18, 17),Amazon,(world-region :name (name :op "Amazon")),false), Span(2,3,List(20),northern,north,false), Span(0,1,List(23, 22, 21),Brazil,(country :name (name :op "Brazil")),false)),Map(2 -> gold, 5 -> use-01, 12 -> and, 15 -> become-01, 8 -> drug, 21 -> country, 18 -> name, 7 -> trade-01, 17 -> world-region, 1 -> and, 23 -> "Brazil", 4 -> smuggle-01, 11 -> essential, 14 -> increase-01, 20 -> north, 6 -> and, 22 -> name, 0 -> diamond, 9 -> globe, 16 -> corridor, 19 -> "Amazon", 3 -> arm, 10 -> route-01, 13 -> busy),Map(e -> essential, n -> name, w -> world-region, b -> busy, t -> trade-01, b2 -> become-01, a3 -> and, s -> smuggle-01, d -> diamond, g2 -> globe, g -> gold, n3 -> name, a -> and, d2 -> drug, i -> increase-01, a2 -> arm, r -> route-01, c -> corridor, u -> use-01, c2 -> country, n2 -> north, a4 -> and))),[Ljava.lang.String;@40844aab,Annotation([Ljava.lang.String;@1f6c9cd8,[Ljava.lang.String;@5b619d14,[Ljava.lang.String;@66746f57),Annotation([Ljava.lang.String;@447a020,[Ljava.lang.String;@7f36662c,[Ledu.cmu.lti.nlp.amr.Dependency;@28e8dde3),Annotation([Ljava.lang.String;@6d23017e,[Ljava.lang.String;@54dcfa5a,[Ljava.lang.String;@1817f1eb),Annotation([Ljava.lang.String;@767e20cf,[Ljava.lang.String;@3a3e78f,[Ledu.cmu.lti.nlp.amr.Entity;@301ec38b))
AMR:
(a3 / and, op, b2 / become-01)
(a3 / and, op, d / diamond)
(a3 / and, op, g / gold)
(a4 / and, op, u / use-01)
(b2 / become-01, ARG1, c / corridor)
(b2 / become-01, ARG2, r / route-01)
(c / corridor, mod, n2 / north)
(c / corridor, mod, w / world-region)
(c2 / country, name, n3 / name)
(c2 / country, part, c / corridor)
(i / increase-01, ARG1, e / essential)
(n / name, op, "Amazon")
(n3 / name, op, "Brazil")
(r / route-01, mod, b / busy)
(r / route-01, mod, e / essential)
(s / smuggle-01, ARG1, a3 / and)
(t / trade-01, ARG1, d2 / drug)
(t / trade-01, location, g2 / globe)
(t / trade-01, path, r / route-01)
(u / use-01, ARG0, a / and)
(u / use-01, ARG1, a2 / arm)
(u / use-01, ARG2, s / smuggle-01)
(w / world-region, name, n / name)

Decoded in 2,670,551 microseconds
Sentence: Reportedly one of the most important drug- and gun-smuggling routes in supplying Europe with cocaine runs from Colombia across the northern tier of the Amazon to Suriname.

NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Suriname"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Europe"))
Spans:
Span 21-22:  across => across
Span 27-28:  Amazon => (world-region :name (name :op "Amazon"))
Span 8-9:  and => and
Span 17-18:  cocaine => cocaine
Span 20-21:  Colombia => (country :name (name :op "Colombia"))
Span 6-7:  drug => drug
Span 15-16:  Europe => (continent :name (name :op "Europe"))
Span 9-10:  gun => gun
Span 5-6:  important => important
Span 4-5:  most => most
Span 23-24:  northern => north
Span 1-2:  one => 1
Span 0-1:  Reportedly => report-01
Span 12-13:  routes => route
Span 18-19:  runs => run-04
Span 11-12:  smuggling => smuggle-01
Span 14-15:  supplying => supply-01
Span 29-30:  Suriname => (country :name (name :op "Suriname"))
Span 24-25:  tier => tier

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(2, 1, 0),Suriname,(country :name (name :op "Suriname")),false), Span(27,28,List(5, 4, 3),Amazon,(world-region :name (name :op "Amazon")),false), Span(24,25,List(6),tier,tier,false), Span(23,24,List(7),northern,north,false), Span(21,22,List(8),across,across,false), Span(20,21,List(11, 10, 9),Colombia,(country :name (name :op "Colombia")),false), Span(18,19,List(12),runs,run-04,false), Span(17,18,List(13),cocaine,cocaine,false), Span(15,16,List(16, 15, 14),Europe,(continent :name (name :op "Europe")),false), Span(14,15,List(17),supplying,supply-01,false), Span(12,13,List(18),routes,route,false), Span(11,12,List(19),smuggling,smuggle-01,false), Span(9,10,List(20),gun,gun,false), Span(8,9,List(21),and,and,false), Span(6,7,List(22),drug,drug,false), Span(5,6,List(23),important,important,false), Span(4,5,List(24),most,most,false), Span(1,2,List(25),one,1,false), Span(0,1,List(26),Reportedly,report-01,false)),Map(2 -> "Suriname", 5 -> "Amazon", 12 -> run-04, 8 -> across, 15 -> name, 21 -> and, 18 -> route, 24 -> most, 7 -> north, 1 -> name, 17 -> supply-01, 23 -> important, 26 -> report-01, 4 -> name, 11 -> "Colombia", 14 -> continent, 20 -> gun, 6 -> tier, 9 -> country, 0 -> country, 22 -> drug, 16 -> "Europe", 19 -> smuggle-01, 10 -> name, 3 -> world-region, 25 -> 1, 13 -> cocaine),Map(n -> name, w -> world-region, r3 -> report-01, s2 -> smuggle-01, t -> tier, n4 -> name, c4 -> continent, s -> supply-01, m -> most, d -> drug, 1 -> 1, g -> gun, r2 -> route, n3 -> north, a -> across, c3 -> cocaine, i -> important, a2 -> and, r -> run-04, c -> country, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@17a1e4ca,Annotation([Ljava.lang.String;@10ded6a9,[Ljava.lang.String;@c5dc4a2,[Ljava.lang.String;@4a194c39),Annotation([Ljava.lang.String;@52066604,[Ljava.lang.String;@340b9973,[Ledu.cmu.lti.nlp.amr.Dependency;@56113384),Annotation([Ljava.lang.String;@5669c5fb,[Ljava.lang.String;@373ebf74,[Ljava.lang.String;@5f9678e1),Annotation([Ljava.lang.String;@c4ed84,[Ljava.lang.String;@189aa67a,[Ledu.cmu.lti.nlp.amr.Entity;@5a9d6f02))
AMR:
(a / across, location, t / tier)
(a2 / and, op, d / drug)
(a2 / and, op, g / gun)
(a2 / and, op, r / run-04)
(c / country, name, n / name)
(c2 / country, name, n4 / name)
(c4 / continent, name, n5 / name)
(i / important, degree, m / most)
(i / important, purpose, s / supply-01)
(n / name, op, "Suriname")
(n2 / name, op, "Amazon")
(n4 / name, op, "Colombia")
(n5 / name, op, "Europe")
(r / run-04, ARG1, r2 / route)
(r / run-04, ARG3, c2 / country)
(r / run-04, ARG4, c / country)
(r / run-04, path, a / across)
(r2 / route, mod, s / supply-01)
(r3 / report-01, ARG1, r / run-04)
(r3 / report-01, ARG2, 1 / 1)
(s / supply-01, ARG1, c3 / cocaine)
(s / supply-01, ARG2, c4 / continent)
(s2 / smuggle-01, ARG1, a2 / and)
(t / tier, mod, n3 / north)
(w / world-region, name, n2 / name)
(w / world-region, part, t / tier)

Decoded in 749,420 microseconds
Sentence: Colombia is the only country that currently has a policy of targeting drug trafficking aircraft.

NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Colombia"))
Spans:
Span 14-15:  aircraft => aircraft
Span 0-1:  Colombia => (country :name (name :op "Colombia"))
Span 4-5:  country => country
Span 6-7:  currently => current
Span 12-13:  drug => drug
Span 3-4:  only => only
Span 9-10:  policy => policy
Span 11-12:  targeting => target-01
Span 13-14:  trafficking => traffic-00

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),aircraft,aircraft,false), Span(13,14,List(1),trafficking,traffic-00,false), Span(12,13,List(2),drug,drug,false), Span(11,12,List(3),targeting,target-01,false), Span(9,10,List(4),policy,policy,false), Span(6,7,List(5),currently,current,false), Span(4,5,List(6),country,country,false), Span(3,4,List(7),only,only,false), Span(0,1,List(10, 9, 8),Colombia,(country :name (name :op "Colombia")),false)),Map(2 -> drug, 5 -> current, 8 -> country, 7 -> only, 1 -> traffic-00, 4 -> policy, 6 -> country, 9 -> name, 0 -> aircraft, 10 -> "Colombia", 3 -> target-01),Map(n -> name, t -> traffic-00, d -> drug, p -> policy, c3 -> country, a -> aircraft, t2 -> target-01, c -> current, o -> only, c2 -> country))),[Ljava.lang.String;@362045c0,Annotation([Ljava.lang.String;@112f364d,[Ljava.lang.String;@5ccbeb64,[Ljava.lang.String;@6d9f7a80),Annotation([Ljava.lang.String;@59252cb6,[Ljava.lang.String;@31d0e481,[Ledu.cmu.lti.nlp.amr.Dependency;@3243b914),Annotation([Ljava.lang.String;@241e8ea6,[Ljava.lang.String;@542e560f,[Ljava.lang.String;@626c44e7),Annotation([Ljava.lang.String;@4dc8caa7,[Ljava.lang.String;@1d730606,[Ledu.cmu.lti.nlp.amr.Entity;@3bcbb589))
AMR:
(c / current, calendar, c2 / country)
(c2 / country, domain, c3 / country)
(c2 / country, mod, o / only)
(c3 / country, name, n / name)
(n / name, op, "Colombia")
(p / policy, poss, c2 / country)
(t / traffic-00, ARG0, a / aircraft)
(t / traffic-00, ARG1, d / drug)
(t2 / target-01, ARG1, a / aircraft)
(t2 / target-01, consist, p / policy)

Decoded in 239,755 microseconds
Sentence: Colombia is the source of much of the cocaine and heroin sold in the United States.

NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Colombia"))
Spans:
Span 9-10:  and => and
Span 8-9:  cocaine => cocaine
Span 0-1:  Colombia => (country :name (name :op "Colombia"))
Span 10-11:  heroin => heroin
Span 5-6:  much => much
Span 11-12:  sold => sell-01
Span 3-4:  source => source
Span 14-16:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(3, 2, 1, 0),United States,(country :name (name :op "United" :op "States")),false), Span(11,12,List(4),sold,sell-01,false), Span(10,11,List(5),heroin,heroin,false), Span(9,10,List(6),and,and,false), Span(8,9,List(7),cocaine,cocaine,false), Span(5,6,List(8),much,much,false), Span(3,4,List(9),source,source,false), Span(0,1,List(12, 11, 10),Colombia,(country :name (name :op "Colombia")),false)),Map(2 -> "United", 5 -> heroin, 12 -> "Colombia", 8 -> much, 7 -> cocaine, 1 -> name, 4 -> sell-01, 11 -> name, 6 -> and, 0 -> country, 9 -> source, 3 -> "States", 10 -> country),Map(n -> name, h -> heroin, s2 -> source, s -> sell-01, m -> much, c3 -> country, a -> and, c -> country, n2 -> name, c2 -> cocaine))),[Ljava.lang.String;@3b00856b,Annotation([Ljava.lang.String;@3016fd5e,[Ljava.lang.String;@35d08e6c,[Ljava.lang.String;@53d102a2),Annotation([Ljava.lang.String;@6c45ee6e,[Ljava.lang.String;@6b3e12b5,[Ledu.cmu.lti.nlp.amr.Dependency;@5aac4250),Annotation([Ljava.lang.String;@1338fb5,[Ljava.lang.String;@42463763,[Ljava.lang.String;@59f63e24),Annotation([Ljava.lang.String;@61f05988,[Ljava.lang.String;@7ca33c24,[Ledu.cmu.lti.nlp.amr.Entity;@fade1fc))
AMR:
(a / and, op, c2 / cocaine)
(a / and, op, h / heroin)
(a / and, quant, m / much)
(c / country, name, n / name)
(c3 / country, name, n2 / name)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Colombia")
(s / sell-01, ARG0, c3 / country)
(s / sell-01, ARG1, h / heroin)
(s / sell-01, location, c / country)
(s2 / source, domain, c3 / country)

Decoded in 239,177 microseconds
Sentence: 2005-07-16

mkDayMonthYear(2005-07-16,16,07,2005)
mkDayMonthYear(2005-07-16,16,07,2005)
Spans:
Span 0-1:  2005-07-16 => (date-entity :day 16 :month 7 :year 2005)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2005-07-16,(date-entity :day 16 :month 7 :year 2005),false)),Map(2 -> 7, 1 -> 16, 0 -> date-entity, 3 -> 2005),Map(2 -> 2005, 7 -> 7, d -> date-entity, 1 -> 16))),[Ljava.lang.String;@67c2e933,Annotation([Ljava.lang.String;@41dd05a,[Ljava.lang.String;@613a8ee1,[Ljava.lang.String;@178213b),Annotation([Ljava.lang.String;@7103cb56,[Ljava.lang.String;@1b765a2c,[Ledu.cmu.lti.nlp.amr.Dependency;@2e8e8225),Annotation([Ljava.lang.String;@6ebf0f36,[Ljava.lang.String;@18920cc,[Ljava.lang.String;@2807bdeb),Annotation([Ljava.lang.String;@72c28d64,[Ljava.lang.String;@6492fab5,[Ledu.cmu.lti.nlp.amr.Entity;@2c5529ab))
AMR:
(d / date-entity, day, 1 / 16)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2005)

Decoded in 7,660 microseconds
Sentence: Venezuela (VE)

NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 0-1:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false)),Map(2 -> "Venezuela", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@39a8312f,Annotation([Ljava.lang.String;@5f6722d3,[Ljava.lang.String;@2c532cd8,[Ljava.lang.String;@294e5088),Annotation([Ljava.lang.String;@51972dc7,[Ljava.lang.String;@3700ec9c,[Ledu.cmu.lti.nlp.amr.Dependency;@2002348),Annotation([Ljava.lang.String;@5911e990,[Ljava.lang.String;@31000e60,[Ljava.lang.String;@1d470d0),Annotation([Ljava.lang.String;@24d09c1,[Ljava.lang.String;@54c62d71,[Ledu.cmu.lti.nlp.amr.Entity;@65045a87))
AMR:
(c / country, name, n / name)
(n / name, op, "Venezuela")

Decoded in 4,910 microseconds
Sentence: International; weapons; leader; military

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 0-1:  International => international
Span 4-5:  leader => (person :ARG0-of lead-02)
Span 6-7:  military => military
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),military,military,false), Span(5,6,List(1),;,and,false), Span(4,5,List(3, 2),leader,(person :ARG0-of lead-02),false), Span(3,4,List(4),;,and,false), Span(2,3,List(5),weapons,weapon,false), Span(1,2,List(6),;,and,false), Span(0,1,List(7),International,international,false)),Map(2 -> person, 5 -> weapon, 7 -> international, 1 -> and, 4 -> and, 6 -> and, 0 -> military, 3 -> lead-02),Map(w -> weapon, a3 -> and, m -> military, p -> person, a -> and, i -> international, a2 -> and, l -> lead-02))),[Ljava.lang.String;@47f4e407,Annotation([Ljava.lang.String;@2d1dee39,[Ljava.lang.String;@48d5f34e,[Ljava.lang.String;@fc258b1),Annotation([Ljava.lang.String;@6ff65192,[Ljava.lang.String;@2dd80673,[Ledu.cmu.lti.nlp.amr.Dependency;@4af0df05),Annotation([Ljava.lang.String;@57ea113a,[Ljava.lang.String;@acdb094,[Ljava.lang.String;@674bd420),Annotation([Ljava.lang.String;@2b0f373b,[Ljava.lang.String;@2ceb80a1,[Ledu.cmu.lti.nlp.amr.Entity;@4b45dcb8))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, m / military)
(a3 / and, op, a2 / and)
(a3 / and, op, i / international)
(a3 / and, op, p / person)
(a3 / and, op, w / weapon)
(l / lead-02, ARG0, p / person)

Decoded in 28,819 microseconds
Sentence: The Venezuelan president's weapons deals with Russia, curbs on military cooperation with the United States, and his plans to train as many as 2 million Venezuelan civilians to repel a possible invasion by superpowers have the US and his domestic critics worried.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Venezuelan"))
Spans:
Span 26-27:  2 => 2
Span 40-41:  and => and
Span 18-19:  and => and
Span 29-30:  civilians => civilian
Span 12-13:  cooperation => cooperate-01
Span 43-44:  critics => (person :ARG0-of criticize-01)
Span 9-10:  curbs => curb-01
Span 5-6:  deals => deal-01
Span 42-43:  domestic => domestic
Span 34-35:  invasion => invade-01
Span 24-25:  many => many
Span 11-12:  military => military
Span 20-21:  plans => plan-01
Span 33-34:  possible => possible
Span 2-3:  president => president
Span 31-32:  repel => repel-01
Span 7-8:  Russia => (country :name (name :op "Russia"))
Span 36-37:  superpowers => superpower
Span 22-23:  train => train-01
Span 15-17:  United States => (country :name (name :op "United" :op "States"))
Span 39-40:  US => (country :name (name :op "US"))
Span 28-29:  Venezuelan => (country :name (name :op "Venezuela"))
Span 1-2:  Venezuelan => (country :name (name :op "Venezuela"))
Span 4-5:  weapons => weapon
Span 44-45:  worried => worry-02

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),worried,worry-02,false), Span(43,44,List(2, 1),critics,(person :ARG0-of criticize-01),false), Span(42,43,List(3),domestic,domestic,false), Span(40,41,List(4),and,and,false), Span(39,40,List(7, 6, 5),US,(country :name (name :op "US")),false), Span(36,37,List(8),superpowers,superpower,false), Span(34,35,List(9),invasion,invade-01,false), Span(33,34,List(10),possible,possible,false), Span(31,32,List(11),repel,repel-01,false), Span(29,30,List(12),civilians,civilian,false), Span(28,29,List(15, 14, 13),Venezuelan,(country :name (name :op "Venezuela")),false), Span(26,27,List(16),2,2,false), Span(24,25,List(17),many,many,false), Span(22,23,List(18),train,train-01,false), Span(20,21,List(19),plans,plan-01,false), Span(18,19,List(20),and,and,false), Span(15,17,List(24, 23, 22, 21),United States,(country :name (name :op "United" :op "States")),false), Span(12,13,List(25),cooperation,cooperate-01,false), Span(11,12,List(26),military,military,false), Span(9,10,List(27),curbs,curb-01,false), Span(7,8,List(30, 29, 28),Russia,(country :name (name :op "Russia")),false), Span(5,6,List(31),deals,deal-01,false), Span(4,5,List(32),weapons,weapon,false), Span(2,3,List(33),president,president,false), Span(1,2,List(36, 35, 34),Venezuelan,(country :name (name :op "Venezuela")),false)),Map(30 -> "Russia", 2 -> criticize-01, 5 -> country, 33 -> president, 27 -> curb-01, 12 -> civilian, 8 -> superpower, 15 -> "Venezuela", 36 -> "Venezuela", 21 -> country, 18 -> train-01, 24 -> "States", 35 -> name, 7 -> "US", 1 -> person, 17 -> many, 23 -> "United", 26 -> military, 4 -> and, 11 -> repel-01, 32 -> weapon, 14 -> name, 29 -> name, 20 -> and, 34 -> country, 28 -> country, 6 -> name, 9 -> invade-01, 0 -> worry-02, 22 -> name, 16 -> 2, 19 -> plan-01, 10 -> possible, 3 -> domestic, 31 -> deal-01, 25 -> cooperate-01, 13 -> country),Map(n -> name, w -> worry-02, c8 -> country, 2 -> 2, t -> train-01, m2 -> military, c7 -> curb-01, p2 -> possible, n4 -> name, c4 -> country, s -> superpower, d -> domestic, m -> many, p -> person, c3 -> civilian, a -> and, n3 -> name, p4 -> president, d2 -> deal-01, c6 -> cooperate-01, c9 -> country, w2 -> weapon, r -> repel-01, i -> invade-01, a2 -> and, c -> criticize-01, p3 -> plan-01, c2 -> country, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@7216fb24,Annotation([Ljava.lang.String;@2072acb2,[Ljava.lang.String;@50ecde95,[Ljava.lang.String;@35a9782c),Annotation([Ljava.lang.String;@70a36a66,[Ljava.lang.String;@45815ffc,[Ledu.cmu.lti.nlp.amr.Dependency;@732f29af),Annotation([Ljava.lang.String;@d3957fe,[Ljava.lang.String;@6622fc65,[Ljava.lang.String;@299321e2),Annotation([Ljava.lang.String;@23fb172e,[Ljava.lang.String;@64ba3208,[Ledu.cmu.lti.nlp.amr.Entity;@158a3b2e))
AMR:
(a / and, op, c2 / country)
(a / and, op, c7 / curb-01)
(a / and, op, d2 / deal-01)
(a / and, op, p / person)
(a / and, op, p3 / plan-01)
(a2 / and, op, p / person)
(c / criticize-01, ARG0, p / person)
(c / criticize-01, ARG1, m / many)
(c2 / country, name, n / name)
(c3 / civilian, mod, c4 / country)
(c3 / civilian, mod, c9 / country)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c6 / cooperate-01, ARG0, c5 / country)
(c6 / cooperate-01, ARG1, c8 / country)
(c6 / cooperate-01, mod, m2 / military)
(c7 / curb-01, ARG0, p4 / president)
(c7 / curb-01, ARG1, c6 / cooperate-01)
(c8 / country, name, n4 / name)
(c9 / country, name, n5 / name)
(d2 / deal-01, ARG1, w2 / weapon)
(i / invade-01, ARG0, s / superpower)
(i / invade-01, ARG1, 2 / 2)
(i / invade-01, mod, p2 / possible)
(n / name, op, "US")
(n2 / name, op, "Venezuela")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "Russia")
(n5 / name, op, "Venezuela")
(p / person, mod, d / domestic)
(p3 / plan-01, ARG1, t / train-01)
(r / repel-01, ARG1, i / invade-01)
(t / train-01, ARG1, r / repel-01)
(t / train-01, ARG2, c3 / civilian)
(w / worry-02, ARG1, a2 / and)

Decoded in 2,725,295 microseconds
Sentence: Venezuelan president Hugo Chavez's weapons deals with Russia, curbs on military cooperation with the United States, and plans to train as many as 2 million Venezuelan civilians to repel a possible invasion by imperialist superpowers have the United States and Chavez's domestic critics worried about what the leftist former military officer is planning.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (person :name (name :op "Hugo" :op "Chavez"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Venezuelan"))
Spans:
Span 26-27:  2 => 2
Span 48-49:  about => about
Span 42-43:  and => and
Span 19-20:  and => and
Span 43-44:  Chavez => (person :name (name :op "Chavez"))
Span 29-30:  civilians => civilian
Span 13-14:  cooperation => cooperate-01
Span 46-47:  critics => (person :ARG0-of criticize-01)
Span 10-11:  curbs => curb-01
Span 6-7:  deals => deal-01
Span 45-46:  domestic => domestic
Span 52-53:  former => former
Span 2-4:  Hugo Chavez => (person :name (name :op "Chavez" :op "Hugo"))
Span 36-37:  imperialist => imperialism
Span 34-35:  invasion => invade-01
Span 51-52:  leftist => leftist
Span 24-25:  many => many
Span 53-54:  military => military
Span 12-13:  military => military
Span 54-55:  officer => (have-org-role-91 :ARG2 officer)
Span 56-57:  planning => plan-01
Span 20-21:  plans => plan-01
Span 33-34:  possible => possible
Span 1-2:  president => president
Span 31-32:  repel => repel-01
Span 8-9:  Russia => (country :name (name :op "Russia"))
Span 37-38:  superpowers => superpower
Span 22-23:  train => train-01
Span 40-42:  United States => (country :name (name :op "United" :op "States"))
Span 16-18:  United States => (country :name (name :op "United" :op "States"))
Span 28-29:  Venezuelan => (country :name (name :op "Venezuela"))
Span 0-1:  Venezuelan => (country :name (name :op "Venezuela"))
Span 5-6:  weapons => weapon
Span 47-48:  worried => worry-02

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(56,57,List(0),planning,plan-01,false), Span(54,55,List(2, 1),officer,(have-org-role-91 :ARG2 officer),false), Span(53,54,List(3),military,military,false), Span(52,53,List(4),former,former,false), Span(51,52,List(5),leftist,leftist,false), Span(48,49,List(6),about,about,false), Span(47,48,List(7),worried,worry-02,false), Span(46,47,List(9, 8),critics,(person :ARG0-of criticize-01),false), Span(45,46,List(10),domestic,domestic,false), Span(43,44,List(13, 12, 11),Chavez,(person :name (name :op "Chavez")),false), Span(42,43,List(14),and,and,false), Span(40,42,List(18, 17, 16, 15),United States,(country :name (name :op "United" :op "States")),false), Span(37,38,List(19),superpowers,superpower,false), Span(36,37,List(20),imperialist,imperialism,false), Span(34,35,List(21),invasion,invade-01,false), Span(33,34,List(22),possible,possible,false), Span(31,32,List(23),repel,repel-01,false), Span(29,30,List(24),civilians,civilian,false), Span(28,29,List(27, 26, 25),Venezuelan,(country :name (name :op "Venezuela")),false), Span(26,27,List(28),2,2,false), Span(24,25,List(29),many,many,false), Span(22,23,List(30),train,train-01,false), Span(20,21,List(31),plans,plan-01,false), Span(19,20,List(32),and,and,false), Span(16,18,List(36, 35, 34, 33),United States,(country :name (name :op "United" :op "States")),false), Span(13,14,List(37),cooperation,cooperate-01,false), Span(12,13,List(38),military,military,false), Span(10,11,List(39),curbs,curb-01,false), Span(8,9,List(42, 41, 40),Russia,(country :name (name :op "Russia")),false), Span(6,7,List(43),deals,deal-01,false), Span(5,6,List(44),weapons,weapon,false), Span(2,4,List(48, 47, 46, 45),Hugo Chavez,(person :name (name :op "Chavez" :op "Hugo")),false), Span(1,2,List(49),president,president,false), Span(0,1,List(52, 51, 50),Venezuelan,(country :name (name :op "Venezuela")),false)),Map(30 -> train-01, 39 -> curb-01, 45 -> person, 51 -> name, 2 -> officer, 5 -> leftist, 48 -> "Hugo", 33 -> country, 27 -> "Venezuela", 12 -> name, 8 -> person, 15 -> country, 42 -> "Russia", 36 -> "States", 21 -> invade-01, 18 -> "States", 24 -> civilian, 35 -> "United", 41 -> name, 7 -> worry-02, 17 -> "United", 1 -> have-org-role-91, 50 -> country, 44 -> weapon, 23 -> repel-01, 38 -> military, 47 -> "Chavez", 4 -> former, 26 -> name, 11 -> person, 32 -> and, 14 -> and, 20 -> imperialism, 29 -> many, 46 -> name, 52 -> "Venezuela", 34 -> name, 6 -> about, 28 -> 2, 40 -> country, 49 -> president, 0 -> plan-01, 9 -> criticize-01, 43 -> deal-01, 22 -> possible, 16 -> name, 37 -> cooperate-01, 19 -> superpower, 3 -> military, 10 -> domestic, 25 -> country, 31 -> plan-01, 13 -> "Chavez"),Map(m3 -> military, n -> name, w -> worry-02, c8 -> country, h -> have-org-role-91, 2 -> 2, p5 -> plan-01, t -> train-01, m2 -> many, n7 -> name, c7 -> curb-01, p2 -> person, n4 -> name, a3 -> and, c4 -> country, s -> superpower, d -> domestic, m -> military, p -> plan-01, a -> about, c3 -> civilian, n3 -> name, p4 -> possible, n6 -> name, d2 -> deal-01, p7 -> president, c6 -> cooperate-01, c9 -> country, i2 -> invade-01, w2 -> weapon, a2 -> and, i -> imperialism, r -> repel-01, c -> criticize-01, p6 -> person, l -> leftist, f -> former, o -> officer, p3 -> person, c2 -> country, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@25a6944c,Annotation([Ljava.lang.String;@5e1fa5b1,[Ljava.lang.String;@6b00f608,[Ljava.lang.String;@2f17e30d),Annotation([Ljava.lang.String;@3e821657,[Ljava.lang.String;@1d131e1b,[Ledu.cmu.lti.nlp.amr.Dependency;@71cf1b07),Annotation([Ljava.lang.String;@615091b8,[Ljava.lang.String;@4fce136b,[Ljava.lang.String;@4aa83f4f),Annotation([Ljava.lang.String;@43b6123e,[Ljava.lang.String;@260e86a1,[Ledu.cmu.lti.nlp.amr.Entity;@19648c40))
AMR:
(a / about, op, p / plan-01)
(a2 / and, op, c2 / country)
(a2 / and, op, c7 / curb-01)
(a2 / and, op, d2 / deal-01)
(a3 / and, op, c5 / country)
(a3 / and, op, p2 / person)
(a3 / and, op, p5 / plan-01)
(c / criticize-01, ARG0, p2 / person)
(c / criticize-01, ARG1, p3 / person)
(c2 / country, name, n2 / name)
(c3 / civilian, mod, c4 / country)
(c4 / country, name, n3 / name)
(c5 / country, name, n4 / name)
(c6 / cooperate-01, mod, m / military)
(c6 / cooperate-01, mod, m3 / military)
(c7 / curb-01, ARG1, c6 / cooperate-01)
(c8 / country, name, n5 / name)
(c9 / country, name, n7 / name)
(d2 / deal-01, ARG0, p7 / president)
(d2 / deal-01, ARG1, w2 / weapon)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, o / officer)
(h / have-org-role-91, mod, l / leftist)
(i2 / invade-01, ARG0, s / superpower)
(i2 / invade-01, ARG1, 2 / 2)
(i2 / invade-01, mod, p4 / possible)
(n / name, op, "Chavez")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "Venezuela")
(n4 / name, op, "States")
(n4 / name, op, "United")
(n5 / name, op, "Russia")
(n6 / name, op, "Chavez")
(n6 / name, op, "Hugo")
(n7 / name, op, "Venezuela")
(p / plan-01, ARG0, p6 / person)
(p / plan-01, ARG1, t / train-01)
(p / plan-01, ARG6, f / former)
(p2 / person, mod, d / domestic)
(p3 / person, name, n / name)
(p5 / plan-01, ARG0, w2 / weapon)
(p5 / plan-01, ARG1, t / train-01)
(p6 / person, name, n6 / name)
(p7 / president, location, c8 / country)
(p7 / president, mod, c9 / country)
(r / repel-01, ARG1, i2 / invade-01)
(s / superpower, mod, i / imperialism)
(t / train-01, ARG1, r / repel-01)
(t / train-01, ARG2, c3 / civilian)
(t / train-01, ARG6, m2 / many)
(w / worry-02, ARG1, a3 / and)

Decoded in 5,885,365 microseconds
Sentence: Chavez insists that the moves are purely defensive and born of an overdue need to update obsolete military hardware and protect Venezuela from nations that might want to take control of Venezuela.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 19-20:  and => and
Span 8-9:  and => and
Span 9-10:  born => bear-02
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 29-30:  control => control-01
Span 7-8:  defensive => defend-01
Span 18-19:  hardware => hardware
Span 1-2:  insists => insist-01
Span 17-18:  military => military
Span 4-5:  moves => move-02
Span 23-24:  nations => nation
Span 13-14:  need => need-01
Span 16-17:  obsolete => obsolete
Span 12-13:  overdue => overdue
Span 20-21:  protect => protect-01
Span 6-7:  purely => pure
Span 28-29:  take => take-01
Span 15-16:  update => update-01
Span 31-32:  Venezuela => (country :name (name :op "Venezuela"))
Span 21-22:  Venezuela => (country :name (name :op "Venezuela"))
Span 26-27:  want => want-01

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(29,30,List(3),control,control-01,false), Span(28,29,List(4),take,take-01,false), Span(26,27,List(5),want,want-01,false), Span(23,24,List(6),nations,nation,false), Span(21,22,List(9, 8, 7),Venezuela,(country :name (name :op "Venezuela")),false), Span(20,21,List(10),protect,protect-01,false), Span(19,20,List(11),and,and,false), Span(18,19,List(12),hardware,hardware,false), Span(17,18,List(13),military,military,false), Span(16,17,List(14),obsolete,obsolete,false), Span(15,16,List(15),update,update-01,false), Span(13,14,List(16),need,need-01,false), Span(12,13,List(17),overdue,overdue,false), Span(9,10,List(18),born,bear-02,false), Span(8,9,List(19),and,and,false), Span(7,8,List(20),defensive,defend-01,false), Span(6,7,List(21),purely,pure,false), Span(4,5,List(22),moves,move-02,false), Span(1,2,List(23),insists,insist-01,false), Span(0,1,List(26, 25, 24),Chavez,(person :name (name :op "Chavez")),false)),Map(2 -> "Venezuela", 5 -> want-01, 12 -> hardware, 8 -> name, 15 -> update-01, 21 -> pure, 18 -> bear-02, 24 -> person, 7 -> country, 1 -> name, 17 -> overdue, 23 -> insist-01, 26 -> "Chavez", 4 -> take-01, 11 -> and, 14 -> obsolete, 20 -> defend-01, 6 -> nation, 9 -> "Venezuela", 0 -> country, 22 -> move-02, 16 -> need-01, 19 -> and, 10 -> protect-01, 3 -> control-01, 25 -> name, 13 -> military),Map(n -> name, w -> want-01, h -> hardware, b -> bear-02, t -> take-01, m2 -> move-02, p2 -> pure, n4 -> need-01, d -> defend-01, m -> military, p -> protect-01, c3 -> country, n3 -> name, a -> and, o2 -> overdue, i -> insist-01, a2 -> and, c -> country, u -> update-01, o -> obsolete, p3 -> person, c2 -> control-01, n2 -> nation, n5 -> name))),[Ljava.lang.String;@12bd8a64,Annotation([Ljava.lang.String;@61e94def,[Ljava.lang.String;@3300f4fd,[Ljava.lang.String;@ebb6851),Annotation([Ljava.lang.String;@70ab2d48,[Ljava.lang.String;@5b068087,[Ledu.cmu.lti.nlp.amr.Dependency;@6f152006),Annotation([Ljava.lang.String;@3a393455,[Ljava.lang.String;@13518f37,[Ljava.lang.String;@7cbc3762),Annotation([Ljava.lang.String;@3a6f2de3,[Ljava.lang.String;@49872d67,[Ledu.cmu.lti.nlp.amr.Entity;@56303b57))
AMR:
(a / and, op, p / protect-01)
(a / and, op, u / update-01)
(a2 / and, op, b / bear-02)
(b / bear-02, ARG0, n4 / need-01)
(b / bear-02, ARG1, m2 / move-02)
(c / country, name, n / name)
(c2 / control-01, ARG0, n2 / nation)
(c2 / control-01, ARG1, c / country)
(c3 / country, name, n3 / name)
(d / defend-01, ARG1, m2 / move-02)
(d / defend-01, mod, p2 / pure)
(h / hardware, mod, m / military)
(i / insist-01, ARG0, p3 / person)
(i / insist-01, ARG1, a2 / and)
(m2 / move-02, ARG1, o / obsolete)
(n / name, op, "Venezuela")
(n3 / name, op, "Venezuela")
(n4 / need-01, ARG1, a / and)
(n4 / need-01, mod, o2 / overdue)
(n5 / name, op, "Chavez")
(p / protect-01, ARG1, c3 / country)
(p / protect-01, ARG2, n2 / nation)
(p3 / person, name, n5 / name)
(t / take-01, ARG1, c2 / control-01)
(u / update-01, ARG1, h / hardware)
(w / want-01, ARG0, n2 / nation)
(w / want-01, ARG1, c2 / control-01)

Decoded in 2,067,783 microseconds
Sentence: Venezuela is South America's largest petroleum-producing state.

NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "South" :op "America"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 5-6:  largest => (large :degree most)
Span 6-7:  petroleum => petroleum
Span 8-9:  producing => produce-01
Span 2-4:  South America => (country :name (name :op "South" :op "America"))
Span 9-10:  state => state
Span 0-1:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),state,state,false), Span(8,9,List(1),producing,produce-01,false), Span(6,7,List(2),petroleum,petroleum,false), Span(5,6,List(4, 3),largest,(large :degree most),false), Span(2,4,List(8, 7, 6, 5),South America,(country :name (name :op "South" :op "America")),false), Span(0,1,List(11, 10, 9),Venezuela,(country :name (name :op "Venezuela")),false)),Map(2 -> petroleum, 5 -> country, 8 -> "America", 7 -> "South", 1 -> produce-01, 11 -> "Venezuela", 4 -> most, 6 -> name, 9 -> country, 0 -> state, 10 -> name, 3 -> large),Map(n -> name, p2 -> petroleum, s -> state, m -> most, p -> produce-01, c -> country, l -> large, n2 -> name, c2 -> country))),[Ljava.lang.String;@4b2a01d4,Annotation([Ljava.lang.String;@8692d67,[Ljava.lang.String;@78f5c518,[Ljava.lang.String;@2f48b3d2),Annotation([Ljava.lang.String;@34f7234e,[Ljava.lang.String;@753432a2,[Ledu.cmu.lti.nlp.amr.Dependency;@23bff419),Annotation([Ljava.lang.String;@4983159f,[Ljava.lang.String;@44e3a2b2,[Ljava.lang.String;@101639ae),Annotation([Ljava.lang.String;@4c550889,[Ljava.lang.String;@1d2bd371,[Ledu.cmu.lti.nlp.amr.Entity;@44040454))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(l / large, degree, m / most)
(l / large, domain, s / state)
(n / name, op, "America")
(n / name, op, "South")
(n2 / name, op, "Venezuela")
(p / produce-01, ARG0, s / state)
(p / produce-01, ARG1, p2 / petroleum)
(p / produce-01, compared-to, c / country)
(s / state, domain, c2 / country)

Decoded in 214,900 microseconds
Sentence: Chavez's domestic opponents scoff at the idea that the US would ever invade Venezuela and charge that Chavez's true intention is to arm a huge cadre of loyal reservists who would protect Chavez against any internal uprising and to pose as a militarized counterweight to US influence in Latin America.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 39-40:  and => and
Span 15-16:  and => and
Span 36-37:  any => any
Span 24-25:  arm => arm-01
Span 27-28:  cadre => cadre
Span 16-17:  charge => charge-05
Span 34-35:  Chavez => (person :name (name :op "Chavez"))
Span 18-19:  Chavez => (person :name (name :op "Chavez"))
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 45-46:  counterweight => counterweight
Span 2-3:  domestic => domestic
Span 12-13:  ever => ever
Span 26-27:  huge => huge
Span 7-8:  idea => idea
Span 48-49:  influence => influence-01
Span 21-22:  intention => intend-01
Span 37-38:  internal => internal
Span 13-14:  invade => invade-01
Span 50-52:  Latin America => (country :name (name :op "Latin" :op "America"))
Span 29-30:  loyal => loyal-41
Span 44-45:  militarized => militarize-00
Span 3-4:  opponents => (person :ARG0-of oppose-01)
Span 41-42:  pose => pose-02
Span 33-34:  protect => protect-01
Span 30-31:  reservists => reservist
Span 4-5:  scoff => scoff-01
Span 20-21:  true => true
Span 38-39:  uprising => uprise-00
Span 47-48:  US => (country :name (name :op "US"))
Span 10-11:  US => (country :name (name :op "US"))
Span 14-15:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(50,52,List(3, 2, 1, 0),Latin America,(country :name (name :op "Latin" :op "America")),false), Span(48,49,List(4),influence,influence-01,false), Span(47,48,List(7, 6, 5),US,(country :name (name :op "US")),false), Span(45,46,List(8),counterweight,counterweight,false), Span(44,45,List(9),militarized,militarize-00,false), Span(41,42,List(10),pose,pose-02,false), Span(39,40,List(11),and,and,false), Span(38,39,List(12),uprising,uprise-00,false), Span(37,38,List(13),internal,internal,false), Span(36,37,List(14),any,any,false), Span(34,35,List(17, 16, 15),Chavez,(person :name (name :op "Chavez")),false), Span(33,34,List(18),protect,protect-01,false), Span(30,31,List(19),reservists,reservist,false), Span(29,30,List(20),loyal,loyal-41,false), Span(27,28,List(21),cadre,cadre,false), Span(26,27,List(22),huge,huge,false), Span(24,25,List(23),arm,arm-01,false), Span(21,22,List(24),intention,intend-01,false), Span(20,21,List(25),true,true,false), Span(18,19,List(28, 27, 26),Chavez,(person :name (name :op "Chavez")),false), Span(16,17,List(29),charge,charge-05,false), Span(15,16,List(30),and,and,false), Span(14,15,List(33, 32, 31),Venezuela,(country :name (name :op "Venezuela")),false), Span(13,14,List(34),invade,invade-01,false), Span(12,13,List(35),ever,ever,false), Span(10,11,List(38, 37, 36),US,(country :name (name :op "US")),false), Span(7,8,List(39),idea,idea,false), Span(4,5,List(40),scoff,scoff-01,false), Span(3,4,List(42, 41),opponents,(person :ARG0-of oppose-01),false), Span(2,3,List(43),domestic,domestic,false), Span(0,1,List(46, 45, 44),Chavez,(person :name (name :op "Chavez")),false)),Map(45 -> name, 39 -> idea, 30 -> and, 2 -> "Latin", 5 -> country, 33 -> "Venezuela", 27 -> name, 12 -> uprise-00, 8 -> counterweight, 15 -> person, 42 -> oppose-01, 36 -> country, 21 -> cadre, 18 -> protect-01, 24 -> intend-01, 41 -> person, 35 -> ever, 7 -> "US", 1 -> name, 17 -> "Chavez", 44 -> person, 23 -> arm-01, 38 -> "US", 26 -> person, 4 -> influence-01, 11 -> and, 32 -> name, 14 -> any, 29 -> charge-05, 20 -> loyal-41, 46 -> "Chavez", 34 -> invade-01, 28 -> "Chavez", 6 -> name, 40 -> scoff-01, 43 -> domestic, 9 -> militarize-00, 0 -> country, 22 -> huge, 16 -> name, 37 -> name, 19 -> reservist, 10 -> pose-02, 3 -> "America", 31 -> country, 25 -> true, 13 -> internal),Map(e -> ever, n -> name, h -> huge, i4 -> invade-01, p5 -> person, t -> true, n7 -> name, c7 -> country, p2 -> person, c4 -> cadre, a3 -> arm-01, n4 -> name, s -> scoff-01, d -> domestic, m -> militarize-00, i3 -> intend-01, p -> pose-02, a -> and, c3 -> counterweight, n3 -> name, p4 -> person, n6 -> name, c6 -> country, i2 -> internal, i5 -> idea, a2 -> any, i -> influence-01, r -> reservist, c -> country, p6 -> person, u -> uprise-00, l -> loyal-41, o -> oppose-01, p3 -> protect-01, n2 -> name, c2 -> country, a4 -> and, n5 -> name, c5 -> charge-05))),[Ljava.lang.String;@65fe9e33,Annotation([Ljava.lang.String;@18bc345,[Ljava.lang.String;@42f8285e,[Ljava.lang.String;@26bab2f1),Annotation([Ljava.lang.String;@3724af13,[Ljava.lang.String;@68ead359,[Ledu.cmu.lti.nlp.amr.Dependency;@6b53bcc2),Annotation([Ljava.lang.String;@180da663,[Ljava.lang.String;@a43ce46,[Ljava.lang.String;@340da44c),Annotation([Ljava.lang.String;@424ebba3,[Ljava.lang.String;@37052337,[Ledu.cmu.lti.nlp.amr.Entity;@2320fa6f))
AMR:
(a / and, op, a3 / arm-01)
(a3 / arm-01, ARG1, c4 / cadre)
(a4 / and, op, c5 / charge-05)
(a4 / and, op, s / scoff-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / counterweight, prep-to, i / influence-01)
(c4 / cadre, mod, h / huge)
(c5 / charge-05, ARG1, i3 / intend-01)
(c6 / country, name, n5 / name)
(c7 / country, name, n6 / name)
(i / influence-01, ARG0, c2 / country)
(i / influence-01, ARG1, c / country)
(i3 / intend-01, ARG0, p4 / person)
(i3 / intend-01, ARG1, a / and)
(i3 / intend-01, mod, t / true)
(i4 / invade-01, ARG0, c7 / country)
(i4 / invade-01, ARG1, c6 / country)
(i4 / invade-01, time, e / ever)
(i5 / idea, topic, i4 / invade-01)
(l / loyal-41, ARG1, r / reservist)
(m / militarize-00, ARG1, c3 / counterweight)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "US")
(n3 / name, op, "Chavez")
(n4 / name, op, "Chavez")
(n5 / name, op, "Venezuela")
(n6 / name, op, "US")
(n7 / name, op, "Chavez")
(o / oppose-01, ARG0, p5 / person)
(o / oppose-01, ARG1, p6 / person)
(p / pose-02, ARG0, p6 / person)
(p / pose-02, ARG1, c3 / counterweight)
(p2 / person, name, n3 / name)
(p3 / protect-01, ARG0, c4 / cadre)
(p3 / protect-01, ARG1, p2 / person)
(p3 / protect-01, ARG2, u / uprise-00)
(p4 / person, name, n4 / name)
(p5 / person, mod, d / domestic)
(p6 / person, name, n7 / name)
(s / scoff-01, ARG0, p5 / person)
(s / scoff-01, ARG1, i5 / idea)
(u / uprise-00, ARG1, l / loyal-41)
(u / uprise-00, mod, a2 / any)
(u / uprise-00, mod, i2 / internal)

Decoded in 2,854,974 microseconds
Sentence: Cuban leader Fidel Castro is Chavez's his major ally and Chavez is growing closer to Castro.

NER Entity: (thing :name (name :op "Cuban"))
NER Entity: (person :name (name :op "Fidel" :op "Castro"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Castro"))
NER Entity: (person :name (name :op "Castro"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Cuban"))
Spans:
Span 9-10:  ally => ally-01
Span 10-11:  and => and
Span 16-17:  Castro => (person :name (name :op "Castro"))
Span 11-12:  Chavez => (person :name (name :op "Chavez"))
Span 5-6:  Chavez => (person :name (name :op "Chavez"))
Span 14-15:  closer => close
Span 0-1:  Cuban => (country :name (name :op "Cuba"))
Span 2-4:  Fidel Castro => (person :name (name :op "Castro" :op "Fidel"))
Span 13-14:  growing => grow-01
Span 1-2:  leader => (person :ARG0-of lead-02)
Span 8-9:  major => major

Langrangian relaxation converged after 104 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),Castro,(person :name (name :op "Castro")),false), Span(14,15,List(3),closer,close,false), Span(13,14,List(4),growing,grow-01,false), Span(11,12,List(7, 6, 5),Chavez,(person :name (name :op "Chavez")),false), Span(10,11,List(8),and,and,false), Span(9,10,List(9),ally,ally-01,false), Span(8,9,List(10),major,major,false), Span(5,6,List(13, 12, 11),Chavez,(person :name (name :op "Chavez")),false), Span(2,4,List(17, 16, 15, 14),Fidel Castro,(person :name (name :op "Castro" :op "Fidel")),false), Span(1,2,List(19, 18),leader,(person :ARG0-of lead-02),false), Span(0,1,List(22, 21, 20),Cuban,(country :name (name :op "Cuba")),false)),Map(2 -> "Castro", 5 -> person, 12 -> name, 15 -> name, 8 -> and, 21 -> name, 18 -> person, 7 -> "Chavez", 17 -> "Fidel", 1 -> name, 4 -> grow-01, 11 -> person, 14 -> person, 20 -> country, 6 -> name, 22 -> "Cuba", 0 -> person, 9 -> ally-01, 16 -> "Castro", 19 -> lead-02, 3 -> close, 10 -> major, 13 -> "Chavez"),Map(n -> name, p5 -> person, p2 -> person, n4 -> name, m -> major, p -> person, g -> grow-01, a -> and, n3 -> name, p4 -> person, a2 -> ally-01, c -> close, l -> lead-02, p3 -> person, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@7a560583,Annotation([Ljava.lang.String;@4d722ac9,[Ljava.lang.String;@53f0a4cb,[Ljava.lang.String;@77a7cf58),Annotation([Ljava.lang.String;@3d97a632,[Ljava.lang.String;@616fe72b,[Ledu.cmu.lti.nlp.amr.Dependency;@37efd131),Annotation([Ljava.lang.String;@7e7b159b,[Ljava.lang.String;@7e5d9a50,[Ljava.lang.String;@60957c0f),Annotation([Ljava.lang.String;@293a5f75,[Ljava.lang.String;@fcb4004,[Ledu.cmu.lti.nlp.amr.Entity;@1dd6d4b7))
AMR:
(a / and, op, g / grow-01)
(a2 / ally-01, ARG1, p4 / person)
(a2 / ally-01, ARG2, p3 / person)
(a2 / ally-01, mod, m / major)
(c2 / country, name, n5 / name)
(g / grow-01, ARG0, p2 / person)
(g / grow-01, ARG1, p3 / person)
(g / grow-01, ARG2, c / close)
(g / grow-01, ARG6, p / person)
(l / lead-02, ARG0, p5 / person)
(l / lead-02, ARG1, c2 / country)
(l / lead-02, instrument, p4 / person)
(n / name, op, "Castro")
(n2 / name, op, "Chavez")
(n3 / name, op, "Chavez")
(n4 / name, op, "Castro")
(n4 / name, op, "Fidel")
(n5 / name, op, "Cuba")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)
(p4 / person, name, n4 / name)

Decoded in 2,324,788 microseconds
Sentence: Chavez's detractors in the US government say that it is even more troubling that Chavez's arms purchases and indoctrination of civilian militias could be part of a strategy to restructure Venezuelan democracy in the image of Cuban-style militarized socialism and foment leftist revolutions throughout South America.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (thing :name (name :op "Cuban" :op "-" :op "style"))
NER Entity: (country :name (name :op "South" :op "America"))
NER Entity: (thing :name (name :op "Cuban" :op "-" :op "style"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 43-44:  and => and
Span 19-20:  and => and
Span 17-18:  arms => arm
Span 15-16:  Chavez => (person :name (name :op "Chavez"))
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 22-23:  civilian => civilian
Span 24-25:  could => possible
Span 38-39:  Cuban => (country :name (name :op "Cuba"))
Span 33-34:  democracy => democracy
Span 2-3:  detractors => (person :ARG0-of detract-01)
Span 11-12:  even => even
Span 44-45:  foment => foment-01
Span 6-7:  government => (government-organization :ARG0-of govern-01)
Span 36-37:  image => image
Span 20-21:  indoctrination => indoctrinate-01
Span 9-10:  it => it
Span 45-46:  leftist => leftist
Span 41-42:  militarized => militarize-00
Span 23-24:  militias => militia
Span 12-13:  more => more
Span 18-19:  purchases => purchase-01
Span 31-32:  restructure => restructure-01
Span 46-48:  revolutions throughout => (country :name (name :op "South" :op "America"))
Span 7-8:  say => say-01
Span 42-43:  socialism => socialism
Span 29-30:  strategy => strategy
Span 40-41:  style => style
Span 13-14:  troubling => trouble-01
Span 5-6:  US => (country :name (name :op "US"))
Span 32-33:  Venezuelan => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 84 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,48,List(3, 2, 1, 0),revolutions throughout,(country :name (name :op "South" :op "America")),false), Span(45,46,List(4),leftist,leftist,false), Span(44,45,List(5),foment,foment-01,false), Span(43,44,List(6),and,and,false), Span(42,43,List(7),socialism,socialism,false), Span(41,42,List(8),militarized,militarize-00,false), Span(40,41,List(9),style,style,false), Span(38,39,List(12, 11, 10),Cuban,(country :name (name :op "Cuba")),false), Span(36,37,List(13),image,image,false), Span(33,34,List(14),democracy,democracy,false), Span(32,33,List(17, 16, 15),Venezuelan,(country :name (name :op "Venezuela")),false), Span(31,32,List(18),restructure,restructure-01,false), Span(29,30,List(19),strategy,strategy,false), Span(24,25,List(20),could,possible,false), Span(23,24,List(21),militias,militia,false), Span(22,23,List(22),civilian,civilian,false), Span(20,21,List(23),indoctrination,indoctrinate-01,false), Span(19,20,List(24),and,and,false), Span(18,19,List(25),purchases,purchase-01,false), Span(17,18,List(26),arms,arm,false), Span(15,16,List(29, 28, 27),Chavez,(person :name (name :op "Chavez")),false), Span(13,14,List(30),troubling,trouble-01,false), Span(12,13,List(31),more,more,false), Span(11,12,List(32),even,even,false), Span(9,10,List(33),it,it,false), Span(7,8,List(34),say,say-01,false), Span(6,7,List(36, 35),government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(39, 38, 37),US,(country :name (name :op "US")),false), Span(2,3,List(41, 40),detractors,(person :ARG0-of detract-01),false), Span(0,1,List(44, 43, 42),Chavez,(person :name (name :op "Chavez")),false)),Map(39 -> "US", 30 -> trouble-01, 2 -> "South", 5 -> foment-01, 33 -> it, 27 -> person, 12 -> "Cuba", 8 -> militarize-00, 15 -> country, 42 -> person, 36 -> govern-01, 21 -> militia, 18 -> restructure-01, 24 -> and, 41 -> detract-01, 35 -> government-organization, 7 -> socialism, 1 -> name, 17 -> "Venezuela", 44 -> "Chavez", 23 -> indoctrinate-01, 38 -> name, 26 -> arm, 4 -> leftist, 11 -> name, 32 -> even, 14 -> democracy, 29 -> "Chavez", 20 -> possible, 34 -> say-01, 28 -> name, 6 -> and, 40 -> person, 43 -> name, 9 -> style, 0 -> country, 22 -> civilian, 16 -> name, 37 -> country, 19 -> strategy, 10 -> country, 3 -> "America", 31 -> more, 25 -> purchase-01, 13 -> image),Map(e -> even, m3 -> more, n -> name, p5 -> person, s2 -> style, t -> trouble-01, m2 -> militia, p2 -> purchase-01, c4 -> civilian, a3 -> arm, n4 -> name, s -> socialism, s4 -> say-01, d -> democracy, m -> militarize-00, g2 -> govern-01, i3 -> it, g -> government-organization, p -> possible, c3 -> country, a -> and, n3 -> name, p4 -> person, n6 -> name, d2 -> detract-01, i2 -> indoctrinate-01, i -> image, r -> restructure-01, a2 -> and, c -> country, s3 -> strategy, l -> leftist, f -> foment-01, p3 -> person, n2 -> name, c2 -> country, n5 -> name, c5 -> country))),[Ljava.lang.String;@56e8b606,Annotation([Ljava.lang.String;@2dd29a59,[Ljava.lang.String;@784c3487,[Ljava.lang.String;@53142455),Annotation([Ljava.lang.String;@40dff0b7,[Ljava.lang.String;@7966baa7,[Ledu.cmu.lti.nlp.amr.Dependency;@60975100),Annotation([Ljava.lang.String;@1253e7cb,[Ljava.lang.String;@2d36e77e,[Ljava.lang.String;@61c9c3fd),Annotation([Ljava.lang.String;@3b0c9195,[Ljava.lang.String;@366c4480,[Ledu.cmu.lti.nlp.amr.Entity;@2c7b5824))
AMR:
(a / and, op, f / foment-01)
(a / and, op, p / possible)
(a / and, op, r / restructure-01)
(a2 / and, op, a / and)
(a2 / and, op, i2 / indoctrinate-01)
(a2 / and, op, p2 / purchase-01)
(c / country, name, n / name)
(c / country, part, l / leftist)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c5 / country, name, n5 / name)
(d / democracy, mod, c3 / country)
(d2 / detract-01, ARG0, p4 / person)
(d2 / detract-01, ARG1, p5 / person)
(f / foment-01, ARG0, s3 / strategy)
(f / foment-01, ARG1, c / country)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c5 / country)
(i / image, mod, s / socialism)
(i2 / indoctrinate-01, ARG1, m2 / militia)
(m / militarize-00, ARG1, s / socialism)
(m2 / militia, mod, c4 / civilian)
(m3 / more, mod, e / even)
(n / name, op, "America")
(n / name, op, "South")
(n2 / name, op, "Cuba")
(n3 / name, op, "Venezuela")
(n4 / name, op, "Chavez")
(n5 / name, op, "US")
(n6 / name, op, "Chavez")
(p2 / purchase-01, ARG0, p3 / person)
(p2 / purchase-01, ARG1, a3 / arm)
(p2 / purchase-01, ARG6, t / trouble-01)
(p3 / person, name, n4 / name)
(p4 / person, location, g / government-organization)
(p5 / person, name, n6 / name)
(r / restructure-01, ARG1, d / democracy)
(r / restructure-01, manner, i / image)
(s / socialism, mod, s2 / style)
(s2 / style, mod, c2 / country)
(s4 / say-01, ARG0, p4 / person)
(s4 / say-01, ARG1, t / trouble-01)
(t / trouble-01, ARG1, i3 / it)
(t / trouble-01, degree, m3 / more)

Decoded in 7,674,573 microseconds
Sentence: US military strategists say they are increasingly concerned that radical movements inspired by Chavez could foment such revolution.

NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 13-14:  Chavez => (person :name (name :op "Chavez"))
Span 7-8:  concerned => concern-01
Span 14-15:  could => possible
Span 15-16:  foment => foment-01
Span 6-7:  increasingly => increase-01
Span 11-12:  inspired => inspire-01
Span 1-2:  military => military
Span 10-11:  movements => move-02
Span 9-10:  radical => radical
Span 17-18:  revolution => revolution
Span 3-4:  say => say-01
Span 2-3:  strategists => strategize-01
Span 16-17:  such => such
Span 4-5:  they => they
Span 0-1:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),revolution,revolution,false), Span(16,17,List(1),such,such,false), Span(15,16,List(2),foment,foment-01,false), Span(14,15,List(3),could,possible,false), Span(13,14,List(6, 5, 4),Chavez,(person :name (name :op "Chavez")),false), Span(11,12,List(7),inspired,inspire-01,false), Span(10,11,List(8),movements,move-02,false), Span(9,10,List(9),radical,radical,false), Span(7,8,List(10),concerned,concern-01,false), Span(6,7,List(11),increasingly,increase-01,false), Span(4,5,List(12),they,they,false), Span(3,4,List(13),say,say-01,false), Span(2,3,List(14),strategists,strategize-01,false), Span(1,2,List(15),military,military,false), Span(0,1,List(18, 17, 16),US,(country :name (name :op "US")),false)),Map(2 -> foment-01, 5 -> name, 12 -> they, 15 -> military, 8 -> move-02, 18 -> "US", 7 -> inspire-01, 17 -> name, 1 -> such, 4 -> person, 11 -> increase-01, 14 -> strategize-01, 6 -> "Chavez", 0 -> revolution, 9 -> radical, 16 -> country, 3 -> possible, 10 -> concern-01, 13 -> say-01),Map(n -> name, s2 -> say-01, t -> they, m2 -> military, p2 -> person, s -> such, m -> move-02, p -> possible, r2 -> radical, i2 -> increase-01, r -> revolution, i -> inspire-01, s3 -> strategize-01, c -> concern-01, f -> foment-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@302a07d,Annotation([Ljava.lang.String;@5cdd09b1,[Ljava.lang.String;@8c11eee,[Ljava.lang.String;@7e8dcdaa),Annotation([Ljava.lang.String;@681a8b4e,[Ljava.lang.String;@5cbe877d,[Ledu.cmu.lti.nlp.amr.Dependency;@5c08c46a),Annotation([Ljava.lang.String;@4cf8b2dc,[Ljava.lang.String;@708400f6,[Ljava.lang.String;@5829e4f4),Annotation([Ljava.lang.String;@4218500f,[Ljava.lang.String;@4bff64c2,[Ledu.cmu.lti.nlp.amr.Entity;@1b2c4efb))
AMR:
(c / concern-01, ARG0, f / foment-01)
(c / concern-01, ARG1, t / they)
(c2 / country, name, n2 / name)
(f / foment-01, ARG0, m / move-02)
(f / foment-01, ARG1, r / revolution)
(f / foment-01, mod, p / possible)
(i / inspire-01, ARG0, p2 / person)
(i / inspire-01, ARG1, m / move-02)
(i2 / increase-01, ARG1, c / concern-01)
(m / move-02, ARG1, s3 / strategize-01)
(m / move-02, mod, r2 / radical)
(m2 / military, mod, c2 / country)
(n / name, op, "Chavez")
(n2 / name, op, "US")
(p2 / person, name, n / name)
(r / revolution, mod, s / such)
(s2 / say-01, ARG1, c / concern-01)
(s3 / strategize-01, ARG1, m2 / military)

Decoded in 437,058 microseconds
Sentence: The political mainstream in Latin America has shifted leftward since the late 1990s.

NER Entity: (country :name (name :op "Latin" :op "America"))
Spans:
Span 12-13:  1990s => 1990
Span 11-12:  late => late
Span 4-6:  Latin America => (country :name (name :op "Latin" :op "America"))
Span 8-9:  leftward => leftward
Span 2-3:  mainstream => mainstream
Span 1-2:  political => politics
Span 7-8:  shifted => shift-01
Span 9-10:  since => since

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),1990s,1990,false), Span(11,12,List(1),late,late,false), Span(9,10,List(2),since,since,false), Span(8,9,List(3),leftward,leftward,false), Span(7,8,List(4),shifted,shift-01,false), Span(4,6,List(8, 7, 6, 5),Latin America,(country :name (name :op "Latin" :op "America")),false), Span(2,3,List(9),mainstream,mainstream,false), Span(1,2,List(10),political,politics,false)),Map(2 -> since, 5 -> country, 8 -> "America", 7 -> "Latin", 1 -> late, 4 -> shift-01, 6 -> name, 9 -> mainstream, 0 -> 1990, 10 -> politics, 3 -> leftward),Map(n -> name, s2 -> shift-01, s -> since, m -> mainstream, p -> politics, 1 -> 1990, l2 -> leftward, c -> country, l -> late))),[Ljava.lang.String;@c35172e,Annotation([Ljava.lang.String;@c2db68f,[Ljava.lang.String;@3cc41abc,[Ljava.lang.String;@4566d049),Annotation([Ljava.lang.String;@61ce23ac,[Ljava.lang.String;@3668d4,[Ledu.cmu.lti.nlp.amr.Dependency;@1c3b9394),Annotation([Ljava.lang.String;@6f2cfcc2,[Ljava.lang.String;@7f6f61c8,[Ljava.lang.String;@4c2cc639),Annotation([Ljava.lang.String;@ccb4b1b,[Ljava.lang.String;@4097cac,[Ledu.cmu.lti.nlp.amr.Entity;@ec2cc4))
AMR:
(c / country, name, n / name)
(m / mainstream, location, c / country)
(m / mainstream, mod, p / politics)
(n / name, op, "America")
(n / name, op, "Latin")
(s / since, calendar, 1 / 1990)
(s / since, op, l / late)
(s2 / shift-01, ARG1, m / mainstream)
(s2 / shift-01, ARG2, l2 / leftward)
(s2 / shift-01, time, s / since)

Decoded in 114,699 microseconds
Sentence: This leftward shift is largely in reaction to the perceived failure of free-market economics.

Spans:
Span 15-16:  economics => economics
Span 10-11:  failure => fail-01
Span 12-13:  free => free
Span 4-5:  largely => large
Span 1-2:  leftward => leftward
Span 14-15:  market => market
Span 9-10:  perceived => perceive-01
Span 6-7:  reaction => reaction
Span 2-3:  shift => shift-01
Span 0-1:  This => this

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),economics,economics,false), Span(14,15,List(1),market,market,false), Span(12,13,List(2),free,free,false), Span(10,11,List(3),failure,fail-01,false), Span(9,10,List(4),perceived,perceive-01,false), Span(6,7,List(5),reaction,reaction,false), Span(4,5,List(6),largely,large,false), Span(2,3,List(7),shift,shift-01,false), Span(1,2,List(8),leftward,leftward,false), Span(0,1,List(9),This,this,false)),Map(2 -> free, 5 -> reaction, 8 -> leftward, 7 -> shift-01, 1 -> market, 4 -> perceive-01, 6 -> large, 9 -> this, 0 -> economics, 3 -> fail-01),Map(e -> economics, t -> this, s -> shift-01, m -> market, p -> perceive-01, l2 -> leftward, r -> reaction, l -> large, f2 -> fail-01, f -> free))),[Ljava.lang.String;@2a5b3fee,Annotation([Ljava.lang.String;@7c1e2a2d,[Ljava.lang.String;@333dd51e,[Ljava.lang.String;@52d645b1),Annotation([Ljava.lang.String;@2101b44a,[Ljava.lang.String;@2cc3ad05,[Ledu.cmu.lti.nlp.amr.Dependency;@710b18a6),Annotation([Ljava.lang.String;@119020fb,[Ljava.lang.String;@3d9f6567,[Ljava.lang.String;@c055c54),Annotation([Ljava.lang.String;@25e2ab5a,[Ljava.lang.String;@35e5d0e5,[Ledu.cmu.lti.nlp.amr.Entity;@73173f63))
AMR:
(e / economics, mod, m / market)
(f2 / fail-01, ARG1, e / economics)
(m / market, mod, f / free)
(p / perceive-01, ARG1, f2 / fail-01)
(r / reaction, manner, l / large)
(r / reaction, prep-to, f2 / fail-01)
(s / shift-01, ARG1, p / perceive-01)
(s / shift-01, ARG2, l2 / leftward)
(s / shift-01, mod, t / this)

Decoded in 165,034 microseconds
Sentence: Leftists have been elected to lead Brazil, Argentina, Chile, Uruguay, Ecuador and Venezuela.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Argentina"))
NER Entity: (country :name (name :op "Chile"))
NER Entity: (country :name (name :op "Uruguay"))
NER Entity: (country :name (name :op "Ecuador"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Ecuador"))
NER Entity: (country :name (name :op "Uruguay"))
NER Entity: (country :name (name :op "Chile"))
NER Entity: (country :name (name :op "Argentina"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 15-16:  and => and
Span 8-9:  Argentina => (country :name (name :op "Argentina"))
Span 6-7:  Brazil => (country :name (name :op "Brazil"))
Span 10-11:  Chile => (country :name (name :op "Chile"))
Span 14-15:  Ecuador => (country :name (name :op "Ecuador"))
Span 3-4:  elected => elect-01
Span 5-6:  lead => lead-03
Span 0-1:  Leftists => leftist
Span 12-13:  Uruguay => (country :name (name :op "Uruguay"))
Span 16-17:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(15,16,List(3),and,and,false), Span(14,15,List(6, 5, 4),Ecuador,(country :name (name :op "Ecuador")),false), Span(12,13,List(9, 8, 7),Uruguay,(country :name (name :op "Uruguay")),false), Span(10,11,List(12, 11, 10),Chile,(country :name (name :op "Chile")),false), Span(8,9,List(15, 14, 13),Argentina,(country :name (name :op "Argentina")),false), Span(6,7,List(18, 17, 16),Brazil,(country :name (name :op "Brazil")),false), Span(5,6,List(19),lead,lead-03,false), Span(3,4,List(20),elected,elect-01,false), Span(0,1,List(21),Leftists,leftist,false)),Map(2 -> "Venezuela", 5 -> name, 12 -> "Chile", 15 -> "Argentina", 8 -> name, 21 -> leftist, 18 -> "Brazil", 7 -> country, 17 -> name, 1 -> name, 4 -> country, 11 -> name, 14 -> name, 20 -> elect-01, 6 -> "Ecuador", 0 -> country, 9 -> "Uruguay", 16 -> country, 19 -> lead-03, 3 -> and, 10 -> country, 13 -> country),Map(e -> elect-01, n -> name, c4 -> country, n4 -> name, a -> and, c3 -> country, n3 -> name, n6 -> name, c6 -> country, l2 -> leftist, c -> country, l -> lead-03, c2 -> country, n2 -> name, c5 -> country, n5 -> name))),[Ljava.lang.String;@55562aa9,Annotation([Ljava.lang.String;@655ef322,[Ljava.lang.String;@7e276594,[Ljava.lang.String;@3401a114),Annotation([Ljava.lang.String;@5066d65f,[Ljava.lang.String;@4233e892,[Ledu.cmu.lti.nlp.amr.Dependency;@77d2e85),Annotation([Ljava.lang.String;@3ecd267f,[Ljava.lang.String;@58ffcbd7,[Ljava.lang.String;@555cf22),Annotation([Ljava.lang.String;@6bb2d00b,[Ljava.lang.String;@3c9bfddc,[Ledu.cmu.lti.nlp.amr.Entity;@1a9c38eb))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(a / and, op, c6 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(e / elect-01, ARG1, l2 / leftist)
(l / lead-03, ARG0, l2 / leftist)
(l / lead-03, ARG1, a / and)
(n / name, op, "Venezuela")
(n2 / name, op, "Ecuador")
(n3 / name, op, "Uruguay")
(n4 / name, op, "Chile")
(n5 / name, op, "Argentina")
(n6 / name, op, "Brazil")

Decoded in 304,314 microseconds
Sentence: Chavez's supporters at home counter that the United States has a century-long history of open as well as covert armed intervention in Latin America's domestic politics and say that it has no right to question Venezuela's defense preparations.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 30-31:  and => and
Span 22-23:  armed => arm-01
Span 12-13:  century => (temporal-quantity :unit century)
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 5-6:  counter => counter-01
Span 21-22:  covert => covert
Span 41-42:  defense => defense
Span 28-29:  domestic => domestic
Span 15-16:  history => history
Span 4-5:  home => home
Span 23-25:  intervention in => (country :name (name :op "Latin" :op "America"))
Span 33-34:  it => it
Span 14-15:  long => long
Span 35-36:  no => -
Span 17-18:  open => open-01
Span 29-30:  politics => politics
Span 42-43:  preparations => prepare-02
Span 38-39:  question => question-01
Span 36-37:  right => right
Span 31-32:  say => say-01
Span 2-3:  supporters => (person :ARG0-of support-01)
Span 8-10:  United States => (country :name (name :op "United" :op "States"))
Span 39-40:  Venezuela => (country :name (name :op "Venezuela"))
Span 19-20:  well => well

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),preparations,prepare-02,false), Span(41,42,List(1),defense,defense,false), Span(39,40,List(4, 3, 2),Venezuela,(country :name (name :op "Venezuela")),false), Span(38,39,List(5),question,question-01,false), Span(36,37,List(6),right,right,false), Span(35,36,List(7),no,-,false), Span(33,34,List(8),it,it,false), Span(31,32,List(9),say,say-01,false), Span(30,31,List(10),and,and,false), Span(29,30,List(11),politics,politics,false), Span(28,29,List(12),domestic,domestic,false), Span(23,25,List(16, 15, 14, 13),intervention in,(country :name (name :op "Latin" :op "America")),false), Span(22,23,List(17),armed,arm-01,false), Span(21,22,List(18),covert,covert,false), Span(19,20,List(19),well,well,false), Span(17,18,List(20),open,open-01,false), Span(15,16,List(21),history,history,false), Span(14,15,List(22),long,long,false), Span(12,13,List(24, 23),century,(temporal-quantity :unit century),false), Span(8,10,List(28, 27, 26, 25),United States,(country :name (name :op "United" :op "States")),false), Span(5,6,List(29),counter,counter-01,false), Span(4,5,List(30),home,home,false), Span(2,3,List(32, 31),supporters,(person :ARG0-of support-01),false), Span(0,1,List(35, 34, 33),Chavez,(person :name (name :op "Chavez")),false)),Map(30 -> home, 2 -> country, 5 -> question-01, 33 -> person, 27 -> "United", 12 -> domestic, 8 -> it, 15 -> "Latin", 21 -> history, 18 -> covert, 24 -> century, 35 -> "Chavez", 7 -> -, 1 -> defense, 17 -> arm-01, 23 -> temporal-quantity, 26 -> name, 4 -> "Venezuela", 11 -> politics, 32 -> support-01, 14 -> name, 29 -> counter-01, 20 -> open-01, 34 -> name, 28 -> "States", 6 -> right, 9 -> say-01, 0 -> prepare-02, 22 -> long, 16 -> "America", 19 -> well, 10 -> and, 3 -> name, 31 -> person, 25 -> country, 13 -> country),Map(n -> name, w -> well, h -> history, q -> question-01, s2 -> support-01, h2 -> home, t -> temporal-quantity, p2 -> politics, n4 -> name, c4 -> century, s -> say-01, d -> defense, p -> prepare-02, a -> and, c3 -> covert, n3 -> name, p4 -> person, d2 -> domestic, c6 -> counter-01, i -> it, r -> right, a2 -> arm-01, - -> -, c -> country, l -> long, o -> open-01, p3 -> person, n2 -> name, c2 -> country, c5 -> country))),[Ljava.lang.String;@319bc845,Annotation([Ljava.lang.String;@4c5474f5,[Ljava.lang.String;@2f4205be,[Ljava.lang.String;@54e22bdd),Annotation([Ljava.lang.String;@3bd418e4,[Ljava.lang.String;@544820b7,[Ledu.cmu.lti.nlp.amr.Dependency;@6b98a075),Annotation([Ljava.lang.String;@2e61d218,[Ljava.lang.String;@3569fc08,[Ljava.lang.String;@20b12f8a),Annotation([Ljava.lang.String;@e84a8e1,[Ljava.lang.String;@2e554a3b,[Ledu.cmu.lti.nlp.amr.Entity;@54a67a45))
AMR:
(a / and, op, c2 / country)
(a / and, op, c6 / counter-01)
(a / and, op, o / open-01)
(a / and, op, p2 / politics)
(a / and, op, s / say-01)
(a2 / arm-01, ARG1, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c6 / counter-01, ARG0, p3 / person)
(c6 / counter-01, ARG1, h / history)
(h / history, duration, t / temporal-quantity)
(h / history, mod, l / long)
(h / history, poss, c5 / country)
(n / name, op, "Venezuela")
(n2 / name, op, "America")
(n2 / name, op, "Latin")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "Chavez")
(o / open-01, ARG1, c3 / covert)
(p / prepare-02, ARG0, c / country)
(p / prepare-02, ARG1, w / well)
(p / prepare-02, ARG2, d / defense)
(p2 / politics, mod, d2 / domestic)
(p3 / person, location, h2 / home)
(p4 / person, name, n4 / name)
(q / question-01, ARG0, c5 / country)
(q / question-01, ARG1, p / prepare-02)
(q / question-01, ARG6, i / it)
(q / question-01, degree, r / right)
(r / right, calendar, - / -)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, a / and)
(s2 / support-01, ARG0, p3 / person)
(s2 / support-01, ARG1, p4 / person)
(t / temporal-quantity, unit, c4 / century)

Decoded in 2,281,158 microseconds
Sentence: Carlos Roque Espinoza Leon said that Venezuelans never ask what the US Marines are doing.

NER Entity: (person :name (name :op "Carlos" :op "Roque" :op "Espinoza" :op "Leon"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (organization :name (name :op "US" :op "Marines"))
NER Entity: (thing :name (name :op "Venezuelans"))
Spans:
Span 8-9:  ask => ask-02
Span 0-4:  Carlos Roque Espinoza Leon => (person :name (name :op "Leon" :op "Espinoza" :op "Roque" :op "Carlos"))
Span 14-15:  doing => (thing :ARG1-of do-02)
Span 4-5:  said => say-01
Span 11-13:  US Marines => (organization :name (name :op "US" :op "Marines"))
Span 6-7:  Venezuelans => (person :mod (country :name (name :op "Venezuela")))

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(1, 0),doing,(thing :ARG1-of do-02),false), Span(11,13,List(5, 4, 3, 2),US Marines,(organization :name (name :op "US" :op "Marines")),false), Span(8,9,List(6),ask,ask-02,false), Span(6,7,List(10, 9, 8, 7),Venezuelans,(person :mod (country :name (name :op "Venezuela"))),false), Span(4,5,List(11),said,say-01,false), Span(0,4,List(17, 16, 15, 14, 13, 12),Carlos Roque Espinoza Leon,(person :name (name :op "Leon" :op "Espinoza" :op "Roque" :op "Carlos")),false)),Map(2 -> organization, 5 -> "Marines", 12 -> person, 15 -> "Espinoza", 8 -> country, 7 -> person, 17 -> "Carlos", 1 -> do-02, 4 -> "US", 11 -> say-01, 14 -> "Leon", 6 -> ask-02, 0 -> thing, 9 -> name, 16 -> "Roque", 3 -> name, 10 -> "Venezuela", 13 -> name),Map(n -> name, t -> thing, p2 -> person, s -> say-01, d -> do-02, p -> person, n3 -> name, a -> ask-02, c -> country, o -> organization, n2 -> name))),[Ljava.lang.String;@7d42c224,Annotation([Ljava.lang.String;@56aaaecd,[Ljava.lang.String;@522a32b1,[Ljava.lang.String;@35390ee3),Annotation([Ljava.lang.String;@5e01a982,[Ljava.lang.String;@5ddea849,[Ledu.cmu.lti.nlp.amr.Dependency;@5ee2b6f9),Annotation([Ljava.lang.String;@23d1e5d0,[Ljava.lang.String;@704f1591,[Ljava.lang.String;@58fb7731),Annotation([Ljava.lang.String;@13e547a9,[Ljava.lang.String;@3fb6cf60,[Ledu.cmu.lti.nlp.amr.Entity;@37ddb69a))
AMR:
(a / ask-02, ARG0, p / person)
(a / ask-02, ARG1, t / thing)
(c / country, name, n2 / name)
(d / do-02, ARG0, o / organization)
(d / do-02, ARG1, t / thing)
(n / name, op, "Marines")
(n / name, op, "US")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Carlos")
(n3 / name, op, "Espinoza")
(n3 / name, op, "Leon")
(n3 / name, op, "Roque")
(o / organization, name, n / name)
(p / person, mod, c / country)
(p2 / person, name, n3 / name)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, a / ask-02)

Decoded in 223,640 microseconds
Sentence: Espinoza Leon is a pro-Chavez defense specialist who serves in Venezuela's National Assembly.

NER Entity: (person :name (name :op "Espinoza" :op "Leon"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (organization :name (name :op "National" :op "Assembly"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 6-7:  Chavez => (person :name (name :op "Chavez"))
Span 7-8:  defense => defense
Span 0-2:  Espinoza Leon => (person :name (name :op "Leon" :op "Espinoza"))
Span 10-11:  serves => serve-01
Span 8-9:  specialist => specialize-01
Span 12-14:  Venezuela 's => (organization :name (name :op "National" :op "Assembly"))

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,14,List(3, 2, 1, 0),Venezuela 's,(organization :name (name :op "National" :op "Assembly")),false), Span(10,11,List(4),serves,serve-01,false), Span(8,9,List(5),specialist,specialize-01,false), Span(7,8,List(6),defense,defense,false), Span(6,7,List(9, 8, 7),Chavez,(person :name (name :op "Chavez")),false), Span(0,2,List(13, 12, 11, 10),Espinoza Leon,(person :name (name :op "Leon" :op "Espinoza")),false)),Map(2 -> "National", 5 -> specialize-01, 12 -> "Leon", 8 -> name, 7 -> person, 1 -> name, 4 -> serve-01, 11 -> name, 6 -> defense, 0 -> organization, 9 -> "Chavez", 3 -> "Assembly", 10 -> person, 13 -> "Espinoza"),Map(n -> name, s2 -> specialize-01, p2 -> person, s -> serve-01, d -> defense, p -> person, n3 -> name, o -> organization, n2 -> name))),[Ljava.lang.String;@349c1daf,Annotation([Ljava.lang.String;@dfddc9a,[Ljava.lang.String;@4b9df8a,[Ljava.lang.String;@5e8ac0e1),Annotation([Ljava.lang.String;@aafcffa,[Ljava.lang.String;@6955cb39,[Ledu.cmu.lti.nlp.amr.Dependency;@235a0c16),Annotation([Ljava.lang.String;@2b5f4d54,[Ljava.lang.String;@5f7b97da,[Ljava.lang.String;@18b0930f),Annotation([Ljava.lang.String;@6b7906b3,[Ljava.lang.String;@3a1dd365,[Ledu.cmu.lti.nlp.amr.Entity;@395b56bb))
AMR:
(d / defense, domain, p2 / person)
(n / name, op, "Assembly")
(n / name, op, "National")
(n2 / name, op, "Chavez")
(n3 / name, op, "Espinoza")
(n3 / name, op, "Leon")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(p2 / person, name, n3 / name)
(s / serve-01, ARG0, o / organization)
(s / serve-01, ARG1, s2 / specialize-01)
(s / serve-01, ARG6, p / person)
(s2 / specialize-01, ARG1, d / defense)

Decoded in 290,803 microseconds
Sentence: Espinoza said that Peru has 500000 rifles and no one says anything.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (country :name (name :op "Peru"))
mkDayMonthYear(500000,00,00,50)
mkDayMonthYear(500000,00,00,50)
NER Entity: (country :name (name :op "Peru"))
NER Entity: (person :name (name :op "Espinoza"))
Spans:
Span 5-6:  500000 => 500000
Span 7-8:  and => and
Span 11-12:  anything => anything
Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Span 8-9:  no => -
Span 9-10:  one => 1
Span 3-4:  Peru => (country :name (name :op "Peru"))
Span 6-7:  rifles => rifle
Span 1-2:  said => say-01
Span 10-11:  says => say-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),anything,anything,false), Span(10,11,List(1),says,say-01,false), Span(9,10,List(2),one,1,false), Span(8,9,List(3),no,-,false), Span(7,8,List(4),and,and,false), Span(6,7,List(5),rifles,rifle,false), Span(5,6,List(6),500000,500000,false), Span(3,4,List(9, 8, 7),Peru,(country :name (name :op "Peru")),false), Span(1,2,List(10),said,say-01,false), Span(0,1,List(13, 12, 11),Espinoza,(person :name (name :op "Espinoza")),false)),Map(2 -> 1, 5 -> rifle, 12 -> name, 8 -> name, 7 -> country, 1 -> say-01, 4 -> and, 11 -> person, 6 -> 500000, 0 -> anything, 9 -> "Peru", 3 -> -, 10 -> say-01, 13 -> "Espinoza"),Map(n -> name, s2 -> say-01, 5 -> 500000, s -> say-01, p -> person, 1 -> 1, a -> anything, r -> rifle, a2 -> and, - -> -, c -> country, n2 -> name))),[Ljava.lang.String;@256f8274,Annotation([Ljava.lang.String;@68044f4,[Ljava.lang.String;@52d239ba,[Ljava.lang.String;@315f43d5),Annotation([Ljava.lang.String;@68fa0ba8,[Ljava.lang.String;@6c5945a7,[Ledu.cmu.lti.nlp.amr.Dependency;@2f05be7f),Annotation([Ljava.lang.String;@640f11a1,[Ljava.lang.String;@5c10f1c3,[Ljava.lang.String;@7ac2e39b),Annotation([Ljava.lang.String;@78365cfa,[Ljava.lang.String;@64a8c844,[Ledu.cmu.lti.nlp.amr.Entity;@3f6db3fb))
AMR:
(a2 / and, op, r / rifle)
(a2 / and, op, s / say-01)
(c / country, name, n / name)
(n / name, op, "Peru")
(n2 / name, op, "Espinoza")
(p / person, name, n2 / name)
(r / rifle, quant, 5 / 500000)
(s / say-01, ARG0, c / country)
(s / say-01, ARG1, a / anything)
(s / say-01, ARG6, 1 / 1)
(s / say-01, time, - / -)
(s2 / say-01, ARG0, p / person)
(s2 / say-01, ARG1, a2 / and)

Decoded in 492,805 microseconds
Sentence: Espinoza said no one complains that Colombia is the most militarized country in Latin America.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (person :name (name :op "Espinoza"))
Spans:
Span 6-7:  Colombia => (country :name (name :op "Colombia"))
Span 4-5:  complains => complain-01
Span 11-12:  country => country
Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Span 13-15:  Latin America => (country :name (name :op "Latin" :op "America"))
Span 10-11:  militarized => militarize-00
Span 9-10:  most => most
Span 2-3:  no => -
Span 3-4:  one => 1
Span 1-2:  said => say-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,15,List(3, 2, 1, 0),Latin America,(country :name (name :op "Latin" :op "America")),false), Span(11,12,List(4),country,country,false), Span(10,11,List(5),militarized,militarize-00,false), Span(9,10,List(6),most,most,false), Span(6,7,List(9, 8, 7),Colombia,(country :name (name :op "Colombia")),false), Span(4,5,List(10),complains,complain-01,false), Span(3,4,List(11),one,1,false), Span(2,3,List(12),no,-,false), Span(1,2,List(13),said,say-01,false), Span(0,1,List(16, 15, 14),Espinoza,(person :name (name :op "Espinoza")),false)),Map(2 -> "Latin", 5 -> militarize-00, 12 -> -, 15 -> name, 8 -> name, 7 -> country, 1 -> name, 4 -> country, 11 -> 1, 14 -> person, 6 -> most, 0 -> country, 9 -> "Colombia", 16 -> "Espinoza", 3 -> "America", 10 -> complain-01, 13 -> say-01),Map(n -> name, m2 -> most, c4 -> complain-01, s -> say-01, m -> militarize-00, 1 -> 1, p -> person, c3 -> country, n3 -> name, c -> country, - -> -, c2 -> country, n2 -> name))),[Ljava.lang.String;@52de51b6,Annotation([Ljava.lang.String;@18c5069b,[Ljava.lang.String;@3a0d172f,[Ljava.lang.String;@68ad99fe),Annotation([Ljava.lang.String;@485e36bc,[Ljava.lang.String;@781f10f2,[Ledu.cmu.lti.nlp.amr.Dependency;@2a79d4b1),Annotation([Ljava.lang.String;@2e9fda69,[Ljava.lang.String;@17cdf2d0,[Ljava.lang.String;@1755e85b),Annotation([Ljava.lang.String;@736d6a5c,[Ljava.lang.String;@2371aaca,[Ledu.cmu.lti.nlp.amr.Entity;@5b529706))
AMR:
(c / country, name, n / name)
(c2 / country, domain, c3 / country)
(c2 / country, location, c / country)
(c3 / country, name, n2 / name)
(c4 / complain-01, ARG0, 1 / 1)
(c4 / complain-01, ARG1, c2 / country)
(c4 / complain-01, ARG6, - / -)
(m / militarize-00, ARG1, c2 / country)
(m / militarize-00, degree, m2 / most)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "Colombia")
(n3 / name, op, "Espinoza")
(p / person, name, n3 / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, c4 / complain-01)

Decoded in 314,786 microseconds
Sentence: Espinoza said US history is full of aggression in Latin America.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Espinoza"))
Spans:
Span 7-8:  aggression => aggress-00
Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Span 5-6:  full => full
Span 3-4:  history => history
Span 9-11:  Latin America => (country :name (name :op "Latin" :op "America"))
Span 1-2:  said => say-01
Span 2-3:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),Latin America,(country :name (name :op "Latin" :op "America")),false), Span(7,8,List(4),aggression,aggress-00,false), Span(5,6,List(5),full,full,false), Span(3,4,List(6),history,history,false), Span(2,3,List(9, 8, 7),US,(country :name (name :op "US")),false), Span(1,2,List(10),said,say-01,false), Span(0,1,List(13, 12, 11),Espinoza,(person :name (name :op "Espinoza")),false)),Map(2 -> "Latin", 5 -> full, 12 -> name, 8 -> name, 7 -> country, 1 -> name, 4 -> aggress-00, 11 -> person, 6 -> history, 0 -> country, 9 -> "US", 3 -> "America", 10 -> say-01, 13 -> "Espinoza"),Map(n -> name, h -> history, s -> say-01, p -> person, n3 -> name, a -> aggress-00, c -> country, f -> full, n2 -> name, c2 -> country))),[Ljava.lang.String;@63fdab07,Annotation([Ljava.lang.String;@7b5a12ae,[Ljava.lang.String;@5553d0f5,[Ljava.lang.String;@1af687fe),Annotation([Ljava.lang.String;@14dda234,[Ljava.lang.String;@3f390d63,[Ledu.cmu.lti.nlp.amr.Dependency;@74a6a609),Annotation([Ljava.lang.String;@5a411614,[Ljava.lang.String;@2374d36a,[Ljava.lang.String;@54d18072),Annotation([Ljava.lang.String;@1506f20f,[Ljava.lang.String;@47a5b70d,[Ledu.cmu.lti.nlp.amr.Entity;@424fd310))
AMR:
(a / aggress-00, ARG1, f / full)
(a / aggress-00, location, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(f / full, domain, h / history)
(h / history, mod, c2 / country)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "US")
(n3 / name, op, "Espinoza")
(p / person, name, n3 / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, f / full)

Decoded in 174,202 microseconds
Sentence: Espinoza said Venezuelans have to do whatever is necessary to protect Venezuela.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (person :name (name :op "Espinoza"))
Spans:
Span 5-6:  do => do-02
Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Span 10-11:  protect => protect-01
Span 1-2:  said => say-01
Span 11-12:  Venezuela => (country :name (name :op "Venezuela"))
Span 2-3:  Venezuelans => (person :mod (country :name (name :op "Venezuela")))
Span 6-7:  whatever => whatever

Langrangian relaxation converged after 73 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(10,11,List(3),protect,protect-01,false), Span(6,7,List(4),whatever,whatever,false), Span(5,6,List(5),do,do-02,false), Span(2,3,List(9, 8, 7, 6),Venezuelans,(person :mod (country :name (name :op "Venezuela"))),false), Span(1,2,List(10),said,say-01,false), Span(0,1,List(13, 12, 11),Espinoza,(person :name (name :op "Espinoza")),false)),Map(2 -> "Venezuela", 5 -> do-02, 12 -> name, 8 -> name, 7 -> country, 1 -> name, 4 -> whatever, 11 -> person, 6 -> person, 0 -> country, 9 -> "Venezuela", 3 -> protect-01, 10 -> say-01, 13 -> "Espinoza"),Map(w -> whatever, n -> name, p2 -> person, s -> say-01, d -> do-02, p -> protect-01, n3 -> name, c -> country, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@1a45193b,Annotation([Ljava.lang.String;@38f116f6,[Ljava.lang.String;@5286c33a,[Ljava.lang.String;@6e6d5d29),Annotation([Ljava.lang.String;@5c530d1e,[Ljava.lang.String;@6c25e6c4,[Ledu.cmu.lti.nlp.amr.Dependency;@85e6769),Annotation([Ljava.lang.String;@c5ee75e,[Ljava.lang.String;@48a12036,[Ljava.lang.String;@bf1ec20),Annotation([Ljava.lang.String;@70efb718,[Ljava.lang.String;@b70da4c,[Ledu.cmu.lti.nlp.amr.Entity;@4a11eb84))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / do-02, ARG1, w / whatever)
(d / do-02, ARG4, c / country)
(d / do-02, ARG6, p2 / person)
(n / name, op, "Venezuela")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Espinoza")
(p / protect-01, ARG1, c / country)
(p2 / person, mod, c2 / country)
(p3 / person, name, n3 / name)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, p2 / person)

Decoded in 780,377 microseconds
Sentence: Chavez has famously said that the Venezuelan so-called Bolivarian revolution is peaceful but not unarmed.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (thing :name (name :op "Bolivarian"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 10-12:  Bolivarian revolution => (event :name (name :op "Revolution" :op "Bolivarian"))
Span 14-15:  but => contrast-01
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 2-3:  famously => famous
Span 13-14:  peaceful => peaceful
Span 3-4:  said => say-01
Span 7-8:  so => so
Span 6-7:  Venezuelan => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),but,contrast-01,false), Span(13,14,List(1),peaceful,peaceful,false), Span(10,12,List(5, 4, 3, 2),Bolivarian revolution,(event :name (name :op "Revolution" :op "Bolivarian")),false), Span(7,8,List(6),so,so,false), Span(6,7,List(9, 8, 7),Venezuelan,(country :name (name :op "Venezuela")),false), Span(3,4,List(10),said,say-01,false), Span(2,3,List(11),famously,famous,false), Span(0,1,List(14, 13, 12),Chavez,(person :name (name :op "Chavez")),false)),Map(2 -> event, 5 -> "Bolivarian", 12 -> person, 8 -> name, 7 -> country, 1 -> peaceful, 4 -> "Revolution", 11 -> famous, 14 -> "Chavez", 6 -> so, 0 -> contrast-01, 9 -> "Venezuela", 3 -> name, 10 -> say-01, 13 -> name),Map(n -> name, e -> event, s2 -> say-01, p2 -> person, s -> so, p -> peaceful, n3 -> name, c -> contrast-01, f -> famous, n2 -> name, c2 -> country))),[Ljava.lang.String;@4e858e0a,Annotation([Ljava.lang.String;@435fb7b5,[Ljava.lang.String;@4e70a728,[Ljava.lang.String;@b7838a9),Annotation([Ljava.lang.String;@696f0212,[Ljava.lang.String;@5733f295,[Ledu.cmu.lti.nlp.amr.Dependency;@1c3146bc),Annotation([Ljava.lang.String;@56c698e3,[Ljava.lang.String;@47a86fbb,[Ljava.lang.String;@f478a81),Annotation([Ljava.lang.String;@19553973,[Ljava.lang.String;@7bb6ab3a,[Ledu.cmu.lti.nlp.amr.Entity;@7fe7c640))
AMR:
(c / contrast-01, ARG1, p / peaceful)
(c2 / country, name, n2 / name)
(e / event, mod, c2 / country)
(e / event, mod, s / so)
(e / event, name, n / name)
(n / name, op, "Bolivarian")
(n / name, op, "Revolution")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Chavez")
(p / peaceful, domain, e / event)
(p2 / person, name, n3 / name)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, c / contrast-01)
(s2 / say-01, manner, f / famous)

Decoded in 221,728 microseconds
Sentence: Chavez was first elected in 980000 and has a popularity rating of 71 percent in an independent poll by polling firm Datanalisis.

NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(980000,00,00,98)
NER Entity: (organization :name (name :op "Datanalisis"))
NER Entity: (organization :name (name :op "Datanalisis"))
mkDayMonthYear(980000,00,00,98)
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 12-13:  71 => 71
Span 5-6:  980000 => (date-entity :year 1998)
Span 6-7:  and => and
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 21-22:  Datanalisis => (name :op "Datanalisis")
Span 3-4:  elected => elect-01
Span 20-21:  firm => firm
Span 16-17:  independent => (depend-01 :polarity -)
Span 13-14:  percent => percentage-entity
Span 17-18:  poll => poll-01
Span 9-10:  popularity => popularity
Span 10-11:  rating => rate-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(1, 0),Datanalisis,(name :op "Datanalisis"),false), Span(20,21,List(2),firm,firm,false), Span(17,18,List(3),poll,poll-01,false), Span(16,17,List(5, 4),independent,(depend-01 :polarity -),false), Span(13,14,List(6),percent,percentage-entity,false), Span(12,13,List(7),71,71,false), Span(10,11,List(8),rating,rate-01,false), Span(9,10,List(9),popularity,popularity,false), Span(6,7,List(10),and,and,false), Span(5,6,List(12, 11),980000,(date-entity :year 1998),false), Span(3,4,List(13),elected,elect-01,false), Span(0,1,List(16, 15, 14),Chavez,(person :name (name :op "Chavez")),false)),Map(2 -> firm, 5 -> -, 12 -> 1998, 15 -> name, 8 -> rate-01, 7 -> 71, 1 -> "Datanalisis", 4 -> depend-01, 11 -> date-entity, 14 -> person, 6 -> percentage-entity, 0 -> name, 9 -> popularity, 16 -> "Chavez", 3 -> poll-01, 10 -> and, 13 -> elect-01),Map(e -> elect-01, n -> name, p2 -> percentage-entity, d -> depend-01, 7 -> 71, 1 -> 1998, p -> poll-01, a -> and, p4 -> person, d2 -> date-entity, r -> rate-01, f -> firm, p3 -> popularity, n2 -> name))),[Ljava.lang.String;@4c4748bf,Annotation([Ljava.lang.String;@7ce97ee5,[Ljava.lang.String;@32c8e539,[Ljava.lang.String;@73dce0e6),Annotation([Ljava.lang.String;@5a85c92,[Ljava.lang.String;@32811494,[Ledu.cmu.lti.nlp.amr.Dependency;@4795ded0),Annotation([Ljava.lang.String;@53dacd14,[Ljava.lang.String;@14d14731,[Ljava.lang.String;@2eced48b),Annotation([Ljava.lang.String;@47c4ecdc,[Ljava.lang.String;@42f33b5d,[Ledu.cmu.lti.nlp.amr.Entity;@5c8504fd))
AMR:
(a / and, op, e / elect-01)
(d / depend-01, ARG1, p / poll-01)
(d / depend-01, polarity, -)
(d2 / date-entity, year, 1 / 1998)
(e / elect-01, ARG1, p4 / person)
(f / firm, name, n / name)
(n / name, op, "Datanalisis")
(n2 / name, op, "Chavez")
(p / poll-01, ARG0, f / firm)
(p / poll-01, ARG1, d2 / date-entity)
(p2 / percentage-entity, value, 7 / 71)
(p3 / popularity, poss, p4 / person)
(p4 / person, name, n2 / name)
(r / rate-01, ARG0, p / poll-01)
(r / rate-01, ARG1, p3 / popularity)
(r / rate-01, ARG2, p2 / percentage-entity)

Decoded in 167,011 microseconds
Sentence: Venezuelan military analyst Alberto Garrido said Chavez is looking for allies in Russia, China, and Iran in order to promote a multi-polar world which will counteract US dominance and encourage grassroots Movements in Latin America to throw off US governmental influence.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (person :name (name :op "Alberto" :op "Garrido"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Venezuelan"))
Spans:
Span 3-5:  Alberto Garrido => (person :name (name :op "Garrido" :op "Alberto"))
Span 10-11:  allies => ally-01
Span 2-3:  analyst => analyze-01
Span 32-33:  and => and
Span 16-17:  and => and
Span 6-7:  Chavez => (person :name (name :op "Chavez"))
Span 14-15:  China => (country :name (name :op "China"))
Span 29-30:  counteract => counteract-01
Span 31-32:  dominance => dominate-01
Span 33-34:  encourage => encourage-01
Span 43-44:  governmental => (government-organization :ARG0-of govern-01)
Span 34-35:  grassroots => grassroot
Span 44-45:  influence => influence-01
Span 17-18:  Iran => (country :name (name :op "Iran"))
Span 8-9:  looking => look-01
Span 1-2:  military => military
Span 35-37:  Movements in => (country :name (name :op "Latin" :op "America"))
Span 41-42:  off => off
Span 25-26:  polar => polar
Span 21-22:  promote => promote-02
Span 12-13:  Russia => (country :name (name :op "Russia"))
Span 5-6:  said => say-01
Span 40-41:  throw => throw-01
Span 42-43:  US => (country :name (name :op "US"))
Span 30-31:  US => (country :name (name :op "US"))
Span 0-1:  Venezuelan => (country :name (name :op "Venezuela"))
Span 26-27:  world => world

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),influence,influence-01,false), Span(43,44,List(2, 1),governmental,(government-organization :ARG0-of govern-01),false), Span(42,43,List(5, 4, 3),US,(country :name (name :op "US")),false), Span(41,42,List(6),off,off,false), Span(40,41,List(7),throw,throw-01,false), Span(35,37,List(11, 10, 9, 8),Movements in,(country :name (name :op "Latin" :op "America")),false), Span(34,35,List(12),grassroots,grassroot,false), Span(33,34,List(13),encourage,encourage-01,false), Span(32,33,List(14),and,and,false), Span(31,32,List(15),dominance,dominate-01,false), Span(30,31,List(18, 17, 16),US,(country :name (name :op "US")),false), Span(29,30,List(19),counteract,counteract-01,false), Span(26,27,List(20),world,world,false), Span(25,26,List(21),polar,polar,false), Span(21,22,List(22),promote,promote-02,false), Span(17,18,List(25, 24, 23),Iran,(country :name (name :op "Iran")),false), Span(16,17,List(26),and,and,false), Span(14,15,List(29, 28, 27),China,(country :name (name :op "China")),false), Span(12,13,List(32, 31, 30),Russia,(country :name (name :op "Russia")),false), Span(10,11,List(33),allies,ally-01,false), Span(8,9,List(34),looking,look-01,false), Span(6,7,List(37, 36, 35),Chavez,(person :name (name :op "Chavez")),false), Span(5,6,List(38),said,say-01,false), Span(3,5,List(42, 41, 40, 39),Alberto Garrido,(person :name (name :op "Garrido" :op "Alberto")),false), Span(2,3,List(43),analyst,analyze-01,false), Span(1,2,List(44),military,military,false), Span(0,1,List(47, 46, 45),Venezuelan,(country :name (name :op "Venezuela")),false)),Map(45 -> country, 39 -> person, 30 -> country, 2 -> govern-01, 5 -> "US", 33 -> ally-01, 27 -> country, 12 -> grassroot, 8 -> country, 15 -> dominate-01, 42 -> "Alberto", 36 -> name, 21 -> polar, 18 -> "US", 24 -> name, 41 -> "Garrido", 35 -> person, 7 -> throw-01, 1 -> government-organization, 17 -> name, 44 -> military, 23 -> country, 38 -> say-01, 47 -> "Venezuela", 26 -> and, 4 -> name, 11 -> "America", 32 -> "Russia", 14 -> and, 29 -> "China", 20 -> world, 46 -> name, 34 -> look-01, 28 -> name, 6 -> off, 40 -> name, 43 -> analyze-01, 9 -> name, 0 -> influence-01, 22 -> promote-02, 16 -> country, 37 -> "Chavez", 19 -> counteract-01, 10 -> "Latin", 3 -> country, 31 -> name, 25 -> "Iran", 13 -> encourage-01),Map(e -> encourage-01, n -> name, w -> world, c8 -> country, g3 -> grassroot, t -> throw-01, n7 -> name, c7 -> country, p2 -> promote-02, a3 -> ally-01, c4 -> counteract-01, n4 -> name, s -> say-01, m -> military, d -> dominate-01, g2 -> govern-01, g -> government-organization, p -> polar, a -> and, c3 -> country, n3 -> name, p4 -> person, n6 -> name, c6 -> country, n9 -> name, i -> influence-01, a2 -> and, c -> country, l -> look-01, n8 -> name, o -> off, p3 -> person, n2 -> name, c2 -> country, a4 -> analyze-01, c5 -> country, n5 -> name))),[Ljava.lang.String;@4b7e96a,Annotation([Ljava.lang.String;@6475472c,[Ljava.lang.String;@3f07b12c,[Ljava.lang.String;@4bd1f8dd),Annotation([Ljava.lang.String;@7096b474,[Ljava.lang.String;@3e14c16d,[Ledu.cmu.lti.nlp.amr.Dependency;@3c989952),Annotation([Ljava.lang.String;@784b990c,[Ljava.lang.String;@3d3ba765,[Ljava.lang.String;@25bc0606),Annotation([Ljava.lang.String;@5d1659ea,[Ljava.lang.String;@793138bd,[Ledu.cmu.lti.nlp.amr.Entity;@1951b871))
AMR:
(a / and, op, e / encourage-01)
(a2 / and, op, c5 / country)
(a2 / and, op, c6 / country)
(a3 / ally-01, ARG1, c7 / country)
(a3 / ally-01, ARG2, p3 / person)
(a4 / analyze-01, ARG0, p4 / person)
(a4 / analyze-01, ARG1, m / military)
(c / country, name, n / name)
(c2 / country, mod, g3 / grassroot)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / counteract-01, ARG0, a / and)
(c4 / counteract-01, ARG1, d / dominate-01)
(c5 / country, name, n4 / name)
(c6 / country, name, n5 / name)
(c7 / country, name, n6 / name)
(c8 / country, name, n9 / name)
(d / dominate-01, ARG1, c3 / country)
(e / encourage-01, ARG0, w / world)
(e / encourage-01, ARG1, c2 / country)
(e / encourage-01, ARG2, t / throw-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / influence-01, ARG0, g / government-organization)
(l / look-01, ARG0, p3 / person)
(l / look-01, ARG1, a2 / and)
(n / name, op, "US")
(n2 / name, op, "America")
(n2 / name, op, "Latin")
(n3 / name, op, "US")
(n4 / name, op, "Iran")
(n5 / name, op, "China")
(n6 / name, op, "Russia")
(n7 / name, op, "Chavez")
(n8 / name, op, "Alberto")
(n8 / name, op, "Garrido")
(n9 / name, op, "Venezuela")
(o / off, op, i / influence-01)
(p2 / promote-02, ARG0, p4 / person)
(p2 / promote-02, ARG1, w / world)
(p3 / person, name, n7 / name)
(p4 / person, mod, c8 / country)
(p4 / person, name, n8 / name)
(s / say-01, ARG0, p4 / person)
(s / say-01, ARG1, l / look-01)
(t / throw-01, ARG1, i / influence-01)
(w / world, mod, p / polar)

Decoded in 3,449,075 microseconds
Sentence: Lorenzo Campos is a farmer in Anzoategui state in northern Venezuela and is training as a reservist.

NER Entity: (person :name (name :op "Lorenzo" :op "Campos"))
NER Entity: (country :name (name :op "Anzoategui"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Anzoategui"))
Spans:
Span 11-12:  and => and
Span 6-7:  Anzoategui => (name :op "Anzoategui")
Span 4-5:  farmer => farm-01
Span 0-2:  Lorenzo Campos => (person :name (name :op "Campos" :op "Lorenzo"))
Span 9-10:  northern => north
Span 16-17:  reservist => reservist
Span 7-8:  state => state
Span 13-14:  training => train-01
Span 10-11:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),reservist,reservist,false), Span(13,14,List(1),training,train-01,false), Span(11,12,List(2),and,and,false), Span(10,11,List(5, 4, 3),Venezuela,(country :name (name :op "Venezuela")),false), Span(9,10,List(6),northern,north,false), Span(7,8,List(7),state,state,false), Span(6,7,List(9, 8),Anzoategui,(name :op "Anzoategui"),false), Span(4,5,List(10),farmer,farm-01,false), Span(0,2,List(14, 13, 12, 11),Lorenzo Campos,(person :name (name :op "Campos" :op "Lorenzo")),false)),Map(2 -> and, 5 -> "Venezuela", 12 -> name, 8 -> name, 7 -> state, 1 -> train-01, 4 -> name, 11 -> person, 14 -> "Lorenzo", 6 -> north, 0 -> reservist, 9 -> "Anzoategui", 3 -> country, 10 -> farm-01, 13 -> "Campos"),Map(n -> name, t -> train-01, n4 -> name, s -> state, p -> person, n3 -> name, a -> and, r -> reservist, c -> country, f -> farm-01, n2 -> north))),[Ljava.lang.String;@5c18016b,Annotation([Ljava.lang.String;@33aeca0b,[Ljava.lang.String;@43aaf813,[Ljava.lang.String;@57ac5227),Annotation([Ljava.lang.String;@4ba302e0,[Ljava.lang.String;@e98770d,[Ledu.cmu.lti.nlp.amr.Dependency;@1ae67cad),Annotation([Ljava.lang.String;@2f6e28bc,[Ljava.lang.String;@7c098bb3,[Ljava.lang.String;@31e4bb20),Annotation([Ljava.lang.String;@18cebaa5,[Ljava.lang.String;@463b4ac8,[Ledu.cmu.lti.nlp.amr.Entity;@765f05af))
AMR:
(a / and, op, p / person)
(a / and, op, t / train-01)
(c / country, name, n / name)
(c / country, part, n2 / north)
(f / farm-01, ARG0, p / person)
(f / farm-01, ARG1, n2 / north)
(n / name, op, "Venezuela")
(n3 / name, op, "Anzoategui")
(n4 / name, op, "Campos")
(n4 / name, op, "Lorenzo")
(p / person, location, s / state)
(p / person, name, n4 / name)
(s / state, name, n3 / name)
(t / train-01, ARG1, r / reservist)
(t / train-01, ARG2, p / person)

Decoded in 133,930 microseconds
Sentence: Campos said Venezuelans want the world to know that Venezuelans are not preparing to attack anyone and that the mission is to protect Venezuela.

NER Entity: (person :name (name :op "Campos"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (person :name (name :op "Campos"))
Spans:
Span 16-17:  and => and
Span 15-16:  anyone => anyone
Span 14-15:  attack => attack-01
Span 0-1:  Campos => (person :name (name :op "Campos"))
Span 7-8:  know => know-01
Span 19-20:  mission => mission
Span 12-13:  preparing => prepare-01
Span 22-23:  protect => protect-01
Span 1-2:  said => say-01
Span 23-24:  Venezuela => (country :name (name :op "Venezuela"))
Span 9-10:  Venezuelans => (person :mod (country :name (name :op "Venezuela")))
Span 2-3:  Venezuelans => (person :mod (country :name (name :op "Venezuela")))
Span 3-4:  want => want-01
Span 5-6:  world => world

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(2, 1, 0),Venezuela,(country :name (name :op "Venezuela")),false), Span(22,23,List(3),protect,protect-01,false), Span(19,20,List(4),mission,mission,false), Span(16,17,List(5),and,and,false), Span(15,16,List(6),anyone,anyone,false), Span(14,15,List(7),attack,attack-01,false), Span(12,13,List(8),preparing,prepare-01,false), Span(9,10,List(12, 11, 10, 9),Venezuelans,(person :mod (country :name (name :op "Venezuela"))),false), Span(7,8,List(13),know,know-01,false), Span(5,6,List(14),world,world,false), Span(3,4,List(15),want,want-01,false), Span(2,3,List(19, 18, 17, 16),Venezuelans,(person :mod (country :name (name :op "Venezuela"))),false), Span(1,2,List(20),said,say-01,false), Span(0,1,List(23, 22, 21),Campos,(person :name (name :op "Campos")),false)),Map(2 -> "Venezuela", 5 -> and, 12 -> "Venezuela", 15 -> want-01, 8 -> prepare-01, 21 -> person, 18 -> name, 7 -> attack-01, 17 -> country, 1 -> name, 23 -> "Campos", 4 -> mission, 11 -> name, 14 -> world, 20 -> say-01, 6 -> anyone, 22 -> name, 0 -> country, 9 -> person, 16 -> person, 19 -> "Venezuela", 3 -> protect-01, 10 -> country, 13 -> know-01),Map(n -> name, w -> world, p5 -> person, k -> know-01, p2 -> prepare-01, n4 -> name, a3 -> attack-01, s -> say-01, m -> mission, p -> protect-01, n3 -> name, c3 -> country, a -> and, p4 -> person, w2 -> want-01, a2 -> anyone, c -> country, p3 -> person, c2 -> country, n2 -> name))),[Ljava.lang.String;@62f68dff,Annotation([Ljava.lang.String;@f001896,[Ljava.lang.String;@13f17eb4,[Ljava.lang.String;@1d0d6318),Annotation([Ljava.lang.String;@4bc28c33,[Ljava.lang.String;@4409e975,[Ledu.cmu.lti.nlp.amr.Dependency;@5c153b9e),Annotation([Ljava.lang.String;@2a7686a7,[Ljava.lang.String;@758a34ce,[Ljava.lang.String;@7ec3394b),Annotation([Ljava.lang.String;@bff34c6,[Ljava.lang.String;@1522d8a0,[Ledu.cmu.lti.nlp.amr.Entity;@312ab28e))
AMR:
(a / and, op, p2 / prepare-01)
(a3 / attack-01, ARG0, c / country)
(a3 / attack-01, ARG1, a2 / anyone)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(k / know-01, ARG0, w / world)
(k / know-01, ARG1, a / and)
(m / mission, purpose, p / protect-01)
(n / name, op, "Venezuela")
(n2 / name, op, "Venezuela")
(n3 / name, op, "Venezuela")
(n4 / name, op, "Campos")
(p / protect-01, ARG1, c / country)
(p2 / prepare-01, ARG0, p3 / person)
(p2 / prepare-01, ARG1, a3 / attack-01)
(p3 / person, mod, c2 / country)
(p4 / person, mod, c3 / country)
(p5 / person, name, n4 / name)
(s / say-01, ARG0, p5 / person)
(s / say-01, ARG1, w2 / want-01)
(w2 / want-01, ARG0, p4 / person)
(w2 / want-01, ARG1, k / know-01)

Decoded in 1,909,770 microseconds
Sentence: In May, Chavez's government announced details in 050500 of an $18.6 million deal with a Russian firm to purchase 100000 AK-103 assault rifles with 30 rounds of ammunition each and the technology transfer for Venezuela to manufacture the rifles.

NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(050500,00,05,05)
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "AK" :op "-" :op "103"))
mkDayMonthYear(100000,00,00,10)
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (thing :name (name :op "AK" :op "-" :op "103"))
mkDayMonthYear(100000,00,00,10)
mkDayMonthYear(050500,00,05,05)
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 9-10:  050500 => (date-entity :month 5 :year 2005)
Span 22-23:  100000 => (date-entity :day 0 :month 0 :year 10)
Span 29-30:  30 => 30
Span 23-24:  AK => (name :op "AK-103")
Span 32-33:  ammunition => ammunition
Span 34-35:  and => and
Span 6-7:  announced => announce-01
Span 26-27:  assault => assault-01
Span 3-4:  Chavez => (person :name (name :op "Chavez"))
Span 15-16:  deal => deal-01
Span 7-8:  details => detail-01
Span 33-34:  each => each
Span 19-20:  firm => firm
Span 5-6:  government => (government-organization :ARG0-of govern-01)
Span 41-42:  manufacture => manufacture-01
Span 1-2:  May => (date-entity :month 5)
Span 21-22:  purchase => purchase-01
Span 43-44:  rifles => rifle
Span 27-28:  rifles => rifle
Span 30-31:  rounds => round
Span 18-19:  Russian => (country :name (name :op "Russia"))
Span 36-37:  technology => technology
Span 37-38:  transfer => transfer-01
Span 39-40:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),rifles,rifle,false), Span(41,42,List(1),manufacture,manufacture-01,false), Span(39,40,List(4, 3, 2),Venezuela,(country :name (name :op "Venezuela")),false), Span(37,38,List(5),transfer,transfer-01,false), Span(36,37,List(6),technology,technology,false), Span(34,35,List(7),and,and,false), Span(33,34,List(8),each,each,false), Span(32,33,List(9),ammunition,ammunition,false), Span(30,31,List(10),rounds,round,false), Span(29,30,List(11),30,30,false), Span(27,28,List(12),rifles,rifle,false), Span(26,27,List(13),assault,assault-01,false), Span(23,24,List(15, 14),AK,(name :op "AK-103"),false), Span(22,23,List(19, 18, 17, 16),100000,(date-entity :day 0 :month 0 :year 10),false), Span(21,22,List(20),purchase,purchase-01,false), Span(19,20,List(21),firm,firm,false), Span(18,19,List(24, 23, 22),Russian,(country :name (name :op "Russia")),false), Span(15,16,List(25),deal,deal-01,false), Span(9,10,List(28, 27, 26),050500,(date-entity :month 5 :year 2005),false), Span(7,8,List(29),details,detail-01,false), Span(6,7,List(30),announced,announce-01,false), Span(5,6,List(32, 31),government,(government-organization :ARG0-of govern-01),false), Span(3,4,List(35, 34, 33),Chavez,(person :name (name :op "Chavez")),false), Span(1,2,List(37, 36),May,(date-entity :month 5),false)),Map(30 -> announce-01, 2 -> country, 5 -> transfer-01, 33 -> person, 27 -> 5, 12 -> rifle, 8 -> each, 15 -> "AK-103", 36 -> date-entity, 21 -> firm, 18 -> 0, 24 -> "Russia", 35 -> "Chavez", 7 -> and, 1 -> manufacture-01, 17 -> 0, 23 -> name, 26 -> date-entity, 4 -> "Venezuela", 11 -> 30, 32 -> govern-01, 14 -> name, 29 -> detail-01, 20 -> purchase-01, 34 -> name, 28 -> 2005, 6 -> technology, 9 -> ammunition, 0 -> rifle, 22 -> country, 16 -> date-entity, 37 -> 5, 19 -> 10, 10 -> round, 3 -> name, 31 -> government-organization, 25 -> deal-01, 13 -> assault-01),Map(e -> each, n -> name, r3 -> rifle, 2 -> 2005, 5 -> 5, t -> transfer-01, d3 -> date-entity, p2 -> person, n4 -> name, a3 -> assault-01, m -> manufacture-01, d -> date-entity, g2 -> govern-01, 1 -> 10, r2 -> round, g -> government-organization, p -> purchase-01, a -> and, n3 -> name, d2 -> deal-01, d5 -> date-entity, 02 -> 0, t2 -> technology, 52 -> 5, a2 -> ammunition, r -> rifle, c -> country, d4 -> detail-01, 0 -> 0, f -> firm, 3 -> 30, n2 -> name, c2 -> country, a4 -> announce-01))),[Ljava.lang.String;@5644dc81,Annotation([Ljava.lang.String;@246f8b8b,[Ljava.lang.String;@278bb07e,[Ljava.lang.String;@4351c8c3),Annotation([Ljava.lang.String;@3381b4fc,[Ljava.lang.String;@6bea52d4,[Ledu.cmu.lti.nlp.amr.Dependency;@11981797),Annotation([Ljava.lang.String;@5c42d2b7,[Ljava.lang.String;@625abb97,[Ljava.lang.String;@5b1f29fa),Annotation([Ljava.lang.String;@aeab9a1,[Ljava.lang.String;@40f70521,[Ledu.cmu.lti.nlp.amr.Entity;@774698ab))
AMR:
(a / and, op, d4 / detail-01)
(a / and, op, t / transfer-01)
(a2 / ammunition, consist, r2 / round)
(a3 / assault-01, ARG1, r3 / rifle)
(a4 / announce-01, ARG0, g / government-organization)
(a4 / announce-01, ARG1, a / and)
(a4 / announce-01, time, d3 / date-entity)
(a4 / announce-01, time, d5 / date-entity)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 1 / 10)
(d2 / deal-01, ARG1, p / purchase-01)
(d3 / date-entity, month, 5 / 5)
(d3 / date-entity, year, 2 / 2005)
(d4 / detail-01, ARG1, d2 / deal-01)
(d5 / date-entity, month, 52 / 5)
(f / firm, mod, c2 / country)
(g / government-organization, poss, p2 / person)
(g2 / govern-01, ARG0, g / government-organization)
(m / manufacture-01, ARG0, r3 / rifle)
(m / manufacture-01, ARG1, r / rifle)
(n / name, op, "Venezuela")
(n2 / name, op, "AK-103")
(n3 / name, op, "Russia")
(n4 / name, op, "Chavez")
(p / purchase-01, ARG0, f / firm)
(p / purchase-01, ARG1, r3 / rifle)
(p2 / person, name, n4 / name)
(r2 / round, quant, 3 / 30)
(r3 / rifle, accompanier, r2 / round)
(r3 / rifle, mod, e / each)
(r3 / rifle, name, n2 / name)
(r3 / rifle, quant, d / date-entity)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, ARG2, c / country)

Decoded in 2,716,221 microseconds
Sentence: The deal works out to $186.22 per rifle.

Spans:
Span 6-7:  186.22 => 186.22
Span 1-2:  deal => deal-01
Span 3-4:  out => out
Span 8-9:  rifle => rifle
Span 2-3:  works => work-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),rifle,rifle,false), Span(6,7,List(1),186.22,186.22,false), Span(3,4,List(2),out,out,false), Span(2,3,List(3),works,work-01,false), Span(1,2,List(4),deal,deal-01,false)),Map(2 -> out, 1 -> 186.22, 4 -> deal-01, 0 -> rifle, 3 -> work-01),Map(w -> work-01, d -> deal-01, 1 -> 186.22, r -> rifle, o -> out))),[Ljava.lang.String;@55342f40,Annotation([Ljava.lang.String;@a4ca3f6,[Ljava.lang.String;@72ea6193,[Ljava.lang.String;@31aa3ca5),Annotation([Ljava.lang.String;@45905bff,[Ljava.lang.String;@2a2c13a8,[Ledu.cmu.lti.nlp.amr.Dependency;@b6b1987),Annotation([Ljava.lang.String;@6b44435b,[Ljava.lang.String;@2ccca26f,[Ljava.lang.String;@66b7550d),Annotation([Ljava.lang.String;@3543df7d,[Ljava.lang.String;@7c541c15,[Ledu.cmu.lti.nlp.amr.Entity;@3542162a))
AMR:
(d / deal-01, ARG1, r / rifle)
(o / out, op, 1 / 186.22)
(w / work-01, ARG1, d / deal-01)
(w / work-01, ARG5, o / out)

Decoded in 29,658 microseconds
Sentence: This price is considerably less costly than the US mail-order price of $825 to $850 for the same weapon.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 15-16:  825 => 825
Span 18-19:  850 => 850
Span 3-4:  considerably => considerable
Span 5-6:  costly => costly
Span 4-5:  less => less
Span 9-10:  mail => mail
Span 12-13:  price => (thing :ARG2-of price-01)
Span 1-2:  price => (thing :ARG2-of price-01)
Span 21-22:  same => same-41
Span 0-1:  This => this
Span 8-9:  US => (country :name (name :op "US"))
Span 22-23:  weapon => weapon

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),weapon,weapon,false), Span(21,22,List(1),same,same-41,false), Span(18,19,List(2),850,850,false), Span(15,16,List(3),825,825,false), Span(12,13,List(5, 4),price,(thing :ARG2-of price-01),false), Span(9,10,List(6),mail,mail,false), Span(8,9,List(9, 8, 7),US,(country :name (name :op "US")),false), Span(5,6,List(10),costly,costly,false), Span(4,5,List(11),less,less,false), Span(3,4,List(12),considerably,considerable,false), Span(1,2,List(14, 13),price,(thing :ARG2-of price-01),false), Span(0,1,List(15),This,this,false)),Map(2 -> 850, 5 -> price-01, 12 -> considerable, 15 -> this, 8 -> name, 7 -> country, 1 -> same-41, 4 -> thing, 11 -> less, 14 -> price-01, 6 -> mail, 0 -> weapon, 9 -> "US", 3 -> 825, 10 -> costly, 13 -> thing),Map(w -> weapon, n -> name, t -> thing, 8 -> 850, p2 -> price-01, s -> same-41, m -> mail, t3 -> this, p -> price-01, c3 -> considerable, 82 -> 825, t2 -> thing, c -> country, l -> less, c2 -> costly))),[Ljava.lang.String;@698122b2,Annotation([Ljava.lang.String;@4212a0c8,[Ljava.lang.String;@1e7aa82b,[Ljava.lang.String;@3b2c0e88),Annotation([Ljava.lang.String;@5bd82fed,[Ljava.lang.String;@c1bd0be,[Ledu.cmu.lti.nlp.amr.Dependency;@476b0ae6),Annotation([Ljava.lang.String;@1c6804cd,[Ljava.lang.String;@655f7ea,[Ljava.lang.String;@549949be),Annotation([Ljava.lang.String;@4b3a45f1,[Ljava.lang.String;@17a87e37,[Ledu.cmu.lti.nlp.amr.Entity;@3eeb318f))
AMR:
(82 / 825, calendar, 8 / 850)
(c / country, name, n / name)
(c2 / costly, degree, l / less)
(c2 / costly, domain, t2 / thing)
(l / less, manner, c3 / considerable)
(m / mail, mod, c / country)
(m / mail, mod, w / weapon)
(n / name, op, "US")
(p / price-01, ARG1, w / weapon)
(p / price-01, ARG2, t / thing)
(p2 / price-01, ARG1, 8 / 850)
(p2 / price-01, ARG2, t2 / thing)
(s / same-41, ARG0, t2 / thing)
(s / same-41, ARG1, w / weapon)
(t2 / thing, mod, t3 / this)

Decoded in 457,810 microseconds
Sentence: The Government of Venezuela also intends to buy 10 Russian helicopters, 10 Spanish transport planes, and 6 Spanish naval craft.

NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Spanish"))
NER Entity: (thing :name (name :op "Spanish"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 12-13:  10 => 10
Span 8-9:  10 => 10
Span 18-19:  6 => 6
Span 4-5:  also => also
Span 17-18:  and => and
Span 7-8:  buy => buy-01
Span 21-22:  craft => craft
Span 1-2:  Government => (government-organization :ARG0-of govern-01)
Span 10-11:  helicopters => helicopter
Span 5-6:  intends => intend-01
Span 15-16:  planes => plane
Span 9-10:  Russian => (country :name (name :op "Russia"))
Span 14-15:  transport => transport-01
Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),craft,craft,false), Span(18,19,List(1),6,6,false), Span(17,18,List(2),and,and,false), Span(15,16,List(3),planes,plane,false), Span(14,15,List(4),transport,transport-01,false), Span(12,13,List(5),10,10,false), Span(10,11,List(6),helicopters,helicopter,false), Span(9,10,List(9, 8, 7),Russian,(country :name (name :op "Russia")),false), Span(8,9,List(10),10,10,false), Span(7,8,List(11),buy,buy-01,false), Span(5,6,List(12),intends,intend-01,false), Span(4,5,List(13),also,also,false), Span(3,4,List(16, 15, 14),Venezuela,(country :name (name :op "Venezuela")),false), Span(1,2,List(18, 17),Government,(government-organization :ARG0-of govern-01),false)),Map(2 -> and, 5 -> 10, 12 -> intend-01, 15 -> name, 8 -> name, 18 -> govern-01, 7 -> country, 17 -> government-organization, 1 -> 6, 4 -> transport-01, 11 -> buy-01, 14 -> country, 6 -> helicopter, 0 -> craft, 9 -> "Russia", 16 -> "Venezuela", 3 -> plane, 10 -> 10, 13 -> also),Map(n -> name, h -> helicopter, t -> transport-01, 12 -> 10, b -> buy-01, g2 -> govern-01, 1 -> 10, g -> government-organization, p -> plane, c3 -> country, a -> and, i -> intend-01, a2 -> also, c -> craft, 6 -> 6, n2 -> name, c2 -> country))),[Ljava.lang.String;@20a14b55,Annotation([Ljava.lang.String;@39ad977d,[Ljava.lang.String;@6da00fb9,[Ljava.lang.String;@a202ccb),Annotation([Ljava.lang.String;@20f12539,[Ljava.lang.String;@75b25825,[Ledu.cmu.lti.nlp.amr.Dependency;@18025ced),Annotation([Ljava.lang.String;@13cf7d52,[Ljava.lang.String;@3a3e4aff,[Ljava.lang.String;@5d2a4eed),Annotation([Ljava.lang.String;@57459491,[Ljava.lang.String;@3f0846c6,[Ledu.cmu.lti.nlp.amr.Entity;@77a98a6a))
AMR:
(a / and, op, c / craft)
(a / and, op, h / helicopter)
(a / and, op, p / plane)
(b / buy-01, ARG0, g / government-organization)
(b / buy-01, ARG1, a / and)
(c / craft, quant, 6 / 6)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / helicopter, quant, 1 / 10)
(i / intend-01, ARG0, g / government-organization)
(i / intend-01, ARG1, b / buy-01)
(i / intend-01, mod, a2 / also)
(n / name, op, "Russia")
(n2 / name, op, "Venezuela")
(p / plane, mod, t / transport-01)
(p / plane, quant, 12 / 10)
(t / transport-01, ARG1, c2 / country)

Decoded in 932,030 microseconds
Sentence: Venezuelan officials say the government is negotiating with Brazil to buy around 24 air support and training planes.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "Venezuelan"))
Spans:
Span 12-13:  24 => 24
Span 13-14:  air => air
Span 15-16:  and => and
Span 11-12:  around => around
Span 8-9:  Brazil => (country :name (name :op "Brazil"))
Span 10-11:  buy => buy-01
Span 4-5:  government => (government-organization :ARG0-of govern-01)
Span 6-7:  negotiating => negotiate-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 17-18:  planes => plane
Span 2-3:  say => say-01
Span 14-15:  support => support-01
Span 16-17:  training => train-01
Span 0-1:  Venezuelan => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),planes,plane,false), Span(16,17,List(1),training,train-01,false), Span(15,16,List(2),and,and,false), Span(14,15,List(3),support,support-01,false), Span(13,14,List(4),air,air,false), Span(12,13,List(5),24,24,false), Span(11,12,List(6),around,around,false), Span(10,11,List(7),buy,buy-01,false), Span(8,9,List(10, 9, 8),Brazil,(country :name (name :op "Brazil")),false), Span(6,7,List(11),negotiating,negotiate-01,false), Span(4,5,List(13, 12),government,(government-organization :ARG0-of govern-01),false), Span(2,3,List(14),say,say-01,false), Span(1,2,List(16, 15),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(19, 18, 17),Venezuelan,(country :name (name :op "Venezuela")),false)),Map(2 -> and, 5 -> 24, 12 -> government-organization, 15 -> have-org-role-91, 8 -> country, 18 -> name, 7 -> buy-01, 17 -> country, 1 -> train-01, 4 -> air, 11 -> negotiate-01, 14 -> say-01, 6 -> around, 0 -> plane, 9 -> name, 16 -> official, 19 -> "Venezuela", 3 -> support-01, 10 -> "Brazil", 13 -> govern-01),Map(n -> name, h -> have-org-role-91, 2 -> 24, s2 -> say-01, t -> train-01, b -> buy-01, a3 -> around, s -> support-01, g2 -> govern-01, p -> plane, g -> government-organization, n3 -> name, a -> and, a2 -> air, c -> country, o -> official, c2 -> country, n2 -> negotiate-01))),[Ljava.lang.String;@78fbff54,Annotation([Ljava.lang.String;@3e10dc6,[Ljava.lang.String;@7e22550a,[Ljava.lang.String;@45e37a7e),Annotation([Ljava.lang.String;@62452cc9,[Ljava.lang.String;@6941827a,[Ledu.cmu.lti.nlp.amr.Dependency;@5a7005d),Annotation([Ljava.lang.String;@5bc9ba1d,[Ljava.lang.String;@1021f6c9,[Ljava.lang.String;@7516e4e5),Annotation([Ljava.lang.String;@488eb7f2,[Ljava.lang.String;@5e81e5ac,[Ledu.cmu.lti.nlp.amr.Entity;@4189d70b))
AMR:
(a / and, op, p / plane)
(a / and, op, s / support-01)
(a / and, quant, a3 / around)
(a3 / around, op, 2 / 24)
(b / buy-01, ARG0, g / government-organization)
(b / buy-01, ARG1, a / and)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(g2 / govern-01, ARG0, g / government-organization)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Brazil")
(n2 / negotiate-01, ARG0, g / government-organization)
(n2 / negotiate-01, ARG1, c / country)
(n2 / negotiate-01, ARG2, b / buy-01)
(n3 / name, op, "Venezuela")
(p / plane, purpose, t / train-01)
(s / support-01, ARG1, a2 / air)
(s2 / say-01, ARG1, n2 / negotiate-01)
(t / train-01, ARG1, h / have-org-role-91)

Decoded in 775,413 microseconds
Sentence: Chavez has insisted and even his staunchest retired military Critics here agree that the purchases are essential to update old weaponry such as the military's decades-old Belgian FAL rifles.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Belgian"))
NER Entity: (organization :name (name :op "FAL"))
NER Entity: (organization :name (name :op "FAL"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 11-12:  agree => agree-01
Span 3-4:  and => and
Span 29-30:  Belgian => (country :name (name :op "Belgium"))
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 9-10:  Critics => (person :ARG0-of criticize-01)
Span 26-27:  decades => (temporal-quantity :unit decade)
Span 16-17:  essential => essential
Span 4-5:  even => even
Span 30-31:  FAL => (name :op "FAL")
Span 10-11:  here => here
Span 2-3:  insisted => insist-01
Span 24-25:  military => military
Span 8-9:  military => military
Span 28-29:  old => old
Span 19-20:  old => old
Span 14-15:  purchases => purchase-01
Span 7-8:  retired => retire-01
Span 31-32:  rifles => rifle
Span 6-7:  staunchest => (staunch :degree most)
Span 21-22:  such => such
Span 18-19:  update => update-01
Span 20-21:  weaponry => weaponry

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),rifles,rifle,false), Span(30,31,List(2, 1),FAL,(name :op "FAL"),false), Span(29,30,List(5, 4, 3),Belgian,(country :name (name :op "Belgium")),false), Span(28,29,List(6),old,old,false), Span(26,27,List(8, 7),decades,(temporal-quantity :unit decade),false), Span(24,25,List(9),military,military,false), Span(21,22,List(10),such,such,false), Span(20,21,List(11),weaponry,weaponry,false), Span(19,20,List(12),old,old,false), Span(18,19,List(13),update,update-01,false), Span(16,17,List(14),essential,essential,false), Span(14,15,List(15),purchases,purchase-01,false), Span(11,12,List(16),agree,agree-01,false), Span(10,11,List(17),here,here,false), Span(9,10,List(19, 18),Critics,(person :ARG0-of criticize-01),false), Span(8,9,List(20),military,military,false), Span(7,8,List(21),retired,retire-01,false), Span(6,7,List(23, 22),staunchest,(staunch :degree most),false), Span(4,5,List(24),even,even,false), Span(3,4,List(25),and,and,false), Span(2,3,List(26),insisted,insist-01,false), Span(0,1,List(29, 28, 27),Chavez,(person :name (name :op "Chavez")),false)),Map(2 -> "FAL", 5 -> "Belgium", 27 -> person, 12 -> old, 8 -> decade, 15 -> purchase-01, 21 -> retire-01, 18 -> person, 24 -> even, 7 -> temporal-quantity, 1 -> name, 17 -> here, 23 -> most, 26 -> insist-01, 4 -> name, 11 -> weaponry, 14 -> essential, 29 -> "Chavez", 20 -> military, 28 -> name, 6 -> old, 9 -> military, 0 -> rifle, 22 -> staunch, 16 -> agree-01, 19 -> criticize-01, 10 -> such, 3 -> country, 25 -> and, 13 -> update-01),Map(e -> essential, m3 -> most, w -> weaponry, n -> name, h -> here, s2 -> staunch, t -> temporal-quantity, m2 -> military, p2 -> person, e2 -> even, s -> such, m -> military, d -> decade, r2 -> retire-01, p -> purchase-01, n3 -> name, a -> agree-01, o2 -> old, r -> rifle, a2 -> and, i -> insist-01, c -> country, u -> update-01, o -> old, p3 -> person, n2 -> name, c2 -> criticize-01))),[Ljava.lang.String;@3fa2213,Annotation([Ljava.lang.String;@3e7634b9,[Ljava.lang.String;@6f0b0a5e,[Ljava.lang.String;@6035b93b),Annotation([Ljava.lang.String;@320de594,[Ljava.lang.String;@3dd1dc90,[Ledu.cmu.lti.nlp.amr.Dependency;@abf688e),Annotation([Ljava.lang.String;@478ee483,[Ljava.lang.String;@1a7288a3,[Ljava.lang.String;@2974f221),Annotation([Ljava.lang.String;@58fe0499,[Ljava.lang.String;@686449f9,[Ledu.cmu.lti.nlp.amr.Entity;@665df3c6))
AMR:
(a / agree-01, ARG0, p2 / person)
(a / agree-01, ARG1, e / essential)
(a2 / and, op, i / insist-01)
(c / country, name, n2 / name)
(c2 / criticize-01, ARG0, p2 / person)
(c2 / criticize-01, ARG1, p3 / person)
(e / essential, domain, p / purchase-01)
(e / essential, purpose, u / update-01)
(i / insist-01, ARG0, p3 / person)
(i / insist-01, ARG1, s / such)
(n / name, op, "FAL")
(n2 / name, op, "Belgium")
(n3 / name, op, "Chavez")
(p2 / person, location, h / here)
(p2 / person, mod, e2 / even)
(p2 / person, mod, m / military)
(p2 / person, mod, s2 / staunch)
(p3 / person, name, n3 / name)
(r / rifle, mod, o / old)
(r / rifle, name, n / name)
(r / rifle, poss, m2 / military)
(r / rifle, source, c / country)
(r2 / retire-01, ARG0, p2 / person)
(r2 / retire-01, ARG1, t / temporal-quantity)
(s2 / staunch, degree, m3 / most)
(t / temporal-quantity, unit, d / decade)
(u / update-01, ARG1, w / weaponry)
(w / weaponry, example, r / rifle)
(w / weaponry, mod, o2 / old)

Decoded in 1,621,457 microseconds
Sentence: Retired General Fernando OCHOA ANTICH said that it is an exaggeration to say Chavez is engaged in an arms buildup.

NER Entity: (person :name (name :op "Fernando" :op "OCHOA" :op "ANTICH"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 18-19:  arms => arm
Span 19-20:  buildup => buildup
Span 13-14:  Chavez => (person :name (name :op "Chavez"))
Span 15-16:  engaged => engage-01
Span 10-11:  exaggeration => exaggerate-01
Span 2-5:  Fernando OCHOA ANTICH => (person :name (name :op "Antich" :op "Ochoa" :op "Fernando"))
Span 1-2:  General => (have-org-role-91 :ARG2 general)
Span 7-8:  it => it
Span 0-1:  Retired => retire-01
Span 5-6:  said => say-01
Span 12-13:  say => say-01

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),buildup,buildup,false), Span(18,19,List(1),arms,arm,false), Span(15,16,List(2),engaged,engage-01,false), Span(13,14,List(5, 4, 3),Chavez,(person :name (name :op "Chavez")),false), Span(12,13,List(6),say,say-01,false), Span(10,11,List(7),exaggeration,exaggerate-01,false), Span(7,8,List(8),it,it,false), Span(5,6,List(9),said,say-01,false), Span(2,5,List(14, 13, 12, 11, 10),Fernando OCHOA ANTICH,(person :name (name :op "Antich" :op "Ochoa" :op "Fernando")),false), Span(1,2,List(16, 15),General,(have-org-role-91 :ARG2 general),false), Span(0,1,List(17),Retired,retire-01,false)),Map(2 -> engage-01, 5 -> "Chavez", 12 -> "Antich", 15 -> have-org-role-91, 8 -> it, 7 -> exaggerate-01, 17 -> retire-01, 1 -> arm, 4 -> name, 11 -> name, 14 -> "Fernando", 6 -> say-01, 0 -> buildup, 9 -> say-01, 16 -> general, 3 -> person, 10 -> person, 13 -> "Ochoa"),Map(e -> engage-01, n -> name, h -> have-org-role-91, s2 -> say-01, b -> buildup, e2 -> exaggerate-01, p2 -> person, s -> say-01, p -> person, g -> general, a -> arm, r -> retire-01, i -> it, n2 -> name))),[Ljava.lang.String;@68b6f0d6,Annotation([Ljava.lang.String;@4044fb95,[Ljava.lang.String;@aa549e5,[Ljava.lang.String;@36f48b4),Annotation([Ljava.lang.String;@5c00384f,[Ljava.lang.String;@3b7ff809,[Ledu.cmu.lti.nlp.amr.Dependency;@1bb564e2),Annotation([Ljava.lang.String;@62e6b5c8,[Ljava.lang.String;@3f792b9b,[Ljava.lang.String;@7b8233cd),Annotation([Ljava.lang.String;@4b20ca2b,[Ljava.lang.String;@1cbf6e72,[Ledu.cmu.lti.nlp.amr.Entity;@6aecbb8d))
AMR:
(b / buildup, mod, a / arm)
(e / engage-01, ARG1, p / person)
(e / engage-01, ARG2, b / buildup)
(e2 / exaggerate-01, ARG1, s / say-01)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, g / general)
(n / name, op, "Chavez")
(n2 / name, op, "Antich")
(n2 / name, op, "Fernando")
(n2 / name, op, "Ochoa")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(r / retire-01, ARG0, p2 / person)
(s / say-01, ARG1, e / engage-01)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, e2 / exaggerate-01)
(s2 / say-01, ARG6, i / it)

Decoded in 638,528 microseconds
Sentence: Ochoa was defense minister in 920000 when then-Lieutenant Colonel Chavez launched a failed coup.

NER Entity: (person :name (name :op "Ochoa"))
mkDayMonthYear(920000,00,00,92)
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(920000,00,00,92)
NER Entity: (person :name (name :op "Ochoa"))
Spans:
Span 5-6:  920000 => (date-entity :year 1992)
Span 11-12:  Chavez => (person :name (name :op "Chavez"))
Span 10-11:  Colonel => colonel
Span 15-16:  coup => coup
Span 2-3:  defense => defense
Span 14-15:  failed => fail-01
Span 12-13:  launched => launch-01
Span 9-10:  Lieutenant => lieutenant
Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Span 0-1:  Ochoa => (person :name (name :op "Ochoa"))
Span 7-8:  then => then

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),coup,coup,false), Span(14,15,List(1),failed,fail-01,false), Span(12,13,List(2),launched,launch-01,false), Span(11,12,List(5, 4, 3),Chavez,(person :name (name :op "Chavez")),false), Span(10,11,List(6),Colonel,colonel,false), Span(9,10,List(7),Lieutenant,lieutenant,false), Span(7,8,List(8),then,then,false), Span(5,6,List(10, 9),920000,(date-entity :year 1992),false), Span(3,4,List(12, 11),minister,(have-org-role-91 :ARG2 minister),false), Span(2,3,List(13),defense,defense,false), Span(0,1,List(16, 15, 14),Ochoa,(person :name (name :op "Ochoa")),false)),Map(2 -> launch-01, 5 -> "Chavez", 12 -> minister, 15 -> name, 8 -> then, 7 -> lieutenant, 1 -> fail-01, 4 -> name, 11 -> have-org-role-91, 14 -> person, 6 -> colonel, 0 -> coup, 9 -> date-entity, 16 -> "Ochoa", 3 -> person, 10 -> 1992, 13 -> defense),Map(n -> name, h -> have-org-role-91, t -> then, p2 -> person, d -> date-entity, m -> minister, 1 -> 1992, p -> person, d2 -> defense, l2 -> lieutenant, c -> coup, l -> launch-01, f -> fail-01, n2 -> name, c2 -> colonel))),[Ljava.lang.String;@1af146,Annotation([Ljava.lang.String;@4da602fc,[Ljava.lang.String;@2a8d39c4,[Ljava.lang.String;@25b2cfcb),Annotation([Ljava.lang.String;@72758afa,[Ljava.lang.String;@fb9c7aa,[Ledu.cmu.lti.nlp.amr.Dependency;@4c398c80),Annotation([Ljava.lang.String;@7fc6de5b,[Ljava.lang.String;@21baa903,[Ljava.lang.String;@607fbe09),Annotation([Ljava.lang.String;@60a2630a,[Ljava.lang.String;@29df4d43,[Ledu.cmu.lti.nlp.amr.Entity;@5dd91bca))
AMR:
(c2 / colonel, mod, l2 / lieutenant)
(c2 / colonel, mod, t / then)
(c2 / colonel, name, n / name)
(d / date-entity, year, 1 / 1992)
(f / fail-01, ARG1, c / coup)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, d / date-entity)
(h / have-org-role-91, ARG2, m / minister)
(h / have-org-role-91, time, l / launch-01)
(l / launch-01, ARG0, p / person)
(l / launch-01, ARG1, c / coup)
(m / minister, mod, d2 / defense)
(n / name, op, "Chavez")
(n2 / name, op, "Ochoa")
(p / person, name, n / name)
(p2 / person, name, n2 / name)

Decoded in 293,916 microseconds
Sentence: Ochoa stated that Venezuela hasn't purchased arms in 25 years and said and Chavez is not aggressively buying weapons in a way that would threaten his neighbors.

NER Entity: (person :name (name :op "Ochoa"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Ochoa"))
Spans:
Span 9-10:  25 => 25
Span 17-18:  aggressively => aggressive
Span 13-14:  and => and
Span 11-12:  and => and
Span 7-8:  arms => arm
Span 18-19:  buying => buy-01
Span 14-15:  Chavez => (person :name (name :op "Chavez"))
Span 27-28:  neighbors => neighbor
Span 0-1:  Ochoa => (person :name (name :op "Ochoa"))
Span 6-7:  purchased => purchase-01
Span 12-13:  said => say-01
Span 1-2:  stated => state-01
Span 25-26:  threaten => threaten-01
Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))
Span 22-23:  way => way
Span 19-20:  weapons => weapon
Span 10-11:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),neighbors,neighbor,false), Span(25,26,List(1),threaten,threaten-01,false), Span(22,23,List(2),way,way,false), Span(19,20,List(3),weapons,weapon,false), Span(18,19,List(4),buying,buy-01,false), Span(17,18,List(5),aggressively,aggressive,false), Span(14,15,List(8, 7, 6),Chavez,(person :name (name :op "Chavez")),false), Span(13,14,List(9),and,and,false), Span(12,13,List(10),said,say-01,false), Span(11,12,List(11),and,and,false), Span(10,11,List(13, 12),years,(temporal-quantity :unit year),false), Span(9,10,List(14),25,25,false), Span(7,8,List(15),arms,arm,false), Span(6,7,List(16),purchased,purchase-01,false), Span(3,4,List(19, 18, 17),Venezuela,(country :name (name :op "Venezuela")),false), Span(1,2,List(20),stated,state-01,false), Span(0,1,List(23, 22, 21),Ochoa,(person :name (name :op "Ochoa")),false)),Map(2 -> way, 5 -> aggressive, 12 -> temporal-quantity, 15 -> arm, 8 -> "Chavez", 21 -> person, 18 -> name, 7 -> name, 17 -> country, 1 -> threaten-01, 23 -> "Ochoa", 4 -> buy-01, 11 -> and, 14 -> 25, 20 -> state-01, 6 -> person, 22 -> name, 0 -> neighbor, 9 -> and, 16 -> purchase-01, 19 -> "Venezuela", 3 -> weapon, 10 -> say-01, 13 -> year),Map(n -> neighbor, w -> way, 2 -> 25, s2 -> state-01, t -> threaten-01, b -> buy-01, p2 -> purchase-01, n4 -> name, a3 -> and, s -> say-01, p -> person, y -> year, n3 -> name, a -> aggressive, t2 -> temporal-quantity, w2 -> weapon, a2 -> and, c -> country, p3 -> person, n2 -> name, a4 -> arm))),[Ljava.lang.String;@40cb698e,Annotation([Ljava.lang.String;@3382f8ae,[Ljava.lang.String;@60641ec8,[Ljava.lang.String;@75f65e45),Annotation([Ljava.lang.String;@6eeade6c,[Ljava.lang.String;@4a891c97,[Ledu.cmu.lti.nlp.amr.Dependency;@a5bd950),Annotation([Ljava.lang.String;@4d18aa28,[Ljava.lang.String;@75390459,[Ljava.lang.String;@7756c3cd),Annotation([Ljava.lang.String;@2313052e,[Ljava.lang.String;@2bd2b28e,[Ledu.cmu.lti.nlp.amr.Entity;@16746061))
AMR:
(a2 / and, op, b / buy-01)
(a3 / and, op, s / say-01)
(a3 / and, op, s2 / state-01)
(b / buy-01, ARG0, p / person)
(b / buy-01, ARG1, w2 / weapon)
(b / buy-01, manner, a / aggressive)
(b / buy-01, prep-in, w / way)
(c / country, name, n3 / name)
(n2 / name, op, "Chavez")
(n3 / name, op, "Venezuela")
(n4 / name, op, "Ochoa")
(p / person, name, n2 / name)
(p2 / purchase-01, ARG0, c / country)
(p2 / purchase-01, ARG1, a4 / arm)
(p3 / person, name, n4 / name)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, b / buy-01)
(s2 / state-01, ARG0, p3 / person)
(s2 / state-01, ARG1, p2 / purchase-01)
(t / threaten-01, ARG0, w / way)
(t / threaten-01, ARG1, 2 / 25)
(t / threaten-01, ARG2, n / neighbor)
(t2 / temporal-quantity, quant, 2 / 25)
(t2 / temporal-quantity, unit, y / year)

Decoded in 1,548,870 microseconds
Sentence: Ochoa said Venezuela has never bought Russian arms before and suggested Chavez is doing it to become independent from the US.

NER Entity: (person :name (name :op "Ochoa"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Ochoa"))
Spans:
Span 9-10:  and => and
Span 7-8:  arms => arm
Span 16-17:  become => become-01
Span 8-9:  before => before
Span 5-6:  bought => buy-01
Span 11-12:  Chavez => (person :name (name :op "Chavez"))
Span 13-14:  doing => (thing :ARG1-of do-02)
Span 17-18:  independent => (depend-01 :polarity -)
Span 14-15:  it => it
Span 0-1:  Ochoa => (person :name (name :op "Ochoa"))
Span 6-7:  Russian => (country :name (name :op "Russia"))
Span 1-2:  said => say-01
Span 10-11:  suggested => suggest-01
Span 20-21:  US => (country :name (name :op "US"))
Span 2-3:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 87 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(2, 1, 0),US,(country :name (name :op "US")),false), Span(17,18,List(4, 3),independent,(depend-01 :polarity -),false), Span(16,17,List(5),become,become-01,false), Span(14,15,List(6),it,it,false), Span(13,14,List(8, 7),doing,(thing :ARG1-of do-02),false), Span(11,12,List(11, 10, 9),Chavez,(person :name (name :op "Chavez")),false), Span(10,11,List(12),suggested,suggest-01,false), Span(9,10,List(13),and,and,false), Span(8,9,List(14),before,before,false), Span(7,8,List(15),arms,arm,false), Span(6,7,List(18, 17, 16),Russian,(country :name (name :op "Russia")),false), Span(5,6,List(19),bought,buy-01,false), Span(2,3,List(22, 21, 20),Venezuela,(country :name (name :op "Venezuela")),false), Span(1,2,List(23),said,say-01,false), Span(0,1,List(26, 25, 24),Ochoa,(person :name (name :op "Ochoa")),false)),Map(2 -> "US", 5 -> become-01, 12 -> suggest-01, 8 -> do-02, 15 -> arm, 21 -> name, 18 -> "Russia", 24 -> person, 7 -> thing, 1 -> name, 17 -> name, 23 -> say-01, 26 -> "Ochoa", 4 -> -, 11 -> "Chavez", 14 -> before, 20 -> country, 6 -> it, 9 -> person, 0 -> country, 22 -> "Venezuela", 16 -> country, 19 -> buy-01, 10 -> name, 3 -> depend-01, 25 -> name, 13 -> and),Map(b3 -> buy-01, n -> name, s2 -> say-01, b -> become-01, t -> thing, b2 -> before, p2 -> person, n4 -> name, s -> suggest-01, d -> depend-01, p -> person, c3 -> country, n3 -> name, a -> and, d2 -> do-02, i -> it, a2 -> arm, c -> country, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@57fd91c9,Annotation([Ljava.lang.String;@6cfcd46d,[Ljava.lang.String;@52045dbe,[Ljava.lang.String;@674658f7),Annotation([Ljava.lang.String;@5c8eee0f,[Ljava.lang.String;@565b064f,[Ledu.cmu.lti.nlp.amr.Dependency;@26425897),Annotation([Ljava.lang.String;@73163d48,[Ljava.lang.String;@58c34bb3,[Ljava.lang.String;@56a4479a),Annotation([Ljava.lang.String;@62163b39,[Ljava.lang.String;@20a8a64e,[Ledu.cmu.lti.nlp.amr.Entity;@62f4ff3b))
AMR:
(a / and, op, s / suggest-01)
(a / and, op, s2 / say-01)
(a2 / arm, source, c2 / country)
(b / become-01, ARG0, p / person)
(b / become-01, ARG1, i / it)
(b / become-01, ARG2, d / depend-01)
(b2 / before, calendar, a / and)
(b3 / buy-01, ARG0, p / person)
(b3 / buy-01, ARG1, a2 / arm)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(d / depend-01, ARG1, c / country)
(d / depend-01, polarity, -)
(d2 / do-02, ARG0, p / person)
(d2 / do-02, ARG1, t / thing)
(n / name, op, "US")
(n2 / name, op, "Chavez")
(n3 / name, op, "Russia")
(n4 / name, op, "Venezuela")
(n5 / name, op, "Ochoa")
(p / person, name, n2 / name)
(p2 / person, name, n5 / name)
(s / suggest-01, ARG0, p2 / person)
(s / suggest-01, ARG1, b3 / buy-01)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, c3 / country)

Decoded in 2,752,651 microseconds
Sentence: Ochoa asked why Chavez is buying a caliber of rifle which is popular among subversive forces in Latin America and stated that the political support Chavez gives to radical leftist movements makes Chavez a continental menace.

NER Entity: (person :name (name :op "Ochoa"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Ochoa"))
Spans:
Span 19-20:  and => and
Span 1-2:  asked => ask-02
Span 5-6:  buying => buy-01
Span 7-8:  caliber => caliber
Span 32-33:  Chavez => (person :name (name :op "Chavez"))
Span 25-26:  Chavez => (person :name (name :op "Chavez"))
Span 3-4:  Chavez => (person :name (name :op "Chavez"))
Span 34-35:  continental => continent
Span 15-16:  forces => force
Span 26-27:  gives => give-01
Span 17-19:  Latin America => (country :name (name :op "Latin" :op "America"))
Span 29-30:  leftist => leftist
Span 31-32:  makes => make-02
Span 35-36:  menace => menace-01
Span 30-31:  movements => move-02
Span 0-1:  Ochoa => (person :name (name :op "Ochoa"))
Span 23-24:  political => politics
Span 12-13:  popular => popular-41
Span 28-29:  radical => radical
Span 9-10:  rifle => rifle
Span 20-21:  stated => state-01
Span 14-15:  subversive => subvert-01
Span 24-25:  support => support-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),menace,menace-01,false), Span(34,35,List(1),continental,continent,false), Span(32,33,List(4, 3, 2),Chavez,(person :name (name :op "Chavez")),false), Span(31,32,List(5),makes,make-02,false), Span(30,31,List(6),movements,move-02,false), Span(29,30,List(7),leftist,leftist,false), Span(28,29,List(8),radical,radical,false), Span(26,27,List(9),gives,give-01,false), Span(25,26,List(12, 11, 10),Chavez,(person :name (name :op "Chavez")),false), Span(24,25,List(13),support,support-01,false), Span(23,24,List(14),political,politics,false), Span(20,21,List(15),stated,state-01,false), Span(19,20,List(16),and,and,false), Span(17,19,List(20, 19, 18, 17),Latin America,(country :name (name :op "Latin" :op "America")),false), Span(15,16,List(21),forces,force,false), Span(14,15,List(22),subversive,subvert-01,false), Span(12,13,List(23),popular,popular-41,false), Span(9,10,List(24),rifle,rifle,false), Span(7,8,List(25),caliber,caliber,false), Span(5,6,List(26),buying,buy-01,false), Span(3,4,List(29, 28, 27),Chavez,(person :name (name :op "Chavez")),false), Span(1,2,List(30),asked,ask-02,false), Span(0,1,List(33, 32, 31),Ochoa,(person :name (name :op "Ochoa")),false)),Map(30 -> ask-02, 2 -> person, 5 -> make-02, 33 -> "Ochoa", 27 -> person, 12 -> "Chavez", 8 -> radical, 15 -> state-01, 21 -> force, 18 -> name, 24 -> rifle, 7 -> leftist, 1 -> continent, 17 -> country, 23 -> popular-41, 26 -> buy-01, 4 -> "Chavez", 11 -> name, 32 -> name, 14 -> politics, 29 -> "Chavez", 20 -> "America", 28 -> name, 6 -> move-02, 9 -> give-01, 0 -> menace-01, 22 -> subvert-01, 16 -> and, 19 -> "Latin", 10 -> person, 3 -> name, 31 -> person, 25 -> caliber, 13 -> support-01),Map(m3 -> move-02, n -> name, s2 -> state-01, p5 -> person, b -> buy-01, m2 -> make-02, p2 -> person, n4 -> name, s -> support-01, m -> menace-01, r2 -> rifle, g -> give-01, p -> person, a -> and, n3 -> name, c3 -> caliber, p4 -> popular-41, a2 -> ask-02, r -> radical, c -> continent, s3 -> subvert-01, p6 -> person, l -> leftist, f -> force, p3 -> politics, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@1698fc68,Annotation([Ljava.lang.String;@4504d271,[Ljava.lang.String;@207b8649,[Ljava.lang.String;@65b3a85a),Annotation([Ljava.lang.String;@34997338,[Ljava.lang.String;@57eda880,[Ledu.cmu.lti.nlp.amr.Dependency;@2b5825fa),Annotation([Ljava.lang.String;@53d1b9b3,[Ljava.lang.String;@2cae1042,[Ljava.lang.String;@163d04ff),Annotation([Ljava.lang.String;@7c209437,[Ljava.lang.String;@2262b621,[Ledu.cmu.lti.nlp.amr.Entity;@7e928e2f))
AMR:
(a / and, op, a2 / ask-02)
(a / and, op, s2 / state-01)
(a2 / ask-02, ARG0, p6 / person)
(a2 / ask-02, ARG1, g / give-01)
(b / buy-01, ARG0, p5 / person)
(b / buy-01, ARG1, c3 / caliber)
(c2 / country, name, n3 / name)
(c3 / caliber, mod, r2 / rifle)
(f / force, location, c2 / country)
(g / give-01, ARG0, p2 / person)
(g / give-01, ARG1, m3 / move-02)
(m / menace-01, ARG1, r / radical)
(m / menace-01, mod, c / continent)
(m2 / make-02, ARG0, p / person)
(m2 / make-02, ARG1, m / menace-01)
(m3 / move-02, ARG1, p3 / politics)
(m3 / move-02, mod, l / leftist)
(n / name, op, "Chavez")
(n2 / name, op, "Chavez")
(n3 / name, op, "America")
(n3 / name, op, "Latin")
(n4 / name, op, "Chavez")
(n5 / name, op, "Ochoa")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p4 / popular-41, ARG1, c3 / caliber)
(p4 / popular-41, ARG2, f / force)
(p5 / person, name, n4 / name)
(p6 / person, name, n5 / name)
(s / support-01, ARG0, p5 / person)
(s / support-01, ARG1, m3 / move-02)
(s2 / state-01, ARG0, p6 / person)
(s2 / state-01, ARG1, m2 / make-02)
(s3 / subvert-01, ARG1, f / force)

Decoded in 2,018,941 microseconds
Sentence: The US Pentagon has openly questioned what Chavez will do with the old FAL rifles and whether Chavez might share weapons or ammunition with guerrilla forces in Latin America.

NER Entity: (country :name (name :op "US" :op "Pentagon"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (organization :name (name :op "FAL"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (organization :name (name :op "FAL"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 22-23:  ammunition => ammunition
Span 15-16:  and => and
Span 17-18:  Chavez => (person :name (name :op "Chavez"))
Span 7-8:  Chavez => (person :name (name :op "Chavez"))
Span 9-10:  do => do-02
Span 13-14:  FAL => (name :op "FAL")
Span 25-26:  forces => force
Span 24-25:  guerrilla => guerrilla
Span 27-29:  Latin America => (country :name (name :op "Latin" :op "America"))
Span 12-13:  old => old
Span 4-5:  openly => open
Span 21-22:  or => or
Span 5-6:  questioned => question-01
Span 14-15:  rifles => rifle
Span 19-20:  share => share-01
Span 1-3:  US Pentagon => (country :name (name :op "US" :op "Pentagon"))
Span 20-21:  weapons => weapon

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(3, 2, 1, 0),Latin America,(country :name (name :op "Latin" :op "America")),false), Span(25,26,List(4),forces,force,false), Span(24,25,List(5),guerrilla,guerrilla,false), Span(22,23,List(6),ammunition,ammunition,false), Span(21,22,List(7),or,or,false), Span(20,21,List(8),weapons,weapon,false), Span(19,20,List(9),share,share-01,false), Span(17,18,List(12, 11, 10),Chavez,(person :name (name :op "Chavez")),false), Span(15,16,List(13),and,and,false), Span(14,15,List(14),rifles,rifle,false), Span(13,14,List(16, 15),FAL,(name :op "FAL"),false), Span(12,13,List(17),old,old,false), Span(9,10,List(18),do,do-02,false), Span(7,8,List(21, 20, 19),Chavez,(person :name (name :op "Chavez")),false), Span(5,6,List(22),questioned,question-01,false), Span(4,5,List(23),openly,open,false), Span(1,3,List(27, 26, 25, 24),US Pentagon,(country :name (name :op "US" :op "Pentagon")),false)),Map(2 -> "Latin", 5 -> guerrilla, 27 -> "Pentagon", 12 -> "Chavez", 8 -> weapon, 15 -> name, 21 -> "Chavez", 18 -> do-02, 24 -> country, 7 -> or, 1 -> name, 17 -> old, 23 -> open, 26 -> "US", 4 -> force, 11 -> name, 14 -> rifle, 20 -> name, 6 -> ammunition, 9 -> share-01, 0 -> country, 22 -> question-01, 16 -> "FAL", 19 -> person, 10 -> person, 3 -> "America", 25 -> name, 13 -> and),Map(n -> name, w -> weapon, q -> question-01, o3 -> open, p2 -> person, n4 -> name, s -> share-01, d -> do-02, g -> guerrilla, p -> person, a -> ammunition, n3 -> name, o2 -> old, a2 -> and, r -> rifle, c -> country, f -> force, o -> or, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@f667fe,Annotation([Ljava.lang.String;@788fcafb,[Ljava.lang.String;@4febb875,[Ljava.lang.String;@25e2a451),Annotation([Ljava.lang.String;@1698ee84,[Ljava.lang.String;@10c626be,[Ledu.cmu.lti.nlp.amr.Dependency;@2fc0cc3),Annotation([Ljava.lang.String;@328cf0e1,[Ljava.lang.String;@63b1d4fa,[Ljava.lang.String;@42e3ede4),Annotation([Ljava.lang.String;@201b6b6f,[Ljava.lang.String;@75459c75,[Ledu.cmu.lti.nlp.amr.Entity;@183e8023))
AMR:
(a2 / and, op, d / do-02)
(a2 / and, op, s / share-01)
(c / country, name, n / name)
(c2 / country, name, n5 / name)
(d / do-02, ARG0, p2 / person)
(d / do-02, ARG1, w / weapon)
(d / do-02, ARG2, r / rifle)
(f / force, location, c / country)
(f / force, mod, g / guerrilla)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "Chavez")
(n3 / name, op, "FAL")
(n4 / name, op, "Chavez")
(n5 / name, op, "Pentagon")
(n5 / name, op, "US")
(o / or, op, a / ammunition)
(p / person, name, n2 / name)
(p2 / person, name, n4 / name)
(q / question-01, ARG0, c2 / country)
(q / question-01, ARG1, a2 / and)
(q / question-01, manner, o3 / open)
(r / rifle, mod, o2 / old)
(r / rifle, name, n3 / name)
(s / share-01, ARG0, p / person)
(s / share-01, ARG1, o / or)
(s / share-01, ARG2, f / force)

Decoded in 1,050,861 microseconds
Sentence: The US government has provided no evidence of Chavez arming or funding leftist insurgencies.

NER Entity: (country :name (name :op "The" :op "US"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 9-10:  arming => arm-01
Span 8-9:  Chavez => (person :name (name :op "Chavez"))
Span 6-7:  evidence => (thing :ARG0-of evidence-01)
Span 11-12:  funding => fund-01
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 13-14:  insurgencies => insurgency
Span 12-13:  leftist => leftist
Span 5-6:  no => -
Span 10-11:  or => or
Span 4-5:  provided => provide-01
Span 0-2:  The US => (country :name (name :op "The" :op "US"))

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),insurgencies,insurgency,false), Span(12,13,List(1),leftist,leftist,false), Span(11,12,List(2),funding,fund-01,false), Span(10,11,List(3),or,or,false), Span(9,10,List(4),arming,arm-01,false), Span(8,9,List(7, 6, 5),Chavez,(person :name (name :op "Chavez")),false), Span(6,7,List(9, 8),evidence,(thing :ARG0-of evidence-01),false), Span(5,6,List(10),no,-,false), Span(4,5,List(11),provided,provide-01,false), Span(2,3,List(13, 12),government,(government-organization :ARG0-of govern-01),false), Span(0,2,List(17, 16, 15, 14),The US,(country :name (name :op "The" :op "US")),false)),Map(2 -> fund-01, 5 -> person, 12 -> government-organization, 15 -> name, 8 -> thing, 7 -> "Chavez", 17 -> "US", 1 -> leftist, 4 -> arm-01, 11 -> provide-01, 14 -> country, 6 -> name, 0 -> insurgency, 9 -> evidence-01, 16 -> "The", 3 -> or, 10 -> -, 13 -> govern-01),Map(e -> evidence-01, n -> name, t -> thing, p2 -> provide-01, g2 -> govern-01, p -> person, g -> government-organization, a -> arm-01, i -> insurgency, - -> -, c -> country, l -> leftist, f -> fund-01, o -> or, n2 -> name))),[Ljava.lang.String;@45efc20d,Annotation([Ljava.lang.String;@3e5499cc,[Ljava.lang.String;@67ab1c47,[Ljava.lang.String;@b78a709),Annotation([Ljava.lang.String;@30bcf3c1,[Ljava.lang.String;@2a3c96e3,[Ledu.cmu.lti.nlp.amr.Dependency;@15cafec7),Annotation([Ljava.lang.String;@5b444398,[Ljava.lang.String;@cb191ca,[Ljava.lang.String;@42f48531),Annotation([Ljava.lang.String;@a776e,[Ljava.lang.String;@792bbc74,[Ledu.cmu.lti.nlp.amr.Entity;@79145d5a))
AMR:
(a / arm-01, ARG0, p / person)
(a / arm-01, ARG1, i / insurgency)
(c / country, name, n2 / name)
(e / evidence-01, ARG0, t / thing)
(e / evidence-01, ARG1, o / or)
(f / fund-01, ARG1, i / insurgency)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / insurgency, mod, l / leftist)
(n / name, op, "Chavez")
(n2 / name, op, "The")
(n2 / name, op, "US")
(o / or, op, a / arm-01)
(o / or, op, f / fund-01)
(p / person, name, n / name)
(p2 / provide-01, ARG0, g / government-organization)
(p2 / provide-01, ARG1, t / thing)
(p2 / provide-01, ARG6, - / -)

Decoded in 627,283 microseconds
Sentence: Military analysts and specialists on the Colombian FARC guerrillas say the rebels have plenty of money for weapons from drug trafficking and would not be interested in old Belgian rifles or in assistance from Chavez.

NER Entity: (thing :name (name :op "Colombian"))
NER Entity: (organization :name (name :op "FARC"))
NER Entity: (thing :name (name :op "Belgian"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Belgian"))
NER Entity: (organization :name (name :op "FARC"))
NER Entity: (thing :name (name :op "Colombian"))
Spans:
Span 1-2:  analysts => (person :ARG0-of analyze-01)
Span 21-22:  and => and
Span 2-3:  and => and
Span 32-33:  assistance => assist-01
Span 28-29:  Belgian => (country :name (name :op "Belgium"))
Span 34-35:  Chavez => (person :name (name :op "Chavez"))
Span 6-7:  Colombian => (country :name (name :op "Colombia"))
Span 19-20:  drug => drug
Span 7-8:  FARC => (name :op "FARC")
Span 8-9:  guerrillas => guerrilla
Span 25-26:  interested => interest-01
Span 0-1:  Military => military
Span 15-16:  money => money
Span 27-28:  old => old
Span 30-31:  or => or
Span 13-14:  plenty => plenty
Span 11-12:  rebels => (person :ARG0-of rebel-01)
Span 29-30:  rifles => rifle
Span 9-10:  say => say-01
Span 3-4:  specialists => specialize-01
Span 20-21:  trafficking => traffic-00
Span 17-18:  weapons => weapon

Langrangian relaxation converged after 52 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(2, 1, 0),Chavez,(person :name (name :op "Chavez")),false), Span(32,33,List(3),assistance,assist-01,false), Span(30,31,List(4),or,or,false), Span(29,30,List(5),rifles,rifle,false), Span(28,29,List(8, 7, 6),Belgian,(country :name (name :op "Belgium")),false), Span(27,28,List(9),old,old,false), Span(25,26,List(10),interested,interest-01,false), Span(21,22,List(11),and,and,false), Span(20,21,List(12),trafficking,traffic-00,false), Span(19,20,List(13),drug,drug,false), Span(17,18,List(14),weapons,weapon,false), Span(15,16,List(15),money,money,false), Span(13,14,List(16),plenty,plenty,false), Span(11,12,List(18, 17),rebels,(person :ARG0-of rebel-01),false), Span(9,10,List(19),say,say-01,false), Span(8,9,List(20),guerrillas,guerrilla,false), Span(7,8,List(22, 21),FARC,(name :op "FARC"),false), Span(6,7,List(25, 24, 23),Colombian,(country :name (name :op "Colombia")),false), Span(3,4,List(26),specialists,specialize-01,false), Span(2,3,List(27),and,and,false), Span(1,2,List(29, 28),analysts,(person :ARG0-of analyze-01),false), Span(0,1,List(30),Military,military,false)),Map(30 -> military, 2 -> "Chavez", 5 -> rifle, 27 -> and, 12 -> traffic-00, 8 -> "Belgium", 15 -> money, 21 -> name, 18 -> rebel-01, 24 -> name, 7 -> name, 1 -> name, 17 -> person, 23 -> country, 26 -> specialize-01, 4 -> or, 11 -> and, 14 -> weapon, 29 -> analyze-01, 20 -> guerrilla, 28 -> person, 6 -> country, 9 -> old, 0 -> person, 22 -> "FARC", 16 -> plenty, 19 -> say-01, 10 -> interest-01, 3 -> assist-01, 25 -> "Colombia", 13 -> drug),Map(w -> weapon, n -> name, s2 -> specialize-01, t -> traffic-00, m2 -> military, p2 -> plenty, n4 -> name, a3 -> and, s -> say-01, d -> drug, m -> money, r2 -> rebel-01, p -> person, g -> guerrilla, a -> assist-01, n3 -> name, p4 -> person, o2 -> old, a2 -> and, i -> interest-01, r -> rifle, c -> country, o -> or, p3 -> person, n2 -> name, c2 -> country, a4 -> analyze-01))),[Ljava.lang.String;@1f2f9244,Annotation([Ljava.lang.String;@4c4d27c8,[Ljava.lang.String;@6821ea29,[Ljava.lang.String;@338494fa),Annotation([Ljava.lang.String;@505a9d7c,[Ljava.lang.String;@758c83d8,[Ledu.cmu.lti.nlp.amr.Dependency;@129b4fe2),Annotation([Ljava.lang.String;@5af3a0f,[Ljava.lang.String;@19ae6bb,[Ljava.lang.String;@10993713),Annotation([Ljava.lang.String;@58359ebd,[Ljava.lang.String;@24b6b8f6,[Ledu.cmu.lti.nlp.amr.Entity;@72cf2de5))
AMR:
(a / assist-01, ARG1, p / person)
(a2 / and, op, t / traffic-00)
(a3 / and, op, i / interest-01)
(a3 / and, op, p4 / person)
(a4 / analyze-01, ARG0, p4 / person)
(a4 / analyze-01, ARG1, m2 / military)
(c / country, name, n2 / name)
(c2 / country, name, n4 / name)
(g / guerrilla, mod, c2 / country)
(g / guerrilla, name, n3 / name)
(g / guerrilla, poss, p4 / person)
(i / interest-01, ARG0, p3 / person)
(i / interest-01, ARG1, o / or)
(m / money, purpose, w / weapon)
(m / money, quant, p2 / plenty)
(m / money, source, t / traffic-00)
(n / name, op, "Chavez")
(n2 / name, op, "Belgium")
(n3 / name, op, "FARC")
(n4 / name, op, "Colombia")
(o / or, op, a / assist-01)
(o / or, op, r / rifle)
(p / person, name, n / name)
(r / rifle, mod, o2 / old)
(r / rifle, source, c / country)
(r2 / rebel-01, ARG0, p3 / person)
(s / say-01, ARG0, a2 / and)
(s / say-01, ARG1, a3 / and)
(s2 / specialize-01, ARG1, m2 / military)
(t / traffic-00, ARG1, d / drug)

Decoded in 2,692,494 microseconds
Sentence: A 030000 study published by the US Defense Intelligence Agency reported that more than half of the weapons seized from Colombian guerrillas from 980000 to 010000 that had markings of foreign militaries were of Venezuelan origin.

mkDayMonthYear(030000,00,00,03)
NER Entity: (organization :name (name :op "US" :op "Defense" :op "Intelligence" :op "Agency"))
NER Entity: (thing :name (name :op "Colombian"))
mkDayMonthYear(980000,00,00,98)
mkDayMonthYear(010000,00,00,01)
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (thing :name (name :op "Venezuelan"))
mkDayMonthYear(010000,00,00,01)
mkDayMonthYear(980000,00,00,98)
NER Entity: (thing :name (name :op "Colombian"))
mkDayMonthYear(030000,00,00,03)
Spans:
Span 25-26:  010000 => (date-entity :year 2001)
Span 1-2:  030000 => (date-entity :day 0 :month 0 :year 03)
Span 23-24:  980000 => (date-entity :year 1998)
Span 20-21:  Colombian => (country :name (name :op "Colombia"))
Span 30-31:  foreign => foreign
Span 21-22:  guerrillas => guerrilla
Span 14-15:  half => half
Span 28-29:  markings => mark-02
Span 31-32:  militaries => military
Span 12-13:  more => more
Span 35-36:  origin => originate-01
Span 3-4:  published => publish-01
Span 10-11:  reported => report-01
Span 18-19:  seized => seize-01
Span 2-3:  study => study
Span 6-10:  US Defense Intelligence Agency => (organization :name (name :op "US" :op "Defense" :op "Intelligence" :op "Agency"))
Span 34-35:  Venezuelan => (country :name (name :op "Venezuela"))
Span 17-18:  weapons => weapon

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),origin,originate-01,false), Span(34,35,List(3, 2, 1),Venezuelan,(country :name (name :op "Venezuela")),false), Span(31,32,List(4),militaries,military,false), Span(30,31,List(5),foreign,foreign,false), Span(28,29,List(6),markings,mark-02,false), Span(25,26,List(8, 7),010000,(date-entity :year 2001),false), Span(23,24,List(10, 9),980000,(date-entity :year 1998),false), Span(21,22,List(11),guerrillas,guerrilla,false), Span(20,21,List(14, 13, 12),Colombian,(country :name (name :op "Colombia")),false), Span(18,19,List(15),seized,seize-01,false), Span(17,18,List(16),weapons,weapon,false), Span(14,15,List(17),half,half,false), Span(12,13,List(18),more,more,false), Span(10,11,List(19),reported,report-01,false), Span(6,10,List(25, 24, 23, 22, 21, 20),US Defense Intelligence Agency,(organization :name (name :op "US" :op "Defense" :op "Intelligence" :op "Agency")),false), Span(3,4,List(26),published,publish-01,false), Span(2,3,List(27),study,study,false), Span(1,2,List(31, 30, 29, 28),030000,(date-entity :day 0 :month 0 :year 03),false)),Map(30 -> 0, 2 -> name, 5 -> foreign, 27 -> study, 12 -> country, 8 -> 2001, 15 -> seize-01, 21 -> name, 18 -> more, 24 -> "Intelligence", 7 -> date-entity, 1 -> country, 17 -> half, 23 -> "Defense", 26 -> publish-01, 4 -> military, 11 -> guerrilla, 14 -> "Colombia", 29 -> 0, 20 -> organization, 28 -> date-entity, 6 -> mark-02, 9 -> date-entity, 0 -> originate-01, 22 -> "US", 16 -> weapon, 19 -> report-01, 10 -> 1998, 3 -> "Venezuela", 31 -> 03, 25 -> "Agency", 13 -> name),Map(m3 -> more, n -> name, w -> weapon, h -> half, 2 -> 2001, s2 -> study, m2 -> mark-02, d3 -> date-entity, 03 -> 03, s -> seize-01, d -> date-entity, m -> military, 1 -> 1998, g -> guerrilla, p -> publish-01, n3 -> name, d2 -> date-entity, o2 -> organization, 02 -> 0, r -> report-01, c -> country, 0 -> 0, f -> foreign, o -> originate-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@2bb7bd00,Annotation([Ljava.lang.String;@5f031ebd,[Ljava.lang.String;@4ee37ca3,[Ljava.lang.String;@45c8d09f),Annotation([Ljava.lang.String;@53812a9b,[Ljava.lang.String;@14b030a0,[Ledu.cmu.lti.nlp.amr.Dependency;@41e350f1),Annotation([Ljava.lang.String;@422c3c7a,[Ljava.lang.String;@18230356,[Ljava.lang.String;@d8305c2),Annotation([Ljava.lang.String;@56bca85b,[Ljava.lang.String;@75d0911a,[Ledu.cmu.lti.nlp.amr.Entity;@75e91545))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / date-entity, year, 2 / 2001)
(d2 / date-entity, year, 1 / 1998)
(d3 / date-entity, day, 0 / 0)
(d3 / date-entity, month, 02 / 0)
(d3 / date-entity, year, 03 / 03)
(g / guerrilla, mod, c2 / country)
(m / military, mod, f / foreign)
(m2 / mark-02, ARG0, m / military)
(m2 / mark-02, ARG1, o / originate-01)
(m3 / more, calendar, h / half)
(n / name, op, "Venezuela")
(n2 / name, op, "Colombia")
(n3 / name, op, "Agency")
(n3 / name, op, "Defense")
(n3 / name, op, "Intelligence")
(n3 / name, op, "US")
(o / originate-01, ARG1, w / weapon)
(o / originate-01, ARG2, c / country)
(o2 / organization, name, n3 / name)
(p / publish-01, ARG0, o2 / organization)
(p / publish-01, ARG1, s2 / study)
(p / publish-01, ARG2, d / date-entity)
(r / report-01, ARG0, s2 / study)
(r / report-01, ARG1, o / originate-01)
(r / report-01, ARG6, h / half)
(r / report-01, time, d2 / date-entity)
(s / seize-01, ARG1, w / weapon)
(s / seize-01, ARG2, g / guerrilla)
(s2 / study, time, d3 / date-entity)

Decoded in 2,130,744 microseconds
Sentence: The implication was that corrupt or sympathetic members of the Venezuelan military may be aiding guerrillas.

NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (thing :name (name :op "Venezuelan"))
Spans:
Span 14-15:  aiding => aid-01
Span 4-5:  corrupt => corrupt-01
Span 15-16:  guerrillas => guerrilla
Span 1-2:  implication => imply-01
Span 12-13:  may => possible
Span 7-8:  members => (have-org-role-91 :ARG2 member)
Span 11-12:  military => military
Span 5-6:  or => or
Span 6-7:  sympathetic => sympathize-01
Span 10-11:  Venezuelan => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),guerrillas,guerrilla,false), Span(14,15,List(1),aiding,aid-01,false), Span(12,13,List(2),may,possible,false), Span(11,12,List(3),military,military,false), Span(10,11,List(6, 5, 4),Venezuelan,(country :name (name :op "Venezuela")),false), Span(7,8,List(8, 7),members,(have-org-role-91 :ARG2 member),false), Span(6,7,List(9),sympathetic,sympathize-01,false), Span(5,6,List(10),or,or,false), Span(4,5,List(11),corrupt,corrupt-01,false), Span(1,2,List(12),implication,imply-01,false)),Map(2 -> possible, 5 -> name, 12 -> imply-01, 8 -> member, 7 -> have-org-role-91, 1 -> aid-01, 4 -> country, 11 -> corrupt-01, 6 -> "Venezuela", 0 -> guerrilla, 9 -> sympathize-01, 3 -> military, 10 -> or),Map(n -> name, h -> have-org-role-91, m2 -> member, s -> sympathize-01, m -> military, p -> possible, g -> guerrilla, a -> aid-01, i -> imply-01, c -> country, o -> or, c2 -> corrupt-01))),[Ljava.lang.String;@60d1a32f,Annotation([Ljava.lang.String;@531c311e,[Ljava.lang.String;@22b53226,[Ljava.lang.String;@1fcb4808),Annotation([Ljava.lang.String;@726e5805,[Ljava.lang.String;@40c80397,[Ledu.cmu.lti.nlp.amr.Dependency;@4b672daa),Annotation([Ljava.lang.String;@ea9b7c6,[Ljava.lang.String;@e077866,[Ljava.lang.String;@ed3068a),Annotation([Ljava.lang.String;@7c2b6087,[Ljava.lang.String;@3fffff43,[Ledu.cmu.lti.nlp.amr.Entity;@a8e6492))
AMR:
(a / aid-01, ARG0, o / or)
(a / aid-01, ARG1, g / guerrilla)
(c / country, name, n / name)
(c2 / corrupt-01, ARG1, p / possible)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, m2 / member)
(i / imply-01, ARG1, p / possible)
(m / military, mod, c / country)
(n / name, op, "Venezuela")
(o / or, op, h / have-org-role-91)
(p / possible, domain, a / aid-01)
(s / sympathize-01, ARG1, g / guerrilla)

Decoded in 390,565 microseconds
Sentence: Perhaps more distressing to Chavez's domestic opponents is the ideological training that critics say Chavez has in mind for the military and for new civilian reservists.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 22-23:  and => and
Span 15-16:  Chavez => (person :name (name :op "Chavez"))
Span 4-5:  Chavez => (person :name (name :op "Chavez"))
Span 25-26:  civilian => civilian
Span 13-14:  critics => (person :ARG0-of criticize-01)
Span 2-3:  distressing => distress-01
Span 6-7:  domestic => domestic
Span 10-11:  ideological => ideology
Span 21-22:  military => military
Span 18-19:  mind => mind
Span 1-2:  more => more
Span 24-25:  new => new
Span 7-8:  opponents => (person :ARG0-of oppose-01)
Span 26-27:  reservists => reservist
Span 14-15:  say => say-01
Span 11-12:  training => train-01

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),reservists,reservist,false), Span(25,26,List(1),civilian,civilian,false), Span(24,25,List(2),new,new,false), Span(22,23,List(3),and,and,false), Span(21,22,List(4),military,military,false), Span(18,19,List(5),mind,mind,false), Span(15,16,List(8, 7, 6),Chavez,(person :name (name :op "Chavez")),false), Span(14,15,List(9),say,say-01,false), Span(13,14,List(11, 10),critics,(person :ARG0-of criticize-01),false), Span(11,12,List(12),training,train-01,false), Span(10,11,List(13),ideological,ideology,false), Span(7,8,List(15, 14),opponents,(person :ARG0-of oppose-01),false), Span(6,7,List(16),domestic,domestic,false), Span(4,5,List(19, 18, 17),Chavez,(person :name (name :op "Chavez")),false), Span(2,3,List(20),distressing,distress-01,false), Span(1,2,List(21),more,more,false)),Map(2 -> new, 5 -> mind, 12 -> train-01, 15 -> oppose-01, 8 -> "Chavez", 21 -> more, 18 -> name, 7 -> name, 17 -> person, 1 -> civilian, 4 -> military, 11 -> criticize-01, 14 -> person, 20 -> distress-01, 6 -> person, 0 -> reservist, 9 -> say-01, 16 -> domestic, 19 -> "Chavez", 3 -> and, 10 -> person, 13 -> ideology),Map(m3 -> more, n -> new, t -> train-01, m2 -> mind, p2 -> person, s -> say-01, d -> domestic, m -> military, p -> person, n3 -> name, a -> and, p4 -> person, d2 -> distress-01, r -> reservist, i -> ideology, c -> civilian, o -> oppose-01, p3 -> person, n2 -> name, c2 -> criticize-01))),[Ljava.lang.String;@1c7fd41f,Annotation([Ljava.lang.String;@3b77a04f,[Ljava.lang.String;@7b324585,[Ljava.lang.String;@2e11485),Annotation([Ljava.lang.String;@60dce7ea,[Ljava.lang.String;@662f5666,[Ledu.cmu.lti.nlp.amr.Dependency;@fd8294b),Annotation([Ljava.lang.String;@5974109,[Ljava.lang.String;@27305e6,[Ljava.lang.String;@1ef3efa8),Annotation([Ljava.lang.String;@502f1f4c,[Ljava.lang.String;@6f8f9349,[Ledu.cmu.lti.nlp.amr.Entity;@75c9e76b))
AMR:
(a / and, op, m / military)
(a / and, op, r / reservist)
(c2 / criticize-01, ARG0, p2 / person)
(c2 / criticize-01, ARG1, n / new)
(d2 / distress-01, ARG0, t / train-01)
(d2 / distress-01, ARG1, p3 / person)
(d2 / distress-01, degree, m3 / more)
(n2 / name, op, "Chavez")
(n3 / name, op, "Chavez")
(o / oppose-01, ARG0, p3 / person)
(o / oppose-01, ARG1, p4 / person)
(p / person, name, n2 / name)
(p3 / person, mod, d / domestic)
(p4 / person, name, n3 / name)
(r / reservist, mod, c / civilian)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, t / train-01)
(s / say-01, ARG6, p / person)
(t / train-01, ARG1, m2 / mind)
(t / train-01, ARG2, a / and)
(t / train-01, mod, i / ideology)

Decoded in 1,464,746 microseconds
Sentence: Chavez called earlier in 050000 for so-called Revolutionary units to start preparing the public to resist a superpower aggressor and said the first step would be to train from 100000 to 2 million volunteers in the coming years to back up active-duty armed forces.

NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(050000,00,00,05)
mkDayMonthYear(100000,00,00,10)
mkDayMonthYear(100000,00,00,10)
mkDayMonthYear(050000,00,00,05)
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 4-5:  050000 => (date-entity :year 2005)
Span 31-32:  100000 => (date-entity :day 0 :month 0 :year 10)
Span 33-34:  2 => 2
Span 43-44:  active => active
Span 20-21:  aggressor => aggress-00
Span 21-22:  and => and
Span 46-47:  armed => arm-01
Span 41-42:  back => back
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 38-39:  coming => come-01
Span 45-46:  duty => duty
Span 2-3:  earlier => early
Span 47-48:  forces => force
Span 13-14:  preparing => prepare-01
Span 15-16:  public => public
Span 17-18:  resist => resist-01
Span 9-10:  Revolutionary => revolutionary
Span 22-23:  said => say-01
Span 6-7:  so => so
Span 12-13:  start => start-01
Span 25-26:  step => step-01
Span 19-20:  superpower => superpower
Span 29-30:  train => train-01
Span 10-11:  units => unit
Span 35-36:  volunteers => (person :ARG0-of volunteer-01)
Span 39-40:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),forces,force,false), Span(46,47,List(1),armed,arm-01,false), Span(45,46,List(2),duty,duty,false), Span(43,44,List(3),active,active,false), Span(41,42,List(4),back,back,false), Span(39,40,List(6, 5),years,(temporal-quantity :unit year),false), Span(38,39,List(7),coming,come-01,false), Span(35,36,List(9, 8),volunteers,(person :ARG0-of volunteer-01),false), Span(33,34,List(10),2,2,false), Span(31,32,List(14, 13, 12, 11),100000,(date-entity :day 0 :month 0 :year 10),false), Span(29,30,List(15),train,train-01,false), Span(25,26,List(16),step,step-01,false), Span(22,23,List(17),said,say-01,false), Span(21,22,List(18),and,and,false), Span(20,21,List(19),aggressor,aggress-00,false), Span(19,20,List(20),superpower,superpower,false), Span(17,18,List(21),resist,resist-01,false), Span(15,16,List(22),public,public,false), Span(13,14,List(23),preparing,prepare-01,false), Span(12,13,List(24),start,start-01,false), Span(10,11,List(25),units,unit,false), Span(9,10,List(26),Revolutionary,revolutionary,false), Span(6,7,List(27),so,so,false), Span(4,5,List(29, 28),050000,(date-entity :year 2005),false), Span(2,3,List(30),earlier,early,false), Span(0,1,List(33, 32, 31),Chavez,(person :name (name :op "Chavez")),false)),Map(30 -> early, 2 -> duty, 5 -> temporal-quantity, 33 -> "Chavez", 27 -> so, 12 -> 0, 8 -> person, 15 -> train-01, 21 -> resist-01, 18 -> and, 24 -> start-01, 7 -> come-01, 1 -> arm-01, 17 -> say-01, 23 -> prepare-01, 26 -> revolutionary, 4 -> back, 11 -> date-entity, 32 -> name, 14 -> 10, 29 -> 2005, 20 -> superpower, 28 -> date-entity, 6 -> year, 9 -> volunteer-01, 0 -> force, 22 -> public, 16 -> step-01, 19 -> aggress-00, 10 -> 2, 3 -> active, 31 -> person, 25 -> unit, 13 -> 0),Map(e -> early, s5 -> so, n -> name, 2 -> 2, s2 -> say-01, t -> temporal-quantity, b -> back, d3 -> date-entity, p2 -> public, a3 -> and, s -> step-01, s4 -> start-01, v -> volunteer-01, d -> duty, 1 -> 10, r2 -> revolutionary, y -> year, p -> person, a -> arm-01, p4 -> person, d2 -> date-entity, 02 -> 0, t2 -> train-01, a2 -> active, r -> resist-01, c -> come-01, s3 -> superpower, u -> unit, 0 -> 0, 22 -> 2005, f -> force, p3 -> prepare-01, a4 -> aggress-00))),[Ljava.lang.String;@7446d8d5,Annotation([Ljava.lang.String;@5c3b6c6e,[Ljava.lang.String;@4fbda97b,[Ljava.lang.String;@75f5fd58),Annotation([Ljava.lang.String;@37b70343,[Ljava.lang.String;@306851c7,[Ledu.cmu.lti.nlp.amr.Dependency;@12bcd0c0),Annotation([Ljava.lang.String;@4879f0f2,[Ljava.lang.String;@47db5fa5,[Ljava.lang.String;@354fc8f0),Annotation([Ljava.lang.String;@41813449,[Ljava.lang.String;@4678a2eb,[Ledu.cmu.lti.nlp.amr.Entity;@5b43fbf6))
AMR:
(a / arm-01, ARG1, f / force)
(a3 / and, op, s2 / say-01)
(a4 / aggress-00, ARG1, 2 / 2)
(b / back, poss, f / force)
(c / come-01, ARG1, t / temporal-quantity)
(d / duty, mod, a2 / active)
(d2 / date-entity, day, 0 / 0)
(d2 / date-entity, month, 02 / 0)
(d2 / date-entity, year, 1 / 10)
(d3 / date-entity, year, 22 / 2005)
(e / early, op, d2 / date-entity)
(e / early, op, d3 / date-entity)
(f / force, mod, d / duty)
(n / name, op, "Chavez")
(p3 / prepare-01, ARG1, u / unit)
(p3 / prepare-01, ARG2, r / resist-01)
(p4 / person, name, n / name)
(r / resist-01, ARG0, p2 / public)
(r / resist-01, ARG1, a4 / aggress-00)
(r2 / revolutionary, name, u / unit)
(s / step-01, ARG0, s5 / so)
(s / step-01, ARG1, t2 / train-01)
(s2 / say-01, ARG0, p4 / person)
(s2 / say-01, ARG1, s / step-01)
(s4 / start-01, ARG0, p4 / person)
(s4 / start-01, ARG1, p3 / prepare-01)
(s4 / start-01, ARG6, e / early)
(t / temporal-quantity, unit, y / year)
(t2 / train-01, ARG1, b / back)
(t2 / train-01, ARG2, p / person)
(t2 / train-01, time, t / temporal-quantity)
(v / volunteer-01, ARG0, p / person)
(v / volunteer-01, ARG1, s3 / superpower)

Decoded in 3,382,159 microseconds
Sentence: Military analysts estimate Venezuela's active-duty armed forces number 83,000.

NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
Spans:
Span 5-6:  active => active
Span 1-2:  analysts => (person :ARG0-of analyze-01)
Span 8-9:  armed => arm-01
Span 7-8:  duty => duty
Span 2-3:  estimate => estimate-01
Span 9-10:  forces => force
Span 0-1:  Military => military
Span 10-11:  number => number
Span 3-4:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),number,number,false), Span(9,10,List(1),forces,force,false), Span(8,9,List(2),armed,arm-01,false), Span(7,8,List(3),duty,duty,false), Span(5,6,List(4),active,active,false), Span(3,4,List(7, 6, 5),Venezuela,(country :name (name :op "Venezuela")),false), Span(2,3,List(8),estimate,estimate-01,false), Span(1,2,List(10, 9),analysts,(person :ARG0-of analyze-01),false), Span(0,1,List(11),Military,military,false)),Map(2 -> arm-01, 5 -> country, 8 -> estimate-01, 7 -> "Venezuela", 1 -> force, 11 -> military, 4 -> active, 6 -> name, 9 -> person, 0 -> number, 10 -> analyze-01, 3 -> duty),Map(e -> estimate-01, n -> number, a3 -> analyze-01, m -> military, d -> duty, p -> person, a -> arm-01, a2 -> active, c -> country, f -> force, n2 -> name))),[Ljava.lang.String;@1080b026,Annotation([Ljava.lang.String;@58ebfd03,[Ljava.lang.String;@5b07730f,[Ljava.lang.String;@1fdfafd2),Annotation([Ljava.lang.String;@a4b2d8f,[Ljava.lang.String;@dcfda20,[Ledu.cmu.lti.nlp.amr.Dependency;@6d304f9d),Annotation([Ljava.lang.String;@f73dcd6,[Ljava.lang.String;@5c87bfe2,[Ljava.lang.String;@2fea7088),Annotation([Ljava.lang.String;@40499e4f,[Ljava.lang.String;@51cd7ffc,[Ledu.cmu.lti.nlp.amr.Entity;@30d4b288))
AMR:
(a / arm-01, ARG1, f / force)
(a3 / analyze-01, ARG0, p / person)
(a3 / analyze-01, ARG1, m / military)
(c / country, name, n2 / name)
(d / duty, mod, a2 / active)
(e / estimate-01, ARG0, p / person)
(e / estimate-01, ARG1, n / number)
(f / force, mod, d / duty)
(f / force, poss, c / country)
(n / number, mod, f / force)
(n2 / name, op, "Venezuela")

Decoded in 343,364 microseconds
Sentence: People's defense units would be created in neighborhoods, State companies, and the Free University established under Chavez and would report directly to the president.

NER Entity: (organization :name (name :op "Free" :op "University"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 20-21:  and => and
Span 13-14:  and => and
Span 19-20:  Chavez => (person :name (name :op "Chavez"))
Span 11-12:  companies => company
Span 6-7:  created => create-01
Span 2-3:  defense => defense
Span 23-24:  directly => direct
Span 17-18:  established => establish-01
Span 15-17:  Free University => (university :name (name :op "University" :op "Free"))
Span 8-9:  neighborhoods => neighborhood
Span 0-1:  People => "People's"
Span 26-27:  president => president
Span 22-23:  report => report
Span 3-4:  units => unit

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),president,president,false), Span(23,24,List(1),directly,direct,false), Span(22,23,List(2),report,report,false), Span(20,21,List(3),and,and,false), Span(19,20,List(6, 5, 4),Chavez,(person :name (name :op "Chavez")),false), Span(17,18,List(7),established,establish-01,false), Span(15,17,List(11, 10, 9, 8),Free University,(university :name (name :op "University" :op "Free")),false), Span(13,14,List(12),and,and,false), Span(11,12,List(13),companies,company,false), Span(8,9,List(14),neighborhoods,neighborhood,false), Span(6,7,List(15),created,create-01,false), Span(3,4,List(16),units,unit,false), Span(2,3,List(17),defense,defense,false), Span(0,1,List(18),People,"People's",false)),Map(2 -> report, 5 -> name, 12 -> and, 15 -> create-01, 8 -> university, 18 -> "People's", 7 -> establish-01, 17 -> defense, 1 -> direct, 4 -> person, 11 -> "Free", 14 -> neighborhood, 6 -> "Chavez", 0 -> president, 9 -> name, 16 -> unit, 3 -> and, 10 -> "University", 13 -> company),Map(e -> establish-01, n -> name, P -> "People's", p2 -> person, u2 -> unit, d -> direct, p -> president, a -> and, n3 -> neighborhood, d2 -> defense, r -> report, a2 -> and, c -> company, u -> university, n2 -> name, c2 -> create-01))),[Ljava.lang.String;@4cc6fa2a,Annotation([Ljava.lang.String;@40f1be1b,[Ljava.lang.String;@7a791b66,[Ljava.lang.String;@6f2cb653),Annotation([Ljava.lang.String;@14c01636,[Ljava.lang.String;@590c73d3,[Ledu.cmu.lti.nlp.amr.Dependency;@6b9ce1bf),Annotation([Ljava.lang.String;@61884cb1,[Ljava.lang.String;@75ed9710,[Ljava.lang.String;@4fc5e095),Annotation([Ljava.lang.String;@435871cb,[Ljava.lang.String;@609640d5,[Ledu.cmu.lti.nlp.amr.Entity;@79da1ec0))
AMR:
(a / and, op, c / company)
(a / and, op, n3 / neighborhood)
(a / and, op, p / president)
(a / and, op, u / university)
(a2 / and, op, c2 / create-01)
(a2 / and, op, r / report)
(c2 / create-01, ARG1, u2 / unit)
(c2 / create-01, location, a / and)
(e / establish-01, ARG0, P / "People's")
(e / establish-01, ARG1, u / university)
(e / establish-01, prep-under, p2 / person)
(n / name, op, "Chavez")
(n2 / name, op, "Free")
(n2 / name, op, "University")
(p2 / person, name, n / name)
(r / report, mod, d / direct)
(u / university, name, n2 / name)
(u2 / unit, mod, d2 / defense)

Decoded in 324,913 microseconds
Sentence: The government insists the reserves will support the armed forces and not act as a fifth column against a possible anti-Chavez coup.

Spans:
Span 12-13:  act => act-02
Span 10-11:  and => and
Span 8-9:  armed => arm-01
Span 22-23:  Chavez => (person :name (name :op "Chavez"))
Span 16-17:  column => column
Span 23-24:  coup => coup
Span 9-10:  forces => force
Span 1-2:  government => (government-organization :ARG0-of govern-01)
Span 2-3:  insists => insist-01
Span 19-20:  possible => possible
Span 4-5:  reserves => reserve
Span 6-7:  support => support-01

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),coup,coup,false), Span(22,23,List(3, 2, 1),Chavez,(person :name (name :op "Chavez")),false), Span(19,20,List(4),possible,possible,false), Span(16,17,List(5),column,column,false), Span(12,13,List(6),act,act-02,false), Span(10,11,List(7),and,and,false), Span(9,10,List(8),forces,force,false), Span(8,9,List(9),armed,arm-01,false), Span(6,7,List(10),support,support-01,false), Span(4,5,List(11),reserves,reserve,false), Span(2,3,List(12),insists,insist-01,false), Span(1,2,List(14, 13),government,(government-organization :ARG0-of govern-01),false)),Map(2 -> name, 5 -> column, 12 -> insist-01, 8 -> force, 7 -> and, 1 -> person, 4 -> possible, 11 -> reserve, 14 -> govern-01, 6 -> act-02, 0 -> coup, 9 -> arm-01, 3 -> "Chavez", 10 -> support-01, 13 -> government-organization),Map(n -> name, p2 -> possible, a3 -> arm-01, s -> support-01, g2 -> govern-01, p -> person, g -> government-organization, a -> act-02, a2 -> and, r -> reserve, i -> insist-01, c -> coup, f -> force, c2 -> column))),[Ljava.lang.String;@19fb8826,Annotation([Ljava.lang.String;@192d74fb,[Ljava.lang.String;@4bef0fe3,[Ljava.lang.String;@62ea3440),Annotation([Ljava.lang.String;@27953a83,[Ljava.lang.String;@556d0826,[Ledu.cmu.lti.nlp.amr.Dependency;@66ce957f),Annotation([Ljava.lang.String;@55b5f5d2,[Ljava.lang.String;@5bfa8cc5,[Ljava.lang.String;@666b83a4),Annotation([Ljava.lang.String;@749c877b,[Ljava.lang.String;@efde75f,[Ledu.cmu.lti.nlp.amr.Entity;@16ecee1))
AMR:
(a / act-02, ARG0, r / reserve)
(a / act-02, ARG1, c2 / column)
(a / act-02, prep-against, c / coup)
(a2 / and, op, s / support-01)
(a3 / arm-01, ARG1, f / force)
(c / coup, mod, p / person)
(c / coup, mod, p2 / possible)
(g2 / govern-01, ARG0, g / government-organization)
(i / insist-01, ARG0, g / government-organization)
(i / insist-01, ARG1, a2 / and)
(n / name, op, "Chavez")
(p / person, name, n / name)
(s / support-01, ARG0, r / reserve)
(s / support-01, ARG1, f / force)

Decoded in 766,207 microseconds
Sentence: Espinoza said the reserves are not to be used as shock troops for any political party and that if there were a civil war, it would be up to each person to take their own side.

NER Entity: (person :name (name :op "Espinoza"))
NER Entity: (person :name (name :op "Espinoza"))
Spans:
Span 16-17:  and => and
Span 13-14:  any => any
Span 22-23:  civil => civil
Span 30-31:  each => each
Span 0-1:  Espinoza => (person :name (name :op "Espinoza"))
Span 25-26:  it => it
Span 35-36:  own => own
Span 15-16:  party => party
Span 31-32:  person => person
Span 14-15:  political => politics
Span 3-4:  reserves => reserve
Span 1-2:  said => say-01
Span 10-11:  shock => shock-01
Span 36-37:  side => side
Span 33-34:  take => take-01
Span 11-12:  troops => troop
Span 8-9:  used => use-01
Span 23-24:  war => war

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),side,side,false), Span(35,36,List(1),own,own,false), Span(33,34,List(2),take,take-01,false), Span(31,32,List(3),person,person,false), Span(30,31,List(4),each,each,false), Span(25,26,List(5),it,it,false), Span(23,24,List(6),war,war,false), Span(22,23,List(7),civil,civil,false), Span(16,17,List(8),and,and,false), Span(15,16,List(9),party,party,false), Span(14,15,List(10),political,politics,false), Span(13,14,List(11),any,any,false), Span(11,12,List(12),troops,troop,false), Span(10,11,List(13),shock,shock-01,false), Span(8,9,List(14),used,use-01,false), Span(3,4,List(15),reserves,reserve,false), Span(1,2,List(16),said,say-01,false), Span(0,1,List(19, 18, 17),Espinoza,(person :name (name :op "Espinoza")),false)),Map(2 -> take-01, 5 -> it, 12 -> troop, 15 -> reserve, 8 -> and, 18 -> name, 7 -> civil, 17 -> person, 1 -> own, 4 -> each, 11 -> any, 14 -> use-01, 6 -> war, 0 -> side, 9 -> party, 16 -> say-01, 19 -> "Espinoza", 3 -> person, 10 -> politics, 13 -> shock-01),Map(e -> each, n -> name, w -> war, s2 -> shock-01, t -> take-01, p2 -> party, s -> side, p -> person, a -> and, p4 -> person, t2 -> troop, r -> reserve, i -> it, a2 -> any, s3 -> say-01, c -> civil, u -> use-01, o -> own, p3 -> politics))),[Ljava.lang.String;@3b220bcb,Annotation([Ljava.lang.String;@2b95e48b,[Ljava.lang.String;@4a3329b9,[Ljava.lang.String;@3dddefd8),Annotation([Ljava.lang.String;@160ac7fb,[Ljava.lang.String;@12bfd80d,[Ledu.cmu.lti.nlp.amr.Dependency;@41925502),Annotation([Ljava.lang.String;@13e3c1c7,[Ljava.lang.String;@5316e95f,[Ljava.lang.String;@3f053c80),Annotation([Ljava.lang.String;@6c6c5427,[Ljava.lang.String;@618c5d94,[Ledu.cmu.lti.nlp.amr.Entity;@5b40ceb))
AMR:
(a / and, op, p / person)
(c / civil, op, s3 / say-01)
(n / name, op, "Espinoza")
(p / person, mod, e / each)
(p2 / party, mod, a2 / any)
(p2 / party, mod, p3 / politics)
(p4 / person, name, n / name)
(s / side, mod, o / own)
(s / side, poss, p / person)
(s2 / shock-01, ARG0, t2 / troop)
(s2 / shock-01, ARG1, p2 / party)
(s3 / say-01, ARG0, p4 / person)
(s3 / say-01, ARG1, a / and)
(s3 / say-01, ARG6, u / use-01)
(t / take-01, ARG1, s / side)
(u / use-01, ARG0, i / it)
(u / use-01, ARG1, r / reserve)
(u / use-01, ARG2, t2 / troop)
(w / war, mod, c / civil)

Decoded in 847,577 microseconds
Sentence: General Julio Ramon Quintero viloria is commander of the reserves.

NER Entity: (person :name (name :op "Julio" :op "Ramon" :op "Quintero"))
Spans:
Span 6-7:  commander => (have-org-role-91 :ARG2 commander)
Span 0-1:  General => (have-org-role-91 :ARG2 general)
Span 1-5:  Julio Ramon Quintero viloria => (person :name (name :op "Viloria" :op "Quintero" :op "Ramon" :op "Julio"))
Span 9-10:  reserves => reserve

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),reserves,reserve,false), Span(6,7,List(2, 1),commander,(have-org-role-91 :ARG2 commander),false), Span(1,5,List(8, 7, 6, 5, 4, 3),Julio Ramon Quintero viloria,(person :name (name :op "Viloria" :op "Quintero" :op "Ramon" :op "Julio")),false), Span(0,1,List(10, 9),General,(have-org-role-91 :ARG2 general),false)),Map(2 -> commander, 5 -> "Viloria", 8 -> "Julio", 7 -> "Ramon", 1 -> have-org-role-91, 4 -> name, 6 -> "Quintero", 9 -> have-org-role-91, 0 -> reserve, 10 -> general, 3 -> person),Map(n -> name, h -> have-org-role-91, h2 -> have-org-role-91, g -> general, p -> person, r -> reserve, c -> commander))),[Ljava.lang.String;@13c3c1e1,Annotation([Ljava.lang.String;@1d8062d2,[Ljava.lang.String;@1e63ec0b,[Ljava.lang.String;@3b956878),Annotation([Ljava.lang.String;@36546a22,[Ljava.lang.String;@285c08c8,[Ledu.cmu.lti.nlp.amr.Dependency;@295eaa7c),Annotation([Ljava.lang.String;@3918c187,[Ljava.lang.String;@2c88b9fc,[Ljava.lang.String;@64dafeed),Annotation([Ljava.lang.String;@388ba540,[Ljava.lang.String;@47605f2f,[Ledu.cmu.lti.nlp.amr.Entity;@2ece4966))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, r / reserve)
(h / have-org-role-91, ARG2, c / commander)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG2, g / general)
(n / name, op, "Julio")
(n / name, op, "Quintero")
(n / name, op, "Ramon")
(n / name, op, "Viloria")
(p / person, name, n / name)

Decoded in 31,193 microseconds
Sentence: Quintero said in an interview that the armed forces hope to train 50000 civilians over 20 weekends in the second half of 050000 and could train 300000 more in 060000.

NER Entity: (person :name (name :op "Quintero"))
mkDayMonthYear(050000,00,00,05)
mkDayMonthYear(300000,00,00,30)
mkDayMonthYear(060000,00,00,06)
mkDayMonthYear(060000,00,00,06)
mkDayMonthYear(300000,00,00,30)
mkDayMonthYear(050000,00,00,05)
NER Entity: (person :name (name :op "Quintero"))
Spans:
Span 22-23:  050000 => (date-entity :year 2005)
Span 29-30:  060000 => (date-entity :year 2006)
Span 15-16:  20 => 20
Span 26-27:  300000 => 300000
Span 12-13:  50000 => 50000
Span 23-24:  and => and
Span 7-8:  armed => arm-01
Span 13-14:  civilians => civilian
Span 24-25:  could => possible
Span 8-9:  forces => force
Span 20-21:  half => half
Span 9-10:  hope => hope-01
Span 4-5:  interview => interview-01
Span 27-28:  more => more
Span 14-15:  over => over
Span 0-1:  Quintero => (person :name (name :op "Quintero"))
Span 1-2:  said => say-01
Span 25-26:  train => train-01
Span 11-12:  train => train-01
Span 16-17:  weekends => weekend

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(1, 0),060000,(date-entity :year 2006),false), Span(27,28,List(2),more,more,false), Span(26,27,List(3),300000,300000,false), Span(25,26,List(4),train,train-01,false), Span(24,25,List(5),could,possible,false), Span(23,24,List(6),and,and,false), Span(22,23,List(8, 7),050000,(date-entity :year 2005),false), Span(20,21,List(9),half,half,false), Span(16,17,List(10),weekends,weekend,false), Span(15,16,List(11),20,20,false), Span(14,15,List(12),over,over,false), Span(13,14,List(13),civilians,civilian,false), Span(12,13,List(14),50000,50000,false), Span(11,12,List(15),train,train-01,false), Span(9,10,List(16),hope,hope-01,false), Span(8,9,List(17),forces,force,false), Span(7,8,List(18),armed,arm-01,false), Span(4,5,List(19),interview,interview-01,false), Span(1,2,List(20),said,say-01,false), Span(0,1,List(23, 22, 21),Quintero,(person :name (name :op "Quintero")),false)),Map(2 -> more, 5 -> possible, 12 -> over, 15 -> train-01, 8 -> 2005, 21 -> person, 18 -> arm-01, 7 -> date-entity, 17 -> force, 1 -> 2006, 23 -> "Quintero", 4 -> train-01, 11 -> 20, 14 -> 50000, 20 -> say-01, 6 -> and, 22 -> name, 0 -> date-entity, 9 -> half, 16 -> hope-01, 19 -> interview-01, 3 -> 300000, 10 -> weekend, 13 -> civilian),Map(n -> name, w -> weekend, h -> half, 2 -> 2006, h2 -> hope-01, 5 -> 50000, t -> train-01, p2 -> person, s -> say-01, d -> date-entity, m -> more, p -> possible, 23 -> 20, a -> and, d2 -> date-entity, t2 -> train-01, i -> interview-01, a2 -> arm-01, c -> civilian, f -> force, 22 -> 2005, o -> over, 3 -> 300000))),[Ljava.lang.String;@1dd0e7c4,Annotation([Ljava.lang.String;@7894f09b,[Ljava.lang.String;@3d484181,[Ljava.lang.String;@6111ba37),Annotation([Ljava.lang.String;@7be58f16,[Ljava.lang.String;@242aa8d9,[Ledu.cmu.lti.nlp.amr.Dependency;@5b11a194),Annotation([Ljava.lang.String;@37bd68c3,[Ljava.lang.String;@60f7cc1d,[Ljava.lang.String;@11eadcba),Annotation([Ljava.lang.String;@4721d212,[Ljava.lang.String;@1b065145,[Ledu.cmu.lti.nlp.amr.Entity;@45cff11c))
AMR:
(5 / 50000, op, i / interview-01)
(a / and, op, h2 / hope-01)
(a2 / arm-01, ARG1, f / force)
(c / civilian, mod, m / more)
(c / civilian, mod, o / over)
(c / civilian, quant, 3 / 300000)
(d / date-entity, year, 2 / 2006)
(d2 / date-entity, year, 22 / 2005)
(h2 / hope-01, ARG0, f / force)
(h2 / hope-01, ARG1, t / train-01)
(i / interview-01, ARG1, p2 / person)
(n / name, op, "Quintero")
(p / possible, domain, t2 / train-01)
(p2 / person, name, n / name)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, a / and)
(s / say-01, medium, i / interview-01)
(t / train-01, ARG0, f / force)
(t / train-01, ARG1, d2 / date-entity)
(t / train-01, duration, w / weekend)
(t / train-01, time, h / half)
(t2 / train-01, ARG0, f / force)
(t2 / train-01, ARG2, c / civilian)
(t2 / train-01, time, d / date-entity)
(w / weekend, quant, 23 / 20)

Decoded in 1,844,157 microseconds
Sentence: Quintero said that Venezuelans don't want to be the colony of any empire and have to be ready for any possibility.

NER Entity: (person :name (name :op "Quintero"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (thing :name (name :op "Venezuelans"))
NER Entity: (person :name (name :op "Quintero"))
Spans:
Span 14-15:  and => and
Span 20-21:  any => any
Span 12-13:  any => any
Span 10-11:  colony => colony
Span 4-5:  do => do-02
Span 13-14:  empire => empire
Span 21-22:  possibility => possible
Span 0-1:  Quintero => (person :name (name :op "Quintero"))
Span 18-19:  ready => ready-01
Span 1-2:  said => say-01
Span 3-4:  Venezuelans => (person :mod (country :name (name :op "Venezuela")))
Span 6-7:  want => want-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),possibility,possible,false), Span(20,21,List(1),any,any,false), Span(18,19,List(2),ready,ready-01,false), Span(14,15,List(3),and,and,false), Span(13,14,List(4),empire,empire,false), Span(12,13,List(5),any,any,false), Span(10,11,List(6),colony,colony,false), Span(6,7,List(7),want,want-01,false), Span(4,5,List(8),do,do-02,false), Span(3,4,List(12, 11, 10, 9),Venezuelans,(person :mod (country :name (name :op "Venezuela"))),false), Span(1,2,List(13),said,say-01,false), Span(0,1,List(16, 15, 14),Quintero,(person :name (name :op "Quintero")),false)),Map(2 -> ready-01, 5 -> any, 12 -> "Venezuela", 15 -> name, 8 -> do-02, 7 -> want-01, 1 -> any, 4 -> empire, 11 -> name, 14 -> person, 6 -> colony, 0 -> possible, 9 -> person, 16 -> "Quintero", 3 -> and, 10 -> country, 13 -> say-01),Map(e -> empire, w -> want-01, n -> name, p2 -> person, a3 -> any, s -> say-01, d -> do-02, p -> possible, a -> any, r -> ready-01, a2 -> and, c -> colony, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@207ea13,Annotation([Ljava.lang.String;@4bff1903,[Ljava.lang.String;@62dae540,[Ljava.lang.String;@5827af16),Annotation([Ljava.lang.String;@654d8173,[Ljava.lang.String;@56c9bbd8,[Ledu.cmu.lti.nlp.amr.Dependency;@630cb4a4),Annotation([Ljava.lang.String;@636e8cc,[Ljava.lang.String;@f79a760,[Ljava.lang.String;@14f5da2c),Annotation([Ljava.lang.String;@12dae582,[Ljava.lang.String;@239b0f9d,[Ledu.cmu.lti.nlp.amr.Entity;@619bfe29))
AMR:
(a2 / and, op, w / want-01)
(c / colony, poss, e / empire)
(c2 / country, name, n / name)
(d / do-02, ARG1, w / want-01)
(n / name, op, "Venezuela")
(n2 / name, op, "Quintero")
(p / possible, mod, a / any)
(p / possible, mod, a3 / any)
(p2 / person, mod, c2 / country)
(p3 / person, name, n2 / name)
(r / ready-01, ARG1, p2 / person)
(r / ready-01, ARG2, p / possible)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, a2 / and)
(w / want-01, ARG0, p2 / person)
(w / want-01, ARG1, c / colony)

Decoded in 119,181 microseconds
Sentence: 100000 reservists in 050600 engaged with the Venezuelan navy in a massive war game to repel a stronger country that had invaded.

mkDayMonthYear(100000,00,00,10)
mkDayMonthYear(050600,00,06,05)
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (thing :name (name :op "Venezuelan"))
mkDayMonthYear(050600,00,06,05)
mkDayMonthYear(100000,00,00,10)
Spans:
Span 3-4:  050600 => (date-entity :month 6 :year 2005)
Span 0-1:  100000 => (date-entity :day 0 :month 0 :year 10)
Span 18-19:  country => country
Span 4-5:  engaged => engage-01
Span 13-14:  game => game
Span 21-22:  invaded => invade-01
Span 11-12:  massive => massive
Span 8-9:  navy => navy
Span 15-16:  repel => repel-01
Span 1-2:  reservists => reservist
Span 17-18:  stronger => strong
Span 7-8:  Venezuelan => (country :name (name :op "Venezuela"))
Span 12-13:  war => war

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),invaded,invade-01,false), Span(18,19,List(1),country,country,false), Span(17,18,List(2),stronger,strong,false), Span(15,16,List(3),repel,repel-01,false), Span(13,14,List(4),game,game,false), Span(12,13,List(5),war,war,false), Span(11,12,List(6),massive,massive,false), Span(8,9,List(7),navy,navy,false), Span(7,8,List(10, 9, 8),Venezuelan,(country :name (name :op "Venezuela")),false), Span(4,5,List(11),engaged,engage-01,false), Span(3,4,List(14, 13, 12),050600,(date-entity :month 6 :year 2005),false), Span(1,2,List(15),reservists,reservist,false), Span(0,1,List(19, 18, 17, 16),100000,(date-entity :day 0 :month 0 :year 10),false)),Map(2 -> strong, 5 -> war, 12 -> date-entity, 15 -> reservist, 8 -> country, 18 -> 0, 7 -> navy, 17 -> 0, 1 -> country, 4 -> game, 11 -> engage-01, 14 -> 2005, 6 -> massive, 0 -> invade-01, 9 -> name, 16 -> date-entity, 19 -> 10, 3 -> repel-01, 10 -> "Venezuela", 13 -> 6),Map(e -> engage-01, w -> war, n -> navy, 2 -> 2005, s -> strong, m -> massive, d -> date-entity, 1 -> 10, r2 -> reservist, g -> game, d2 -> date-entity, 02 -> 0, i -> invade-01, r -> repel-01, c -> country, 6 -> 6, 0 -> 0, c2 -> country, n2 -> name))),[Ljava.lang.String;@5b057c8c,Annotation([Ljava.lang.String;@1eb6749b,[Ljava.lang.String;@652a7737,[Ljava.lang.String;@5b7ea70d),Annotation([Ljava.lang.String;@2bef51f2,[Ljava.lang.String;@650eab8,[Ledu.cmu.lti.nlp.amr.Dependency;@30f5a68a),Annotation([Ljava.lang.String;@1e1d3956,[Ljava.lang.String;@4f2c9ba6,[Ljava.lang.String;@4e28bdd1),Annotation([Ljava.lang.String;@53f48368,[Ljava.lang.String;@24d4d7c9,[Ledu.cmu.lti.nlp.amr.Entity;@f0e995e))
AMR:
(c / country, mod, s / strong)
(c2 / country, name, n2 / name)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2005)
(d2 / date-entity, day, 0 / 0)
(d2 / date-entity, month, 02 / 0)
(d2 / date-entity, year, 1 / 10)
(e / engage-01, ARG1, r / repel-01)
(e / engage-01, ARG2, g / game)
(e / engage-01, time, d / date-entity)
(e / engage-01, time, d2 / date-entity)
(g / game, mod, m / massive)
(g / game, mod, w / war)
(i / invade-01, ARG0, c / country)
(i / invade-01, ARG1, c2 / country)
(n / navy, mod, c2 / country)
(n2 / name, op, "Venezuela")
(r / repel-01, ARG1, c / country)
(r2 / reservist, time, d2 / date-entity)

Decoded in 454,852 microseconds
Sentence: 40 employees of the state oil company participated in a similar exercise with 1200 soldiers in 050600.

mkDayMonthYear(050600,00,06,05)
mkDayMonthYear(050600,00,06,05)
Spans:
Span 16-17:  050600 => (date-entity :month 6 :year 2005)
Span 13-14:  1200 => 1200
Span 0-1:  40 => 40
Span 6-7:  company => company
Span 1-2:  employees => (person :ARG1-of employ-01)
Span 11-12:  exercise => exercise-01
Span 5-6:  oil => oil
Span 7-8:  participated => participate-01
Span 14-15:  soldiers => (have-org-role-91 :ARG2 soldier)
Span 4-5:  state => state

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),050600,(date-entity :month 6 :year 2005),false), Span(14,15,List(4, 3),soldiers,(have-org-role-91 :ARG2 soldier),false), Span(13,14,List(5),1200,1200,false), Span(11,12,List(6),exercise,exercise-01,false), Span(7,8,List(7),participated,participate-01,false), Span(6,7,List(8),company,company,false), Span(5,6,List(9),oil,oil,false), Span(4,5,List(10),state,state,false), Span(1,2,List(12, 11),employees,(person :ARG1-of employ-01),false), Span(0,1,List(13),40,40,false)),Map(2 -> 2005, 5 -> 1200, 12 -> employ-01, 8 -> company, 7 -> participate-01, 1 -> 6, 4 -> soldier, 11 -> person, 6 -> exercise-01, 0 -> date-entity, 9 -> oil, 3 -> have-org-role-91, 10 -> state, 13 -> 40),Map(e -> exercise-01, h -> have-org-role-91, 2 -> 2005, s2 -> state, p2 -> person, e2 -> employ-01, s -> soldier, d -> date-entity, 1 -> 1200, p -> participate-01, 4 -> 40, 6 -> 6, c -> company, o -> oil))),[Ljava.lang.String;@4c37b5b,Annotation([Ljava.lang.String;@73db4768,[Ljava.lang.String;@71b3bc45,[Ljava.lang.String;@a8c1f44),Annotation([Ljava.lang.String;@150ab4ed,[Ljava.lang.String;@3c435123,[Ledu.cmu.lti.nlp.amr.Dependency;@50fe837a),Annotation([Ljava.lang.String;@3a62c01e,[Ljava.lang.String;@7a8fa663,[Ljava.lang.String;@5ce33a58),Annotation([Ljava.lang.String;@78a287ed,[Ljava.lang.String;@546ccad7,[Ledu.cmu.lti.nlp.amr.Entity;@5357c287))
AMR:
(c / company, mod, o / oil)
(c / company, mod, s2 / state)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2005)
(e / exercise-01, ARG1, d / date-entity)
(e / exercise-01, ARG2, 1 / 1200)
(e2 / employ-01, ARG0, c / company)
(e2 / employ-01, ARG1, p2 / person)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, 4 / 40)
(h / have-org-role-91, ARG2, s / soldier)
(p / participate-01, ARG0, p2 / person)
(p / participate-01, ARG1, e / exercise-01)

Decoded in 335,825 microseconds
Sentence: Pro-Chavez circles here warn of asymmetrical warfare.

Spans:
Span 2-3:  Chavez => (person :name (name :op "Chavez"))
Span 3-4:  circles => circle
Span 4-5:  here => here
Span 8-9:  warfare => warfare
Span 5-6:  warn => warn-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),warfare,warfare,false), Span(5,6,List(1),warn,warn-01,false), Span(4,5,List(2),here,here,false), Span(3,4,List(3),circles,circle,false), Span(2,3,List(6, 5, 4),Chavez,(person :name (name :op "Chavez")),false)),Map(2 -> here, 5 -> name, 1 -> warn-01, 4 -> person, 6 -> "Chavez", 0 -> warfare, 3 -> circle),Map(n -> name, w -> warfare, h -> here, p -> person, w2 -> warn-01, c -> circle))),[Ljava.lang.String;@1623134f,Annotation([Ljava.lang.String;@7a527389,[Ljava.lang.String;@485a3466,[Ljava.lang.String;@25748410),Annotation([Ljava.lang.String;@2b43529a,[Ljava.lang.String;@4264b240,[Ledu.cmu.lti.nlp.amr.Dependency;@5b04476e),Annotation([Ljava.lang.String;@5ad10c1a,[Ljava.lang.String;@6bb75258,[Ljava.lang.String;@c260bdc),Annotation([Ljava.lang.String;@75e01201,[Ljava.lang.String;@2783717b,[Ledu.cmu.lti.nlp.amr.Entity;@76f7d241))
AMR:
(c / circle, location, h / here)
(n / name, op, "Chavez")
(p / person, name, n / name)
(w2 / warn-01, ARG0, c / circle)
(w2 / warn-01, ARG1, w / warfare)
(w2 / warn-01, ARG6, p / person)

Decoded in 42,396 microseconds
Sentence: Asymmetrical warfare is a term coined by US military strategists to describe a conflict between unequal combatants where the weaker side employs guerrilla tactics.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 14-15:  between => between
Span 5-6:  coined => coin-01
Span 16-17:  combatants => (person :ARG0-of combat-01)
Span 13-14:  conflict => conflict-01
Span 11-12:  describe => describe-01
Span 21-22:  employs => employ-02
Span 22-23:  guerrilla => guerrilla
Span 8-9:  military => military
Span 20-21:  side => side
Span 9-10:  strategists => strategize-01
Span 23-24:  tactics => tactic
Span 4-5:  term => term
Span 15-16:  unequal => equal
Span 7-8:  US => (country :name (name :op "US"))
Span 1-2:  warfare => warfare
Span 19-20:  weaker => weak

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),tactics,tactic,false), Span(22,23,List(1),guerrilla,guerrilla,false), Span(21,22,List(2),employs,employ-02,false), Span(20,21,List(3),side,side,false), Span(19,20,List(4),weaker,weak,false), Span(16,17,List(6, 5),combatants,(person :ARG0-of combat-01),false), Span(15,16,List(7),unequal,equal,false), Span(14,15,List(8),between,between,false), Span(13,14,List(9),conflict,conflict-01,false), Span(11,12,List(10),describe,describe-01,false), Span(9,10,List(11),strategists,strategize-01,false), Span(8,9,List(12),military,military,false), Span(7,8,List(15, 14, 13),US,(country :name (name :op "US")),false), Span(5,6,List(16),coined,coin-01,false), Span(4,5,List(17),term,term,false), Span(1,2,List(18),warfare,warfare,false)),Map(2 -> employ-02, 5 -> person, 12 -> military, 15 -> "US", 8 -> between, 18 -> warfare, 7 -> equal, 17 -> term, 1 -> guerrilla, 4 -> weak, 11 -> strategize-01, 14 -> name, 6 -> combat-01, 0 -> tactic, 9 -> conflict-01, 16 -> coin-01, 3 -> side, 10 -> describe-01, 13 -> country),Map(e -> employ-02, n -> name, w -> weak, s2 -> strategize-01, t -> tactic, b -> between, e2 -> equal, c4 -> coin-01, s -> side, d -> describe-01, m -> military, g -> guerrilla, p -> person, c3 -> country, t2 -> term, w2 -> warfare, c -> combat-01, c2 -> conflict-01))),[Ljava.lang.String;@4a335fa8,Annotation([Ljava.lang.String;@3f363cf5,[Ljava.lang.String;@3829ac1,[Ljava.lang.String;@4baf352a),Annotation([Ljava.lang.String;@1bb1fde8,[Ljava.lang.String;@15eebbff,[Ledu.cmu.lti.nlp.amr.Dependency;@22d6f11),Annotation([Ljava.lang.String;@30990c1b,[Ljava.lang.String;@2453f95d,[Ljava.lang.String;@44828f6b),Annotation([Ljava.lang.String;@2dbe250d,[Ljava.lang.String;@553f1d75,[Ledu.cmu.lti.nlp.amr.Entity;@6e1d8f9e))
AMR:
(b / between, op, p / person)
(c / combat-01, ARG0, p / person)
(c2 / conflict-01, ARG0, p / person)
(c2 / conflict-01, ARG1, c3 / country)
(c3 / country, name, n / name)
(c4 / coin-01, ARG1, t2 / term)
(d / describe-01, ARG0, t2 / term)
(d / describe-01, ARG1, c2 / conflict-01)
(e / employ-02, ARG0, s / side)
(e / employ-02, ARG1, t / tactic)
(e / employ-02, location, c2 / conflict-01)
(m / military, mod, c3 / country)
(n / name, op, "US")
(p / person, mod, e2 / equal)
(s / side, mod, w / weak)
(s2 / strategize-01, ARG1, m / military)
(t / tactic, mod, g / guerrilla)
(t2 / term, domain, w2 / warfare)

Decoded in 417,939 microseconds
Sentence: The US government has given $3.3 billion in mostly military aid to Colombia in the past 5 years.

NER Entity: (country :name (name :op "The" :op "US"))
NER Entity: (country :name (name :op "Colombia"))
Spans:
Span 17-18:  5 => 5
Span 11-12:  aid => aid-01
Span 13-14:  Colombia => (country :name (name :op "Colombia"))
Span 4-5:  given => give-01
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 10-11:  military => military
Span 9-10:  mostly => most
Span 16-17:  past => past
Span 0-2:  The US => (country :name (name :op "The" :op "US"))
Span 18-19:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),years,(temporal-quantity :unit year),false), Span(17,18,List(2),5,5,false), Span(16,17,List(3),past,past,false), Span(13,14,List(6, 5, 4),Colombia,(country :name (name :op "Colombia")),false), Span(11,12,List(7),aid,aid-01,false), Span(10,11,List(8),military,military,false), Span(9,10,List(9),mostly,most,false), Span(4,5,List(10),given,give-01,false), Span(2,3,List(12, 11),government,(government-organization :ARG0-of govern-01),false), Span(0,2,List(16, 15, 14, 13),The US,(country :name (name :op "The" :op "US")),false)),Map(2 -> 5, 5 -> name, 12 -> govern-01, 15 -> "The", 8 -> military, 7 -> aid-01, 1 -> year, 4 -> country, 11 -> government-organization, 14 -> name, 6 -> "Colombia", 0 -> temporal-quantity, 9 -> most, 16 -> "US", 3 -> past, 10 -> give-01, 13 -> country),Map(n -> name, g3 -> govern-01, 5 -> 5, t -> temporal-quantity, m2 -> most, m -> military, g2 -> government-organization, y -> year, p -> past, g -> give-01, a -> aid-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@3e34ace1,Annotation([Ljava.lang.String;@62fe6067,[Ljava.lang.String;@4f071df8,[Ljava.lang.String;@4de41af9),Annotation([Ljava.lang.String;@56ace400,[Ljava.lang.String;@47404bea,[Ledu.cmu.lti.nlp.amr.Dependency;@305f7627),Annotation([Ljava.lang.String;@5d018107,[Ljava.lang.String;@6cbcf243,[Ljava.lang.String;@29e6eb25),Annotation([Ljava.lang.String;@62435e70,[Ljava.lang.String;@339bf286,[Ledu.cmu.lti.nlp.amr.Entity;@38be305c))
AMR:
(a / aid-01, ARG0, g2 / government-organization)
(a / aid-01, ARG1, m / military)
(a / aid-01, degree, m2 / most)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(g / give-01, ARG0, g2 / government-organization)
(g / give-01, ARG2, c / country)
(g / give-01, time, p / past)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c2 / country)
(n / name, op, "Colombia")
(n2 / name, op, "The")
(n2 / name, op, "US")
(p / past, op, t / temporal-quantity)
(t / temporal-quantity, quant, 5 / 5)
(t / temporal-quantity, unit, y / year)

Decoded in 173,188 microseconds
Sentence: Chavez loyalists fear that the US government could instigate a proxy war between Colombia and Venezuela as a way to oust Chavez and control Venezuelan oil.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Colombia"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 22-23:  and => and
Span 14-15:  and => and
Span 12-13:  between => between
Span 21-22:  Chavez => (person :name (name :op "Chavez"))
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 13-14:  Colombia => (country :name (name :op "Colombia"))
Span 23-24:  control => control-01
Span 7-8:  could => possible
Span 2-3:  fear => fear-01
Span 6-7:  government => (government-organization :ARG0-of govern-01)
Span 8-9:  instigate => instigate-01
Span 1-2:  loyalists => (person :ARG1-of loyal-41)
Span 25-26:  oil => oil
Span 20-21:  oust => oust-01
Span 10-11:  proxy => proxy
Span 5-6:  US => (country :name (name :op "US"))
Span 15-16:  Venezuela => (country :name (name :op "Venezuela"))
Span 24-25:  Venezuelan => (country :name (name :op "Venezuela"))
Span 11-12:  war => war
Span 18-19:  way => way

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),oil,oil,false), Span(24,25,List(3, 2, 1),Venezuelan,(country :name (name :op "Venezuela")),false), Span(23,24,List(4),control,control-01,false), Span(22,23,List(5),and,and,false), Span(21,22,List(8, 7, 6),Chavez,(person :name (name :op "Chavez")),false), Span(20,21,List(9),oust,oust-01,false), Span(18,19,List(10),way,way,false), Span(15,16,List(13, 12, 11),Venezuela,(country :name (name :op "Venezuela")),false), Span(14,15,List(14),and,and,false), Span(13,14,List(17, 16, 15),Colombia,(country :name (name :op "Colombia")),false), Span(12,13,List(18),between,between,false), Span(11,12,List(19),war,war,false), Span(10,11,List(20),proxy,proxy,false), Span(8,9,List(21),instigate,instigate-01,false), Span(7,8,List(22),could,possible,false), Span(6,7,List(24, 23),government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(27, 26, 25),US,(country :name (name :op "US")),false), Span(2,3,List(28),fear,fear-01,false), Span(1,2,List(30, 29),loyalists,(person :ARG1-of loyal-41),false), Span(0,1,List(33, 32, 31),Chavez,(person :name (name :op "Chavez")),false)),Map(30 -> loyal-41, 2 -> name, 5 -> and, 33 -> "Chavez", 27 -> "US", 12 -> name, 8 -> "Chavez", 15 -> country, 21 -> instigate-01, 18 -> between, 24 -> govern-01, 7 -> name, 1 -> country, 17 -> "Colombia", 23 -> government-organization, 26 -> name, 4 -> control-01, 11 -> country, 32 -> name, 14 -> and, 29 -> person, 20 -> proxy, 28 -> fear-01, 6 -> person, 9 -> oust-01, 0 -> oil, 22 -> possible, 16 -> name, 19 -> war, 10 -> way, 3 -> "Venezuela", 31 -> person, 25 -> country, 13 -> "Venezuela"),Map(w -> way, n -> name, p5 -> person, b -> between, p2 -> proxy, c4 -> country, n4 -> name, g2 -> govern-01, p -> person, g -> government-organization, n3 -> name, c3 -> country, a -> and, p4 -> person, n6 -> name, o2 -> oust-01, w2 -> war, a2 -> and, i -> instigate-01, c -> country, l -> loyal-41, f -> fear-01, o -> oil, p3 -> possible, n2 -> name, c2 -> control-01, c5 -> country, n5 -> name))),[Ljava.lang.String;@269f4bad,Annotation([Ljava.lang.String;@5ed731d0,[Ljava.lang.String;@3234f74e,[Ljava.lang.String;@7bc10d84),Annotation([Ljava.lang.String;@275fe372,[Ljava.lang.String;@40e10ff8,[Ledu.cmu.lti.nlp.amr.Dependency;@557a1e2d),Annotation([Ljava.lang.String;@26a4842b,[Ljava.lang.String;@7e38a7fe,[Ljava.lang.String;@366ef90e),Annotation([Ljava.lang.String;@33e01298,[Ljava.lang.String;@31e75d13,[Ledu.cmu.lti.nlp.amr.Entity;@a5b0b86))
AMR:
(a / and, op, c2 / control-01)
(a / and, op, c3 / country)
(a2 / and, instrument, i / instigate-01)
(a2 / and, op, c2 / control-01)
(b / between, op, c3 / country)
(b / between, op, c4 / country)
(c / country, name, n / name)
(c2 / control-01, ARG1, o / oil)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(f / fear-01, ARG0, p4 / person)
(f / fear-01, ARG1, i / instigate-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c5 / country)
(i / instigate-01, ARG0, g / government-organization)
(i / instigate-01, ARG1, w2 / war)
(i / instigate-01, mod, p3 / possible)
(l / loyal-41, ARG1, p4 / person)
(l / loyal-41, ARG2, p5 / person)
(n / name, op, "Venezuela")
(n2 / name, op, "Chavez")
(n3 / name, op, "Venezuela")
(n4 / name, op, "Colombia")
(n5 / name, op, "US")
(n6 / name, op, "Chavez")
(o / oil, mod, c / country)
(o2 / oust-01, ARG0, g / government-organization)
(o2 / oust-01, ARG1, p / person)
(o2 / oust-01, ARG6, w / way)
(p / person, name, n2 / name)
(p5 / person, name, n6 / name)
(w2 / war, mod, p2 / proxy)

Decoded in 2,130,434 microseconds
Sentence: A senior US official in an interview dismissed the notion that the United States Government wants to invade Venezuela as complete and utter nonsense.

NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 21-22:  and => and
Span 20-21:  complete => complete-01
Span 7-8:  dismissed => dismiss-02
Span 14-15:  Government => (government-organization :ARG0-of govern-01)
Span 6-7:  interview => interview-01
Span 17-18:  invade => invade-01
Span 23-24:  nonsense => nonsense
Span 9-10:  notion => notion
Span 3-4:  official => (have-org-role-91 :ARG2 official)
Span 1-2:  senior => senior
Span 12-14:  United States => (country :name (name :op "United" :op "States"))
Span 2-3:  US => (country :name (name :op "US"))
Span 22-23:  utter => utter
Span 18-19:  Venezuela => (country :name (name :op "Venezuela"))
Span 15-16:  wants => want-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),nonsense,nonsense,false), Span(22,23,List(1),utter,utter,false), Span(21,22,List(2),and,and,false), Span(20,21,List(3),complete,complete-01,false), Span(18,19,List(6, 5, 4),Venezuela,(country :name (name :op "Venezuela")),false), Span(17,18,List(7),invade,invade-01,false), Span(15,16,List(8),wants,want-01,false), Span(14,15,List(10, 9),Government,(government-organization :ARG0-of govern-01),false), Span(12,14,List(14, 13, 12, 11),United States,(country :name (name :op "United" :op "States")),false), Span(9,10,List(15),notion,notion,false), Span(7,8,List(16),dismissed,dismiss-02,false), Span(6,7,List(17),interview,interview-01,false), Span(3,4,List(19, 18),official,(have-org-role-91 :ARG2 official),false), Span(2,3,List(22, 21, 20),US,(country :name (name :op "US")),false), Span(1,2,List(23),senior,senior,false)),Map(2 -> and, 5 -> name, 12 -> name, 15 -> notion, 8 -> want-01, 21 -> name, 18 -> have-org-role-91, 7 -> invade-01, 17 -> interview-01, 1 -> utter, 23 -> senior, 4 -> country, 11 -> country, 14 -> "States", 20 -> country, 6 -> "Venezuela", 22 -> "US", 0 -> nonsense, 9 -> government-organization, 16 -> dismiss-02, 19 -> official, 3 -> complete-01, 10 -> govern-01, 13 -> "United"),Map(n -> nonsense, w -> want-01, h -> have-org-role-91, c4 -> country, n4 -> notion, s -> senior, d -> dismiss-02, g2 -> govern-01, g -> government-organization, a -> and, c3 -> country, n3 -> name, i2 -> interview-01, i -> invade-01, c -> complete-01, u -> utter, o -> official, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@4b3c354a,Annotation([Ljava.lang.String;@78fb9a67,[Ljava.lang.String;@73ff4fae,[Ljava.lang.String;@21aa6d6c),Annotation([Ljava.lang.String;@b968a76,[Ljava.lang.String;@2f9a01c1,[Ledu.cmu.lti.nlp.amr.Dependency;@2611b9a3),Annotation([Ljava.lang.String;@54227100,[Ljava.lang.String;@6b5894c8,[Ljava.lang.String;@1433046b),Annotation([Ljava.lang.String;@3f446bef,[Ljava.lang.String;@7829b776,[Ledu.cmu.lti.nlp.amr.Entity;@5778826f))
AMR:
(a / and, op, c / complete-01)
(a / and, op, c2 / country)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n5 / name)
(d / dismiss-02, ARG1, n4 / notion)
(d / dismiss-02, ARG2, n / nonsense)
(d / dismiss-02, medium, i2 / interview-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, o / official)
(i / invade-01, ARG0, g / government-organization)
(i / invade-01, ARG1, c2 / country)
(i2 / interview-01, ARG1, o / official)
(n / nonsense, mod, u / utter)
(n2 / name, op, "Venezuela")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / notion, topic, w / want-01)
(n5 / name, op, "US")
(o / official, mod, s / senior)
(w / want-01, ARG0, g / government-organization)
(w / want-01, ARG1, i / invade-01)

Decoded in 600,859 microseconds
Sentence: The official said the chavista side wishes to make the relationship negative because they've made a political calculation that Mr. Chavez reached power by constantly being in confrontation with the US.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 12-13:  because => cause-01
Span 18-19:  calculation => calculate-01
Span 21-22:  Chavez => (person :name (name :op "Chavez"))
Span 28-29:  confrontation => confront-01
Span 25-26:  constantly => constant
Span 8-9:  make => make-01
Span 20-21:  Mr. => "Mr."
Span 11-12:  negative => negative
Span 1-2:  official => (have-org-role-91 :ARG2 official)
Span 17-18:  political => politics
Span 23-24:  power => power
Span 22-23:  reached => reach-01
Span 10-11:  relationship => relationship
Span 2-3:  said => say-01
Span 5-6:  side => side
Span 13-14:  they => they
Span 31-32:  US => (country :name (name :op "US"))
Span 6-7:  wishes => wish-01

Langrangian relaxation converged after 89 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(2, 1, 0),US,(country :name (name :op "US")),false), Span(28,29,List(3),confrontation,confront-01,false), Span(25,26,List(4),constantly,constant,false), Span(23,24,List(5),power,power,false), Span(22,23,List(6),reached,reach-01,false), Span(21,22,List(9, 8, 7),Chavez,(person :name (name :op "Chavez")),false), Span(20,21,List(10),Mr.,"Mr.",false), Span(18,19,List(11),calculation,calculate-01,false), Span(17,18,List(12),political,politics,false), Span(13,14,List(13),they,they,false), Span(12,13,List(14),because,cause-01,false), Span(11,12,List(15),negative,negative,false), Span(10,11,List(16),relationship,relationship,false), Span(8,9,List(17),make,make-01,false), Span(6,7,List(18),wishes,wish-01,false), Span(5,6,List(19),side,side,false), Span(2,3,List(20),said,say-01,false), Span(1,2,List(22, 21),official,(have-org-role-91 :ARG2 official),false)),Map(2 -> "US", 5 -> power, 12 -> politics, 15 -> negative, 8 -> name, 21 -> have-org-role-91, 18 -> wish-01, 7 -> person, 17 -> make-01, 1 -> name, 4 -> constant, 11 -> calculate-01, 14 -> cause-01, 20 -> say-01, 6 -> reach-01, 22 -> official, 0 -> country, 9 -> "Chavez", 16 -> relationship, 19 -> side, 3 -> confront-01, 10 -> "Mr.", 13 -> they),Map(w -> wish-01, n -> name, h -> have-org-role-91, M -> "Mr.", s2 -> say-01, t -> they, p2 -> person, c4 -> calculate-01, s -> side, m -> make-01, r2 -> relationship, p -> power, c3 -> constant, n3 -> negative, r -> reach-01, c -> country, o -> official, p3 -> politics, c2 -> confront-01, n2 -> name, c5 -> cause-01))),[Ljava.lang.String;@5b64c4b7,Annotation([Ljava.lang.String;@4763c727,[Ljava.lang.String;@72445aba,[Ljava.lang.String;@61bcd567),Annotation([Ljava.lang.String;@1c80e49b,[Ljava.lang.String;@458342d3,[Ledu.cmu.lti.nlp.amr.Dependency;@15c25153),Annotation([Ljava.lang.String;@1252b961,[Ljava.lang.String;@9ed238c,[Ljava.lang.String;@56276db8),Annotation([Ljava.lang.String;@51e8e6e6,[Ljava.lang.String;@56f6d40b,[Ledu.cmu.lti.nlp.amr.Entity;@36676c1a))
AMR:
(M / "Mr.", mod, s / side)
(c / country, name, n / name)
(c2 / confront-01, ARG1, c / country)
(c2 / confront-01, manner, c3 / constant)
(c4 / calculate-01, ARG0, s / side)
(c4 / calculate-01, ARG1, r / reach-01)
(c4 / calculate-01, mod, p3 / politics)
(c5 / cause-01, ARG0, c4 / calculate-01)
(c5 / cause-01, ARG1, w / wish-01)
(c5 / cause-01, ARG6, t / they)
(h / have-org-role-91, ARG1, n3 / negative)
(h / have-org-role-91, ARG2, o / official)
(m / make-01, ARG0, s / side)
(m / make-01, ARG1, r2 / relationship)
(n / name, op, "US")
(n2 / name, op, "Chavez")
(p2 / person, name, n2 / name)
(r / reach-01, ARG1, p / power)
(r / reach-01, instrument, c2 / confront-01)
(r2 / relationship, mod, n3 / negative)
(s / side, mod, p2 / person)
(s2 / say-01, ARG1, w / wish-01)
(w / wish-01, ARG0, s / side)
(w / wish-01, ARG1, m / make-01)

Decoded in 2,806,755 microseconds
Sentence: Another development that has troubled the United States is Chavez's rollback of military cooperation and joint exercises.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 15-16:  and => and
Span 0-1:  Another => another
Span 9-10:  Chavez => (person :name (name :op "Chavez"))
Span 14-15:  cooperation => cooperate-01
Span 1-2:  development => develop-02
Span 17-18:  exercises => exercise
Span 16-17:  joint => joint
Span 13-14:  military => military
Span 11-12:  rollback => roll-00
Span 4-5:  troubled => trouble-01
Span 6-8:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),exercises,exercise,false), Span(16,17,List(1),joint,joint,false), Span(15,16,List(2),and,and,false), Span(14,15,List(3),cooperation,cooperate-01,false), Span(13,14,List(4),military,military,false), Span(11,12,List(5),rollback,roll-00,false), Span(9,10,List(8, 7, 6),Chavez,(person :name (name :op "Chavez")),false), Span(6,8,List(12, 11, 10, 9),United States,(country :name (name :op "United" :op "States")),false), Span(4,5,List(13),troubled,trouble-01,false), Span(1,2,List(14),development,develop-02,false), Span(0,1,List(15),Another,another,false)),Map(2 -> and, 5 -> roll-00, 12 -> "States", 15 -> another, 8 -> "Chavez", 7 -> name, 1 -> joint, 4 -> military, 11 -> "United", 14 -> develop-02, 6 -> person, 0 -> exercise, 9 -> country, 3 -> cooperate-01, 10 -> name, 13 -> trouble-01),Map(e -> exercise, n -> name, t -> trouble-01, j -> joint, m -> military, d -> develop-02, p -> person, a -> and, r -> roll-00, a2 -> another, c -> cooperate-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@5b408dc3,Annotation([Ljava.lang.String;@4d098f9b,[Ljava.lang.String;@2dbf4cbd,[Ljava.lang.String;@20b5f2ac),Annotation([Ljava.lang.String;@7fc44dec,[Ljava.lang.String;@7e3060d8,[Ledu.cmu.lti.nlp.amr.Dependency;@293d0107),Annotation([Ljava.lang.String;@2692b61e,[Ljava.lang.String;@7b64240d,[Ljava.lang.String;@62fad19),Annotation([Ljava.lang.String;@47dbb1e2,[Ljava.lang.String;@74cadd41,[Ledu.cmu.lti.nlp.amr.Entity;@2e54db99))
AMR:
(a / and, op, c / cooperate-01)
(a / and, op, e / exercise)
(c / cooperate-01, ARG1, m / military)
(c2 / country, name, n2 / name)
(d / develop-02, ARG1, r / roll-00)
(d / develop-02, mod, a2 / another)
(e / exercise, mod, j / joint)
(n / name, op, "Chavez")
(n2 / name, op, "States")
(n2 / name, op, "United")
(p / person, name, n / name)
(r / roll-00, ARG0, p / person)
(r / roll-00, ARG1, a / and)
(t / trouble-01, ARG0, d / develop-02)
(t / trouble-01, ARG1, c2 / country)

Decoded in 640,272 microseconds
Sentence: The US military had a Cooperation Office for 50 years in a Venezuelan Fort.

NER Entity: (country :name (name :op "US"))
NER Entity: (organization :name (name :op "Cooperation" :op "Office"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (organization :name (name :op "Fort"))
NER Entity: (organization :name (name :op "Fort"))
NER Entity: (thing :name (name :op "Venezuelan"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 8-9:  50 => 50
Span 5-7:  Cooperation Office => (organization :name (name :op "Office" :op "Cooperation"))
Span 13-14:  Fort => fort
Span 2-3:  military => military
Span 1-2:  US => (country :name (name :op "US"))
Span 12-13:  Venezuelan => (country :name (name :op "Venezuela"))
Span 9-10:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),Fort,fort,false), Span(12,13,List(3, 2, 1),Venezuelan,(country :name (name :op "Venezuela")),false), Span(9,10,List(5, 4),years,(temporal-quantity :unit year),false), Span(8,9,List(6),50,50,false), Span(5,7,List(10, 9, 8, 7),Cooperation Office,(organization :name (name :op "Office" :op "Cooperation")),false), Span(2,3,List(11),military,military,false), Span(1,2,List(14, 13, 12),US,(country :name (name :op "US")),false)),Map(2 -> name, 5 -> year, 12 -> country, 8 -> name, 7 -> organization, 1 -> country, 4 -> temporal-quantity, 11 -> military, 14 -> "US", 6 -> 50, 0 -> fort, 9 -> "Office", 3 -> "Venezuela", 10 -> "Cooperation", 13 -> name),Map(n -> name, 5 -> 50, t -> temporal-quantity, m -> military, y -> year, n3 -> name, c -> country, o -> organization, f -> fort, c2 -> country, n2 -> name))),[Ljava.lang.String;@55e8ec2f,Annotation([Ljava.lang.String;@4f2613d1,[Ljava.lang.String;@6d24ffa1,[Ljava.lang.String;@65a4798f),Annotation([Ljava.lang.String;@773f7880,[Ljava.lang.String;@878452d,[Ledu.cmu.lti.nlp.amr.Dependency;@426b6a74),Annotation([Ljava.lang.String;@4c51bb7,[Ljava.lang.String;@83298d7,[Ljava.lang.String;@42a9e5d1),Annotation([Ljava.lang.String;@5b080f3a,[Ljava.lang.String;@773cbf4f,[Ledu.cmu.lti.nlp.amr.Entity;@6b54655f))
AMR:
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(f / fort, mod, c / country)
(f / fort, part, t / temporal-quantity)
(m / military, mod, c2 / country)
(m / military, poss, c / country)
(n / name, op, "Venezuela")
(n2 / name, op, "Cooperation")
(n2 / name, op, "Office")
(n3 / name, op, "US")
(o / organization, name, n2 / name)
(o / organization, poss, f / fort)
(t / temporal-quantity, quant, 5 / 50)
(t / temporal-quantity, unit, y / year)

Decoded in 62,421 microseconds
Sentence: Chavez shut it down in 040000.

NER Entity: (person :name (name :op "Chavez"))
mkDayMonthYear(040000,00,00,04)
mkDayMonthYear(040000,00,00,04)
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 5-6:  040000 => (date-entity :year 2004)
Span 0-1:  Chavez => (person :name (name :op "Chavez"))
Span 3-4:  down => down
Span 2-3:  it => it
Span 1-2:  shut => shut-05

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(1, 0),040000,(date-entity :year 2004),false), Span(3,4,List(2),down,down,false), Span(2,3,List(3),it,it,false), Span(1,2,List(4),shut,shut-05,false), Span(0,1,List(7, 6, 5),Chavez,(person :name (name :op "Chavez")),false)),Map(2 -> down, 5 -> person, 7 -> "Chavez", 1 -> 2004, 4 -> shut-05, 6 -> name, 0 -> date-entity, 3 -> it),Map(n -> name, 2 -> 2004, s -> shut-05, d -> date-entity, p -> person, d2 -> down, i -> it))),[Ljava.lang.String;@665e9289,Annotation([Ljava.lang.String;@7d3430a7,[Ljava.lang.String;@6f603e89,[Ljava.lang.String;@2756c0a7),Annotation([Ljava.lang.String;@350ec41e,[Ljava.lang.String;@69637b10,[Ledu.cmu.lti.nlp.amr.Dependency;@71984c3),Annotation([Ljava.lang.String;@165b2f7f,[Ljava.lang.String;@5536379e,[Ljava.lang.String;@277f7dd3),Annotation([Ljava.lang.String;@6c8bca63,[Ljava.lang.String;@2364305a,[Ledu.cmu.lti.nlp.amr.Entity;@470a696f))
AMR:
(d / date-entity, year, 2 / 2004)
(n / name, op, "Chavez")
(p / person, name, n / name)
(s / shut-05, ARG0, p / person)
(s / shut-05, ARG1, i / it)
(s / shut-05, ARG6, d2 / down)
(s / shut-05, time, d / date-entity)

Decoded in 112,927 microseconds
Sentence: 5 US military trainers and students participating in an exchange program were ordered to leave the country in 050400.

NER Entity: (country :name (name :op "US"))
mkDayMonthYear(050400,00,04,05)
mkDayMonthYear(050400,00,04,05)
NER Entity: (country :name (name :op "US"))
Spans:
Span 18-19:  050400 => (date-entity :month 4 :year 2005)
Span 0-1:  5 => 5
Span 4-5:  and => and
Span 16-17:  country => country
Span 9-10:  exchange => exchange-01
Span 14-15:  leave => leave-01
Span 2-3:  military => military
Span 12-13:  ordered => order-01
Span 6-7:  participating => participate-01
Span 10-11:  program => program
Span 5-6:  students => (person :ARG0-of study-01)
Span 3-4:  trainers => train-01
Span 1-2:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(2, 1, 0),050400,(date-entity :month 4 :year 2005),false), Span(16,17,List(3),country,country,false), Span(14,15,List(4),leave,leave-01,false), Span(12,13,List(5),ordered,order-01,false), Span(10,11,List(6),program,program,false), Span(9,10,List(7),exchange,exchange-01,false), Span(6,7,List(8),participating,participate-01,false), Span(5,6,List(10, 9),students,(person :ARG0-of study-01),false), Span(4,5,List(11),and,and,false), Span(3,4,List(12),trainers,train-01,false), Span(2,3,List(13),military,military,false), Span(1,2,List(16, 15, 14),US,(country :name (name :op "US")),false), Span(0,1,List(17),5,5,false)),Map(2 -> 2005, 5 -> order-01, 12 -> train-01, 15 -> name, 8 -> participate-01, 7 -> exchange-01, 17 -> 5, 1 -> 4, 4 -> leave-01, 11 -> and, 14 -> country, 6 -> program, 0 -> date-entity, 9 -> person, 16 -> "US", 3 -> country, 10 -> study-01, 13 -> military),Map(e -> exchange-01, n -> name, 2 -> 2005, 5 -> 5, t -> train-01, p2 -> participate-01, s -> study-01, m -> military, d -> date-entity, p -> program, 4 -> 4, a -> and, c -> country, l -> leave-01, o -> order-01, p3 -> person, c2 -> country))),[Ljava.lang.String;@1bc715b8,Annotation([Ljava.lang.String;@292d1c71,[Ljava.lang.String;@2b491fee,[Ljava.lang.String;@3f1c5af9),Annotation([Ljava.lang.String;@1c55f277,[Ljava.lang.String;@5ddabb18,[Ledu.cmu.lti.nlp.amr.Dependency;@3e8f7922),Annotation([Ljava.lang.String;@63192798,[Ljava.lang.String;@50eca7c6,[Ljava.lang.String;@58e6d4b8),Annotation([Ljava.lang.String;@1de5f0ef,[Ljava.lang.String;@376a312c,[Ledu.cmu.lti.nlp.amr.Entity;@28d6290))
AMR:
(a / and, op, p3 / person)
(c2 / country, name, n / name)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2005)
(e / exchange-01, ARG1, 5 / 5)
(l / leave-01, ARG0, a / and)
(l / leave-01, ARG1, c / country)
(l / leave-01, time, d / date-entity)
(m / military, mod, c2 / country)
(n / name, op, "US")
(o / order-01, ARG1, a / and)
(o / order-01, ARG2, l / leave-01)
(p / program, topic, e / exchange-01)
(p2 / participate-01, ARG0, p3 / person)
(p2 / participate-01, ARG1, p / program)
(s / study-01, ARG0, p3 / person)
(s / study-01, ARG1, m / military)
(t / train-01, ARG1, m / military)

Decoded in 933,171 microseconds
Sentence: Analysts say that it is likely Chavez is trying to indoctrinate his public and armed forces.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 0-1:  Analysts => (person :ARG0-of analyze-01)
Span 13-14:  and => and
Span 14-15:  armed => arm-01
Span 6-7:  Chavez => (person :name (name :op "Chavez"))
Span 15-16:  forces => force
Span 10-11:  indoctrinate => indoctrinate-01
Span 3-4:  it => it
Span 5-6:  likely => likely
Span 12-13:  public => public
Span 1-2:  say => say-01
Span 8-9:  trying => try-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),forces,force,false), Span(14,15,List(1),armed,arm-01,false), Span(13,14,List(2),and,and,false), Span(12,13,List(3),public,public,false), Span(10,11,List(4),indoctrinate,indoctrinate-01,false), Span(8,9,List(5),trying,try-01,false), Span(6,7,List(8, 7, 6),Chavez,(person :name (name :op "Chavez")),false), Span(5,6,List(9),likely,likely,false), Span(3,4,List(10),it,it,false), Span(1,2,List(11),say,say-01,false), Span(0,1,List(13, 12),Analysts,(person :ARG0-of analyze-01),false)),Map(2 -> and, 5 -> try-01, 12 -> person, 8 -> "Chavez", 7 -> name, 1 -> arm-01, 4 -> indoctrinate-01, 11 -> say-01, 6 -> person, 0 -> force, 9 -> likely, 3 -> public, 10 -> it, 13 -> analyze-01),Map(n -> name, t -> try-01, p2 -> person, a3 -> analyze-01, s -> say-01, p -> public, a -> arm-01, i2 -> it, a2 -> and, i -> indoctrinate-01, l -> likely, f -> force, p3 -> person))),[Ljava.lang.String;@6ca0256d,Annotation([Ljava.lang.String;@5ef0d29e,[Ljava.lang.String;@38f57b3d,[Ljava.lang.String;@51850751),Annotation([Ljava.lang.String;@3ce3db41,[Ljava.lang.String;@64df9a61,[Ledu.cmu.lti.nlp.amr.Dependency;@77602954),Annotation([Ljava.lang.String;@e260766,[Ljava.lang.String;@2c3dec30,[Ljava.lang.String;@34a97744),Annotation([Ljava.lang.String;@4275c20c,[Ljava.lang.String;@7c56e013,[Ledu.cmu.lti.nlp.amr.Entity;@3fc9dfc5))
AMR:
(a / arm-01, ARG1, f / force)
(a3 / analyze-01, ARG0, p3 / person)
(f / force, poss, p2 / person)
(i / indoctrinate-01, ARG0, p2 / person)
(i / indoctrinate-01, ARG1, a2 / and)
(l / likely, domain, i2 / it)
(l / likely, domain, t / try-01)
(n / name, op, "Chavez")
(p / public, poss, p2 / person)
(p2 / person, name, n / name)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, l / likely)
(t / try-01, ARG0, p2 / person)
(t / try-01, ARG1, i / indoctrinate-01)

Decoded in 83,824 microseconds
Sentence: Analysts say that there is no proof that Chavez will use those forces to aid leftist revolutions elsewhere.

NER Entity: (person :name (name :op "Chavez"))
NER Entity: (person :name (name :op "Chavez"))
Spans:
Span 14-15:  aid => aid-01
Span 0-1:  Analysts => (person :ARG0-of analyze-01)
Span 8-9:  Chavez => (person :name (name :op "Chavez"))
Span 17-18:  elsewhere => elsewhere
Span 12-13:  forces => force
Span 15-16:  leftist => leftist
Span 5-6:  no => -
Span 16-17:  revolutions => revolution
Span 1-2:  say => say-01
Span 10-11:  use => use-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),elsewhere,elsewhere,false), Span(16,17,List(1),revolutions,revolution,false), Span(15,16,List(2),leftist,leftist,false), Span(14,15,List(3),aid,aid-01,false), Span(12,13,List(4),forces,force,false), Span(10,11,List(5),use,use-01,false), Span(8,9,List(8, 7, 6),Chavez,(person :name (name :op "Chavez")),false), Span(5,6,List(9),no,-,false), Span(1,2,List(10),say,say-01,false), Span(0,1,List(12, 11),Analysts,(person :ARG0-of analyze-01),false)),Map(2 -> leftist, 5 -> use-01, 12 -> analyze-01, 8 -> "Chavez", 7 -> name, 1 -> revolution, 4 -> force, 11 -> person, 6 -> person, 0 -> elsewhere, 9 -> -, 3 -> aid-01, 10 -> say-01),Map(n -> name, e -> elsewhere, p2 -> person, s -> say-01, p -> person, a -> aid-01, a2 -> analyze-01, r -> revolution, - -> -, u -> use-01, l -> leftist, f -> force))),[Ljava.lang.String;@40258c2f,Annotation([Ljava.lang.String;@2cac4385,[Ljava.lang.String;@6731787b,[Ljava.lang.String;@16f7b4af),Annotation([Ljava.lang.String;@7adf16aa,[Ljava.lang.String;@34a1d21f,[Ledu.cmu.lti.nlp.amr.Dependency;@58bf8650),Annotation([Ljava.lang.String;@73c60324,[Ljava.lang.String;@71ae31b0,[Ljava.lang.String;@4ba534b0),Annotation([Ljava.lang.String;@6f0ca692,[Ljava.lang.String;@2c104774,[Ledu.cmu.lti.nlp.amr.Entity;@2cb3d0f7))
AMR:
(a / aid-01, ARG0, p / person)
(a / aid-01, ARG1, p2 / person)
(a / aid-01, ARG2, r / revolution)
(a2 / analyze-01, ARG0, p2 / person)
(n / name, op, "Chavez")
(p / person, name, n / name)
(r / revolution, location, e / elsewhere)
(r / revolution, mod, l / leftist)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, - / -)
(u / use-01, ARG0, p / person)
(u / use-01, ARG1, f / force)
(u / use-01, ARG2, a / aid-01)

Decoded in 510,756 microseconds
Sentence: 2007-06-18

mkDayMonthYear(2007-06-18,18,06,2007)
mkDayMonthYear(2007-06-18,18,06,2007)
Spans:
Span 0-1:  2007-06-18 => (date-entity :day 18 :month 6 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-06-18,(date-entity :day 18 :month 6 :year 2007),false)),Map(2 -> 6, 1 -> 18, 0 -> date-entity, 3 -> 2007),Map(2 -> 2007, d -> date-entity, 1 -> 18, 6 -> 6))),[Ljava.lang.String;@4e517165,Annotation([Ljava.lang.String;@44e3760b,[Ljava.lang.String;@6a66a204,[Ljava.lang.String;@5860f3d7),Annotation([Ljava.lang.String;@1d7f7be7,[Ljava.lang.String;@42f3156d,[Ledu.cmu.lti.nlp.amr.Dependency;@1ddae9b5),Annotation([Ljava.lang.String;@427b5f92,[Ljava.lang.String;@24bdb479,[Ljava.lang.String;@7e3f95fe),Annotation([Ljava.lang.String;@34625ccd,[Ljava.lang.String;@2c7d121c,[Ledu.cmu.lti.nlp.amr.Entity;@65aa6596))
AMR:
(d / date-entity, day, 1 / 18)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2007)

Decoded in 7,121 microseconds
Sentence: Korea, Democratic People's Republic of (KP)

NER Entity: (country :name (name :op "Korea"))
NER Entity: (thing :name (name :op "Democratic"))
NER Entity: (country :name (name :op "Republic"))
NER Entity: (organization :name (name :op "KP"))
NER Entity: (country :name (name :op "Republic"))
NER Entity: (thing :name (name :op "Democratic"))
Spans:
Span 2-3:  Democratic => "Democratic"
Span 3-4:  People => "People's"
Span 5-6:  Republic => "Republic"

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),Republic,"Republic",false), Span(3,4,List(1),People,"People's",false), Span(2,3,List(2),Democratic,"Democratic",false)),Map(2 -> "Democratic", 1 -> "People's", 0 -> "Republic"),Map(D -> "Democratic", P -> "People's", R -> "Republic"))),[Ljava.lang.String;@67389cb8,Annotation([Ljava.lang.String;@419a20a6,[Ljava.lang.String;@533377b,[Ljava.lang.String;@3383649e),Annotation([Ljava.lang.String;@10fde30a,[Ljava.lang.String;@f27ea3,[Ledu.cmu.lti.nlp.amr.Dependency;@1ce61929),Annotation([Ljava.lang.String;@346939bf,[Ljava.lang.String;@4bf3798b,[Ljava.lang.String;@58670130),Annotation([Ljava.lang.String;@74e47444,[Ljava.lang.String;@9bd0fa6,[Ledu.cmu.lti.nlp.amr.Entity;@59d2103b))
AMR:
(D / "Democratic", part, R / "Republic")
(P / "People's", poss, D / "Democratic")

Decoded in 12,242 microseconds
Sentence: proliferation; international

Spans:
Span 1-2:  ; => and
Span 2-3:  international => international
Span 0-1:  proliferation => proliferate-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),international,international,false), Span(1,2,List(1),;,and,false), Span(0,1,List(2),proliferation,proliferate-01,false)),Map(2 -> proliferate-01, 1 -> and, 0 -> international),Map(p -> proliferate-01, a -> and, i -> international))),[Ljava.lang.String;@39dcf4b0,Annotation([Ljava.lang.String;@6e4de19b,[Ljava.lang.String;@f6c03cb,[Ljava.lang.String;@46f699d5),Annotation([Ljava.lang.String;@18518ccf,[Ljava.lang.String;@1991f767,[Ledu.cmu.lti.nlp.amr.Dependency;@768ccdc5),Annotation([Ljava.lang.String;@4c6daf0,[Ljava.lang.String;@10650953,[Ljava.lang.String;@659eef7),Annotation([Ljava.lang.String;@162be91c,[Ljava.lang.String;@2488b073,[Ledu.cmu.lti.nlp.amr.Entity;@1c9f0a20))
AMR:
(a / and, op, i / international)
(a / and, op, p / proliferate-01)

Decoded in 5,567 microseconds
Sentence: The North Korean government may be prepared to begin shutting down a plutonium producing reactor in June 2007 as the first step toward disabling the Unit by December 2007.

NER Entity: (thing :name (name :op "North" :op "Korean"))
Spans:
Span 8-9:  begin => begin-01
Span 27-29:  December 2007 => (date-entity :month 12 :year 2007)
Span 23-24:  disabling => disable-01
Span 10-11:  down => down
Span 3-4:  government => (government-organization :ARG0-of govern-01)
Span 16-18:  June 2007 => (date-entity :month 6 :year 2007)
Span 4-5:  may => possible
Span 1-3:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 12-13:  plutonium => plutonium
Span 6-7:  prepared => prepare-02
Span 13-14:  producing => produce-01
Span 14-15:  reactor => reactor
Span 9-10:  shutting => shut-05
Span 21-22:  step => step-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(2, 1, 0),December 2007,(date-entity :month 12 :year 2007),false), Span(23,24,List(3),disabling,disable-01,false), Span(21,22,List(4),step,step-01,false), Span(16,18,List(7, 6, 5),June 2007,(date-entity :month 6 :year 2007),false), Span(14,15,List(8),reactor,reactor,false), Span(13,14,List(9),producing,produce-01,false), Span(12,13,List(10),plutonium,plutonium,false), Span(10,11,List(11),down,down,false), Span(9,10,List(12),shutting,shut-05,false), Span(8,9,List(13),begin,begin-01,false), Span(6,7,List(14),prepared,prepare-02,false), Span(4,5,List(15),may,possible,false), Span(3,4,List(17, 16),government,(government-organization :ARG0-of govern-01),false), Span(1,3,List(21, 20, 19, 18),North Korean,(thing :name (name :op "North" :op "Korean")),false)),Map(2 -> 2007, 5 -> date-entity, 12 -> shut-05, 15 -> possible, 8 -> reactor, 21 -> "Korean", 18 -> thing, 7 -> 2007, 17 -> govern-01, 1 -> 12, 4 -> step-01, 11 -> down, 14 -> prepare-02, 20 -> "North", 6 -> 6, 0 -> date-entity, 9 -> produce-01, 16 -> government-organization, 19 -> name, 3 -> disable-01, 10 -> plutonium, 13 -> begin-01),Map(n -> name, 2 -> 2007, s2 -> shut-05, t -> thing, b -> begin-01, d3 -> date-entity, p2 -> plutonium, s -> step-01, d -> date-entity, g2 -> govern-01, 1 -> 12, g -> government-organization, p -> produce-01, p4 -> possible, d2 -> disable-01, r -> reactor, 6 -> 6, 22 -> 2007, d4 -> down, p3 -> prepare-02))),[Ljava.lang.String;@55787112,Annotation([Ljava.lang.String;@1cd201a8,[Ljava.lang.String;@7db82169,[Ljava.lang.String;@1992eaf4),Annotation([Ljava.lang.String;@f74e835,[Ljava.lang.String;@3276732,[Ledu.cmu.lti.nlp.amr.Dependency;@3f28bd56),Annotation([Ljava.lang.String;@31e3250d,[Ljava.lang.String;@19fe4644,[Ljava.lang.String;@21d8bcbe),Annotation([Ljava.lang.String;@5be067de,[Ljava.lang.String;@7383eae2,[Ledu.cmu.lti.nlp.amr.Entity;@18245eb0))
AMR:
(b / begin-01, ARG1, s2 / shut-05)
(b / begin-01, ARG6, d4 / down)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2007)
(d2 / disable-01, ARG1, s2 / shut-05)
(d2 / disable-01, time, d / date-entity)
(d3 / date-entity, month, 6 / 6)
(d3 / date-entity, year, 22 / 2007)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, t / thing)
(n / name, op, "Korean")
(n / name, op, "North")
(p / produce-01, ARG0, r / reactor)
(p / produce-01, ARG1, p2 / plutonium)
(p / produce-01, time, d3 / date-entity)
(p3 / prepare-02, ARG1, g / government-organization)
(p3 / prepare-02, ARG2, b / begin-01)
(p4 / possible, domain, p3 / prepare-02)
(s / step-01, ARG1, d2 / disable-01)
(s2 / shut-05, ARG1, r / reactor)
(t / thing, name, n / name)

Decoded in 1,418,090 microseconds
Sentence: Assistant Secretary of State Christopher Hill stated on 18 June 2007 that the North Korean government may be prepared to begin shutting down a plutonium producing reactor in June 2007 as the first step toward disabling the Unit by December 2007.

NER Entity: (person :name (name :op "Christopher" :op "Hill"))
mkDayMonthYear(18	June	2007,18,June,2007)
NER Entity: (thing :name (name :op "North" :op "Korean"))
Spans:
Span 8-11:  18 June 2007 => (date-entity :day 18 :month 6 :year 2007)
Span 20-21:  begin => begin-01
Span 4-6:  Christopher Hill => (person :name (name :op "Christopher" :op "Hill"))
Span 39-41:  December 2007 => (date-entity :month 12 :year 2007)
Span 35-36:  disabling => disable-01
Span 22-23:  down => down
Span 15-16:  government => (government-organization :ARG0-of govern-01)
Span 28-30:  June 2007 => (date-entity :month 6 :year 2007)
Span 16-17:  may => possible
Span 13-15:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 24-25:  plutonium => plutonium
Span 18-19:  prepared => prepare-02
Span 25-26:  producing => produce-01
Span 26-27:  reactor => reactor
Span 1-2:  Secretary => (have-org-role-91 :ARG2 secretary)
Span 21-22:  shutting => shut-05
Span 6-7:  stated => state-01
Span 33-34:  step => step-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,41,List(2, 1, 0),December 2007,(date-entity :month 12 :year 2007),false), Span(35,36,List(3),disabling,disable-01,false), Span(33,34,List(4),step,step-01,false), Span(28,30,List(7, 6, 5),June 2007,(date-entity :month 6 :year 2007),false), Span(26,27,List(8),reactor,reactor,false), Span(25,26,List(9),producing,produce-01,false), Span(24,25,List(10),plutonium,plutonium,false), Span(22,23,List(11),down,down,false), Span(21,22,List(12),shutting,shut-05,false), Span(20,21,List(13),begin,begin-01,false), Span(18,19,List(14),prepared,prepare-02,false), Span(16,17,List(15),may,possible,false), Span(15,16,List(17, 16),government,(government-organization :ARG0-of govern-01),false), Span(13,15,List(21, 20, 19, 18),North Korean,(thing :name (name :op "North" :op "Korean")),false), Span(8,11,List(25, 24, 23, 22),18 June 2007,(date-entity :day 18 :month 6 :year 2007),false), Span(6,7,List(26),stated,state-01,false), Span(4,6,List(30, 29, 28, 27),Christopher Hill,(person :name (name :op "Christopher" :op "Hill")),false), Span(1,2,List(32, 31),Secretary,(have-org-role-91 :ARG2 secretary),false)),Map(30 -> "Hill", 2 -> 2007, 5 -> date-entity, 27 -> person, 12 -> shut-05, 8 -> reactor, 15 -> possible, 21 -> "Korean", 18 -> thing, 24 -> 6, 7 -> 2007, 1 -> 12, 17 -> govern-01, 23 -> 18, 26 -> state-01, 4 -> step-01, 11 -> down, 32 -> secretary, 14 -> prepare-02, 29 -> "Christopher", 20 -> "North", 28 -> name, 6 -> 6, 9 -> produce-01, 0 -> date-entity, 22 -> date-entity, 16 -> government-organization, 19 -> name, 10 -> plutonium, 3 -> disable-01, 31 -> have-org-role-91, 25 -> 2007, 13 -> begin-01),Map(n -> name, h -> have-org-role-91, 2 -> 2007, p5 -> person, s2 -> shut-05, t -> thing, 12 -> 18, b -> begin-01, d3 -> date-entity, p2 -> plutonium, s -> step-01, s4 -> secretary, d -> date-entity, 62 -> 6, 1 -> 12, g2 -> govern-01, 23 -> 2007, p -> produce-01, g -> government-organization, p4 -> possible, d2 -> disable-01, d5 -> date-entity, r -> reactor, 6 -> 6, s3 -> state-01, d4 -> down, 22 -> 2007, p3 -> prepare-02, n2 -> name))),[Ljava.lang.String;@7c7d3c46,Annotation([Ljava.lang.String;@24fb6a80,[Ljava.lang.String;@48c35007,[Ljava.lang.String;@72a85671),Annotation([Ljava.lang.String;@6722db6e,[Ljava.lang.String;@18f20260,[Ledu.cmu.lti.nlp.amr.Dependency;@4ae33a11),Annotation([Ljava.lang.String;@7a48e6e2,[Ljava.lang.String;@b40bb6e,[Ljava.lang.String;@3a94964),Annotation([Ljava.lang.String;@5049d8b2,[Ljava.lang.String;@6d0b5baf,[Ledu.cmu.lti.nlp.amr.Entity;@631e06ab))
AMR:
(b / begin-01, ARG1, s2 / shut-05)
(b / begin-01, ARG6, d4 / down)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2007)
(d2 / disable-01, ARG1, s2 / shut-05)
(d2 / disable-01, time, d / date-entity)
(d3 / date-entity, month, 6 / 6)
(d3 / date-entity, year, 22 / 2007)
(d5 / date-entity, day, 12 / 18)
(d5 / date-entity, month, 62 / 6)
(d5 / date-entity, year, 23 / 2007)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, t / thing)
(h / have-org-role-91, ARG1, s3 / state-01)
(h / have-org-role-91, ARG2, s4 / secretary)
(n / name, op, "Korean")
(n / name, op, "North")
(n2 / name, op, "Christopher")
(n2 / name, op, "Hill")
(p / produce-01, ARG0, r / reactor)
(p / produce-01, ARG1, p2 / plutonium)
(p / produce-01, time, d3 / date-entity)
(p3 / prepare-02, ARG1, g / government-organization)
(p3 / prepare-02, ARG2, b / begin-01)
(p4 / possible, domain, p3 / prepare-02)
(p5 / person, name, n2 / name)
(s / step-01, ARG1, d2 / disable-01)
(s2 / shut-05, ARG1, r / reactor)
(s3 / state-01, ARG0, p5 / person)
(s3 / state-01, ARG1, p4 / possible)
(s3 / state-01, time, d5 / date-entity)
(t / thing, name, n / name)

Decoded in 2,876,707 microseconds
Sentence: Hill is the head American negotiator on North Korea's nuclear weapons program.

NER Entity: (person :name (name :op "Hill"))
NER Entity: (thing :name (name :op "American"))
NER Entity: (country :name (name :op "North" :op "Korea"))
NER Entity: (thing :name (name :op "American"))
Spans:
Span 4-5:  American => (country :name (name :op "America"))
Span 3-4:  head => head-01
Span 7-9:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 10-11:  nuclear => nucleus
Span 12-13:  program => program
Span 11-12:  weapons => weapon

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),program,program,false), Span(11,12,List(1),weapons,weapon,false), Span(10,11,List(2),nuclear,nucleus,false), Span(7,9,List(6, 5, 4, 3),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(4,5,List(9, 8, 7),American,(country :name (name :op "America")),false), Span(3,4,List(10),head,head-01,false)),Map(2 -> nucleus, 5 -> "North", 8 -> name, 7 -> country, 1 -> weapon, 4 -> name, 6 -> "Korea", 9 -> "America", 0 -> program, 10 -> head-01, 3 -> country),Map(n -> nucleus, w -> weapon, h -> head-01, p -> program, n3 -> name, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@2a3591c5,Annotation([Ljava.lang.String;@34a75079,[Ljava.lang.String;@346a361,[Ljava.lang.String;@107ed6fc),Annotation([Ljava.lang.String;@1643d68f,[Ljava.lang.String;@186978a6,[Ledu.cmu.lti.nlp.amr.Dependency;@2e029d61),Annotation([Ljava.lang.String;@482d776b,[Ljava.lang.String;@4052274f,[Ljava.lang.String;@132ddbab),Annotation([Ljava.lang.String;@297ea53a,[Ljava.lang.String;@acb0951,[Ledu.cmu.lti.nlp.amr.Entity;@5bf22f18))
AMR:
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(h / head-01, ARG1, p / program)
(n2 / name, op, "Korea")
(n2 / name, op, "North")
(n3 / name, op, "America")
(p / program, mod, c2 / country)
(p / program, poss, c / country)
(p / program, topic, w / weapon)
(w / weapon, mod, n / nucleus)

Decoded in 135,683 microseconds
Sentence: Hill stated stalled efforts to dismantle North Korea's nuclear weapons program could move ahead after the weekend of 16 June 2007 and 17 June 2007 when Pyongyang officials invited inspectors from the International Atomic Energy Agency to visit for talks on verifying and monitoring a shutdown.

NER Entity: (person :name (name :op "Hill"))
NER Entity: (country :name (name :op "North" :op "Korea"))
mkDayMonthYear(16	June	2007,16,June,2007)
mkDayMonthYear(17	June	2007,17,June,2007)
NER Entity: (country :name (name :op "Pyongyang"))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Pyongyang"))
Spans:
Span 19-22:  16 June 2007 => (date-entity :day 16 :month 6 :year 2007)
Span 23-26:  17 June 2007 => (date-entity :day 17 :month 6 :year 2007)
Span 15-16:  after => after
Span 14-15:  ahead => ahead
Span 43-44:  and => and
Span 22-23:  and => and
Span 12-13:  could => possible
Span 5-6:  dismantle => dismantle-01
Span 3-4:  efforts => effort
Span 30-31:  inspectors => (person :ARG0-of inspect-01)
Span 33-37:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 29-30:  invited => (person :ARG1-of invite-01)
Span 44-45:  monitoring => monitor-01
Span 13-14:  move => move-02
Span 6-8:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 9-10:  nuclear => nucleus
Span 28-29:  officials => (have-org-role-91 :ARG2 official)
Span 11-12:  program => program
Span 27-28:  Pyongyang => (city :name (name :op "Pyongyang"))
Span 46-47:  shutdown => shut-05
Span 2-3:  stalled => stall-01
Span 1-2:  stated => state-01
Span 40-41:  talks => talk-01
Span 38-39:  visit => visit-01
Span 10-11:  weapons => weapon
Span 17-18:  weekend => weekend

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(0),shutdown,shut-05,false), Span(44,45,List(1),monitoring,monitor-01,false), Span(43,44,List(2),and,and,false), Span(40,41,List(3),talks,talk-01,false), Span(38,39,List(4),visit,visit-01,false), Span(33,37,List(10, 9, 8, 7, 6, 5),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(30,31,List(12, 11),inspectors,(person :ARG0-of inspect-01),false), Span(29,30,List(14, 13),invited,(person :ARG1-of invite-01),false), Span(28,29,List(16, 15),officials,(have-org-role-91 :ARG2 official),false), Span(27,28,List(19, 18, 17),Pyongyang,(city :name (name :op "Pyongyang")),false), Span(23,26,List(23, 22, 21, 20),17 June 2007,(date-entity :day 17 :month 6 :year 2007),false), Span(22,23,List(24),and,and,false), Span(19,22,List(28, 27, 26, 25),16 June 2007,(date-entity :day 16 :month 6 :year 2007),false), Span(17,18,List(29),weekend,weekend,false), Span(15,16,List(30),after,after,false), Span(14,15,List(31),ahead,ahead,false), Span(13,14,List(32),move,move-02,false), Span(12,13,List(33),could,possible,false), Span(11,12,List(34),program,program,false), Span(10,11,List(35),weapons,weapon,false), Span(9,10,List(36),nuclear,nucleus,false), Span(6,8,List(40, 39, 38, 37),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(5,6,List(41),dismantle,dismantle-01,false), Span(3,4,List(42),efforts,effort,false), Span(2,3,List(43),stalled,stall-01,false), Span(1,2,List(44),stated,state-01,false)),Map(39 -> "North", 30 -> after, 2 -> and, 5 -> organization, 33 -> possible, 27 -> 6, 12 -> inspect-01, 8 -> "Atomic", 15 -> have-org-role-91, 42 -> effort, 36 -> nucleus, 21 -> 17, 18 -> name, 24 -> and, 41 -> dismantle-01, 35 -> weapon, 7 -> "International", 1 -> monitor-01, 17 -> city, 44 -> state-01, 23 -> 2007, 38 -> name, 26 -> 16, 4 -> visit-01, 11 -> person, 32 -> move-02, 14 -> invite-01, 29 -> weekend, 20 -> date-entity, 34 -> program, 28 -> 2007, 6 -> name, 40 -> "Korea", 43 -> stall-01, 9 -> "Energy", 0 -> shut-05, 22 -> 6, 16 -> official, 37 -> country, 19 -> "Pyongyang", 10 -> "Agency", 3 -> talk-01, 31 -> ahead, 25 -> date-entity, 13 -> person),Map(e -> effort, n -> name, w -> weekend, h -> have-org-role-91, 2 -> 2007, s2 -> stall-01, t -> talk-01, 12 -> 16, m2 -> move-02, d3 -> dismantle-01, p2 -> person, n4 -> name, a3 -> after, s -> shut-05, v -> visit-01, m -> monitor-01, d -> date-entity, 62 -> 6, 1 -> 17, p -> person, n3 -> nucleus, a -> and, p4 -> program, o2 -> official, d2 -> date-entity, i2 -> invite-01, w2 -> weapon, i -> inspect-01, a2 -> and, c -> city, 6 -> 6, s3 -> state-01, 22 -> 2007, o -> organization, p3 -> possible, c2 -> country, n2 -> name, a4 -> ahead))),[Ljava.lang.String;@267f474e,Annotation([Ljava.lang.String;@7a7471ce,[Ljava.lang.String;@28276e50,[Ljava.lang.String;@62e70ea3),Annotation([Ljava.lang.String;@3efe7086,[Ljava.lang.String;@675d8c96,[Ledu.cmu.lti.nlp.amr.Dependency;@741b3bc3),Annotation([Ljava.lang.String;@2ed3b1f5,[Ljava.lang.String;@63648ee9,[Ljava.lang.String;@68d6972f),Annotation([Ljava.lang.String;@45be7cd5,[Ljava.lang.String;@7651218e,[Ledu.cmu.lti.nlp.amr.Entity;@3185fa6b))
AMR:
(a / and, op, m / monitor-01)
(a2 / and, op, d2 / date-entity)
(a3 / after, mod, a4 / ahead)
(a3 / after, op, w / weekend)
(c / city, name, n2 / name)
(c2 / country, name, n4 / name)
(d / date-entity, day, 1 / 17)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2007)
(d2 / date-entity, day, 12 / 16)
(d2 / date-entity, month, 62 / 6)
(d2 / date-entity, year, 22 / 2007)
(d3 / dismantle-01, ARG1, p4 / program)
(e / effort, purpose, d3 / dismantle-01)
(h / have-org-role-91, ARG1, c / city)
(h / have-org-role-91, ARG2, o2 / official)
(i / inspect-01, ARG0, p / person)
(i / inspect-01, ARG1, n3 / nucleus)
(i2 / invite-01, ARG0, p / person)
(i2 / invite-01, ARG1, p2 / person)
(i2 / invite-01, ARG6, d / date-entity)
(m / monitor-01, ARG1, s / shut-05)
(m2 / move-02, ARG1, e / effort)
(m2 / move-02, time, a3 / after)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Pyongyang")
(n4 / name, op, "Korea")
(n4 / name, op, "North")
(o / organization, name, n / name)
(p3 / possible, domain, m2 / move-02)
(p4 / program, poss, c2 / country)
(p4 / program, topic, w2 / weapon)
(s / shut-05, ARG1, a2 / and)
(s2 / stall-01, ARG1, e / effort)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, p3 / possible)
(t / talk-01, ARG1, c / city)
(t / talk-01, ARG2, o / organization)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, a / and)
(v / visit-01, instrument, t / talk-01)

Decoded in 4,702,318 microseconds
Sentence: Following talks with Chinese negotiator Wu Dawei Hill stated the shutdown has long been anticipated.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wu" :op "Dawei" :op "Hill"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 14-15:  anticipated => anticipate-01
Span 3-4:  Chinese => (country :name (name :op "China"))
Span 0-1:  Following => follow-01
Span 12-13:  long => long
Span 10-11:  shutdown => shut-05
Span 8-9:  stated => state-01
Span 1-2:  talks => talk-01
Span 5-8:  Wu Dawei Hill => (person :name (name :op "Wu" :op "Dawei" :op "Hill"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),anticipated,anticipate-01,false), Span(12,13,List(1),long,long,false), Span(10,11,List(2),shutdown,shut-05,false), Span(8,9,List(3),stated,state-01,false), Span(5,8,List(8, 7, 6, 5, 4),Wu Dawei Hill,(person :name (name :op "Wu" :op "Dawei" :op "Hill")),false), Span(3,4,List(11, 10, 9),Chinese,(country :name (name :op "China")),false), Span(1,2,List(12),talks,talk-01,false), Span(0,1,List(13),Following,follow-01,false)),Map(2 -> shut-05, 5 -> name, 12 -> talk-01, 8 -> "Hill", 7 -> "Dawei", 1 -> long, 4 -> person, 11 -> "China", 6 -> "Wu", 0 -> anticipate-01, 9 -> country, 3 -> state-01, 10 -> name, 13 -> follow-01),Map(n -> name, t -> talk-01, s2 -> state-01, s -> shut-05, p -> person, a -> anticipate-01, c -> country, l -> long, f -> follow-01, n2 -> name))),[Ljava.lang.String;@6d366c9b,Annotation([Ljava.lang.String;@5b58ed3c,[Ljava.lang.String;@24faea88,[Ljava.lang.String;@3a320ade),Annotation([Ljava.lang.String;@64beebb7,[Ljava.lang.String;@7813cb11,[Ledu.cmu.lti.nlp.amr.Dependency;@bcec031),Annotation([Ljava.lang.String;@21005f6c,[Ljava.lang.String;@32f0fba8,[Ljava.lang.String;@545de5a4),Annotation([Ljava.lang.String;@29ef6856,[Ljava.lang.String;@ab7a938,[Ledu.cmu.lti.nlp.amr.Entity;@3faf2e7d))
AMR:
(a / anticipate-01, ARG0, c / country)
(a / anticipate-01, ARG1, s / shut-05)
(a / anticipate-01, mod, l / long)
(c / country, name, n2 / name)
(f / follow-01, ARG1, s2 / state-01)
(f / follow-01, ARG2, t / talk-01)
(n / name, op, "Dawei")
(n / name, op, "Hill")
(n / name, op, "Wu")
(n2 / name, op, "China")
(p / person, name, n / name)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, a / anticipate-01)

Decoded in 166,016 microseconds
Sentence: Hill stated the shutdown could occur in a matter of weeks not months.

NER Entity: (person :name (name :op "Hill"))
Spans:
Span 4-5:  could => possible
Span 8-9:  matter => matter
Span 12-13:  months => (temporal-quantity :unit month)
Span 5-6:  occur => occur-01
Span 3-4:  shutdown => shut-05
Span 1-2:  stated => state-01
Span 10-11:  weeks => week

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(1, 0),months,(temporal-quantity :unit month),false), Span(10,11,List(2),weeks,week,false), Span(8,9,List(3),matter,matter,false), Span(5,6,List(4),occur,occur-01,false), Span(4,5,List(5),could,possible,false), Span(3,4,List(6),shutdown,shut-05,false), Span(1,2,List(7),stated,state-01,false)),Map(2 -> week, 5 -> possible, 7 -> state-01, 1 -> month, 4 -> occur-01, 6 -> shut-05, 0 -> temporal-quantity, 3 -> matter),Map(w -> week, s2 -> state-01, t -> temporal-quantity, m2 -> matter, s -> shut-05, m -> month, p -> possible, o -> occur-01))),[Ljava.lang.String;@4648ce9,Annotation([Ljava.lang.String;@569bf9eb,[Ljava.lang.String;@61526469,[Ljava.lang.String;@274872f8),Annotation([Ljava.lang.String;@76ba13c,[Ljava.lang.String;@eb6449b,[Ledu.cmu.lti.nlp.amr.Dependency;@7c351808),Annotation([Ljava.lang.String;@180e6ac4,[Ljava.lang.String;@42b64ab8,[Ljava.lang.String;@7e985ce9),Annotation([Ljava.lang.String;@2a39fe6a,[Ljava.lang.String;@410ae9a3,[Ledu.cmu.lti.nlp.amr.Entity;@319988b0))
AMR:
(o / occur-01, ARG1, s / shut-05)
(o / occur-01, ARG6, t / temporal-quantity)
(o / occur-01, time, m2 / matter)
(p / possible, domain, o / occur-01)
(s / shut-05, ARG1, w / week)
(s2 / state-01, ARG1, p / possible)
(t / temporal-quantity, unit, m / month)

Decoded in 123,344 microseconds
Sentence: The Associated Press reported from Vienna, Austria that the IAEA stated on 18 June 2007 that a team would visit Pyongyang the week of 24 June 2007 to discuss the manner in which inspectors will verify the shutdown.

NER Entity: (organization :name (name :op "Associated" :op "Press"))
NER Entity: (country :name (name :op "Vienna"))
NER Entity: (country :name (name :op "Austria"))
NER Entity: (organization :name (name :op "IAEA"))
mkDayMonthYear(18	June	2007,18,June,2007)
NER Entity: (country :name (name :op "Pyongyang"))
mkDayMonthYear(24	June	2007,24,June,2007)
NER Entity: (country :name (name :op "Pyongyang"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "Vienna"))
Spans:
Span 13-16:  18 June 2007 => (date-entity :day 18 :month 6 :year 2007)
Span 25-28:  24 June 2007 => (date-entity :day 24 :month 6 :year 2007)
Span 1-3:  Associated Press => (organization :name (name :op "Press" :op "Associated"))
Span 29-30:  discuss => discuss-01
Span 10-11:  IAEA => (organization :name (name :op "IAEA"))
Span 34-35:  inspectors => (person :ARG0-of inspect-01)
Span 31-32:  manner => manner
Span 21-22:  Pyongyang => (city :name (name :op "Pyongyang"))
Span 3-4:  reported => report-01
Span 38-39:  shutdown => shut-05
Span 11-12:  stated => state-01
Span 18-19:  team => team
Span 36-37:  verify => verify-01
Span 5-6:  Vienna => (city :name (name :op "Vienna"))
Span 20-21:  visit => visit-01
Span 23-24:  week => week

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),shutdown,shut-05,false), Span(36,37,List(1),verify,verify-01,false), Span(34,35,List(3, 2),inspectors,(person :ARG0-of inspect-01),false), Span(31,32,List(4),manner,manner,false), Span(29,30,List(5),discuss,discuss-01,false), Span(25,28,List(9, 8, 7, 6),24 June 2007,(date-entity :day 24 :month 6 :year 2007),false), Span(23,24,List(10),week,week,false), Span(21,22,List(13, 12, 11),Pyongyang,(city :name (name :op "Pyongyang")),false), Span(20,21,List(14),visit,visit-01,false), Span(18,19,List(15),team,team,false), Span(13,16,List(19, 18, 17, 16),18 June 2007,(date-entity :day 18 :month 6 :year 2007),false), Span(11,12,List(20),stated,state-01,false), Span(10,11,List(23, 22, 21),IAEA,(organization :name (name :op "IAEA")),false), Span(5,6,List(26, 25, 24),Vienna,(city :name (name :op "Vienna")),false), Span(3,4,List(27),reported,report-01,false), Span(1,3,List(31, 30, 29, 28),Associated Press,(organization :name (name :op "Press" :op "Associated")),false)),Map(30 -> "Press", 2 -> person, 5 -> discuss-01, 27 -> report-01, 12 -> name, 8 -> 6, 15 -> team, 21 -> organization, 18 -> 6, 24 -> city, 7 -> 24, 1 -> verify-01, 17 -> 18, 23 -> "IAEA", 26 -> "Vienna", 4 -> manner, 11 -> city, 14 -> visit-01, 29 -> name, 20 -> state-01, 28 -> organization, 6 -> date-entity, 9 -> 2007, 0 -> shut-05, 22 -> name, 16 -> date-entity, 19 -> 2007, 10 -> week, 3 -> inspect-01, 31 -> "Associated", 25 -> name, 13 -> "Pyongyang"),Map(n -> name, w -> week, v2 -> visit-01, 2 -> 24, s2 -> state-01, t -> team, d3 -> date-entity, n4 -> name, s -> shut-05, v -> verify-01, d -> discuss-01, m -> manner, 62 -> 6, 1 -> 18, 23 -> 2007, p -> person, n3 -> name, o2 -> organization, d2 -> date-entity, i -> inspect-01, r -> report-01, c -> city, 6 -> 6, 22 -> 2007, o -> organization, n2 -> name, c2 -> city))),[Ljava.lang.String;@d5ae57e,Annotation([Ljava.lang.String;@68759011,[Ljava.lang.String;@7e242b4d,[Ljava.lang.String;@305f031),Annotation([Ljava.lang.String;@592e843a,[Ljava.lang.String;@1d1f7216,[Ledu.cmu.lti.nlp.amr.Dependency;@423e4cbb),Annotation([Ljava.lang.String;@6e16b8b5,[Ljava.lang.String;@43b4fe19,[Ljava.lang.String;@25ddbbbb),Annotation([Ljava.lang.String;@1536602f,[Ljava.lang.String;@4ebea12c,[Ledu.cmu.lti.nlp.amr.Entity;@2a1edad4))
AMR:
(c / city, name, n / name)
(c2 / city, name, n3 / name)
(d / discuss-01, ARG0, t / team)
(d / discuss-01, ARG1, m / manner)
(d / discuss-01, ARG2, p / person)
(d2 / date-entity, day, 2 / 24)
(d2 / date-entity, month, 6 / 6)
(d2 / date-entity, year, 22 / 2007)
(d3 / date-entity, day, 1 / 18)
(d3 / date-entity, month, 62 / 6)
(d3 / date-entity, year, 23 / 2007)
(i / inspect-01, ARG0, p / person)
(n / name, op, "Pyongyang")
(n2 / name, op, "IAEA")
(n3 / name, op, "Vienna")
(n4 / name, op, "Associated")
(n4 / name, op, "Press")
(o / organization, name, n2 / name)
(o2 / organization, name, n4 / name)
(r / report-01, ARG0, o2 / organization)
(r / report-01, ARG1, s2 / state-01)
(s / shut-05, ARG1, c2 / city)
(s2 / state-01, ARG0, o / organization)
(s2 / state-01, ARG1, v2 / visit-01)
(s2 / state-01, time, d3 / date-entity)
(v / verify-01, ARG0, p / person)
(v / verify-01, ARG1, s / shut-05)
(v2 / visit-01, ARG0, t / team)
(v2 / visit-01, ARG1, c / city)
(v2 / visit-01, ARG6, w / week)
(v2 / visit-01, time, d2 / date-entity)

Decoded in 2,872,900 microseconds
Sentence: Hill stated IAEA inspectors will hold talks with Pyongyang officials on sealing the reactor which would include the installation of television monitors at the site.

NER Entity: (person :name (name :op "Hill"))
NER Entity: (organization :name (name :op "IAEA"))
NER Entity: (country :name (name :op "Pyongyang"))
NER Entity: (country :name (name :op "Pyongyang"))
NER Entity: (organization :name (name :op "IAEA"))
Spans:
Span 5-6:  hold => hold-04
Span 2-3:  IAEA => (organization :name (name :op "IAEA"))
Span 16-17:  include => include-01
Span 3-4:  inspectors => (person :ARG0-of inspect-01)
Span 18-19:  installation => installation
Span 9-10:  officials => (have-org-role-91 :ARG2 official)
Span 8-9:  Pyongyang => (city :name (name :op "Pyongyang"))
Span 13-14:  reactor => reactor
Span 24-25:  site => site
Span 1-2:  stated => state-01
Span 6-7:  talks => talk-01
Span 20-21:  television => television

Langrangian relaxation converged after 69 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),site,site,false), Span(20,21,List(1),television,television,false), Span(18,19,List(2),installation,installation,false), Span(16,17,List(3),include,include-01,false), Span(13,14,List(4),reactor,reactor,false), Span(9,10,List(6, 5),officials,(have-org-role-91 :ARG2 official),false), Span(8,9,List(9, 8, 7),Pyongyang,(city :name (name :op "Pyongyang")),false), Span(6,7,List(10),talks,talk-01,false), Span(5,6,List(11),hold,hold-04,false), Span(3,4,List(13, 12),inspectors,(person :ARG0-of inspect-01),false), Span(2,3,List(16, 15, 14),IAEA,(organization :name (name :op "IAEA")),false), Span(1,2,List(17),stated,state-01,false)),Map(2 -> installation, 5 -> have-org-role-91, 12 -> person, 15 -> name, 8 -> name, 7 -> city, 17 -> state-01, 1 -> television, 4 -> reactor, 11 -> hold-04, 14 -> organization, 6 -> official, 0 -> site, 9 -> "Pyongyang", 16 -> "IAEA", 3 -> include-01, 10 -> talk-01, 13 -> inspect-01),Map(n -> name, h -> have-org-role-91, s2 -> state-01, h2 -> hold-04, t -> television, s -> site, i3 -> inspect-01, p -> person, o2 -> organization, i2 -> include-01, t2 -> talk-01, i -> installation, r -> reactor, c -> city, o -> official, n2 -> name))),[Ljava.lang.String;@6256ac4f,Annotation([Ljava.lang.String;@44c79f32,[Ljava.lang.String;@7fcbe147,[Ljava.lang.String;@235f4c10),Annotation([Ljava.lang.String;@743cb8e0,[Ljava.lang.String;@c7a975a,[Ledu.cmu.lti.nlp.amr.Dependency;@2c1b9e4b),Annotation([Ljava.lang.String;@757d6814,[Ljava.lang.String;@649725e3,[Ljava.lang.String;@3c0fae6c),Annotation([Ljava.lang.String;@4c168660,[Ljava.lang.String;@52b56a3e,[Ledu.cmu.lti.nlp.amr.Entity;@fd0e5b6))
AMR:
(c / city, name, n / name)
(h / have-org-role-91, ARG1, c / city)
(h / have-org-role-91, ARG2, o / official)
(h2 / hold-04, ARG1, t2 / talk-01)
(i2 / include-01, ARG0, r / reactor)
(i2 / include-01, ARG1, i / installation)
(i2 / include-01, ARG2, s / site)
(i3 / inspect-01, ARG0, p / person)
(i3 / inspect-01, ARG1, s / site)
(n / name, op, "Pyongyang")
(n2 / name, op, "IAEA")
(o2 / organization, name, n2 / name)
(p / person, poss, o2 / organization)
(s2 / state-01, ARG1, h2 / hold-04)
(s2 / state-01, ARG2, t / television)
(t2 / talk-01, ARG0, p / person)
(t2 / talk-01, ARG1, h / have-org-role-91)

Decoded in 1,377,443 microseconds
Sentence: North Korean officials refused to proceed with a February 2007 agreement to begin decommissioning the Yongbyon reactor until funds worth 25 million dollars in accounts linked to North Korea held in a Macao Bank were transferred to North Korea.

NER Entity: (thing :name (name :op "North" :op "Korean"))
NER Entity: (country :name (name :op "Yongbyon"))
NER Entity: (country :name (name :op "North" :op "Korea"))
NER Entity: (country :name (name :op "Macao"))
NER Entity: (country :name (name :op "North" :op "Korea"))
NER Entity: (country :name (name :op "Yongbyon"))
Spans:
Span 20-21:  25 => 25
Span 24-25:  accounts => account
Span 10-11:  agreement => agree-01
Span 12-13:  begin => begin-01
Span 22-23:  dollars => (monetary-quantity :unit dollar)
Span 8-10:  February 2007 => (date-entity :month 2 :year 2007)
Span 18-19:  funds => fund
Span 29-30:  held => hold-04
Span 25-26:  linked => link-01
Span 37-39:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 27-29:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 0-2:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Span 5-6:  proceed => proceed-01
Span 16-17:  reactor => reactor
Span 3-4:  refused => refuse-01
Span 35-36:  transferred => transfer-01
Span 17-18:  until => until
Span 15-16:  Yongbyon => (name :op "Yongbyon")

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,39,List(3, 2, 1, 0),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(35,36,List(4),transferred,transfer-01,false), Span(29,30,List(5),held,hold-04,false), Span(27,29,List(9, 8, 7, 6),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(25,26,List(10),linked,link-01,false), Span(24,25,List(11),accounts,account,false), Span(22,23,List(13, 12),dollars,(monetary-quantity :unit dollar),false), Span(20,21,List(14),25,25,false), Span(18,19,List(15),funds,fund,false), Span(17,18,List(16),until,until,false), Span(16,17,List(17),reactor,reactor,false), Span(15,16,List(19, 18),Yongbyon,(name :op "Yongbyon"),false), Span(12,13,List(20),begin,begin-01,false), Span(10,11,List(21),agreement,agree-01,false), Span(8,10,List(24, 23, 22),February 2007,(date-entity :month 2 :year 2007),false), Span(5,6,List(25),proceed,proceed-01,false), Span(3,4,List(26),refused,refuse-01,false), Span(2,3,List(28, 27),officials,(have-org-role-91 :ARG2 official),false), Span(0,2,List(32, 31, 30, 29),North Korean,(thing :name (name :op "North" :op "Korean")),false)),Map(30 -> name, 2 -> "North", 5 -> hold-04, 27 -> have-org-role-91, 12 -> monetary-quantity, 8 -> "North", 15 -> fund, 21 -> agree-01, 18 -> name, 24 -> 2007, 7 -> name, 1 -> name, 17 -> reactor, 23 -> 2, 26 -> refuse-01, 4 -> transfer-01, 11 -> account, 32 -> "Korean", 14 -> 25, 29 -> thing, 20 -> begin-01, 28 -> official, 6 -> country, 9 -> "Korea", 0 -> country, 22 -> date-entity, 16 -> until, 19 -> "Yongbyon", 10 -> link-01, 3 -> "Korea", 31 -> "North", 25 -> proceed-01, 13 -> dollar),Map(n -> name, h -> hold-04, 2 -> 25, h2 -> have-org-role-91, t -> transfer-01, b -> begin-01, n4 -> name, d -> dollar, m -> monetary-quantity, 23 -> 2007, r2 -> refuse-01, p -> proceed-01, a -> account, n3 -> name, d2 -> date-entity, t2 -> thing, r -> reactor, a2 -> agree-01, c -> country, u -> until, l -> link-01, f -> fund, 22 -> 2, o -> official, n2 -> name, c2 -> country))),[Ljava.lang.String;@4eed46ee,Annotation([Ljava.lang.String;@36b0fcd5,[Ljava.lang.String;@4fad94a7,[Ljava.lang.String;@475835b1),Annotation([Ljava.lang.String;@6326d182,[Ljava.lang.String;@5241cf67,[Ledu.cmu.lti.nlp.amr.Dependency;@716a7124),Annotation([Ljava.lang.String;@77192705,[Ljava.lang.String;@226642a5,[Ljava.lang.String;@7e809b79),Annotation([Ljava.lang.String;@5cc126dc,[Ljava.lang.String;@625e134e,[Ledu.cmu.lti.nlp.amr.Entity;@72bd06ca))
AMR:
(a / account, quant, 2 / 25)
(a2 / agree-01, ARG1, t2 / thing)
(a2 / agree-01, ARG2, b / begin-01)
(a2 / agree-01, time, d2 / date-entity)
(b / begin-01, ARG1, u / until)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d2 / date-entity, month, 22 / 2)
(d2 / date-entity, year, 23 / 2007)
(h / hold-04, ARG1, c2 / country)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, o / official)
(l / link-01, ARG0, m / monetary-quantity)
(l / link-01, ARG1, a / account)
(l / link-01, ARG2, c2 / country)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Korea")
(n / name, op, "North")
(n2 / name, op, "Korea")
(n2 / name, op, "North")
(n3 / name, op, "Yongbyon")
(n4 / name, op, "Korean")
(n4 / name, op, "North")
(p / proceed-01, ARG1, h2 / have-org-role-91)
(p / proceed-01, ARG2, b / begin-01)
(r / reactor, location, u / until)
(r / reactor, name, n3 / name)
(r2 / refuse-01, ARG1, p / proceed-01)
(t / transfer-01, ARG1, r2 / refuse-01)
(t / transfer-01, ARG2, c / country)
(t2 / thing, name, n4 / name)
(u / until, op, f / fund)

Decoded in 3,059,556 microseconds
Sentence: The money was frozen when officials from the United States accused the Banco Delta Asia of complicity in financial crimes on behalf of North Korea.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "Banco" :op "Delta" :op "Asia"))
NER Entity: (country :name (name :op "North" :op "Korea"))
Spans:
Span 10-11:  accused => accuse-01
Span 12-15:  Banco Delta Asia => (organization :name (name :op "Banco" :op "Delta" :op "Asia"))
Span 19-20:  crimes => crime
Span 18-19:  financial => finance
Span 3-4:  frozen => freeze-02
Span 1-2:  money => money
Span 23-25:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 5-6:  officials => (have-org-role-91 :ARG2 official)
Span 8-10:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,25,List(3, 2, 1, 0),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(19,20,List(4),crimes,crime,false), Span(18,19,List(5),financial,finance,false), Span(12,15,List(10, 9, 8, 7, 6),Banco Delta Asia,(organization :name (name :op "Banco" :op "Delta" :op "Asia")),false), Span(10,11,List(11),accused,accuse-01,false), Span(8,10,List(15, 14, 13, 12),United States,(country :name (name :op "United" :op "States")),false), Span(5,6,List(17, 16),officials,(have-org-role-91 :ARG2 official),false), Span(3,4,List(18),frozen,freeze-02,false), Span(1,2,List(19),money,money,false)),Map(2 -> "North", 5 -> finance, 12 -> country, 15 -> "States", 8 -> "Banco", 18 -> freeze-02, 7 -> name, 17 -> official, 1 -> name, 4 -> crime, 11 -> accuse-01, 14 -> "United", 6 -> organization, 0 -> country, 9 -> "Delta", 16 -> have-org-role-91, 19 -> money, 3 -> "Korea", 10 -> "Asia", 13 -> name),Map(n -> name, h -> have-org-role-91, m -> money, a -> accuse-01, c3 -> country, n3 -> name, o2 -> official, c -> country, f2 -> freeze-02, f -> finance, o -> organization, c2 -> crime, n2 -> name))),[Ljava.lang.String;@89c10b7,Annotation([Ljava.lang.String;@5dbe30be,[Ljava.lang.String;@4fe89c24,[Ljava.lang.String;@55795845),Annotation([Ljava.lang.String;@3d08f3f5,[Ljava.lang.String;@119f1f2a,[Ledu.cmu.lti.nlp.amr.Dependency;@1a1da881),Annotation([Ljava.lang.String;@5b970f7,[Ljava.lang.String;@7fd4acee,[Ljava.lang.String;@165b8a71),Annotation([Ljava.lang.String;@6175619b,[Ljava.lang.String;@2f058b8a,[Ledu.cmu.lti.nlp.amr.Entity;@756cf158))
AMR:
(a / accuse-01, ARG1, o / organization)
(a / accuse-01, ARG2, c2 / crime)
(c / country, name, n / name)
(c2 / crime, mod, f / finance)
(c3 / country, name, n3 / name)
(f2 / freeze-02, ARG0, c / country)
(f2 / freeze-02, ARG1, m / money)
(f2 / freeze-02, condition, a / accuse-01)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, o2 / official)
(h / have-org-role-91, ARG6, f2 / freeze-02)
(n / name, op, "Korea")
(n / name, op, "North")
(n2 / name, op, "Asia")
(n2 / name, op, "Banco")
(n2 / name, op, "Delta")
(n3 / name, op, "States")
(n3 / name, op, "United")
(o / organization, name, n2 / name)

Decoded in 674,648 microseconds
Sentence: The funds were wired on 14 June 2007 to the New York Federal Reserve Bank after months of disagreement over the method of returning the funds.

mkDayMonthYear(14	June	2007,14,June,2007)
NER Entity: (country :name (name :op "New" :op "York"))
NER Entity: (organization :name (name :op "Federal" :op "Reserve" :op "Bank"))
Spans:
Span 5-8:  14 June 2007 => (date-entity :day 14 :month 6 :year 2007)
Span 15-16:  after => after
Span 12-15:  Federal Reserve Bank => (organization :name (name :op "Federal" :op "Reserve" :op "Bank"))
Span 25-26:  funds => fund
Span 1-2:  funds => fund
Span 21-22:  method => method
Span 16-17:  months => (temporal-quantity :unit month)
Span 10-12:  New York => (city :name (name :op "York" :op "New"))
Span 19-20:  over => over

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),funds,fund,false), Span(21,22,List(1),method,method,false), Span(19,20,List(2),over,over,false), Span(16,17,List(4, 3),months,(temporal-quantity :unit month),false), Span(15,16,List(5),after,after,false), Span(12,15,List(10, 9, 8, 7, 6),Federal Reserve Bank,(organization :name (name :op "Federal" :op "Reserve" :op "Bank")),false), Span(10,12,List(14, 13, 12, 11),New York,(city :name (name :op "York" :op "New")),false), Span(5,8,List(18, 17, 16, 15),14 June 2007,(date-entity :day 14 :month 6 :year 2007),false), Span(1,2,List(19),funds,fund,false)),Map(2 -> over, 5 -> after, 12 -> name, 15 -> date-entity, 8 -> "Federal", 18 -> 2007, 7 -> name, 17 -> 6, 1 -> method, 4 -> month, 11 -> city, 14 -> "New", 6 -> organization, 0 -> fund, 9 -> "Reserve", 16 -> 14, 19 -> fund, 3 -> temporal-quantity, 10 -> "Bank", 13 -> "York"),Map(n -> name, 2 -> 2007, t -> temporal-quantity, m2 -> month, m -> method, d -> date-entity, 1 -> 14, a -> after, o2 -> organization, c -> city, 6 -> 6, f2 -> fund, f -> fund, o -> over, n2 -> name))),[Ljava.lang.String;@3f2ef586,Annotation([Ljava.lang.String;@751d3241,[Ljava.lang.String;@76c7beb3,[Ljava.lang.String;@64337702),Annotation([Ljava.lang.String;@2cf92cc7,[Ljava.lang.String;@30ea8c23,[Ledu.cmu.lti.nlp.amr.Dependency;@7b139eab),Annotation([Ljava.lang.String;@4e76dac,[Ljava.lang.String;@611df6e3,[Ljava.lang.String;@5f2f577),Annotation([Ljava.lang.String;@6273c5a4,[Ljava.lang.String;@5d465e4b,[Ledu.cmu.lti.nlp.amr.Entity;@53e211ee))
AMR:
(a / after, op, d / date-entity)
(a / after, op, t / temporal-quantity)
(c / city, name, n2 / name)
(d / date-entity, day, 1 / 14)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2007)
(f / fund, mod, f2 / fund)
(f / fund, poss, m / method)
(n / name, op, "Bank")
(n / name, op, "Federal")
(n / name, op, "Reserve")
(n2 / name, op, "New")
(n2 / name, op, "York")
(o / over, op, m / method)
(o2 / organization, location, a / after)
(o2 / organization, location, c / city)
(o2 / organization, name, n / name)
(t / temporal-quantity, time, o / over)
(t / temporal-quantity, unit, m2 / month)

Decoded in 134,464 microseconds
Sentence: The funds were to be sent to Russia's Central Bank before a transfer to an account controlled by the North Korea government in a Russian commercial bank.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (organization :name (name :op "Central" :op "Bank"))
NER Entity: (country :name (name :op "North" :op "Korea"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 16-17:  account => account
Span 27-28:  bank => bank-01
Span 11-12:  before => before
Span 9-11:  Central Bank => (organization :name (name :op "Central" :op "Bank"))
Span 26-27:  commercial => commerce
Span 17-18:  controlled => control-01
Span 1-2:  funds => fund
Span 22-23:  government => (government-organization :ARG0-of govern-01)
Span 20-22:  North Korea => (country :name (name :op "North" :op "Korea"))
Span 7-8:  Russia => (country :name (name :op "Russia"))
Span 25-26:  Russian => (country :name (name :op "Russia"))
Span 5-6:  sent => send-01
Span 13-14:  transfer => transfer-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),bank,bank-01,false), Span(26,27,List(1),commercial,commerce,false), Span(25,26,List(4, 3, 2),Russian,(country :name (name :op "Russia")),false), Span(22,23,List(6, 5),government,(government-organization :ARG0-of govern-01),false), Span(20,22,List(10, 9, 8, 7),North Korea,(country :name (name :op "North" :op "Korea")),false), Span(17,18,List(11),controlled,control-01,false), Span(16,17,List(12),account,account,false), Span(13,14,List(13),transfer,transfer-01,false), Span(11,12,List(14),before,before,false), Span(9,11,List(18, 17, 16, 15),Central Bank,(organization :name (name :op "Central" :op "Bank")),false), Span(7,8,List(21, 20, 19),Russia,(country :name (name :op "Russia")),false), Span(5,6,List(22),sent,send-01,false), Span(1,2,List(23),funds,fund,false)),Map(2 -> country, 5 -> government-organization, 12 -> account, 15 -> organization, 8 -> name, 21 -> "Russia", 18 -> "Bank", 7 -> country, 17 -> "Central", 1 -> commerce, 23 -> fund, 4 -> "Russia", 11 -> control-01, 14 -> before, 20 -> name, 6 -> govern-01, 22 -> send-01, 0 -> bank-01, 9 -> "North", 16 -> name, 19 -> country, 3 -> name, 10 -> "Korea", 13 -> transfer-01),Map(n -> name, b -> bank-01, t -> transfer-01, b2 -> before, n4 -> name, c4 -> control-01, s -> send-01, g2 -> govern-01, g -> government-organization, n3 -> name, c3 -> country, a -> account, c -> commerce, f -> fund, o -> organization, c2 -> country, n2 -> name, c5 -> country))),[Ljava.lang.String;@41a90fa8,Annotation([Ljava.lang.String;@3d8bbcdc,[Ljava.lang.String;@52500920,[Ljava.lang.String;@117e0fe5),Annotation([Ljava.lang.String;@18a3962d,[Ljava.lang.String;@78aea4b9,[Ledu.cmu.lti.nlp.amr.Dependency;@2a65bb85),Annotation([Ljava.lang.String;@4b85880b,[Ljava.lang.String;@4f936da8,[Ljava.lang.String;@4215838f),Annotation([Ljava.lang.String;@452ba1db,[Ljava.lang.String;@2289aca5,[Ledu.cmu.lti.nlp.amr.Entity;@76a36b71))
AMR:
(b / bank-01, ARG0, c2 / country)
(b / bank-01, ARG1, g / government-organization)
(b / bank-01, mod, c / commerce)
(b2 / before, op, t / transfer-01)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / control-01, ARG0, g / government-organization)
(c4 / control-01, ARG1, a / account)
(c5 / country, name, n4 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(n / name, op, "Russia")
(n2 / name, op, "Korea")
(n2 / name, op, "North")
(n3 / name, op, "Bank")
(n3 / name, op, "Central")
(n4 / name, op, "Russia")
(o / organization, name, n3 / name)
(o / organization, poss, c5 / country)
(s / send-01, ARG0, f / fund)
(s / send-01, ARG1, o / organization)
(s / send-01, time, b2 / before)
(t / transfer-01, ARG1, a / account)

Decoded in 779,461 microseconds
Sentence: Hill stated talks will occur the week of 17 June 2007 with disarmament negotiators from Russia, South Korea and Japan on steps to recoup some of the time lost while the financial transfer was being organized.

NER Entity: (person :name (name :op "Hill"))
mkDayMonthYear(17	June	2007,17,June,2007)
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "South" :op "Korea"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 8-11:  17 June 2007 => (date-entity :day 17 :month 6 :year 2007)
Span 19-20:  and => and
Span 12-13:  disarmament => disarm-01
Span 32-33:  financial => finance
Span 20-21:  Japan => (country :name (name :op "Japan"))
Span 29-30:  lost => lose-02
Span 4-5:  occur => occur-01
Span 36-37:  organized => organize-01
Span 15-16:  Russia => (country :name (name :op "Russia"))
Span 25-26:  some => some
Span 17-19:  South Korea => (country :name (name :op "South" :op "Korea"))
Span 1-2:  stated => state-01
Span 22-23:  steps => step
Span 2-3:  talks => talk-01
Span 28-29:  time => time
Span 33-34:  transfer => transfer-01
Span 6-7:  week => week

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),organized,organize-01,false), Span(33,34,List(1),transfer,transfer-01,false), Span(32,33,List(2),financial,finance,false), Span(29,30,List(3),lost,lose-02,false), Span(28,29,List(4),time,time,false), Span(25,26,List(5),some,some,false), Span(22,23,List(6),steps,step,false), Span(20,21,List(9, 8, 7),Japan,(country :name (name :op "Japan")),false), Span(19,20,List(10),and,and,false), Span(17,19,List(14, 13, 12, 11),South Korea,(country :name (name :op "South" :op "Korea")),false), Span(15,16,List(17, 16, 15),Russia,(country :name (name :op "Russia")),false), Span(12,13,List(18),disarmament,disarm-01,false), Span(8,11,List(22, 21, 20, 19),17 June 2007,(date-entity :day 17 :month 6 :year 2007),false), Span(6,7,List(23),week,week,false), Span(4,5,List(24),occur,occur-01,false), Span(2,3,List(25),talks,talk-01,false), Span(1,2,List(26),stated,state-01,false)),Map(2 -> finance, 5 -> some, 12 -> name, 8 -> name, 15 -> country, 21 -> 6, 18 -> disarm-01, 24 -> occur-01, 7 -> country, 1 -> transfer-01, 17 -> "Russia", 23 -> week, 26 -> state-01, 4 -> time, 11 -> country, 14 -> "Korea", 20 -> 17, 6 -> step, 9 -> "Japan", 0 -> organize-01, 22 -> 2007, 16 -> name, 19 -> date-entity, 10 -> and, 3 -> lose-02, 25 -> talk-01, 13 -> "South"),Map(w -> week, n -> name, 2 -> 2007, s2 -> step, t -> transfer-01, s -> some, d -> disarm-01, t3 -> talk-01, 1 -> 17, n3 -> name, a -> and, c3 -> country, o2 -> occur-01, d2 -> date-entity, t2 -> time, s3 -> state-01, 6 -> 6, c -> country, l -> lose-02, f -> finance, o -> organize-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@184497d1,Annotation([Ljava.lang.String;@f9d87b,[Ljava.lang.String;@6ffab045,[Ljava.lang.String;@26fb628),Annotation([Ljava.lang.String;@3e2943ab,[Ljava.lang.String;@70dd7e15,[Ledu.cmu.lti.nlp.amr.Dependency;@4a9f80d3),Annotation([Ljava.lang.String;@35beb15e,[Ljava.lang.String;@41fe9859,[Ljava.lang.String;@5ac86ba5),Annotation([Ljava.lang.String;@6c67e137,[Ljava.lang.String;@2c9399a4,[Ledu.cmu.lti.nlp.amr.Entity;@191ae03f))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(c / country, name, n / name)
(c / country, poss, s2 / step)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(d / disarm-01, ARG1, t / transfer-01)
(d2 / date-entity, day, 1 / 17)
(d2 / date-entity, month, 6 / 6)
(d2 / date-entity, year, 2 / 2007)
(l / lose-02, ARG0, t / transfer-01)
(l / lose-02, ARG1, t2 / time)
(n / name, op, "Japan")
(n2 / name, op, "Korea")
(n2 / name, op, "South")
(n3 / name, op, "Russia")
(o / organize-01, ARG1, t / transfer-01)
(o2 / occur-01, ARG0, t3 / talk-01)
(o2 / occur-01, ARG1, w / week)
(o2 / occur-01, time, d2 / date-entity)
(s3 / state-01, ARG0, a / and)
(s3 / state-01, ARG1, o2 / occur-01)
(t / transfer-01, ARG1, a / and)
(t / transfer-01, mod, f / finance)
(t3 / talk-01, ARG1, s / some)

Decoded in 1,992,710 microseconds
Sentence: The discussions will also involve setting a timetable for resumption of 6-nation arms control talks.

Spans:
Span 11-12:  6 => 6
Span 3-4:  also => also
Span 14-15:  arms => arm
Span 15-16:  control => control-01
Span 1-2:  discussions => discuss-01
Span 13-14:  nation => nation
Span 5-6:  setting => set-03
Span 16-17:  talks => talk-01

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),talks,talk-01,false), Span(15,16,List(1),control,control-01,false), Span(14,15,List(2),arms,arm,false), Span(13,14,List(3),nation,nation,false), Span(11,12,List(4),6,6,false), Span(5,6,List(5),setting,set-03,false), Span(3,4,List(6),also,also,false), Span(1,2,List(7),discussions,discuss-01,false)),Map(2 -> arm, 5 -> set-03, 7 -> discuss-01, 1 -> control-01, 4 -> 6, 6 -> also, 0 -> talk-01, 3 -> nation),Map(n -> nation, t -> talk-01, s -> set-03, d -> discuss-01, a -> arm, a2 -> also, 6 -> 6, c -> control-01))),[Ljava.lang.String;@9635fa,Annotation([Ljava.lang.String;@53ab0286,[Ljava.lang.String;@63c5efee,[Ljava.lang.String;@2d10e0b1),Annotation([Ljava.lang.String;@1c98290c,[Ljava.lang.String;@172ca72b,[Ledu.cmu.lti.nlp.amr.Dependency;@5bda80bf),Annotation([Ljava.lang.String;@71e5f61d,[Ljava.lang.String;@2ce86164,[Ljava.lang.String;@5e8f9e2d),Annotation([Ljava.lang.String;@51df223b,[Ljava.lang.String;@fd46303,[Ledu.cmu.lti.nlp.amr.Entity;@60d8c0dc))
AMR:
(c / control-01, ARG1, a / arm)
(d / discuss-01, ARG1, s / set-03)
(n / nation, mod, 6 / 6)
(s / set-03, ARG1, c / control-01)
(s / set-03, ARG6, a2 / also)
(t / talk-01, ARG1, c / control-01)
(t / talk-01, manner, n / nation)

Decoded in 266,880 microseconds
Sentence: Under the agreement reached in February 2007 North Korean officials pledged to shut down the Yongbyon reactor and allow inspectors to verify and monitor the shutdown in return for a 50000-ton shipment of fuel oil.

NER Entity: (thing :name (name :op "North" :op "Korean"))
NER Entity: (country :name (name :op "Yongbyon"))
NER Entity: (country :name (name :op "Yongbyon"))
Spans:
Span 30-31:  50000 => 50000
Span 2-3:  agreement => agree-01
Span 18-19:  allow => allow-01
Span 22-23:  and => and
Span 17-18:  and => and
Span 13-14:  down => down
Span 5-7:  February 2007 => (date-entity :month 2 :year 2007)
Span 35-36:  fuel => fuel
Span 19-20:  inspectors => (person :ARG0-of inspect-01)
Span 23-24:  monitor => monitor-01
Span 7-9:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 9-10:  officials => (have-org-role-91 :ARG2 official)
Span 36-37:  oil => oil
Span 10-11:  pledged => pledge-01
Span 3-4:  reached => reach-01
Span 16-17:  reactor => reactor
Span 27-28:  return => return-01
Span 12-13:  shut => shut-05
Span 25-26:  shutdown => shut-05
Span 32-33:  ton => (mass-quantity :unit ton)
Span 21-22:  verify => verify-01
Span 15-16:  Yongbyon => (name :op "Yongbyon")

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),oil,oil,false), Span(35,36,List(1),fuel,fuel,false), Span(32,33,List(3, 2),ton,(mass-quantity :unit ton),false), Span(30,31,List(4),50000,50000,false), Span(27,28,List(5),return,return-01,false), Span(25,26,List(6),shutdown,shut-05,false), Span(23,24,List(7),monitor,monitor-01,false), Span(22,23,List(8),and,and,false), Span(21,22,List(9),verify,verify-01,false), Span(19,20,List(11, 10),inspectors,(person :ARG0-of inspect-01),false), Span(18,19,List(12),allow,allow-01,false), Span(17,18,List(13),and,and,false), Span(16,17,List(14),reactor,reactor,false), Span(15,16,List(16, 15),Yongbyon,(name :op "Yongbyon"),false), Span(13,14,List(17),down,down,false), Span(12,13,List(18),shut,shut-05,false), Span(10,11,List(19),pledged,pledge-01,false), Span(9,10,List(21, 20),officials,(have-org-role-91 :ARG2 official),false), Span(7,9,List(25, 24, 23, 22),North Korean,(thing :name (name :op "North" :op "Korean")),false), Span(5,7,List(28, 27, 26),February 2007,(date-entity :month 2 :year 2007),false), Span(3,4,List(29),reached,reach-01,false), Span(2,3,List(30),agreement,agree-01,false)),Map(30 -> agree-01, 2 -> mass-quantity, 5 -> return-01, 27 -> 2, 12 -> allow-01, 8 -> and, 15 -> name, 21 -> official, 18 -> shut-05, 24 -> "North", 7 -> monitor-01, 1 -> fuel, 17 -> down, 23 -> name, 26 -> date-entity, 4 -> 50000, 11 -> inspect-01, 14 -> reactor, 29 -> reach-01, 20 -> have-org-role-91, 28 -> 2007, 6 -> shut-05, 9 -> verify-01, 0 -> oil, 22 -> thing, 16 -> "Yongbyon", 19 -> pledge-01, 10 -> person, 3 -> ton, 25 -> "Korean", 13 -> and),Map(n -> name, r3 -> reach-01, h -> have-org-role-91, 2 -> 2, 5 -> 50000, s2 -> shut-05, t -> ton, m2 -> monitor-01, p2 -> pledge-01, a3 -> and, s -> shut-05, v -> verify-01, m -> mass-quantity, d -> down, r2 -> reactor, p -> person, a -> and, o2 -> official, d2 -> date-entity, t2 -> thing, a2 -> allow-01, i -> inspect-01, r -> return-01, 22 -> 2007, f -> fuel, o -> oil, n2 -> name, a4 -> agree-01))),[Ljava.lang.String;@4204541c,Annotation([Ljava.lang.String;@6a62689d,[Ljava.lang.String;@4602c2a9,[Ljava.lang.String;@60fa3495),Annotation([Ljava.lang.String;@3e2822,[Ljava.lang.String;@79e18e38,[Ledu.cmu.lti.nlp.amr.Dependency;@29a60c27),Annotation([Ljava.lang.String;@1849db1a,[Ljava.lang.String;@69c79f09,[Ljava.lang.String;@1ca25c47),Annotation([Ljava.lang.String;@5fcacc0,[Ljava.lang.String;@533b266e,[Ledu.cmu.lti.nlp.amr.Entity;@6d1d4d7))
AMR:
(a / and, op, m2 / monitor-01)
(a2 / allow-01, ARG1, a / and)
(a3 / and, op, a2 / allow-01)
(a3 / and, op, s2 / shut-05)
(a4 / agree-01, ARG1, a3 / and)
(d2 / date-entity, month, 2 / 2)
(d2 / date-entity, year, 22 / 2007)
(h / have-org-role-91, ARG1, m / mass-quantity)
(h / have-org-role-91, ARG2, o2 / official)
(i / inspect-01, ARG0, p / person)
(i / inspect-01, ARG1, t2 / thing)
(m / mass-quantity, mod, 5 / 50000)
(m / mass-quantity, unit, t / ton)
(m2 / monitor-01, ARG1, s / shut-05)
(n / name, op, "Yongbyon")
(n2 / name, op, "Korean")
(n2 / name, op, "North")
(o / oil, mod, f / fuel)
(p2 / pledge-01, ARG2, s2 / shut-05)
(p2 / pledge-01, ARG6, d / down)
(r / return-01, ARG1, o / oil)
(r2 / reactor, name, n / name)
(r3 / reach-01, ARG1, a4 / agree-01)
(r3 / reach-01, time, d2 / date-entity)
(s / shut-05, ARG1, r / return-01)
(s2 / shut-05, ARG0, o2 / official)
(s2 / shut-05, ARG1, r2 / reactor)
(t2 / thing, name, n2 / name)
(v / verify-01, ARG0, p / person)
(v / verify-01, ARG1, s / shut-05)

Decoded in 3,366,329 microseconds
Sentence: North Korean officials will declare all nuclear programs and disable all facilities in return for a further 950000 tons of fuel oil in the next phase of the Agreement.

NER Entity: (thing :name (name :op "North" :op "Korean"))
mkDayMonthYear(950000,00,00,95)
mkDayMonthYear(950000,00,00,95)
Spans:
Span 17-18:  950000 => (date-entity :year 1995)
Span 28-29:  Agreement => agreement
Span 10-11:  all => all
Span 5-6:  all => all
Span 8-9:  and => and
Span 9-10:  disable => disable-01
Span 11-12:  facilities => facility
Span 20-21:  fuel => fuel
Span 16-17:  further => further
Span 24-25:  next => next
Span 0-2:  North Korean => (thing :name (name :op "North" :op "Korean"))
Span 6-7:  nuclear => nucleus
Span 2-3:  officials => (have-org-role-91 :ARG2 official)
Span 21-22:  oil => oil
Span 25-26:  phase => phase
Span 7-8:  programs => program
Span 13-14:  return => return-01
Span 18-19:  tons => (mass-quantity :unit ton)

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),Agreement,agreement,false), Span(25,26,List(1),phase,phase,false), Span(24,25,List(2),next,next,false), Span(21,22,List(3),oil,oil,false), Span(20,21,List(4),fuel,fuel,false), Span(18,19,List(6, 5),tons,(mass-quantity :unit ton),false), Span(17,18,List(8, 7),950000,(date-entity :year 1995),false), Span(16,17,List(9),further,further,false), Span(13,14,List(10),return,return-01,false), Span(11,12,List(11),facilities,facility,false), Span(10,11,List(12),all,all,false), Span(9,10,List(13),disable,disable-01,false), Span(8,9,List(14),and,and,false), Span(7,8,List(15),programs,program,false), Span(6,7,List(16),nuclear,nucleus,false), Span(5,6,List(17),all,all,false), Span(2,3,List(19, 18),officials,(have-org-role-91 :ARG2 official),false), Span(0,2,List(23, 22, 21, 20),North Korean,(thing :name (name :op "North" :op "Korean")),false)),Map(2 -> next, 5 -> mass-quantity, 12 -> all, 15 -> program, 8 -> 1995, 21 -> name, 18 -> have-org-role-91, 7 -> date-entity, 17 -> all, 1 -> phase, 23 -> "Korean", 4 -> fuel, 11 -> facility, 14 -> and, 20 -> thing, 6 -> ton, 22 -> "North", 0 -> agreement, 9 -> further, 16 -> nucleus, 19 -> official, 3 -> oil, 10 -> return-01, 13 -> disable-01),Map(n -> next, h -> have-org-role-91, t -> ton, p2 -> program, a3 -> and, m -> mass-quantity, d -> date-entity, 1 -> 1995, p -> phase, n3 -> name, a -> agreement, o2 -> official, d2 -> disable-01, f3 -> facility, t2 -> thing, r -> return-01, a2 -> all, f2 -> further, f -> fuel, o -> oil, n2 -> nucleus, a4 -> all))),[Ljava.lang.String;@89ff02e,Annotation([Ljava.lang.String;@6865c751,[Ljava.lang.String;@62679465,[Ljava.lang.String;@6a988392),Annotation([Ljava.lang.String;@1d71006f,[Ljava.lang.String;@5b6813df,[Ledu.cmu.lti.nlp.amr.Dependency;@5f2606b),Annotation([Ljava.lang.String;@2b58f754,[Ljava.lang.String;@3ebff828,[Ljava.lang.String;@2552f2cb),Annotation([Ljava.lang.String;@33352f32,[Ljava.lang.String;@5f3b9c57,[Ledu.cmu.lti.nlp.amr.Entity;@1e044120))
AMR:
(a / agreement, part, p / phase)
(a3 / and, op, d2 / disable-01)
(a3 / and, op, p2 / program)
(d / date-entity, year, 1 / 1995)
(d2 / disable-01, ARG0, h / have-org-role-91)
(d2 / disable-01, ARG1, f3 / facility)
(d2 / disable-01, ARG2, p / phase)
(f3 / facility, quant, a2 / all)
(h / have-org-role-91, ARG1, r / return-01)
(h / have-org-role-91, ARG2, o2 / official)
(m / mass-quantity, mod, f3 / facility)
(m / mass-quantity, time, d / date-entity)
(m / mass-quantity, unit, t / ton)
(n3 / name, op, "Korean")
(n3 / name, op, "North")
(o / oil, mod, f / fuel)
(o / oil, quant, m / mass-quantity)
(p / phase, mod, n / next)
(p2 / program, mod, t2 / thing)
(p2 / program, quant, a4 / all)
(r / return-01, ARG1, n2 / nucleus)
(t / ton, mod, f2 / further)
(t2 / thing, name, n3 / name)

Decoded in 906,413 microseconds
Sentence: Hill stated the technical possibility of concluding the next phase of the agreement by December 2007.

NER Entity: (person :name (name :op "Hill"))
Spans:
Span 12-13:  agreement => agree-01
Span 14-16:  December 2007 => (date-entity :month 12 :year 2007)
Span 8-9:  next => next
Span 9-10:  phase => phase
Span 4-5:  possibility => possible
Span 1-2:  stated => state-01
Span 3-4:  technical => technique

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,16,List(2, 1, 0),December 2007,(date-entity :month 12 :year 2007),false), Span(12,13,List(3),agreement,agree-01,false), Span(9,10,List(4),phase,phase,false), Span(8,9,List(5),next,next,false), Span(4,5,List(6),possibility,possible,false), Span(3,4,List(7),technical,technique,false), Span(1,2,List(8),stated,state-01,false)),Map(2 -> 2007, 5 -> next, 8 -> state-01, 7 -> technique, 1 -> 12, 4 -> phase, 6 -> possible, 0 -> date-entity, 3 -> agree-01),Map(n -> next, 2 -> 2007, t -> technique, p2 -> possible, s -> state-01, d -> date-entity, p -> phase, 1 -> 12, a -> agree-01))),[Ljava.lang.String;@2cf23c81,Annotation([Ljava.lang.String;@3624da92,[Ljava.lang.String;@35fe2125,[Ljava.lang.String;@94f6bfb),Annotation([Ljava.lang.String;@34645867,[Ljava.lang.String;@2484f433,[Ledu.cmu.lti.nlp.amr.Dependency;@60b71e8f),Annotation([Ljava.lang.String;@1255b1d1,[Ljava.lang.String;@464649c,[Ljava.lang.String;@7c22d4f),Annotation([Ljava.lang.String;@5f59185e,[Ljava.lang.String;@60bdf15d,[Ledu.cmu.lti.nlp.amr.Entity;@47da3952))
AMR:
(a / agree-01, ARG1, s / state-01)
(a / agree-01, part, p / phase)
(a / agree-01, time, d / date-entity)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2007)
(p / phase, mod, n / next)
(p2 / possible, mod, t / technique)
(s / state-01, ARG1, p2 / possible)

Decoded in 167,104 microseconds
Sentence: 2007-08-27

mkDayMonthYear(2007-08-27,27,08,2007)
mkDayMonthYear(2007-08-27,27,08,2007)
Spans:
Span 0-1:  2007-08-27 => (date-entity :day 27 :month 8 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-08-27,(date-entity :day 27 :month 8 :year 2007),false)),Map(2 -> 8, 1 -> 27, 0 -> date-entity, 3 -> 2007),Map(2 -> 27, 8 -> 8, d -> date-entity, 22 -> 2007))),[Ljava.lang.String;@51e4ccb3,Annotation([Ljava.lang.String;@46e8a539,[Ljava.lang.String;@495083a0,[Ljava.lang.String;@5fd62371),Annotation([Ljava.lang.String;@28a0fd6c,[Ljava.lang.String;@2b62442c,[Ledu.cmu.lti.nlp.amr.Dependency;@66629f63),Annotation([Ljava.lang.String;@841e575,[Ljava.lang.String;@27a5328c,[Ljava.lang.String;@1e5f4170),Annotation([Ljava.lang.String;@6c345c5f,[Ljava.lang.String;@6b5966e1,[Ledu.cmu.lti.nlp.amr.Entity;@65e61854))
AMR:
(d / date-entity, day, 2 / 27)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2007)

Decoded in 7,072 microseconds
Sentence: Iran, Islamic Republic of (IR)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic"))
NER Entity: (organization :name (name :op "IR"))
Spans:
Span 0-5:  Iran , Islamic Republic of => (country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,5,List(5, 4, 3, 2, 1, 0),Iran , Islamic Republic of,(country :name (name :op "Iran" :op "of" :op "Republic" :op "Islamic")),false)),Map(2 -> "Iran", 5 -> "Islamic", 1 -> name, 4 -> "Republic", 0 -> country, 3 -> "of"),Map(n -> name, c -> country))),[Ljava.lang.String;@1568159,Annotation([Ljava.lang.String;@4fcee388,[Ljava.lang.String;@6f80fafe,[Ljava.lang.String;@3af17be2),Annotation([Ljava.lang.String;@f9879ac,[Ljava.lang.String;@37f21974,[Ledu.cmu.lti.nlp.amr.Dependency;@5f4d427e),Annotation([Ljava.lang.String;@6e521c1e,[Ljava.lang.String;@224b4d61,[Ljava.lang.String;@5d5d9e5),Annotation([Ljava.lang.String;@303e3593,[Ljava.lang.String;@4ef27d66,[Ledu.cmu.lti.nlp.amr.Entity;@362a019c))
AMR:
(c / country, name, n / name)
(n / name, op, "Iran")
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")

Decoded in 9,197 microseconds
Sentence: International; weapons; proliferation; Government; energy

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 8-9:  energy => energy
Span 6-7:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 4-5:  proliferation => proliferate-01
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),energy,energy,false), Span(7,8,List(1),;,and,false), Span(6,7,List(3, 2),Government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(4),;,and,false), Span(4,5,List(5),proliferation,proliferate-01,false), Span(3,4,List(6),;,and,false), Span(2,3,List(7),weapons,weapon,false), Span(1,2,List(8),;,and,false), Span(0,1,List(9),International,international,false)),Map(2 -> government-organization, 5 -> proliferate-01, 8 -> and, 7 -> weapon, 1 -> and, 4 -> and, 6 -> and, 9 -> international, 0 -> energy, 3 -> govern-01),Map(w -> weapon, e -> energy, a3 -> and, p -> proliferate-01, g2 -> govern-01, g -> government-organization, a -> and, i -> international, a2 -> and, a4 -> and))),[Ljava.lang.String;@1d9bec4d,Annotation([Ljava.lang.String;@5c48c0c0,[Ljava.lang.String;@10c8f62,[Ljava.lang.String;@674c583e),Annotation([Ljava.lang.String;@25f7391e,[Ljava.lang.String;@3f23a3a0,[Ledu.cmu.lti.nlp.amr.Dependency;@5ab14cb9),Annotation([Ljava.lang.String;@5fb97279,[Ljava.lang.String;@439a8f59,[Ljava.lang.String;@61861a29),Annotation([Ljava.lang.String;@31024624,[Ljava.lang.String;@25bcd0c7,[Ledu.cmu.lti.nlp.amr.Entity;@32cb636e))
AMR:
(a / and, op, a2 / and)
(a / and, op, a3 / and)
(a / and, op, a4 / and)
(a2 / and, op, e / energy)
(a3 / and, op, g / government-organization)
(a4 / and, op, i / international)
(a4 / and, op, p / proliferate-01)
(a4 / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 45,051 microseconds
Sentence: Leading arms control experts criticize a new nuclear activities plan released by Iran and the U.N.'s International Atomic Energy Agency as ineffectual and dangerous.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  activities => activity
Span 23-24:  and => and
Span 13-14:  and => and
Span 1-2:  arms => arm
Span 18-22:  Atomic Energy Agency as => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 2-3:  control => control-01
Span 24-25:  dangerous => dangerous
Span 3-4:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 17-18:  International => international
Span 12-13:  Iran => (country :name (name :op "Iran"))
Span 6-7:  new => new
Span 7-8:  nuclear => nucleus
Span 9-10:  plan => plan-01
Span 10-11:  released => release-01
Span 15-16:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),dangerous,dangerous,false), Span(23,24,List(1),and,and,false), Span(18,22,List(7, 6, 5, 4, 3, 2),Atomic Energy Agency as,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(17,18,List(8),International,international,false), Span(15,16,List(12, 11, 10, 9),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false), Span(13,14,List(13),and,and,false), Span(12,13,List(16, 15, 14),Iran,(country :name (name :op "Iran")),false), Span(10,11,List(17),released,release-01,false), Span(9,10,List(18),plan,plan-01,false), Span(8,9,List(19),activities,activity,false), Span(7,8,List(20),nuclear,nucleus,false), Span(6,7,List(21),new,new,false), Span(3,4,List(24, 23, 22),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(2,3,List(25),control,control-01,false), Span(1,2,List(26),arms,arm,false)),Map(2 -> organization, 5 -> "Atomic", 12 -> "U.N.", 8 -> international, 15 -> name, 21 -> new, 18 -> plan-01, 24 -> expert-41, 7 -> "Agency", 1 -> and, 17 -> release-01, 23 -> person, 26 -> arm, 4 -> "International", 11 -> name, 14 -> country, 20 -> nucleus, 6 -> "Energy", 9 -> have-org-role-91, 0 -> dangerous, 22 -> have-org-role-91, 16 -> "Iran", 19 -> activity, 10 -> government-organization, 3 -> name, 25 -> control-01, 13 -> and),Map(e -> expert-41, n -> name, h -> have-org-role-91, h2 -> have-org-role-91, p2 -> person, n4 -> nucleus, a3 -> activity, d -> dangerous, g -> government-organization, p -> plan-01, a -> and, n3 -> name, i -> international, a2 -> and, r -> release-01, c -> country, o -> organization, c2 -> control-01, n2 -> name, a4 -> arm, n5 -> new))),[Ljava.lang.String;@63cd604c,Annotation([Ljava.lang.String;@40dd3977,[Ljava.lang.String;@3a4e343,[Ljava.lang.String;@6a1d204a),Annotation([Ljava.lang.String;@62dae245,[Ljava.lang.String;@4b6579e8,[Ledu.cmu.lti.nlp.amr.Dependency;@6fff253c),Annotation([Ljava.lang.String;@6c6357f9,[Ljava.lang.String;@591e58fa,[Ljava.lang.String;@3954d008),Annotation([Ljava.lang.String;@2f94c4db,[Ljava.lang.String;@593e824f,[Ledu.cmu.lti.nlp.amr.Entity;@72ccd81a))
AMR:
(a / and, op, d / dangerous)
(a / and, op, i / international)
(a2 / and, op, c2 / control-01)
(a2 / and, op, i / international)
(a2 / and, op, p / plan-01)
(a3 / activity, mod, n4 / nucleus)
(c / country, name, n3 / name)
(c2 / control-01, ARG1, a4 / arm)
(e / expert-41, ARG1, p2 / person)
(g / government-organization, name, n2 / name)
(h / have-org-role-91, ARG1, g / government-organization)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, p2 / person)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "U.N.")
(n3 / name, op, "Iran")
(o / organization, name, n / name)
(o / organization, poss, h / have-org-role-91)
(p / plan-01, ARG0, a3 / activity)
(p / plan-01, ARG1, r / release-01)
(p / plan-01, mod, n5 / new)
(r / release-01, ARG1, o / organization)
(r / release-01, location, c / country)

Decoded in 894,607 microseconds
Sentence: On 27 August 2007 Iran and the U.N.'s International Atomic Energy Agency released a plan for resolving issues by December 2007.

mkDayMonthYear(27	August	2007,27,August,2007)
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 1-4:  27 August 2007 => (date-entity :day 27 :month 8 :year 2007)
Span 5-6:  and => and
Span 10-14:  Atomic Energy Agency released => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 20-22:  December 2007 => (date-entity :month 12 :year 2007)
Span 9-10:  International => international
Span 4-5:  Iran => (country :name (name :op "Iran"))
Span 18-19:  issues => issue
Span 15-16:  plan => plan-01
Span 7-8:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,22,List(2, 1, 0),December 2007,(date-entity :month 12 :year 2007),false), Span(18,19,List(3),issues,issue,false), Span(15,16,List(4),plan,plan-01,false), Span(10,14,List(10, 9, 8, 7, 6, 5),Atomic Energy Agency released,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(9,10,List(11),International,international,false), Span(7,8,List(15, 14, 13, 12),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false), Span(5,6,List(16),and,and,false), Span(4,5,List(19, 18, 17),Iran,(country :name (name :op "Iran")),false), Span(1,4,List(23, 22, 21, 20),27 August 2007,(date-entity :day 27 :month 8 :year 2007),false)),Map(2 -> 2007, 5 -> organization, 12 -> have-org-role-91, 15 -> "U.N.", 8 -> "Atomic", 21 -> 27, 18 -> name, 7 -> "International", 17 -> country, 1 -> 12, 23 -> 2007, 4 -> plan-01, 11 -> international, 14 -> name, 20 -> date-entity, 6 -> name, 22 -> 8, 0 -> date-entity, 9 -> "Energy", 16 -> and, 19 -> "Iran", 3 -> issue, 10 -> "Agency", 13 -> government-organization),Map(n -> name, h -> have-org-role-91, 2 -> 2007, 8 -> 8, d -> date-entity, 1 -> 12, 23 -> 2007, p -> plan-01, g -> government-organization, n3 -> name, a -> and, d2 -> date-entity, i2 -> international, i -> issue, c -> country, 22 -> 27, o -> organization, n2 -> name))),[Ljava.lang.String;@6d8792db,Annotation([Ljava.lang.String;@64bc21ac,[Ljava.lang.String;@493dfb8e,[Ljava.lang.String;@5d25e6bb),Annotation([Ljava.lang.String;@ce5a68e,[Ljava.lang.String;@9d157ff,[Ledu.cmu.lti.nlp.amr.Dependency;@2f162cc0),Annotation([Ljava.lang.String;@5df417a7,[Ljava.lang.String;@7c041b41,[Ljava.lang.String;@7f69d591),Annotation([Ljava.lang.String;@61078690,[Ljava.lang.String;@1cb3ec38,[Ledu.cmu.lti.nlp.amr.Entity;@403132fc))
AMR:
(a / and, op, c / country)
(c / country, name, n3 / name)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 2 / 2007)
(d2 / date-entity, calendar, c / country)
(d2 / date-entity, day, 22 / 27)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 23 / 2007)
(g / government-organization, name, n2 / name)
(h / have-org-role-91, ARG1, g / government-organization)
(i / issue, poss, c / country)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "U.N.")
(n3 / name, op, "Iran")
(o / organization, calendar, p / plan-01)
(o / organization, mod, i2 / international)
(o / organization, name, n / name)
(o / organization, poss, h / have-org-role-91)
(p / plan-01, ARG0, c / country)
(p / plan-01, ARG1, d / date-entity)

Decoded in 1,111,027 microseconds
Sentence: The issues have been unresolved for 4 years.

Spans:
Span 6-7:  4 => 4
Span 1-2:  issues => issue
Span 7-8:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(1, 0),years,(temporal-quantity :unit year),false), Span(6,7,List(2),4,4,false), Span(1,2,List(3),issues,issue,false)),Map(2 -> 4, 1 -> year, 0 -> temporal-quantity, 3 -> issue),Map(t -> temporal-quantity, y -> year, 4 -> 4, i -> issue))),[Ljava.lang.String;@71c5b236,Annotation([Ljava.lang.String;@2cab9998,[Ljava.lang.String;@2f7a7219,[Ljava.lang.String;@669513d8),Annotation([Ljava.lang.String;@3a1d593e,[Ljava.lang.String;@4a8a60bc,[Ledu.cmu.lti.nlp.amr.Dependency;@361c294e),Annotation([Ljava.lang.String;@7859e786,[Ljava.lang.String;@285d851a,[Ljava.lang.String;@314b8f2d),Annotation([Ljava.lang.String;@664a9613,[Ljava.lang.String;@5118388b,[Ledu.cmu.lti.nlp.amr.Entity;@15a902e7))
AMR:
(t / temporal-quantity, op, i / issue)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, y / year)

Decoded in 13,140 microseconds
Sentence: The plan is meant to allay suspicions about Iran's past nuclear activities.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 7-8:  about => about
Span 12-13:  activities => activity
Span 5-6:  allay => allay-01
Span 8-9:  Iran => (country :name (name :op "Iran"))
Span 3-4:  meant => mean-01
Span 11-12:  nuclear => nucleus
Span 10-11:  past => past
Span 1-2:  plan => plan-01
Span 6-7:  suspicions => suspect-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),activities,activity,false), Span(11,12,List(1),nuclear,nucleus,false), Span(10,11,List(2),past,past,false), Span(8,9,List(5, 4, 3),Iran,(country :name (name :op "Iran")),false), Span(7,8,List(6),about,about,false), Span(6,7,List(7),suspicions,suspect-01,false), Span(5,6,List(8),allay,allay-01,false), Span(3,4,List(9),meant,mean-01,false), Span(1,2,List(10),plan,plan-01,false)),Map(2 -> past, 5 -> "Iran", 8 -> allay-01, 7 -> suspect-01, 1 -> nucleus, 4 -> name, 6 -> about, 9 -> mean-01, 0 -> activity, 10 -> plan-01, 3 -> country),Map(n -> nucleus, p2 -> plan-01, a3 -> allay-01, s -> suspect-01, m -> mean-01, p -> past, a -> activity, a2 -> about, c -> country, n2 -> name))),[Ljava.lang.String;@7876d598,Annotation([Ljava.lang.String;@4a3e3e8b,[Ljava.lang.String;@5af28b27,[Ljava.lang.String;@71104a4),Annotation([Ljava.lang.String;@4985cbcb,[Ljava.lang.String;@72f46e16,[Ledu.cmu.lti.nlp.amr.Dependency;@3c9168dc),Annotation([Ljava.lang.String;@332a7fce,[Ljava.lang.String;@549621f3,[Ljava.lang.String;@54361a9),Annotation([Ljava.lang.String;@32232e55,[Ljava.lang.String;@5217f3d0,[Ledu.cmu.lti.nlp.amr.Entity;@37ebc9d8))
AMR:
(a / activity, mod, n / nucleus)
(a / activity, mod, p / past)
(a / activity, poss, c / country)
(a3 / allay-01, ARG1, s / suspect-01)
(a3 / allay-01, time, a2 / about)
(c / country, name, n2 / name)
(m / mean-01, ARG1, p2 / plan-01)
(m / mean-01, ARG2, a3 / allay-01)
(n2 / name, op, "Iran")
(s / suspect-01, ARG1, a / activity)

Decoded in 314,743 microseconds
Sentence: Agency officials stated that the plan is a breakthrough.

Spans:
Span 8-9:  breakthrough => breakthrough-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 5-6:  plan => plan-01
Span 2-3:  stated => state-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),breakthrough,breakthrough-01,false), Span(5,6,List(1),plan,plan-01,false), Span(2,3,List(2),stated,state-01,false), Span(1,2,List(4, 3),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> state-01, 1 -> plan-01, 4 -> official, 0 -> breakthrough-01, 3 -> have-org-role-91),Map(h -> have-org-role-91, b -> breakthrough-01, s -> state-01, p -> plan-01, o -> official))),[Ljava.lang.String;@293bb8a5,Annotation([Ljava.lang.String;@2416a51,[Ljava.lang.String;@6fa590ba,[Ljava.lang.String;@6e9319f),Annotation([Ljava.lang.String;@72e34f77,[Ljava.lang.String;@7bf9b098,[Ledu.cmu.lti.nlp.amr.Dependency;@389adf1d),Annotation([Ljava.lang.String;@77307458,[Ljava.lang.String;@1fc0053e,[Ljava.lang.String;@290b1b2e),Annotation([Ljava.lang.String;@47874b25,[Ljava.lang.String;@33617539,[Ledu.cmu.lti.nlp.amr.Entity;@2c177f9e))
AMR:
(b / breakthrough-01, ARG1, p / plan-01)
(h / have-org-role-91, ARG2, o / official)
(p / plan-01, ARG1, h / have-org-role-91)
(s / state-01, ARG1, b / breakthrough-01)

Decoded in 40,962 microseconds
Sentence: On 28 August 2007 at a news conference in Tehran Iranian President Mahmoud ahmadinejad stated that --

mkDayMonthYear(28	August	2007,28,August,2007)
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (person :name (name :op "Mahmoud" :op "ahmadinejad"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Tehran"))
Spans:
Span 1-4:  28 August 2007 => (date-entity :day 28 :month 8 :year 2007)
Span 7-8:  conference => conference
Span 10-11:  Iranian => (country :name (name :op "Iran"))
Span 12-14:  Mahmoud ahmadinejad => (person :name (name :op "Mahmoud" :op "ahmadinejad"))
Span 6-7:  news => news
Span 11-12:  President => (have-org-role-91 :ARG2 president)
Span 14-15:  stated => state-01
Span 9-10:  Tehran => (city :name (name :op "Tehran"))

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),stated,state-01,false), Span(12,14,List(4, 3, 2, 1),Mahmoud ahmadinejad,(person :name (name :op "Mahmoud" :op "ahmadinejad")),false), Span(11,12,List(6, 5),President,(have-org-role-91 :ARG2 president),false), Span(10,11,List(9, 8, 7),Iranian,(country :name (name :op "Iran")),false), Span(9,10,List(12, 11, 10),Tehran,(city :name (name :op "Tehran")),false), Span(7,8,List(13),conference,conference,false), Span(6,7,List(14),news,news,false), Span(1,4,List(18, 17, 16, 15),28 August 2007,(date-entity :day 28 :month 8 :year 2007),false)),Map(2 -> name, 5 -> have-org-role-91, 12 -> "Tehran", 15 -> date-entity, 8 -> name, 18 -> 2007, 7 -> country, 17 -> 8, 1 -> person, 4 -> "ahmadinejad", 11 -> name, 14 -> news, 6 -> president, 0 -> state-01, 9 -> "Iran", 16 -> 28, 3 -> "Mahmoud", 10 -> city, 13 -> conference),Map(n -> name, h -> have-org-role-91, 2 -> 28, 8 -> 8, p2 -> president, n4 -> news, s -> state-01, d -> date-entity, p -> person, n3 -> name, c3 -> conference, c -> country, 22 -> 2007, n2 -> name, c2 -> city))),[Ljava.lang.String;@5db4c359,Annotation([Ljava.lang.String;@209775a9,[Ljava.lang.String;@18e7143f,[Ljava.lang.String;@f9b7332),Annotation([Ljava.lang.String;@74cec793,[Ljava.lang.String;@6fefce9e,[Ledu.cmu.lti.nlp.amr.Dependency;@4f8969b0),Annotation([Ljava.lang.String;@1bdf8190,[Ljava.lang.String;@192f2f27,[Ljava.lang.String;@8a589a2),Annotation([Ljava.lang.String;@c65a5ef,[Ljava.lang.String;@6b5176f2,[Ledu.cmu.lti.nlp.amr.Entity;@b672aa8))
AMR:
(c / country, location, c2 / city)
(c / country, name, n2 / name)
(c2 / city, name, n3 / name)
(c3 / conference, mod, n4 / news)
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2007)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Mahmoud")
(n / name, op, "ahmadinejad")
(n2 / name, op, "Iran")
(n3 / name, op, "Tehran")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, c3 / conference)
(s / state-01, time, d / date-entity)

Decoded in 951,605 microseconds
Sentence: investigation into Iran's nuclear activities is now closed.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 5-6:  activities => activity
Span 8-9:  closed => close
Span 0-1:  investigation => investigate-01
Span 2-3:  Iran => (country :name (name :op "Iran"))
Span 7-8:  now => now
Span 4-5:  nuclear => nucleus

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),closed,close,false), Span(7,8,List(1),now,now,false), Span(5,6,List(2),activities,activity,false), Span(4,5,List(3),nuclear,nucleus,false), Span(2,3,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(0,1,List(7),investigation,investigate-01,false)),Map(2 -> activity, 5 -> name, 7 -> investigate-01, 1 -> now, 4 -> country, 6 -> "Iran", 0 -> close, 3 -> nucleus),Map(n -> now, n3 -> name, a -> activity, i -> investigate-01, c -> close, c2 -> country, n2 -> nucleus))),[Ljava.lang.String;@2fab4aff,Annotation([Ljava.lang.String;@ec0c838,[Ljava.lang.String;@6e46d9f4,[Ljava.lang.String;@5cc69cfe),Annotation([Ljava.lang.String;@29cfd92b,[Ljava.lang.String;@21c64522,[Ledu.cmu.lti.nlp.amr.Dependency;@7997b197),Annotation([Ljava.lang.String;@11dee337,[Ljava.lang.String;@460f76a6,[Ljava.lang.String;@55f3c410),Annotation([Ljava.lang.String;@11acdc30,[Ljava.lang.String;@770d4269,[Ledu.cmu.lti.nlp.amr.Entity;@4a8ab068))
AMR:
(a / activity, mod, n2 / nucleus)
(a / activity, poss, c2 / country)
(c / close, domain, i / investigate-01)
(c / close, mod, n / now)
(c2 / country, name, n3 / name)
(i / investigate-01, ARG1, a / activity)
(n3 / name, op, "Iran")

Decoded in 102,498 microseconds
Sentence: No other member of the International Atomic Energy Agency has cooperated as well as Iran.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 5-9:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 14-15:  Iran => (country :name (name :op "Iran"))
Span 2-3:  member => (have-org-role-91 :ARG2 member)
Span 0-1:  No => -
Span 1-2:  other => other
Span 12-13:  well => well

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(2, 1, 0),Iran,(country :name (name :op "Iran")),false), Span(12,13,List(3),well,well,false), Span(5,9,List(9, 8, 7, 6, 5, 4),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(2,3,List(11, 10),member,(have-org-role-91 :ARG2 member),false), Span(1,2,List(12),other,other,false), Span(0,1,List(13),No,-,false)),Map(2 -> "Iran", 5 -> name, 12 -> other, 8 -> "Energy", 7 -> "Atomic", 1 -> name, 4 -> organization, 11 -> member, 6 -> "International", 0 -> country, 9 -> "Agency", 3 -> well, 10 -> have-org-role-91, 13 -> -),Map(w -> well, n -> name, h -> have-org-role-91, m -> member, o2 -> other, - -> -, c -> country, o -> organization, n2 -> name))),[Ljava.lang.String;@1922e6d,Annotation([Ljava.lang.String;@76a82f33,[Ljava.lang.String;@6bab2585,[Ljava.lang.String;@74bdc168),Annotation([Ljava.lang.String;@644c78d4,[Ljava.lang.String;@532a02d9,[Ledu.cmu.lti.nlp.amr.Dependency;@611f8234),Annotation([Ljava.lang.String;@7bb3a9fe,[Ljava.lang.String;@7cbee484,[Ljava.lang.String;@7f811d00),Annotation([Ljava.lang.String;@62923ee6,[Ljava.lang.String;@4089713,[Ledu.cmu.lti.nlp.amr.Entity;@f19c9d2))
AMR:
(- / -, calendar, o2 / other)
(c / country, name, n / name)
(c / country, purpose, h / have-org-role-91)
(h / have-org-role-91, ARG0, w / well)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(h / have-org-role-91, ARG6, - / -)
(n / name, op, "Iran")
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(o / organization, name, n2 / name)

Decoded in 203,949 microseconds
Sentence: Iran is a nuclear nation.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 4-5:  nation => nation
Span 3-4:  nuclear => nucleus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),nation,nation,false), Span(3,4,List(1),nuclear,nucleus,false), Span(0,1,List(4, 3, 2),Iran,(country :name (name :op "Iran")),false)),Map(2 -> country, 1 -> nucleus, 4 -> "Iran", 0 -> nation, 3 -> name),Map(n -> nation, n3 -> name, c -> country, n2 -> nucleus))),[Ljava.lang.String;@7807ac2c,Annotation([Ljava.lang.String;@b91d8c4,[Ljava.lang.String;@4b6166aa,[Ljava.lang.String;@a77614d),Annotation([Ljava.lang.String;@4fd4cae3,[Ljava.lang.String;@4a067c25,[Ledu.cmu.lti.nlp.amr.Dependency;@a1217f9),Annotation([Ljava.lang.String;@3bde62ff,[Ljava.lang.String;@523424b5,[Ljava.lang.String;@2baa8d82),Annotation([Ljava.lang.String;@319dead1,[Ljava.lang.String;@791cbf87,[Ledu.cmu.lti.nlp.amr.Entity;@a7e2d9d))
AMR:
(c / country, name, n3 / name)
(n / nation, domain, c / country)
(n / nation, mod, n2 / nucleus)
(n3 / name, op, "Iran")

Decoded in 10,422 microseconds
Sentence: Iran has the nuclear fuel cycle.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 5-6:  cycle => cycle
Span 4-5:  fuel => fuel
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 3-4:  nuclear => nucleus

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),cycle,cycle,false), Span(4,5,List(1),fuel,fuel,false), Span(3,4,List(2),nuclear,nucleus,false), Span(0,1,List(5, 4, 3),Iran,(country :name (name :op "Iran")),false)),Map(2 -> nucleus, 5 -> "Iran", 1 -> fuel, 4 -> name, 0 -> cycle, 3 -> country),Map(n -> nucleus, c -> cycle, f -> fuel, n2 -> name, c2 -> country))),[Ljava.lang.String;@754777cd,Annotation([Ljava.lang.String;@2b52c0d6,[Ljava.lang.String;@372ea2bc,[Ljava.lang.String;@4cc76301),Annotation([Ljava.lang.String;@2f08c4b,[Ljava.lang.String;@3f19b8b3,[Ledu.cmu.lti.nlp.amr.Dependency;@7de0c6ae),Annotation([Ljava.lang.String;@a486d78,[Ljava.lang.String;@cdc3aae,[Ljava.lang.String;@7ef2d7a6),Annotation([Ljava.lang.String;@5dcbb60,[Ljava.lang.String;@4c36250e,[Ledu.cmu.lti.nlp.amr.Entity;@21526f6c))
AMR:
(c / cycle, domain, f / fuel)
(c / cycle, poss, c2 / country)
(c2 / country, name, n2 / name)
(f / fuel, mod, n / nucleus)
(n2 / name, op, "Iran")

Decoded in 14,773 microseconds
Sentence: Iran will not succumb to international pressure to curb Iran's nuclear projects.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  curb => curb-01
Span 5-6:  international => international
Span 9-10:  Iran => (country :name (name :op "Iran"))
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 11-12:  nuclear => nucleus
Span 6-7:  pressure => pressure-01
Span 12-13:  projects => project

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),projects,project,false), Span(11,12,List(1),nuclear,nucleus,false), Span(9,10,List(4, 3, 2),Iran,(country :name (name :op "Iran")),false), Span(8,9,List(5),curb,curb-01,false), Span(6,7,List(6),pressure,pressure-01,false), Span(5,6,List(7),international,international,false), Span(0,1,List(10, 9, 8),Iran,(country :name (name :op "Iran")),false)),Map(2 -> country, 5 -> curb-01, 8 -> country, 7 -> international, 1 -> nucleus, 4 -> "Iran", 6 -> pressure-01, 9 -> name, 0 -> project, 10 -> "Iran", 3 -> name),Map(n -> nucleus, p2 -> pressure-01, p -> project, n3 -> name, c3 -> country, i -> international, c -> country, c2 -> curb-01, n2 -> name))),[Ljava.lang.String;@49f5c307,Annotation([Ljava.lang.String;@299266e2,[Ljava.lang.String;@5471388b,[Ljava.lang.String;@66ea1466),Annotation([Ljava.lang.String;@1601e47,[Ljava.lang.String;@3bffddff,[Ledu.cmu.lti.nlp.amr.Dependency;@66971f6b),Annotation([Ljava.lang.String;@50687efb,[Ljava.lang.String;@517bd097,[Ljava.lang.String;@142eef62),Annotation([Ljava.lang.String;@4a9cc6cb,[Ljava.lang.String;@5990e6c5,[Ledu.cmu.lti.nlp.amr.Entity;@56e07a08))
AMR:
(c / country, name, n2 / name)
(c2 / curb-01, ARG0, c3 / country)
(c2 / curb-01, ARG1, p / project)
(c3 / country, name, n3 / name)
(n2 / name, op, "Iran")
(n3 / name, op, "Iran")
(p / project, poss, c / country)
(p2 / pressure-01, ARG1, n / nucleus)
(p2 / pressure-01, ARG2, c2 / curb-01)
(p2 / pressure-01, mod, i / international)

Decoded in 243,390 microseconds
Sentence: Iran's nuclear projects are for peaceful purposes.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 2-3:  nuclear => nucleus
Span 6-7:  peaceful => peaceful
Span 3-4:  projects => project
Span 7-8:  purposes => purpose

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),purposes,purpose,false), Span(6,7,List(1),peaceful,peaceful,false), Span(3,4,List(2),projects,project,false), Span(2,3,List(3),nuclear,nucleus,false), Span(0,1,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false)),Map(2 -> project, 5 -> name, 1 -> peaceful, 4 -> country, 6 -> "Iran", 0 -> purpose, 3 -> nucleus),Map(n -> nucleus, p2 -> peaceful, p -> purpose, c -> country, n2 -> name, p3 -> project))),[Ljava.lang.String;@35d6ca49,Annotation([Ljava.lang.String;@1950e8a6,[Ljava.lang.String;@47289387,[Ljava.lang.String;@12cd9150),Annotation([Ljava.lang.String;@114a85c2,[Ljava.lang.String;@f415a95,[Ledu.cmu.lti.nlp.amr.Dependency;@cf65451),Annotation([Ljava.lang.String;@724f138e,[Ljava.lang.String;@37eeec90,[Ljava.lang.String;@32fe9d0a),Annotation([Ljava.lang.String;@c9413d8,[Ljava.lang.String;@64da2a7,[Ledu.cmu.lti.nlp.amr.Entity;@46074492))
AMR:
(c / country, name, n2 / name)
(c / country, op, p2 / peaceful)
(n2 / name, op, "Iran")
(p / purpose, mod, p2 / peaceful)
(p3 / project, mod, n / nucleus)
(p3 / project, poss, c / country)

Decoded in 20,989 microseconds
Sentence: The United States and some European nations believe that Iran's nuclear projects are for the purpose of making nuclear weapons.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "European"))
Spans:
Span 3-4:  and => and
Span 7-8:  believe => believe-01
Span 5-6:  European => (continent :name (name :op "Europe"))
Span 9-10:  Iran => (country :name (name :op "Iran"))
Span 18-19:  making => make-01
Span 6-7:  nations => nation
Span 19-20:  nuclear => nucleus
Span 11-12:  nuclear => nucleus
Span 12-13:  projects => project
Span 16-17:  purpose => purpose-01
Span 4-5:  some => some
Span 1-3:  United States => (country :name (name :op "United" :op "States"))
Span 20-21:  weapons => weapon

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),weapons,weapon,false), Span(19,20,List(1),nuclear,nucleus,false), Span(18,19,List(2),making,make-01,false), Span(16,17,List(3),purpose,purpose-01,false), Span(12,13,List(4),projects,project,false), Span(11,12,List(5),nuclear,nucleus,false), Span(9,10,List(8, 7, 6),Iran,(country :name (name :op "Iran")),false), Span(7,8,List(9),believe,believe-01,false), Span(6,7,List(10),nations,nation,false), Span(5,6,List(13, 12, 11),European,(continent :name (name :op "Europe")),false), Span(4,5,List(14),some,some,false), Span(3,4,List(15),and,and,false), Span(1,3,List(19, 18, 17, 16),United States,(country :name (name :op "United" :op "States")),false)),Map(2 -> make-01, 5 -> nucleus, 12 -> name, 15 -> and, 8 -> "Iran", 18 -> "United", 7 -> name, 17 -> name, 1 -> nucleus, 4 -> project, 11 -> continent, 14 -> some, 6 -> country, 0 -> weapon, 9 -> believe-01, 16 -> country, 19 -> "States", 3 -> purpose-01, 10 -> nation, 13 -> "Europe"),Map(w -> weapon, n -> nucleus, b -> believe-01, p2 -> project, n4 -> nation, s -> some, m -> make-01, p -> purpose-01, c3 -> country, a -> and, n3 -> name, n6 -> name, c -> country, n2 -> nucleus, c2 -> continent, n5 -> name))),[Ljava.lang.String;@d78795,Annotation([Ljava.lang.String;@2c715e84,[Ljava.lang.String;@47428937,[Ljava.lang.String;@3b9d6699),Annotation([Ljava.lang.String;@7caa550,[Ljava.lang.String;@21694e53,[Ledu.cmu.lti.nlp.amr.Dependency;@72b16078),Annotation([Ljava.lang.String;@22c86919,[Ljava.lang.String;@70fab835,[Ljava.lang.String;@1b0a7baf),Annotation([Ljava.lang.String;@62417a16,[Ljava.lang.String;@32057e6,[Ledu.cmu.lti.nlp.amr.Entity;@26be6ca7))
AMR:
(a / and, op, c3 / country)
(a / and, op, n4 / nation)
(b / believe-01, ARG0, a / and)
(b / believe-01, ARG1, p2 / project)
(c / country, name, n3 / name)
(c2 / continent, name, n5 / name)
(c3 / country, name, n6 / name)
(m / make-01, ARG1, w / weapon)
(n2 / nucleus, location, c3 / country)
(n3 / name, op, "Iran")
(n4 / nation, mod, c2 / continent)
(n5 / name, op, "Europe")
(n6 / name, op, "States")
(n6 / name, op, "United")
(p / purpose-01, ARG1, p2 / project)
(p / purpose-01, ARG2, m / make-01)
(p2 / project, poss, c / country)
(s / some, calendar, c3 / country)
(w / weapon, mod, n / nucleus)

Decoded in 922,103 microseconds
Sentence: Several Western Governments and leading arms control experts stated that Iran is attempting to avoid further punishment by the U.N. Security Council.

NER Entity: (country :name (name :op "Western" :op "Governments"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "U.N." :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 3-4:  and => and
Span 5-6:  arms => arm
Span 12-13:  attempting => attempt-01
Span 14-15:  avoid => avoid-01
Span 6-7:  control => control-01
Span 7-8:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 15-16:  further => further
Span 10-11:  Iran => (country :name (name :op "Iran"))
Span 4-5:  leading => lead-02
Span 16-17:  punishment => punish-01
Span 0-1:  Several => several
Span 8-9:  stated => state-01
Span 19-22:  U.N. Security Council => (organization :name (name :op "U.N." :op "Security" :op "Council"))
Span 1-3:  Western Governments => (country :name (name :op "Western" :op "Governments"))

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,22,List(4, 3, 2, 1, 0),U.N. Security Council,(organization :name (name :op "U.N." :op "Security" :op "Council")),false), Span(16,17,List(5),punishment,punish-01,false), Span(15,16,List(6),further,further,false), Span(14,15,List(7),avoid,avoid-01,false), Span(12,13,List(8),attempting,attempt-01,false), Span(10,11,List(11, 10, 9),Iran,(country :name (name :op "Iran")),false), Span(8,9,List(12),stated,state-01,false), Span(7,8,List(15, 14, 13),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(6,7,List(16),control,control-01,false), Span(5,6,List(17),arms,arm,false), Span(4,5,List(18),leading,lead-02,false), Span(3,4,List(19),and,and,false), Span(1,3,List(23, 22, 21, 20),Western Governments,(country :name (name :op "Western" :op "Governments")),false), Span(0,1,List(24),Several,several,false)),Map(2 -> "U.N.", 5 -> punish-01, 12 -> state-01, 8 -> attempt-01, 15 -> expert-41, 21 -> name, 18 -> lead-02, 24 -> several, 7 -> avoid-01, 1 -> name, 17 -> arm, 23 -> "Governments", 4 -> "Council", 11 -> "Iran", 14 -> person, 20 -> country, 6 -> further, 9 -> country, 0 -> organization, 22 -> "Western", 16 -> control-01, 19 -> and, 10 -> name, 3 -> "Security", 13 -> have-org-role-91),Map(e -> expert-41, n -> name, h -> have-org-role-91, s2 -> several, p2 -> person, a3 -> arm, s -> state-01, p -> punish-01, n3 -> name, c3 -> country, a -> avoid-01, a2 -> attempt-01, c -> country, l -> lead-02, f -> further, o -> organization, n2 -> name, c2 -> control-01, a4 -> and))),[Ljava.lang.String;@6ea1bcdc,Annotation([Ljava.lang.String;@759fad4,[Ljava.lang.String;@64712be,[Ljava.lang.String;@53499d85),Annotation([Ljava.lang.String;@30ed9c6c,[Ljava.lang.String;@782a4fff,[Ledu.cmu.lti.nlp.amr.Dependency;@46c670a6),Annotation([Ljava.lang.String;@59fc684e,[Ljava.lang.String;@5ae81e1,[Ljava.lang.String;@2fd1731c),Annotation([Ljava.lang.String;@5ae76500,[Ljava.lang.String;@6063d80a,[Ledu.cmu.lti.nlp.amr.Entity;@1133ec6e))
AMR:
(a / avoid-01, ARG1, p / punish-01)
(a2 / attempt-01, ARG0, c / country)
(a2 / attempt-01, ARG1, a / avoid-01)
(a4 / and, op, a3 / arm)
(a4 / and, op, s / state-01)
(c / country, name, n2 / name)
(c2 / control-01, ARG0, c3 / country)
(c2 / control-01, ARG1, s / state-01)
(c3 / country, name, n3 / name)
(e / expert-41, ARG1, p2 / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p2 / person)
(l / lead-02, ARG1, a3 / arm)
(n / name, op, "Council")
(n / name, op, "Security")
(n / name, op, "U.N.")
(n2 / name, op, "Iran")
(n3 / name, op, "Governments")
(n3 / name, op, "Western")
(o / organization, name, n / name)
(p / punish-01, ARG1, s2 / several)
(p / punish-01, mod, f / further)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, a2 / attempt-01)

Decoded in 1,036,963 microseconds
Sentence: The Western Governments include the United States and France.

NER Entity: (country :name (name :op "Western" :op "Governments"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 7-8:  and => and
Span 8-9:  France => (country :name (name :op "France"))
Span 3-4:  include => include-01
Span 5-7:  United States => (country :name (name :op "United" :op "States"))
Span 1-3:  Western Governments => (country :name (name :op "Western" :op "Governments"))

Langrangian relaxation converged after 48 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(2, 1, 0),France,(country :name (name :op "France")),false), Span(7,8,List(3),and,and,false), Span(5,7,List(7, 6, 5, 4),United States,(country :name (name :op "United" :op "States")),false), Span(3,4,List(8),include,include-01,false), Span(1,3,List(12, 11, 10, 9),Western Governments,(country :name (name :op "Western" :op "Governments")),false)),Map(2 -> "France", 5 -> name, 12 -> "Governments", 8 -> include-01, 7 -> "States", 1 -> name, 4 -> country, 11 -> "Western", 6 -> "United", 0 -> country, 9 -> country, 3 -> and, 10 -> name),Map(n -> name, n3 -> name, c3 -> country, a -> and, i -> include-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@355e34c7,Annotation([Ljava.lang.String;@54709809,[Ljava.lang.String;@2a2da905,[Ljava.lang.String;@24f360b2),Annotation([Ljava.lang.String;@60cf80e7,[Ljava.lang.String;@302fec27,[Ledu.cmu.lti.nlp.amr.Dependency;@770d0ea6),Annotation([Ljava.lang.String;@48c40605,[Ljava.lang.String;@54107f42,[Ljava.lang.String;@1b11ef33),Annotation([Ljava.lang.String;@476aac9,[Ljava.lang.String;@6cea706c,[Ledu.cmu.lti.nlp.amr.Entity;@3bd7f8dc))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(i / include-01, ARG0, c3 / country)
(i / include-01, ARG1, a / and)
(n / name, op, "France")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "Governments")
(n3 / name, op, "Western")

Decoded in 376,287 microseconds
Sentence: The Governments and experts believe that Iran is attempting to --

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 2-3:  and => and
Span 8-9:  attempting => attempt-01
Span 4-5:  believe => believe-01
Span 3-4:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 1-2:  Governments => (government-organization :ARG0-of govern-01)
Span 6-7:  Iran => (country :name (name :op "Iran"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),attempting,attempt-01,false), Span(6,7,List(3, 2, 1),Iran,(country :name (name :op "Iran")),false), Span(4,5,List(4),believe,believe-01,false), Span(3,4,List(7, 6, 5),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(2,3,List(8),and,and,false), Span(1,2,List(10, 9),Governments,(government-organization :ARG0-of govern-01),false)),Map(2 -> name, 5 -> have-org-role-91, 8 -> and, 7 -> expert-41, 1 -> country, 4 -> believe-01, 6 -> person, 9 -> government-organization, 0 -> attempt-01, 10 -> govern-01, 3 -> "Iran"),Map(e -> expert-41, n -> name, h -> have-org-role-91, b -> believe-01, g2 -> govern-01, g -> government-organization, p -> person, a -> attempt-01, a2 -> and, c -> country))),[Ljava.lang.String;@2f2bf0e2,Annotation([Ljava.lang.String;@1eba372c,[Ljava.lang.String;@21ec5d87,[Ljava.lang.String;@25f9407e),Annotation([Ljava.lang.String;@552518c3,[Ljava.lang.String;@1a69561c,[Ledu.cmu.lti.nlp.amr.Dependency;@59aa20b3),Annotation([Ljava.lang.String;@363f6148,[Ljava.lang.String;@4b21844c,[Ljava.lang.String;@1b28f282),Annotation([Ljava.lang.String;@138fe6ec,[Ljava.lang.String;@5e77f0f4,[Ledu.cmu.lti.nlp.amr.Entity;@19b30c92))
AMR:
(a / attempt-01, ARG1, c / country)
(a2 / and, op, a / attempt-01)
(b / believe-01, ARG1, a2 / and)
(c / country, name, n / name)
(e / expert-41, ARG1, p / person)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p / person)
(n / name, op, "Iran")

Decoded in 49,548 microseconds
Sentence: slow the arms control process.

Spans:
Span 2-3:  arms => arm
Span 3-4:  control => control-01
Span 4-5:  process => process
Span 0-1:  slow => slow-41

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),process,process,false), Span(3,4,List(1),control,control-01,false), Span(2,3,List(2),arms,arm,false), Span(0,1,List(3),slow,slow-41,false)),Map(2 -> arm, 1 -> control-01, 0 -> process, 3 -> slow-41),Map(s -> slow-41, p -> process, a -> arm, c -> control-01))),[Ljava.lang.String;@455351c4,Annotation([Ljava.lang.String;@29876704,[Ljava.lang.String;@4816c290,[Ljava.lang.String;@4940809c),Annotation([Ljava.lang.String;@16423501,[Ljava.lang.String;@4efcf8a,[Ledu.cmu.lti.nlp.amr.Dependency;@7a138fc5),Annotation([Ljava.lang.String;@379ab47b,[Ljava.lang.String;@307765b4,[Ljava.lang.String;@4a9e6faf),Annotation([Ljava.lang.String;@2c95ac9e,[Ljava.lang.String;@4e4efc1b,[Ledu.cmu.lti.nlp.amr.Entity;@459f7aa3))
AMR:
(c / control-01, ARG1, a / arm)
(p / process, mod, c / control-01)
(s / slow-41, ARG1, p / process)

Decoded in 10,052 microseconds
Sentence: avoid answering questions about Iran's past treaty violations.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 3-4:  about => about
Span 0-1:  avoid => avoid-01
Span 4-5:  Iran => (country :name (name :op "Iran"))
Span 6-7:  past => past
Span 2-3:  questions => question
Span 7-8:  treaty => treaty
Span 8-9:  violations => violate-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),violations,violate-01,false), Span(7,8,List(1),treaty,treaty,false), Span(6,7,List(2),past,past,false), Span(4,5,List(5, 4, 3),Iran,(country :name (name :op "Iran")),false), Span(3,4,List(6),about,about,false), Span(2,3,List(7),questions,question,false), Span(0,1,List(8),avoid,avoid-01,false)),Map(2 -> past, 5 -> "Iran", 8 -> avoid-01, 7 -> question, 1 -> treaty, 4 -> name, 6 -> about, 0 -> violate-01, 3 -> country),Map(n -> name, q -> question, t -> treaty, v -> violate-01, p -> past, a -> about, a2 -> avoid-01, c -> country))),[Ljava.lang.String;@7cc586a8,Annotation([Ljava.lang.String;@7db534f2,[Ljava.lang.String;@44a2b17b,[Ljava.lang.String;@7a56812e),Annotation([Ljava.lang.String;@2a76b80a,[Ljava.lang.String;@7eb01b12,[Ledu.cmu.lti.nlp.amr.Dependency;@2f4854d6),Annotation([Ljava.lang.String;@61d9efe0,[Ljava.lang.String;@7e70bd39,[Ljava.lang.String;@e6516e),Annotation([Ljava.lang.String;@6de54b40,[Ljava.lang.String;@43ed0ff3,[Ledu.cmu.lti.nlp.amr.Entity;@388ffbc2))
AMR:
(a / about, op, v / violate-01)
(a2 / avoid-01, ARG1, q / question)
(c / country, name, n / name)
(n / name, op, "Iran")
(q / question, location, a / about)
(v / violate-01, ARG0, c / country)
(v / violate-01, ARG1, t / treaty)
(v / violate-01, mod, p / past)

Decoded in 99,989 microseconds
Sentence: Physicist and President of the Institute for Science and International Security David Albright stated that --

NER Entity: (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
NER Entity: (person :name (name :op "David" :op "Albright"))
Spans:
Span 1-2:  and => and
Span 11-13:  David Albright => (person :name (name :op "David" :op "Albright"))
Span 5-11:  Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 2-3:  President => (have-org-role-91 :ARG2 president)
Span 13-14:  stated => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),stated,state-01,false), Span(11,13,List(4, 3, 2, 1),David Albright,(person :name (name :op "David" :op "Albright")),false), Span(5,11,List(12, 11, 10, 9, 8, 7, 6, 5),Institute for Science and International Security,(organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false), Span(2,3,List(14, 13),President,(have-org-role-91 :ARG2 president),false), Span(1,2,List(15),and,and,false)),Map(2 -> name, 5 -> organization, 12 -> "Security", 15 -> and, 8 -> "for", 7 -> "Institute", 1 -> person, 4 -> "Albright", 11 -> "International", 14 -> president, 6 -> name, 0 -> state-01, 9 -> "Science", 3 -> "David", 10 -> "and", 13 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, p2 -> president, s -> state-01, p -> person, a -> and, o -> organization, n2 -> name))),[Ljava.lang.String;@a50b09c,Annotation([Ljava.lang.String;@4da855dd,[Ljava.lang.String;@6691490c,[Ljava.lang.String;@2187fff7),Annotation([Ljava.lang.String;@2e5c7f0b,[Ljava.lang.String;@21d5c1a0,[Ledu.cmu.lti.nlp.amr.Dependency;@4de025bf),Annotation([Ljava.lang.String;@538613b3,[Ljava.lang.String;@1eef9aef,[Ljava.lang.String;@11389053),Annotation([Ljava.lang.String;@5db99216,[Ljava.lang.String;@3ec11999,[Ledu.cmu.lti.nlp.amr.Entity;@5c1bd44c))
AMR:
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Albright")
(n / name, op, "David")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n2 / name, op, "Security")
(n2 / name, op, "and")
(n2 / name, op, "for")
(o / organization, name, n2 / name)
(o / organization, op, s / state-01)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)

Decoded in 49,227 microseconds
Sentence: There is no way to verify Iran's claims.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 8-9:  claims => claim-01
Span 6-7:  Iran => (country :name (name :op "Iran"))
Span 2-3:  no => -
Span 5-6:  verify => verify-01
Span 3-4:  way => way

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),claims,claim-01,false), Span(6,7,List(3, 2, 1),Iran,(country :name (name :op "Iran")),false), Span(5,6,List(4),verify,verify-01,false), Span(3,4,List(5),way,way,false), Span(2,3,List(6),no,-,false)),Map(2 -> name, 5 -> way, 1 -> country, 4 -> verify-01, 6 -> -, 0 -> claim-01, 3 -> "Iran"),Map(w -> way, n -> name, v -> verify-01, - -> -, c -> claim-01, c2 -> country))),[Ljava.lang.String;@9f46d94,Annotation([Ljava.lang.String;@18cc679e,[Ljava.lang.String;@2e77b8cf,[Ljava.lang.String;@2c4ca0f9),Annotation([Ljava.lang.String;@67ef029,[Ljava.lang.String;@7df587ef,[Ledu.cmu.lti.nlp.amr.Dependency;@6e57e95e),Annotation([Ljava.lang.String;@2755d705,[Ljava.lang.String;@56db847e,[Ljava.lang.String;@740abb5),Annotation([Ljava.lang.String;@560cbf1a,[Ljava.lang.String;@5fe8b721,[Ledu.cmu.lti.nlp.amr.Entity;@551a20d6))
AMR:
(c / claim-01, ARG0, c2 / country)
(c / claim-01, ARG1, - / -)
(c2 / country, name, n / name)
(n / name, op, "Iran")
(v / verify-01, ARG0, w / way)
(v / verify-01, ARG1, c / claim-01)

Decoded in 117,889 microseconds
Sentence: The International Atomic Energy Agency has no access to people, documents, sites.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 7-8:  access => access-01
Span 11-12:  documents => document
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 6-7:  no => -
Span 9-10:  people => people
Span 13-14:  sites => site

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),sites,site,false), Span(11,12,List(1),documents,document,false), Span(9,10,List(2),people,people,false), Span(7,8,List(3),access,access-01,false), Span(6,7,List(4),no,-,false), Span(1,5,List(10, 9, 8, 7, 6, 5),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> people, 5 -> organization, 8 -> "Atomic", 7 -> "International", 1 -> document, 4 -> -, 6 -> name, 9 -> "Energy", 0 -> site, 10 -> "Agency", 3 -> access-01),Map(n -> name, s -> site, d -> document, p -> people, a -> access-01, - -> -, o -> organization))),[Ljava.lang.String;@578524c3,Annotation([Ljava.lang.String;@64c2b546,[Ljava.lang.String;@7e094740,[Ljava.lang.String;@7a11c4c7),Annotation([Ljava.lang.String;@4cc547a,[Ljava.lang.String;@7555b920,[Ledu.cmu.lti.nlp.amr.Dependency;@4152d38d),Annotation([Ljava.lang.String;@3591009c,[Ljava.lang.String;@5398edd0,[Ljava.lang.String;@b5cc23a),Annotation([Ljava.lang.String;@5cc5b667,[Ljava.lang.String;@61edc883,[Ledu.cmu.lti.nlp.amr.Entity;@758f4f03))
AMR:
(a / access-01, ARG0, o / organization)
(a / access-01, ARG1, p / people)
(a / access-01, ARG6, - / -)
(d / document, location, s / site)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(p / people, location, d / document)

Decoded in 99,591 microseconds
Sentence: The International Atomic Energy Agency loses the right to ask further questions in the future.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 9-10:  ask => ask-02
Span 10-11:  further => further
Span 14-15:  future => future
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 11-12:  questions => question
Span 7-8:  right => right

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),future,future,false), Span(11,12,List(1),questions,question,false), Span(10,11,List(2),further,further,false), Span(9,10,List(3),ask,ask-02,false), Span(7,8,List(4),right,right,false), Span(1,5,List(10, 9, 8, 7, 6, 5),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> further, 5 -> organization, 8 -> "Atomic", 7 -> "International", 1 -> question, 4 -> right, 6 -> name, 9 -> "Energy", 0 -> future, 10 -> "Agency", 3 -> ask-02),Map(n -> name, q -> question, a -> ask-02, r -> right, f2 -> further, o -> organization, f -> future))),[Ljava.lang.String;@182f1e9a,Annotation([Ljava.lang.String;@6928f576,[Ljava.lang.String;@660e9100,[Ljava.lang.String;@69f63d95),Annotation([Ljava.lang.String;@9cd25ff,[Ljava.lang.String;@27e0f2f5,[Ledu.cmu.lti.nlp.amr.Dependency;@3574e198),Annotation([Ljava.lang.String;@6db66836,[Ljava.lang.String;@db44aa2,[Ljava.lang.String;@2de366bb),Annotation([Ljava.lang.String;@3f093abe,[Ljava.lang.String;@61a002b1,[Ledu.cmu.lti.nlp.amr.Entity;@4eeea57d))
AMR:
(a / ask-02, ARG0, o / organization)
(a / ask-02, ARG1, q / question)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(q / question, location, f / future)
(q / question, mod, f2 / further)
(r / right, prep-to, a / ask-02)

Decoded in 174,957 microseconds
Sentence: The unusual development sets a bad precedent.

Spans:
Span 5-6:  bad => bad
Span 2-3:  development => develop-02
Span 3-4:  sets => set
Span 1-2:  unusual => usual

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),bad,bad,false), Span(3,4,List(1),sets,set,false), Span(2,3,List(2),development,develop-02,false), Span(1,2,List(3),unusual,usual,false)),Map(2 -> develop-02, 1 -> set, 0 -> bad, 3 -> usual),Map(b -> bad, s -> set, d -> develop-02, u -> usual))),[Ljava.lang.String;@780ec4a5,Annotation([Ljava.lang.String;@e24ddd0,[Ljava.lang.String;@6f70f32f,[Ljava.lang.String;@548e76f1),Annotation([Ljava.lang.String;@5aabbb29,[Ljava.lang.String;@72c927f1,[Ledu.cmu.lti.nlp.amr.Dependency;@1ac85b0c),Annotation([Ljava.lang.String;@3dd69f5a,[Ljava.lang.String;@3aa3193a,[Ljava.lang.String;@1ee4730),Annotation([Ljava.lang.String;@59a67c3a,[Ljava.lang.String;@5003041b,[Ledu.cmu.lti.nlp.amr.Entity;@724bade8))
AMR:
(d / develop-02, ARG1, u / usual)
(s / set, mod, b / bad)
(s / set, mod, d / develop-02)

Decoded in 31,051 microseconds
Sentence: The International Atomic Energy Agency may have been tricked because it was eager for a deal.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 9-10:  because => cause-01
Span 15-16:  deal => deal-01
Span 12-13:  eager => eager-41
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 10-11:  it => it
Span 5-6:  may => possible

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),deal,deal-01,false), Span(12,13,List(1),eager,eager-41,false), Span(10,11,List(2),it,it,false), Span(9,10,List(3),because,cause-01,false), Span(5,6,List(4),may,possible,false), Span(1,5,List(10, 9, 8, 7, 6, 5),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> it, 5 -> organization, 8 -> "Atomic", 7 -> "International", 1 -> eager-41, 4 -> possible, 6 -> name, 9 -> "Energy", 0 -> deal-01, 10 -> "Agency", 3 -> cause-01),Map(n -> name, e -> eager-41, d -> deal-01, p -> possible, i -> it, c -> cause-01, o -> organization))),[Ljava.lang.String;@16fb356,Annotation([Ljava.lang.String;@6bc248ed,[Ljava.lang.String;@23a9ba52,[Ljava.lang.String;@ca27722),Annotation([Ljava.lang.String;@70ab80e3,[Ljava.lang.String;@9573b3b,[Ledu.cmu.lti.nlp.amr.Dependency;@67427b69),Annotation([Ljava.lang.String;@78461bc4,[Ljava.lang.String;@544630b7,[Ljava.lang.String;@64f857e7),Annotation([Ljava.lang.String;@1095f122,[Ljava.lang.String;@58c540cf,[Ledu.cmu.lti.nlp.amr.Entity;@3d6300e8))
AMR:
(c / cause-01, ARG0, e / eager-41)
(c / cause-01, ARG1, p / possible)
(d / deal-01, ARG1, o / organization)
(e / eager-41, ARG1, i / it)
(e / eager-41, ARG2, d / deal-01)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)

Decoded in 168,289 microseconds
Sentence: The International Atomic Energy Agency plan announced that --

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 6-7:  announced => announce-01
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 5-6:  plan => plan-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),announced,announce-01,false), Span(5,6,List(1),plan,plan-01,false), Span(1,5,List(7, 6, 5, 4, 3, 2),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> organization, 5 -> "Atomic", 7 -> "Agency", 1 -> plan-01, 4 -> "International", 6 -> "Energy", 0 -> announce-01, 3 -> name),Map(n -> name, p -> plan-01, a -> announce-01, o -> organization))),[Ljava.lang.String;@1b822fcc,Annotation([Ljava.lang.String;@24a1c17f,[Ljava.lang.String;@56102e1c,[Ljava.lang.String;@73511076),Annotation([Ljava.lang.String;@7927bd9f,[Ljava.lang.String;@532721fd,[Ledu.cmu.lti.nlp.amr.Dependency;@410954b),Annotation([Ljava.lang.String;@7fb9f71f,[Ljava.lang.String;@3b366632,[Ljava.lang.String;@51f49060),Annotation([Ljava.lang.String;@514eedd8,[Ljava.lang.String;@617fe9e1,[Ledu.cmu.lti.nlp.amr.Entity;@6970140a))
AMR:
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(p / plan-01, ARG0, o / organization)
(p / plan-01, ARG1, a / announce-01)

Decoded in 16,192 microseconds
Sentence: Iran resolved questions about Iran's past experiments with plutonium with no explanation how.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 3-4:  about => about
Span 7-8:  experiments => experiment-01
Span 4-5:  Iran => (country :name (name :op "Iran"))
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 11-12:  no => -
Span 6-7:  past => past
Span 9-10:  plutonium => plutonium
Span 2-3:  questions => question
Span 1-2:  resolved => resolve-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),no,-,false), Span(9,10,List(1),plutonium,plutonium,false), Span(7,8,List(2),experiments,experiment-01,false), Span(6,7,List(3),past,past,false), Span(4,5,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(3,4,List(7),about,about,false), Span(2,3,List(8),questions,question,false), Span(1,2,List(9),resolved,resolve-01,false), Span(0,1,List(12, 11, 10),Iran,(country :name (name :op "Iran")),false)),Map(2 -> experiment-01, 5 -> name, 12 -> "Iran", 8 -> question, 7 -> about, 1 -> plutonium, 4 -> country, 11 -> name, 6 -> "Iran", 0 -> -, 9 -> resolve-01, 3 -> past, 10 -> country),Map(n -> name, e -> experiment-01, q -> question, p2 -> past, p -> plutonium, a -> about, r -> resolve-01, - -> -, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@1cf2fed4,Annotation([Ljava.lang.String;@3af4e0bf,[Ljava.lang.String;@245a26e1,[Ljava.lang.String;@4d63b624),Annotation([Ljava.lang.String;@466cf502,[Ljava.lang.String;@5b800468,[Ledu.cmu.lti.nlp.amr.Dependency;@2e185cd7),Annotation([Ljava.lang.String;@7e1a1da6,[Ljava.lang.String;@5f7f2382,[Ljava.lang.String;@407cf41),Annotation([Ljava.lang.String;@6815c5f2,[Ljava.lang.String;@46cc127b,[Ledu.cmu.lti.nlp.amr.Entity;@60094a13))
AMR:
(- / -, op, r / resolve-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e / experiment-01, ARG0, c / country)
(e / experiment-01, ARG1, a / about)
(e / experiment-01, location, p / plutonium)
(n / name, op, "Iran")
(n2 / name, op, "Iran")
(r / resolve-01, ARG0, c2 / country)
(r / resolve-01, ARG1, q / question)
(r / resolve-01, time, a / about)
(r / resolve-01, time, p2 / past)

Decoded in 320,440 microseconds
Sentence: Senior Fellow at the International Institute for Strategic Studies mark Fitzpatrick stated that --

NER Entity: (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
NER Entity: (person :name (name :op "Fitzpatrick"))
Spans:
Span 4-9:  International Institute for Strategic Studies => (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
Span 9-10:  mark => mark-01
Span 0-1:  Senior => senior
Span 11-12:  stated => state-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),stated,state-01,false), Span(9,10,List(1),mark,mark-01,false), Span(4,9,List(8, 7, 6, 5, 4, 3, 2),International Institute for Strategic Studies,(organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies")),false), Span(0,1,List(9),Senior,senior,false)),Map(2 -> organization, 5 -> "Institute", 8 -> "Studies", 7 -> "Strategic", 1 -> mark-01, 4 -> "International", 6 -> "for", 9 -> senior, 0 -> state-01, 3 -> name),Map(n -> name, s2 -> senior, s -> state-01, m -> mark-01, o -> organization))),[Ljava.lang.String;@5aceec94,Annotation([Ljava.lang.String;@1c32886a,[Ljava.lang.String;@3a4b0e5d,[Ljava.lang.String;@10b892d5),Annotation([Ljava.lang.String;@3d3f761a,[Ljava.lang.String;@3546d80f,[Ledu.cmu.lti.nlp.amr.Dependency;@579d011c),Annotation([Ljava.lang.String;@3670f00,[Ljava.lang.String;@452e26d0,[Ljava.lang.String;@46ab18da),Annotation([Ljava.lang.String;@790174f2,[Ljava.lang.String;@42257bdd,[Ledu.cmu.lti.nlp.amr.Entity;@7689ddef))
AMR:
(m / mark-01, ARG1, o / organization)
(n / name, op, "Institute")
(n / name, op, "International")
(n / name, op, "Strategic")
(n / name, op, "Studies")
(n / name, op, "for")
(o / organization, name, n / name)
(o / organization, op, s / state-01)
(s / state-01, ARG1, s2 / senior)

Decoded in 66,611 microseconds
Sentence: The International Atomic Energy Agency plan is superficial.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 5-6:  plan => plan-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),plan,plan-01,false), Span(1,5,List(6, 5, 4, 3, 2, 1),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> name, 5 -> "Energy", 1 -> organization, 4 -> "Atomic", 6 -> "Agency", 0 -> plan-01, 3 -> "International"),Map(n -> name, p -> plan-01, o -> organization))),[Ljava.lang.String;@687a762c,Annotation([Ljava.lang.String;@1a2e2935,[Ljava.lang.String;@733c423e,[Ljava.lang.String;@4b629f13),Annotation([Ljava.lang.String;@70925b45,[Ljava.lang.String;@1b9ea3e3,[Ledu.cmu.lti.nlp.amr.Dependency;@aa22f1c),Annotation([Ljava.lang.String;@55e7a35c,[Ljava.lang.String;@37cd92d6,[Ljava.lang.String;@5922ae77),Annotation([Ljava.lang.String;@4263b080,[Ljava.lang.String;@2af616d3,[Ledu.cmu.lti.nlp.amr.Entity;@71f67a79))
AMR:
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(o / organization, name, n / name)
(p / plan-01, ARG0, o / organization)

Decoded in 13,405 microseconds
Sentence: The International Atomic Energy Agency plan draws out negotiations for many months.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Spans:
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 10-11:  many => many
Span 11-12:  months => (temporal-quantity :unit month)
Span 8-9:  negotiations => negotiate-01
Span 7-8:  out => out
Span 5-6:  plan => plan-01

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),months,(temporal-quantity :unit month),false), Span(10,11,List(2),many,many,false), Span(8,9,List(3),negotiations,negotiate-01,false), Span(7,8,List(4),out,out,false), Span(5,6,List(5),plan,plan-01,false), Span(1,5,List(11, 10, 9, 8, 7, 6),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> many, 5 -> plan-01, 8 -> "International", 7 -> name, 1 -> month, 11 -> "Agency", 4 -> out, 6 -> organization, 9 -> "Atomic", 0 -> temporal-quantity, 10 -> "Energy", 3 -> negotiate-01),Map(n -> negotiate-01, t -> temporal-quantity, m2 -> many, m -> month, p -> plan-01, o2 -> organization, o -> out, n2 -> name))),[Ljava.lang.String;@3deb2326,Annotation([Ljava.lang.String;@62d363ab,[Ljava.lang.String;@7889a1ac,[Ljava.lang.String;@3aee3976),Annotation([Ljava.lang.String;@5ef8df1e,[Ljava.lang.String;@27cf3151,[Ledu.cmu.lti.nlp.amr.Dependency;@127e70c5),Annotation([Ljava.lang.String;@5910de75,[Ljava.lang.String;@4108fa66,[Ljava.lang.String;@1f130eaf),Annotation([Ljava.lang.String;@7e0aadd0,[Ljava.lang.String;@21362712,[Ledu.cmu.lti.nlp.amr.Entity;@27eb3298))
AMR:
(m / month, quant, m2 / many)
(n / negotiate-01, ARG1, t / temporal-quantity)
(n / negotiate-01, ARG6, o / out)
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(o2 / organization, name, n2 / name)
(p / plan-01, ARG0, o2 / organization)
(p / plan-01, ARG1, o / out)
(t / temporal-quantity, unit, m / month)

Decoded in 252,974 microseconds
Sentence: The International Atomic Energy Agency plan could leave the International Atomic Energy Agency with incomplete and misleading answers from Iran.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 15-16:  and => and
Span 6-7:  could => possible
Span 14-15:  incomplete => (complete-01 :polarity -)
Span 9-13:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 19-20:  Iran => (country :name (name :op "Iran"))
Span 7-8:  leave => leave-01
Span 5-6:  plan => plan-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(2, 1, 0),Iran,(country :name (name :op "Iran")),false), Span(15,16,List(3),and,and,false), Span(14,15,List(5, 4),incomplete,(complete-01 :polarity -),false), Span(9,13,List(11, 10, 9, 8, 7, 6),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(7,8,List(12),leave,leave-01,false), Span(6,7,List(13),could,possible,false), Span(5,6,List(14),plan,plan-01,false), Span(1,5,List(20, 19, 18, 17, 16, 15),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> "Iran", 5 -> -, 12 -> leave-01, 15 -> organization, 8 -> "International", 18 -> "Atomic", 7 -> name, 17 -> "International", 1 -> name, 4 -> complete-01, 11 -> "Agency", 14 -> plan-01, 20 -> "Agency", 6 -> organization, 0 -> country, 9 -> "Atomic", 16 -> name, 19 -> "Energy", 3 -> and, 10 -> "Energy", 13 -> possible),Map(n -> name, p2 -> plan-01, p -> possible, n3 -> name, a -> and, o2 -> organization, l -> leave-01, c -> country, o -> organization, n2 -> name, c2 -> complete-01))),[Ljava.lang.String;@200a26bc,Annotation([Ljava.lang.String;@bc57b40,[Ljava.lang.String;@1b5bc39d,[Ljava.lang.String;@655a5d9c),Annotation([Ljava.lang.String;@1494b84d,[Ljava.lang.String;@34abdee4,[Ledu.cmu.lti.nlp.amr.Dependency;@71a9b4c7),Annotation([Ljava.lang.String;@4628b1d3,[Ljava.lang.String;@77cf3f8b,[Ljava.lang.String;@1df98368),Annotation([Ljava.lang.String;@21ca139c,[Ljava.lang.String;@226f885f,[Ledu.cmu.lti.nlp.amr.Entity;@2cd2c8fe))
AMR:
(a / and, op, c2 / complete-01)
(c / country, name, n / name)
(c2 / complete-01, ARG1, c / country)
(c2 / complete-01, polarity, -)
(l / leave-01, ARG0, p2 / plan-01)
(l / leave-01, ARG1, o / organization)
(n / name, op, "Iran")
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(n3 / name, op, "Agency")
(n3 / name, op, "Atomic")
(n3 / name, op, "Energy")
(n3 / name, op, "International")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(p / possible, domain, l / leave-01)
(p2 / plan-01, ARG0, o2 / organization)
(p2 / plan-01, ARG1, a / and)

Decoded in 276,806 microseconds
Sentence: The International Institute for Strategic Studies is located in London.

NER Entity: (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
NER Entity: (country :name (name :op "London"))
NER Entity: (country :name (name :op "London"))
Spans:
Span 1-6:  International Institute for Strategic Studies => (organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies"))
Span 7-8:  located => locate-01
Span 9-10:  London => (city :name (name :op "London"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(2, 1, 0),London,(city :name (name :op "London")),false), Span(7,8,List(3),located,locate-01,false), Span(1,6,List(10, 9, 8, 7, 6, 5, 4),International Institute for Strategic Studies,(organization :name (name :op "International" :op "Institute" :op "for" :op "Strategic" :op "Studies")),false)),Map(2 -> "London", 5 -> name, 8 -> "for", 7 -> "Institute", 1 -> name, 4 -> organization, 6 -> "International", 9 -> "Strategic", 0 -> city, 10 -> "Studies", 3 -> locate-01),Map(n -> name, l -> locate-01, c -> city, o -> organization, n2 -> name))),[Ljava.lang.String;@7d61eccf,Annotation([Ljava.lang.String;@cc6460c,[Ljava.lang.String;@52350abb,[Ljava.lang.String;@681aad3b),Annotation([Ljava.lang.String;@1a6f2363,[Ljava.lang.String;@2427e004,[Ledu.cmu.lti.nlp.amr.Dependency;@5ebd56e9),Annotation([Ljava.lang.String;@63f34b70,[Ljava.lang.String;@641856,[Ljava.lang.String;@1b58ff9e),Annotation([Ljava.lang.String;@2f66e802,[Ljava.lang.String;@56b78e55,[Ledu.cmu.lti.nlp.amr.Entity;@76318a7d))
AMR:
(c / city, name, n / name)
(l / locate-01, ARG1, o / organization)
(l / locate-01, location, c / city)
(n / name, op, "London")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Strategic")
(n2 / name, op, "Studies")
(n2 / name, op, "for")
(o / organization, name, n2 / name)

Decoded in 23,697 microseconds
Sentence: Plutonium is a material that can be used to make nuclear weapons.

Spans:
Span 5-6:  can => possible
Span 9-10:  make => make-01
Span 3-4:  material => material
Span 10-11:  nuclear => nucleus
Span 0-1:  Plutonium => plutonium
Span 7-8:  used => use-01
Span 11-12:  weapons => weapon

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),weapons,weapon,false), Span(10,11,List(1),nuclear,nucleus,false), Span(9,10,List(2),make,make-01,false), Span(7,8,List(3),used,use-01,false), Span(5,6,List(4),can,possible,false), Span(3,4,List(5),material,material,false), Span(0,1,List(6),Plutonium,plutonium,false)),Map(2 -> make-01, 5 -> material, 1 -> nucleus, 4 -> possible, 6 -> plutonium, 0 -> weapon, 3 -> use-01),Map(n -> nucleus, w -> weapon, m2 -> material, p2 -> plutonium, m -> make-01, p -> possible, u -> use-01))),[Ljava.lang.String;@2a492f2a,Annotation([Ljava.lang.String;@3277e499,[Ljava.lang.String;@585811a4,[Ljava.lang.String;@22c01ab0),Annotation([Ljava.lang.String;@411341bd,[Ljava.lang.String;@4c4d362a,[Ledu.cmu.lti.nlp.amr.Dependency;@5400db36),Annotation([Ljava.lang.String;@76b74e9c,[Ljava.lang.String;@2d72f75e,[Ljava.lang.String;@8ab78bc),Annotation([Ljava.lang.String;@5aa0dbf4,[Ljava.lang.String;@16afbd92,[Ledu.cmu.lti.nlp.amr.Entity;@2c5d601e))
AMR:
(m / make-01, ARG1, w / weapon)
(m2 / material, domain, p2 / plutonium)
(p / possible, domain, u / use-01)
(u / use-01, ARG1, m2 / material)
(u / use-01, ARG2, m / make-01)
(w / weapon, mod, n / nucleus)

Decoded in 92,242 microseconds
Sentence: The Institute for Science and International Security is a private research organization located in Washington.

NER Entity: (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
NER Entity: (country :name (name :op "Washington"))
NER Entity: (country :name (name :op "Washington"))
Spans:
Span 1-7:  Institute for Science and International Security => (organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security"))
Span 12-13:  located => locate-01
Span 11-12:  organization => organization
Span 9-10:  private => private
Span 10-11:  research => research-01
Span 14-15:  Washington => (city :name (name :op "Washington"))

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(2, 1, 0),Washington,(city :name (name :op "Washington")),false), Span(12,13,List(3),located,locate-01,false), Span(11,12,List(4),organization,organization,false), Span(10,11,List(5),research,research-01,false), Span(9,10,List(6),private,private,false), Span(1,7,List(14, 13, 12, 11, 10, 9, 8, 7),Institute for Science and International Security,(organization :name (name :op "Institute" :op "for" :op "Science" :op "and" :op "International" :op "Security")),false)),Map(2 -> "Washington", 5 -> research-01, 12 -> "and", 8 -> name, 7 -> organization, 1 -> name, 4 -> organization, 11 -> "Science", 14 -> "Security", 6 -> private, 0 -> city, 9 -> "Institute", 3 -> locate-01, 10 -> "for", 13 -> "International"),Map(n -> name, p -> private, o2 -> organization, r -> research-01, l -> locate-01, c -> city, o -> organization, n2 -> name))),[Ljava.lang.String;@7fe083b1,Annotation([Ljava.lang.String;@23c388c2,[Ljava.lang.String;@486be205,[Ljava.lang.String;@f713686),Annotation([Ljava.lang.String;@74f7d1d2,[Ljava.lang.String;@4b4dd216,[Ledu.cmu.lti.nlp.amr.Dependency;@5ca17ab0),Annotation([Ljava.lang.String;@5a62b2a4,[Ljava.lang.String;@1051817b,[Ljava.lang.String;@35293c05),Annotation([Ljava.lang.String;@620aa4ea,[Ljava.lang.String;@2db2dd9d,[Ledu.cmu.lti.nlp.amr.Entity;@3174cb09))
AMR:
(c / city, name, n / name)
(l / locate-01, ARG1, o / organization)
(l / locate-01, ARG6, o2 / organization)
(l / locate-01, location, c / city)
(n / name, op, "Washington")
(n2 / name, op, "Institute")
(n2 / name, op, "International")
(n2 / name, op, "Science")
(n2 / name, op, "Security")
(n2 / name, op, "and")
(n2 / name, op, "for")
(o / organization, mod, r / research-01)
(o2 / organization, name, n2 / name)
(r / research-01, ARG1, p / private)

Decoded in 285,891 microseconds
Sentence: The International Atomic Energy Agency is based in Vienna.

NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Vienna"))
NER Entity: (country :name (name :op "Vienna"))
Spans:
Span 6-7:  based => base-01
Span 1-5:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 8-9:  Vienna => (city :name (name :op "Vienna"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(2, 1, 0),Vienna,(city :name (name :op "Vienna")),false), Span(6,7,List(3),based,base-01,false), Span(1,5,List(9, 8, 7, 6, 5, 4),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false)),Map(2 -> "Vienna", 5 -> name, 8 -> "Energy", 7 -> "Atomic", 1 -> name, 4 -> organization, 6 -> "International", 9 -> "Agency", 0 -> city, 3 -> base-01),Map(n -> name, b -> base-01, c -> city, o -> organization, n2 -> name))),[Ljava.lang.String;@4d411036,Annotation([Ljava.lang.String;@7adbd080,[Ljava.lang.String;@41beb473,[Ljava.lang.String;@560513ce),Annotation([Ljava.lang.String;@13006998,[Ljava.lang.String;@37fbe4a8,[Ledu.cmu.lti.nlp.amr.Dependency;@352c308),Annotation([Ljava.lang.String;@7d373bcf,[Ljava.lang.String;@6d6bc158,[Ljava.lang.String;@5dda6f9),Annotation([Ljava.lang.String;@10027fc9,[Ljava.lang.String;@54afd745,[Ledu.cmu.lti.nlp.amr.Entity;@677dbd89))
AMR:
(b / base-01, ARG1, o / organization)
(b / base-01, location, c / city)
(c / city, name, n / name)
(n / name, op, "Vienna")
(n2 / name, op, "Agency")
(n2 / name, op, "Atomic")
(n2 / name, op, "Energy")
(n2 / name, op, "International")
(o / organization, name, n2 / name)

Decoded in 25,286 microseconds
Sentence: 2007-11-15

mkDayMonthYear(2007-11-15,15,11,2007)
mkDayMonthYear(2007-11-15,15,11,2007)
Spans:
Span 0-1:  2007-11-15 => (date-entity :day 15 :month 11 :year 2007)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2007-11-15,(date-entity :day 15 :month 11 :year 2007),false)),Map(2 -> 11, 1 -> 15, 0 -> date-entity, 3 -> 2007),Map(2 -> 2007, 12 -> 11, d -> date-entity, 1 -> 15))),[Ljava.lang.String;@fff25f1,Annotation([Ljava.lang.String;@c00fff0,[Ljava.lang.String;@263f04ca,[Ljava.lang.String;@2ca47471),Annotation([Ljava.lang.String;@5a021cb9,[Ljava.lang.String;@51768776,[Ledu.cmu.lti.nlp.amr.Dependency;@f31c0c6),Annotation([Ljava.lang.String;@b93aad,[Ljava.lang.String;@4a9419d7,[Ljava.lang.String;@2f3c6ac4),Annotation([Ljava.lang.String;@2e8ab815,[Ljava.lang.String;@67af833b,[Ledu.cmu.lti.nlp.amr.Entity;@d1f74b8))
AMR:
(d / date-entity, day, 1 / 15)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 2 / 2007)

Decoded in 6,984 microseconds
Sentence: Iran (Islamic Republic of) (IR)

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Islamic" :op "Republic" :op "of"))
NER Entity: (organization :name (name :op "IR"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 2-5:  Islamic Republic of => (country :name (name :op "Islamic" :op "Republic" :op "of"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,5,List(4, 3, 2, 1, 0),Islamic Republic of,(country :name (name :op "Islamic" :op "Republic" :op "of")),false), Span(0,1,List(7, 6, 5),Iran,(country :name (name :op "Iran")),false)),Map(2 -> "Islamic", 5 -> country, 7 -> "Iran", 1 -> name, 4 -> "of", 6 -> name, 0 -> country, 3 -> "Republic"),Map(n -> name, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@41394595,Annotation([Ljava.lang.String;@3a0807b7,[Ljava.lang.String;@21a5fd96,[Ljava.lang.String;@5769e7ae),Annotation([Ljava.lang.String;@5c77053b,[Ljava.lang.String;@26b894bd,[Ledu.cmu.lti.nlp.amr.Dependency;@287f94b1),Annotation([Ljava.lang.String;@30b34287,[Ljava.lang.String;@5489c777,[Ljava.lang.String;@3676ac27),Annotation([Ljava.lang.String;@62f87c44,[Ljava.lang.String;@48f5bde6,[Ledu.cmu.lti.nlp.amr.Entity;@525d79f0))
AMR:
(c / country, calendar, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Islamic")
(n / name, op, "Republic")
(n / name, op, "of")
(n2 / name, op, "Iran")

Decoded in 15,518 microseconds
Sentence: proliferation; international; business

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  business => business
Span 2-3:  international => international
Span 0-1:  proliferation => proliferate-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),business,business,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),international,international,false), Span(1,2,List(3),;,and,false), Span(0,1,List(4),proliferation,proliferate-01,false)),Map(2 -> international, 1 -> and, 4 -> proliferate-01, 0 -> business, 3 -> and),Map(b -> business, p -> proliferate-01, a -> and, a2 -> and, i -> international))),[Ljava.lang.String;@5149f008,Annotation([Ljava.lang.String;@7072bc39,[Ljava.lang.String;@158d255c,[Ljava.lang.String;@2ca65ce4),Annotation([Ljava.lang.String;@327120c8,[Ljava.lang.String;@5707c1cb,[Ledu.cmu.lti.nlp.amr.Dependency;@2b5cb9b2),Annotation([Ljava.lang.String;@35038141,[Ljava.lang.String;@ecf9049,[Ljava.lang.String;@672f11c2),Annotation([Ljava.lang.String;@2970a5bc,[Ljava.lang.String;@50305a,[Ledu.cmu.lti.nlp.amr.Entity;@72efb5c1))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, b / business)
(a2 / and, op, i / international)
(a2 / and, op, p / proliferate-01)

Decoded in 13,025 microseconds
Sentence: A list from the Nuclear Suppliers Group shows that Iran has been denied purchases of nuclear-related materials approximately 75 times since 1998 because of suspicions the purchases could have been used for building bombs.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 23-24:  1998 => (date-entity :year 1998)
Span 20-21:  75 => 75
Span 19-20:  approximately => approximately
Span 24-25:  because => cause-01
Span 35-36:  bombs => bomb
Span 34-35:  building => build-01
Span 29-30:  could => possible
Span 12-13:  denied => deny-01
Span 9-10:  Iran => (country :name (name :op "Iran"))
Span 1-2:  list => list-01
Span 18-19:  materials => material
Span 15-16:  nuclear => nucleus
Span 4-7:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 28-29:  purchases => purchase-01
Span 13-14:  purchases => purchase-01
Span 17-18:  related => relate-01
Span 22-23:  since => since
Span 26-27:  suspicions => suspect-01
Span 32-33:  used => use-01

Langrangian relaxation converged after 76 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),bombs,bomb,false), Span(34,35,List(1),building,build-01,false), Span(32,33,List(2),used,use-01,false), Span(29,30,List(3),could,possible,false), Span(28,29,List(4),purchases,purchase-01,false), Span(26,27,List(5),suspicions,suspect-01,false), Span(24,25,List(6),because,cause-01,false), Span(23,24,List(8, 7),1998,(date-entity :year 1998),false), Span(22,23,List(9),since,since,false), Span(20,21,List(10),75,75,false), Span(19,20,List(11),approximately,approximately,false), Span(18,19,List(12),materials,material,false), Span(17,18,List(13),related,relate-01,false), Span(15,16,List(14),nuclear,nucleus,false), Span(13,14,List(15),purchases,purchase-01,false), Span(12,13,List(16),denied,deny-01,false), Span(9,10,List(19, 18, 17),Iran,(country :name (name :op "Iran")),false), Span(4,7,List(24, 23, 22, 21, 20),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(1,2,List(25),list,list-01,false)),Map(2 -> use-01, 5 -> suspect-01, 12 -> material, 8 -> 1998, 15 -> purchase-01, 21 -> name, 18 -> name, 24 -> "Group", 7 -> date-entity, 1 -> build-01, 17 -> country, 23 -> "Suppliers", 4 -> purchase-01, 11 -> approximately, 14 -> nucleus, 20 -> organization, 6 -> cause-01, 9 -> since, 0 -> bomb, 22 -> "Nuclear", 16 -> deny-01, 19 -> "Iran", 10 -> 75, 3 -> possible, 25 -> list-01, 13 -> relate-01),Map(n -> nucleus, s2 -> since, b -> bomb, b2 -> build-01, p2 -> purchase-01, s -> suspect-01, d -> date-entity, 7 -> 75, m -> material, 1 -> 1998, p -> possible, n3 -> name, a -> approximately, d2 -> deny-01, r -> relate-01, c -> cause-01, l -> list-01, u -> use-01, o -> organization, p3 -> purchase-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@6d511b5f,Annotation([Ljava.lang.String;@41200e0c,[Ljava.lang.String;@40f33492,[Ljava.lang.String;@4fbdc0f0),Annotation([Ljava.lang.String;@2ad3a1bb,[Ljava.lang.String;@6bc28a83,[Ledu.cmu.lti.nlp.amr.Dependency;@324c64cd),Annotation([Ljava.lang.String;@13579834,[Ljava.lang.String;@24be2d9c,[Ljava.lang.String;@5bd73d1a),Annotation([Ljava.lang.String;@aec50a1,[Ljava.lang.String;@2555fff0,[Ledu.cmu.lti.nlp.amr.Entity;@70d2e40b))
AMR:
(a / approximately, op, 7 / 75)
(b2 / build-01, ARG1, b / bomb)
(c / cause-01, ARG0, p / possible)
(c / cause-01, ARG1, d2 / deny-01)
(c2 / country, name, n2 / name)
(d / date-entity, year, 1 / 1998)
(d2 / deny-01, ARG0, o / organization)
(d2 / deny-01, ARG1, p3 / purchase-01)
(d2 / deny-01, time, d / date-entity)
(l / list-01, ARG1, o / organization)
(n2 / name, op, "Iran")
(n3 / name, op, "Group")
(n3 / name, op, "Nuclear")
(n3 / name, op, "Suppliers")
(o / organization, name, n3 / name)
(p2 / purchase-01, ARG1, 7 / 75)
(p3 / purchase-01, ARG0, c2 / country)
(p3 / purchase-01, ARG1, m / material)
(r / relate-01, ARG1, m / material)
(r / relate-01, ARG2, n / nucleus)
(s / suspect-01, ARG1, c / cause-01)
(s2 / since, op, d / date-entity)
(u / use-01, ARG1, p2 / purchase-01)
(u / use-01, ARG2, b / bomb)
(u / use-01, mod, p / possible)

Decoded in 2,641,579 microseconds
Sentence: A list from the Nuclear Suppliers Group shows that Iran has been denied purchases of nuclear-related materials approximately 75 times since 1998 because of suspicions the purchases could have been used for building bombs.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 23-24:  1998 => (date-entity :year 1998)
Span 20-21:  75 => 75
Span 19-20:  approximately => approximately
Span 24-25:  because => cause-01
Span 35-36:  bombs => bomb
Span 34-35:  building => build-01
Span 29-30:  could => possible
Span 12-13:  denied => deny-01
Span 9-10:  Iran => (country :name (name :op "Iran"))
Span 1-2:  list => list-01
Span 18-19:  materials => material
Span 15-16:  nuclear => nucleus
Span 4-7:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 28-29:  purchases => purchase-01
Span 13-14:  purchases => purchase-01
Span 17-18:  related => relate-01
Span 22-23:  since => since
Span 26-27:  suspicions => suspect-01
Span 32-33:  used => use-01

Langrangian relaxation converged after 76 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),bombs,bomb,false), Span(34,35,List(1),building,build-01,false), Span(32,33,List(2),used,use-01,false), Span(29,30,List(3),could,possible,false), Span(28,29,List(4),purchases,purchase-01,false), Span(26,27,List(5),suspicions,suspect-01,false), Span(24,25,List(6),because,cause-01,false), Span(23,24,List(8, 7),1998,(date-entity :year 1998),false), Span(22,23,List(9),since,since,false), Span(20,21,List(10),75,75,false), Span(19,20,List(11),approximately,approximately,false), Span(18,19,List(12),materials,material,false), Span(17,18,List(13),related,relate-01,false), Span(15,16,List(14),nuclear,nucleus,false), Span(13,14,List(15),purchases,purchase-01,false), Span(12,13,List(16),denied,deny-01,false), Span(9,10,List(19, 18, 17),Iran,(country :name (name :op "Iran")),false), Span(4,7,List(24, 23, 22, 21, 20),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(1,2,List(25),list,list-01,false)),Map(2 -> use-01, 5 -> suspect-01, 12 -> material, 8 -> 1998, 15 -> purchase-01, 21 -> name, 18 -> name, 24 -> "Group", 7 -> date-entity, 1 -> build-01, 17 -> country, 23 -> "Suppliers", 4 -> purchase-01, 11 -> approximately, 14 -> nucleus, 20 -> organization, 6 -> cause-01, 9 -> since, 0 -> bomb, 22 -> "Nuclear", 16 -> deny-01, 19 -> "Iran", 10 -> 75, 3 -> possible, 25 -> list-01, 13 -> relate-01),Map(n -> nucleus, s2 -> since, b -> bomb, b2 -> build-01, p2 -> purchase-01, s -> suspect-01, d -> date-entity, 7 -> 75, m -> material, 1 -> 1998, p -> possible, n3 -> name, a -> approximately, d2 -> deny-01, r -> relate-01, c -> cause-01, l -> list-01, u -> use-01, o -> organization, p3 -> purchase-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@120f38e6,Annotation([Ljava.lang.String;@7a0e1b5e,[Ljava.lang.String;@702ed190,[Ljava.lang.String;@173b9122),Annotation([Ljava.lang.String;@7c18432b,[Ljava.lang.String;@7646731d,[Ledu.cmu.lti.nlp.amr.Dependency;@70e29e14),Annotation([Ljava.lang.String;@3b1bb3ab,[Ljava.lang.String;@5a4bef8,[Ljava.lang.String;@40bffbca),Annotation([Ljava.lang.String;@2449cff7,[Ljava.lang.String;@42a9a63e,[Ledu.cmu.lti.nlp.amr.Entity;@62da83ed))
AMR:
(a / approximately, op, 7 / 75)
(b2 / build-01, ARG1, b / bomb)
(c / cause-01, ARG0, p / possible)
(c / cause-01, ARG1, d2 / deny-01)
(c2 / country, name, n2 / name)
(d / date-entity, year, 1 / 1998)
(d2 / deny-01, ARG0, o / organization)
(d2 / deny-01, ARG1, p3 / purchase-01)
(d2 / deny-01, time, d / date-entity)
(l / list-01, ARG1, o / organization)
(n2 / name, op, "Iran")
(n3 / name, op, "Group")
(n3 / name, op, "Nuclear")
(n3 / name, op, "Suppliers")
(o / organization, name, n3 / name)
(p2 / purchase-01, ARG1, 7 / 75)
(p3 / purchase-01, ARG0, c2 / country)
(p3 / purchase-01, ARG1, m / material)
(r / relate-01, ARG1, m / material)
(r / relate-01, ARG2, n / nucleus)
(s / suspect-01, ARG1, c / cause-01)
(s2 / since, op, d / date-entity)
(u / use-01, ARG1, p2 / purchase-01)
(u / use-01, ARG2, b / bomb)
(u / use-01, mod, p / possible)

Decoded in 2,649,241 microseconds
Sentence: The 45-nation Nuclear Suppliers Group is an offshoot of the Nuclear Nonproliferation Treaty and is charged with monitoring international trade to ensure that nuclear technology transferred for peaceful purposes is not directed to military use.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
Spans:
Span 2-5:  - nation Nuclear => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 1-2:  45 => 45
Span 15-16:  and => and
Span 17-18:  charged => charge-05
Span 33-34:  directed => direct-01
Span 23-24:  ensure => ensure-01
Span 6-7:  Group => group
Span 20-21:  international => international
Span 35-36:  military => military
Span 19-20:  monitoring => monitor-01
Span 25-26:  nuclear => nucleus
Span 10-13:  of the Nuclear => (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
Span 29-30:  peaceful => peaceful
Span 30-31:  purposes => purpose
Span 26-27:  technology => technology
Span 21-22:  trade => trade-01
Span 27-28:  transferred => transfer-01
Span 14-15:  Treaty => treaty
Span 36-37:  use => use-01

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),use,use-01,false), Span(35,36,List(1),military,military,false), Span(33,34,List(2),directed,direct-01,false), Span(30,31,List(3),purposes,purpose,false), Span(29,30,List(4),peaceful,peaceful,false), Span(27,28,List(5),transferred,transfer-01,false), Span(26,27,List(6),technology,technology,false), Span(25,26,List(7),nuclear,nucleus,false), Span(23,24,List(8),ensure,ensure-01,false), Span(21,22,List(9),trade,trade-01,false), Span(20,21,List(10),international,international,false), Span(19,20,List(11),monitoring,monitor-01,false), Span(17,18,List(12),charged,charge-05,false), Span(15,16,List(13),and,and,false), Span(14,15,List(14),Treaty,treaty,false), Span(10,13,List(19, 18, 17, 16, 15),of the Nuclear,(organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty")),false), Span(6,7,List(20),Group,group,false), Span(2,5,List(25, 24, 23, 22, 21),- nation Nuclear,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(1,2,List(26),45,45,false)),Map(2 -> direct-01, 5 -> transfer-01, 12 -> charge-05, 8 -> ensure-01, 15 -> organization, 21 -> organization, 18 -> "Nonproliferation", 24 -> "Suppliers", 7 -> nucleus, 1 -> military, 17 -> "Nuclear", 23 -> "Nuclear", 26 -> 45, 4 -> peaceful, 11 -> monitor-01, 14 -> treaty, 20 -> group, 6 -> technology, 9 -> trade-01, 0 -> use-01, 22 -> name, 16 -> name, 19 -> "Treaty", 10 -> international, 3 -> purpose, 25 -> "Group", 13 -> and),Map(e -> ensure-01, n -> nucleus, t4 -> treaty, t -> transfer-01, m2 -> monitor-01, p2 -> peaceful, m -> military, d -> direct-01, t3 -> trade-01, g -> group, p -> purpose, 4 -> 45, n3 -> name, a -> and, o2 -> organization, t2 -> technology, i -> international, c -> charge-05, u -> use-01, o -> organization, n2 -> name))),[Ljava.lang.String;@5d8445d7,Annotation([Ljava.lang.String;@37d80fe7,[Ljava.lang.String;@384fc774,[Ljava.lang.String;@e3cee7b),Annotation([Ljava.lang.String;@71e9a896,[Ljava.lang.String;@6b9267b,[Ledu.cmu.lti.nlp.amr.Dependency;@408b35bf),Annotation([Ljava.lang.String;@29ad44e3,[Ljava.lang.String;@15bcf458,[Ljava.lang.String;@5af9926a),Annotation([Ljava.lang.String;@43c67247,[Ljava.lang.String;@fac80,[Ledu.cmu.lti.nlp.amr.Entity;@726386ed))
AMR:
(4 / 45, op, o2 / organization)
(a / and, mod, o2 / organization)
(a / and, op, c / charge-05)
(c / charge-05, ARG0, g / group)
(c / charge-05, ARG1, o / organization)
(c / charge-05, ARG2, m2 / monitor-01)
(d / direct-01, ARG1, t2 / technology)
(d / direct-01, ARG2, m / military)
(e / ensure-01, ARG1, d / direct-01)
(m2 / monitor-01, ARG1, t3 / trade-01)
(n2 / name, op, "Nonproliferation")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Treaty")
(n3 / name, op, "Group")
(n3 / name, op, "Nuclear")
(n3 / name, op, "Suppliers")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(p / purpose, mod, p2 / peaceful)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, ARG2, p / purpose)
(t3 / trade-01, ARG1, e / ensure-01)
(t3 / trade-01, ARG2, t4 / treaty)
(t3 / trade-01, mod, i / international)
(t3 / trade-01, mod, n / nucleus)
(u / use-01, ARG1, p / purpose)

Decoded in 1,301,267 microseconds
Sentence: The Nuclear Suppliers Group is composed of technologically advanced countries.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 8-9:  advanced => advance-01
Span 5-6:  composed => compose-01
Span 9-10:  countries => country
Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),countries,country,false), Span(8,9,List(1),advanced,advance-01,false), Span(5,6,List(2),composed,compose-01,false), Span(1,4,List(7, 6, 5, 4, 3),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> compose-01, 5 -> "Nuclear", 7 -> "Group", 1 -> advance-01, 4 -> name, 6 -> "Suppliers", 0 -> country, 3 -> organization),Map(n -> name, a -> advance-01, c -> country, o -> organization, c2 -> compose-01))),[Ljava.lang.String;@649f2009,Annotation([Ljava.lang.String;@14bb2297,[Ljava.lang.String;@69adf72c,[Ljava.lang.String;@797501a),Annotation([Ljava.lang.String;@1a15b789,[Ljava.lang.String;@57f791c6,[Ledu.cmu.lti.nlp.amr.Dependency;@51650883),Annotation([Ljava.lang.String;@6c4f9535,[Ljava.lang.String;@5bd1ceca,[Ljava.lang.String;@30c31dd7),Annotation([Ljava.lang.String;@499b2a5c,[Ljava.lang.String;@596df867,[Ledu.cmu.lti.nlp.amr.Entity;@c1fca1e))
AMR:
(a / advance-01, ARG1, c / country)
(c2 / compose-01, ARG1, o / organization)
(c2 / compose-01, ARG2, c / country)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)

Decoded in 133,641 microseconds
Sentence: According to the Nuclear Suppliers Group's mission statement countries act on an individual basis to block trades that violate export controls devised to maintain international cooperation on peaceful uses of nuclear energy.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 10-11:  act => act-02
Span 16-17:  block => block-01
Span 21-22:  controls => control-01
Span 26-27:  cooperation => cooperate-01
Span 9-10:  countries => country
Span 32-33:  energy => energy
Span 20-21:  export => export-01
Span 13-14:  individual => individual
Span 25-26:  international => international
Span 24-25:  maintain => maintain-01
Span 7-8:  mission => mission
Span 31-32:  nuclear => nucleus
Span 3-6:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 28-29:  peaceful => peaceful
Span 8-9:  statement => state-01
Span 29-30:  uses => use-01
Span 19-20:  violate => violate-01

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),energy,energy,false), Span(31,32,List(1),nuclear,nucleus,false), Span(29,30,List(2),uses,use-01,false), Span(28,29,List(3),peaceful,peaceful,false), Span(26,27,List(4),cooperation,cooperate-01,false), Span(25,26,List(5),international,international,false), Span(24,25,List(6),maintain,maintain-01,false), Span(21,22,List(7),controls,control-01,false), Span(20,21,List(8),export,export-01,false), Span(19,20,List(9),violate,violate-01,false), Span(16,17,List(10),block,block-01,false), Span(13,14,List(11),individual,individual,false), Span(10,11,List(12),act,act-02,false), Span(9,10,List(13),countries,country,false), Span(8,9,List(14),statement,state-01,false), Span(7,8,List(15),mission,mission,false), Span(3,6,List(20, 19, 18, 17, 16),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> use-01, 5 -> international, 12 -> act-02, 15 -> mission, 8 -> export-01, 18 -> "Nuclear", 7 -> control-01, 17 -> name, 1 -> nucleus, 4 -> cooperate-01, 11 -> individual, 14 -> state-01, 20 -> "Group", 6 -> maintain-01, 0 -> energy, 9 -> violate-01, 16 -> organization, 19 -> "Suppliers", 3 -> peaceful, 10 -> block-01, 13 -> country),Map(e -> energy, n -> nucleus, b -> block-01, m2 -> mission, e2 -> export-01, s -> state-01, v -> violate-01, m -> maintain-01, p -> peaceful, c3 -> country, a -> act-02, i2 -> individual, i -> international, c -> cooperate-01, u -> use-01, o -> organization, n2 -> name, c2 -> control-01))),[Ljava.lang.String;@241a53ef,Annotation([Ljava.lang.String;@344344fa,[Ljava.lang.String;@2db2cd5,[Ljava.lang.String;@70e659aa),Annotation([Ljava.lang.String;@615f972,[Ljava.lang.String;@285f09de,[Ledu.cmu.lti.nlp.amr.Dependency;@73393584),Annotation([Ljava.lang.String;@31500940,[Ljava.lang.String;@1827a871,[Ljava.lang.String;@48e64352),Annotation([Ljava.lang.String;@7249dadf,[Ljava.lang.String;@4362d7df,[Ledu.cmu.lti.nlp.amr.Entity;@66238be2))
AMR:
(a / act-02, ARG0, c3 / country)
(a / act-02, ARG1, m2 / mission)
(b / block-01, ARG0, c3 / country)
(b / block-01, ARG1, v / violate-01)
(c / cooperate-01, ARG1, o / organization)
(c / cooperate-01, mod, i / international)
(c2 / control-01, ARG1, e2 / export-01)
(e / energy, mod, n / nucleus)
(e2 / export-01, ARG1, i2 / individual)
(m / maintain-01, ARG1, c / cooperate-01)
(m / maintain-01, ARG6, c2 / control-01)
(m / maintain-01, purpose, u / use-01)
(n2 / name, op, "Group")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Suppliers")
(o / organization, name, n2 / name)
(s / state-01, ARG1, m2 / mission)
(u / use-01, ARG1, e / energy)
(u / use-01, mod, p / peaceful)
(v / violate-01, ARG1, c2 / control-01)

Decoded in 902,322 microseconds
Sentence: The Nuclear Suppliers Group has no enforcement power beyond notifying companies of violating the group's guidelines.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 8-9:  beyond => beyond
Span 10-11:  companies => company
Span 6-7:  enforcement => enforce-01
Span 14-15:  group => group
Span 16-17:  guidelines => guideline
Span 5-6:  no => -
Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 7-8:  power => power
Span 12-13:  violating => violate-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),guidelines,guideline,false), Span(14,15,List(1),group,group,false), Span(12,13,List(2),violating,violate-01,false), Span(10,11,List(3),companies,company,false), Span(8,9,List(4),beyond,beyond,false), Span(7,8,List(5),power,power,false), Span(6,7,List(6),enforcement,enforce-01,false), Span(5,6,List(7),no,-,false), Span(1,4,List(12, 11, 10, 9, 8),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> violate-01, 5 -> power, 12 -> "Group", 8 -> organization, 7 -> -, 1 -> group, 4 -> beyond, 11 -> "Suppliers", 6 -> enforce-01, 0 -> guideline, 9 -> name, 3 -> company, 10 -> "Nuclear"),Map(n -> name, e -> enforce-01, b -> beyond, v -> violate-01, p -> power, g2 -> group, g -> guideline, - -> -, c -> company, o -> organization))),[Ljava.lang.String;@1c25b8a7,Annotation([Ljava.lang.String;@200606de,[Ljava.lang.String;@750fe12e,[Ljava.lang.String;@f8908f6),Annotation([Ljava.lang.String;@3e587920,[Ljava.lang.String;@2ef8a8c3,[Ledu.cmu.lti.nlp.amr.Dependency;@24f43aa3),Annotation([Ljava.lang.String;@63fd4873,[Ljava.lang.String;@1e11bc55,[Ljava.lang.String;@7544a1e4),Annotation([Ljava.lang.String;@70e0accd,[Ljava.lang.String;@7957dc72,[Ledu.cmu.lti.nlp.amr.Entity;@6ab72419))
AMR:
(c / company, calendar, b / beyond)
(e / enforce-01, ARG1, c / company)
(e / enforce-01, ARG6, - / -)
(g / guideline, poss, g2 / group)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(p / power, mod, e / enforce-01)
(p / power, poss, o / organization)
(v / violate-01, ARG0, c / company)
(v / violate-01, ARG1, g / guideline)

Decoded in 382,760 microseconds
Sentence: The Nuclear Suppliers Group keeps data private and meets largely in secret.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 7-8:  and => and
Span 5-6:  data => data
Span 9-10:  largely => large
Span 8-9:  meets => meet-03
Span 1-4:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 6-7:  private => private
Span 11-12:  secret => secret

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),secret,secret,false), Span(9,10,List(1),largely,large,false), Span(8,9,List(2),meets,meet-03,false), Span(7,8,List(3),and,and,false), Span(6,7,List(4),private,private,false), Span(5,6,List(5),data,data,false), Span(1,4,List(10, 9, 8, 7, 6),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false)),Map(2 -> meet-03, 5 -> data, 8 -> "Nuclear", 7 -> name, 1 -> large, 4 -> private, 6 -> organization, 9 -> "Suppliers", 0 -> secret, 10 -> "Group", 3 -> and),Map(n -> name, s -> secret, d -> data, m -> meet-03, p -> private, a -> and, l -> large, o -> organization))),[Ljava.lang.String;@3aacf32a,Annotation([Ljava.lang.String;@4fdfa676,[Ljava.lang.String;@82c57b3,[Ljava.lang.String;@5be82d43),Annotation([Ljava.lang.String;@600b0b7,[Ljava.lang.String;@345e5a17,[Ledu.cmu.lti.nlp.amr.Dependency;@5ea502e0),Annotation([Ljava.lang.String;@443dbe42,[Ljava.lang.String;@473b3b7a,[Ljava.lang.String;@1734f68),Annotation([Ljava.lang.String;@77b7ffa4,[Ljava.lang.String;@5ed190be,[Ledu.cmu.lti.nlp.amr.Entity;@402f80f5))
AMR:
(a / and, op, d / data)
(a / and, op, m / meet-03)
(m / meet-03, ARG0, o / organization)
(m / meet-03, ARG1, s / secret)
(m / meet-03, manner, l / large)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(p / private, domain, d / data)

Decoded in 147,600 microseconds
Sentence: Most of the denials of purchase have occurred since 2002 and have resulted from interventions by members of the Nuclear Suppliers Group.

NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Spans:
Span 9-10:  2002 => (date-entity :year 2002)
Span 10-11:  and => and
Span 16-17:  members => (have-org-role-91 :ARG2 member)
Span 0-1:  Most => most
Span 19-22:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
Span 7-8:  occurred => occur-01
Span 5-6:  purchase => purchase-01
Span 12-13:  resulted => result-01
Span 8-9:  since => since

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,22,List(4, 3, 2, 1, 0),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(16,17,List(6, 5),members,(have-org-role-91 :ARG2 member),false), Span(12,13,List(7),resulted,result-01,false), Span(10,11,List(8),and,and,false), Span(9,10,List(10, 9),2002,(date-entity :year 2002),false), Span(8,9,List(11),since,since,false), Span(7,8,List(12),occurred,occur-01,false), Span(5,6,List(13),purchase,purchase-01,false), Span(0,1,List(14),Most,most,false)),Map(2 -> "Nuclear", 5 -> have-org-role-91, 12 -> occur-01, 8 -> and, 7 -> result-01, 1 -> name, 4 -> "Group", 11 -> since, 14 -> most, 6 -> member, 0 -> organization, 9 -> date-entity, 3 -> "Suppliers", 10 -> 2002, 13 -> purchase-01),Map(n -> name, 2 -> 2002, h -> have-org-role-91, m2 -> most, s -> since, d -> date-entity, m -> member, p -> purchase-01, a -> and, o2 -> occur-01, r -> result-01, o -> organization))),[Ljava.lang.String;@5bbc9f97,Annotation([Ljava.lang.String;@133e019b,[Ljava.lang.String;@41382722,[Ljava.lang.String;@7dac3fd8),Annotation([Ljava.lang.String;@425357dd,[Ljava.lang.String;@2102a4d5,[Ledu.cmu.lti.nlp.amr.Dependency;@210386e0),Annotation([Ljava.lang.String;@3d4d3fe7,[Ljava.lang.String;@65f87a2c,[Ljava.lang.String;@51684e4a),Annotation([Ljava.lang.String;@6ce1f601,[Ljava.lang.String;@38875e7d,[Ledu.cmu.lti.nlp.amr.Entity;@1e886a5b))
AMR:
(a / and, op, o2 / occur-01)
(a / and, op, r / result-01)
(d / date-entity, year, 2 / 2002)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(o / organization, name, n / name)
(o2 / occur-01, ARG1, h / have-org-role-91)
(o2 / occur-01, time, s / since)
(p / purchase-01, ARG1, m2 / most)
(r / result-01, ARG1, p / purchase-01)
(s / since, op, d / date-entity)

Decoded in 160,448 microseconds
Sentence: The list of trade denials was made available by a diplomat from a country interested in exposing the extent of Iranian efforts to acquire so-called dual-use items that can be converted to weapons production.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 23-24:  acquire => acquire-01
Span 7-8:  available => available
Span 32-33:  can => possible
Span 34-35:  converted => convert-01
Span 13-14:  country => country
Span 27-28:  dual => dual
Span 21-22:  efforts => effort
Span 16-17:  exposing => expose-01
Span 18-19:  extent => extent
Span 14-15:  interested => interest-01
Span 20-21:  Iranian => (country :name (name :op "Iran"))
Span 30-31:  items => item
Span 1-2:  list => list-01
Span 37-38:  production => produce-01
Span 24-25:  so => so
Span 3-4:  trade => trade-01
Span 29-30:  use => use-01
Span 36-37:  weapons => weapon

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),production,produce-01,false), Span(36,37,List(1),weapons,weapon,false), Span(34,35,List(2),converted,convert-01,false), Span(32,33,List(3),can,possible,false), Span(30,31,List(4),items,item,false), Span(29,30,List(5),use,use-01,false), Span(27,28,List(6),dual,dual,false), Span(24,25,List(7),so,so,false), Span(23,24,List(8),acquire,acquire-01,false), Span(21,22,List(9),efforts,effort,false), Span(20,21,List(12, 11, 10),Iranian,(country :name (name :op "Iran")),false), Span(18,19,List(13),extent,extent,false), Span(16,17,List(14),exposing,expose-01,false), Span(14,15,List(15),interested,interest-01,false), Span(13,14,List(16),country,country,false), Span(7,8,List(17),available,available,false), Span(3,4,List(18),trade,trade-01,false), Span(1,2,List(19),list,list-01,false)),Map(2 -> convert-01, 5 -> use-01, 12 -> "Iran", 15 -> interest-01, 8 -> acquire-01, 18 -> trade-01, 7 -> so, 17 -> available, 1 -> weapon, 4 -> item, 11 -> name, 14 -> expose-01, 6 -> dual, 0 -> produce-01, 9 -> effort, 16 -> country, 19 -> list-01, 3 -> possible, 10 -> country, 13 -> extent),Map(e -> effort, w -> weapon, n -> name, t -> trade-01, p2 -> possible, e2 -> extent, s -> so, d -> dual, p -> produce-01, c3 -> country, a -> acquire-01, i2 -> interest-01, a2 -> available, i -> item, c -> convert-01, l -> list-01, u -> use-01, e3 -> expose-01, c2 -> country))),[Ljava.lang.String;@d816dde,Annotation([Ljava.lang.String;@6e33c391,[Ljava.lang.String;@6c451c9c,[Ljava.lang.String;@31c269fd),Annotation([Ljava.lang.String;@372b0d86,[Ljava.lang.String;@47747fb9,[Ledu.cmu.lti.nlp.amr.Dependency;@3113a37),Annotation([Ljava.lang.String;@213e3629,[Ljava.lang.String;@4e9658b5,[Ljava.lang.String;@2a7b6f69),Annotation([Ljava.lang.String;@20312893,[Ljava.lang.String;@70eecdc2,[Ledu.cmu.lti.nlp.amr.Entity;@c41709a))
AMR:
(a / acquire-01, ARG0, e / effort)
(a / acquire-01, ARG1, i / item)
(a / acquire-01, ARG6, e2 / extent)
(c / convert-01, ARG1, i / item)
(c / convert-01, ARG2, p / produce-01)
(c2 / country, name, n / name)
(e / effort, mod, c2 / country)
(e3 / expose-01, ARG0, c3 / country)
(e3 / expose-01, ARG1, e2 / extent)
(i2 / interest-01, ARG1, t / trade-01)
(i2 / interest-01, ARG2, e3 / expose-01)
(l / list-01, ARG1, t / trade-01)
(l / list-01, ARG6, a2 / available)
(n / name, op, "Iran")
(p / produce-01, ARG1, w / weapon)
(p2 / possible, domain, c / convert-01)
(t / trade-01, ARG1, s / so)
(u / use-01, ARG1, i / item)
(u / use-01, ARG2, d / dual)

Decoded in 1,092,145 microseconds
Sentence: The list was made available on condition that neither the diplomat nor the diplomat's country be identified.

Spans:
Span 4-5:  available => available
Span 6-7:  condition => condition
Span 15-16:  country => country
Span 17-18:  identified => identify-01
Span 1-2:  list => list-01

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),identified,identify-01,false), Span(15,16,List(1),country,country,false), Span(6,7,List(2),condition,condition,false), Span(4,5,List(3),available,available,false), Span(1,2,List(4),list,list-01,false)),Map(2 -> condition, 1 -> country, 4 -> list-01, 0 -> identify-01, 3 -> available),Map(a -> available, i -> identify-01, l -> list-01, c -> country, c2 -> condition))),[Ljava.lang.String;@7db0565c,Annotation([Ljava.lang.String;@54ec8cc9,[Ljava.lang.String;@52eacb4b,[Ljava.lang.String;@5528a42c),Annotation([Ljava.lang.String;@2a551a63,[Ljava.lang.String;@1a6f5124,[Ledu.cmu.lti.nlp.amr.Dependency;@1edb61b1),Annotation([Ljava.lang.String;@ec2bf82,[Ljava.lang.String;@cc62a3b,[Ljava.lang.String;@6cc0bcf6),Annotation([Ljava.lang.String;@29539e36,[Ljava.lang.String;@32f61a31,[Ledu.cmu.lti.nlp.amr.Entity;@f5c79a6))
AMR:
(a / available, location, c2 / condition)
(i / identify-01, ARG1, c / country)
(l / list-01, ARG1, i / identify-01)
(l / list-01, ARG6, a / available)

Decoded in 116,824 microseconds
Sentence: The list names companies from Australia, Finland, Sweden, the United Arab Emirates and Iran that were prevented from carrying out deals because the items being sold were suspected of being militarily useful.

NER Entity: (country :name (name :op "Australia"))
NER Entity: (country :name (name :op "Finland"))
NER Entity: (country :name (name :op "Sweden"))
NER Entity: (country :name (name :op "United" :op "Arab" :op "Emirates"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Sweden"))
NER Entity: (country :name (name :op "Australia"))
Spans:
Span 15-16:  and => and
Span 5-6:  Australia => (country :name (name :op "Australia"))
Span 24-25:  because => cause-01
Span 21-22:  carrying => carry-01
Span 3-4:  companies => company
Span 23-24:  deals => deal-01
Span 16-17:  Iran => (country :name (name :op "Iran"))
Span 26-27:  items => item
Span 1-2:  list => list-01
Span 2-3:  names => name
Span 22-23:  out => out
Span 19-20:  prevented => prevent-01
Span 28-29:  sold => sell-01
Span 30-31:  suspected => suspect-01
Span 9-10:  Sweden => (country :name (name :op "Sweden"))
Span 12-15:  United Arab Emirates => (country :name (name :op "United" :op "Arab" :op "Emirates"))
Span 34-35:  useful => useful

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),useful,useful,false), Span(30,31,List(1),suspected,suspect-01,false), Span(28,29,List(2),sold,sell-01,false), Span(26,27,List(3),items,item,false), Span(24,25,List(4),because,cause-01,false), Span(23,24,List(5),deals,deal-01,false), Span(22,23,List(6),out,out,false), Span(21,22,List(7),carrying,carry-01,false), Span(19,20,List(8),prevented,prevent-01,false), Span(16,17,List(11, 10, 9),Iran,(country :name (name :op "Iran")),false), Span(15,16,List(12),and,and,false), Span(12,15,List(17, 16, 15, 14, 13),United Arab Emirates,(country :name (name :op "United" :op "Arab" :op "Emirates")),false), Span(9,10,List(20, 19, 18),Sweden,(country :name (name :op "Sweden")),false), Span(5,6,List(23, 22, 21),Australia,(country :name (name :op "Australia")),false), Span(3,4,List(24),companies,company,false), Span(2,3,List(25),names,name,false), Span(1,2,List(26),list,list-01,false)),Map(2 -> sell-01, 5 -> deal-01, 12 -> and, 8 -> prevent-01, 15 -> "United", 21 -> country, 18 -> country, 24 -> company, 7 -> carry-01, 1 -> suspect-01, 17 -> "Emirates", 23 -> "Australia", 26 -> list-01, 4 -> cause-01, 11 -> "Iran", 14 -> name, 20 -> "Sweden", 6 -> out, 9 -> country, 0 -> useful, 22 -> name, 16 -> "Arab", 19 -> name, 10 -> name, 3 -> item, 25 -> name, 13 -> country),Map(n -> name, s2 -> sell-01, c7 -> company, n4 -> name, c4 -> country, s -> suspect-01, d -> deal-01, p -> prevent-01, n3 -> name, c3 -> country, a -> and, c6 -> country, i -> item, c -> cause-01, l -> list-01, u -> useful, o -> out, n2 -> name, c2 -> carry-01, n5 -> name, c5 -> country))),[Ljava.lang.String;@669253b7,Annotation([Ljava.lang.String;@5305c37d,[Ljava.lang.String;@51a06cbe,[Ljava.lang.String;@3dddbe65),Annotation([Ljava.lang.String;@49a64d82,[Ljava.lang.String;@344561e0,[Ledu.cmu.lti.nlp.amr.Dependency;@66d23e4a),Annotation([Ljava.lang.String;@36ac8a63,[Ljava.lang.String;@4d9d1b69,[Ljava.lang.String;@52c8295b),Annotation([Ljava.lang.String;@251f7d26,[Ljava.lang.String;@77b21474,[Ledu.cmu.lti.nlp.amr.Entity;@52d10fb8))
AMR:
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(a / and, op, c6 / country)
(c / cause-01, ARG1, i / item)
(c2 / carry-01, ARG1, d / deal-01)
(c2 / carry-01, ARG5, o / out)
(c2 / carry-01, time, c / cause-01)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c6 / country, name, n4 / name)
(c7 / company, location, c6 / country)
(c7 / company, name, n5 / name)
(d / deal-01, ARG1, u / useful)
(l / list-01, ARG1, c7 / company)
(n / name, op, "Iran")
(n2 / name, op, "Arab")
(n2 / name, op, "Emirates")
(n2 / name, op, "United")
(n3 / name, op, "Sweden")
(n4 / name, op, "Australia")
(p / prevent-01, ARG0, c7 / company)
(p / prevent-01, ARG1, c2 / carry-01)
(s / suspect-01, ARG1, c7 / company)
(s2 / sell-01, ARG1, i / item)

Decoded in 1,287,326 microseconds
Sentence: The listed items being offered for sale in the blocked deals included Nickel powder, petrochemical plant components, compressors, furnaces, steel flanges and fittings, electron microscopes, radiometric ore-sorting machines, valves and tubing, lasers, a rotary drilling rig, a mass spectrometer and a nitrogen production plant.

Spans:
Span 51-52:  and => and
Span 38-39:  and => and
Span 25-26:  and => and
Span 9-10:  blocked => block-01
Span 17-18:  components => component
Span 10-11:  deals => deal-01
Span 45-46:  drilling => drill-01
Span 11-12:  included => include-01
Span 2-3:  items => item
Span 1-2:  listed => list-01
Span 35-36:  machines => machine
Span 49-50:  mass => mass
Span 53-54:  nitrogen => nitrogen
Span 4-5:  offered => offer-01
Span 55-56:  plant => plant
Span 16-17:  plant => plant
Span 13-14:  powder => powder-01
Span 54-55:  production => produce-01
Span 23-24:  steel => steel
Span 37-38:  valves => valve

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(55,56,List(0),plant,plant,false), Span(54,55,List(1),production,produce-01,false), Span(53,54,List(2),nitrogen,nitrogen,false), Span(51,52,List(3),and,and,false), Span(49,50,List(4),mass,mass,false), Span(45,46,List(5),drilling,drill-01,false), Span(38,39,List(6),and,and,false), Span(37,38,List(7),valves,valve,false), Span(35,36,List(8),machines,machine,false), Span(25,26,List(9),and,and,false), Span(23,24,List(10),steel,steel,false), Span(17,18,List(11),components,component,false), Span(16,17,List(12),plant,plant,false), Span(13,14,List(13),powder,powder-01,false), Span(11,12,List(14),included,include-01,false), Span(10,11,List(15),deals,deal-01,false), Span(9,10,List(16),blocked,block-01,false), Span(4,5,List(17),offered,offer-01,false), Span(2,3,List(18),items,item,false), Span(1,2,List(19),listed,list-01,false)),Map(2 -> nitrogen, 5 -> drill-01, 12 -> plant, 15 -> deal-01, 8 -> machine, 18 -> item, 7 -> valve, 17 -> offer-01, 1 -> produce-01, 4 -> mass, 11 -> component, 14 -> include-01, 6 -> and, 0 -> plant, 9 -> and, 16 -> block-01, 19 -> list-01, 3 -> and, 10 -> steel, 13 -> powder-01),Map(n -> nitrogen, b -> block-01, m2 -> machine, p2 -> produce-01, a3 -> and, s -> steel, v -> valve, m -> mass, d -> drill-01, p -> plant, a -> and, p4 -> powder-01, d2 -> deal-01, i2 -> item, i -> include-01, a2 -> and, c -> component, l -> list-01, o -> offer-01, p3 -> plant))),[Ljava.lang.String;@41c07648,Annotation([Ljava.lang.String;@1fe8d51b,[Ljava.lang.String;@781e7326,[Ljava.lang.String;@22680f52),Annotation([Ljava.lang.String;@60d84f61,[Ljava.lang.String;@39c11e6c,[Ledu.cmu.lti.nlp.amr.Dependency;@324dcd31),Annotation([Ljava.lang.String;@503d56b5,[Ljava.lang.String;@72bca894,[Ljava.lang.String;@433ffad1),Annotation([Ljava.lang.String;@1fc793c2,[Ljava.lang.String;@2575f671,[Ledu.cmu.lti.nlp.amr.Entity;@329a1243))
AMR:
(a / and, op, c / component)
(a / and, op, m2 / machine)
(a / and, op, p / plant)
(a / and, op, v / valve)
(a2 / and, op, v / valve)
(a3 / and, op, m / mass)
(b / block-01, ARG0, i / include-01)
(b / block-01, ARG1, d2 / deal-01)
(c / component, mod, p3 / plant)
(d / drill-01, ARG0, a3 / and)
(d / drill-01, ARG1, s / steel)
(i / include-01, ARG1, a / and)
(i / include-01, ARG2, a3 / and)
(i / include-01, ARG6, p4 / powder-01)
(l / list-01, ARG1, i2 / item)
(o / offer-01, ARG1, i2 / item)
(p2 / produce-01, ARG0, p / plant)
(p2 / produce-01, ARG1, n / nitrogen)
(p4 / powder-01, ARG1, i2 / item)

Decoded in 1,959,724 microseconds
Sentence: The Iranian end users included the Government of Iran and Iran's Atomic Energy Organization, power companies, engineering, petrochemical and oil-refining and gas companies, aircraft industries, schools, universities, engine manufacturers, mineral research centers, a helicopter support company and a plasma physics center.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "Atomic" :op "Energy" :op "Organization"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 30-31:  aircraft => aircraft
Span 48-49:  and => and
Span 26-27:  and => and
Span 22-23:  and => and
Span 9-10:  and => and
Span 12-15:  Atomic Energy Organization => (organization :name (name :op "Atomic" :op "Energy" :op "Organization"))
Span 52-53:  center => center
Span 42-43:  centers => center
Span 28-29:  companies => company
Span 17-18:  companies => company
Span 47-48:  company => company
Span 2-3:  end => end-01
Span 37-38:  engine => engine
Span 19-20:  engineering => engineer-01
Span 6-7:  Government => (government-organization :ARG0-of govern-01)
Span 45-46:  helicopter => helicopter
Span 4-5:  included => include-01
Span 31-32:  industries => industry
Span 10-11:  Iran => (country :name (name :op "Iran"))
Span 8-9:  Iran => (country :name (name :op "Iran"))
Span 1-2:  Iranian => (country :name (name :op "Iran"))
Span 38-39:  manufacturers => (person :ARG0-of manufacture-01)
Span 40-41:  mineral => mineral
Span 23-24:  oil => oil
Span 16-17:  power => power
Span 25-26:  refining => refine-01
Span 41-42:  research => research-01
Span 33-34:  schools => school
Span 46-47:  support => support-01
Span 35-36:  universities => university

Langrangian relaxation converged after 80 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(52,53,List(0),center,center,false), Span(48,49,List(1),and,and,false), Span(47,48,List(2),company,company,false), Span(46,47,List(3),support,support-01,false), Span(45,46,List(4),helicopter,helicopter,false), Span(42,43,List(5),centers,center,false), Span(41,42,List(6),research,research-01,false), Span(40,41,List(7),mineral,mineral,false), Span(38,39,List(9, 8),manufacturers,(person :ARG0-of manufacture-01),false), Span(37,38,List(10),engine,engine,false), Span(35,36,List(11),universities,university,false), Span(33,34,List(12),schools,school,false), Span(31,32,List(13),industries,industry,false), Span(30,31,List(14),aircraft,aircraft,false), Span(28,29,List(15),companies,company,false), Span(26,27,List(16),and,and,false), Span(25,26,List(17),refining,refine-01,false), Span(23,24,List(18),oil,oil,false), Span(22,23,List(19),and,and,false), Span(19,20,List(20),engineering,engineer-01,false), Span(17,18,List(21),companies,company,false), Span(16,17,List(22),power,power,false), Span(12,15,List(27, 26, 25, 24, 23),Atomic Energy Organization,(organization :name (name :op "Atomic" :op "Energy" :op "Organization")),false), Span(10,11,List(30, 29, 28),Iran,(country :name (name :op "Iran")),false), Span(9,10,List(31),and,and,false), Span(8,9,List(34, 33, 32),Iran,(country :name (name :op "Iran")),false), Span(6,7,List(36, 35),Government,(government-organization :ARG0-of govern-01),false), Span(4,5,List(37),included,include-01,false), Span(2,3,List(38),end,end-01,false), Span(1,2,List(41, 40, 39),Iranian,(country :name (name :op "Iran")),false)),Map(39 -> country, 30 -> "Iran", 2 -> company, 5 -> center, 33 -> name, 27 -> "Organization", 12 -> school, 8 -> person, 15 -> company, 36 -> govern-01, 21 -> company, 18 -> oil, 24 -> name, 41 -> "Iran", 35 -> government-organization, 7 -> mineral, 1 -> and, 17 -> refine-01, 23 -> organization, 38 -> end-01, 26 -> "Energy", 4 -> helicopter, 11 -> university, 32 -> country, 14 -> aircraft, 29 -> name, 20 -> engineer-01, 34 -> "Iran", 28 -> country, 6 -> research-01, 40 -> name, 9 -> manufacture-01, 0 -> center, 22 -> power, 16 -> and, 37 -> include-01, 19 -> and, 10 -> engine, 3 -> support-01, 31 -> and, 25 -> "Atomic", 13 -> industry),Map(e -> engine, n -> name, c8 -> country, h -> helicopter, s2 -> school, m2 -> manufacture-01, c7 -> country, e2 -> engineer-01, p2 -> power, n4 -> name, c4 -> company, a3 -> and, s -> support-01, m -> mineral, g2 -> govern-01, r2 -> refine-01, g -> government-organization, p -> person, n3 -> name, c3 -> center, a -> and, a5 -> and, o2 -> organization, c6 -> country, i2 -> include-01, r -> research-01, i -> industry, a2 -> aircraft, c -> center, u -> university, o -> oil, e3 -> end-01, n2 -> name, c2 -> company, a4 -> and, c5 -> company))),[Ljava.lang.String;@ecf9fb3,Annotation([Ljava.lang.String;@2d35442b,[Ljava.lang.String;@27f9e982,[Ljava.lang.String;@4593ff34),Annotation([Ljava.lang.String;@37d3d232,[Ljava.lang.String;@30c0ccff,[Ledu.cmu.lti.nlp.amr.Dependency;@581d969c),Annotation([Ljava.lang.String;@22db8f4,[Ljava.lang.String;@2b46a8c1,[Ljava.lang.String;@1d572e62),Annotation([Ljava.lang.String;@29caf222,[Ljava.lang.String;@46cf05f7,[Ledu.cmu.lti.nlp.amr.Entity;@5851bd4f))
AMR:
(a / and, op, c / center)
(a / and, op, c3 / center)
(a / and, op, i / industry)
(a / and, op, p / person)
(a / and, op, s2 / school)
(a / and, op, u / university)
(a3 / and, op, c2 / company)
(a3 / and, op, c4 / company)
(a3 / and, op, c5 / company)
(a3 / and, op, e2 / engineer-01)
(a3 / and, op, g / government-organization)
(a3 / and, op, p / person)
(a3 / and, op, r2 / refine-01)
(a4 / and, op, c5 / company)
(a5 / and, op, c6 / country)
(a5 / and, op, c7 / country)
(c3 / center, mod, m / mineral)
(c6 / country, name, n2 / name)
(c7 / country, name, n3 / name)
(c8 / country, name, n4 / name)
(e2 / engineer-01, ARG1, p2 / power)
(e3 / end-01, ARG0, c8 / country)
(e3 / end-01, ARG1, a3 / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c7 / country)
(i / industry, mod, a2 / aircraft)
(i2 / include-01, ARG1, a3 / and)
(m2 / manufacture-01, ARG0, p / person)
(m2 / manufacture-01, ARG1, e / engine)
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "Organization")
(n2 / name, op, "Iran")
(n3 / name, op, "Iran")
(n4 / name, op, "Iran")
(o2 / organization, domain, g / government-organization)
(o2 / organization, name, n / name)
(r / research-01, ARG1, m / mineral)
(r2 / refine-01, ARG1, o / oil)
(s / support-01, ARG0, p / person)
(s / support-01, ARG1, h / helicopter)

Decoded in 6,768,719 microseconds
Sentence: The diplomat stated the 75 denials represented actions by only 7 of the 45 member States.

NER Entity: (organization :name (name :op "States"))
Spans:
Span 13-14:  45 => 45
Span 10-11:  7 => 7
Span 4-5:  75 => 75
Span 7-8:  actions => action
Span 14-15:  member => (have-org-role-91 :ARG2 member)
Span 9-10:  only => only
Span 6-7:  represented => represent-01
Span 2-3:  stated => state-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(1, 0),member,(have-org-role-91 :ARG2 member),false), Span(13,14,List(2),45,45,false), Span(10,11,List(3),7,7,false), Span(9,10,List(4),only,only,false), Span(7,8,List(5),actions,action,false), Span(6,7,List(6),represented,represent-01,false), Span(4,5,List(7),75,75,false), Span(2,3,List(8),stated,state-01,false)),Map(2 -> 45, 5 -> action, 8 -> state-01, 7 -> 75, 1 -> member, 4 -> only, 6 -> represent-01, 0 -> have-org-role-91, 3 -> 7),Map(72 -> 75, h -> have-org-role-91, s -> state-01, 7 -> 7, m -> member, a -> action, 4 -> 45, r -> represent-01, o -> only))),[Ljava.lang.String;@7cd1ac19,Annotation([Ljava.lang.String;@2f40a43,[Ljava.lang.String;@3caa4757,[Ljava.lang.String;@69c43e48),Annotation([Ljava.lang.String;@1804f60d,[Ljava.lang.String;@3a80515c,[Ledu.cmu.lti.nlp.amr.Dependency;@547e29a4),Annotation([Ljava.lang.String;@1c807b1d,[Ljava.lang.String;@238b521e,[Ljava.lang.String;@1b39fd82),Annotation([Ljava.lang.String;@3e2fc448,[Ljava.lang.String;@21680803,[Ledu.cmu.lti.nlp.amr.Entity;@588ab592))
AMR:
(7 / 7, mod, o / only)
(h / have-org-role-91, ARG1, 72 / 75)
(h / have-org-role-91, ARG2, m / member)
(h / have-org-role-91, ARG6, 4 / 45)
(r / represent-01, ARG0, 4 / 45)
(r / represent-01, ARG1, a / action)
(s / state-01, ARG0, o / only)
(s / state-01, ARG1, r / represent-01)

Decoded in 207,058 microseconds
Sentence: The diplomat stated the actual number of denials of sales of dual-use products to Iran is probably much higher than 75.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 22-23:  75 => 75
Span 4-5:  actual => actual
Span 11-12:  dual => dual
Span 20-21:  higher => high
Span 16-17:  Iran => (country :name (name :op "Iran"))
Span 19-20:  much => much
Span 5-6:  number => number
Span 18-19:  probably => probable
Span 14-15:  products => product
Span 2-3:  stated => state-01
Span 13-14:  use => use-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),75,75,false), Span(20,21,List(1),higher,high,false), Span(19,20,List(2),much,much,false), Span(18,19,List(3),probably,probable,false), Span(16,17,List(6, 5, 4),Iran,(country :name (name :op "Iran")),false), Span(14,15,List(7),products,product,false), Span(13,14,List(8),use,use-01,false), Span(11,12,List(9),dual,dual,false), Span(5,6,List(10),number,number,false), Span(4,5,List(11),actual,actual,false), Span(2,3,List(12),stated,state-01,false)),Map(2 -> much, 5 -> name, 12 -> state-01, 8 -> use-01, 7 -> product, 1 -> high, 4 -> country, 11 -> actual, 6 -> "Iran", 0 -> 75, 9 -> dual, 3 -> probable, 10 -> number),Map(n -> name, h -> high, p2 -> product, s -> state-01, d -> dual, m -> much, 7 -> 75, p -> probable, a -> actual, u -> use-01, c -> country, n2 -> number))),[Ljava.lang.String;@c8b96ec,Annotation([Ljava.lang.String;@4cc61eb1,[Ljava.lang.String;@2d8f2f3a,[Ljava.lang.String;@2024293c),Annotation([Ljava.lang.String;@7048f722,[Ljava.lang.String;@c074c0c,[Ledu.cmu.lti.nlp.amr.Dependency;@58a55449),Annotation([Ljava.lang.String;@5949eba8,[Ljava.lang.String;@6e0ff644,[Ljava.lang.String;@58dea0a5),Annotation([Ljava.lang.String;@2a2bb0eb,[Ljava.lang.String;@3c291aad,[Ledu.cmu.lti.nlp.amr.Entity;@2d0566ba))
AMR:
(c / country, name, n / name)
(h / high, degree, m / much)
(h / high, domain, n2 / number)
(m / much, calendar, p / probable)
(n / name, op, "Iran")
(n2 / number, mod, a / actual)
(p2 / product, destination, c / country)
(p2 / product, mod, s / state-01)
(s / state-01, ARG0, 7 / 75)
(s / state-01, ARG1, n2 / number)
(u / use-01, ARG1, p2 / product)
(u / use-01, ARG2, d / dual)

Decoded in 212,476 microseconds
Sentence: Western diplomats stated that the government in Tehran uses front companies to receive and convert technology to weapons production without being detected as the standoff with Iran over Iran's nuclear program has continued.

NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Tehran"))
NER Entity: (thing :name (name :op "Western"))
Spans:
Span 13-14:  and => and
Span 10-11:  companies => company
Span 33-34:  continued => continue-01
Span 14-15:  convert => convert-01
Span 1-2:  diplomats => (have-org-role-91 :ARG2 diplomat)
Span 9-10:  front => front
Span 5-6:  government => (government-organization :ARG0-of govern-01)
Span 28-29:  Iran => (country :name (name :op "Iran"))
Span 26-27:  Iran => (country :name (name :op "Iran"))
Span 30-31:  nuclear => nucleus
Span 27-28:  over => over
Span 18-19:  production => produce-01
Span 31-32:  program => program
Span 12-13:  receive => receive-01
Span 24-25:  standoff => standoff
Span 2-3:  stated => state-01
Span 15-16:  technology => technology
Span 7-8:  Tehran => (city :name (name :op "Tehran"))
Span 8-9:  uses => use-01
Span 17-18:  weapons => weapon
Span 0-1:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(0),continued,continue-01,false), Span(31,32,List(1),program,program,false), Span(30,31,List(2),nuclear,nucleus,false), Span(28,29,List(5, 4, 3),Iran,(country :name (name :op "Iran")),false), Span(27,28,List(6),over,over,false), Span(26,27,List(9, 8, 7),Iran,(country :name (name :op "Iran")),false), Span(24,25,List(10),standoff,standoff,false), Span(18,19,List(11),production,produce-01,false), Span(17,18,List(12),weapons,weapon,false), Span(15,16,List(13),technology,technology,false), Span(14,15,List(14),convert,convert-01,false), Span(13,14,List(15),and,and,false), Span(12,13,List(16),receive,receive-01,false), Span(10,11,List(17),companies,company,false), Span(9,10,List(18),front,front,false), Span(8,9,List(19),uses,use-01,false), Span(7,8,List(22, 21, 20),Tehran,(city :name (name :op "Tehran")),false), Span(5,6,List(24, 23),government,(government-organization :ARG0-of govern-01),false), Span(2,3,List(25),stated,state-01,false), Span(1,2,List(27, 26),diplomats,(have-org-role-91 :ARG2 diplomat),false), Span(0,1,List(30, 29, 28),Western,(world-region :name (name :op "West")),false)),Map(30 -> "West", 2 -> nucleus, 5 -> "Iran", 27 -> diplomat, 12 -> weapon, 8 -> name, 15 -> and, 21 -> name, 18 -> front, 24 -> govern-01, 7 -> country, 1 -> program, 17 -> company, 23 -> government-organization, 26 -> have-org-role-91, 4 -> name, 11 -> produce-01, 14 -> convert-01, 29 -> name, 20 -> city, 28 -> world-region, 6 -> over, 9 -> "Iran", 0 -> continue-01, 22 -> "Tehran", 16 -> receive-01, 19 -> use-01, 10 -> standoff, 3 -> country, 25 -> state-01, 13 -> technology),Map(w -> weapon, n -> nucleus, h -> have-org-role-91, s2 -> state-01, t -> technology, p2 -> produce-01, c4 -> convert-01, n4 -> name, s -> standoff, d -> diplomat, g2 -> govern-01, p -> program, g -> government-organization, n3 -> name, c3 -> country, a -> and, c6 -> city, w2 -> world-region, r -> receive-01, c -> continue-01, u -> use-01, f -> front, o -> over, n2 -> name, c2 -> country, n5 -> name, c5 -> company))),[Ljava.lang.String;@733037,Annotation([Ljava.lang.String;@7728643a,[Ljava.lang.String;@320e400,[Ljava.lang.String;@5167268),Annotation([Ljava.lang.String;@1cfd1875,[Ljava.lang.String;@28c0b664,[Ledu.cmu.lti.nlp.amr.Dependency;@2c444798),Annotation([Ljava.lang.String;@1af7f54a,[Ljava.lang.String;@6ebd78d1,[Ljava.lang.String;@436390f4),Annotation([Ljava.lang.String;@4d157787,[Ljava.lang.String;@68ed96ca,[Ledu.cmu.lti.nlp.amr.Entity;@6d1310f6))
AMR:
(a / and, op, c4 / convert-01)
(a / and, op, r / receive-01)
(c / continue-01, ARG0, c2 / country)
(c / continue-01, ARG1, s / standoff)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c3 / country, prep-in, p / program)
(c4 / convert-01, ARG0, c5 / company)
(c4 / convert-01, ARG1, w2 / world-region)
(c5 / company, mod, f / front)
(c6 / city, name, n4 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / have-org-role-91, ARG2, d / diplomat)
(n2 / name, op, "Iran")
(n3 / name, op, "Iran")
(n4 / name, op, "Tehran")
(n5 / name, op, "West")
(o / over, op, p / program)
(p / program, poss, c2 / country)
(p2 / produce-01, ARG1, w / weapon)
(r / receive-01, ARG0, c6 / city)
(r / receive-01, ARG1, t / technology)
(r / receive-01, ARG2, p2 / produce-01)
(s2 / state-01, ARG0, d / diplomat)
(s2 / state-01, ARG1, u / use-01)
(u / use-01, ARG0, g / government-organization)
(u / use-01, ARG1, c5 / company)
(w / weapon, mod, n / nucleus)
(w2 / world-region, name, n5 / name)

Decoded in 2,287,537 microseconds
Sentence: Iran is a signatory to the Nuclear Nonproliferation Treaty but not a member of the Nuclear Suppliers Group.

NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
NER Entity: (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 9-10:  but => contrast-01
Span 0-1:  Iran => (country :name (name :op "Iran"))
Span 12-13:  member => (have-org-role-91 :ARG2 member)
Span 6-9:  Nuclear Nonproliferation Treaty => (organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty"))
Span 15-18:  Nuclear Suppliers Group => (organization :name (name :op "Nuclear" :op "Suppliers" :op "Group"))

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,18,List(4, 3, 2, 1, 0),Nuclear Suppliers Group,(organization :name (name :op "Nuclear" :op "Suppliers" :op "Group")),false), Span(12,13,List(6, 5),member,(have-org-role-91 :ARG2 member),false), Span(9,10,List(7),but,contrast-01,false), Span(6,9,List(12, 11, 10, 9, 8),Nuclear Nonproliferation Treaty,(organization :name (name :op "Nuclear" :op "Nonproliferation" :op "Treaty")),false), Span(0,1,List(15, 14, 13),Iran,(country :name (name :op "Iran")),false)),Map(2 -> "Nuclear", 5 -> have-org-role-91, 12 -> "Treaty", 15 -> "Iran", 8 -> organization, 7 -> contrast-01, 1 -> name, 4 -> "Group", 11 -> "Nonproliferation", 14 -> name, 6 -> member, 0 -> organization, 9 -> name, 3 -> "Suppliers", 10 -> "Nuclear", 13 -> country),Map(n -> name, h -> have-org-role-91, m -> member, n3 -> name, o2 -> organization, c -> contrast-01, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@3228d990,Annotation([Ljava.lang.String;@54e7391d,[Ljava.lang.String;@50b8ae8d,[Ljava.lang.String;@255990cc),Annotation([Ljava.lang.String;@51c929ae,[Ljava.lang.String;@3c8bdd5b,[Ledu.cmu.lti.nlp.amr.Dependency;@29d2d081),Annotation([Ljava.lang.String;@40e4ea87,[Ljava.lang.String;@58783f6c,[Ljava.lang.String;@3a7b503d),Annotation([Ljava.lang.String;@512d92b,[Ljava.lang.String;@62c5bbdc,[Ledu.cmu.lti.nlp.amr.Entity;@7bdf6bb7))
AMR:
(c / contrast-01, ARG1, c2 / country)
(c / contrast-01, ARG6, o2 / organization)
(c2 / country, name, n3 / name)
(h / have-org-role-91, ARG0, c2 / country)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Group")
(n / name, op, "Nuclear")
(n / name, op, "Suppliers")
(n2 / name, op, "Nonproliferation")
(n2 / name, op, "Nuclear")
(n2 / name, op, "Treaty")
(n3 / name, op, "Iran")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)

Decoded in 306,031 microseconds
Sentence: 2008-08-08

mkDayMonthYear(2008-08-08,08,08,2008)
mkDayMonthYear(2008-08-08,08,08,2008)
Spans:
Span 0-1:  2008-08-08 => (date-entity :day 8 :month 8 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-08-08,(date-entity :day 8 :month 8 :year 2008),false)),Map(2 -> 8, 1 -> 8, 0 -> date-entity, 3 -> 2008),Map(2 -> 2008, 8 -> 8, d -> date-entity, 82 -> 8))),[Ljava.lang.String;@1bc53649,Annotation([Ljava.lang.String;@88d6f9b,[Ljava.lang.String;@47d93e0d,[Ljava.lang.String;@475b7792),Annotation([Ljava.lang.String;@751e664e,[Ljava.lang.String;@160c3ec1,[Ledu.cmu.lti.nlp.amr.Dependency;@182b435b),Annotation([Ljava.lang.String;@4d0402b,[Ljava.lang.String;@2fa7ae9,[Ljava.lang.String;@7577b641),Annotation([Ljava.lang.String;@3704122f,[Ljava.lang.String;@3153ddfc,[Ledu.cmu.lti.nlp.amr.Entity;@60afd40d))
AMR:
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)

Decoded in 7,124 microseconds
Sentence: Georgia (GE); Russian Federation (RU)

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Russian" :op "Federation"))
NER Entity: (thing :name (name :op "RU"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 4-5:  ; => and
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 5-7:  Russian Federation => (country :name (name :op "Russian" :op "Federation"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,7,List(3, 2, 1, 0),Russian Federation,(country :name (name :op "Russian" :op "Federation")),false), Span(4,5,List(4),;,and,false), Span(0,1,List(7, 6, 5),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> "Russian", 5 -> country, 7 -> "Georgia", 1 -> name, 4 -> and, 6 -> name, 0 -> country, 3 -> "Federation"),Map(n -> name, a -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@28a2a3e7,Annotation([Ljava.lang.String;@3f2049b6,[Ljava.lang.String;@10b3df93,[Ljava.lang.String;@ea27e34),Annotation([Ljava.lang.String;@33a2499c,[Ljava.lang.String;@e72dba7,[Ledu.cmu.lti.nlp.amr.Dependency;@33c2bd),Annotation([Ljava.lang.String;@1dfd5f51,[Ljava.lang.String;@3c321bdb,[Ljava.lang.String;@24855019),Annotation([Ljava.lang.String;@3abd581e,[Ljava.lang.String;@4d4d8fcf,[Ledu.cmu.lti.nlp.amr.Entity;@610db97e))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Federation")
(n / name, op, "Russian")
(n2 / name, op, "Georgia")

Decoded in 19,811 microseconds
Sentence: International; Government; dissent; war and conflict; weapons; politics

Spans:
Span 11-12:  ; => and
Span 9-10:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 7-8:  and => and
Span 8-9:  conflict => conflict-01
Span 4-5:  dissent => dissent-01
Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 12-13:  politics => politics
Span 6-7:  war => war
Span 10-11:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),politics,politics,false), Span(11,12,List(1),;,and,false), Span(10,11,List(2),weapons,weapon,false), Span(9,10,List(3),;,and,false), Span(8,9,List(4),conflict,conflict-01,false), Span(7,8,List(5),and,and,false), Span(6,7,List(6),war,war,false), Span(5,6,List(7),;,and,false), Span(4,5,List(8),dissent,dissent-01,false), Span(3,4,List(9),;,and,false), Span(2,3,List(11, 10),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(12),;,and,false), Span(0,1,List(13),International,international,false)),Map(2 -> weapon, 5 -> and, 12 -> and, 8 -> dissent-01, 7 -> and, 1 -> and, 4 -> conflict-01, 11 -> govern-01, 6 -> war, 0 -> politics, 9 -> and, 3 -> and, 10 -> government-organization, 13 -> international),Map(w -> weapon, a3 -> and, a6 -> and, d -> dissent-01, g2 -> govern-01, p -> politics, g -> government-organization, a -> and, a5 -> and, w2 -> war, i -> international, a2 -> and, c -> conflict-01, a4 -> and))),[Ljava.lang.String;@6f0628de,Annotation([Ljava.lang.String;@3fabf088,[Ljava.lang.String;@1e392345,[Ljava.lang.String;@12f3afb5),Annotation([Ljava.lang.String;@4ced35ed,[Ljava.lang.String;@2c22a348,[Ledu.cmu.lti.nlp.amr.Dependency;@7bd69e82),Annotation([Ljava.lang.String;@74d7184a,[Ljava.lang.String;@51b01960,[Ljava.lang.String;@6831d8fd),Annotation([Ljava.lang.String;@27dc79f7,[Ljava.lang.String;@6b85300e,[Ledu.cmu.lti.nlp.amr.Entity;@3aaf4f07))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, c / conflict-01)
(a4 / and, op, a3 / and)
(a4 / and, op, c / conflict-01)
(a5 / and, op, c / conflict-01)
(a5 / and, op, w2 / war)
(a6 / and, op, a5 / and)
(a6 / and, op, d / dissent-01)
(a6 / and, op, g / government-organization)
(a6 / and, op, i / international)
(a6 / and, op, p / politics)
(a6 / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 85,557 microseconds
Sentence: On 8 August 2008 Russia conducted airstrikes on Georgian targets.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 1-4:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 5-6:  conducted => conduct-01
Span 4-5:  Russia => (country :name (name :op "Russia"))
Span 9-10:  targets => target

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),targets,target,false), Span(5,6,List(1),conducted,conduct-01,false), Span(4,5,List(4, 3, 2),Russia,(country :name (name :op "Russia")),false), Span(1,4,List(8, 7, 6, 5),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false)),Map(2 -> country, 5 -> date-entity, 8 -> 2008, 7 -> 8, 1 -> conduct-01, 4 -> "Russia", 6 -> 8, 0 -> target, 3 -> name),Map(n -> name, 2 -> 2008, t -> target, 8 -> 8, d -> date-entity, 82 -> 8, c -> conduct-01, c2 -> country))),[Ljava.lang.String;@5cbf9e9f,Annotation([Ljava.lang.String;@18e8473e,[Ljava.lang.String;@5a2f016d,[Ljava.lang.String;@1a38ba58),Annotation([Ljava.lang.String;@3ad394e6,[Ljava.lang.String;@6058e535,[Ledu.cmu.lti.nlp.amr.Dependency;@42deb43a),Annotation([Ljava.lang.String;@1deb2c43,[Ljava.lang.String;@3bb9efbc,[Ljava.lang.String;@1cefc4b3),Annotation([Ljava.lang.String;@2b27cc70,[Ljava.lang.String;@6f6a7463,[Ledu.cmu.lti.nlp.amr.Entity;@1bdaa23d))
AMR:
(c / conduct-01, ARG0, c2 / country)
(c / conduct-01, ARG1, t / target)
(c / conduct-01, time, d / date-entity)
(c2 / country, name, n / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Russia")

Decoded in 59,130 microseconds
Sentence: The airstrikes escalated conflict in a separatist area of Georgia.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 7-8:  area => area
Span 3-4:  conflict => conflict-01
Span 2-3:  escalated => escalate-01
Span 9-10:  Georgia => (country :name (name :op "Georgia"))
Span 6-7:  separatist => separatist

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(7,8,List(3),area,area,false), Span(6,7,List(4),separatist,separatist,false), Span(3,4,List(5),conflict,conflict-01,false), Span(2,3,List(6),escalated,escalate-01,false)),Map(2 -> "Georgia", 5 -> conflict-01, 1 -> name, 4 -> separatist, 6 -> escalate-01, 0 -> country, 3 -> area),Map(e -> escalate-01, n -> name, s -> separatist, a -> area, c -> country, c2 -> conflict-01))),[Ljava.lang.String;@79f227a9,Annotation([Ljava.lang.String;@6ca320ab,[Ljava.lang.String;@50d68830,[Ljava.lang.String;@1e53135d),Annotation([Ljava.lang.String;@7674a051,[Ljava.lang.String;@3a7704c,[Ledu.cmu.lti.nlp.amr.Dependency;@6754ef00),Annotation([Ljava.lang.String;@619bd14c,[Ljava.lang.String;@323e8306,[Ljava.lang.String;@a23a01d),Annotation([Ljava.lang.String;@4acf72b6,[Ljava.lang.String;@7561db12,[Ledu.cmu.lti.nlp.amr.Entity;@3301500b))
AMR:
(a / area, location, c / country)
(a / area, mod, s / separatist)
(c / country, name, n / name)
(e / escalate-01, ARG1, c2 / conflict-01)
(e / escalate-01, location, a / area)
(n / name, op, "Georgia")

Decoded in 25,533 microseconds
Sentence: On 8 August 2008 Russia conducted airstrikes on Georgian targets.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 1-4:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 5-6:  conducted => conduct-01
Span 4-5:  Russia => (country :name (name :op "Russia"))
Span 9-10:  targets => target

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),targets,target,false), Span(5,6,List(1),conducted,conduct-01,false), Span(4,5,List(4, 3, 2),Russia,(country :name (name :op "Russia")),false), Span(1,4,List(8, 7, 6, 5),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false)),Map(2 -> country, 5 -> date-entity, 8 -> 2008, 7 -> 8, 1 -> conduct-01, 4 -> "Russia", 6 -> 8, 0 -> target, 3 -> name),Map(n -> name, 2 -> 2008, t -> target, 8 -> 8, d -> date-entity, 82 -> 8, c -> conduct-01, c2 -> country))),[Ljava.lang.String;@24b52d3e,Annotation([Ljava.lang.String;@15deb1dc,[Ljava.lang.String;@6e9c413e,[Ljava.lang.String;@57a4d5ee),Annotation([Ljava.lang.String;@5af5def9,[Ljava.lang.String;@3a45c42a,[Ledu.cmu.lti.nlp.amr.Dependency;@36dce7ed),Annotation([Ljava.lang.String;@47a64f7d,[Ljava.lang.String;@33d05366,[Ljava.lang.String;@27a0a5a2),Annotation([Ljava.lang.String;@7692cd34,[Ljava.lang.String;@33aa93c,[Ledu.cmu.lti.nlp.amr.Entity;@32c0915e))
AMR:
(c / conduct-01, ARG0, c2 / country)
(c / conduct-01, ARG1, t / target)
(c / conduct-01, time, d / date-entity)
(c2 / country, name, n / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Russia")

Decoded in 59,524 microseconds
Sentence: The airstrikes escalated conflict in a separatist area of Georgia.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 7-8:  area => area
Span 3-4:  conflict => conflict-01
Span 2-3:  escalated => escalate-01
Span 9-10:  Georgia => (country :name (name :op "Georgia"))
Span 6-7:  separatist => separatist

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(7,8,List(3),area,area,false), Span(6,7,List(4),separatist,separatist,false), Span(3,4,List(5),conflict,conflict-01,false), Span(2,3,List(6),escalated,escalate-01,false)),Map(2 -> "Georgia", 5 -> conflict-01, 1 -> name, 4 -> separatist, 6 -> escalate-01, 0 -> country, 3 -> area),Map(e -> escalate-01, n -> name, s -> separatist, a -> area, c -> country, c2 -> conflict-01))),[Ljava.lang.String;@106faf11,Annotation([Ljava.lang.String;@70f43b45,[Ljava.lang.String;@26d10f2e,[Ljava.lang.String;@10ad20cb),Annotation([Ljava.lang.String;@7dd712e8,[Ljava.lang.String;@2c282004,[Ledu.cmu.lti.nlp.amr.Dependency;@22ee2d0),Annotation([Ljava.lang.String;@7bfc3126,[Ljava.lang.String;@3e792ce3,[Ljava.lang.String;@53bc1328),Annotation([Ljava.lang.String;@26f143ed,[Ljava.lang.String;@3c1e3314,[Ledu.cmu.lti.nlp.amr.Entity;@4b770e40))
AMR:
(a / area, location, c / country)
(a / area, mod, s / separatist)
(c / country, name, n / name)
(e / escalate-01, ARG1, c2 / conflict-01)
(e / escalate-01, location, a / area)
(n / name, op, "Georgia")

Decoded in 24,852 microseconds
Sentence: The conflict is a test of Russia's power and military reach.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 9-10:  and => and
Span 1-2:  conflict => conflict-01
Span 10-11:  military => military
Span 8-9:  power => power
Span 11-12:  reach => reach-01
Span 6-7:  Russia => (country :name (name :op "Russia"))
Span 4-5:  test => test-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),reach,reach-01,false), Span(10,11,List(1),military,military,false), Span(9,10,List(2),and,and,false), Span(8,9,List(3),power,power,false), Span(6,7,List(6, 5, 4),Russia,(country :name (name :op "Russia")),false), Span(4,5,List(7),test,test-01,false), Span(1,2,List(8),conflict,conflict-01,false)),Map(2 -> and, 5 -> name, 8 -> conflict-01, 7 -> test-01, 1 -> military, 4 -> country, 6 -> "Russia", 0 -> reach-01, 3 -> power),Map(n -> name, t -> test-01, m -> military, p -> power, a -> and, r -> reach-01, c -> country, c2 -> conflict-01))),[Ljava.lang.String;@78e16155,Annotation([Ljava.lang.String;@54a3ab8f,[Ljava.lang.String;@1968a49c,[Ljava.lang.String;@6a1ebcff),Annotation([Ljava.lang.String;@19868320,[Ljava.lang.String;@50b0bc4c,[Ledu.cmu.lti.nlp.amr.Dependency;@c20be82),Annotation([Ljava.lang.String;@13c612bd,[Ljava.lang.String;@3ef41c66,[Ljava.lang.String;@6b739528),Annotation([Ljava.lang.String;@622ef26a,[Ljava.lang.String;@41de5768,[Ledu.cmu.lti.nlp.amr.Entity;@5f577419))
AMR:
(a / and, op, r / reach-01)
(c / country, name, n / name)
(n / name, op, "Russia")
(p / power, poss, c / country)
(r / reach-01, ARG1, m / military)
(r / reach-01, ARG6, c / country)
(t / test-01, ARG0, c2 / conflict-01)
(t / test-01, ARG1, p / power)

Decoded in 165,159 microseconds
Sentence: Earlier on 8 August 2008 Russian troops and armored vehicles entered South Ossetia.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "South" :op "Ossetia"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 2-5:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 7-8:  and => and
Span 8-9:  armored => armor-01
Span 0-1:  Earlier => early
Span 10-11:  entered => enter-01
Span 5-6:  Russian => (country :name (name :op "Russia"))
Span 11-13:  South Ossetia => (country :name (name :op "South" :op "Ossetia"))
Span 6-7:  troops => troop
Span 9-10:  vehicles => vehicle

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,13,List(3, 2, 1, 0),South Ossetia,(country :name (name :op "South" :op "Ossetia")),false), Span(10,11,List(4),entered,enter-01,false), Span(9,10,List(5),vehicles,vehicle,false), Span(8,9,List(6),armored,armor-01,false), Span(7,8,List(7),and,and,false), Span(6,7,List(8),troops,troop,false), Span(5,6,List(11, 10, 9),Russian,(country :name (name :op "Russia")),false), Span(2,5,List(15, 14, 13, 12),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false), Span(0,1,List(16),Earlier,early,false)),Map(2 -> "South", 5 -> vehicle, 12 -> date-entity, 15 -> 2008, 8 -> troop, 7 -> and, 1 -> name, 4 -> enter-01, 11 -> "Russia", 14 -> 8, 6 -> armor-01, 0 -> country, 9 -> country, 16 -> early, 3 -> "Ossetia", 10 -> name, 13 -> 8),Map(e -> enter-01, n -> name, 2 -> 2008, t -> troop, 8 -> 8, e2 -> early, v -> vehicle, d -> date-entity, a -> armor-01, 82 -> 8, a2 -> and, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@28fa700e,Annotation([Ljava.lang.String;@3d526ad9,[Ljava.lang.String;@e041f0c,[Ljava.lang.String;@6a175569),Annotation([Ljava.lang.String;@11963225,[Ljava.lang.String;@3f3c966c,[Ledu.cmu.lti.nlp.amr.Dependency;@11ee02f8),Annotation([Ljava.lang.String;@4102b1b1,[Ljava.lang.String;@61a5b4ae,[Ljava.lang.String;@3a71c100),Annotation([Ljava.lang.String;@5b69fd74,[Ljava.lang.String;@f325091,[Ledu.cmu.lti.nlp.amr.Entity;@437e951d))
AMR:
(a / armor-01, ARG1, v / vehicle)
(a2 / and, op, v / vehicle)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(e / enter-01, ARG0, a2 / and)
(e / enter-01, ARG1, c / country)
(e / enter-01, ARG6, t / troop)
(e / enter-01, time, e2 / early)
(e2 / early, op, d / date-entity)
(n / name, op, "Ossetia")
(n / name, op, "South")
(n2 / name, op, "Russia")
(t / troop, poss, c2 / country)

Decoded in 1,016,404 microseconds
Sentence: Presence of Russian troops supported the separatist area in its bitter conflict with Georgia.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 7-8:  area => area
Span 11-12:  conflict => conflict-01
Span 13-14:  Georgia => (country :name (name :op "Georgia"))
Span 2-3:  Russian => (country :name (name :op "Russia"))
Span 6-7:  separatist => separatist
Span 4-5:  supported => support-01
Span 3-4:  troops => troop

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(11,12,List(3),conflict,conflict-01,false), Span(7,8,List(4),area,area,false), Span(6,7,List(5),separatist,separatist,false), Span(4,5,List(6),supported,support-01,false), Span(3,4,List(7),troops,troop,false), Span(2,3,List(10, 9, 8),Russian,(country :name (name :op "Russia")),false)),Map(2 -> "Georgia", 5 -> separatist, 8 -> country, 7 -> troop, 1 -> name, 4 -> area, 6 -> support-01, 9 -> name, 0 -> country, 10 -> "Russia", 3 -> conflict-01),Map(n -> name, t -> troop, s2 -> support-01, s -> separatist, c3 -> country, a -> area, c -> country, n2 -> name, c2 -> conflict-01))),[Ljava.lang.String;@77b325b3,Annotation([Ljava.lang.String;@63a5e46c,[Ljava.lang.String;@7e8e8651,[Ljava.lang.String;@49ef32e0),Annotation([Ljava.lang.String;@271f18d3,[Ljava.lang.String;@6bd51ed8,[Ledu.cmu.lti.nlp.amr.Dependency;@61e3a1fd),Annotation([Ljava.lang.String;@51abf713,[Ljava.lang.String;@eadb475,[Ljava.lang.String;@4d4d48a6),Annotation([Ljava.lang.String;@315df4bb,[Ljava.lang.String;@3fc08eec,[Ledu.cmu.lti.nlp.amr.Entity;@5cad8b7d))
AMR:
(a / area, location, c / country)
(a / area, mod, s / separatist)
(c / country, name, n / name)
(c2 / conflict-01, ARG1, c / country)
(c3 / country, name, n2 / name)
(n / name, op, "Georgia")
(n2 / name, op, "Russia")
(s2 / support-01, ARG0, t / troop)
(s2 / support-01, ARG1, a / area)
(t / troop, poss, c3 / country)

Decoded in 222,724 microseconds
Sentence: The U.S., other Western nations and NATO condemned the violence.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 6-7:  and => and
Span 8-9:  condemned => condemn-01
Span 5-6:  nations => nation
Span 7-8:  NATO => (military :name (name :op "NATO"))
Span 3-4:  other => other
Span 1-2:  U.S. => (country :name (name :op "U.S."))
Span 10-11:  violence => violence
Span 4-5:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 86 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),violence,violence,false), Span(8,9,List(1),condemned,condemn-01,false), Span(7,8,List(4, 3, 2),NATO,(military :name (name :op "NATO")),false), Span(6,7,List(5),and,and,false), Span(5,6,List(6),nations,nation,false), Span(4,5,List(9, 8, 7),Western,(world-region :name (name :op "West")),false), Span(3,4,List(10),other,other,false), Span(1,2,List(13, 12, 11),U.S.,(country :name (name :op "U.S.")),false)),Map(2 -> military, 5 -> and, 12 -> name, 8 -> name, 7 -> world-region, 1 -> condemn-01, 4 -> "NATO", 11 -> country, 6 -> nation, 0 -> violence, 9 -> "West", 3 -> name, 10 -> other, 13 -> "U.S."),Map(w -> world-region, n -> name, n4 -> name, m -> military, v -> violence, n3 -> name, a -> and, c -> condemn-01, o -> other, c2 -> country, n2 -> nation))),[Ljava.lang.String;@7b02e036,Annotation([Ljava.lang.String;@25243bc1,[Ljava.lang.String;@1e287667,[Ljava.lang.String;@2e6ee0bc),Annotation([Ljava.lang.String;@4201a617,[Ljava.lang.String;@467f77a5,[Ledu.cmu.lti.nlp.amr.Dependency;@1bb9aa43),Annotation([Ljava.lang.String;@420bc288,[Ljava.lang.String;@df5f5c0,[Ljava.lang.String;@308a6984),Annotation([Ljava.lang.String;@66b72664,[Ljava.lang.String;@7a34b7b8,[Ledu.cmu.lti.nlp.amr.Entity;@58cd06cb))
AMR:
(a / and, op, m / military)
(a / and, op, n2 / nation)
(c / condemn-01, ARG0, c2 / country)
(c / condemn-01, ARG1, v / violence)
(c / condemn-01, location, a / and)
(c2 / country, name, n4 / name)
(m / military, name, n / name)
(n / name, op, "NATO")
(n2 / nation, location, w / world-region)
(n2 / nation, mod, o / other)
(n3 / name, op, "West")
(n4 / name, op, "U.S.")
(w / world-region, name, n3 / name)

Decoded in 886,305 microseconds
Sentence: The U.S., other Western nations and NATO demanded a cease-fire.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 6-7:  and => and
Span 10-11:  cease => cease-01
Span 8-9:  demanded => demand-01
Span 12-13:  fire => fire-01
Span 5-6:  nations => nation
Span 7-8:  NATO => (military :name (name :op "NATO"))
Span 3-4:  other => other
Span 1-2:  U.S. => (country :name (name :op "U.S."))
Span 4-5:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),fire,fire-01,false), Span(10,11,List(1),cease,cease-01,false), Span(8,9,List(2),demanded,demand-01,false), Span(7,8,List(5, 4, 3),NATO,(military :name (name :op "NATO")),false), Span(6,7,List(6),and,and,false), Span(5,6,List(7),nations,nation,false), Span(4,5,List(10, 9, 8),Western,(world-region :name (name :op "West")),false), Span(3,4,List(11),other,other,false), Span(1,2,List(14, 13, 12),U.S.,(country :name (name :op "U.S.")),false)),Map(2 -> demand-01, 5 -> "NATO", 12 -> country, 8 -> world-region, 7 -> nation, 1 -> cease-01, 4 -> name, 11 -> other, 14 -> "U.S.", 6 -> and, 0 -> fire-01, 9 -> name, 3 -> military, 10 -> "West", 13 -> name),Map(w -> world-region, n -> name, n4 -> name, m -> military, d -> demand-01, n3 -> name, a -> and, c -> cease-01, o -> other, f -> fire-01, c2 -> country, n2 -> nation))),[Ljava.lang.String;@3be8821f,Annotation([Ljava.lang.String;@64b31700,[Ljava.lang.String;@3b65e559,[Ljava.lang.String;@bae47a0),Annotation([Ljava.lang.String;@74a9c4b0,[Ljava.lang.String;@85ec632,[Ledu.cmu.lti.nlp.amr.Dependency;@1c05a54d),Annotation([Ljava.lang.String;@65ef722a,[Ljava.lang.String;@5fd9b663,[Ljava.lang.String;@214894fc),Annotation([Ljava.lang.String;@10567255,[Ljava.lang.String;@e362c57,[Ledu.cmu.lti.nlp.amr.Entity;@1c4ee95c))
AMR:
(a / and, op, m / military)
(a / and, op, n2 / nation)
(c / cease-01, ARG0, c2 / country)
(c / cease-01, ARG1, f / fire-01)
(c2 / country, name, n4 / name)
(d / demand-01, ARG0, a / and)
(d / demand-01, ARG1, f / fire-01)
(f / fire-01, ARG1, o / other)
(m / military, name, n / name)
(n / name, op, "NATO")
(n2 / nation, location, w / world-region)
(n3 / name, op, "West")
(n4 / name, op, "U.S.")
(w / world-region, name, n3 / name)

Decoded in 538,314 microseconds
Sentence: U.S. Secretary of State Condoleezza Rice demanded Russia withdraw its forces.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (person :name (name :op "Condoleezza" :op "Rice"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 4-6:  Condoleezza Rice => (person :name (name :op "Condoleezza" :op "Rice"))
Span 6-7:  demanded => demand-01
Span 10-11:  forces => force
Span 7-8:  Russia => (country :name (name :op "Russia"))
Span 1-2:  Secretary => (have-org-role-91 :ARG2 secretary)
Span 0-1:  U.S. => (country :name (name :op "U.S."))
Span 8-9:  withdraw => withdraw-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),forces,force,false), Span(8,9,List(1),withdraw,withdraw-01,false), Span(7,8,List(4, 3, 2),Russia,(country :name (name :op "Russia")),false), Span(6,7,List(5),demanded,demand-01,false), Span(4,6,List(9, 8, 7, 6),Condoleezza Rice,(person :name (name :op "Condoleezza" :op "Rice")),false), Span(1,2,List(11, 10),Secretary,(have-org-role-91 :ARG2 secretary),false), Span(0,1,List(14, 13, 12),U.S.,(country :name (name :op "U.S.")),false)),Map(2 -> country, 5 -> demand-01, 12 -> country, 8 -> "Condoleezza", 7 -> name, 1 -> withdraw-01, 4 -> "Russia", 11 -> secretary, 14 -> "U.S.", 6 -> person, 0 -> force, 9 -> "Rice", 3 -> name, 10 -> have-org-role-91, 13 -> name),Map(n -> name, w -> withdraw-01, h -> have-org-role-91, s -> secretary, d -> demand-01, p -> person, n3 -> name, c -> country, f -> force, c2 -> country, n2 -> name))),[Ljava.lang.String;@79c4715d,Annotation([Ljava.lang.String;@5aa360ea,[Ljava.lang.String;@6548bb7d,[Ljava.lang.String;@e27ba81),Annotation([Ljava.lang.String;@54336c81,[Ljava.lang.String;@1556f2dd,[Ledu.cmu.lti.nlp.amr.Dependency;@35e52059),Annotation([Ljava.lang.String;@62577d6,[Ljava.lang.String;@49bd54f7,[Ljava.lang.String;@6b5f8707),Annotation([Ljava.lang.String;@772485dd,[Ljava.lang.String;@5a12c728,[Ledu.cmu.lti.nlp.amr.Entity;@79ab3a71))
AMR:
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(d / demand-01, ARG1, w / withdraw-01)
(f / force, poss, c / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, s / secretary)
(n / name, op, "Russia")
(n2 / name, op, "Condoleezza")
(n2 / name, op, "Rice")
(n3 / name, op, "U.S.")
(p / person, name, n2 / name)
(w / withdraw-01, ARG0, p / person)
(w / withdraw-01, ARG1, c / country)

Decoded in 253,034 microseconds
Sentence: Russian soldiers remained in Georgia.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 4-5:  Georgia => (country :name (name :op "Georgia"))
Span 2-3:  remained => remain-01
Span 0-1:  Russian => (country :name (name :op "Russia"))
Span 1-2:  soldiers => (have-org-role-91 :ARG2 soldier)

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(2,3,List(3),remained,remain-01,false), Span(1,2,List(5, 4),soldiers,(have-org-role-91 :ARG2 soldier),false), Span(0,1,List(8, 7, 6),Russian,(country :name (name :op "Russia")),false)),Map(2 -> "Georgia", 5 -> soldier, 8 -> "Russia", 7 -> name, 1 -> name, 4 -> have-org-role-91, 6 -> country, 0 -> country, 3 -> remain-01),Map(n -> name, h -> have-org-role-91, s -> soldier, r -> remain-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@6e5bfdfc,Annotation([Ljava.lang.String;@3d829787,[Ljava.lang.String;@71652c98,[Ljava.lang.String;@51bde877),Annotation([Ljava.lang.String;@60b85ba1,[Ljava.lang.String;@492fc69e,[Ledu.cmu.lti.nlp.amr.Dependency;@117632cf),Annotation([Ljava.lang.String;@2fb68ec6,[Ljava.lang.String;@d71adc2,[Ljava.lang.String;@3add81c4),Annotation([Ljava.lang.String;@1a1d3c1a,[Ljava.lang.String;@1c65121,[Ledu.cmu.lti.nlp.amr.Entity;@159e366))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, s / soldier)
(n / name, op, "Georgia")
(n2 / name, op, "Russia")
(r / remain-01, ARG0, s / soldier)
(r / remain-01, location, c / country)

Decoded in 148,807 microseconds
Sentence: Georgian officials report there was at least 1 airstrike on the Black Sea port of Poti late on 8 August 2008.

NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (country :name (name :op "Black" :op "Sea"))
NER Entity: (country :name (name :op "Poti"))
mkDayMonthYear(8	August	2008,8,August,2008)
Spans:
Span 7-8:  1 => 1
Span 18-21:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 11-13:  Black Sea => (country :name (name :op "Black" :op "Sea"))
Span 16-17:  late => late
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 13-14:  port => port
Span 2-3:  report => report

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,21,List(3, 2, 1, 0),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false), Span(16,17,List(4),late,late,false), Span(13,14,List(5),port,port,false), Span(11,13,List(9, 8, 7, 6),Black Sea,(country :name (name :op "Black" :op "Sea")),false), Span(7,8,List(10),1,1,false), Span(2,3,List(11),report,report,false), Span(1,2,List(13, 12),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> 8, 5 -> port, 12 -> have-org-role-91, 8 -> "Black", 7 -> name, 1 -> 8, 4 -> late, 11 -> report, 6 -> country, 0 -> date-entity, 9 -> "Sea", 3 -> 2008, 10 -> 1, 13 -> official),Map(n -> name, h -> have-org-role-91, 2 -> 2008, 8 -> 8, d -> date-entity, 1 -> 1, p -> port, 82 -> 8, r -> report, c -> country, l -> late, o -> official))),[Ljava.lang.String;@57dc9128,Annotation([Ljava.lang.String;@24528a25,[Ljava.lang.String;@17ae98d7,[Ljava.lang.String;@59221b97),Annotation([Ljava.lang.String;@6ac4944a,[Ljava.lang.String;@5a772895,[Ledu.cmu.lti.nlp.amr.Dependency;@39fc6b2c),Annotation([Ljava.lang.String;@704b2127,[Ljava.lang.String;@3ee39da0,[Ljava.lang.String;@5d332969),Annotation([Ljava.lang.String;@7cc9ce8,[Ljava.lang.String;@2e27d72f,[Ledu.cmu.lti.nlp.amr.Entity;@c0b41d6))
AMR:
(1 / 1, calendar, r / report)
(1 / 1, poss, l / late)
(c / country, name, n / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(h / have-org-role-91, ARG0, 1 / 1)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(l / late, op, d / date-entity)
(n / name, op, "Black")
(n / name, op, "Sea")
(p / port, mod, c / country)

Decoded in 219,002 microseconds
Sentence: Russia and Georgia showed no indication of relenting.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 1-2:  and => and
Span 2-3:  Georgia => (country :name (name :op "Georgia"))
Span 5-6:  indication => indicate-01
Span 4-5:  no => -
Span 0-1:  Russia => (country :name (name :op "Russia"))
Span 3-4:  showed => show-01

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),indication,indicate-01,false), Span(4,5,List(1),no,-,false), Span(3,4,List(2),showed,show-01,false), Span(2,3,List(5, 4, 3),Georgia,(country :name (name :op "Georgia")),false), Span(1,2,List(6),and,and,false), Span(0,1,List(9, 8, 7),Russia,(country :name (name :op "Russia")),false)),Map(2 -> show-01, 5 -> "Georgia", 8 -> name, 7 -> country, 1 -> -, 4 -> name, 6 -> and, 9 -> "Russia", 0 -> indicate-01, 3 -> country),Map(n -> name, s -> show-01, a -> and, i -> indicate-01, - -> -, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@4837595f,Annotation([Ljava.lang.String;@2bffa76d,[Ljava.lang.String;@3b718392,[Ljava.lang.String;@6d2260db),Annotation([Ljava.lang.String;@1f2d2181,[Ljava.lang.String;@49bf29c6,[Ledu.cmu.lti.nlp.amr.Dependency;@7ee55e70),Annotation([Ljava.lang.String;@3fcdcf,[Ljava.lang.String;@7668d560,[Ljava.lang.String;@46292372),Annotation([Ljava.lang.String;@126be319,[Ljava.lang.String;@6c44052e,[Ledu.cmu.lti.nlp.amr.Entity;@5c371e13))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(i / indicate-01, ARG6, - / -)
(n / name, op, "Georgia")
(n2 / name, op, "Russia")
(s / show-01, ARG0, a / and)
(s / show-01, ARG1, i / indicate-01)

Decoded in 413,249 microseconds
Sentence: Russian Prime Minister Vladimir V. Putin stated that war has started.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Vladimir" :op "V." :op "Putin"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 1-2:  Prime => prime
Span 0-1:  Russian => (country :name (name :op "Russia"))
Span 10-11:  started => start-01
Span 6-7:  stated => state-01
Span 3-6:  Vladimir V. Putin => (person :name (name :op "Vladimir" :op "V." :op "Putin"))
Span 8-9:  war => war

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),started,start-01,false), Span(8,9,List(1),war,war,false), Span(6,7,List(2),stated,state-01,false), Span(3,6,List(7, 6, 5, 4, 3),Vladimir V. Putin,(person :name (name :op "Vladimir" :op "V." :op "Putin")),false), Span(2,3,List(9, 8),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(10),Prime,prime,false), Span(0,1,List(13, 12, 11),Russian,(country :name (name :op "Russia")),false)),Map(2 -> state-01, 5 -> "Vladimir", 12 -> name, 8 -> have-org-role-91, 7 -> "Putin", 1 -> war, 4 -> name, 11 -> country, 6 -> "V.", 0 -> start-01, 9 -> minister, 3 -> person, 10 -> prime, 13 -> "Russia"),Map(n -> name, w -> war, h -> have-org-role-91, s2 -> state-01, p2 -> prime, s -> start-01, m -> minister, p -> person, c -> country, n2 -> name))),[Ljava.lang.String;@530a8454,Annotation([Ljava.lang.String;@1e34c607,[Ljava.lang.String;@5215cd9a,[Ljava.lang.String;@36b6964d),Annotation([Ljava.lang.String;@31198ceb,[Ljava.lang.String;@9257031,[Ledu.cmu.lti.nlp.amr.Dependency;@75201592),Annotation([Ljava.lang.String;@7726e185,[Ljava.lang.String;@aa5455e,[Ljava.lang.String;@282308c3),Annotation([Ljava.lang.String;@5dda14d0,[Ljava.lang.String;@1db0ec27,[Ledu.cmu.lti.nlp.amr.Entity;@3d9fc57a))
AMR:
(c / country, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p2 / prime)
(n / name, op, "Putin")
(n / name, op, "V.")
(n / name, op, "Vladimir")
(n2 / name, op, "Russia")
(p / person, name, n / name)
(s / start-01, ARG1, w / war)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, s / start-01)

Decoded in 51,525 microseconds
Sentence: Georgian President Mikheil Saakashvili accused Russia of a well-planned invasion.

NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (person :name (name :op "Mikheil" :op "Saakashvili"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 4-5:  accused => accuse-01
Span 11-12:  invasion => invade-01
Span 2-4:  Mikheil Saakashvili => (person :name (name :op "Mikheil" :op "Saakashvili"))
Span 10-11:  planned => plan-01
Span 1-2:  President => (have-org-role-91 :ARG2 president)
Span 5-6:  Russia => (country :name (name :op "Russia"))
Span 8-9:  well => well

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),invasion,invade-01,false), Span(10,11,List(1),planned,plan-01,false), Span(8,9,List(2),well,well,false), Span(5,6,List(5, 4, 3),Russia,(country :name (name :op "Russia")),false), Span(4,5,List(6),accused,accuse-01,false), Span(2,4,List(10, 9, 8, 7),Mikheil Saakashvili,(person :name (name :op "Mikheil" :op "Saakashvili")),false), Span(1,2,List(12, 11),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> well, 5 -> "Russia", 12 -> president, 8 -> name, 7 -> person, 1 -> plan-01, 4 -> name, 11 -> have-org-role-91, 6 -> accuse-01, 0 -> invade-01, 9 -> "Mikheil", 3 -> country, 10 -> "Saakashvili"),Map(n -> name, w -> well, h -> have-org-role-91, p2 -> person, p -> plan-01, a -> accuse-01, i -> invade-01, c -> country, p3 -> president, n2 -> name))),[Ljava.lang.String;@d4ab71a,Annotation([Ljava.lang.String;@3b4ef7,[Ljava.lang.String;@1af05b03,[Ljava.lang.String;@5987e932),Annotation([Ljava.lang.String;@1ad777f,[Ljava.lang.String;@5bbbdd4b,[Ledu.cmu.lti.nlp.amr.Dependency;@438bad7c),Annotation([Ljava.lang.String;@25230246,[Ljava.lang.String;@4fdf8f12,[Ljava.lang.String;@4a8b5227),Annotation([Ljava.lang.String;@54f5f647,[Ljava.lang.String;@6979efad,[Ledu.cmu.lti.nlp.amr.Entity;@5a6d5a8f))
AMR:
(a / accuse-01, ARG0, p2 / person)
(a / accuse-01, ARG1, c / country)
(a / accuse-01, ARG2, i / invade-01)
(c / country, name, n / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG2, p3 / president)
(i / invade-01, ARG1, p / plan-01)
(n / name, op, "Russia")
(n2 / name, op, "Mikheil")
(n2 / name, op, "Saakashvili")
(p / plan-01, ARG1, w / well)
(p2 / person, name, n2 / name)

Decoded in 87,032 microseconds
Sentence: Georgia mobilized military reserves.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 2-3:  military => military
Span 1-2:  mobilized => mobilize-01
Span 3-4:  reserves => reserve

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),reserves,reserve,false), Span(2,3,List(1),military,military,false), Span(1,2,List(2),mobilized,mobilize-01,false), Span(0,1,List(5, 4, 3),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> mobilize-01, 5 -> "Georgia", 1 -> military, 4 -> name, 0 -> reserve, 3 -> country),Map(n -> name, m2 -> mobilize-01, m -> military, r -> reserve, c -> country))),[Ljava.lang.String;@4a67318f,Annotation([Ljava.lang.String;@315ba14a,[Ljava.lang.String;@17f9344b,[Ljava.lang.String;@27f0ad19),Annotation([Ljava.lang.String;@54e81b21,[Ljava.lang.String;@38d5b107,[Ledu.cmu.lti.nlp.amr.Dependency;@6650813a),Annotation([Ljava.lang.String;@44ea608c,[Ljava.lang.String;@50cf5a23,[Ljava.lang.String;@450794b4),Annotation([Ljava.lang.String;@273c947f,[Ljava.lang.String;@30457e14,[Ledu.cmu.lti.nlp.amr.Entity;@1af1347d))
AMR:
(c / country, name, n / name)
(m2 / mobilize-01, ARG0, c / country)
(m2 / mobilize-01, ARG1, r / reserve)
(n / name, op, "Georgia")
(r / reserve, mod, m / military)

Decoded in 27,220 microseconds
Sentence: On 8 August 2008 Georgian government web sites crashed intermittently.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Georgian"))
Spans:
Span 1-4:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 5-6:  government => (government-organization :ARG0-of govern-01)
Span 7-8:  sites => site
Span 6-7:  web => web

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),sites,site,false), Span(6,7,List(1),web,web,false), Span(5,6,List(3, 2),government,(government-organization :ARG0-of govern-01),false), Span(1,4,List(7, 6, 5, 4),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false)),Map(2 -> government-organization, 5 -> 8, 7 -> 2008, 1 -> web, 4 -> date-entity, 6 -> 8, 0 -> site, 3 -> govern-01),Map(w -> web, 2 -> 2008, 8 -> 8, s -> site, d -> date-entity, g2 -> govern-01, g -> government-organization, 82 -> 8))),[Ljava.lang.String;@632aa1a3,Annotation([Ljava.lang.String;@20765ed5,[Ljava.lang.String;@3b582111,[Ljava.lang.String;@2899a8db),Annotation([Ljava.lang.String;@1e8823d2,[Ljava.lang.String;@c1a4620,[Ledu.cmu.lti.nlp.amr.Dependency;@76b0ae1b),Annotation([Ljava.lang.String;@130a0f66,[Ljava.lang.String;@4c432866,[Ljava.lang.String;@12365c88),Annotation([Ljava.lang.String;@6105f8a3,[Ljava.lang.String;@2237bada,[Ledu.cmu.lti.nlp.amr.Entity;@77e2a6e2))
AMR:
(d / date-entity, calendar, g / government-organization)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, w / web)
(s / site, poss, g / government-organization)

Decoded in 80,981 microseconds
Sentence: The crashes are signs of a cyber-warfare campaign against Georgia.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 9-10:  campaign => campaign-01
Span 6-7:  cyber => cyber
Span 11-12:  Georgia => (country :name (name :op "Georgia"))
Span 3-4:  signs => sign
Span 8-9:  warfare => warfare

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(9,10,List(3),campaign,campaign-01,false), Span(8,9,List(4),warfare,warfare,false), Span(6,7,List(5),cyber,cyber,false), Span(3,4,List(6),signs,sign,false)),Map(2 -> "Georgia", 5 -> cyber, 1 -> name, 4 -> warfare, 6 -> sign, 0 -> country, 3 -> campaign-01),Map(w -> warfare, n -> name, s -> sign, c3 -> cyber, c -> country, c2 -> campaign-01))),[Ljava.lang.String;@5710768a,Annotation([Ljava.lang.String;@199e4c2b,[Ljava.lang.String;@6e0d4a8,[Ljava.lang.String;@64d7b720),Annotation([Ljava.lang.String;@30272916,[Ljava.lang.String;@5bb3d42d,[Ledu.cmu.lti.nlp.amr.Dependency;@5bf61e67),Annotation([Ljava.lang.String;@2c1dc8e,[Ljava.lang.String;@b273a59,[Ljava.lang.String;@4e7095ac),Annotation([Ljava.lang.String;@251ebf23,[Ljava.lang.String;@29b732a2,[Ledu.cmu.lti.nlp.amr.Entity;@1b70203f))
AMR:
(c / country, name, n / name)
(c2 / campaign-01, ARG0, c / country)
(c2 / campaign-01, ARG1, w / warfare)
(n / name, op, "Georgia")
(s / sign, poss, c2 / campaign-01)
(w / warfare, mod, c3 / cyber)

Decoded in 54,162 microseconds
Sentence: The dispute could renew a sustained conflict in the Caucasus region.

NER Entity: (country :name (name :op "Caucasus"))
Spans:
Span 6-7:  conflict => conflict-01
Span 2-3:  could => possible
Span 1-2:  dispute => dispute-01
Span 10-11:  region => region
Span 5-6:  sustained => sustain-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),region,region,false), Span(6,7,List(1),conflict,conflict-01,false), Span(5,6,List(2),sustained,sustain-01,false), Span(2,3,List(3),could,possible,false), Span(1,2,List(4),dispute,dispute-01,false)),Map(2 -> sustain-01, 1 -> conflict-01, 4 -> dispute-01, 0 -> region, 3 -> possible),Map(s -> sustain-01, d -> dispute-01, p -> possible, r -> region, c -> conflict-01))),[Ljava.lang.String;@51671b08,Annotation([Ljava.lang.String;@15051a0,[Ljava.lang.String;@1162410a,[Ljava.lang.String;@b09fac1),Annotation([Ljava.lang.String;@62df0ff3,[Ljava.lang.String;@61019f59,[Ledu.cmu.lti.nlp.amr.Dependency;@62e8f862),Annotation([Ljava.lang.String;@26f3d90c,[Ljava.lang.String;@3c49fab6,[Ljava.lang.String;@515f4131),Annotation([Ljava.lang.String;@74518890,[Ljava.lang.String;@4c5204af,[Ledu.cmu.lti.nlp.amr.Entity;@3f3ddbd9))
AMR:
(c / conflict-01, ARG0, d / dispute-01)
(c / conflict-01, ARG1, r / region)
(p / possible, domain, c / conflict-01)
(s / sustain-01, ARG1, c / conflict-01)

Decoded in 20,665 microseconds
Sentence: The Caucus region is an important conduit for the flow of oil from the Caspian Sea to world markets.

NER Entity: (country :name (name :op "Caspian" :op "Sea"))
Spans:
Span 14-16:  Caspian Sea => (sea :name (name :op "Sea" :op "Caspian"))
Span 6-7:  conduit => conduit
Span 9-10:  flow => flow-01
Span 5-6:  important => important
Span 18-19:  markets => market
Span 11-12:  oil => oil
Span 2-3:  region => region
Span 17-18:  world => world

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),markets,market,false), Span(17,18,List(1),world,world,false), Span(14,16,List(5, 4, 3, 2),Caspian Sea,(sea :name (name :op "Sea" :op "Caspian")),false), Span(11,12,List(6),oil,oil,false), Span(9,10,List(7),flow,flow-01,false), Span(6,7,List(8),conduit,conduit,false), Span(5,6,List(9),important,important,false), Span(2,3,List(10),region,region,false)),Map(2 -> sea, 5 -> "Caspian", 8 -> conduit, 7 -> flow-01, 1 -> world, 4 -> "Sea", 6 -> oil, 9 -> important, 0 -> market, 10 -> region, 3 -> name),Map(n -> name, w -> world, s -> sea, m -> market, r -> region, i -> important, c -> conduit, f -> flow-01, o -> oil))),[Ljava.lang.String;@14c053c6,Annotation([Ljava.lang.String;@6c2d4cc6,[Ljava.lang.String;@30865a90,[Ljava.lang.String;@6134ac4a),Annotation([Ljava.lang.String;@777c9dc9,[Ljava.lang.String;@71b1a49c,[Ledu.cmu.lti.nlp.amr.Dependency;@73e132e0),Annotation([Ljava.lang.String;@3773862a,[Ljava.lang.String;@2472c7d8,[Ljava.lang.String;@589b028e),Annotation([Ljava.lang.String;@22175d4f,[Ljava.lang.String;@9fecdf1,[Ledu.cmu.lti.nlp.amr.Entity;@3b809711))
AMR:
(c / conduit, domain, r / region)
(c / conduit, mod, f / flow-01)
(c / conduit, mod, i / important)
(f / flow-01, ARG0, s / sea)
(f / flow-01, ARG1, o / oil)
(m / market, mod, w / world)
(n / name, op, "Caspian")
(n / name, op, "Sea")
(s / sea, name, n / name)
(s / sea, prep-to, m / market)

Decoded in 70,442 microseconds
Sentence: Conflict in the caucus region has lasted for years along Russia's borders.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 9-10:  along => along
Span 12-13:  borders => border
Span 6-7:  lasted => last-01
Span 4-5:  region => region
Span 10-11:  Russia => (country :name (name :op "Russia"))
Span 8-9:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),borders,border,false), Span(10,11,List(3, 2, 1),Russia,(country :name (name :op "Russia")),false), Span(9,10,List(4),along,along,false), Span(8,9,List(6, 5),years,(temporal-quantity :unit year),false), Span(6,7,List(7),lasted,last-01,false), Span(4,5,List(8),region,region,false)),Map(2 -> name, 5 -> temporal-quantity, 8 -> region, 7 -> last-01, 1 -> country, 4 -> along, 6 -> year, 0 -> border, 3 -> "Russia"),Map(n -> name, t -> temporal-quantity, b -> border, y -> year, a -> along, r -> region, l -> last-01, c -> country))),[Ljava.lang.String;@3b0f7d9d,Annotation([Ljava.lang.String;@236ab296,[Ljava.lang.String;@5c84624f,[Ljava.lang.String;@63034ed1),Annotation([Ljava.lang.String;@232024b9,[Ljava.lang.String;@55a8dc49,[Ledu.cmu.lti.nlp.amr.Dependency;@2a415aa9),Annotation([Ljava.lang.String;@53cdecf6,[Ljava.lang.String;@71ea1fda,[Ljava.lang.String;@62b3df3a),Annotation([Ljava.lang.String;@420745d7,[Ljava.lang.String;@7e11ab3d,[Ledu.cmu.lti.nlp.amr.Entity;@5fa47fea))
AMR:
(a / along, op, b / border)
(b / border, poss, c / country)
(c / country, name, n / name)
(l / last-01, ARG2, t / temporal-quantity)
(n / name, op, "Russia")
(r / region, mod, c / country)
(t / temporal-quantity, location, a / along)
(t / temporal-quantity, unit, y / year)

Decoded in 157,506 microseconds
Sentence: The conflict has taken place most recently in Chechnya.

NER Entity: (country :name (name :op "Chechnya"))
NER Entity: (country :name (name :op "Chechnya"))
Spans:
Span 8-9:  Chechnya => (name :op "Chechnya")
Span 1-2:  conflict => conflict-01
Span 5-6:  most => most
Span 4-5:  place => place
Span 6-7:  recently => recent
Span 3-4:  taken => take-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(1, 0),Chechnya,(name :op "Chechnya"),false), Span(6,7,List(2),recently,recent,false), Span(5,6,List(3),most,most,false), Span(4,5,List(4),place,place,false), Span(3,4,List(5),taken,take-01,false), Span(1,2,List(6),conflict,conflict-01,false)),Map(2 -> recent, 5 -> take-01, 1 -> "Chechnya", 4 -> place, 6 -> conflict-01, 0 -> name, 3 -> most),Map(n -> name, t -> take-01, m -> most, p -> place, r -> recent, c -> conflict-01))),[Ljava.lang.String;@2392212b,Annotation([Ljava.lang.String;@5b43e173,[Ljava.lang.String;@28f8e165,[Ljava.lang.String;@545f80bf),Annotation([Ljava.lang.String;@66f66866,[Ljava.lang.String;@22fa55b2,[Ledu.cmu.lti.nlp.amr.Dependency;@4d666b41),Annotation([Ljava.lang.String;@6594402a,[Ljava.lang.String;@30f4b1a6,[Ljava.lang.String;@405325cf),Annotation([Ljava.lang.String;@3e1162e7,[Ljava.lang.String;@79c3f01f,[Ledu.cmu.lti.nlp.amr.Entity;@6c2f1700))
AMR:
(n / name, op, "Chechnya")
(r / recent, degree, m / most)
(t / take-01, ARG0, c / conflict-01)
(t / take-01, ARG1, p / place)
(t / take-01, ARG6, n / name)
(t / take-01, time, r / recent)

Decoded in 52,125 microseconds
Sentence: Russia's military incursion into Georgia indicates Russia's confidence and resolve.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 10-11:  and => and
Span 9-10:  confidence => confidence
Span 5-6:  Georgia => (country :name (name :op "Georgia"))
Span 6-7:  indicates => indicate-01
Span 2-3:  military => military
Span 11-12:  resolve => resolve-01
Span 7-8:  Russia => (country :name (name :op "Russia"))
Span 0-1:  Russia => (country :name (name :op "Russia"))

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),resolve,resolve-01,false), Span(10,11,List(1),and,and,false), Span(9,10,List(2),confidence,confidence,false), Span(7,8,List(5, 4, 3),Russia,(country :name (name :op "Russia")),false), Span(6,7,List(6),indicates,indicate-01,false), Span(5,6,List(9, 8, 7),Georgia,(country :name (name :op "Georgia")),false), Span(2,3,List(10),military,military,false), Span(0,1,List(13, 12, 11),Russia,(country :name (name :op "Russia")),false)),Map(2 -> confidence, 5 -> "Russia", 12 -> name, 8 -> name, 7 -> country, 1 -> and, 4 -> name, 11 -> country, 6 -> indicate-01, 0 -> resolve-01, 9 -> "Georgia", 3 -> country, 10 -> military, 13 -> "Russia"),Map(n -> name, c4 -> country, m -> military, n3 -> name, c3 -> country, a -> and, i -> indicate-01, r -> resolve-01, c -> confidence, n2 -> name, c2 -> country))),[Ljava.lang.String;@350b3a17,Annotation([Ljava.lang.String;@38600b,[Ljava.lang.String;@669d2b1b,[Ljava.lang.String;@721eb7df),Annotation([Ljava.lang.String;@1ea9f009,[Ljava.lang.String;@5d52e3ef,[Ledu.cmu.lti.nlp.amr.Dependency;@5298dead),Annotation([Ljava.lang.String;@553f3b6e,[Ljava.lang.String;@4c7a078,[Ljava.lang.String;@4e406694),Annotation([Ljava.lang.String;@5ab9b447,[Ljava.lang.String;@76f10035,[Ledu.cmu.lti.nlp.amr.Entity;@4f8caaf3))
AMR:
(a / and, op, i / indicate-01)
(a / and, op, r / resolve-01)
(c / confidence, poss, c2 / country)
(c / confidence, poss, c4 / country)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(i / indicate-01, ARG1, c / confidence)
(m / military, mod, c4 / country)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(n3 / name, op, "Russia")
(r / resolve-01, ARG1, c3 / country)

Decoded in 316,566 microseconds
Sentence: Russia's military incursion provided a test of the capacities of the Russian military.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 13-14:  military => military
Span 2-3:  military => military
Span 4-5:  provided => provide-01
Span 0-1:  Russia => (country :name (name :op "Russia"))
Span 12-13:  Russian => (country :name (name :op "Russia"))
Span 6-7:  test => test-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),military,military,false), Span(12,13,List(3, 2, 1),Russian,(country :name (name :op "Russia")),false), Span(6,7,List(4),test,test-01,false), Span(4,5,List(5),provided,provide-01,false), Span(2,3,List(6),military,military,false), Span(0,1,List(9, 8, 7),Russia,(country :name (name :op "Russia")),false)),Map(2 -> name, 5 -> provide-01, 8 -> name, 7 -> country, 1 -> country, 4 -> test-01, 6 -> military, 9 -> "Russia", 0 -> military, 3 -> "Russia"),Map(n -> name, t -> test-01, m2 -> military, m -> military, p -> provide-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@2b50150,Annotation([Ljava.lang.String;@15b986cd,[Ljava.lang.String;@6bb7cce7,[Ljava.lang.String;@41c62850),Annotation([Ljava.lang.String;@6b530eb9,[Ljava.lang.String;@328572f0,[Ledu.cmu.lti.nlp.amr.Dependency;@678040b3),Annotation([Ljava.lang.String;@17f460bb,[Ljava.lang.String;@64a1923a,[Ljava.lang.String;@7d2a6eac),Annotation([Ljava.lang.String;@18ca3c62,[Ljava.lang.String;@2c0f7678,[Ledu.cmu.lti.nlp.amr.Entity;@44d70181))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(m / military, mod, c / country)
(m / military, poss, c2 / country)
(m2 / military, mod, c2 / country)
(n / name, op, "Russia")
(n2 / name, op, "Russia")
(p / provide-01, ARG1, t / test-01)
(t / test-01, ARG1, m / military)

Decoded in 41,844 microseconds
Sentence: Putin attempted to modernize and re-equip the Russian military during his 2 presidential terms.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 13-14:  2 => 2
Span 4-5:  and => and
Span 1-2:  attempted => attempt-01
Span 11-12:  during => during
Span 7-8:  equip => equip-01
Span 10-11:  military => military
Span 3-4:  modernize => modernize-01
Span 14-15:  presidential => (have-org-role-91 :ARG2 president)
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 9-10:  Russian => (country :name (name :op "Russia"))
Span 15-16:  terms => term

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),terms,term,false), Span(14,15,List(2, 1),presidential,(have-org-role-91 :ARG2 president),false), Span(13,14,List(3),2,2,false), Span(11,12,List(4),during,during,false), Span(10,11,List(5),military,military,false), Span(9,10,List(8, 7, 6),Russian,(country :name (name :op "Russia")),false), Span(7,8,List(9),equip,equip-01,false), Span(4,5,List(10),and,and,false), Span(3,4,List(11),modernize,modernize-01,false), Span(1,2,List(12),attempted,attempt-01,false), Span(0,1,List(15, 14, 13),Putin,(person :name (name :op "Putin")),false)),Map(2 -> president, 5 -> military, 12 -> attempt-01, 15 -> "Putin", 8 -> "Russia", 7 -> name, 1 -> have-org-role-91, 4 -> during, 11 -> modernize-01, 14 -> name, 6 -> country, 0 -> term, 9 -> equip-01, 3 -> 2, 10 -> and, 13 -> person),Map(e -> equip-01, n -> name, h -> have-org-role-91, 2 -> 2, t -> term, m2 -> modernize-01, p2 -> person, d -> during, m -> military, p -> president, a -> and, a2 -> attempt-01, c -> country, n2 -> name))),[Ljava.lang.String;@6aa648b9,Annotation([Ljava.lang.String;@23c650a3,[Ljava.lang.String;@742d4e15,[Ljava.lang.String;@88a8218),Annotation([Ljava.lang.String;@50b1f030,[Ljava.lang.String;@4163f1cd,[Ledu.cmu.lti.nlp.amr.Dependency;@5fa05212),Annotation([Ljava.lang.String;@3e681bc,[Ljava.lang.String;@5c09d180,[Ljava.lang.String;@23aae55),Annotation([Ljava.lang.String;@5f574cc2,[Ljava.lang.String;@680bddf5,[Ledu.cmu.lti.nlp.amr.Entity;@7a9c84a5))
AMR:
(a / and, op, e / equip-01)
(a / and, op, m2 / modernize-01)
(a2 / attempt-01, ARG0, p2 / person)
(a2 / attempt-01, ARG1, m2 / modernize-01)
(a2 / attempt-01, time, d / during)
(c / country, name, n / name)
(d / during, op, t / term)
(e / equip-01, ARG1, 2 / 2)
(h / have-org-role-91, ARG1, t / term)
(h / have-org-role-91, ARG2, p / president)
(m / military, mod, c / country)
(m2 / modernize-01, ARG0, p2 / person)
(m2 / modernize-01, ARG1, m / military)
(n / name, op, "Russia")
(n2 / name, op, "Putin")
(p2 / person, name, n2 / name)

Decoded in 644,583 microseconds
Sentence: Earlier in 2008 Russia announced it was broadly expanding support for the separatist regions.

NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 2-3:  2008 => (date-entity :year 2008)
Span 4-5:  announced => announce-01
Span 0-1:  Earlier => early
Span 8-9:  expanding => expand-01
Span 5-6:  it => it
Span 13-14:  regions => region
Span 3-4:  Russia => (country :name (name :op "Russia"))
Span 12-13:  separatist => separatist
Span 9-10:  support => support-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),regions,region,false), Span(12,13,List(1),separatist,separatist,false), Span(9,10,List(2),support,support-01,false), Span(8,9,List(3),expanding,expand-01,false), Span(5,6,List(4),it,it,false), Span(4,5,List(5),announced,announce-01,false), Span(3,4,List(8, 7, 6),Russia,(country :name (name :op "Russia")),false), Span(2,3,List(10, 9),2008,(date-entity :year 2008),false), Span(0,1,List(11),Earlier,early,false)),Map(2 -> support-01, 5 -> announce-01, 8 -> "Russia", 7 -> name, 1 -> separatist, 11 -> early, 4 -> it, 6 -> country, 9 -> date-entity, 0 -> region, 10 -> 2008, 3 -> expand-01),Map(n -> name, e -> expand-01, 2 -> 2008, s2 -> support-01, e2 -> early, s -> separatist, d -> date-entity, a -> announce-01, i -> it, r -> region, c -> country))),[Ljava.lang.String;@2d83c5a5,Annotation([Ljava.lang.String;@48d7ad8b,[Ljava.lang.String;@7e053511,[Ljava.lang.String;@60222fd8),Annotation([Ljava.lang.String;@53bf7094,[Ljava.lang.String;@26f1249d,[Ledu.cmu.lti.nlp.amr.Dependency;@710b30ef),Annotation([Ljava.lang.String;@a68df9,[Ljava.lang.String;@28b576a9,[Ljava.lang.String;@7cf7aee),Annotation([Ljava.lang.String;@2f6bbeb0,[Ljava.lang.String;@1b1637e1,[Ledu.cmu.lti.nlp.amr.Entity;@18151a14))
AMR:
(a / announce-01, ARG0, c / country)
(a / announce-01, ARG1, e / expand-01)
(a / announce-01, time, e2 / early)
(c / country, name, n / name)
(d / date-entity, year, 2 / 2008)
(e / expand-01, ARG1, s2 / support-01)
(e2 / early, op, d / date-entity)
(n / name, op, "Russia")
(r / region, mod, s / separatist)
(s2 / support-01, ARG0, i / it)
(s2 / support-01, ARG1, r / region)

Decoded in 362,351 microseconds
Sentence: Georgia labeled Russia's support an act of annexation.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 6-7:  act => act-02
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 1-2:  labeled => label-01
Span 2-3:  Russia => (country :name (name :op "Russia"))
Span 4-5:  support => support-01

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),act,act-02,false), Span(4,5,List(1),support,support-01,false), Span(2,3,List(4, 3, 2),Russia,(country :name (name :op "Russia")),false), Span(1,2,List(5),labeled,label-01,false), Span(0,1,List(8, 7, 6),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> country, 5 -> label-01, 8 -> "Georgia", 7 -> name, 1 -> support-01, 4 -> "Russia", 6 -> country, 0 -> act-02, 3 -> name),Map(n -> name, s -> support-01, a -> act-02, l -> label-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@64711bf2,Annotation([Ljava.lang.String;@169da7f2,[Ljava.lang.String;@3c1e23ff,[Ljava.lang.String;@ceb4bd2),Annotation([Ljava.lang.String;@60297f36,[Ljava.lang.String;@1bf0f6f6,[Ledu.cmu.lti.nlp.amr.Dependency;@56bc3fac),Annotation([Ljava.lang.String;@df4b72,[Ljava.lang.String;@2ba45490,[Ljava.lang.String;@37ff4054),Annotation([Ljava.lang.String;@894858,[Ljava.lang.String;@7af707e0,[Ledu.cmu.lti.nlp.amr.Entity;@737edcfa))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(l / label-01, ARG0, c2 / country)
(l / label-01, ARG1, s / support-01)
(n / name, op, "Russia")
(n2 / name, op, "Georgia")
(s / support-01, ARG0, c / country)
(s / support-01, ARG1, a / act-02)

Decoded in 37,791 microseconds
Sentence: Throughout 8 August 2008 reports conflicted about whether Georgian or Russian forces had won control of Tskhinvali.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Tskhinvali"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 1-4:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 6-7:  about => about
Span 14-15:  control => control-01
Span 11-12:  forces => force
Span 9-10:  or => or
Span 4-5:  reports => report-01
Span 10-11:  Russian => (country :name (name :op "Russia"))
Span 0-1:  Throughout => throughout
Span 13-14:  won => win-01

Langrangian relaxation converged after 89 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),control,control-01,false), Span(13,14,List(1),won,win-01,false), Span(11,12,List(2),forces,force,false), Span(10,11,List(5, 4, 3),Russian,(country :name (name :op "Russia")),false), Span(9,10,List(6),or,or,false), Span(6,7,List(7),about,about,false), Span(4,5,List(8),reports,report-01,false), Span(1,4,List(12, 11, 10, 9),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false), Span(0,1,List(13),Throughout,throughout,false)),Map(2 -> force, 5 -> "Russia", 12 -> 2008, 8 -> report-01, 7 -> about, 1 -> win-01, 4 -> name, 11 -> 8, 6 -> or, 0 -> control-01, 9 -> date-entity, 3 -> country, 10 -> 8, 13 -> throughout),Map(w -> win-01, n -> name, 2 -> 2008, t -> throughout, 8 -> 8, d -> date-entity, a -> about, 82 -> 8, r -> report-01, c -> control-01, f -> force, o -> or, c2 -> country))),[Ljava.lang.String;@3ecedf21,Annotation([Ljava.lang.String;@74cf8b28,[Ljava.lang.String;@36c54a56,[Ljava.lang.String;@3359c978),Annotation([Ljava.lang.String;@7ba63fe5,[Ljava.lang.String;@73386d72,[Ledu.cmu.lti.nlp.amr.Dependency;@6f330eb9),Annotation([Ljava.lang.String;@125c082e,[Ljava.lang.String;@584f5497,[Ljava.lang.String;@68ace111),Annotation([Ljava.lang.String;@1f9d6c7b,[Ljava.lang.String;@6df20ade,[Ledu.cmu.lti.nlp.amr.Entity;@4fbb001b))
AMR:
(c / control-01, ARG0, c2 / country)
(c / control-01, ARG1, f / force)
(c2 / country, name, n / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Russia")
(o / or, op, f / force)
(r / report-01, ARG1, a / about)
(r / report-01, time, d / date-entity)
(t / throughout, op, d / date-entity)
(w / win-01, ARG0, f / force)
(w / win-01, ARG6, t / throughout)

Decoded in 1,198,087 microseconds
Sentence: Late on 8 August 2008 it was unclear whether ground combat had taken place between Russian and Georgian soldiers or had been limited to fighting between separatists and Georgian forces.

mkDayMonthYear(8	August	2008,8,August,2008)
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Georgian"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 2-5:  8 August 2008 => (date-entity :day 8 :month 8 :year 2008)
Span 27-28:  and => and
Span 16-17:  and => and
Span 25-26:  between => between
Span 14-15:  between => between
Span 10-11:  combat => combat-01
Span 24-25:  fighting => fight-01
Span 29-30:  forces => force
Span 9-10:  ground => ground
Span 5-6:  it => it
Span 0-1:  Late => late
Span 22-23:  limited => limit-01
Span 19-20:  or => or
Span 13-14:  place => place
Span 15-16:  Russian => (country :name (name :op "Russia"))
Span 26-27:  separatists => separatist
Span 18-19:  soldiers => (have-org-role-91 :ARG2 soldier)
Span 12-13:  taken => take-01
Span 7-8:  unclear => (clear-01 :polarity -)

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),forces,force,false), Span(27,28,List(1),and,and,false), Span(26,27,List(2),separatists,separatist,false), Span(25,26,List(3),between,between,false), Span(24,25,List(4),fighting,fight-01,false), Span(22,23,List(5),limited,limit-01,false), Span(19,20,List(6),or,or,false), Span(18,19,List(8, 7),soldiers,(have-org-role-91 :ARG2 soldier),false), Span(16,17,List(9),and,and,false), Span(15,16,List(12, 11, 10),Russian,(country :name (name :op "Russia")),false), Span(14,15,List(13),between,between,false), Span(13,14,List(14),place,place,false), Span(12,13,List(15),taken,take-01,false), Span(10,11,List(16),combat,combat-01,false), Span(9,10,List(17),ground,ground,false), Span(7,8,List(19, 18),unclear,(clear-01 :polarity -),false), Span(5,6,List(20),it,it,false), Span(2,5,List(24, 23, 22, 21),8 August 2008,(date-entity :day 8 :month 8 :year 2008),false), Span(0,1,List(25),Late,late,false)),Map(2 -> separatist, 5 -> limit-01, 12 -> "Russia", 8 -> soldier, 15 -> take-01, 21 -> date-entity, 18 -> clear-01, 24 -> 2008, 7 -> have-org-role-91, 1 -> and, 17 -> ground, 23 -> 8, 4 -> fight-01, 11 -> name, 14 -> place, 20 -> it, 6 -> or, 9 -> and, 0 -> force, 22 -> 8, 16 -> combat-01, 19 -> -, 10 -> country, 3 -> between, 25 -> late, 13 -> between),Map(n -> name, h -> have-org-role-91, 2 -> 2008, s2 -> soldier, t -> take-01, b -> between, 8 -> 8, b2 -> between, s -> separatist, d -> date-entity, g -> ground, p -> place, c3 -> clear-01, a -> and, 82 -> 8, l2 -> late, i -> it, a2 -> and, c -> country, f2 -> fight-01, l -> limit-01, f -> force, o -> or, c2 -> combat-01))),[Ljava.lang.String;@4010d494,Annotation([Ljava.lang.String;@341a8659,[Ljava.lang.String;@4943defe,[Ljava.lang.String;@5eefa415),Annotation([Ljava.lang.String;@181d7f28,[Ljava.lang.String;@78d50a3c,[Ledu.cmu.lti.nlp.amr.Dependency;@2fb69ff6),Annotation([Ljava.lang.String;@cda4919,[Ljava.lang.String;@7f4d9395,[Ljava.lang.String;@2f19f2aa),Annotation([Ljava.lang.String;@344b8190,[Ljava.lang.String;@6a078481,[Ledu.cmu.lti.nlp.amr.Entity;@79c5636f))
AMR:
(a / and, op, f / force)
(b / between, op, s / separatist)
(c / country, name, n / name)
(c2 / combat-01, ARG0, g / ground)
(c2 / combat-01, ARG1, a2 / and)
(c3 / clear-01, ARG0, c / country)
(c3 / clear-01, ARG1, i / it)
(c3 / clear-01, ARG6, t / take-01)
(c3 / clear-01, polarity, -)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 82 / 8)
(d / date-entity, year, 2 / 2008)
(f2 / fight-01, ARG2, b / between)
(f2 / fight-01, location, a / and)
(h / have-org-role-91, ARG1, b2 / between)
(h / have-org-role-91, ARG2, s2 / soldier)
(l / limit-01, ARG1, f2 / fight-01)
(l2 / late, op, c3 / clear-01)
(l2 / late, op, d / date-entity)
(n / name, op, "Russia")
(o / or, op, c3 / clear-01)
(o / or, op, l / limit-01)
(p / place, mod, b2 / between)
(t / take-01, ARG0, c2 / combat-01)
(t / take-01, ARG1, p / place)

Decoded in 1,360,370 microseconds
Sentence: Tskhinvali is the capital of Georgia.

NER Entity: (country :name (name :op "Tskhinvali"))
NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 3-4:  capital => capital
Span 5-6:  Georgia => (country :name (name :op "Georgia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(2, 1, 0),Georgia,(country :name (name :op "Georgia")),false), Span(3,4,List(3),capital,capital,false)),Map(2 -> "Georgia", 1 -> name, 0 -> country, 3 -> capital),Map(n -> name, c -> country, c2 -> capital))),[Ljava.lang.String;@1929425f,Annotation([Ljava.lang.String;@718607eb,[Ljava.lang.String;@27f3b6d6,[Ljava.lang.String;@757f675c),Annotation([Ljava.lang.String;@2617f816,[Ljava.lang.String;@676f0a60,[Ledu.cmu.lti.nlp.amr.Dependency;@5d10455d),Annotation([Ljava.lang.String;@535b8c24,[Ljava.lang.String;@4a951911,[Ljava.lang.String;@55b62629),Annotation([Ljava.lang.String;@a53bb6f,[Ljava.lang.String;@5e63cad,[Ledu.cmu.lti.nlp.amr.Entity;@6759f091))
AMR:
(c / country, name, n / name)
(c2 / capital, location, c / country)
(n / name, op, "Georgia")

Decoded in 15,342 microseconds
Sentence: Georgia is mountainous.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 2-3:  mountainous => mountain

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),mountainous,mountain,false), Span(0,1,List(3, 2, 1),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> name, 1 -> country, 0 -> mountain, 3 -> "Georgia"),Map(n -> name, m -> mountain, c -> country))),[Ljava.lang.String;@33a053d,Annotation([Ljava.lang.String;@14a54ef6,[Ljava.lang.String;@20921b9b,[Ljava.lang.String;@867ba60),Annotation([Ljava.lang.String;@5ba745bc,[Ljava.lang.String;@654b72c0,[Ledu.cmu.lti.nlp.amr.Dependency;@55b5e331),Annotation([Ljava.lang.String;@6034e75d,[Ljava.lang.String;@15fc442,[Ljava.lang.String;@3f3c7bdb),Annotation([Ljava.lang.String;@456abb66,[Ljava.lang.String;@2a3a299,[Ledu.cmu.lti.nlp.amr.Entity;@7da10b5b))
AMR:
(c / country, name, n / name)
(m / mountain, domain, c / country)
(n / name, op, "Georgia")

Decoded in 6,755 microseconds
Sentence: Georgia is a rebel province.

NER Entity: (country :name (name :op "Georgia"))
NER Entity: (country :name (name :op "Georgia"))
Spans:
Span 0-1:  Georgia => (country :name (name :op "Georgia"))
Span 4-5:  province => province
Span 3-4:  rebel => (person :ARG0-of rebel-01)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),province,province,false), Span(3,4,List(2, 1),rebel,(person :ARG0-of rebel-01),false), Span(0,1,List(5, 4, 3),Georgia,(country :name (name :op "Georgia")),false)),Map(2 -> rebel-01, 5 -> "Georgia", 1 -> person, 4 -> name, 0 -> province, 3 -> country),Map(n -> name, p2 -> person, p -> province, r -> rebel-01, c -> country))),[Ljava.lang.String;@219f4597,Annotation([Ljava.lang.String;@31be6b49,[Ljava.lang.String;@2e16b08d,[Ljava.lang.String;@5b989dc7),Annotation([Ljava.lang.String;@70d8de,[Ljava.lang.String;@42561fba,[Ledu.cmu.lti.nlp.amr.Dependency;@595f4da5),Annotation([Ljava.lang.String;@46b695ec,[Ljava.lang.String;@408613cc,[Ljava.lang.String;@325f7fa9),Annotation([Ljava.lang.String;@11ce2e22,[Ljava.lang.String;@63a5d002,[Ledu.cmu.lti.nlp.amr.Entity;@13cda7c9))
AMR:
(c / country, name, n / name)
(n / name, op, "Georgia")
(p / province, domain, c / country)
(r / rebel-01, ARG0, p2 / person)
(r / rebel-01, ARG1, c / country)

Decoded in 14,274 microseconds
Sentence: 2008-09-19

mkDayMonthYear(2008-09-19,19,09,2008)
mkDayMonthYear(2008-09-19,19,09,2008)
Spans:
Span 0-1:  2008-09-19 => (date-entity :day 19 :month 9 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-09-19,(date-entity :day 19 :month 9 :year 2008),false)),Map(2 -> 9, 1 -> 19, 0 -> date-entity, 3 -> 2008),Map(2 -> 2008, d -> date-entity, 1 -> 19, 9 -> 9))),[Ljava.lang.String;@5aa6202e,Annotation([Ljava.lang.String;@3af9aa66,[Ljava.lang.String;@771158fb,[Ljava.lang.String;@91c4a3f),Annotation([Ljava.lang.String;@62d0ac62,[Ljava.lang.String;@150d80c4,[Ledu.cmu.lti.nlp.amr.Dependency;@6826c41e),Annotation([Ljava.lang.String;@3003697,[Ljava.lang.String;@64d43929,[Ljava.lang.String;@1d269ed7),Annotation([Ljava.lang.String;@437ebf59,[Ljava.lang.String;@41c89d2f,[Ledu.cmu.lti.nlp.amr.Entity;@410e94e))
AMR:
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)

Decoded in 7,120 microseconds
Sentence: Iraq (IQ)

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 0-1:  Iraq => (country :name (name :op "Iraq"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Iraq,(country :name (name :op "Iraq")),false)),Map(2 -> "Iraq", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@2d691f3d,Annotation([Ljava.lang.String;@1bdbf9be,[Ljava.lang.String;@1e7f2e0f,[Ljava.lang.String;@1da6ee17),Annotation([Ljava.lang.String;@78d39a69,[Ljava.lang.String;@3c818ac4,[Ledu.cmu.lti.nlp.amr.Dependency;@5b69d40d),Annotation([Ljava.lang.String;@71154f21,[Ljava.lang.String;@15f193b8,[Ljava.lang.String;@2516fc68),Annotation([Ljava.lang.String;@304a9d7b,[Ljava.lang.String;@6bfdb014,[Ledu.cmu.lti.nlp.amr.Entity;@72889280))
AMR:
(c / country, name, n / name)
(n / name, op, "Iraq")

Decoded in 4,553 microseconds
Sentence: International; Telecom; technology; crime; leader; media; dissent

Spans:
Span 11-12:  ; => and
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 6-7:  crime => crime
Span 12-13:  dissent => dissent-01
Span 0-1:  International => international
Span 8-9:  leader => (person :ARG0-of lead-02)
Span 10-11:  media => media
Span 4-5:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),dissent,dissent-01,false), Span(11,12,List(1),;,and,false), Span(10,11,List(2),media,media,false), Span(9,10,List(3),;,and,false), Span(8,9,List(5, 4),leader,(person :ARG0-of lead-02),false), Span(7,8,List(6),;,and,false), Span(6,7,List(7),crime,crime,false), Span(5,6,List(8),;,and,false), Span(4,5,List(9),technology,technology,false), Span(3,4,List(10),;,and,false), Span(1,2,List(11),;,and,false), Span(0,1,List(12),International,international,false)),Map(2 -> media, 5 -> lead-02, 12 -> international, 8 -> and, 7 -> crime, 1 -> and, 4 -> person, 11 -> and, 6 -> and, 0 -> dissent-01, 9 -> technology, 3 -> and, 10 -> and),Map(t -> technology, a3 -> and, a6 -> and, d -> dissent-01, m -> media, p -> person, a -> and, a5 -> and, a2 -> and, i -> international, c -> crime, l -> lead-02, a4 -> and))),[Ljava.lang.String;@606fc505,Annotation([Ljava.lang.String;@4aa3d36,[Ljava.lang.String;@2d140a7,[Ljava.lang.String;@347bdeef),Annotation([Ljava.lang.String;@2aa27288,[Ljava.lang.String;@7f34a967,[Ledu.cmu.lti.nlp.amr.Dependency;@77e80a5e),Annotation([Ljava.lang.String;@1d8e2eea,[Ljava.lang.String;@240139e1,[Ljava.lang.String;@7ea4d397),Annotation([Ljava.lang.String;@49298ce7,[Ljava.lang.String;@253c1256,[Ledu.cmu.lti.nlp.amr.Entity;@8dfe921))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, d / dissent-01)
(a4 / and, op, a3 / and)
(a4 / and, op, d / dissent-01)
(a4 / and, op, m / media)
(a5 / and, op, c / crime)
(a5 / and, op, d / dissent-01)
(a5 / and, op, t / technology)
(a6 / and, op, a5 / and)
(a6 / and, op, i / international)
(a6 / and, op, p / person)
(l / lead-02, ARG0, p / person)

Decoded in 78,378 microseconds
Sentence: Iranian News Agency Fars stated that hackers known as group XP defaced or blocked 100s of Shiite-related websites.

NER Entity: (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
NER Entity: (organization :name (name :op "XP"))
Spans:
Span 14-15:  100s => 100
Span 13-14:  blocked => block-01
Span 9-10:  group => group
Span 6-7:  hackers => (person :ARG0-of hack-04)
Span 0-4:  Iranian News Agency Fars => (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
Span 7-8:  known => know-01
Span 12-13:  or => or
Span 18-19:  related => relate-01
Span 4-5:  stated => state-01
Span 19-20:  websites => website

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),websites,website,false), Span(18,19,List(1),related,relate-01,false), Span(14,15,List(2),100s,100,false), Span(13,14,List(3),blocked,block-01,false), Span(12,13,List(4),or,or,false), Span(9,10,List(5),group,group,false), Span(7,8,List(6),known,know-01,false), Span(6,7,List(8, 7),hackers,(person :ARG0-of hack-04),false), Span(4,5,List(9),stated,state-01,false), Span(0,4,List(15, 14, 13, 12, 11, 10),Iranian News Agency Fars,(organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars")),false)),Map(2 -> 100, 5 -> group, 12 -> "Iranian", 15 -> "Fars", 8 -> hack-04, 7 -> person, 1 -> relate-01, 4 -> or, 11 -> name, 14 -> "Agency", 6 -> know-01, 0 -> website, 9 -> state-01, 3 -> block-01, 10 -> organization, 13 -> "News"),Map(n -> name, w -> website, h -> hack-04, k -> know-01, b -> block-01, s -> state-01, p -> person, g -> group, 1 -> 100, o2 -> organization, r -> relate-01, o -> or))),[Ljava.lang.String;@503fbbc6,Annotation([Ljava.lang.String;@55f45b92,[Ljava.lang.String;@109f5dd8,[Ljava.lang.String;@67fe380b),Annotation([Ljava.lang.String;@4a325eb9,[Ljava.lang.String;@3dedb4a6,[Ledu.cmu.lti.nlp.amr.Dependency;@57f64f5e),Annotation([Ljava.lang.String;@415e0bcb,[Ljava.lang.String;@194152cf,[Ljava.lang.String;@49d98dc5),Annotation([Ljava.lang.String;@2c30b71f,[Ljava.lang.String;@1d81e101,[Ledu.cmu.lti.nlp.amr.Entity;@ec50f54))
AMR:
(b / block-01, ARG0, p / person)
(b / block-01, ARG1, 1 / 100)
(h / hack-04, ARG0, p / person)
(k / know-01, ARG1, p / person)
(n / name, op, "Agency")
(n / name, op, "Fars")
(n / name, op, "Iranian")
(n / name, op, "News")
(o / or, op, b / block-01)
(o / or, op, g / group)
(o2 / organization, name, n / name)
(r / relate-01, ARG0, o2 / organization)
(r / relate-01, ARG1, w / website)
(s / state-01, ARG0, o2 / organization)
(s / state-01, ARG1, o / or)

Decoded in 760,884 microseconds
Sentence: The official website of Iraq's Shiite leader the Grand Ayatollah Ali al-Sistani was among the websites defaced and blocked.

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (thing :name (name :op "Shiite"))
NER Entity: (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 18-19:  and => and
Span 19-20:  blocked => block-01
Span 9-13:  Grand Ayatollah Ali al-Sistani => (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
Span 4-5:  Iraq => (country :name (name :op "Iraq"))
Span 7-8:  leader => (person :ARG0-of lead-02)
Span 1-2:  official => (have-org-role-91 :ARG2 official)
Span 2-3:  website => website
Span 16-17:  websites => website

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),blocked,block-01,false), Span(18,19,List(1),and,and,false), Span(16,17,List(2),websites,website,false), Span(9,13,List(8, 7, 6, 5, 4, 3),Grand Ayatollah Ali al-Sistani,(person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani")),false), Span(7,8,List(10, 9),leader,(person :ARG0-of lead-02),false), Span(4,5,List(13, 12, 11),Iraq,(country :name (name :op "Iraq")),false), Span(2,3,List(14),website,website,false), Span(1,2,List(16, 15),official,(have-org-role-91 :ARG2 official),false)),Map(2 -> website, 5 -> "Grand", 12 -> name, 15 -> have-org-role-91, 8 -> "al-Sistani", 7 -> "Ali", 1 -> and, 4 -> name, 11 -> country, 14 -> website, 6 -> "Ayatollah", 0 -> block-01, 9 -> person, 16 -> official, 3 -> person, 10 -> lead-02, 13 -> "Iraq"),Map(n -> name, w -> website, h -> have-org-role-91, b -> block-01, p2 -> person, p -> person, a -> and, w2 -> website, c -> country, l -> lead-02, o -> official, n2 -> name))),[Ljava.lang.String;@bf71cec,Annotation([Ljava.lang.String;@22d6cac2,[Ljava.lang.String;@30cdae70,[Ljava.lang.String;@1654a892),Annotation([Ljava.lang.String;@2577d6c8,[Ljava.lang.String;@3163987e,[Ledu.cmu.lti.nlp.amr.Dependency;@6c000e0c),Annotation([Ljava.lang.String;@5f233b26,[Ljava.lang.String;@44f9779c,[Ljava.lang.String;@6974a715),Annotation([Ljava.lang.String;@5e8a459,[Ljava.lang.String;@43d455c9,[Ledu.cmu.lti.nlp.amr.Entity;@4c9e9fb8))
AMR:
(a / and, op, b / block-01)
(b / block-01, ARG0, w2 / website)
(b / block-01, ARG1, w / website)
(c / country, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, w2 / website)
(h / have-org-role-91, ARG2, o / official)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, c / country)
(n / name, op, "Ali")
(n / name, op, "Ayatollah")
(n / name, op, "Grand")
(n / name, op, "al-Sistani")
(n2 / name, op, "Iraq")
(p / person, name, n / name)
(w2 / website, poss, p2 / person)

Decoded in 252,673 microseconds
Sentence: Group XP stated on the defaced website that any website that contained material contrary to Sunni teachings would be hacked.

NER Entity: (organization :name (name :op "XP"))
NER Entity: (thing :name (name :op "Sunni"))
Spans:
Span 8-9:  any => any
Span 11-12:  contained => contain-01
Span 13-14:  contrary => contrary-41
Span 0-1:  Group => group
Span 12-13:  material => material
Span 2-3:  stated => state-01
Span 9-10:  website => website
Span 6-7:  website => website

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),contrary,contrary-41,false), Span(12,13,List(1),material,material,false), Span(11,12,List(2),contained,contain-01,false), Span(9,10,List(3),website,website,false), Span(8,9,List(4),any,any,false), Span(6,7,List(5),website,website,false), Span(2,3,List(6),stated,state-01,false), Span(0,1,List(7),Group,group,false)),Map(2 -> contain-01, 5 -> website, 7 -> group, 1 -> material, 4 -> any, 6 -> state-01, 0 -> contrary-41, 3 -> website),Map(w -> website, s -> state-01, m -> material, g -> group, a -> any, w2 -> website, c -> contrary-41, c2 -> contain-01))),[Ljava.lang.String;@9ec531,Annotation([Ljava.lang.String;@40147317,[Ljava.lang.String;@210f0cc1,[Ljava.lang.String;@19542407),Annotation([Ljava.lang.String;@6f95cd51,[Ljava.lang.String;@c7a977f,[Ledu.cmu.lti.nlp.amr.Dependency;@55caeb35),Annotation([Ljava.lang.String;@6d868997,[Ljava.lang.String;@2c383e33,[Ljava.lang.String;@74a195a4),Annotation([Ljava.lang.String;@76304b46,[Ljava.lang.String;@2fa3be26,[Ledu.cmu.lti.nlp.amr.Entity;@4287d447))
AMR:
(c / contrary-41, ARG1, m / material)
(c2 / contain-01, ARG0, w / website)
(c2 / contain-01, ARG1, m / material)
(s / state-01, ARG0, g / group)
(s / state-01, ARG1, c2 / contain-01)
(s / state-01, medium, w2 / website)
(w / website, mod, a / any)

Decoded in 161,814 microseconds
Sentence: The official website of Iraq's Shiite religious leader the Grand Ayatollah Ali al-Sistani was defaced and blocked in a sectarian-motivated cyber attack on Shiite-related sites.

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (thing :name (name :op "Shiite"))
NER Entity: (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 16-17:  and => and
Span 24-25:  attack => attack-01
Span 17-18:  blocked => block-01
Span 23-24:  cyber => cyber
Span 10-14:  Grand Ayatollah Ali al-Sistani => (person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani"))
Span 4-5:  Iraq => (country :name (name :op "Iraq"))
Span 8-9:  leader => (person :ARG0-of lead-02)
Span 22-23:  motivated => motivate-01
Span 1-2:  official => (have-org-role-91 :ARG2 official)
Span 28-29:  related => relate-01
Span 7-8:  religious => religion
Span 20-21:  sectarian => sectarian
Span 29-30:  sites => site
Span 2-3:  website => website

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),sites,site,false), Span(28,29,List(1),related,relate-01,false), Span(24,25,List(2),attack,attack-01,false), Span(23,24,List(3),cyber,cyber,false), Span(22,23,List(4),motivated,motivate-01,false), Span(20,21,List(5),sectarian,sectarian,false), Span(17,18,List(6),blocked,block-01,false), Span(16,17,List(7),and,and,false), Span(10,14,List(13, 12, 11, 10, 9, 8),Grand Ayatollah Ali al-Sistani,(person :name (name :op "Grand" :op "Ayatollah" :op "Ali" :op "al-Sistani")),false), Span(8,9,List(15, 14),leader,(person :ARG0-of lead-02),false), Span(7,8,List(16),religious,religion,false), Span(4,5,List(19, 18, 17),Iraq,(country :name (name :op "Iraq")),false), Span(2,3,List(20),website,website,false), Span(1,2,List(22, 21),official,(have-org-role-91 :ARG2 official),false)),Map(2 -> attack-01, 5 -> sectarian, 12 -> "Ali", 15 -> lead-02, 8 -> person, 21 -> have-org-role-91, 18 -> name, 7 -> and, 17 -> country, 1 -> relate-01, 4 -> motivate-01, 11 -> "Ayatollah", 14 -> person, 20 -> website, 6 -> block-01, 22 -> official, 0 -> site, 9 -> name, 16 -> religion, 19 -> "Iraq", 3 -> cyber, 10 -> "Grand", 13 -> "al-Sistani"),Map(w -> website, n -> name, h -> have-org-role-91, s2 -> sectarian, b -> block-01, p2 -> person, s -> site, m -> motivate-01, p -> person, r2 -> religion, a -> attack-01, r -> relate-01, a2 -> and, c -> cyber, l -> lead-02, o -> official, n2 -> name, c2 -> country))),[Ljava.lang.String;@3af37506,Annotation([Ljava.lang.String;@4e6d7365,[Ljava.lang.String;@7c0da600,[Ljava.lang.String;@d4602a),Annotation([Ljava.lang.String;@21ae6e73,[Ljava.lang.String;@47dd778,[Ledu.cmu.lti.nlp.amr.Dependency;@15515c51),Annotation([Ljava.lang.String;@36a7abe1,[Ljava.lang.String;@64a896b0,[Ljava.lang.String;@e044b4a),Annotation([Ljava.lang.String;@11a82d0f,[Ljava.lang.String;@1adb7478,[Ledu.cmu.lti.nlp.amr.Entity;@3ae66c85))
AMR:
(a / attack-01, ARG1, c2 / country)
(a / attack-01, mod, c / cyber)
(a2 / and, op, b / block-01)
(a2 / and, op, p / person)
(a2 / and, op, p2 / person)
(b / block-01, ARG0, a / attack-01)
(b / block-01, ARG1, w / website)
(c2 / country, name, n2 / name)
(h / have-org-role-91, ARG1, w / website)
(h / have-org-role-91, ARG2, o / official)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, r2 / religion)
(m / motivate-01, ARG1, a / attack-01)
(m / motivate-01, ARG2, s2 / sectarian)
(n / name, op, "Ali")
(n / name, op, "Ayatollah")
(n / name, op, "Grand")
(n / name, op, "al-Sistani")
(n2 / name, op, "Iraq")
(p / person, name, n / name)
(r / relate-01, ARG1, s / site)
(s / site, consist, a / attack-01)

Decoded in 1,015,837 microseconds
Sentence: It was not clear whether the attack began on 18 September 2008 or the morning of 19 September 2008.

mkDayMonthYear(18	September	2008,18,September,2008)
mkDayMonthYear(19	September	2008,19,September,2008)
Spans:
Span 9-12:  18 September 2008 => (date-entity :day 18 :month 9 :year 2008)
Span 16-19:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Span 6-7:  attack => attack-01
Span 7-8:  began => begin-01
Span 3-4:  clear => clear
Span 0-1:  It => it
Span 14-15:  morning => morning
Span 12-13:  or => or

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,19,List(3, 2, 1, 0),19 September 2008,(date-entity :day 19 :month 9 :year 2008),false), Span(14,15,List(4),morning,morning,false), Span(12,13,List(5),or,or,false), Span(9,12,List(9, 8, 7, 6),18 September 2008,(date-entity :day 18 :month 9 :year 2008),false), Span(7,8,List(10),began,begin-01,false), Span(6,7,List(11),attack,attack-01,false), Span(3,4,List(12),clear,clear,false), Span(0,1,List(13),It,it,false)),Map(2 -> 9, 5 -> or, 12 -> clear, 8 -> 9, 7 -> 18, 1 -> 19, 4 -> morning, 11 -> attack-01, 6 -> date-entity, 0 -> date-entity, 9 -> 2008, 3 -> 2008, 10 -> begin-01, 13 -> it),Map(2 -> 2008, 12 -> 18, b -> begin-01, 92 -> 9, d -> date-entity, m -> morning, 1 -> 19, a -> attack-01, d2 -> date-entity, i -> it, c -> clear, 9 -> 9, 22 -> 2008, o -> or))),[Ljava.lang.String;@16943e88,Annotation([Ljava.lang.String;@4604b900,[Ljava.lang.String;@73d6d0c,[Ljava.lang.String;@e36bb2a),Annotation([Ljava.lang.String;@3961a41a,[Ljava.lang.String;@5a4ed68f,[Ledu.cmu.lti.nlp.amr.Dependency;@367795c7),Annotation([Ljava.lang.String;@d2387c8,[Ljava.lang.String;@3956b302,[Ljava.lang.String;@1500e009),Annotation([Ljava.lang.String;@1fd386c3,[Ljava.lang.String;@edf4f36,[Ledu.cmu.lti.nlp.amr.Entity;@29d334c))
AMR:
(a / attack-01, ARG1, c / clear)
(b / begin-01, ARG1, a / attack-01)
(b / begin-01, time, d / date-entity)
(b / begin-01, time, d2 / date-entity)
(c / clear, domain, i / it)
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)
(d2 / date-entity, day, 12 / 18)
(d2 / date-entity, month, 92 / 9)
(d2 / date-entity, year, 22 / 2008)
(o / or, op, d2 / date-entity)
(o / or, op, m / morning)

Decoded in 105,221 microseconds
Sentence: By the evening of 19 September 2008 Al-Sistani's website was offline.

mkDayMonthYear(19	September	2008,19,September,2008)
NER Entity: (person :name (name :op "Al-Sistani"))
Spans:
Span 4-7:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Span 0-1:  By => by
Span 2-3:  evening => evening
Span 9-10:  website => website

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),website,website,false), Span(4,7,List(4, 3, 2, 1),19 September 2008,(date-entity :day 19 :month 9 :year 2008),false), Span(2,3,List(5),evening,evening,false), Span(0,1,List(6),By,by,false)),Map(2 -> 19, 5 -> evening, 1 -> date-entity, 4 -> 2008, 6 -> by, 0 -> website, 3 -> 9),Map(e -> evening, w -> website, 2 -> 2008, b -> by, d -> date-entity, 1 -> 19, 9 -> 9))),[Ljava.lang.String;@100f9bbe,Annotation([Ljava.lang.String;@13e9f2e2,[Ljava.lang.String;@673bb956,[Ljava.lang.String;@cd7f1ae),Annotation([Ljava.lang.String;@60e949e1,[Ljava.lang.String;@3c4bc9fc,[Ledu.cmu.lti.nlp.amr.Dependency;@680362a),Annotation([Ljava.lang.String;@3569edd5,[Ljava.lang.String;@1f651cd8,[Ljava.lang.String;@7d0332e1),Annotation([Ljava.lang.String;@7a356a0d,[Ljava.lang.String;@c827db,[Ledu.cmu.lti.nlp.amr.Entity;@377c68c6))
AMR:
(b / by, op, e / evening)
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)
(e / evening, op, w / website)
(e / evening, time, d / date-entity)

Decoded in 31,008 microseconds
Sentence: Another website related to 1 of Al-Sistani's religious organizations, www.al-shia.com, was also affected.

NER Entity: (person :name (name :op "Al-Sistani"))
Spans:
Span 4-5:  1 => 1
Span 15-16:  affected => affect-01
Span 14-15:  also => also
Span 0-1:  Another => another
Span 9-10:  organizations => organization
Span 2-3:  related => relate-01
Span 8-9:  religious => religion
Span 1-2:  website => website

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),affected,affect-01,false), Span(14,15,List(1),also,also,false), Span(9,10,List(2),organizations,organization,false), Span(8,9,List(3),religious,religion,false), Span(4,5,List(4),1,1,false), Span(2,3,List(5),related,relate-01,false), Span(1,2,List(6),website,website,false), Span(0,1,List(7),Another,another,false)),Map(2 -> organization, 5 -> relate-01, 7 -> another, 1 -> also, 4 -> 1, 6 -> website, 0 -> affect-01, 3 -> religion),Map(w -> website, a3 -> another, r2 -> relate-01, 1 -> 1, a -> affect-01, r -> religion, a2 -> also, o -> organization))),[Ljava.lang.String;@538cd0f2,Annotation([Ljava.lang.String;@238ad8c,[Ljava.lang.String;@430fa4ef,[Ljava.lang.String;@1761de10),Annotation([Ljava.lang.String;@22df874e,[Ljava.lang.String;@654c1a54,[Ledu.cmu.lti.nlp.amr.Dependency;@5bdaf2ce),Annotation([Ljava.lang.String;@42d236fb,[Ljava.lang.String;@1ce93c18,[Ljava.lang.String;@19f21b6b),Annotation([Ljava.lang.String;@1532c619,[Ljava.lang.String;@46044faa,[Ledu.cmu.lti.nlp.amr.Entity;@1358b28e))
AMR:
(1 / 1, op, r2 / relate-01)
(a / affect-01, ARG1, w / website)
(a / affect-01, mod, a2 / also)
(o / organization, mod, r / religion)
(r2 / relate-01, ARG0, o / organization)
(r2 / relate-01, ARG1, w / website)
(w / website, mod, a3 / another)

Decoded in 137,583 microseconds
Sentence: An alternative address, www.sistani.com, was still operational.

Spans:
Span 2-3:  address => address-02
Span 1-2:  alternative => alternative
Span 8-9:  operational => operate-01
Span 7-8:  still => still

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),operational,operate-01,false), Span(7,8,List(1),still,still,false), Span(2,3,List(2),address,address-02,false), Span(1,2,List(3),alternative,alternative,false)),Map(2 -> address-02, 1 -> still, 0 -> operate-01, 3 -> alternative),Map(s -> still, a -> address-02, a2 -> alternative, o -> operate-01))),[Ljava.lang.String;@1a78dacd,Annotation([Ljava.lang.String;@19f9d595,[Ljava.lang.String;@7de4a01f,[Ljava.lang.String;@2bfeb1ef),Annotation([Ljava.lang.String;@778ca8ef,[Ljava.lang.String;@208e9ef6,[Ledu.cmu.lti.nlp.amr.Dependency;@78b236a0),Annotation([Ljava.lang.String;@261d8190,[Ljava.lang.String;@34448e6c,[Ljava.lang.String;@60e9df3c),Annotation([Ljava.lang.String;@907f2b7,[Ljava.lang.String;@435ce306,[Ledu.cmu.lti.nlp.amr.Entity;@537b32ef))
AMR:
(a / address-02, mod, a2 / alternative)
(o / operate-01, ARG1, a / address-02)
(o / operate-01, mod, s / still)

Decoded in 15,164 microseconds
Sentence: Iranian News Agency Fars stated that group XP had blocked access to approximately 300 Shiite-related sites on 18 September 2008 and 19 September 2008.

NER Entity: (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
NER Entity: (organization :name (name :op "XP"))
mkDayMonthYear(18	September	2008,18,September,2008)
mkDayMonthYear(19	September	2008,19,September,2008)
Spans:
Span 19-22:  18 September 2008 => (date-entity :day 18 :month 9 :year 2008)
Span 23-26:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Span 13-14:  300 => 300
Span 10-11:  access => access-01
Span 22-23:  and => and
Span 12-13:  approximately => approximately
Span 9-10:  blocked => block-01
Span 6-7:  group => group
Span 0-4:  Iranian News Agency Fars => (organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars"))
Span 16-17:  related => relate-01
Span 17-18:  sites => site
Span 4-5:  stated => state-01

Langrangian relaxation converged after 86 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,26,List(3, 2, 1, 0),19 September 2008,(date-entity :day 19 :month 9 :year 2008),false), Span(22,23,List(4),and,and,false), Span(19,22,List(8, 7, 6, 5),18 September 2008,(date-entity :day 18 :month 9 :year 2008),false), Span(17,18,List(9),sites,site,false), Span(16,17,List(10),related,relate-01,false), Span(13,14,List(11),300,300,false), Span(12,13,List(12),approximately,approximately,false), Span(10,11,List(13),access,access-01,false), Span(9,10,List(14),blocked,block-01,false), Span(6,7,List(15),group,group,false), Span(4,5,List(16),stated,state-01,false), Span(0,4,List(22, 21, 20, 19, 18, 17),Iranian News Agency Fars,(organization :name (name :op "Iranian" :op "News" :op "Agency" :op "Fars")),false)),Map(2 -> 9, 5 -> date-entity, 12 -> approximately, 15 -> group, 8 -> 2008, 21 -> "Agency", 18 -> name, 7 -> 9, 17 -> organization, 1 -> 19, 4 -> and, 11 -> 300, 14 -> block-01, 20 -> "News", 6 -> 18, 22 -> "Fars", 0 -> date-entity, 9 -> site, 16 -> state-01, 19 -> "Iranian", 3 -> 2008, 10 -> relate-01, 13 -> access-01),Map(n -> name, 2 -> 2008, s2 -> state-01, b -> block-01, 12 -> 18, 92 -> 9, a3 -> access-01, s -> site, d -> date-entity, 1 -> 19, g -> group, a -> and, d2 -> date-entity, r -> relate-01, a2 -> approximately, 9 -> 9, 22 -> 2008, o -> organization, 3 -> 300))),[Ljava.lang.String;@7dc51783,Annotation([Ljava.lang.String;@4b61d0c6,[Ljava.lang.String;@6f815e7f,[Ljava.lang.String;@65e7f52a),Annotation([Ljava.lang.String;@304b9f1a,[Ljava.lang.String;@75699e35,[Ledu.cmu.lti.nlp.amr.Dependency;@107e5441),Annotation([Ljava.lang.String;@4aeaadc1,[Ljava.lang.String;@263558c9,[Ljava.lang.String;@1f14f20c),Annotation([Ljava.lang.String;@7daa61f3,[Ljava.lang.String;@62315f22,[Ledu.cmu.lti.nlp.amr.Entity;@6e4ea0bd))
AMR:
(a / and, op, d / date-entity)
(a / and, op, d2 / date-entity)
(a2 / approximately, op, 3 / 300)
(a3 / access-01, ARG1, s / site)
(b / block-01, ARG0, g / group)
(b / block-01, ARG1, a3 / access-01)
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)
(d2 / date-entity, day, 12 / 18)
(d2 / date-entity, month, 92 / 9)
(d2 / date-entity, year, 22 / 2008)
(n / name, op, "Agency")
(n / name, op, "Fars")
(n / name, op, "Iranian")
(n / name, op, "News")
(o / organization, name, n / name)
(r / relate-01, ARG1, s / site)
(s / site, quant, a2 / approximately)
(s / site, time, d2 / date-entity)
(s2 / state-01, ARG0, o / organization)
(s2 / state-01, ARG1, b / block-01)

Decoded in 2,360,997 microseconds
Sentence: Neither the hacking claim nor an Iranian assertion that group XP was based in the United Arab Emirates could be verified independently.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "XP"))
NER Entity: (country :name (name :op "United" :op "Arab" :op "Emirates"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 12-13:  based => base-01
Span 3-4:  claim => claim-01
Span 18-19:  could => possible
Span 9-10:  group => group
Span 2-3:  hacking => hack-04
Span 21-22:  independently => independent
Span 6-7:  Iranian => (country :name (name :op "Iran"))
Span 15-18:  United Arab Emirates => (country :name (name :op "United" :op "Arab" :op "Emirates"))

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),independently,independent,false), Span(18,19,List(1),could,possible,false), Span(15,18,List(6, 5, 4, 3, 2),United Arab Emirates,(country :name (name :op "United" :op "Arab" :op "Emirates")),false), Span(12,13,List(7),based,base-01,false), Span(9,10,List(8),group,group,false), Span(6,7,List(11, 10, 9),Iranian,(country :name (name :op "Iran")),false), Span(3,4,List(12),claim,claim-01,false), Span(2,3,List(13),hacking,hack-04,false)),Map(2 -> country, 5 -> "Arab", 12 -> claim-01, 8 -> group, 7 -> base-01, 1 -> possible, 4 -> "United", 11 -> "Iran", 6 -> "Emirates", 0 -> independent, 9 -> country, 3 -> name, 10 -> name, 13 -> hack-04),Map(n -> name, h -> hack-04, b -> base-01, g -> group, p -> possible, c3 -> claim-01, i -> independent, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@56f2bbea,Annotation([Ljava.lang.String;@78f9ed3e,[Ljava.lang.String;@1059754c,[Ljava.lang.String;@b0964b2),Annotation([Ljava.lang.String;@48e7b3d2,[Ljava.lang.String;@7f4037ed,[Ledu.cmu.lti.nlp.amr.Dependency;@24e8de5c),Annotation([Ljava.lang.String;@64040287,[Ljava.lang.String;@110844f6,[Ljava.lang.String;@6f89f665),Annotation([Ljava.lang.String;@df1cff6,[Ljava.lang.String;@4925f4f5,[Ledu.cmu.lti.nlp.amr.Entity;@1ad926d3))
AMR:
(b / base-01, ARG0, i / independent)
(b / base-01, ARG1, g / group)
(b / base-01, location, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / claim-01, ARG1, b / base-01)
(c3 / claim-01, ARG6, c2 / country)
(h / hack-04, ARG0, p / possible)
(h / hack-04, ARG1, c3 / claim-01)
(n / name, op, "Arab")
(n / name, op, "Emirates")
(n / name, op, "United")
(n2 / name, op, "Iran")

Decoded in 527,389 microseconds
Sentence: Several Iranian news sites stated on 19 September 2008 that many of the Shiite and Iran-related web sites that had been attacked were running normally again.

NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(19	September	2008,19,September,2008)
NER Entity: (thing :name (name :op "Shiite"))
NER Entity: (thing :name (name :op "Iran" :op "-" :op "related"))
NER Entity: (thing :name (name :op "Iran" :op "-" :op "related"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 6-9:  19 September 2008 => (date-entity :day 19 :month 9 :year 2008)
Span 27-28:  again => again
Span 14-15:  and => and
Span 23-24:  attacked => attack-01
Span 15-16:  Iran => (country :name (name :op "Iran"))
Span 1-2:  Iranian => (country :name (name :op "Iran"))
Span 10-11:  many => many
Span 2-3:  news => news
Span 17-18:  related => relate-01
Span 25-26:  running => run-01
Span 0-1:  Several => several
Span 19-20:  sites => site
Span 3-4:  sites => site
Span 4-5:  stated => state-01
Span 18-19:  web => web

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),again,again,false), Span(25,26,List(1),running,run-01,false), Span(23,24,List(2),attacked,attack-01,false), Span(19,20,List(3),sites,site,false), Span(18,19,List(4),web,web,false), Span(17,18,List(5),related,relate-01,false), Span(15,16,List(8, 7, 6),Iran,(country :name (name :op "Iran")),false), Span(14,15,List(9),and,and,false), Span(10,11,List(10),many,many,false), Span(6,9,List(14, 13, 12, 11),19 September 2008,(date-entity :day 19 :month 9 :year 2008),false), Span(4,5,List(15),stated,state-01,false), Span(3,4,List(16),sites,site,false), Span(2,3,List(17),news,news,false), Span(1,2,List(20, 19, 18),Iranian,(country :name (name :op "Iran")),false), Span(0,1,List(21),Several,several,false)),Map(2 -> attack-01, 5 -> relate-01, 12 -> 19, 15 -> state-01, 8 -> "Iran", 21 -> several, 18 -> country, 7 -> name, 17 -> news, 1 -> run-01, 4 -> web, 11 -> date-entity, 14 -> 2008, 20 -> "Iran", 6 -> country, 0 -> again, 9 -> and, 16 -> site, 19 -> name, 3 -> site, 10 -> many, 13 -> 9),Map(w -> web, n -> name, 2 -> 2008, s2 -> state-01, a3 -> and, s -> site, s4 -> several, m -> many, d -> date-entity, 1 -> 19, r2 -> relate-01, n3 -> name, a -> again, r -> run-01, a2 -> attack-01, s3 -> site, c -> country, 9 -> 9, c2 -> country, n2 -> news))),[Ljava.lang.String;@3a43d133,Annotation([Ljava.lang.String;@39ce27f2,[Ljava.lang.String;@5f2afe62,[Ljava.lang.String;@c96a4ea),Annotation([Ljava.lang.String;@28782602,[Ljava.lang.String;@60c16548,[Ledu.cmu.lti.nlp.amr.Dependency;@68105edc),Annotation([Ljava.lang.String;@511816c0,[Ljava.lang.String;@38b972d7,[Ljava.lang.String;@5339bbad),Annotation([Ljava.lang.String;@3935e9a8,[Ljava.lang.String;@288a4658,[Ledu.cmu.lti.nlp.amr.Entity;@5b56b654))
AMR:
(a2 / attack-01, ARG0, s4 / several)
(a2 / attack-01, ARG1, s / site)
(a3 / and, op, s / site)
(a3 / and, op, w / web)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2008)
(n / name, op, "Iran")
(n2 / news, mod, c2 / country)
(n3 / name, op, "Iran")
(r / run-01, ARG1, a2 / attack-01)
(r / run-01, mod, a / again)
(r2 / relate-01, ARG0, c / country)
(r2 / relate-01, ARG1, s / site)
(s2 / state-01, ARG0, s3 / site)
(s2 / state-01, ARG1, r / run-01)
(s2 / state-01, ARG6, m / many)
(s2 / state-01, time, d / date-entity)
(s3 / site, mod, n2 / news)

Decoded in 1,080,755 microseconds
Sentence: A statement signed group XP was posted on the home page of Al-Sistani's web site and stated that the attack was on behalf of Sunni Muslims.

NER Entity: (organization :name (name :op "XP"))
NER Entity: (person :name (name :op "Al-Sistani"))
NER Entity: (thing :name (name :op "Sunni"))
Spans:
Span 16-17:  and => and
Span 20-21:  attack => attack-01
Span 3-4:  group => group
Span 9-10:  home => home
Span 26-27:  Muslims => (religious-group :name (name :op "Muslim"))
Span 10-11:  page => page
Span 2-3:  signed => sign-02
Span 15-16:  site => site
Span 17-18:  stated => state-01
Span 1-2:  statement => state-01
Span 14-15:  web => web

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(2, 1, 0),Muslims,(religious-group :name (name :op "Muslim")),false), Span(20,21,List(3),attack,attack-01,false), Span(17,18,List(4),stated,state-01,false), Span(16,17,List(5),and,and,false), Span(15,16,List(6),site,site,false), Span(14,15,List(7),web,web,false), Span(10,11,List(8),page,page,false), Span(9,10,List(9),home,home,false), Span(3,4,List(10),group,group,false), Span(2,3,List(11),signed,sign-02,false), Span(1,2,List(12),statement,state-01,false)),Map(2 -> "Muslim", 5 -> and, 12 -> state-01, 8 -> page, 7 -> web, 1 -> name, 4 -> state-01, 11 -> sign-02, 6 -> site, 0 -> religious-group, 9 -> home, 3 -> attack-01, 10 -> group),Map(w -> web, n -> name, h -> home, s2 -> site, s -> state-01, s4 -> state-01, g -> group, p -> page, a -> attack-01, a2 -> and, r -> religious-group, s3 -> sign-02))),[Ljava.lang.String;@452c8a40,Annotation([Ljava.lang.String;@534243e4,[Ljava.lang.String;@29006752,[Ljava.lang.String;@470a9030),Annotation([Ljava.lang.String;@66d57c1b,[Ljava.lang.String;@27494e46,[Ledu.cmu.lti.nlp.amr.Dependency;@d59970a),Annotation([Ljava.lang.String;@1e411d81,[Ljava.lang.String;@53b98ff6,[Ljava.lang.String;@3e6fd0b9),Annotation([Ljava.lang.String;@7fcff1b9,[Ljava.lang.String;@697446d4,[Ledu.cmu.lti.nlp.amr.Entity;@76adb233))
AMR:
(a / attack-01, ARG1, s3 / sign-02)
(a2 / and, op, p / page)
(a2 / and, op, s / state-01)
(n / name, op, "Muslim")
(p / page, mod, h / home)
(r / religious-group, name, n / name)
(s / state-01, ARG1, w / web)
(s2 / site, mod, w / web)
(s3 / sign-02, ARG0, s4 / state-01)
(s3 / sign-02, ARG1, a2 / and)
(s4 / state-01, ARG0, g / group)
(s4 / state-01, ARG1, r / religious-group)

Decoded in 334,496 microseconds
Sentence: The statement said --

Spans:
Span 2-3:  said => say-01
Span 1-2:  statement => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),said,say-01,false), Span(1,2,List(1),statement,state-01,false)),Map(1 -> state-01, 0 -> say-01),Map(s2 -> state-01, s -> say-01))),[Ljava.lang.String;@36074e47,Annotation([Ljava.lang.String;@36453307,[Ljava.lang.String;@7dcc91fd,[Ljava.lang.String;@66eb985d),Annotation([Ljava.lang.String;@6a9287b1,[Ljava.lang.String;@75504cef,[Ledu.cmu.lti.nlp.amr.Dependency;@6c8a68c1),Annotation([Ljava.lang.String;@56193c7d,[Ljava.lang.String;@28c88600,[Ljava.lang.String;@5f8890c2),Annotation([Ljava.lang.String;@607b2792,[Ljava.lang.String;@7f9e1534,[Ledu.cmu.lti.nlp.amr.Entity;@138a7441))
AMR:
(s / say-01, ARG0, s2 / state-01)

Decoded in 4,116 microseconds
Sentence: Group XP had carried out similar attacks on other Shiite sites in the Persian Gulf and Iraq.

NER Entity: (organization :name (name :op "XP"))
NER Entity: (thing :name (name :op "Shiite"))
NER Entity: (country :name (name :op "Persian" :op "Gulf"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 15-16:  and => and
Span 6-7:  attacks => attack-01
Span 3-4:  carried => carry-03
Span 0-1:  Group => group
Span 16-17:  Iraq => (country :name (name :op "Iraq"))
Span 8-9:  other => other
Span 4-5:  out => out
Span 13-15:  Persian Gulf => (country :name (name :op "Persian" :op "Gulf"))
Span 10-11:  sites => site

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),Iraq,(country :name (name :op "Iraq")),false), Span(15,16,List(3),and,and,false), Span(13,15,List(7, 6, 5, 4),Persian Gulf,(country :name (name :op "Persian" :op "Gulf")),false), Span(10,11,List(8),sites,site,false), Span(8,9,List(9),other,other,false), Span(6,7,List(10),attacks,attack-01,false), Span(4,5,List(11),out,out,false), Span(3,4,List(12),carried,carry-03,false), Span(0,1,List(13),Group,group,false)),Map(2 -> "Iraq", 5 -> name, 12 -> carry-03, 8 -> site, 7 -> "Gulf", 1 -> name, 4 -> country, 11 -> out, 6 -> "Persian", 0 -> country, 9 -> other, 3 -> and, 10 -> attack-01, 13 -> group),Map(n -> name, s -> site, g -> group, c3 -> carry-03, a -> and, o2 -> out, a2 -> attack-01, c -> country, o -> other, n2 -> name, c2 -> country))),[Ljava.lang.String;@81ff872,Annotation([Ljava.lang.String;@31611954,[Ljava.lang.String;@3e598df9,[Ljava.lang.String;@7e31ce0f),Annotation([Ljava.lang.String;@99a65d3,[Ljava.lang.String;@3088660d,[Ledu.cmu.lti.nlp.amr.Dependency;@42cc13a0),Annotation([Ljava.lang.String;@32fdec40,[Ljava.lang.String;@6813a331,[Ljava.lang.String;@1bd81830),Annotation([Ljava.lang.String;@39ab59f8,[Ljava.lang.String;@64e92d61,[Ledu.cmu.lti.nlp.amr.Entity;@111610e6))
AMR:
(a / and, op, c2 / country)
(a2 / attack-01, ARG0, a / and)
(a2 / attack-01, ARG1, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / carry-03, ARG0, g / group)
(c3 / carry-03, ARG1, a2 / attack-01)
(c3 / carry-03, ARG5, o2 / out)
(n / name, op, "Iraq")
(n2 / name, op, "Gulf")
(n2 / name, op, "Persian")
(s / site, consist, a2 / attack-01)
(s / site, mod, o / other)

Decoded in 225,314 microseconds
Sentence: Group XP erased the site as group XP has done with other Rafidha sites.

NER Entity: (organization :name (name :op "XP"))
NER Entity: (organization :name (name :op "XP"))
Spans:
Span 9-10:  done => do-02
Span 6-7:  group => group
Span 0-1:  Group => group
Span 11-12:  other => other
Span 4-5:  site => site
Span 13-14:  sites => site

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),sites,site,false), Span(11,12,List(1),other,other,false), Span(9,10,List(2),done,do-02,false), Span(6,7,List(3),group,group,false), Span(4,5,List(4),site,site,false), Span(0,1,List(5),Group,group,false)),Map(2 -> do-02, 5 -> group, 1 -> other, 4 -> site, 0 -> site, 3 -> group),Map(s2 -> site, s -> site, d -> do-02, g2 -> group, g -> group, o -> other))),[Ljava.lang.String;@4ad4936c,Annotation([Ljava.lang.String;@29d37757,[Ljava.lang.String;@4fcc529,[Ljava.lang.String;@25cc7470),Annotation([Ljava.lang.String;@4beddc56,[Ljava.lang.String;@79b663b3,[Ledu.cmu.lti.nlp.amr.Dependency;@1b812421),Annotation([Ljava.lang.String;@5d28bcd5,[Ljava.lang.String;@7882c44a,[Ljava.lang.String;@32639b12),Annotation([Ljava.lang.String;@20d11153,[Ljava.lang.String;@3887cf88,[Ledu.cmu.lti.nlp.amr.Entity;@5649ec46))
AMR:
(d / do-02, ARG0, g / group)
(d / do-02, ARG1, s / site)
(d / do-02, ARG6, s2 / site)
(o / other, mod, g2 / group)
(s / site, mod, o / other)

Decoded in 101,588 microseconds
Sentence: Rafidha means rejecters and is an insult used by Sunni extremists to describe Shiites.

NER Entity: (thing :name (name :op "Sunni"))
NER Entity: (thing :name (name :op "Shiites"))
Spans:
Span 3-4:  and => and
Span 12-13:  describe => describe-01
Span 10-11:  extremists => extremist
Span 1-2:  means => mean-01
Span 7-8:  used => use-01

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),describe,describe-01,false), Span(10,11,List(1),extremists,extremist,false), Span(7,8,List(2),used,use-01,false), Span(3,4,List(3),and,and,false), Span(1,2,List(4),means,mean-01,false)),Map(2 -> use-01, 1 -> extremist, 4 -> mean-01, 0 -> describe-01, 3 -> and),Map(e -> extremist, m -> mean-01, d -> describe-01, a -> and, u -> use-01))),[Ljava.lang.String;@78dc4696,Annotation([Ljava.lang.String;@502f8b57,[Ljava.lang.String;@5652f555,[Ljava.lang.String;@4fe01805),Annotation([Ljava.lang.String;@55120f99,[Ljava.lang.String;@794b435f,[Ledu.cmu.lti.nlp.amr.Dependency;@38f2e97e),Annotation([Ljava.lang.String;@779dfe55,[Ljava.lang.String;@323659f8,[Ljava.lang.String;@1144a55a),Annotation([Ljava.lang.String;@3e521715,[Ljava.lang.String;@26a529dc,[Ledu.cmu.lti.nlp.amr.Entity;@265c5d69))
AMR:
(a / and, op, m / mean-01)
(m / mean-01, ARG1, u / use-01)
(u / use-01, ARG1, e / extremist)
(u / use-01, ARG2, d / describe-01)

Decoded in 28,052 microseconds
Sentence: Al-Sistani promoted sexual deviance and an Iranian agenda in Iraq as Al-Sistani was born in Iran.

NER Entity: (person :name (name :op "Al-Sistani"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (person :name (name :op "Al-Sistani"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 7-8:  agenda => agenda
Span 4-5:  and => and
Span 13-14:  born => bear-02
Span 15-16:  Iran => (country :name (name :op "Iran"))
Span 6-7:  Iranian => (country :name (name :op "Iran"))
Span 9-10:  Iraq => (country :name (name :op "Iraq"))
Span 2-3:  sexual => sexual

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(2, 1, 0),Iran,(country :name (name :op "Iran")),false), Span(13,14,List(3),born,bear-02,false), Span(9,10,List(6, 5, 4),Iraq,(country :name (name :op "Iraq")),false), Span(7,8,List(7),agenda,agenda,false), Span(6,7,List(10, 9, 8),Iranian,(country :name (name :op "Iran")),false), Span(4,5,List(11),and,and,false), Span(2,3,List(12),sexual,sexual,false)),Map(2 -> "Iran", 5 -> name, 12 -> sexual, 8 -> country, 7 -> agenda, 1 -> name, 4 -> country, 11 -> and, 6 -> "Iraq", 0 -> country, 9 -> name, 3 -> bear-02, 10 -> "Iran"),Map(n -> name, b -> bear-02, s -> sexual, n3 -> name, c3 -> country, a -> agenda, a2 -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@1286528d,Annotation([Ljava.lang.String;@3cc20577,[Ljava.lang.String;@33a630fa,[Ljava.lang.String;@775594f2),Annotation([Ljava.lang.String;@5767b2af,[Ljava.lang.String;@7b22ec89,[Ledu.cmu.lti.nlp.amr.Dependency;@790132f7),Annotation([Ljava.lang.String;@2228db21,[Ljava.lang.String;@48b0e701,[Ljava.lang.String;@241a0c3a),Annotation([Ljava.lang.String;@547c04c4,[Ljava.lang.String;@30e92cb9,[Ledu.cmu.lti.nlp.amr.Entity;@7fae4d4a))
AMR:
(a / agenda, mod, c3 / country)
(a2 / and, op, a / agenda)
(b / bear-02, ARG1, a / agenda)
(b / bear-02, location, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c2 / country, op, b / bear-02)
(c3 / country, name, n3 / name)
(n / name, op, "Iran")
(n2 / name, op, "Iraq")
(n3 / name, op, "Iran")
(s / sexual, op, c2 / country)

Decoded in 253,203 microseconds
Sentence: Any website with material that was contrary to Sunni teachings would be punished.

NER Entity: (thing :name (name :op "Sunni"))
Spans:
Span 0-1:  Any => any
Span 6-7:  contrary => contrary-41
Span 3-4:  material => material
Span 1-2:  website => website

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),contrary,contrary-41,false), Span(3,4,List(1),material,material,false), Span(1,2,List(2),website,website,false), Span(0,1,List(3),Any,any,false)),Map(2 -> website, 1 -> material, 0 -> contrary-41, 3 -> any),Map(w -> website, m -> material, a -> any, c -> contrary-41))),[Ljava.lang.String;@ba1f559,Annotation([Ljava.lang.String;@3f4f9acd,[Ljava.lang.String;@46baf579,[Ljava.lang.String;@4bf324f9),Annotation([Ljava.lang.String;@4f7c0be3,[Ljava.lang.String;@ca66933,[Ledu.cmu.lti.nlp.amr.Dependency;@1d2644e3),Annotation([Ljava.lang.String;@4fa06f52,[Ljava.lang.String;@602c4656,[Ljava.lang.String;@5ffc5491),Annotation([Ljava.lang.String;@705202d1,[Ljava.lang.String;@3c443976,[Ledu.cmu.lti.nlp.amr.Entity;@3e58d65e))
AMR:
(c / contrary-41, ARG1, m / material)
(w / website, mod, a / any)
(w / website, poss, m / material)

Decoded in 28,759 microseconds
Sentence: The statement also consisted of a youtube video clip of American comedian bill Maher ridiculing a fatwa by Al-Sistani on whether certain positions of sexual intercourse were permitted for married couples.

NER Entity: (thing :name (name :op "American"))
NER Entity: (person :name (name :op "bill" :op "Maher"))
NER Entity: (person :name (name :op "Al-Sistani"))
NER Entity: (thing :name (name :op "American"))
Spans:
Span 2-3:  also => also
Span 10-11:  American => (country :name (name :op "America"))
Span 12-14:  bill Maher => (person :name (name :op "bill" :op "Maher"))
Span 21-22:  certain => certain
Span 3-4:  consisted => consist-01
Span 30-31:  couples => couple
Span 22-23:  positions => position
Span 24-25:  sexual => sexual
Span 1-2:  statement => state-01
Span 7-8:  video => video

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),couples,couple,false), Span(24,25,List(1),sexual,sexual,false), Span(22,23,List(2),positions,position,false), Span(21,22,List(3),certain,certain,false), Span(12,14,List(7, 6, 5, 4),bill Maher,(person :name (name :op "bill" :op "Maher")),false), Span(10,11,List(10, 9, 8),American,(country :name (name :op "America")),false), Span(7,8,List(11),video,video,false), Span(3,4,List(12),consisted,consist-01,false), Span(2,3,List(13),also,also,false), Span(1,2,List(14),statement,state-01,false)),Map(2 -> position, 5 -> name, 12 -> consist-01, 8 -> country, 7 -> "Maher", 1 -> sexual, 4 -> person, 11 -> video, 14 -> state-01, 6 -> "bill", 0 -> couple, 9 -> name, 3 -> certain, 10 -> "America", 13 -> also),Map(n -> name, s2 -> state-01, p2 -> person, c4 -> consist-01, s -> sexual, v -> video, p -> position, a -> also, c3 -> country, c -> couple, n2 -> name, c2 -> certain))),[Ljava.lang.String;@3bd55d8,Annotation([Ljava.lang.String;@63998bf4,[Ljava.lang.String;@7e0b9178,[Ljava.lang.String;@61942c1),Annotation([Ljava.lang.String;@6f63c44f,[Ljava.lang.String;@408a247c,[Ledu.cmu.lti.nlp.amr.Dependency;@62a8fd44),Annotation([Ljava.lang.String;@2e6ba49a,[Ljava.lang.String;@5f5b5ca4,[Ljava.lang.String;@4ee33af7),Annotation([Ljava.lang.String;@6b04acb2,[Ljava.lang.String;@18388a3c,[Ledu.cmu.lti.nlp.amr.Entity;@1d035be3))
AMR:
(c / couple, mod, c2 / certain)
(c3 / country, name, n2 / name)
(c4 / consist-01, ARG0, s2 / state-01)
(c4 / consist-01, ARG1, s / sexual)
(c4 / consist-01, ARG2, v / video)
(c4 / consist-01, mod, a / also)
(n / name, op, "Maher")
(n / name, op, "bill")
(n2 / name, op, "America")
(p / position, mod, c2 / certain)
(p2 / person, mod, c3 / country)
(p2 / person, name, n / name)
(s2 / state-01, ARG0, p2 / person)
(s2 / state-01, ARG1, p / position)

Decoded in 228,175 microseconds
Sentence: The ayatollah's office in Najaf declined to comment on the cyber attack.

NER Entity: (country :name (name :op "Najaf"))
Spans:
Span 12-13:  attack => attack-01
Span 8-9:  comment => comment-01
Span 11-12:  cyber => cyber
Span 6-7:  declined => decline-01
Span 3-4:  office => office

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),attack,attack-01,false), Span(11,12,List(1),cyber,cyber,false), Span(8,9,List(2),comment,comment-01,false), Span(6,7,List(3),declined,decline-01,false), Span(3,4,List(4),office,office,false)),Map(2 -> comment-01, 1 -> cyber, 4 -> office, 0 -> attack-01, 3 -> decline-01),Map(d -> decline-01, a -> attack-01, c -> cyber, o -> office, c2 -> comment-01))),[Ljava.lang.String;@4a60ee36,Annotation([Ljava.lang.String;@4cfbaf4,[Ljava.lang.String;@58faa93b,[Ljava.lang.String;@5f212d84),Annotation([Ljava.lang.String;@127d7908,[Ljava.lang.String;@6b9c69a9,[Ledu.cmu.lti.nlp.amr.Dependency;@6622a690),Annotation([Ljava.lang.String;@30b9eadd,[Ljava.lang.String;@497570fb,[Ljava.lang.String;@412c995d),Annotation([Ljava.lang.String;@3249a1ce,[Ljava.lang.String;@4dd94a58,[Ledu.cmu.lti.nlp.amr.Entity;@2f4919b0))
AMR:
(a / attack-01, mod, c / cyber)
(c2 / comment-01, ARG1, a / attack-01)
(d / decline-01, ARG0, o / office)
(d / decline-01, ARG1, c2 / comment-01)

Decoded in 96,008 microseconds
Sentence: Fars reported that a counterattack had been carried out against 2 major Wahhabi web sites which belong to puritanical strain of Sunni Islam that is dominant in Saudi Arabia.

NER Entity: (organization :name (name :op "Fars"))
NER Entity: (thing :name (name :op "Wahhabi"))
NER Entity: (thing :name (name :op "Sunni"))
NER Entity: (organization :name (name :op "Islam"))
NER Entity: (country :name (name :op "Saudi" :op "Arabia"))
NER Entity: (organization :name (name :op "Islam"))
Spans:
Span 10-11:  2 => 2
Span 16-17:  belong => belong-01
Span 7-8:  carried => carry-03
Span 25-26:  dominant => dominate-01
Span 22-23:  Islam => (religious-group :name (name :op "Islam"))
Span 11-12:  major => major
Span 8-9:  out => out
Span 1-2:  reported => report-01
Span 27-29:  Saudi Arabia => (country :name (name :op "Arabia" :op "Saudi"))
Span 14-15:  sites => site
Span 19-20:  strain => strain
Span 13-14:  web => web

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(3, 2, 1, 0),Saudi Arabia,(country :name (name :op "Arabia" :op "Saudi")),false), Span(25,26,List(4),dominant,dominate-01,false), Span(22,23,List(7, 6, 5),Islam,(religious-group :name (name :op "Islam")),false), Span(19,20,List(8),strain,strain,false), Span(16,17,List(9),belong,belong-01,false), Span(14,15,List(10),sites,site,false), Span(13,14,List(11),web,web,false), Span(11,12,List(12),major,major,false), Span(10,11,List(13),2,2,false), Span(8,9,List(14),out,out,false), Span(7,8,List(15),carried,carry-03,false), Span(1,2,List(16),reported,report-01,false)),Map(2 -> "Arabia", 5 -> religious-group, 12 -> major, 15 -> carry-03, 8 -> strain, 7 -> "Islam", 1 -> name, 4 -> dominate-01, 11 -> web, 14 -> out, 6 -> name, 0 -> country, 9 -> belong-01, 16 -> report-01, 3 -> "Saudi", 10 -> site, 13 -> 2),Map(n -> name, w -> web, 2 -> 2, s2 -> site, b -> belong-01, s -> strain, d -> dominate-01, m -> major, r2 -> report-01, r -> religious-group, c -> country, o -> out, n2 -> name, c2 -> carry-03))),[Ljava.lang.String;@a8a8b75,Annotation([Ljava.lang.String;@75b21c3b,[Ljava.lang.String;@72be135f,[Ljava.lang.String;@155d1021),Annotation([Ljava.lang.String;@4bd2f0dc,[Ljava.lang.String;@2e647e59,[Ledu.cmu.lti.nlp.amr.Dependency;@2c42b421),Annotation([Ljava.lang.String;@51e37590,[Ljava.lang.String;@deb3b60,[Ljava.lang.String;@701a32),Annotation([Ljava.lang.String;@39aa45a1,[Ljava.lang.String;@73aff8f1,[Ledu.cmu.lti.nlp.amr.Entity;@27cbfddf))
AMR:
(b / belong-01, ARG0, s2 / site)
(b / belong-01, ARG1, s / strain)
(c / country, name, n / name)
(c2 / carry-03, ARG1, s2 / site)
(c2 / carry-03, ARG5, o / out)
(d / dominate-01, ARG0, 2 / 2)
(d / dominate-01, ARG1, r / religious-group)
(d / dominate-01, ARG2, c / country)
(n / name, op, "Arabia")
(n / name, op, "Saudi")
(n2 / name, op, "Islam")
(r / religious-group, name, n2 / name)
(r2 / report-01, ARG1, c2 / carry-03)
(s / strain, prep-against, r / religious-group)
(s2 / site, mod, m / major)
(w / web, location, s2 / site)

Decoded in 439,165 microseconds
Sentence: 2008-10-08

mkDayMonthYear(2008-10-08,08,10,2008)
mkDayMonthYear(2008-10-08,08,10,2008)
Spans:
Span 0-1:  2008-10-08 => (date-entity :day 8 :month 10 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-10-08,(date-entity :day 8 :month 10 :year 2008),false)),Map(2 -> 10, 1 -> 8, 0 -> date-entity, 3 -> 2008),Map(2 -> 2008, 8 -> 8, d -> date-entity, 1 -> 10))),[Ljava.lang.String;@27ead29e,Annotation([Ljava.lang.String;@4c060c8f,[Ljava.lang.String;@40620d8e,[Ljava.lang.String;@383f3558),Annotation([Ljava.lang.String;@49b07ee3,[Ljava.lang.String;@352e612e,[Ledu.cmu.lti.nlp.amr.Dependency;@65f00478),Annotation([Ljava.lang.String;@2424686b,[Ljava.lang.String;@6ea94d6a,[Ljava.lang.String;@28486680),Annotation([Ljava.lang.String;@4d7e7435,[Ljava.lang.String;@4a1e3ac1,[Ledu.cmu.lti.nlp.amr.Entity;@6e78fcf5))
AMR:
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2008)

Decoded in 10,250 microseconds
Sentence: Somalia (SO); Ukraine (UA); Kenya (KE)

NER Entity: (country :name (name :op "Somalia"))
NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 9-10:  ; => and
Span 4-5:  ; => and
Span 10-11:  Kenya => (country :name (name :op "Kenya"))
Span 5-6:  Ukraine => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),Kenya,(country :name (name :op "Kenya")),false), Span(9,10,List(3),;,and,false), Span(5,6,List(6, 5, 4),Ukraine,(country :name (name :op "Ukraine")),false), Span(4,5,List(7),;,and,false)),Map(2 -> "Kenya", 5 -> name, 7 -> and, 1 -> name, 4 -> country, 6 -> "Ukraine", 0 -> country, 3 -> and),Map(n -> name, a -> and, a2 -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@56febdc,Annotation([Ljava.lang.String;@3b8ee898,[Ljava.lang.String;@7d151a,[Ljava.lang.String;@294bdeb4),Annotation([Ljava.lang.String;@5300f14a,[Ljava.lang.String;@1f86099a,[Ledu.cmu.lti.nlp.amr.Dependency;@77bb0ab5),Annotation([Ljava.lang.String;@f2c488,[Ljava.lang.String;@54acff7d,[Ljava.lang.String;@7bc9e6ab),Annotation([Ljava.lang.String;@5488b5c5,[Ljava.lang.String;@4248ed58,[Ledu.cmu.lti.nlp.amr.Entity;@712ca57b))
AMR:
(a / and, op, c2 / country)
(a2 / and, op, a / and)
(a2 / and, op, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Kenya")
(n2 / name, op, "Ukraine")

Decoded in 28,625 microseconds
Sentence: Crime; weapons; international; money

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 0-1:  Crime => crime
Span 4-5:  international => international
Span 6-7:  money => money
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),money,money,false), Span(5,6,List(1),;,and,false), Span(4,5,List(2),international,international,false), Span(3,4,List(3),;,and,false), Span(2,3,List(4),weapons,weapon,false), Span(1,2,List(5),;,and,false), Span(0,1,List(6),Crime,crime,false)),Map(2 -> international, 5 -> and, 1 -> and, 4 -> weapon, 6 -> crime, 0 -> money, 3 -> and),Map(w -> weapon, a3 -> and, m -> money, a -> and, a2 -> and, i -> international, c -> crime))),[Ljava.lang.String;@4564e94b,Annotation([Ljava.lang.String;@54534abf,[Ljava.lang.String;@51745f40,[Ljava.lang.String;@45673f68),Annotation([Ljava.lang.String;@27abb83e,[Ljava.lang.String;@69e308c6,[Ledu.cmu.lti.nlp.amr.Dependency;@1a1ed4e5),Annotation([Ljava.lang.String;@667e34b1,[Ljava.lang.String;@1c6e0a08,[Ljava.lang.String;@6dba847b),Annotation([Ljava.lang.String;@1efdcd5,[Ljava.lang.String;@1623bbe5,[Ledu.cmu.lti.nlp.amr.Entity;@7af1cd63))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, i / international)
(a3 / and, op, a2 / and)
(a3 / and, op, c / crime)
(a3 / and, op, m / money)
(a3 / and, op, w / weapon)

Decoded in 22,506 microseconds
Sentence: Somali pirates who hijacked a Ukrainian freighter carrying a large cargo of arms are approaching a deal for the ship's release.

NER Entity: (thing :name (name :op "Somali"))
NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 12-13:  arms => arm
Span 10-11:  cargo => cargo
Span 7-8:  carrying => carry-01
Span 16-17:  deal => deal-01
Span 6-7:  freighter => freighter
Span 3-4:  hijacked => hijack-01
Span 9-10:  large => large
Span 1-2:  pirates => pirate
Span 21-22:  release => release-01
Span 19-20:  ship => ship
Span 5-6:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),release,release-01,false), Span(19,20,List(1),ship,ship,false), Span(16,17,List(2),deal,deal-01,false), Span(12,13,List(3),arms,arm,false), Span(10,11,List(4),cargo,cargo,false), Span(9,10,List(5),large,large,false), Span(7,8,List(6),carrying,carry-01,false), Span(6,7,List(7),freighter,freighter,false), Span(5,6,List(10, 9, 8),Ukrainian,(country :name (name :op "Ukraine")),false), Span(3,4,List(11),hijacked,hijack-01,false), Span(1,2,List(12),pirates,pirate,false)),Map(2 -> deal-01, 5 -> large, 12 -> pirate, 8 -> country, 7 -> freighter, 1 -> ship, 4 -> cargo, 11 -> hijack-01, 6 -> carry-01, 0 -> release-01, 9 -> name, 3 -> arm, 10 -> "Ukraine"),Map(n -> name, h -> hijack-01, s -> ship, d -> deal-01, p -> pirate, c3 -> country, a -> arm, r -> release-01, l -> large, c -> cargo, f -> freighter, c2 -> carry-01))),[Ljava.lang.String;@4351171a,Annotation([Ljava.lang.String;@3c2772d1,[Ljava.lang.String;@37d00a23,[Ljava.lang.String;@433e536f),Annotation([Ljava.lang.String;@89c65d5,[Ljava.lang.String;@faa3fed,[Ledu.cmu.lti.nlp.amr.Dependency;@381cad29),Annotation([Ljava.lang.String;@988246e,[Ljava.lang.String;@62515a47,[Ljava.lang.String;@3c5a54b7),Annotation([Ljava.lang.String;@61f2c3f0,[Ljava.lang.String;@291120f4,[Ledu.cmu.lti.nlp.amr.Entity;@417ad4f3))
AMR:
(c / cargo, mod, l / large)
(c2 / carry-01, ARG1, c / cargo)
(c2 / carry-01, beneficiary, a / arm)
(c3 / country, name, n / name)
(d / deal-01, ARG0, p / pirate)
(d / deal-01, ARG1, r / release-01)
(f / freighter, mod, c3 / country)
(h / hijack-01, ARG0, p / pirate)
(h / hijack-01, ARG1, f / freighter)
(h / hijack-01, ARG6, c2 / carry-01)
(n / name, op, "Ukraine")
(r / release-01, ARG1, s / ship)

Decoded in 523,638 microseconds
Sentence: Questions have emerged regarding the shipment of arms en route to Kenya and of a possible clandestine arms deal between Kenya and South Sudan.

NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "South" :op "Sudan"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 21-22:  and => and
Span 12-13:  and => and
Span 17-18:  arms => arm
Span 7-8:  arms => arm
Span 19-20:  between => between
Span 16-17:  clandestine => clandestine
Span 18-19:  deal => deal-01
Span 2-3:  emerged => emerge-02
Span 20-21:  Kenya => (country :name (name :op "Kenya"))
Span 11-12:  Kenya => (country :name (name :op "Kenya"))
Span 15-16:  possible => possible
Span 9-10:  route => route-01
Span 22-24:  South Sudan => (country :name (name :op "South" :op "Sudan"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,24,List(3, 2, 1, 0),South Sudan,(country :name (name :op "South" :op "Sudan")),false), Span(21,22,List(4),and,and,false), Span(20,21,List(7, 6, 5),Kenya,(country :name (name :op "Kenya")),false), Span(19,20,List(8),between,between,false), Span(18,19,List(9),deal,deal-01,false), Span(17,18,List(10),arms,arm,false), Span(16,17,List(11),clandestine,clandestine,false), Span(15,16,List(12),possible,possible,false), Span(12,13,List(13),and,and,false), Span(11,12,List(16, 15, 14),Kenya,(country :name (name :op "Kenya")),false), Span(9,10,List(17),route,route-01,false), Span(7,8,List(18),arms,arm,false), Span(2,3,List(19),emerged,emerge-02,false)),Map(2 -> "South", 5 -> country, 12 -> possible, 15 -> name, 8 -> between, 18 -> arm, 7 -> "Kenya", 17 -> route-01, 1 -> name, 4 -> and, 11 -> clandestine, 14 -> country, 6 -> name, 0 -> country, 9 -> deal-01, 16 -> "Kenya", 19 -> emerge-02, 3 -> "Sudan", 10 -> arm, 13 -> and),Map(e -> emerge-02, n -> name, b -> between, a3 -> and, c4 -> country, d -> deal-01, p -> possible, a -> and, c3 -> clandestine, n3 -> name, r -> route-01, a2 -> arm, c -> country, c2 -> country, n2 -> name, a4 -> arm))),[Ljava.lang.String;@2f6bcf87,Annotation([Ljava.lang.String;@58f174d9,[Ljava.lang.String;@78c7f9b3,[Ljava.lang.String;@6f8d7714),Annotation([Ljava.lang.String;@1e6b9a95,[Ljava.lang.String;@4d6f623d,[Ledu.cmu.lti.nlp.amr.Dependency;@aa21042),Annotation([Ljava.lang.String;@e93f3d5,[Ljava.lang.String;@4cee7fa0,[Ljava.lang.String;@7a26928a),Annotation([Ljava.lang.String;@601cbd8c,[Ljava.lang.String;@7180e701,[Ledu.cmu.lti.nlp.amr.Entity;@4e2c95ee))
AMR:
(a / and, op, c2 / country)
(a3 / and, op, a4 / arm)
(a3 / and, op, c4 / country)
(a3 / and, op, p / possible)
(b / between, op, c / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(d / deal-01, ARG1, a / and)
(d / deal-01, location, b / between)
(d / deal-01, mod, c3 / clandestine)
(d / deal-01, topic, a2 / arm)
(e / emerge-02, ARG1, a3 / and)
(n / name, op, "South")
(n / name, op, "Sudan")
(n2 / name, op, "Kenya")
(n3 / name, op, "Kenya")
(p / possible, domain, d / deal-01)
(r / route-01, ARG1, c4 / country)

Decoded in 454,551 microseconds
Sentence: On 08 October 2008 Maritime officials and associates of the Somali pirates who on 25 September 2008 hijacked a Ukrainian freighter carrying a large cargo of arms stated that the pirates may soon be collecting their ransom.

mkDayMonthYear(08	October	2008,08,October,2008)
NER Entity: (thing :name (name :op "Somali"))
mkDayMonthYear(25	September	2008,25,September,2008)
NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 1-4:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Span 14-17:  25 September 2008 => (date-entity :day 25 :month 9 :year 2008)
Span 6-7:  and => and
Span 26-27:  arms => arm
Span 24-25:  cargo => cargo
Span 21-22:  carrying => carry-01
Span 20-21:  freighter => freighter
Span 17-18:  hijacked => hijack-01
Span 23-24:  large => large
Span 31-32:  may => possible
Span 5-6:  officials => (have-org-role-91 :ARG2 official)
Span 30-31:  pirates => pirate
Span 11-12:  pirates => pirate
Span 36-37:  ransom => ransom
Span 32-33:  soon => soon
Span 27-28:  stated => state-01
Span 19-20:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),ransom,ransom,false), Span(32,33,List(1),soon,soon,false), Span(31,32,List(2),may,possible,false), Span(30,31,List(3),pirates,pirate,false), Span(27,28,List(4),stated,state-01,false), Span(26,27,List(5),arms,arm,false), Span(24,25,List(6),cargo,cargo,false), Span(23,24,List(7),large,large,false), Span(21,22,List(8),carrying,carry-01,false), Span(20,21,List(9),freighter,freighter,false), Span(19,20,List(12, 11, 10),Ukrainian,(country :name (name :op "Ukraine")),false), Span(17,18,List(13),hijacked,hijack-01,false), Span(14,17,List(17, 16, 15, 14),25 September 2008,(date-entity :day 25 :month 9 :year 2008),false), Span(11,12,List(18),pirates,pirate,false), Span(6,7,List(19),and,and,false), Span(5,6,List(21, 20),officials,(have-org-role-91 :ARG2 official),false), Span(1,4,List(25, 24, 23, 22),08 October 2008,(date-entity :day 8 :month 10 :year 2008),false)),Map(2 -> possible, 5 -> arm, 12 -> "Ukraine", 8 -> carry-01, 15 -> 25, 21 -> official, 18 -> pirate, 24 -> 10, 7 -> large, 1 -> soon, 17 -> 2008, 23 -> 8, 4 -> state-01, 11 -> name, 14 -> date-entity, 20 -> have-org-role-91, 6 -> cargo, 9 -> freighter, 0 -> ransom, 22 -> date-entity, 16 -> 9, 19 -> and, 10 -> country, 3 -> pirate, 25 -> 2008, 13 -> hijack-01),Map(n -> name, h -> hijack-01, 2 -> 25, s2 -> state-01, h2 -> have-org-role-91, 8 -> 8, p2 -> pirate, s -> soon, d -> date-entity, 1 -> 10, 23 -> 2008, p -> possible, c3 -> country, a -> arm, d2 -> date-entity, r -> ransom, a2 -> and, c -> cargo, l -> large, 9 -> 9, f -> freighter, 22 -> 2008, o -> official, p3 -> pirate, c2 -> carry-01))),[Ljava.lang.String;@d0ec63,Annotation([Ljava.lang.String;@5a5c128,[Ljava.lang.String;@73eb8672,[Ljava.lang.String;@5942ee04),Annotation([Ljava.lang.String;@5e76a2bb,[Ljava.lang.String;@757194dc,[Ledu.cmu.lti.nlp.amr.Dependency;@5a865416),Annotation([Ljava.lang.String;@14faa38c,[Ljava.lang.String;@7ff2b8d2,[Ljava.lang.String;@6dc1484),Annotation([Ljava.lang.String;@6e92c6ad,[Ljava.lang.String;@2fb5fe30,[Ledu.cmu.lti.nlp.amr.Entity;@456be73c))
AMR:
(c / cargo, mod, l / large)
(c2 / carry-01, ARG1, c / cargo)
(c2 / carry-01, ARG6, f / freighter)
(c2 / carry-01, condition, s2 / state-01)
(c3 / country, name, n / name)
(d / date-entity, day, 2 / 25)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 22 / 2008)
(d2 / date-entity, day, 8 / 8)
(d2 / date-entity, month, 1 / 10)
(d2 / date-entity, year, 23 / 2008)
(f / freighter, mod, c3 / country)
(h / hijack-01, ARG0, a2 / and)
(h / hijack-01, ARG1, p2 / pirate)
(h / hijack-01, ARG6, d / date-entity)
(h2 / have-org-role-91, ARG0, p3 / pirate)
(h2 / have-org-role-91, ARG1, h / hijack-01)
(h2 / have-org-role-91, ARG2, o / official)
(h2 / have-org-role-91, ARG6, d2 / date-entity)
(n / name, op, "Ukraine")
(p / possible, mod, a / arm)
(p / possible, mod, s / soon)
(r / ransom, poss, p2 / pirate)
(s2 / state-01, ARG0, a2 / and)
(s2 / state-01, ARG1, p / possible)

Decoded in 1,982,507 microseconds
Sentence: After difficult negotiations likened by several people involved to bazaar-style haggling the parties are close to reaching a deal in which the pirates would be paid millions of dollars and the ship freed.

Spans:
Span 0-1:  After => after
Span 31-32:  and => and
Span 20-21:  deal => deal-01
Span 1-2:  difficult => difficult
Span 30-31:  dollars => (monetary-quantity :unit dollar)
Span 34-35:  freed => free-01
Span 7-8:  involved => involve-01
Span 28-29:  millions => million
Span 2-3:  negotiations => negotiate-01
Span 27-28:  paid => pay-01
Span 14-15:  parties => party
Span 6-7:  people => people
Span 24-25:  pirates => pirate
Span 18-19:  reaching => reach-01
Span 5-6:  several => several
Span 33-34:  ship => ship
Span 11-12:  style => style

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),freed,free-01,false), Span(33,34,List(1),ship,ship,false), Span(31,32,List(2),and,and,false), Span(30,31,List(4, 3),dollars,(monetary-quantity :unit dollar),false), Span(28,29,List(5),millions,million,false), Span(27,28,List(6),paid,pay-01,false), Span(24,25,List(7),pirates,pirate,false), Span(20,21,List(8),deal,deal-01,false), Span(18,19,List(9),reaching,reach-01,false), Span(14,15,List(10),parties,party,false), Span(11,12,List(11),style,style,false), Span(7,8,List(12),involved,involve-01,false), Span(6,7,List(13),people,people,false), Span(5,6,List(14),several,several,false), Span(2,3,List(15),negotiations,negotiate-01,false), Span(1,2,List(16),difficult,difficult,false), Span(0,1,List(17),After,after,false)),Map(2 -> and, 5 -> million, 12 -> involve-01, 15 -> negotiate-01, 8 -> deal-01, 7 -> pirate, 17 -> after, 1 -> ship, 4 -> dollar, 11 -> style, 14 -> several, 6 -> pay-01, 0 -> free-01, 9 -> reach-01, 16 -> difficult, 3 -> monetary-quantity, 10 -> party, 13 -> people),Map(n -> negotiate-01, s2 -> style, d3 -> difficult, m2 -> million, p2 -> pirate, s -> ship, m -> monetary-quantity, d -> dollar, p -> pay-01, a -> and, p4 -> people, d2 -> deal-01, a2 -> after, r -> reach-01, i -> involve-01, s3 -> several, f -> free-01, p3 -> party))),[Ljava.lang.String;@2375b321,Annotation([Ljava.lang.String;@5baaae4c,[Ljava.lang.String;@5b6e8f77,[Ljava.lang.String;@41a6d121),Annotation([Ljava.lang.String;@4f449e8f,[Ljava.lang.String;@411291e5,[Ledu.cmu.lti.nlp.amr.Dependency;@6e28bb87),Annotation([Ljava.lang.String;@19f040ba,[Ljava.lang.String;@72ab05ed,[Ljava.lang.String;@27e32fe4),Annotation([Ljava.lang.String;@c3c4c1c,[Ljava.lang.String;@17d238b1,[Ledu.cmu.lti.nlp.amr.Entity;@3d7cc3cb))
AMR:
(a / and, op, f / free-01)
(a2 / after, op, n / negotiate-01)
(d2 / deal-01, ARG0, p3 / party)
(d2 / deal-01, ARG1, a / and)
(f / free-01, ARG0, s / ship)
(f / free-01, ARG1, p2 / pirate)
(f / free-01, ARG6, m / monetary-quantity)
(i / involve-01, ARG0, n / negotiate-01)
(i / involve-01, ARG1, p4 / people)
(i / involve-01, ARG2, s2 / style)
(m / monetary-quantity, unit, d / dollar)
(m2 / million, prep-against, a / and)
(n / negotiate-01, ARG1, p3 / party)
(n / negotiate-01, mod, d3 / difficult)
(p / pay-01, ARG1, p2 / pirate)
(p4 / people, quant, s3 / several)
(r / reach-01, ARG1, d2 / deal-01)

Decoded in 1,247,025 microseconds
Sentence: A businessman in xarardheere, Somalia named Ahmed Omar stated that the pirates and the ship owners have agreed on a ransom of approximately 8 million U.S. dollars and the ship may be freed on 08 October 2008 or 09 October 2008.

NER Entity: (country :name (name :op "Somalia"))
NER Entity: (person :name (name :op "Ahmed" :op "Omar"))
NER Entity: (country :name (name :op "U.S."))
mkDayMonthYear(08	October	2008,08,October,2008)
mkDayMonthYear(09	October	2008,09,October,2008)
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 35-38:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Span 39-42:  09 October 2008 => (date-entity :day 9 :month 10 :year 2008)
Span 24-25:  8 => 8
Span 18-19:  agreed => agree-01
Span 7-9:  Ahmed Omar => (person :name (name :op "Ahmed" :op "Omar"))
Span 28-29:  and => and
Span 13-14:  and => and
Span 23-24:  approximately => approximately
Span 1-2:  businessman => businessman
Span 27-28:  dollars => (monetary-quantity :unit dollar)
Span 33-34:  freed => free-01
Span 31-32:  may => possible
Span 38-39:  or => or
Span 16-17:  owners => (person :ARG0-of own-01)
Span 12-13:  pirates => pirate
Span 21-22:  ransom => ransom
Span 30-31:  ship => ship
Span 15-16:  ship => ship
Span 9-10:  stated => state-01
Span 26-27:  U.S. => (country :name (name :op "U.S."))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,42,List(3, 2, 1, 0),09 October 2008,(date-entity :day 9 :month 10 :year 2008),false), Span(38,39,List(4),or,or,false), Span(35,38,List(8, 7, 6, 5),08 October 2008,(date-entity :day 8 :month 10 :year 2008),false), Span(33,34,List(9),freed,free-01,false), Span(31,32,List(10),may,possible,false), Span(30,31,List(11),ship,ship,false), Span(28,29,List(12),and,and,false), Span(27,28,List(14, 13),dollars,(monetary-quantity :unit dollar),false), Span(26,27,List(17, 16, 15),U.S.,(country :name (name :op "U.S.")),false), Span(24,25,List(18),8,8,false), Span(23,24,List(19),approximately,approximately,false), Span(21,22,List(20),ransom,ransom,false), Span(18,19,List(21),agreed,agree-01,false), Span(16,17,List(23, 22),owners,(person :ARG0-of own-01),false), Span(15,16,List(24),ship,ship,false), Span(13,14,List(25),and,and,false), Span(12,13,List(26),pirates,pirate,false), Span(9,10,List(27),stated,state-01,false), Span(7,9,List(31, 30, 29, 28),Ahmed Omar,(person :name (name :op "Ahmed" :op "Omar")),false), Span(1,2,List(32),businessman,businessman,false)),Map(30 -> "Ahmed", 2 -> 10, 5 -> date-entity, 27 -> state-01, 12 -> and, 8 -> 2008, 15 -> country, 21 -> agree-01, 18 -> 8, 24 -> ship, 7 -> 10, 1 -> 9, 17 -> "U.S.", 23 -> own-01, 26 -> pirate, 4 -> or, 11 -> ship, 32 -> businessman, 14 -> dollar, 29 -> name, 20 -> ransom, 28 -> person, 6 -> 8, 9 -> free-01, 0 -> date-entity, 22 -> person, 16 -> name, 19 -> approximately, 10 -> possible, 3 -> 2008, 31 -> "Omar", 25 -> and, 13 -> monetary-quantity),Map(n -> name, 2 -> 2008, s2 -> ship, 12 -> 10, b -> businessman, 8 -> 8, d3 -> dollar, p2 -> person, a3 -> agree-01, s -> ship, d -> date-entity, m -> monetary-quantity, 1 -> 10, p -> possible, a -> and, p4 -> person, d2 -> date-entity, o2 -> own-01, 82 -> 8, a2 -> approximately, r -> ransom, c -> country, s3 -> state-01, 9 -> 9, f -> free-01, 22 -> 2008, o -> or, p3 -> pirate, n2 -> name, a4 -> and))),[Ljava.lang.String;@35e478f,Annotation([Ljava.lang.String;@6d6cb754,[Ljava.lang.String;@6b7d1df8,[Ljava.lang.String;@3044e9c7),Annotation([Ljava.lang.String;@41d7b27f,[Ljava.lang.String;@49096b06,[Ledu.cmu.lti.nlp.amr.Dependency;@4a183d02),Annotation([Ljava.lang.String;@5d05ef57,[Ljava.lang.String;@213deac2,[Ljava.lang.String;@23eee4b8),Annotation([Ljava.lang.String;@28952dea,[Ljava.lang.String;@5a9800f8,[Ledu.cmu.lti.nlp.amr.Entity;@143d9a93))
AMR:
(a / and, op, f / free-01)
(a / and, op, m / monetary-quantity)
(a / and, op, p2 / person)
(a / and, time, d / date-entity)
(a2 / approximately, op, m / monetary-quantity)
(a3 / agree-01, ARG0, p3 / pirate)
(a3 / agree-01, ARG1, a4 / and)
(a3 / agree-01, prep-in, r / ransom)
(a4 / and, op, f / free-01)
(c / country, name, n / name)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2008)
(d2 / date-entity, day, 8 / 8)
(d2 / date-entity, month, 12 / 10)
(d2 / date-entity, year, 22 / 2008)
(d3 / dollar, mod, c / country)
(f / free-01, ARG0, 82 / 8)
(f / free-01, ARG1, s / ship)
(m / monetary-quantity, unit, d3 / dollar)
(n / name, op, "U.S.")
(n2 / name, op, "Ahmed")
(n2 / name, op, "Omar")
(o / or, op, d / date-entity)
(o / or, op, d2 / date-entity)
(o2 / own-01, ARG0, p2 / person)
(o2 / own-01, ARG1, s2 / ship)
(p / possible, domain, f / free-01)
(p4 / person, name, n2 / name)
(s3 / state-01, ARG0, p4 / person)
(s3 / state-01, ARG1, a / and)
(s3 / state-01, ARG6, b / businessman)

Decoded in 2,739,515 microseconds
Sentence: Xarardheere is a notorious pirate base on the coast of Somalia.

NER Entity: (country :name (name :op "Somalia"))
Spans:
Span 5-6:  base => base
Span 8-9:  coast => coast
Span 3-4:  notorious => notorious-41

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),coast,coast,false), Span(5,6,List(1),base,base,false), Span(3,4,List(2),notorious,notorious-41,false)),Map(2 -> notorious-41, 1 -> base, 0 -> coast),Map(n -> notorious-41, b -> base, c -> coast))),[Ljava.lang.String;@40226788,Annotation([Ljava.lang.String;@4159e81b,[Ljava.lang.String;@5b5caf08,[Ljava.lang.String;@23cd4ff2),Annotation([Ljava.lang.String;@70807224,[Ljava.lang.String;@7e97551f,[Ledu.cmu.lti.nlp.amr.Dependency;@400d912a),Annotation([Ljava.lang.String;@9f6e406,[Ljava.lang.String;@7a94b64e,[Ljava.lang.String;@3e6f3bae),Annotation([Ljava.lang.String;@12477988,[Ljava.lang.String;@2caf6912,[Ledu.cmu.lti.nlp.amr.Entity;@73d69c0f))
AMR:
(b / base, location, c / coast)
(n / notorious-41, ARG1, b / base)

Decoded in 14,734 microseconds
Sentence: Maritime officials in Kenya stated that critical details have yet to be agreed upon.

NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 12-13:  agreed => agree-01
Span 6-7:  critical => critical
Span 7-8:  details => detail-01
Span 3-4:  Kenya => (country :name (name :op "Kenya"))
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 4-5:  stated => state-01
Span 9-10:  yet => yet

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),agreed,agree-01,false), Span(9,10,List(1),yet,yet,false), Span(7,8,List(2),details,detail-01,false), Span(6,7,List(3),critical,critical,false), Span(4,5,List(4),stated,state-01,false), Span(3,4,List(7, 6, 5),Kenya,(country :name (name :op "Kenya")),false), Span(1,2,List(9, 8),officials,(have-org-role-91 :ARG2 official),false)),Map(2 -> detail-01, 5 -> country, 8 -> have-org-role-91, 7 -> "Kenya", 1 -> yet, 4 -> state-01, 6 -> name, 9 -> official, 0 -> agree-01, 3 -> critical),Map(n -> name, h -> have-org-role-91, s -> state-01, d -> detail-01, y -> yet, a -> agree-01, c -> critical, o -> official, c2 -> country))),[Ljava.lang.String;@34237b90,Annotation([Ljava.lang.String;@1d01dfa5,[Ljava.lang.String;@4a31c2ee,[Ljava.lang.String;@d400943),Annotation([Ljava.lang.String;@22101c80,[Ljava.lang.String;@31ff1390,[Ledu.cmu.lti.nlp.amr.Dependency;@759d81f3),Annotation([Ljava.lang.String;@781a9412,[Ljava.lang.String;@5a4c638d,[Ljava.lang.String;@13e698c7),Annotation([Ljava.lang.String;@aed0151,[Ljava.lang.String;@267bbe1a,[Ledu.cmu.lti.nlp.amr.Entity;@1f12e153))
AMR:
(a / agree-01, ARG1, d / detail-01)
(a / agree-01, ARG6, y / yet)
(c2 / country, name, n / name)
(d / detail-01, ARG1, c2 / country)
(d / detail-01, mod, c / critical)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Kenya")
(s / state-01, ARG1, a / agree-01)

Decoded in 149,463 microseconds
Sentence: One such detail involves the pirates' request for a guarantee that they would not be arrested or attacked by the armada of American warships currently encircling them.

NER Entity: (thing :name (name :op "American"))
Spans:
Span 23-24:  American => (country :name (name :op "America"))
Span 16-17:  arrested => arrest-01
Span 18-19:  attacked => attack-01
Span 25-26:  currently => current
Span 10-11:  guarantee => guarantee-01
Span 3-4:  involves => involve-01
Span 0-1:  One => 1
Span 17-18:  or => or
Span 5-6:  pirates => pirate
Span 7-8:  request => request-01
Span 1-2:  such => such
Span 12-13:  they => they
Span 24-25:  warships => warship

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),currently,current,false), Span(24,25,List(1),warships,warship,false), Span(23,24,List(4, 3, 2),American,(country :name (name :op "America")),false), Span(18,19,List(5),attacked,attack-01,false), Span(17,18,List(6),or,or,false), Span(16,17,List(7),arrested,arrest-01,false), Span(12,13,List(8),they,they,false), Span(10,11,List(9),guarantee,guarantee-01,false), Span(7,8,List(10),request,request-01,false), Span(5,6,List(11),pirates,pirate,false), Span(3,4,List(12),involves,involve-01,false), Span(1,2,List(13),such,such,false), Span(0,1,List(14),One,1,false)),Map(2 -> country, 5 -> attack-01, 12 -> involve-01, 8 -> they, 7 -> arrest-01, 1 -> warship, 4 -> "America", 11 -> pirate, 14 -> 1, 6 -> or, 0 -> current, 9 -> guarantee-01, 3 -> name, 10 -> request-01, 13 -> such),Map(w -> warship, n -> name, t -> they, s -> such, 1 -> 1, g -> guarantee-01, p -> pirate, a -> attack-01, a2 -> arrest-01, r -> request-01, i -> involve-01, c -> current, o -> or, c2 -> country))),[Ljava.lang.String;@389562d6,Annotation([Ljava.lang.String;@5a101b1c,[Ljava.lang.String;@2160e52a,[Ljava.lang.String;@29f0802c),Annotation([Ljava.lang.String;@3a60c416,[Ljava.lang.String;@60f2e0bd,[Ledu.cmu.lti.nlp.amr.Dependency;@469d003c),Annotation([Ljava.lang.String;@6b410923,[Ljava.lang.String;@57bd2029,[Ljava.lang.String;@203dd56b),Annotation([Ljava.lang.String;@e8fadb0,[Ljava.lang.String;@6d64b553,[Ledu.cmu.lti.nlp.amr.Entity;@53667cbe))
AMR:
(a / attack-01, ARG1, s / such)
(a2 / arrest-01, ARG0, 1 / 1)
(a2 / arrest-01, ARG1, t / they)
(c2 / country, name, n / name)
(g / guarantee-01, ARG1, c / current)
(i / involve-01, ARG1, r / request-01)
(i / involve-01, ARG2, g / guarantee-01)
(n / name, op, "America")
(o / or, op, a / attack-01)
(o / or, op, a2 / arrest-01)
(o / or, op, w / warship)
(r / request-01, ARG0, p / pirate)
(r / request-01, ARG2, a2 / arrest-01)
(w / warship, mod, c2 / country)

Decoded in 885,826 microseconds
Sentence: A Kenyan maritime official stated anonymously that such negotiations are complex and involve more than the financial aspect.

NER Entity: (thing :name (name :op "Kenyan"))
Spans:
Span 11-12:  and => and
Span 17-18:  aspect => aspect
Span 10-11:  complex => complex
Span 16-17:  financial => finance
Span 2-3:  maritime => maritime
Span 13-14:  more => more
Span 8-9:  negotiations => negotiate-01
Span 3-4:  official => (have-org-role-91 :ARG2 official)
Span 4-5:  stated => state-01
Span 7-8:  such => such

Langrangian relaxation converged after 57 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),aspect,aspect,false), Span(16,17,List(1),financial,finance,false), Span(13,14,List(2),more,more,false), Span(11,12,List(3),and,and,false), Span(10,11,List(4),complex,complex,false), Span(8,9,List(5),negotiations,negotiate-01,false), Span(7,8,List(6),such,such,false), Span(4,5,List(7),stated,state-01,false), Span(3,4,List(9, 8),official,(have-org-role-91 :ARG2 official),false), Span(2,3,List(10),maritime,maritime,false)),Map(2 -> more, 5 -> negotiate-01, 8 -> have-org-role-91, 7 -> state-01, 1 -> finance, 4 -> complex, 6 -> such, 9 -> official, 0 -> aspect, 10 -> maritime, 3 -> and),Map(n -> negotiate-01, h -> have-org-role-91, s2 -> state-01, m2 -> maritime, s -> such, m -> more, a -> aspect, a2 -> and, c -> complex, o -> official, f -> finance))),[Ljava.lang.String;@1d3e6d34,Annotation([Ljava.lang.String;@6eafb10e,[Ljava.lang.String;@26a94fa5,[Ljava.lang.String;@464a4442),Annotation([Ljava.lang.String;@2873d672,[Ljava.lang.String;@3bc735b3,[Ledu.cmu.lti.nlp.amr.Dependency;@577f9109),Annotation([Ljava.lang.String;@4303b7f0,[Ljava.lang.String;@757529a4,[Ljava.lang.String;@779de014),Annotation([Ljava.lang.String;@5c41d037,[Ljava.lang.String;@2234078,[Ledu.cmu.lti.nlp.amr.Entity;@5ec77191))
AMR:
(a / aspect, mod, f / finance)
(c / complex, domain, n / negotiate-01)
(h / have-org-role-91, ARG0, a / aspect)
(h / have-org-role-91, ARG1, m2 / maritime)
(h / have-org-role-91, ARG2, o / official)
(m / more, calendar, c / complex)
(n / negotiate-01, mod, s / such)
(s2 / state-01, ARG0, m2 / maritime)
(s2 / state-01, ARG1, a2 / and)
(s2 / state-01, ARG6, c / complex)

Decoded in 550,582 microseconds
Sentence: On 08 October 2008 the official stated that progress is being made and the parties are approaching an agreement.

mkDayMonthYear(08	October	2008,08,October,2008)
Spans:
Span 1-4:  08 October 2008 => (date-entity :day 8 :month 10 :year 2008)
Span 18-19:  agreement => agree-01
Span 12-13:  and => and
Span 5-6:  official => (have-org-role-91 :ARG2 official)
Span 14-15:  parties => party
Span 8-9:  progress => progress-01
Span 6-7:  stated => state-01

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),agreement,agree-01,false), Span(14,15,List(1),parties,party,false), Span(12,13,List(2),and,and,false), Span(8,9,List(3),progress,progress-01,false), Span(6,7,List(4),stated,state-01,false), Span(5,6,List(6, 5),official,(have-org-role-91 :ARG2 official),false), Span(1,4,List(10, 9, 8, 7),08 October 2008,(date-entity :day 8 :month 10 :year 2008),false)),Map(2 -> and, 5 -> have-org-role-91, 8 -> 8, 7 -> date-entity, 1 -> party, 4 -> state-01, 6 -> official, 9 -> 10, 0 -> agree-01, 10 -> 2008, 3 -> progress-01),Map(2 -> 2008, h -> have-org-role-91, 8 -> 8, p2 -> progress-01, s -> state-01, d -> date-entity, 1 -> 10, p -> party, a -> agree-01, a2 -> and, o -> official))),[Ljava.lang.String;@4642b71d,Annotation([Ljava.lang.String;@1450078a,[Ljava.lang.String;@c68a5f8,[Ljava.lang.String;@69c6161d),Annotation([Ljava.lang.String;@3aefae67,[Ljava.lang.String;@2e1792e7,[Ledu.cmu.lti.nlp.amr.Dependency;@6719a5b8),Annotation([Ljava.lang.String;@3eb631b8,[Ljava.lang.String;@796d3c9f,[Ljava.lang.String;@6bff19ff),Annotation([Ljava.lang.String;@41e1455d,[Ljava.lang.String;@4e558728,[Ledu.cmu.lti.nlp.amr.Entity;@5eccd3b9))
AMR:
(a / agree-01, ARG0, p / party)
(a / agree-01, ARG1, p2 / progress-01)
(a2 / and, op, a / agree-01)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2008)
(h / have-org-role-91, ARG1, p / party)
(h / have-org-role-91, ARG2, o / official)
(s / state-01, ARG1, a2 / and)
(s / state-01, time, d / date-entity)

Decoded in 447,295 microseconds
Sentence: The pirates initially requested 35 million U.S. dollars and then reduced their request to 20 million U.S. dollars.

NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 14-15:  20 => 20
Span 4-5:  35 => 35
Span 8-9:  and => and
Span 17-18:  dollars => (monetary-quantity :unit dollar)
Span 7-8:  dollars => (monetary-quantity :unit dollar)
Span 2-3:  initially => initial
Span 1-2:  pirates => pirate
Span 10-11:  reduced => reduce-01
Span 12-13:  request => request-01
Span 3-4:  requested => request-01
Span 9-10:  then => then
Span 16-17:  U.S. => (country :name (name :op "U.S."))
Span 6-7:  U.S. => (country :name (name :op "U.S."))

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(16,17,List(4, 3, 2),U.S.,(country :name (name :op "U.S.")),false), Span(14,15,List(5),20,20,false), Span(12,13,List(6),request,request-01,false), Span(10,11,List(7),reduced,reduce-01,false), Span(9,10,List(8),then,then,false), Span(8,9,List(9),and,and,false), Span(7,8,List(11, 10),dollars,(monetary-quantity :unit dollar),false), Span(6,7,List(14, 13, 12),U.S.,(country :name (name :op "U.S.")),false), Span(4,5,List(15),35,35,false), Span(3,4,List(16),requested,request-01,false), Span(2,3,List(17),initially,initial,false), Span(1,2,List(18),pirates,pirate,false)),Map(2 -> country, 5 -> 20, 12 -> country, 15 -> 35, 8 -> then, 18 -> pirate, 7 -> reduce-01, 17 -> initial, 1 -> dollar, 4 -> "U.S.", 11 -> dollar, 14 -> "U.S.", 6 -> request-01, 0 -> monetary-quantity, 9 -> and, 16 -> request-01, 3 -> name, 10 -> monetary-quantity, 13 -> name),Map(n -> name, r3 -> request-01, 2 -> 20, t -> then, m2 -> monetary-quantity, m -> monetary-quantity, d -> dollar, p -> pirate, r2 -> reduce-01, a -> and, d2 -> dollar, i -> initial, r -> request-01, c -> country, 3 -> 35, c2 -> country, n2 -> name))),[Ljava.lang.String;@4d6f197e,Annotation([Ljava.lang.String;@6ef7623,[Ljava.lang.String;@64e1dd11,[Ljava.lang.String;@5c089b2f),Annotation([Ljava.lang.String;@6999cd39,[Ljava.lang.String;@14bae047,[Ledu.cmu.lti.nlp.amr.Dependency;@7ed9ae94),Annotation([Ljava.lang.String;@66908383,[Ljava.lang.String;@41477a6d,[Ljava.lang.String;@2bc12da),Annotation([Ljava.lang.String;@3122b117,[Ljava.lang.String;@534ca02b,[Ledu.cmu.lti.nlp.amr.Entity;@29a23c3d))
AMR:
(a / and, op, r2 / reduce-01)
(a / and, op, r3 / request-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / dollar, mod, c / country)
(d2 / dollar, mod, c2 / country)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "U.S.")
(n2 / name, op, "U.S.")
(r / request-01, ARG1, m / monetary-quantity)
(r / request-01, ARG6, 2 / 20)
(r2 / reduce-01, ARG0, 3 / 35)
(r2 / reduce-01, ARG1, r / request-01)
(r2 / reduce-01, time, t / then)
(r3 / request-01, ARG0, p / pirate)
(r3 / request-01, ARG1, m2 / monetary-quantity)
(r3 / request-01, time, i / initial)

Decoded in 741,959 microseconds
Sentence: The pirates have consistently expressed willingness to negotiate the financial figures.

Spans:
Span 3-4:  consistently => consistent
Span 4-5:  expressed => express-01
Span 10-11:  figures => figure
Span 9-10:  financial => finance
Span 7-8:  negotiate => negotiate-01
Span 1-2:  pirates => pirate
Span 5-6:  willingness => will-02

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),figures,figure,false), Span(9,10,List(1),financial,finance,false), Span(7,8,List(2),negotiate,negotiate-01,false), Span(5,6,List(3),willingness,will-02,false), Span(4,5,List(4),expressed,express-01,false), Span(3,4,List(5),consistently,consistent,false), Span(1,2,List(6),pirates,pirate,false)),Map(2 -> negotiate-01, 5 -> consistent, 1 -> finance, 4 -> express-01, 6 -> pirate, 0 -> figure, 3 -> will-02),Map(e -> express-01, w -> will-02, n -> negotiate-01, p -> pirate, c -> consistent, f2 -> finance, f -> figure))),[Ljava.lang.String;@4b6ac111,Annotation([Ljava.lang.String;@6fe46b62,[Ljava.lang.String;@591fd34d,[Ljava.lang.String;@61e45f87),Annotation([Ljava.lang.String;@7c9b78e3,[Ljava.lang.String;@3068b369,[Ledu.cmu.lti.nlp.amr.Dependency;@17ca8b92),Annotation([Ljava.lang.String;@5491f68b,[Ljava.lang.String;@736ac09a,[Ljava.lang.String;@6ecd665),Annotation([Ljava.lang.String;@45394b31,[Ljava.lang.String;@1ec7d8b3,[Ledu.cmu.lti.nlp.amr.Entity;@3b0ca5e1))
AMR:
(e / express-01, ARG0, p / pirate)
(e / express-01, ARG1, w / will-02)
(e / express-01, manner, c / consistent)
(f / figure, mod, f2 / finance)
(n / negotiate-01, ARG1, f / figure)
(w / will-02, ARG1, n / negotiate-01)

Decoded in 173,926 microseconds
Sentence: More than 25 ships have been hijacked in 2008 off the Somalia coast with a typical ransom of between 1 and 2 million U.S. dollars.

NER Entity: (country :name (name :op "Somalia"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "U.S."))
Spans:
Span 19-20:  1 => 1
Span 21-22:  2 => 2
Span 8-9:  2008 => (date-entity :year 2008)
Span 2-3:  25 => 25
Span 20-21:  and => and
Span 18-19:  between => between
Span 12-13:  coast => coast
Span 24-25:  dollars => (monetary-quantity :unit dollar)
Span 6-7:  hijacked => hijack-01
Span 0-1:  More => more-than
Span 9-10:  off => off
Span 16-17:  ransom => ransom
Span 3-4:  ships => ship
Span 23-24:  U.S. => (country :name (name :op "U.S."))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(23,24,List(4, 3, 2),U.S.,(country :name (name :op "U.S.")),false), Span(21,22,List(5),2,2,false), Span(20,21,List(6),and,and,false), Span(19,20,List(7),1,1,false), Span(18,19,List(8),between,between,false), Span(16,17,List(9),ransom,ransom,false), Span(12,13,List(10),coast,coast,false), Span(9,10,List(11),off,off,false), Span(8,9,List(13, 12),2008,(date-entity :year 2008),false), Span(6,7,List(14),hijacked,hijack-01,false), Span(3,4,List(15),ships,ship,false), Span(2,3,List(16),25,25,false), Span(0,1,List(17),More,more-than,false)),Map(2 -> country, 5 -> 2, 12 -> date-entity, 15 -> ship, 8 -> between, 7 -> 1, 17 -> more-than, 1 -> dollar, 4 -> "U.S.", 11 -> off, 14 -> hijack-01, 6 -> and, 0 -> monetary-quantity, 9 -> ransom, 16 -> 25, 3 -> name, 10 -> coast, 13 -> 2008),Map(n -> name, h -> hijack-01, 2 -> 2, b -> between, m2 -> more-than, s -> ship, m -> monetary-quantity, d -> dollar, 1 -> 1, 23 -> 25, a -> and, d2 -> date-entity, r -> ransom, c -> country, 22 -> 2008, o -> off, c2 -> coast))),[Ljava.lang.String;@5bb3131b,Annotation([Ljava.lang.String;@54dcbb9f,[Ljava.lang.String;@74fef3f7,[Ljava.lang.String;@2a037324),Annotation([Ljava.lang.String;@69eb86b4,[Ljava.lang.String;@585ac855,[Ledu.cmu.lti.nlp.amr.Dependency;@5bb8f9e2),Annotation([Ljava.lang.String;@6a933be2,[Ljava.lang.String;@5f78de22,[Ljava.lang.String;@516ebdf8),Annotation([Ljava.lang.String;@4d8539de,[Ljava.lang.String;@3eba57a7,[Ledu.cmu.lti.nlp.amr.Entity;@272a179c))
AMR:
(a / and, calendar, b / between)
(b / between, op, m / monetary-quantity)
(c / country, name, n / name)
(d / dollar, mod, c / country)
(d2 / date-entity, year, 22 / 2008)
(h / hijack-01, ARG0, 2 / 2)
(h / hijack-01, ARG1, s / ship)
(h / hijack-01, ARG6, o / off)
(h / hijack-01, source, r / ransom)
(h / hijack-01, time, d2 / date-entity)
(m / monetary-quantity, quant, 1 / 1)
(m / monetary-quantity, unit, d / dollar)
(m2 / more-than, op, 23 / 25)
(n / name, op, "U.S.")
(o / off, op, c2 / coast)
(r / ransom, quant, b / between)
(s / ship, quant, m2 / more-than)

Decoded in 266,315 microseconds
Sentence: The pirates aboard the Ukrainian ship have stated that upon receipt of payment in American dollars and preferably in 100 dollar bills the ship, its cargo and the 20 sailors on board will be released.

NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 19-20:  100 => 100
Span 29-30:  20 => 20
Span 14-15:  American => (country :name (name :op "America"))
Span 27-28:  and => and
Span 16-17:  and => and
Span 21-22:  bills => bill-01
Span 32-33:  board => board-01
Span 26-27:  cargo => cargo
Span 20-21:  dollar => (monetary-quantity :unit dollar)
Span 15-16:  dollars => (monetary-quantity :unit dollar)
Span 1-2:  pirates => pirate
Span 35-36:  released => release-01
Span 30-31:  sailors => (person :ARG0-of sail-01)
Span 23-24:  ship => ship
Span 5-6:  ship => ship
Span 7-8:  stated => state-01
Span 4-5:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),released,release-01,false), Span(32,33,List(1),board,board-01,false), Span(30,31,List(3, 2),sailors,(person :ARG0-of sail-01),false), Span(29,30,List(4),20,20,false), Span(27,28,List(5),and,and,false), Span(26,27,List(6),cargo,cargo,false), Span(23,24,List(7),ship,ship,false), Span(21,22,List(8),bills,bill-01,false), Span(20,21,List(10, 9),dollar,(monetary-quantity :unit dollar),false), Span(19,20,List(11),100,100,false), Span(16,17,List(12),and,and,false), Span(15,16,List(14, 13),dollars,(monetary-quantity :unit dollar),false), Span(14,15,List(17, 16, 15),American,(country :name (name :op "America")),false), Span(7,8,List(18),stated,state-01,false), Span(5,6,List(19),ship,ship,false), Span(4,5,List(22, 21, 20),Ukrainian,(country :name (name :op "Ukraine")),false), Span(1,2,List(23),pirates,pirate,false)),Map(2 -> person, 5 -> and, 12 -> and, 15 -> country, 8 -> bill-01, 21 -> name, 18 -> state-01, 7 -> ship, 17 -> "America", 1 -> board-01, 23 -> pirate, 4 -> 20, 11 -> 100, 14 -> dollar, 20 -> country, 6 -> cargo, 22 -> "Ukraine", 0 -> release-01, 9 -> monetary-quantity, 16 -> name, 19 -> ship, 3 -> sail-01, 10 -> dollar, 13 -> monetary-quantity),Map(n -> name, 2 -> 20, s2 -> ship, b -> board-01, m2 -> monetary-quantity, b2 -> bill-01, p2 -> pirate, s -> sail-01, s4 -> ship, m -> monetary-quantity, d -> dollar, 1 -> 100, p -> person, c3 -> country, a -> and, d2 -> dollar, r -> release-01, a2 -> and, s3 -> state-01, c -> cargo, n2 -> name, c2 -> country))),[Ljava.lang.String;@30feffc,Annotation([Ljava.lang.String;@67207d8a,[Ljava.lang.String;@bcb09a6,[Ljava.lang.String;@7c2a69b4),Annotation([Ljava.lang.String;@a619c2,[Ljava.lang.String;@648ee871,[Ledu.cmu.lti.nlp.amr.Dependency;@375b5b7f),Annotation([Ljava.lang.String;@1813f3e9,[Ljava.lang.String;@28cb9120,[Ljava.lang.String;@3b152928),Annotation([Ljava.lang.String;@56781d96,[Ljava.lang.String;@5173200b,[Ledu.cmu.lti.nlp.amr.Entity;@25c5e994))
AMR:
(a / and, op, c / cargo)
(a / and, op, p / person)
(a / and, op, s2 / ship)
(a2 / and, op, b2 / bill-01)
(a2 / and, op, p2 / pirate)
(b / board-01, ARG1, 1 / 100)
(b2 / bill-01, ARG1, m / monetary-quantity)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d2 / dollar, mod, c2 / country)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "America")
(n2 / name, op, "Ukraine")
(p / person, quant, 2 / 20)
(p2 / pirate, location, s4 / ship)
(r / release-01, ARG1, a / and)
(s / sail-01, ARG0, p / person)
(s / sail-01, ARG1, b / board-01)
(s3 / state-01, ARG0, p2 / pirate)
(s3 / state-01, ARG1, r / release-01)
(s3 / state-01, time, m2 / monetary-quantity)
(s4 / ship, mod, c3 / country)

Decoded in 1,285,272 microseconds
Sentence: The original country of destination for the arms shipment aboard the Ukrainian ship is being questioned.

NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 7-8:  arms => arm
Span 2-3:  country => country
Span 4-5:  destination => destination
Span 1-2:  original => original
Span 15-16:  questioned => question-01
Span 12-13:  ship => ship
Span 11-12:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),questioned,question-01,false), Span(12,13,List(1),ship,ship,false), Span(11,12,List(4, 3, 2),Ukrainian,(country :name (name :op "Ukraine")),false), Span(7,8,List(5),arms,arm,false), Span(4,5,List(6),destination,destination,false), Span(2,3,List(7),country,country,false), Span(1,2,List(8),original,original,false)),Map(2 -> country, 5 -> arm, 8 -> original, 7 -> country, 1 -> ship, 4 -> "Ukraine", 6 -> destination, 0 -> question-01, 3 -> name),Map(n -> name, q -> question-01, s -> ship, d -> destination, a -> arm, c -> country, o -> original, c2 -> country))),[Ljava.lang.String;@378bd86d,Annotation([Ljava.lang.String;@2189e7a7,[Ljava.lang.String;@69b2f8e5,[Ljava.lang.String;@6331250e),Annotation([Ljava.lang.String;@a10c1b5,[Ljava.lang.String;@644abb8f,[Ledu.cmu.lti.nlp.amr.Dependency;@1a411233),Annotation([Ljava.lang.String;@70325d20,[Ljava.lang.String;@7c2327fa,[Ljava.lang.String;@4d847d32),Annotation([Ljava.lang.String;@5f462e3b,[Ljava.lang.String;@3d7fa3ae,[Ledu.cmu.lti.nlp.amr.Entity;@58065f0c))
AMR:
(a / arm, part, c2 / country)
(c / country, name, n / name)
(c2 / country, mod, d / destination)
(c2 / country, mod, o / original)
(n / name, op, "Ukraine")
(q / question-01, ARG0, s / ship)
(q / question-01, ARG1, c2 / country)
(s / ship, mod, c / country)

Decoded in 137,746 microseconds
Sentence: Shortly after the freighter was hijacked on 25 September 2008 the Kenyan government claimed that the weapons on board were being shipped for Kenya's military.

mkDayMonthYear(25	September	2008,25,September,2008)
NER Entity: (thing :name (name :op "Kenyan"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 7-10:  25 September 2008 => (date-entity :day 25 :month 9 :year 2008)
Span 1-2:  after => after
Span 18-19:  board => board-01
Span 13-14:  claimed => claim-01
Span 3-4:  freighter => freighter
Span 12-13:  government => (government-organization :ARG0-of govern-01)
Span 5-6:  hijacked => hijack-01
Span 23-24:  Kenya => (country :name (name :op "Kenya"))
Span 25-26:  military => military
Span 0-1:  Shortly => shortly
Span 16-17:  weapons => weapon

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),military,military,false), Span(23,24,List(3, 2, 1),Kenya,(country :name (name :op "Kenya")),false), Span(18,19,List(4),board,board-01,false), Span(16,17,List(5),weapons,weapon,false), Span(13,14,List(6),claimed,claim-01,false), Span(12,13,List(8, 7),government,(government-organization :ARG0-of govern-01),false), Span(7,10,List(12, 11, 10, 9),25 September 2008,(date-entity :day 25 :month 9 :year 2008),false), Span(5,6,List(13),hijacked,hijack-01,false), Span(3,4,List(14),freighter,freighter,false), Span(1,2,List(15),after,after,false), Span(0,1,List(16),Shortly,shortly,false)),Map(2 -> name, 5 -> weapon, 12 -> 2008, 15 -> after, 8 -> govern-01, 7 -> government-organization, 1 -> country, 4 -> board-01, 11 -> 9, 14 -> freighter, 6 -> claim-01, 0 -> military, 9 -> date-entity, 16 -> shortly, 3 -> "Kenya", 10 -> 25, 13 -> hijack-01),Map(n -> name, w -> weapon, h -> hijack-01, 2 -> 25, b -> board-01, s -> shortly, m -> military, d -> date-entity, g2 -> govern-01, g -> government-organization, a -> after, c -> country, f -> freighter, 9 -> 9, 22 -> 2008, c2 -> claim-01))),[Ljava.lang.String;@3605c4d3,Annotation([Ljava.lang.String;@585c13de,[Ljava.lang.String;@187eb9a8,[Ljava.lang.String;@726a6b94),Annotation([Ljava.lang.String;@6ad11a56,[Ljava.lang.String;@522b2631,[Ledu.cmu.lti.nlp.amr.Dependency;@3ff57625),Annotation([Ljava.lang.String;@1ee29c84,[Ljava.lang.String;@7c8326a4,[Ljava.lang.String;@77128dab),Annotation([Ljava.lang.String;@63429932,[Ljava.lang.String;@69ce2f62,[Ledu.cmu.lti.nlp.amr.Entity;@c9d82f9))
AMR:
(a / after, op, h / hijack-01)
(b / board-01, ARG0, w / weapon)
(b / board-01, ARG1, c / country)
(c / country, name, n / name)
(c2 / claim-01, ARG0, g / government-organization)
(c2 / claim-01, ARG1, h / hijack-01)
(d / date-entity, day, 2 / 25)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 22 / 2008)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / hijack-01, ARG1, f / freighter)
(h / hijack-01, time, d / date-entity)
(m / military, poss, c / country)
(n / name, op, "Kenya")
(s / shortly, calendar, a / after)

Decoded in 825,518 microseconds
Sentence: The ship was en route to Kenya's main port of Mombasa.

NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Mombasa"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 6-7:  Kenya => (country :name (name :op "Kenya"))
Span 8-9:  main => main
Span 9-10:  port => port
Span 4-5:  route => route-01
Span 1-2:  ship => ship

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(0),port,port,false), Span(8,9,List(1),main,main,false), Span(6,7,List(4, 3, 2),Kenya,(country :name (name :op "Kenya")),false), Span(4,5,List(5),route,route-01,false), Span(1,2,List(6),ship,ship,false)),Map(2 -> country, 5 -> route-01, 1 -> main, 4 -> "Kenya", 6 -> ship, 0 -> port, 3 -> name),Map(n -> name, s -> ship, m -> main, p -> port, r -> route-01, c -> country))),[Ljava.lang.String;@6f012914,Annotation([Ljava.lang.String;@18fdb6cf,[Ljava.lang.String;@d02f8d,[Ljava.lang.String;@60baef24),Annotation([Ljava.lang.String;@61533ae,[Ljava.lang.String;@732bb66d,[Ledu.cmu.lti.nlp.amr.Dependency;@720653c2),Annotation([Ljava.lang.String;@45f24169,[Ljava.lang.String;@6ad5923a,[Ljava.lang.String;@4463d9d3),Annotation([Ljava.lang.String;@43b0ade,[Ljava.lang.String;@5395ea39,[Ledu.cmu.lti.nlp.amr.Entity;@1517f633))
AMR:
(c / country, name, n / name)
(n / name, op, "Kenya")
(p / port, mod, m / main)
(p / port, poss, c / country)
(r / route-01, ARG1, s / ship)
(r / route-01, ARG2, p / port)

Decoded in 98,027 microseconds
Sentence: The weapons on board the ship included 33 T-72 tanks, 150 grenade launchers, 6 anti-aircraft guns and a large quantity of ammunition.

Spans:
Span 13-14:  150 => 150
Span 7-8:  33 => 33
Span 17-18:  6 => 6
Span 20-21:  aircraft => aircraft
Span 27-28:  ammunition => ammunition
Span 22-23:  and => and
Span 3-4:  board => board-01
Span 21-22:  guns => gun
Span 6-7:  included => include-01
Span 24-25:  large => large
Span 15-16:  launchers => launch-01
Span 25-26:  quantity => quantity
Span 5-6:  ship => ship
Span 8-9:  T => (tank :name (name :op "T-72"))
Span 11-12:  tanks => tank
Span 1-2:  weapons => weapon

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),ammunition,ammunition,false), Span(25,26,List(1),quantity,quantity,false), Span(24,25,List(2),large,large,false), Span(22,23,List(3),and,and,false), Span(21,22,List(4),guns,gun,false), Span(20,21,List(5),aircraft,aircraft,false), Span(17,18,List(6),6,6,false), Span(15,16,List(7),launchers,launch-01,false), Span(13,14,List(8),150,150,false), Span(11,12,List(9),tanks,tank,false), Span(8,9,List(12, 11, 10),T,(tank :name (name :op "T-72")),false), Span(7,8,List(13),33,33,false), Span(6,7,List(14),included,include-01,false), Span(5,6,List(15),ship,ship,false), Span(3,4,List(16),board,board-01,false), Span(1,2,List(17),weapons,weapon,false)),Map(2 -> large, 5 -> aircraft, 12 -> "T-72", 15 -> ship, 8 -> 150, 7 -> launch-01, 17 -> weapon, 1 -> quantity, 4 -> gun, 11 -> name, 14 -> include-01, 6 -> 6, 0 -> ammunition, 9 -> tank, 16 -> board-01, 3 -> and, 10 -> tank, 13 -> 33),Map(w -> weapon, n -> name, q -> quantity, b -> board-01, t -> tank, a3 -> aircraft, s -> ship, 1 -> 150, g -> gun, a -> ammunition, t2 -> tank, l2 -> launch-01, i -> include-01, a2 -> and, 6 -> 6, l -> large, 3 -> 33))),[Ljava.lang.String;@4fe01803,Annotation([Ljava.lang.String;@13d186db,[Ljava.lang.String;@6f6962ba,[Ljava.lang.String;@4565a70a),Annotation([Ljava.lang.String;@a0a9fa5,[Ljava.lang.String;@15723761,[Ledu.cmu.lti.nlp.amr.Dependency;@312afbc7),Annotation([Ljava.lang.String;@599f571f,[Ljava.lang.String;@7b60c3e,[Ljava.lang.String;@3fbfa96),Annotation([Ljava.lang.String;@6569dded,[Ljava.lang.String;@466d49f0,[Ledu.cmu.lti.nlp.amr.Entity;@710d7aff))
AMR:
(a / ammunition, quant, q / quantity)
(a2 / and, op, g / gun)
(a2 / and, op, q / quantity)
(a2 / and, op, t / tank)
(b / board-01, ARG0, w / weapon)
(b / board-01, ARG1, 3 / 33)
(g / gun, mod, a3 / aircraft)
(g / gun, quant, 6 / 6)
(i / include-01, ARG0, s / ship)
(i / include-01, ARG1, a2 / and)
(i / include-01, ARG2, w / weapon)
(l2 / launch-01, ARG1, 6 / 6)
(n / name, op, "T-72")
(q / quantity, mod, l / large)
(t / tank, mod, t2 / tank)
(t / tank, quant, 1 / 150)
(t2 / tank, name, n / name)

Decoded in 540,062 microseconds
Sentence: Evidence has subsequently emerged that the weapons were part of a clandestine arms deal between Kenya and the separatist region of southern Sudan.

NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Sudan"))
NER Entity: (country :name (name :op "Sudan"))
NER Entity: (country :name (name :op "Kenya"))
Spans:
Span 16-17:  and => and
Span 12-13:  arms => arm
Span 14-15:  between => between
Span 11-12:  clandestine => clandestine
Span 13-14:  deal => deal-01
Span 3-4:  emerged => emerge-02
Span 15-16:  Kenya => (country :name (name :op "Kenya"))
Span 19-20:  region => region
Span 18-19:  separatist => separatist
Span 21-22:  southern => south
Span 2-3:  subsequently => subsequent
Span 22-23:  Sudan => (country :name (name :op "Sudan"))
Span 6-7:  weapons => weapon

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(2, 1, 0),Sudan,(country :name (name :op "Sudan")),false), Span(21,22,List(3),southern,south,false), Span(19,20,List(4),region,region,false), Span(18,19,List(5),separatist,separatist,false), Span(16,17,List(6),and,and,false), Span(15,16,List(9, 8, 7),Kenya,(country :name (name :op "Kenya")),false), Span(14,15,List(10),between,between,false), Span(13,14,List(11),deal,deal-01,false), Span(12,13,List(12),arms,arm,false), Span(11,12,List(13),clandestine,clandestine,false), Span(6,7,List(14),weapons,weapon,false), Span(3,4,List(15),emerged,emerge-02,false), Span(2,3,List(16),subsequently,subsequent,false)),Map(2 -> "Sudan", 5 -> separatist, 12 -> arm, 15 -> emerge-02, 8 -> name, 7 -> country, 1 -> name, 4 -> region, 11 -> deal-01, 14 -> weapon, 6 -> and, 0 -> country, 9 -> "Kenya", 16 -> subsequent, 3 -> south, 10 -> between, 13 -> clandestine),Map(e -> emerge-02, n -> name, w -> weapon, s2 -> separatist, b -> between, s -> south, d -> deal-01, a -> and, c3 -> clandestine, r -> region, a2 -> arm, s3 -> subsequent, c -> country, c2 -> country, n2 -> name))),[Ljava.lang.String;@2d7e1102,Annotation([Ljava.lang.String;@65327f5,[Ljava.lang.String;@2adddc06,[Ljava.lang.String;@301d8120),Annotation([Ljava.lang.String;@6d367020,[Ljava.lang.String;@72458efc,[Ledu.cmu.lti.nlp.amr.Dependency;@36bc415e),Annotation([Ljava.lang.String;@6a74d228,[Ljava.lang.String;@349d0836,[Ljava.lang.String;@6a714237),Annotation([Ljava.lang.String;@3e134896,[Ljava.lang.String;@72ba28ee,[Ledu.cmu.lti.nlp.amr.Entity;@2e3a5237))
AMR:
(a / and, op, r / region)
(a / and, op, w / weapon)
(b / between, op, c2 / country)
(c / country, name, n / name)
(c / country, part, s / south)
(c2 / country, name, n2 / name)
(d / deal-01, ARG1, a / and)
(d / deal-01, location, b / between)
(d / deal-01, mod, c3 / clandestine)
(d / deal-01, topic, a2 / arm)
(e / emerge-02, ARG1, b / between)
(e / emerge-02, mod, s3 / subsequent)
(n / name, op, "Sudan")
(n2 / name, op, "Kenya")
(r / region, location, c / country)
(r / region, mod, s2 / separatist)

Decoded in 398,574 microseconds
Sentence: The deal would most likely have remained secret had the pirates not hijacked the ship and begun speaking to the media by satellite phone.

Spans:
Span 15-16:  and => and
Span 16-17:  begun => begin-01
Span 1-2:  deal => deal-01
Span 12-13:  hijacked => hijack-01
Span 4-5:  likely => likely
Span 20-21:  media => media
Span 3-4:  most => most
Span 23-24:  phone => phone
Span 10-11:  pirates => pirate
Span 6-7:  remained => remain-01
Span 22-23:  satellite => satellite
Span 7-8:  secret => secret
Span 14-15:  ship => ship
Span 17-18:  speaking => speak-01

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),phone,phone,false), Span(22,23,List(1),satellite,satellite,false), Span(20,21,List(2),media,media,false), Span(17,18,List(3),speaking,speak-01,false), Span(16,17,List(4),begun,begin-01,false), Span(15,16,List(5),and,and,false), Span(14,15,List(6),ship,ship,false), Span(12,13,List(7),hijacked,hijack-01,false), Span(10,11,List(8),pirates,pirate,false), Span(7,8,List(9),secret,secret,false), Span(6,7,List(10),remained,remain-01,false), Span(4,5,List(11),likely,likely,false), Span(3,4,List(12),most,most,false), Span(1,2,List(13),deal,deal-01,false)),Map(2 -> media, 5 -> and, 12 -> most, 8 -> pirate, 7 -> hijack-01, 1 -> satellite, 4 -> begin-01, 11 -> likely, 6 -> ship, 0 -> phone, 9 -> secret, 3 -> speak-01, 10 -> remain-01, 13 -> deal-01),Map(h -> hijack-01, s2 -> speak-01, b -> begin-01, m2 -> most, p2 -> pirate, s -> satellite, s4 -> secret, d -> deal-01, m -> media, p -> phone, a -> and, r -> remain-01, s3 -> ship, l -> likely))),[Ljava.lang.String;@4ebadd3d,Annotation([Ljava.lang.String;@6ac97b84,[Ljava.lang.String;@4917d36b,[Ljava.lang.String;@35c09b94),Annotation([Ljava.lang.String;@2d0bfb24,[Ljava.lang.String;@c3fa05a,[Ledu.cmu.lti.nlp.amr.Dependency;@7b44b63d),Annotation([Ljava.lang.String;@4a699efa,[Ljava.lang.String;@38499e48,[Ljava.lang.String;@4905c46b),Annotation([Ljava.lang.String;@17ae7628,[Ljava.lang.String;@1136b469,[Ledu.cmu.lti.nlp.amr.Entity;@6579c3d9))
AMR:
(a / and, op, b / begin-01)
(a / and, op, h / hijack-01)
(b / begin-01, ARG1, s2 / speak-01)
(d / deal-01, ARG1, h / hijack-01)
(h / hijack-01, ARG0, p2 / pirate)
(h / hijack-01, ARG1, s3 / ship)
(l / likely, degree, m2 / most)
(l / likely, domain, r / remain-01)
(r / remain-01, ARG1, d / deal-01)
(r / remain-01, ARG6, s4 / secret)
(s2 / speak-01, ARG1, m / media)
(s2 / speak-01, ARG2, s / satellite)
(s2 / speak-01, time, p / phone)

Decoded in 558,195 microseconds
Sentence: Ukrainian officials have been adamant in denying any wrongdoing.

NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 7-8:  any => any
Span 6-7:  denying => deny-01
Span 1-2:  officials => (have-org-role-91 :ARG2 official)
Span 0-1:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),any,any,false), Span(6,7,List(1),denying,deny-01,false), Span(1,2,List(3, 2),officials,(have-org-role-91 :ARG2 official),false), Span(0,1,List(6, 5, 4),Ukrainian,(country :name (name :op "Ukraine")),false)),Map(2 -> have-org-role-91, 5 -> name, 1 -> deny-01, 4 -> country, 6 -> "Ukraine", 0 -> any, 3 -> official),Map(n -> name, h -> have-org-role-91, d -> deny-01, a -> any, c -> country, o -> official))),[Ljava.lang.String;@2b87581,Annotation([Ljava.lang.String;@66434cc8,[Ljava.lang.String;@42f22995,[Ljava.lang.String;@693e4d19),Annotation([Ljava.lang.String;@286b39c2,[Ljava.lang.String;@5432050b,[Ledu.cmu.lti.nlp.amr.Dependency;@75f2099),Annotation([Ljava.lang.String;@1c12f3ee,[Ljava.lang.String;@6d467c87,[Ljava.lang.String;@29182679),Annotation([Ljava.lang.String;@57bd802b,[Ljava.lang.String;@5cbb84b1,[Ledu.cmu.lti.nlp.amr.Entity;@2c779e5))
AMR:
(c / country, name, n / name)
(d / deny-01, ARG0, h / have-org-role-91)
(d / deny-01, ARG1, a / any)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Ukraine")

Decoded in 109,925 microseconds
Sentence: Ukrainian diplomat in Kenya oleh belokolos stated --

NER Entity: (thing :name (name :op "Ukrainian"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (thing :name (name :op "Ukrainian"))
Spans:
Span 3-4:  Kenya => (country :name (name :op "Kenya"))
Span 6-7:  stated => state-01
Span 0-1:  Ukrainian => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),stated,state-01,false), Span(3,4,List(3, 2, 1),Kenya,(country :name (name :op "Kenya")),false), Span(0,1,List(6, 5, 4),Ukrainian,(country :name (name :op "Ukraine")),false)),Map(2 -> name, 5 -> name, 1 -> country, 4 -> country, 6 -> "Ukraine", 0 -> state-01, 3 -> "Kenya"),Map(n -> name, s -> state-01, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@6a84bc2a,Annotation([Ljava.lang.String;@5183d589,[Ljava.lang.String;@511d5d04,[Ljava.lang.String;@682c1e93),Annotation([Ljava.lang.String;@27068a50,[Ljava.lang.String;@68e62ca4,[Ledu.cmu.lti.nlp.amr.Dependency;@5328a9c1),Annotation([Ljava.lang.String;@5b78fdb1,[Ljava.lang.String;@48bfb884,[Ljava.lang.String;@11653e3b),Annotation([Ljava.lang.String;@715fb77,[Ljava.lang.String;@1b9c1b51,[Ledu.cmu.lti.nlp.amr.Entity;@2e52fb3e))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Kenya")
(n2 / name, op, "Ukraine")
(s / state-01, ARG0, c / country)
(s / state-01, ARG6, c2 / country)

Decoded in 17,190 microseconds
Sentence: Ukraine does not supply or have plans to supply any armaments to the Government of South Sudan.

NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "South" :op "Sudan"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 9-10:  any => any
Span 13-14:  Government => (government-organization :ARG0-of govern-01)
Span 4-5:  or => or
Span 6-7:  plans => plan-01
Span 15-17:  South Sudan => (country :name (name :op "South" :op "Sudan"))
Span 8-9:  supply => supply-01
Span 3-4:  supply => supply-01
Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,17,List(3, 2, 1, 0),South Sudan,(country :name (name :op "South" :op "Sudan")),false), Span(13,14,List(5, 4),Government,(government-organization :ARG0-of govern-01),false), Span(9,10,List(6),any,any,false), Span(8,9,List(7),supply,supply-01,false), Span(6,7,List(8),plans,plan-01,false), Span(4,5,List(9),or,or,false), Span(3,4,List(10),supply,supply-01,false), Span(0,1,List(13, 12, 11),Ukraine,(country :name (name :op "Ukraine")),false)),Map(2 -> "South", 5 -> govern-01, 12 -> name, 8 -> plan-01, 7 -> supply-01, 1 -> name, 4 -> government-organization, 11 -> country, 6 -> any, 0 -> country, 9 -> or, 3 -> "Sudan", 10 -> supply-01, 13 -> "Ukraine"),Map(n -> name, s2 -> supply-01, s -> supply-01, p -> plan-01, g2 -> govern-01, g -> government-organization, a -> any, c -> country, o -> or, n2 -> name, c2 -> country))),[Ljava.lang.String;@16fe9c29,Annotation([Ljava.lang.String;@3e9803c2,[Ljava.lang.String;@4525d1d3,[Ljava.lang.String;@7c974942),Annotation([Ljava.lang.String;@1eea9d2d,[Ljava.lang.String;@60921b21,[Ledu.cmu.lti.nlp.amr.Dependency;@bd2f5a9),Annotation([Ljava.lang.String;@4d4960c8,[Ljava.lang.String;@7808fb9,[Ljava.lang.String;@773bd77b),Annotation([Ljava.lang.String;@6b580b88,[Ljava.lang.String;@6d91790b,[Ledu.cmu.lti.nlp.amr.Entity;@6e6fce47))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "South")
(n / name, op, "Sudan")
(n2 / name, op, "Ukraine")
(o / or, op, s2 / supply-01)
(p / plan-01, ARG1, s / supply-01)
(s / supply-01, ARG1, a / any)
(s / supply-01, ARG2, g / government-organization)
(s2 / supply-01, ARG0, c2 / country)
(s2 / supply-01, ARG1, p / plan-01)

Decoded in 260,755 microseconds
Sentence: All the appropriate paperwork has been validated.

Spans:
Span 0-1:  All => all
Span 2-3:  appropriate => appropriate

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),appropriate,appropriate,false), Span(0,1,List(1),All,all,false)),Map(1 -> all, 0 -> appropriate),Map(a -> appropriate, a2 -> all))),[Ljava.lang.String;@47c64cfe,Annotation([Ljava.lang.String;@6ce90bc5,[Ljava.lang.String;@a567e72,[Ljava.lang.String;@1a5b8489),Annotation([Ljava.lang.String;@6f8f8a80,[Ljava.lang.String;@4b1c0397,[Ledu.cmu.lti.nlp.amr.Dependency;@72805168),Annotation([Ljava.lang.String;@34b9fc7d,[Ljava.lang.String;@27f1bbe0,[Ljava.lang.String;@cda0432),Annotation([Ljava.lang.String;@7c211fd0,[Ljava.lang.String;@7004e3d,[Ledu.cmu.lti.nlp.amr.Entity;@2d84cb86))
AMR:
(a2 / all, calendar, a / appropriate)

Decoded in 7,727 microseconds
Sentence: Ukraine abides by all United Nations rules and arms control agreements.

NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 1-2:  abides => abide-01
Span 10-11:  agreements => agree-01
Span 3-4:  all => all
Span 7-8:  and => and
Span 8-9:  arms => arm
Span 9-10:  control => control-01
Span 6-7:  rules => rule
Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))
Span 4-6:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),agreements,agree-01,false), Span(9,10,List(1),control,control-01,false), Span(8,9,List(2),arms,arm,false), Span(7,8,List(3),and,and,false), Span(6,7,List(4),rules,rule,false), Span(4,6,List(8, 7, 6, 5),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(3,4,List(9),all,all,false), Span(1,2,List(10),abides,abide-01,false), Span(0,1,List(13, 12, 11),Ukraine,(country :name (name :op "Ukraine")),false)),Map(2 -> arm, 5 -> organization, 12 -> name, 8 -> "Nations", 7 -> "United", 1 -> control-01, 4 -> rule, 11 -> country, 6 -> name, 0 -> agree-01, 9 -> all, 3 -> and, 10 -> abide-01, 13 -> "Ukraine"),Map(n -> name, a3 -> and, a -> agree-01, a5 -> abide-01, r -> rule, a2 -> arm, c -> control-01, o -> organization, n2 -> name, c2 -> country, a4 -> all))),[Ljava.lang.String;@71a3a190,Annotation([Ljava.lang.String;@588ffeb,[Ljava.lang.String;@7c28c1,[Ljava.lang.String;@baf1bb3),Annotation([Ljava.lang.String;@67ec8477,[Ljava.lang.String;@25d958c6,[Ledu.cmu.lti.nlp.amr.Dependency;@4482469c),Annotation([Ljava.lang.String;@3703bf3c,[Ljava.lang.String;@34cf5a97,[Ljava.lang.String;@5b3f3ba0),Annotation([Ljava.lang.String;@ddf20fd,[Ljava.lang.String;@278f8425,[Ledu.cmu.lti.nlp.amr.Entity;@695a69a1))
AMR:
(a / agree-01, ARG0, o / organization)
(a / agree-01, ARG1, a3 / and)
(a / agree-01, mod, c / control-01)
(a3 / and, op, r / rule)
(a3 / and, quant, a4 / all)
(a5 / abide-01, ARG0, c2 / country)
(a5 / abide-01, ARG1, r / rule)
(c / control-01, ARG1, a2 / arm)
(c2 / country, name, n2 / name)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Ukraine")
(o / organization, name, n / name)

Decoded in 298,595 microseconds
Sentence: Ukraine inherited enormous stockpiles of weaponry after the collapse of the Soviet Union and is now a major arms dealer.

NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "Soviet" :op "Union"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 6-7:  after => after
Span 13-14:  and => and
Span 18-19:  arms => arm
Span 8-9:  collapse => collapse-01
Span 19-20:  dealer => (person :ARG0-of deal-01)
Span 17-18:  major => major
Span 15-16:  now => now
Span 11-13:  Soviet Union => (country :name (name :op "Union" :op "Soviet"))
Span 0-1:  Ukraine => (country :name (name :op "Ukraine"))
Span 5-6:  weaponry => weaponry

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),dealer,(person :ARG0-of deal-01),false), Span(18,19,List(2),arms,arm,false), Span(17,18,List(3),major,major,false), Span(15,16,List(4),now,now,false), Span(13,14,List(5),and,and,false), Span(11,13,List(9, 8, 7, 6),Soviet Union,(country :name (name :op "Union" :op "Soviet")),false), Span(8,9,List(10),collapse,collapse-01,false), Span(6,7,List(11),after,after,false), Span(5,6,List(12),weaponry,weaponry,false), Span(0,1,List(15, 14, 13),Ukraine,(country :name (name :op "Ukraine")),false)),Map(2 -> arm, 5 -> and, 12 -> weaponry, 15 -> "Ukraine", 8 -> "Union", 7 -> name, 1 -> deal-01, 4 -> now, 11 -> after, 14 -> name, 6 -> country, 0 -> person, 9 -> "Soviet", 3 -> major, 10 -> collapse-01, 13 -> country),Map(n -> now, w -> weaponry, a3 -> after, d -> deal-01, m -> major, p -> person, a -> arm, c3 -> country, n3 -> name, a2 -> and, c -> country, n2 -> name, c2 -> collapse-01))),[Ljava.lang.String;@4b1abd11,Annotation([Ljava.lang.String;@3f36b447,[Ljava.lang.String;@6443b128,[Ljava.lang.String;@5eeedb60),Annotation([Ljava.lang.String;@40021799,[Ljava.lang.String;@4a1c0752,[Ledu.cmu.lti.nlp.amr.Dependency;@332f25c8),Annotation([Ljava.lang.String;@1b32cd16,[Ljava.lang.String;@4bdcaf36,[Ljava.lang.String;@61d01788),Annotation([Ljava.lang.String;@2b9b7f1f,[Ljava.lang.String;@264c5d07,[Ledu.cmu.lti.nlp.amr.Entity;@847f3e7))
AMR:
(a / arm, mod, m / major)
(a2 / and, op, c / country)
(a2 / and, op, c3 / country)
(a2 / and, op, p / person)
(a3 / after, op, c2 / collapse-01)
(c / country, name, n2 / name)
(c2 / collapse-01, ARG1, c / country)
(c3 / country, name, n3 / name)
(d / deal-01, ARG0, p / person)
(d / deal-01, ARG1, a / arm)
(d / deal-01, time, n / now)
(n2 / name, op, "Soviet")
(n2 / name, op, "Union")
(n3 / name, op, "Ukraine")
(w / weaponry, prep-under, a2 / and)

Decoded in 319,087 microseconds
Sentence: The deal with Ukraine is considered suspicious given that Kenya has mostly relied on the United Kingdom and other western countries for its supply of heavy weapons.

NER Entity: (country :name (name :op "Ukraine"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "United" :op "Kingdom"))
NER Entity: (country :name (name :op "Kenya"))
NER Entity: (country :name (name :op "Ukraine"))
Spans:
Span 17-18:  and => and
Span 5-6:  considered => consider-01
Span 20-21:  countries => country
Span 1-2:  deal => deal-01
Span 7-8:  given => give-01
Span 25-26:  heavy => heavy
Span 9-10:  Kenya => (country :name (name :op "Kenya"))
Span 11-12:  mostly => most
Span 18-19:  other => other
Span 12-13:  relied => rely-01
Span 23-24:  supply => supply-01
Span 3-4:  Ukraine => (country :name (name :op "Ukraine"))
Span 15-17:  United Kingdom => (country :name (name :op "United" :op "Kingdom"))
Span 26-27:  weapons => weapon
Span 19-20:  western => western

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),weapons,weapon,false), Span(25,26,List(1),heavy,heavy,false), Span(23,24,List(2),supply,supply-01,false), Span(20,21,List(3),countries,country,false), Span(19,20,List(4),western,western,false), Span(18,19,List(5),other,other,false), Span(17,18,List(6),and,and,false), Span(15,17,List(10, 9, 8, 7),United Kingdom,(country :name (name :op "United" :op "Kingdom")),false), Span(12,13,List(11),relied,rely-01,false), Span(11,12,List(12),mostly,most,false), Span(9,10,List(15, 14, 13),Kenya,(country :name (name :op "Kenya")),false), Span(7,8,List(16),given,give-01,false), Span(5,6,List(17),considered,consider-01,false), Span(3,4,List(20, 19, 18),Ukraine,(country :name (name :op "Ukraine")),false), Span(1,2,List(21),deal,deal-01,false)),Map(2 -> supply-01, 5 -> other, 12 -> most, 15 -> "Kenya", 8 -> name, 21 -> deal-01, 18 -> country, 7 -> country, 17 -> consider-01, 1 -> heavy, 4 -> western, 11 -> rely-01, 14 -> name, 20 -> "Ukraine", 6 -> and, 0 -> weapon, 9 -> "United", 16 -> give-01, 19 -> name, 3 -> country, 10 -> "Kingdom", 13 -> country),Map(w -> weapon, n -> name, h -> heavy, c4 -> consider-01, s -> supply-01, d -> deal-01, m -> most, g -> give-01, n3 -> name, a -> and, c3 -> country, w2 -> western, r -> rely-01, c -> country, o -> other, c2 -> country, n2 -> name, c5 -> country))),[Ljava.lang.String;@69cac930,Annotation([Ljava.lang.String;@19593091,[Ljava.lang.String;@5d39f2d8,[Ljava.lang.String;@6ad6fa53),Annotation([Ljava.lang.String;@55ea2d70,[Ljava.lang.String;@5e742e4,[Ledu.cmu.lti.nlp.amr.Dependency;@175acfb2),Annotation([Ljava.lang.String;@4a03bb68,[Ljava.lang.String;@4e868ef5,[Ljava.lang.String;@71c905a3),Annotation([Ljava.lang.String;@30af7377,[Ljava.lang.String;@67a056f1,[Ledu.cmu.lti.nlp.amr.Entity;@1dab9dd6))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, mod, o / other)
(c / country, topic, s / supply-01)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / consider-01, ARG1, d / deal-01)
(c5 / country, name, n3 / name)
(d / deal-01, ARG0, w2 / western)
(g / give-01, ARG1, d / deal-01)
(g / give-01, ARG2, c3 / country)
(n / name, op, "Kingdom")
(n / name, op, "United")
(n2 / name, op, "Kenya")
(n3 / name, op, "Ukraine")
(r / rely-01, ARG0, c3 / country)
(r / rely-01, ARG1, a / and)
(r / rely-01, manner, m / most)
(s / supply-01, ARG0, c5 / country)
(s / supply-01, ARG1, w / weapon)
(w / weapon, mod, h / heavy)

Decoded in 958,296 microseconds
Sentence: Kenyan politicians were demanding answers and have called for several commissions to examine the situation.

NER Entity: (thing :name (name :op "Kenyan"))
Spans:
Span 5-6:  and => and
Span 3-4:  demanding => demand-01
Span 12-13:  examine => examine-01
Span 1-2:  politicians => politician
Span 9-10:  several => several
Span 14-15:  situation => situation

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),situation,situation,false), Span(12,13,List(1),examine,examine-01,false), Span(9,10,List(2),several,several,false), Span(5,6,List(3),and,and,false), Span(3,4,List(4),demanding,demand-01,false), Span(1,2,List(5),politicians,politician,false)),Map(2 -> several, 5 -> politician, 1 -> examine-01, 4 -> demand-01, 0 -> situation, 3 -> and),Map(e -> examine-01, s2 -> several, s -> situation, d -> demand-01, p -> politician, a -> and))),[Ljava.lang.String;@247667dd,Annotation([Ljava.lang.String;@6f099cef,[Ljava.lang.String;@afb5821,[Ljava.lang.String;@4bff2185),Annotation([Ljava.lang.String;@5c20ffa8,[Ljava.lang.String;@7fedfe27,[Ledu.cmu.lti.nlp.amr.Dependency;@2f879bab),Annotation([Ljava.lang.String;@1d4664d7,[Ljava.lang.String;@46c00568,[Ljava.lang.String;@56ccd751),Annotation([Ljava.lang.String;@458544e0,[Ljava.lang.String;@6bcbf05b,[Ledu.cmu.lti.nlp.amr.Entity;@2d66530f))
AMR:
(a / and, op, d / demand-01)
(d / demand-01, ARG0, s2 / several)
(d / demand-01, ARG1, p / politician)
(e / examine-01, ARG0, p / politician)
(e / examine-01, ARG1, s / situation)

Decoded in 175,348 microseconds
Sentence: Southern Sudan is an autonomous region that is currently increasing its military and that uses Soviet-designed tanks.

NER Entity: (country :name (name :op "Southern" :op "Sudan"))
Spans:
Span 12-13:  and => and
Span 8-9:  currently => current
Span 17-18:  designed => design-01
Span 9-10:  increasing => increase-01
Span 11-12:  military => military
Span 5-6:  region => region
Span 0-2:  Southern Sudan => (country :name (name :op "Southern" :op "Sudan"))
Span 15-16:  Soviet => "Soviet"
Span 18-19:  tanks => tank
Span 14-15:  uses => use-01

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),tanks,tank,false), Span(17,18,List(1),designed,design-01,false), Span(15,16,List(2),Soviet,"Soviet",false), Span(14,15,List(3),uses,use-01,false), Span(12,13,List(4),and,and,false), Span(11,12,List(5),military,military,false), Span(9,10,List(6),increasing,increase-01,false), Span(8,9,List(7),currently,current,false), Span(5,6,List(8),region,region,false), Span(0,2,List(12, 11, 10, 9),Southern Sudan,(country :name (name :op "Southern" :op "Sudan")),false)),Map(2 -> "Soviet", 5 -> military, 12 -> "Sudan", 8 -> region, 7 -> current, 1 -> design-01, 4 -> and, 11 -> "Southern", 6 -> increase-01, 0 -> tank, 9 -> country, 3 -> use-01, 10 -> name),Map(S -> "Soviet", n -> name, t -> tank, m -> military, d -> design-01, a -> and, r -> region, i -> increase-01, c -> current, u -> use-01, c2 -> country))),[Ljava.lang.String;@1d207fad,Annotation([Ljava.lang.String;@72ed9aad,[Ljava.lang.String;@4690f583,[Ljava.lang.String;@59712875),Annotation([Ljava.lang.String;@47b2e9e1,[Ljava.lang.String;@59942b48,[Ledu.cmu.lti.nlp.amr.Dependency;@1869f114),Annotation([Ljava.lang.String;@488b50ec,[Ljava.lang.String;@18a645fd,[Ljava.lang.String;@6090f3ca),Annotation([Ljava.lang.String;@37a64f9d,[Ljava.lang.String;@25b865b5,[Ledu.cmu.lti.nlp.amr.Entity;@f9b5552))
AMR:
(a / and, op, u / use-01)
(c2 / country, name, n / name)
(d / design-01, ARG1, t / tank)
(d / design-01, ARG6, S / "Soviet")
(i / increase-01, ARG1, m / military)
(i / increase-01, ARG2, r / region)
(i / increase-01, time, c / current)
(n / name, op, "Southern")
(n / name, op, "Sudan")
(r / region, domain, c2 / country)
(u / use-01, ARG0, c2 / country)
(u / use-01, ARG1, t / tank)

Decoded in 506,690 microseconds
Sentence: The American military stated that its priority is to ensure that the weapons were not unloaded from the ship and sold to Islamist insurgents in Somalia.

NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "Islamist"))
NER Entity: (country :name (name :op "Somalia"))
NER Entity: (thing :name (name :op "Islamist"))
NER Entity: (thing :name (name :op "American"))
Spans:
Span 1-2:  American => (country :name (name :op "America"))
Span 19-20:  and => and
Span 9-10:  ensure => ensure-01
Span 23-24:  insurgents => insurgent
Span 22-23:  Islamist => (religious-group :name (name :op "Islamism"))
Span 2-3:  military => military
Span 6-7:  priority => prioritize-01
Span 18-19:  ship => ship
Span 20-21:  sold => sell-01
Span 3-4:  stated => state-01
Span 12-13:  weapons => weapon

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),insurgents,insurgent,false), Span(22,23,List(3, 2, 1),Islamist,(religious-group :name (name :op "Islamism")),false), Span(20,21,List(4),sold,sell-01,false), Span(19,20,List(5),and,and,false), Span(18,19,List(6),ship,ship,false), Span(12,13,List(7),weapons,weapon,false), Span(9,10,List(8),ensure,ensure-01,false), Span(6,7,List(9),priority,prioritize-01,false), Span(3,4,List(10),stated,state-01,false), Span(2,3,List(11),military,military,false), Span(1,2,List(14, 13, 12),American,(country :name (name :op "America")),false)),Map(2 -> name, 5 -> and, 12 -> country, 8 -> ensure-01, 7 -> weapon, 1 -> religious-group, 4 -> sell-01, 11 -> military, 14 -> "America", 6 -> ship, 0 -> insurgent, 9 -> prioritize-01, 3 -> "Islamism", 10 -> state-01, 13 -> name),Map(e -> ensure-01, n -> name, w -> weapon, s2 -> ship, s -> sell-01, m -> military, p -> prioritize-01, a -> and, i -> insurgent, r -> religious-group, s3 -> state-01, c -> country, n2 -> name))),[Ljava.lang.String;@6872f9c8,Annotation([Ljava.lang.String;@6d2d99fc,[Ljava.lang.String;@bdecc21,[Ljava.lang.String;@5e3a39cd),Annotation([Ljava.lang.String;@21f9277b,[Ljava.lang.String;@201aa8c1,[Ledu.cmu.lti.nlp.amr.Dependency;@5d58c727),Annotation([Ljava.lang.String;@52a36910,[Ljava.lang.String;@3a095ec0,[Ljava.lang.String;@4f20a5e0),Annotation([Ljava.lang.String;@54da32dc,[Ljava.lang.String;@1d782abe,[Ledu.cmu.lti.nlp.amr.Entity;@6df7988f))
AMR:
(a / and, op, s / sell-01)
(c / country, name, n2 / name)
(e / ensure-01, ARG0, p / prioritize-01)
(e / ensure-01, ARG1, a / and)
(i / insurgent, mod, r / religious-group)
(m / military, mod, c / country)
(n / name, op, "Islamism")
(n2 / name, op, "America")
(p / prioritize-01, ARG1, s2 / ship)
(r / religious-group, name, n / name)
(s / sell-01, ARG1, w / weapon)
(s / sell-01, ARG2, i / insurgent)
(s3 / state-01, ARG0, m / military)
(s3 / state-01, ARG1, p / prioritize-01)

Decoded in 429,091 microseconds
Sentence: The pirates have denied interest in the weapons and claimed to have been unaware that the cargo included tanks when they hijacked the ship.

Spans:
Span 8-9:  and => and
Span 16-17:  cargo => cargo
Span 9-10:  claimed => claim-01
Span 3-4:  denied => deny-01
Span 21-22:  hijacked => hijack-01
Span 17-18:  included => include-01
Span 4-5:  interest => interest-01
Span 1-2:  pirates => pirate
Span 23-24:  ship => ship
Span 18-19:  tanks => tank
Span 20-21:  they => they
Span 7-8:  weapons => weapon

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),ship,ship,false), Span(21,22,List(1),hijacked,hijack-01,false), Span(20,21,List(2),they,they,false), Span(18,19,List(3),tanks,tank,false), Span(17,18,List(4),included,include-01,false), Span(16,17,List(5),cargo,cargo,false), Span(9,10,List(6),claimed,claim-01,false), Span(8,9,List(7),and,and,false), Span(7,8,List(8),weapons,weapon,false), Span(4,5,List(9),interest,interest-01,false), Span(3,4,List(10),denied,deny-01,false), Span(1,2,List(11),pirates,pirate,false)),Map(2 -> they, 5 -> cargo, 8 -> weapon, 7 -> and, 1 -> hijack-01, 11 -> pirate, 4 -> include-01, 6 -> claim-01, 9 -> interest-01, 0 -> ship, 10 -> deny-01, 3 -> tank),Map(w -> weapon, h -> hijack-01, t -> they, s -> ship, d -> deny-01, p -> pirate, a -> and, i2 -> interest-01, t2 -> tank, i -> include-01, c -> cargo, c2 -> claim-01))),[Ljava.lang.String;@27b22f74,Annotation([Ljava.lang.String;@22fba58c,[Ljava.lang.String;@7e8a46b7,[Ljava.lang.String;@2fe88a09),Annotation([Ljava.lang.String;@1917d90f,[Ljava.lang.String;@66bfd864,[Ledu.cmu.lti.nlp.amr.Dependency;@4aac85fa),Annotation([Ljava.lang.String;@21fff664,[Ljava.lang.String;@6079cf5,[Ljava.lang.String;@1e6308a9),Annotation([Ljava.lang.String;@30cecdca,[Ljava.lang.String;@6edc4161,[Ledu.cmu.lti.nlp.amr.Entity;@5486887b))
AMR:
(a / and, op, c2 / claim-01)
(a / and, op, d / deny-01)
(c2 / claim-01, ARG1, i / include-01)
(d / deny-01, ARG0, p / pirate)
(d / deny-01, ARG1, i2 / interest-01)
(h / hijack-01, ARG0, t / they)
(h / hijack-01, ARG1, s / ship)
(i / include-01, ARG1, t2 / tank)
(i / include-01, ARG2, c / cargo)
(i / include-01, condition, h / hijack-01)
(i2 / interest-01, ARG1, w / weapon)

Decoded in 457,671 microseconds
Sentence: Pirate spokesman sugule Ali stated in an interview last week that the pirates' sole interest in the deal is money.

NER Entity: (person :name (name :op "Ali"))
Spans:
Span 18-19:  deal => deal-01
Span 15-16:  interest => interest-01
Span 7-8:  interview => interview-01
Span 8-9:  last => last
Span 20-21:  money => money
Span 12-13:  pirates => pirate
Span 1-2:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 4-5:  stated => state-01
Span 9-10:  week => week

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),money,money,false), Span(18,19,List(1),deal,deal-01,false), Span(15,16,List(2),interest,interest-01,false), Span(12,13,List(3),pirates,pirate,false), Span(9,10,List(4),week,week,false), Span(8,9,List(5),last,last,false), Span(7,8,List(6),interview,interview-01,false), Span(4,5,List(7),stated,state-01,false), Span(1,2,List(9, 8),spokesman,(have-org-role-91 :ARG2 spokesman),false)),Map(2 -> interest-01, 5 -> last, 8 -> have-org-role-91, 7 -> state-01, 1 -> deal-01, 4 -> week, 6 -> interview-01, 9 -> spokesman, 0 -> money, 3 -> pirate),Map(w -> week, h -> have-org-role-91, s2 -> spokesman, s -> state-01, d -> deal-01, m -> money, p -> pirate, i2 -> interview-01, i -> interest-01, l -> last))),[Ljava.lang.String;@5226e402,Annotation([Ljava.lang.String;@1440c311,[Ljava.lang.String;@189b5fb1,[Ljava.lang.String;@783ec989),Annotation([Ljava.lang.String;@1ddd3478,[Ljava.lang.String;@f973499,[Ledu.cmu.lti.nlp.amr.Dependency;@4d33940d),Annotation([Ljava.lang.String;@43cf6ea3,[Ljava.lang.String;@37c5fc56,[Ljava.lang.String;@1c025cb),Annotation([Ljava.lang.String;@50825a02,[Ljava.lang.String;@68809cc7,[Ledu.cmu.lti.nlp.amr.Entity;@703feacd))
AMR:
(d / deal-01, ARG0, p / pirate)
(d / deal-01, ARG1, w / week)
(h / have-org-role-91, ARG1, i / interest-01)
(h / have-org-role-91, ARG2, s2 / spokesman)
(i / interest-01, ARG1, p / pirate)
(s / state-01, ARG0, s2 / spokesman)
(s / state-01, ARG1, m / money)
(s / state-01, medium, i2 / interview-01)
(w / week, mod, l / last)

Decoded in 114,471 microseconds
Sentence: 2008-11-28

mkDayMonthYear(2008-11-28,28,11,2008)
mkDayMonthYear(2008-11-28,28,11,2008)
Spans:
Span 0-1:  2008-11-28 => (date-entity :day 28 :month 11 :year 2008)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2008-11-28,(date-entity :day 28 :month 11 :year 2008),false)),Map(2 -> 11, 1 -> 28, 0 -> date-entity, 3 -> 2008),Map(2 -> 28, d -> date-entity, 1 -> 11, 22 -> 2008))),[Ljava.lang.String;@7051777c,Annotation([Ljava.lang.String;@3241713e,[Ljava.lang.String;@5ecba515,[Ljava.lang.String;@512d4583),Annotation([Ljava.lang.String;@2abc224d,[Ljava.lang.String;@13cd7ea5,[Ledu.cmu.lti.nlp.amr.Dependency;@102d92c4),Annotation([Ljava.lang.String;@2b97cc1f,[Ljava.lang.String;@60723d6a,[Ljava.lang.String;@18324f97),Annotation([Ljava.lang.String;@64f555e7,[Ljava.lang.String;@71178a52,[Ledu.cmu.lti.nlp.amr.Entity;@ff6077))
AMR:
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2008)

Decoded in 7,014 microseconds
Sentence: Afghanistan (AF)

NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 0-1:  Afghanistan => (country :name (name :op "Afghanistan"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Afghanistan,(country :name (name :op "Afghanistan")),false)),Map(2 -> "Afghanistan", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@abbc908,Annotation([Ljava.lang.String;@44afefd5,[Ljava.lang.String;@9a7a808,[Ljava.lang.String;@72209d93),Annotation([Ljava.lang.String;@2687f956,[Ljava.lang.String;@1ded7b14,[Ledu.cmu.lti.nlp.amr.Dependency;@29be7749),Annotation([Ljava.lang.String;@5f84abe8,[Ljava.lang.String;@4650a407,[Ljava.lang.String;@30135202),Annotation([Ljava.lang.String;@6a4d7f76,[Ljava.lang.String;@10ec523c,[Ledu.cmu.lti.nlp.amr.Entity;@53dfacba))
AMR:
(c / country, name, n / name)
(n / name, op, "Afghanistan")

Decoded in 4,873 microseconds
Sentence: Narcotics

Spans:
Span 0-1:  Narcotics => narcotic

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(0),Narcotics,narcotic,false)),Map(0 -> narcotic),Map(n -> narcotic))),[Ljava.lang.String;@79767781,Annotation([Ljava.lang.String;@78411116,[Ljava.lang.String;@aced190,[Ljava.lang.String;@245a060f),Annotation([Ljava.lang.String;@6edaa77a,[Ljava.lang.String;@1e63d216,[Ledu.cmu.lti.nlp.amr.Dependency;@62ddd21b),Annotation([Ljava.lang.String;@16c3ca31,[Ljava.lang.String;@2d195ee4,[Ljava.lang.String;@2d6aca33),Annotation([Ljava.lang.String;@21ab988f,[Ljava.lang.String;@29314cc9,[Ledu.cmu.lti.nlp.amr.Entity;@4e38d975))
AMR:


Decoded in 1,317 microseconds
Sentence: Head of the U.N. drug office Antonio Maria Costa said that Afghanistan has produced so much opium in recent years that the Taliban are cutting back poppy cultivation and stockpiling raw opium in an effort to support prices and preserve a major source of financing for the insurgency.

NER Entity: (organization :name (name :op "U.N."))
NER Entity: (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "U.N."))
Spans:
Span 11-12:  Afghanistan => (country :name (name :op "Afghanistan"))
Span 38-39:  and => and
Span 28-29:  and => and
Span 6-9:  Antonio Maria Costa => (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
Span 25-26:  back => back
Span 27-28:  cultivation => cultivate-01
Span 24-25:  cutting => cut-02
Span 4-5:  drug => drug
Span 34-35:  effort => effort
Span 44-45:  financing => finance-01
Span 0-1:  Head => head-01
Span 47-48:  insurgency => insurgency
Span 41-42:  major => major
Span 15-16:  much => much
Span 5-6:  office => office
Span 31-32:  opium => opium
Span 16-17:  opium => opium
Span 26-27:  poppy => poppy
Span 37-38:  prices => price-01
Span 13-14:  produced => produce-01
Span 30-31:  raw => raw
Span 18-19:  recent => recent
Span 9-10:  said => say-01
Span 14-15:  so => so
Span 42-43:  source => source
Span 36-37:  support => support-01
Span 22-23:  Taliban => (criminal-organization :name (name :op "Taliban"))
Span 3-4:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))
Span 19-20:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),insurgency,insurgency,false), Span(44,45,List(1),financing,finance-01,false), Span(42,43,List(2),source,source,false), Span(41,42,List(3),major,major,false), Span(38,39,List(4),and,and,false), Span(37,38,List(5),prices,price-01,false), Span(36,37,List(6),support,support-01,false), Span(34,35,List(7),effort,effort,false), Span(31,32,List(8),opium,opium,false), Span(30,31,List(9),raw,raw,false), Span(28,29,List(10),and,and,false), Span(27,28,List(11),cultivation,cultivate-01,false), Span(26,27,List(12),poppy,poppy,false), Span(25,26,List(13),back,back,false), Span(24,25,List(14),cutting,cut-02,false), Span(22,23,List(17, 16, 15),Taliban,(criminal-organization :name (name :op "Taliban")),false), Span(19,20,List(19, 18),years,(temporal-quantity :unit year),false), Span(18,19,List(20),recent,recent,false), Span(16,17,List(21),opium,opium,false), Span(15,16,List(22),much,much,false), Span(14,15,List(23),so,so,false), Span(13,14,List(24),produced,produce-01,false), Span(11,12,List(27, 26, 25),Afghanistan,(country :name (name :op "Afghanistan")),false), Span(9,10,List(28),said,say-01,false), Span(6,9,List(33, 32, 31, 30, 29),Antonio Maria Costa,(person :name (name :op "Antonio" :op "Maria" :op "Costa")),false), Span(5,6,List(34),office,office,false), Span(4,5,List(35),drug,drug,false), Span(3,4,List(39, 38, 37, 36),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false), Span(0,1,List(40),Head,head-01,false)),Map(39 -> "U.N.", 30 -> name, 2 -> source, 5 -> price-01, 33 -> "Costa", 27 -> "Afghanistan", 12 -> poppy, 8 -> opium, 15 -> criminal-organization, 36 -> have-org-role-91, 21 -> opium, 18 -> temporal-quantity, 24 -> produce-01, 35 -> drug, 7 -> effort, 1 -> finance-01, 17 -> "Taliban", 23 -> so, 38 -> name, 26 -> name, 4 -> and, 11 -> cultivate-01, 32 -> "Maria", 14 -> cut-02, 29 -> person, 20 -> recent, 34 -> office, 28 -> say-01, 6 -> support-01, 40 -> head-01, 9 -> raw, 0 -> insurgency, 22 -> much, 16 -> name, 37 -> government-organization, 19 -> year, 10 -> and, 3 -> major, 31 -> "Antonio", 25 -> country, 13 -> back),Map(e -> effort, n -> name, h -> have-org-role-91, h2 -> head-01, s2 -> support-01, t -> temporal-quantity, b -> back, m2 -> much, o3 -> office, p2 -> poppy, n4 -> name, c4 -> country, s -> source, s4 -> say-01, d -> drug, m -> major, y -> year, r2 -> recent, g -> government-organization, p -> price-01, n3 -> name, a -> and, c3 -> criminal-organization, p4 -> person, o2 -> opium, a2 -> and, r -> raw, i -> insurgency, c -> cultivate-01, s3 -> so, f -> finance-01, o -> opium, p3 -> produce-01, n2 -> name, c2 -> cut-02))),[Ljava.lang.String;@35f8a9d3,Annotation([Ljava.lang.String;@48ea2003,[Ljava.lang.String;@6b1e7ad3,[Ljava.lang.String;@63e5e5b4),Annotation([Ljava.lang.String;@13a37e2a,[Ljava.lang.String;@a50ae65,[Ledu.cmu.lti.nlp.amr.Dependency;@1280851e),Annotation([Ljava.lang.String;@5e840abf,[Ljava.lang.String;@56de6d6b,[Ljava.lang.String;@5972d253),Annotation([Ljava.lang.String;@4fcc0416,[Ljava.lang.String;@31e32ea2,[Ledu.cmu.lti.nlp.amr.Entity;@1473b8c0))
AMR:
(a / and, op, o / opium)
(a / and, op, s2 / support-01)
(a2 / and, op, c / cultivate-01)
(a2 / and, op, p3 / produce-01)
(c / cultivate-01, ARG1, o / opium)
(c2 / cut-02, ARG0, c3 / criminal-organization)
(c2 / cut-02, ARG1, c / cultivate-01)
(c2 / cut-02, ARG6, p2 / poppy)
(c2 / cut-02, direction, b / back)
(c3 / criminal-organization, name, n / name)
(c4 / country, name, n2 / name)
(e / effort, purpose, s2 / support-01)
(f / finance-01, ARG0, s / source)
(f / finance-01, ARG1, o / opium)
(g / government-organization, name, n4 / name)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h2 / head-01, ARG0, p4 / person)
(h2 / head-01, ARG1, d / drug)
(i / insurgency, source, o / opium)
(n / name, op, "Taliban")
(n2 / name, op, "Afghanistan")
(n3 / name, op, "Antonio")
(n3 / name, op, "Costa")
(n3 / name, op, "Maria")
(n4 / name, op, "U.N.")
(o / opium, mod, r / raw)
(p / price-01, ARG1, m2 / much)
(p3 / produce-01, ARG0, c4 / country)
(p3 / produce-01, ARG1, o2 / opium)
(p4 / person, mod, o3 / office)
(p4 / person, name, n3 / name)
(s / source, mod, m / major)
(s2 / support-01, ARG1, p / price-01)
(s3 / so, quant, m2 / much)
(s4 / say-01, ARG0, p4 / person)
(s4 / say-01, ARG1, p3 / produce-01)
(t / temporal-quantity, mod, p2 / poppy)
(t / temporal-quantity, unit, y / year)
(y / year, mod, r2 / recent)

Decoded in 4,294,620 microseconds
Sentence: Head of the U.N. drug office Antonio Maria Costa said that Afghanistan has produced so much opium in recent years that the Taliban are cutting back poppy cultivation and stockpiling raw opium in an effort to support prices and preserve a major source of financing for the insurgency.

NER Entity: (organization :name (name :op "U.N."))
NER Entity: (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "U.N."))
Spans:
Span 11-12:  Afghanistan => (country :name (name :op "Afghanistan"))
Span 38-39:  and => and
Span 28-29:  and => and
Span 6-9:  Antonio Maria Costa => (person :name (name :op "Antonio" :op "Maria" :op "Costa"))
Span 25-26:  back => back
Span 27-28:  cultivation => cultivate-01
Span 24-25:  cutting => cut-02
Span 4-5:  drug => drug
Span 34-35:  effort => effort
Span 44-45:  financing => finance-01
Span 0-1:  Head => head-01
Span 47-48:  insurgency => insurgency
Span 41-42:  major => major
Span 15-16:  much => much
Span 5-6:  office => office
Span 31-32:  opium => opium
Span 16-17:  opium => opium
Span 26-27:  poppy => poppy
Span 37-38:  prices => price-01
Span 13-14:  produced => produce-01
Span 30-31:  raw => raw
Span 18-19:  recent => recent
Span 9-10:  said => say-01
Span 14-15:  so => so
Span 42-43:  source => source
Span 36-37:  support => support-01
Span 22-23:  Taliban => (criminal-organization :name (name :op "Taliban"))
Span 3-4:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))
Span 19-20:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(47,48,List(0),insurgency,insurgency,false), Span(44,45,List(1),financing,finance-01,false), Span(42,43,List(2),source,source,false), Span(41,42,List(3),major,major,false), Span(38,39,List(4),and,and,false), Span(37,38,List(5),prices,price-01,false), Span(36,37,List(6),support,support-01,false), Span(34,35,List(7),effort,effort,false), Span(31,32,List(8),opium,opium,false), Span(30,31,List(9),raw,raw,false), Span(28,29,List(10),and,and,false), Span(27,28,List(11),cultivation,cultivate-01,false), Span(26,27,List(12),poppy,poppy,false), Span(25,26,List(13),back,back,false), Span(24,25,List(14),cutting,cut-02,false), Span(22,23,List(17, 16, 15),Taliban,(criminal-organization :name (name :op "Taliban")),false), Span(19,20,List(19, 18),years,(temporal-quantity :unit year),false), Span(18,19,List(20),recent,recent,false), Span(16,17,List(21),opium,opium,false), Span(15,16,List(22),much,much,false), Span(14,15,List(23),so,so,false), Span(13,14,List(24),produced,produce-01,false), Span(11,12,List(27, 26, 25),Afghanistan,(country :name (name :op "Afghanistan")),false), Span(9,10,List(28),said,say-01,false), Span(6,9,List(33, 32, 31, 30, 29),Antonio Maria Costa,(person :name (name :op "Antonio" :op "Maria" :op "Costa")),false), Span(5,6,List(34),office,office,false), Span(4,5,List(35),drug,drug,false), Span(3,4,List(39, 38, 37, 36),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false), Span(0,1,List(40),Head,head-01,false)),Map(39 -> "U.N.", 30 -> name, 2 -> source, 5 -> price-01, 33 -> "Costa", 27 -> "Afghanistan", 12 -> poppy, 8 -> opium, 15 -> criminal-organization, 36 -> have-org-role-91, 21 -> opium, 18 -> temporal-quantity, 24 -> produce-01, 35 -> drug, 7 -> effort, 1 -> finance-01, 17 -> "Taliban", 23 -> so, 38 -> name, 26 -> name, 4 -> and, 11 -> cultivate-01, 32 -> "Maria", 14 -> cut-02, 29 -> person, 20 -> recent, 34 -> office, 28 -> say-01, 6 -> support-01, 40 -> head-01, 9 -> raw, 0 -> insurgency, 22 -> much, 16 -> name, 37 -> government-organization, 19 -> year, 10 -> and, 3 -> major, 31 -> "Antonio", 25 -> country, 13 -> back),Map(e -> effort, n -> name, h -> have-org-role-91, h2 -> head-01, s2 -> support-01, t -> temporal-quantity, b -> back, m2 -> much, o3 -> office, p2 -> poppy, n4 -> name, c4 -> country, s -> source, s4 -> say-01, d -> drug, m -> major, y -> year, r2 -> recent, g -> government-organization, p -> price-01, n3 -> name, a -> and, c3 -> criminal-organization, p4 -> person, o2 -> opium, a2 -> and, r -> raw, i -> insurgency, c -> cultivate-01, s3 -> so, f -> finance-01, o -> opium, p3 -> produce-01, n2 -> name, c2 -> cut-02))),[Ljava.lang.String;@5b5c0057,Annotation([Ljava.lang.String;@749f539e,[Ljava.lang.String;@5ca1f591,[Ljava.lang.String;@551de37d),Annotation([Ljava.lang.String;@6ef81f31,[Ljava.lang.String;@6075b2d3,[Ledu.cmu.lti.nlp.amr.Dependency;@33abde31),Annotation([Ljava.lang.String;@997d532,[Ljava.lang.String;@273842a6,[Ljava.lang.String;@6a969fb8),Annotation([Ljava.lang.String;@7a18e8d,[Ljava.lang.String;@3028e50e,[Ledu.cmu.lti.nlp.amr.Entity;@5560bcdf))
AMR:
(a / and, op, o / opium)
(a / and, op, s2 / support-01)
(a2 / and, op, c / cultivate-01)
(a2 / and, op, p3 / produce-01)
(c / cultivate-01, ARG1, o / opium)
(c2 / cut-02, ARG0, c3 / criminal-organization)
(c2 / cut-02, ARG1, c / cultivate-01)
(c2 / cut-02, ARG6, p2 / poppy)
(c2 / cut-02, direction, b / back)
(c3 / criminal-organization, name, n / name)
(c4 / country, name, n2 / name)
(e / effort, purpose, s2 / support-01)
(f / finance-01, ARG0, s / source)
(f / finance-01, ARG1, o / opium)
(g / government-organization, name, n4 / name)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h2 / head-01, ARG0, p4 / person)
(h2 / head-01, ARG1, d / drug)
(i / insurgency, source, o / opium)
(n / name, op, "Taliban")
(n2 / name, op, "Afghanistan")
(n3 / name, op, "Antonio")
(n3 / name, op, "Costa")
(n3 / name, op, "Maria")
(n4 / name, op, "U.N.")
(o / opium, mod, r / raw)
(p / price-01, ARG1, m2 / much)
(p3 / produce-01, ARG0, c4 / country)
(p3 / produce-01, ARG1, o2 / opium)
(p4 / person, mod, o3 / office)
(p4 / person, name, n3 / name)
(s / source, mod, m / major)
(s2 / support-01, ARG1, p / price-01)
(s3 / so, quant, m2 / much)
(s4 / say-01, ARG0, p4 / person)
(s4 / say-01, ARG1, p3 / produce-01)
(t / temporal-quantity, mod, p2 / poppy)
(t / temporal-quantity, unit, y / year)
(y / year, mod, r2 / recent)

Decoded in 4,275,508 microseconds
Sentence: Costa said this to reporters last week as the U.N. Drug Office Office prepared to release its latest survey of Afghanistan's opium crop.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (person :name (name :op "Costa"))
Spans:
Span 20-21:  Afghanistan => (country :name (name :op "Afghanistan"))
Span 0-1:  Costa => (person :name (name :op "Costa"))
Span 23-24:  crop => crop
Span 10-11:  Drug => drug
Span 5-6:  last => last
Span 17-18:  latest => (late :degree most)
Span 12-13:  Office => office
Span 11-12:  Office => office
Span 22-23:  opium => opium
Span 13-14:  prepared => prepare-02
Span 15-16:  release => release-01
Span 4-5:  reporters => (person :ARG0-of report-01)
Span 1-2:  said => say-01
Span 18-19:  survey => survey-01
Span 2-3:  this => this
Span 9-10:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))
Span 6-7:  week => week

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),crop,crop,false), Span(22,23,List(1),opium,opium,false), Span(20,21,List(4, 3, 2),Afghanistan,(country :name (name :op "Afghanistan")),false), Span(18,19,List(5),survey,survey-01,false), Span(17,18,List(7, 6),latest,(late :degree most),false), Span(15,16,List(8),release,release-01,false), Span(13,14,List(9),prepared,prepare-02,false), Span(12,13,List(10),Office,office,false), Span(11,12,List(11),Office,office,false), Span(10,11,List(12),Drug,drug,false), Span(9,10,List(16, 15, 14, 13),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false), Span(6,7,List(17),week,week,false), Span(5,6,List(18),last,last,false), Span(4,5,List(20, 19),reporters,(person :ARG0-of report-01),false), Span(2,3,List(21),this,this,false), Span(1,2,List(22),said,say-01,false), Span(0,1,List(25, 24, 23),Costa,(person :name (name :op "Costa")),false)),Map(2 -> country, 5 -> survey-01, 12 -> drug, 8 -> release-01, 15 -> name, 21 -> this, 18 -> last, 24 -> name, 7 -> most, 1 -> opium, 17 -> week, 23 -> person, 4 -> "Afghanistan", 11 -> office, 14 -> government-organization, 20 -> report-01, 6 -> late, 9 -> prepare-02, 0 -> crop, 22 -> say-01, 16 -> "U.N.", 19 -> person, 10 -> office, 3 -> name, 25 -> "Costa", 13 -> have-org-role-91),Map(w -> week, n -> name, h -> have-org-role-91, s2 -> say-01, t -> this, o3 -> office, p2 -> person, s -> survey-01, m -> most, d -> drug, r2 -> report-01, g -> government-organization, p -> prepare-02, n3 -> name, o2 -> office, l2 -> last, r -> release-01, c -> crop, l -> late, o -> opium, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@b558294,Annotation([Ljava.lang.String;@bb095,[Ljava.lang.String;@777c350f,[Ljava.lang.String;@27aae97b),Annotation([Ljava.lang.String;@4c9e38,[Ljava.lang.String;@5d1e09bc,[Ledu.cmu.lti.nlp.amr.Dependency;@4bdc8b5d),Annotation([Ljava.lang.String;@3bcd426c,[Ljava.lang.String;@5f14a673,[Ljava.lang.String;@726a17c4),Annotation([Ljava.lang.String;@5dc3fcb7,[Ljava.lang.String;@c4c0b41,[Ledu.cmu.lti.nlp.amr.Entity;@76911385))
AMR:
(c / crop, mod, o / opium)
(c / crop, poss, c2 / country)
(c2 / country, name, n / name)
(g / government-organization, name, n2 / name)
(h / have-org-role-91, ARG0, o2 / office)
(h / have-org-role-91, ARG1, g / government-organization)
(l / late, degree, m / most)
(n / name, op, "Afghanistan")
(n2 / name, op, "U.N.")
(n3 / name, op, "Costa")
(o2 / office, mod, o3 / office)
(p / prepare-02, ARG1, o2 / office)
(p / prepare-02, ARG2, r / release-01)
(p3 / person, name, n3 / name)
(r / release-01, ARG0, d / drug)
(r / release-01, ARG1, s / survey-01)
(r2 / report-01, ARG0, p2 / person)
(s / survey-01, ARG1, o / opium)
(s / survey-01, time, l / late)
(s2 / say-01, ARG0, p3 / person)
(s2 / say-01, ARG1, t / this)
(s2 / say-01, ARG2, p2 / person)
(s2 / say-01, instrument, o2 / office)
(w / week, location, o2 / office)
(w / week, mod, l2 / last)

Decoded in 1,212,914 microseconds
Sentence: The survey showed that poppy cultivation had retreated in much of Afghanistan and was overwhelmingly concentrated in 7 of 34 provinces where the insurgency remains strong, most of those in the south.

NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 19-20:  34 => 34
Span 17-18:  7 => 7
Span 11-12:  Afghanistan => (country :name (name :op "Afghanistan"))
Span 12-13:  and => and
Span 15-16:  concentrated => concentrate-02
Span 5-6:  cultivation => cultivate-01
Span 23-24:  insurgency => insurgency
Span 27-28:  most => most
Span 9-10:  much => much
Span 4-5:  poppy => poppy
Span 24-25:  remains => remain-01
Span 2-3:  showed => show-01
Span 32-33:  south => south
Span 25-26:  strong => strong
Span 1-2:  survey => survey-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),south,south,false), Span(27,28,List(1),most,most,false), Span(25,26,List(2),strong,strong,false), Span(24,25,List(3),remains,remain-01,false), Span(23,24,List(4),insurgency,insurgency,false), Span(19,20,List(5),34,34,false), Span(17,18,List(6),7,7,false), Span(15,16,List(7),concentrated,concentrate-02,false), Span(12,13,List(8),and,and,false), Span(11,12,List(11, 10, 9),Afghanistan,(country :name (name :op "Afghanistan")),false), Span(9,10,List(12),much,much,false), Span(5,6,List(13),cultivation,cultivate-01,false), Span(4,5,List(14),poppy,poppy,false), Span(2,3,List(15),showed,show-01,false), Span(1,2,List(16),survey,survey-01,false)),Map(2 -> strong, 5 -> 34, 12 -> much, 15 -> show-01, 8 -> and, 7 -> concentrate-02, 1 -> most, 4 -> insurgency, 11 -> "Afghanistan", 14 -> poppy, 6 -> 7, 0 -> south, 9 -> country, 16 -> survey-01, 3 -> remain-01, 10 -> name, 13 -> cultivate-01),Map(n -> name, s2 -> strong, m2 -> much, s -> south, s4 -> survey-01, m -> most, 7 -> 7, p -> poppy, a -> and, c3 -> cultivate-01, r -> remain-01, i -> insurgency, s3 -> show-01, c -> concentrate-02, 3 -> 34, c2 -> country))),[Ljava.lang.String;@5467eea4,Annotation([Ljava.lang.String;@160396db,[Ljava.lang.String;@7a799159,[Ljava.lang.String;@40ab8a8),Annotation([Ljava.lang.String;@6ff37443,[Ljava.lang.String;@65cc8228,[Ledu.cmu.lti.nlp.amr.Dependency;@53093491),Annotation([Ljava.lang.String;@21719a0,[Ljava.lang.String;@76b224cd,[Ljava.lang.String;@77ee25f1),Annotation([Ljava.lang.String;@6dd93a21,[Ljava.lang.String;@57b9e423,[Ledu.cmu.lti.nlp.amr.Entity;@304a3655))
AMR:
(7 / 7, op, c / concentrate-02)
(a / and, op, c / concentrate-02)
(a / and, op, c2 / country)
(a / and, op, r / remain-01)
(c / concentrate-02, ARG0, m2 / much)
(c2 / country, name, n / name)
(c2 / country, op, c3 / cultivate-01)
(c3 / cultivate-01, ARG1, p / poppy)
(n / name, op, "Afghanistan")
(r / remain-01, ARG1, i / insurgency)
(r / remain-01, ARG2, s2 / strong)
(r / remain-01, ARG6, m / most)
(s / south, op, c2 / country)
(s3 / show-01, ARG0, s4 / survey-01)
(s3 / show-01, ARG1, a / and)
(s4 / survey-01, ARG0, 3 / 34)

Decoded in 708,617 microseconds
Sentence: The survey was issued November 27, 2008.

mkDayMonthYear(November	27	,	2008,27,November,2008)
Spans:
Span 3-4:  issued => issue-01
Span 4-8:  November 27 , 2008 => (date-entity :day 27 :month 11 :year 2008)
Span 1-2:  survey => survey-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,8,List(3, 2, 1, 0),November 27 , 2008,(date-entity :day 27 :month 11 :year 2008),false), Span(3,4,List(4),issued,issue-01,false), Span(1,2,List(5),survey,survey-01,false)),Map(2 -> 11, 5 -> survey-01, 1 -> 27, 4 -> issue-01, 0 -> date-entity, 3 -> 2008),Map(2 -> 27, s -> survey-01, d -> date-entity, 1 -> 11, i -> issue-01, 22 -> 2008))),[Ljava.lang.String;@368d5c00,Annotation([Ljava.lang.String;@12a160c2,[Ljava.lang.String;@aa10649,[Ljava.lang.String;@6b3871d6),Annotation([Ljava.lang.String;@37095ded,[Ljava.lang.String;@2eb79cbe,[Ledu.cmu.lti.nlp.amr.Dependency;@2ca6546f),Annotation([Ljava.lang.String;@43826ec,[Ljava.lang.String;@7923f5b3,[Ljava.lang.String;@6b63d445),Annotation([Ljava.lang.String;@7578e06a,[Ljava.lang.String;@30b2b76f,[Ledu.cmu.lti.nlp.amr.Entity;@56da52a7))
AMR:
(d / date-entity, day, 2 / 27)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2008)
(i / issue-01, ARG1, s / survey-01)
(i / issue-01, time, d / date-entity)

Decoded in 20,920 microseconds
Sentence: The United Nations found that the result was a 19 percent reduction in the amount of land devoted to opium in Afghanistan even though the total tonnage of opium produced dropped by just 6 percent.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 9-10:  19 => 19
Span 33-34:  6 => 6
Span 21-22:  Afghanistan => (country :name (name :op "Afghanistan"))
Span 14-15:  amount => amount
Span 17-18:  devoted => devote-01
Span 22-23:  even => even
Span 3-4:  found => find-01
Span 32-33:  just => just
Span 16-17:  land => land
Span 28-29:  opium => opium
Span 19-20:  opium => opium
Span 34-35:  percent => percentage-entity
Span 10-11:  percent => percentage-entity
Span 29-30:  produced => produce-01
Span 11-12:  reduction => reduce-01
Span 6-7:  result => result-01
Span 25-26:  total => total
Span 1-3:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),percent,percentage-entity,false), Span(33,34,List(1),6,6,false), Span(32,33,List(2),just,just,false), Span(29,30,List(3),produced,produce-01,false), Span(28,29,List(4),opium,opium,false), Span(25,26,List(5),total,total,false), Span(22,23,List(6),even,even,false), Span(21,22,List(9, 8, 7),Afghanistan,(country :name (name :op "Afghanistan")),false), Span(19,20,List(10),opium,opium,false), Span(17,18,List(11),devoted,devote-01,false), Span(16,17,List(12),land,land,false), Span(14,15,List(13),amount,amount,false), Span(11,12,List(14),reduction,reduce-01,false), Span(10,11,List(15),percent,percentage-entity,false), Span(9,10,List(16),19,19,false), Span(6,7,List(17),result,result-01,false), Span(3,4,List(18),found,find-01,false), Span(1,3,List(22, 21, 20, 19),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> just, 5 -> total, 12 -> land, 15 -> percentage-entity, 8 -> name, 21 -> "United", 18 -> find-01, 7 -> country, 17 -> result-01, 1 -> 6, 4 -> opium, 11 -> devote-01, 14 -> reduce-01, 20 -> name, 6 -> even, 22 -> "Nations", 0 -> percentage-entity, 9 -> "Afghanistan", 16 -> 19, 19 -> organization, 3 -> produce-01, 10 -> opium, 13 -> amount),Map(e -> even, n -> name, t -> total, o3 -> organization, p2 -> produce-01, j -> just, d -> devote-01, 1 -> 19, r2 -> result-01, p -> percentage-entity, a -> amount, o2 -> opium, r -> reduce-01, 6 -> 6, c -> country, l -> land, f -> find-01, o -> opium, p3 -> percentage-entity, n2 -> name))),[Ljava.lang.String;@23ee75c5,Annotation([Ljava.lang.String;@11a7ba62,[Ljava.lang.String;@340b7ef6,[Ljava.lang.String;@30404dba),Annotation([Ljava.lang.String;@6050462a,[Ljava.lang.String;@4c0884e8,[Ledu.cmu.lti.nlp.amr.Dependency;@231baf51),Annotation([Ljava.lang.String;@11841b15,[Ljava.lang.String;@73877e19,[Ljava.lang.String;@7b208b45),Annotation([Ljava.lang.String;@5bfc257,[Ljava.lang.String;@34523d46,[Ledu.cmu.lti.nlp.amr.Entity;@7cedfa63))
AMR:
(c / country, name, n / name)
(d / devote-01, ARG1, l / land)
(d / devote-01, ARG2, o2 / opium)
(d / devote-01, prep-in, c / country)
(d / devote-01, purpose, p2 / produce-01)
(d / devote-01, time, e / even)
(f / find-01, ARG0, o3 / organization)
(f / find-01, ARG1, r / reduce-01)
(j / just, op, p / percentage-entity)
(l / land, quant, a / amount)
(n / name, op, "Afghanistan")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(o3 / organization, name, n2 / name)
(p / percentage-entity, value, 6 / 6)
(p2 / produce-01, ARG1, o / opium)
(p3 / percentage-entity, value, 1 / 19)
(r / reduce-01, ARG0, j / just)
(r / reduce-01, ARG1, a / amount)
(r / reduce-01, ARG2, p3 / percentage-entity)
(r2 / result-01, ARG0, t / total)
(r2 / result-01, ARG1, r / reduce-01)

Decoded in 1,014,260 microseconds
Sentence: The study stated that the high output per acre was attributed to a good growing season in the south.

Spans:
Span 10-11:  attributed => attribute-01
Span 13-14:  good => good-41
Span 14-15:  growing => grow-01
Span 5-6:  high => high
Span 6-7:  output => output
Span 15-16:  season => season
Span 18-19:  south => south
Span 2-3:  stated => state-01
Span 1-2:  study => study

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),south,south,false), Span(15,16,List(1),season,season,false), Span(14,15,List(2),growing,grow-01,false), Span(13,14,List(3),good,good-41,false), Span(10,11,List(4),attributed,attribute-01,false), Span(6,7,List(5),output,output,false), Span(5,6,List(6),high,high,false), Span(2,3,List(7),stated,state-01,false), Span(1,2,List(8),study,study,false)),Map(2 -> grow-01, 5 -> output, 8 -> study, 7 -> state-01, 1 -> season, 4 -> attribute-01, 6 -> high, 0 -> south, 3 -> good-41),Map(h -> high, s2 -> season, s -> south, s4 -> study, g2 -> good-41, g -> grow-01, a -> attribute-01, s3 -> state-01, o -> output))),[Ljava.lang.String;@3e83c18,Annotation([Ljava.lang.String;@783efb48,[Ljava.lang.String;@5d235104,[Ljava.lang.String;@4e8e8621),Annotation([Ljava.lang.String;@c446b14,[Ljava.lang.String;@3af356f,[Ledu.cmu.lti.nlp.amr.Dependency;@4443ef6f),Annotation([Ljava.lang.String;@7e46d648,[Ljava.lang.String;@51751e5f,[Ljava.lang.String;@2b0b4d53),Annotation([Ljava.lang.String;@7068f7ca,[Ljava.lang.String;@38548b19,[Ledu.cmu.lti.nlp.amr.Entity;@41aaedaa))
AMR:
(a / attribute-01, ARG1, o / output)
(g / grow-01, ARG1, s2 / season)
(g2 / good-41, ARG0, o / output)
(g2 / good-41, ARG1, s / south)
(g2 / good-41, ARG2, g / grow-01)
(o / output, mod, h / high)
(s3 / state-01, ARG0, s4 / study)
(s3 / state-01, ARG1, a / attribute-01)

Decoded in 286,967 microseconds
Sentence: The southern region is a heavily irrigated area where the Taliban maintained a strong presence in 5 provinces and have systematically encouraged opium cultivation as a way to finance their insurgency for several years.

NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (organization :name (name :op "Taliban"))
Spans:
Span 16-17:  5 => 5
Span 18-19:  and => and
Span 7-8:  area => area
Span 23-24:  cultivation => cultivate-01
Span 21-22:  encouraged => encourage-01
Span 28-29:  finance => finance-01
Span 5-6:  heavily => heavy
Span 30-31:  insurgency => insurgency
Span 11-12:  maintained => maintain-01
Span 22-23:  opium => opium
Span 14-15:  presence => present
Span 2-3:  region => region
Span 32-33:  several => several
Span 1-2:  southern => south
Span 13-14:  strong => strong
Span 10-11:  Taliban => (criminal-organization :name (name :op "Taliban"))
Span 26-27:  way => way
Span 33-34:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(33,34,List(1, 0),years,(temporal-quantity :unit year),false), Span(32,33,List(2),several,several,false), Span(30,31,List(3),insurgency,insurgency,false), Span(28,29,List(4),finance,finance-01,false), Span(26,27,List(5),way,way,false), Span(23,24,List(6),cultivation,cultivate-01,false), Span(22,23,List(7),opium,opium,false), Span(21,22,List(8),encouraged,encourage-01,false), Span(18,19,List(9),and,and,false), Span(16,17,List(10),5,5,false), Span(14,15,List(11),presence,present,false), Span(13,14,List(12),strong,strong,false), Span(11,12,List(13),maintained,maintain-01,false), Span(10,11,List(16, 15, 14),Taliban,(criminal-organization :name (name :op "Taliban")),false), Span(7,8,List(17),area,area,false), Span(5,6,List(18),heavily,heavy,false), Span(2,3,List(19),region,region,false), Span(1,2,List(20),southern,south,false)),Map(2 -> several, 5 -> way, 12 -> strong, 15 -> name, 8 -> encourage-01, 18 -> heavy, 7 -> opium, 17 -> area, 1 -> year, 4 -> finance-01, 11 -> present, 14 -> criminal-organization, 20 -> south, 6 -> cultivate-01, 0 -> temporal-quantity, 9 -> and, 16 -> "Taliban", 19 -> region, 3 -> insurgency, 10 -> 5, 13 -> maintain-01),Map(e -> encourage-01, n -> name, w -> way, h -> heavy, 5 -> 5, s2 -> strong, t -> temporal-quantity, s -> several, m -> maintain-01, y -> year, p -> present, a -> and, r -> region, a2 -> area, i -> insurgency, s3 -> south, c -> cultivate-01, f -> finance-01, o -> opium, c2 -> criminal-organization))),[Ljava.lang.String;@303a5119,Annotation([Ljava.lang.String;@75b3673,[Ljava.lang.String;@1bcb79c2,[Ljava.lang.String;@d1a10ac),Annotation([Ljava.lang.String;@6fca2a8f,[Ljava.lang.String;@31fc71ab,[Ledu.cmu.lti.nlp.amr.Dependency;@71391b3f),Annotation([Ljava.lang.String;@2cfbeac4,[Ljava.lang.String;@12db3386,[Ljava.lang.String;@4078695f),Annotation([Ljava.lang.String;@79a1728c,[Ljava.lang.String;@a7f0ab6,[Ledu.cmu.lti.nlp.amr.Entity;@41f35f7c))
AMR:
(a / and, op, e / encourage-01)
(a / and, op, m / maintain-01)
(c / cultivate-01, ARG0, 5 / 5)
(c / cultivate-01, ARG1, o / opium)
(c / cultivate-01, ARG2, f / finance-01)
(c2 / criminal-organization, name, n / name)
(e / encourage-01, ARG0, a2 / area)
(e / encourage-01, ARG1, c / cultivate-01)
(f / finance-01, ARG0, w / way)
(f / finance-01, ARG1, i / insurgency)
(f / finance-01, manner, t / temporal-quantity)
(m / maintain-01, ARG0, c2 / criminal-organization)
(m / maintain-01, ARG1, p / present)
(n / name, op, "Taliban")
(p / present, mod, s2 / strong)
(r / region, mod, a2 / area)
(r / region, mod, h / heavy)
(r / region, mod, s3 / south)
(s / several, op, t / temporal-quantity)
(t / temporal-quantity, unit, y / year)

Decoded in 1,012,540 microseconds
Sentence: The U.N. estimates the insurgents made as much as 300 million dollars from the opium trade last year.

NER Entity: (organization :name (name :op "U.N."))
NER Entity: (organization :name (name :op "U.N."))
Spans:
Span 9-10:  300 => 300
Span 11-12:  dollars => (monetary-quantity :unit dollar)
Span 2-3:  estimates => estimate-01
Span 4-5:  insurgents => insurgent
Span 16-17:  last => last
Span 7-8:  much => much
Span 14-15:  opium => opium
Span 15-16:  trade => trade-01
Span 1-2:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))
Span 17-18:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(1, 0),year,(temporal-quantity :unit year),false), Span(16,17,List(2),last,last,false), Span(15,16,List(3),trade,trade-01,false), Span(14,15,List(4),opium,opium,false), Span(11,12,List(6, 5),dollars,(monetary-quantity :unit dollar),false), Span(9,10,List(7),300,300,false), Span(7,8,List(8),much,much,false), Span(4,5,List(9),insurgents,insurgent,false), Span(2,3,List(10),estimates,estimate-01,false), Span(1,2,List(14, 13, 12, 11),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false)),Map(2 -> last, 5 -> monetary-quantity, 12 -> government-organization, 8 -> much, 7 -> 300, 1 -> year, 4 -> opium, 11 -> have-org-role-91, 14 -> "U.N.", 6 -> dollar, 0 -> temporal-quantity, 9 -> insurgent, 3 -> trade-01, 10 -> estimate-01, 13 -> name),Map(e -> estimate-01, n -> name, h -> have-org-role-91, t -> temporal-quantity, m2 -> much, m -> monetary-quantity, d -> dollar, y -> year, g -> government-organization, t2 -> trade-01, i -> insurgent, l -> last, o -> opium, 3 -> 300))),[Ljava.lang.String;@42c2f48c,Annotation([Ljava.lang.String;@3005db4a,[Ljava.lang.String;@425d5d46,[Ljava.lang.String;@198ef2ce),Annotation([Ljava.lang.String;@4cbd03e7,[Ljava.lang.String;@52fc5eb1,[Ledu.cmu.lti.nlp.amr.Dependency;@7a639ec5),Annotation([Ljava.lang.String;@14151bc5,[Ljava.lang.String;@3013909b,[Ljava.lang.String;@2a49fe),Annotation([Ljava.lang.String;@66596a88,[Ljava.lang.String;@5aae8eb5,[Ledu.cmu.lti.nlp.amr.Entity;@76954a33))
AMR:
(e / estimate-01, ARG0, g / government-organization)
(e / estimate-01, ARG1, i / insurgent)
(e / estimate-01, ARG2, m / monetary-quantity)
(e / estimate-01, location, m2 / much)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG1, g / government-organization)
(m / monetary-quantity, medium, t2 / trade-01)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "U.N.")
(t / temporal-quantity, mod, l / last)
(t / temporal-quantity, unit, y / year)
(t2 / trade-01, ARG0, 3 / 300)
(t2 / trade-01, ARG1, o / opium)
(t2 / trade-01, ARG6, l / last)

Decoded in 539,601 microseconds
Sentence: Costa said a lot of war effort can be funded with 2 to 300 million dollars.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (person :name (name :op "Costa"))
Spans:
Span 11-12:  2 => 2
Span 13-14:  300 => 300
Span 7-8:  can => possible
Span 0-1:  Costa => (person :name (name :op "Costa"))
Span 15-16:  dollars => (monetary-quantity :unit dollar)
Span 6-7:  effort => effort
Span 9-10:  funded => fund-01
Span 1-2:  said => say-01
Span 5-6:  war => war

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(2),300,300,false), Span(11,12,List(3),2,2,false), Span(9,10,List(4),funded,fund-01,false), Span(7,8,List(5),can,possible,false), Span(6,7,List(6),effort,effort,false), Span(5,6,List(7),war,war,false), Span(1,2,List(8),said,say-01,false), Span(0,1,List(11, 10, 9),Costa,(person :name (name :op "Costa")),false)),Map(2 -> 300, 5 -> possible, 8 -> say-01, 7 -> war, 1 -> dollar, 11 -> "Costa", 4 -> fund-01, 6 -> effort, 9 -> person, 0 -> monetary-quantity, 10 -> name, 3 -> 2),Map(n -> name, w -> war, e -> effort, 2 -> 2, p2 -> person, s -> say-01, d -> dollar, m -> monetary-quantity, p -> possible, f -> fund-01, 3 -> 300))),[Ljava.lang.String;@24a298a6,Annotation([Ljava.lang.String;@982bb90,[Ljava.lang.String;@27f74733,[Ljava.lang.String;@7bef452c),Annotation([Ljava.lang.String;@4bb8855f,[Ljava.lang.String;@57fae983,[Ledu.cmu.lti.nlp.amr.Dependency;@4a29f290),Annotation([Ljava.lang.String;@4bee18dc,[Ljava.lang.String;@44f3fe83,[Ljava.lang.String;@44c5a16f),Annotation([Ljava.lang.String;@417d6615,[Ljava.lang.String;@7a6ebe1e,[Ledu.cmu.lti.nlp.amr.Entity;@21325036))
AMR:
(e / effort, mod, w / war)
(f / fund-01, ARG1, 3 / 300)
(f / fund-01, manner, m / monetary-quantity)
(m / monetary-quantity, quant, 2 / 2)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Costa")
(p / possible, domain, f / fund-01)
(p2 / person, name, n / name)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, p / possible)
(s / say-01, location, e / effort)

Decoded in 317,350 microseconds
Sentence: The Taliban have producing an amount of opium that far exceeds world demand due to 3 successive years of bumper crops.

NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (organization :name (name :op "Taliban"))
Spans:
Span 15-16:  3 => 3
Span 5-6:  amount => amount
Span 20-21:  crops => crop
Span 12-13:  demand => demand-01
Span 9-10:  far => far
Span 7-8:  opium => opium
Span 3-4:  producing => produce-01
Span 1-2:  Taliban => (criminal-organization :name (name :op "Taliban"))
Span 11-12:  world => world
Span 17-18:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),crops,crop,false), Span(17,18,List(2, 1),years,(temporal-quantity :unit year),false), Span(15,16,List(3),3,3,false), Span(12,13,List(4),demand,demand-01,false), Span(11,12,List(5),world,world,false), Span(9,10,List(6),far,far,false), Span(7,8,List(7),opium,opium,false), Span(5,6,List(8),amount,amount,false), Span(3,4,List(9),producing,produce-01,false), Span(1,2,List(12, 11, 10),Taliban,(criminal-organization :name (name :op "Taliban")),false)),Map(2 -> year, 5 -> world, 12 -> "Taliban", 8 -> amount, 7 -> opium, 1 -> temporal-quantity, 4 -> demand-01, 11 -> name, 6 -> far, 0 -> crop, 9 -> produce-01, 3 -> 3, 10 -> criminal-organization),Map(n -> name, w -> world, t -> temporal-quantity, d -> demand-01, p -> produce-01, y -> year, a -> amount, c -> crop, o -> opium, f -> far, c2 -> criminal-organization, 3 -> 3))),[Ljava.lang.String;@489543a6,Annotation([Ljava.lang.String;@6272c96f,[Ljava.lang.String;@6de30571,[Ljava.lang.String;@5ee34b1b),Annotation([Ljava.lang.String;@3c89bb12,[Ljava.lang.String;@48c4245d,[Ledu.cmu.lti.nlp.amr.Dependency;@3df978b9),Annotation([Ljava.lang.String;@7906578e,[Ljava.lang.String;@8a62297,[Ljava.lang.String;@61a91912),Annotation([Ljava.lang.String;@1763992e,[Ljava.lang.String;@5c92166b,[Ledu.cmu.lti.nlp.amr.Entity;@659925f4))
AMR:
(c / crop, duration, t / temporal-quantity)
(c2 / criminal-organization, name, n / name)
(d / demand-01, ARG0, w / world)
(n / name, op, "Taliban")
(o / opium, quant, a / amount)
(p / produce-01, ARG0, c2 / criminal-organization)
(p / produce-01, ARG1, a / amount)
(p / produce-01, ARG6, f / far)
(p / produce-01, location, w / world)
(t / temporal-quantity, op, p / produce-01)
(t / temporal-quantity, quant, 3 / 3)
(t / temporal-quantity, unit, y / year)

Decoded in 438,744 microseconds
Sentence: Costa said the result was a glut that was depressing the price, which dropped by approximately 20 percent.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (person :name (name :op "Costa"))
Spans:
Span 17-18:  20 => 20
Span 16-17:  approximately => approximately
Span 0-1:  Costa => (person :name (name :op "Costa"))
Span 18-19:  percent => percentage-entity
Span 11-12:  price => (thing :ARG2-of price-01)
Span 3-4:  result => result-01
Span 1-2:  said => say-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),percent,percentage-entity,false), Span(17,18,List(1),20,20,false), Span(16,17,List(2),approximately,approximately,false), Span(11,12,List(4, 3),price,(thing :ARG2-of price-01),false), Span(3,4,List(5),result,result-01,false), Span(1,2,List(6),said,say-01,false), Span(0,1,List(9, 8, 7),Costa,(person :name (name :op "Costa")),false)),Map(2 -> approximately, 5 -> result-01, 8 -> name, 7 -> person, 1 -> 20, 4 -> price-01, 6 -> say-01, 9 -> "Costa", 0 -> percentage-entity, 3 -> thing),Map(n -> name, 2 -> 20, t -> thing, p2 -> price-01, s -> say-01, p -> percentage-entity, a -> approximately, r -> result-01, p3 -> person))),[Ljava.lang.String;@4cd1c1dc,Annotation([Ljava.lang.String;@47f08b81,[Ljava.lang.String;@b9dfc5a,[Ljava.lang.String;@2787de58),Annotation([Ljava.lang.String;@659a2455,[Ljava.lang.String;@267517e4,[Ledu.cmu.lti.nlp.amr.Dependency;@426e505c),Annotation([Ljava.lang.String;@5b022357,[Ljava.lang.String;@6f8e0cee,[Ljava.lang.String;@614aeccc),Annotation([Ljava.lang.String;@5116ac09,[Ljava.lang.String;@1bc425e7,[Ledu.cmu.lti.nlp.amr.Entity;@4b2a30d))
AMR:
(a / approximately, op, p / percentage-entity)
(n / name, op, "Costa")
(p / percentage-entity, value, 2 / 20)
(p2 / price-01, ARG1, r / result-01)
(p2 / price-01, ARG2, t / thing)
(p3 / person, name, n / name)
(r / result-01, ARG1, 2 / 20)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, r / result-01)

Decoded in 55,429 microseconds
Sentence: Costa said that the fact that prices had not collapsed already was evidence that the Taliban, drug lords and even some farmers have stockpiled the opium.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (person :name (name :op "Costa"))
Spans:
Span 10-11:  already => already
Span 19-20:  and => and
Span 9-10:  collapsed => collapse-01
Span 0-1:  Costa => (person :name (name :op "Costa"))
Span 17-18:  drug => drug
Span 20-21:  even => even
Span 12-13:  evidence => (thing :ARG0-of evidence-01)
Span 4-5:  fact => fact
Span 22-23:  farmers => (person :ARG0-of farm-01)
Span 18-19:  lords => lord
Span 26-27:  opium => opium
Span 6-7:  prices => price-01
Span 1-2:  said => say-01
Span 21-22:  some => some
Span 24-25:  stockpiled => stockpile-01
Span 15-16:  Taliban => (criminal-organization :name (name :op "Taliban"))

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),opium,opium,false), Span(24,25,List(1),stockpiled,stockpile-01,false), Span(22,23,List(3, 2),farmers,(person :ARG0-of farm-01),false), Span(21,22,List(4),some,some,false), Span(20,21,List(5),even,even,false), Span(19,20,List(6),and,and,false), Span(18,19,List(7),lords,lord,false), Span(17,18,List(8),drug,drug,false), Span(15,16,List(11, 10, 9),Taliban,(criminal-organization :name (name :op "Taliban")),false), Span(12,13,List(13, 12),evidence,(thing :ARG0-of evidence-01),false), Span(10,11,List(14),already,already,false), Span(9,10,List(15),collapsed,collapse-01,false), Span(6,7,List(16),prices,price-01,false), Span(4,5,List(17),fact,fact,false), Span(1,2,List(18),said,say-01,false), Span(0,1,List(21, 20, 19),Costa,(person :name (name :op "Costa")),false)),Map(2 -> person, 5 -> even, 12 -> thing, 15 -> collapse-01, 8 -> drug, 21 -> "Costa", 18 -> say-01, 7 -> lord, 17 -> fact, 1 -> stockpile-01, 4 -> some, 11 -> "Taliban", 14 -> already, 20 -> name, 6 -> and, 0 -> opium, 9 -> criminal-organization, 16 -> price-01, 19 -> person, 3 -> farm-01, 10 -> name, 13 -> evidence-01),Map(e -> even, n -> name, s2 -> some, t -> thing, p2 -> price-01, e2 -> evidence-01, s -> stockpile-01, d -> drug, p -> person, a -> and, a2 -> already, s3 -> say-01, c -> criminal-organization, f2 -> fact, l -> lord, f -> farm-01, o -> opium, p3 -> person, n2 -> name, c2 -> collapse-01))),[Ljava.lang.String;@322803db,Annotation([Ljava.lang.String;@56ba8773,[Ljava.lang.String;@6ceb7b5e,[Ljava.lang.String;@7dd00705),Annotation([Ljava.lang.String;@f14e5bf,[Ljava.lang.String;@d176a31,[Ledu.cmu.lti.nlp.amr.Dependency;@3a91d146),Annotation([Ljava.lang.String;@4784013e,[Ljava.lang.String;@6f952d6c,[Ljava.lang.String;@5965844d),Annotation([Ljava.lang.String;@6d4a65c6,[Ljava.lang.String;@aa004a0,[Ledu.cmu.lti.nlp.amr.Entity;@4c98a6d5))
AMR:
(a / and, op, c / criminal-organization)
(a / and, op, l / lord)
(a / and, op, p / person)
(c / criminal-organization, name, n / name)
(c2 / collapse-01, ARG0, f2 / fact)
(c2 / collapse-01, ARG1, p2 / price-01)
(c2 / collapse-01, time, a2 / already)
(e / even, calendar, s2 / some)
(e2 / evidence-01, ARG0, t / thing)
(e2 / evidence-01, ARG1, s / stockpile-01)
(f / farm-01, ARG0, p / person)
(f / farm-01, ARG1, d / drug)
(n / name, op, "Taliban")
(n2 / name, op, "Costa")
(p / person, quant, s2 / some)
(p2 / price-01, ARG1, c / criminal-organization)
(p3 / person, name, n2 / name)
(s / stockpile-01, ARG0, a / and)
(s / stockpile-01, ARG1, o / opium)
(s3 / say-01, ARG0, p3 / person)
(s3 / say-01, ARG1, t / thing)

Decoded in 1,401,187 microseconds
Sentence: An increasing amount is also being processed in Afghanistan.

NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 8-9:  Afghanistan => (country :name (name :op "Afghanistan"))
Span 4-5:  also => also
Span 2-3:  amount => amount
Span 1-2:  increasing => increase-01
Span 6-7:  processed => process-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(2, 1, 0),Afghanistan,(country :name (name :op "Afghanistan")),false), Span(6,7,List(3),processed,process-01,false), Span(4,5,List(4),also,also,false), Span(2,3,List(5),amount,amount,false), Span(1,2,List(6),increasing,increase-01,false)),Map(2 -> "Afghanistan", 5 -> amount, 1 -> name, 4 -> also, 6 -> increase-01, 0 -> country, 3 -> process-01),Map(n -> name, p -> process-01, a -> also, i -> increase-01, a2 -> amount, c -> country))),[Ljava.lang.String;@392a04e7,Annotation([Ljava.lang.String;@7f02251,[Ljava.lang.String;@dffa30b,[Ljava.lang.String;@4d8126f),Annotation([Ljava.lang.String;@6d3c232f,[Ljava.lang.String;@6b587673,[Ledu.cmu.lti.nlp.amr.Dependency;@1bcf67e8),Annotation([Ljava.lang.String;@5f404594,[Ljava.lang.String;@53692008,[Ljava.lang.String;@7b2a3ff8),Annotation([Ljava.lang.String;@1bbae752,[Ljava.lang.String;@460b6d54,[Ledu.cmu.lti.nlp.amr.Entity;@5cf87cfd))
AMR:
(c / country, name, n / name)
(i / increase-01, ARG1, a2 / amount)
(n / name, op, "Afghanistan")
(p / process-01, ARG1, a2 / amount)
(p / process-01, ARG2, c / country)
(p / process-01, mod, a / also)

Decoded in 118,298 microseconds
Sentence: Costa added that insurgents have been holding significant amounts of opium.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (person :name (name :op "Costa"))
Spans:
Span 1-2:  added => add-01
Span 8-9:  amounts => amount
Span 0-1:  Costa => (person :name (name :op "Costa"))
Span 6-7:  holding => hold-01
Span 3-4:  insurgents => insurgent
Span 10-11:  opium => opium
Span 7-8:  significant => significant

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),opium,opium,false), Span(8,9,List(1),amounts,amount,false), Span(7,8,List(2),significant,significant,false), Span(6,7,List(3),holding,hold-01,false), Span(3,4,List(4),insurgents,insurgent,false), Span(1,2,List(5),added,add-01,false), Span(0,1,List(8, 7, 6),Costa,(person :name (name :op "Costa")),false)),Map(2 -> significant, 5 -> add-01, 8 -> "Costa", 7 -> name, 1 -> amount, 4 -> insurgent, 6 -> person, 0 -> opium, 3 -> hold-01),Map(n -> name, h -> hold-01, s -> significant, p -> person, a -> amount, a2 -> add-01, i -> insurgent, o -> opium))),[Ljava.lang.String;@76075d65,Annotation([Ljava.lang.String;@3a4ba480,[Ljava.lang.String;@27b71f50,[Ljava.lang.String;@383790cf),Annotation([Ljava.lang.String;@74971ed9,[Ljava.lang.String;@131fcb6f,[Ledu.cmu.lti.nlp.amr.Dependency;@ccd1bc3),Annotation([Ljava.lang.String;@878537d,[Ljava.lang.String;@4455f57d,[Ljava.lang.String;@29fc1a2b),Annotation([Ljava.lang.String;@4d0b0fd4,[Ljava.lang.String;@7a24eb3,[Ledu.cmu.lti.nlp.amr.Entity;@6c37bd27))
AMR:
(a / amount, mod, s / significant)
(a2 / add-01, ARG0, p / person)
(a2 / add-01, ARG1, h / hold-01)
(h / hold-01, ARG0, i / insurgent)
(h / hold-01, ARG1, a / amount)
(n / name, op, "Costa")
(o / opium, quant, a / amount)
(p / person, name, n / name)

Decoded in 143,164 microseconds
Sentence: Costa said the surplus is as much as 11000 tons, or more than twice world demand in the last 3 years and threatened to devalue their stockpiles.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (person :name (name :op "Costa"))
Spans:
Span 8-9:  11000 => 11000
Span 20-21:  3 => 3
Span 22-23:  and => and
Span 0-1:  Costa => (person :name (name :op "Costa"))
Span 16-17:  demand => demand-01
Span 19-20:  last => last
Span 12-13:  more => more
Span 6-7:  much => much
Span 11-12:  or => or
Span 1-2:  said => say-01
Span 23-24:  threatened => threaten-01
Span 9-10:  tons => (mass-quantity :unit ton)
Span 15-16:  world => world
Span 21-22:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),threatened,threaten-01,false), Span(22,23,List(1),and,and,false), Span(21,22,List(3, 2),years,(temporal-quantity :unit year),false), Span(20,21,List(4),3,3,false), Span(19,20,List(5),last,last,false), Span(16,17,List(6),demand,demand-01,false), Span(15,16,List(7),world,world,false), Span(12,13,List(8),more,more,false), Span(11,12,List(9),or,or,false), Span(9,10,List(11, 10),tons,(mass-quantity :unit ton),false), Span(8,9,List(12),11000,11000,false), Span(6,7,List(13),much,much,false), Span(1,2,List(14),said,say-01,false), Span(0,1,List(17, 16, 15),Costa,(person :name (name :op "Costa")),false)),Map(2 -> temporal-quantity, 5 -> last, 12 -> 11000, 15 -> person, 8 -> more, 7 -> world, 17 -> "Costa", 1 -> and, 4 -> 3, 11 -> ton, 14 -> say-01, 6 -> demand-01, 0 -> threaten-01, 9 -> or, 16 -> name, 3 -> year, 10 -> mass-quantity, 13 -> much),Map(m3 -> much, n -> name, w -> world, t -> threaten-01, m2 -> mass-quantity, s -> say-01, d -> demand-01, m -> more, t3 -> ton, 1 -> 11000, p -> person, y -> year, a -> and, t2 -> temporal-quantity, l -> last, o -> or, 3 -> 3))),[Ljava.lang.String;@25d3cfc8,Annotation([Ljava.lang.String;@30331109,[Ljava.lang.String;@2571066a,[Ljava.lang.String;@74fe5966),Annotation([Ljava.lang.String;@4fe875be,[Ljava.lang.String;@677b8e13,[Ledu.cmu.lti.nlp.amr.Dependency;@4a9486c0),Annotation([Ljava.lang.String;@4c27d39d,[Ljava.lang.String;@40ee0a22,[Ljava.lang.String;@7bde1f3a),Annotation([Ljava.lang.String;@15923407,[Ljava.lang.String;@67dba613,[Ledu.cmu.lti.nlp.amr.Entity;@57540fd0))
AMR:
(a / and, op, s / say-01)
(a / and, op, t / threaten-01)
(d / demand-01, ARG0, w / world)
(d / demand-01, ARG1, m / more)
(l / last, op, t2 / temporal-quantity)
(m2 / mass-quantity, unit, t3 / ton)
(n / name, op, "Costa")
(o / or, op, d / demand-01)
(o / or, op, m2 / mass-quantity)
(o / or, op, t2 / temporal-quantity)
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, m2 / mass-quantity)
(s / say-01, ARG6, m3 / much)
(t / threaten-01, ARG1, 1 / 11000)
(t2 / temporal-quantity, quant, 3 / 3)
(t2 / temporal-quantity, unit, y / year)

Decoded in 891,223 microseconds
Sentence: The United Nations found that Afghanistan produced 8500 tons of opium in 2008.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (country :name (name :op "Afghanistan"))
Spans:
Span 12-13:  2008 => (date-entity :year 2008)
Span 7-8:  8500 => (date-entity :year 8500)
Span 5-6:  Afghanistan => (country :name (name :op "Afghanistan"))
Span 3-4:  found => find-01
Span 10-11:  opium => opium
Span 6-7:  produced => produce-01
Span 8-9:  tons => (mass-quantity :unit ton)
Span 1-3:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(1, 0),2008,(date-entity :year 2008),false), Span(10,11,List(2),opium,opium,false), Span(8,9,List(4, 3),tons,(mass-quantity :unit ton),false), Span(7,8,List(6, 5),8500,(date-entity :year 8500),false), Span(6,7,List(7),produced,produce-01,false), Span(5,6,List(10, 9, 8),Afghanistan,(country :name (name :op "Afghanistan")),false), Span(3,4,List(11),found,find-01,false), Span(1,3,List(15, 14, 13, 12),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> opium, 5 -> date-entity, 12 -> organization, 15 -> "Nations", 8 -> country, 7 -> produce-01, 1 -> 2008, 4 -> ton, 11 -> find-01, 14 -> "United", 6 -> 8500, 0 -> date-entity, 9 -> name, 3 -> mass-quantity, 10 -> "Afghanistan", 13 -> name),Map(n -> name, 2 -> 2008, t -> ton, 8 -> 8500, d -> date-entity, m -> mass-quantity, p -> produce-01, d2 -> date-entity, o2 -> organization, c -> country, f -> find-01, o -> opium, n2 -> name))),[Ljava.lang.String;@5cf8edcf,Annotation([Ljava.lang.String;@58cec85b,[Ljava.lang.String;@629f066f,[Ljava.lang.String;@1542af63),Annotation([Ljava.lang.String;@ecfbe91,[Ljava.lang.String;@20ed3303,[Ledu.cmu.lti.nlp.amr.Dependency;@3adbe50f),Annotation([Ljava.lang.String;@3a627c80,[Ljava.lang.String;@49aa766b,[Ljava.lang.String;@963176),Annotation([Ljava.lang.String;@65004ff6,[Ljava.lang.String;@4cafa9aa,[Ledu.cmu.lti.nlp.amr.Entity;@562c877a))
AMR:
(c / country, name, n / name)
(d / date-entity, year, 2 / 2008)
(d2 / date-entity, year, 8 / 8500)
(f / find-01, ARG0, o2 / organization)
(f / find-01, ARG1, c / country)
(m / mass-quantity, time, d2 / date-entity)
(m / mass-quantity, unit, t / ton)
(n / name, op, "Afghanistan")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(o / opium, quant, m / mass-quantity)
(o2 / organization, name, n2 / name)
(p / produce-01, ARG0, c / country)
(p / produce-01, ARG1, o / opium)
(p / produce-01, time, d / date-entity)

Decoded in 239,917 microseconds
Sentence: World demand was estimated at about 4400 tons per year.

Spans:
Span 6-7:  4400 => (date-entity :year 4400)
Span 5-6:  about => about
Span 1-2:  demand => demand-01
Span 3-4:  estimated => estimate-01
Span 7-8:  tons => (mass-quantity :unit ton)
Span 9-10:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(1, 0),year,(temporal-quantity :unit year),false), Span(7,8,List(3, 2),tons,(mass-quantity :unit ton),false), Span(6,7,List(5, 4),4400,(date-entity :year 4400),false), Span(5,6,List(6),about,about,false), Span(3,4,List(7),estimated,estimate-01,false), Span(1,2,List(8),demand,demand-01,false)),Map(2 -> mass-quantity, 5 -> 4400, 8 -> demand-01, 7 -> estimate-01, 1 -> year, 4 -> date-entity, 6 -> about, 0 -> temporal-quantity, 3 -> ton),Map(e -> estimate-01, t -> temporal-quantity, d -> date-entity, m -> mass-quantity, y -> year, a -> about, 4 -> 4400, d2 -> demand-01, t2 -> ton))),[Ljava.lang.String;@67001148,Annotation([Ljava.lang.String;@989da1,[Ljava.lang.String;@31cb96e1,[Ljava.lang.String;@3eed0f5),Annotation([Ljava.lang.String;@64030b91,[Ljava.lang.String;@2032e725,[Ledu.cmu.lti.nlp.amr.Dependency;@4d23015c),Annotation([Ljava.lang.String;@383f1975,[Ljava.lang.String;@441cc260,[Ljava.lang.String;@73a00e09),Annotation([Ljava.lang.String;@26dcd8c0,[Ljava.lang.String;@66e889df,[Ledu.cmu.lti.nlp.amr.Entity;@444548a0))
AMR:
(d / date-entity, year, 4 / 4400)
(d2 / demand-01, ARG1, t / temporal-quantity)
(e / estimate-01, ARG1, d2 / demand-01)
(e / estimate-01, ARG6, a / about)
(m / mass-quantity, mod, a / about)
(m / mass-quantity, time, d / date-entity)
(m / mass-quantity, unit, t2 / ton)
(t / temporal-quantity, unit, y / year)

Decoded in 264,825 microseconds
Sentence: The Taliban this year are taking a passive stance toward cultivation and putting less pressure on Afghan farmers to plant opium poppy.

NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (thing :name (name :op "Afghan"))
NER Entity: (thing :name (name :op "Afghan"))
NER Entity: (organization :name (name :op "Taliban"))
Spans:
Span 16-17:  Afghan => (country :name (name :op "Afghanistan"))
Span 11-12:  and => and
Span 10-11:  cultivation => cultivate-01
Span 17-18:  farmers => (person :ARG0-of farm-01)
Span 13-14:  less => less
Span 20-21:  opium => opium
Span 7-8:  passive => passive
Span 19-20:  plant => plant
Span 21-22:  poppy => poppy
Span 14-15:  pressure => pressure-01
Span 8-9:  stance => stance
Span 5-6:  taking => take-01
Span 1-2:  Taliban => (criminal-organization :name (name :op "Taliban"))
Span 2-3:  this => this
Span 3-4:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),poppy,poppy,false), Span(20,21,List(1),opium,opium,false), Span(19,20,List(2),plant,plant,false), Span(17,18,List(4, 3),farmers,(person :ARG0-of farm-01),false), Span(16,17,List(7, 6, 5),Afghan,(country :name (name :op "Afghanistan")),false), Span(14,15,List(8),pressure,pressure-01,false), Span(13,14,List(9),less,less,false), Span(11,12,List(10),and,and,false), Span(10,11,List(11),cultivation,cultivate-01,false), Span(8,9,List(12),stance,stance,false), Span(7,8,List(13),passive,passive,false), Span(5,6,List(14),taking,take-01,false), Span(3,4,List(16, 15),year,(temporal-quantity :unit year),false), Span(2,3,List(17),this,this,false), Span(1,2,List(20, 19, 18),Taliban,(criminal-organization :name (name :op "Taliban")),false)),Map(2 -> plant, 5 -> country, 12 -> stance, 15 -> temporal-quantity, 8 -> pressure-01, 18 -> criminal-organization, 7 -> "Afghanistan", 17 -> this, 1 -> opium, 4 -> farm-01, 11 -> cultivate-01, 14 -> take-01, 20 -> "Taliban", 6 -> name, 0 -> poppy, 9 -> less, 16 -> year, 19 -> name, 3 -> person, 10 -> and, 13 -> passive),Map(n -> name, p5 -> passive, t -> take-01, p2 -> plant, s -> stance, t3 -> this, y -> year, p -> poppy, c3 -> criminal-organization, a -> and, p4 -> pressure-01, t2 -> temporal-quantity, c -> country, l -> less, f -> farm-01, o -> opium, p3 -> person, n2 -> name, c2 -> cultivate-01))),[Ljava.lang.String;@3766c667,Annotation([Ljava.lang.String;@773c0293,[Ljava.lang.String;@55b8dbda,[Ljava.lang.String;@3b569985),Annotation([Ljava.lang.String;@3a022576,[Ljava.lang.String;@2dbd803f,[Ledu.cmu.lti.nlp.amr.Dependency;@3e48e859),Annotation([Ljava.lang.String;@31ddd4a4,[Ljava.lang.String;@1a5f7e7c,[Ljava.lang.String;@5b22b970),Annotation([Ljava.lang.String;@22d1886d,[Ljava.lang.String;@7df60067,[Ledu.cmu.lti.nlp.amr.Entity;@1cbb3d3b))
AMR:
(a / and, op, c2 / cultivate-01)
(a / and, op, p4 / pressure-01)
(a / and, op, t / take-01)
(c / country, name, n / name)
(c2 / cultivate-01, ARG1, o / opium)
(c3 / criminal-organization, name, n2 / name)
(f / farm-01, ARG0, p3 / person)
(f / farm-01, ARG1, p2 / plant)
(n / name, op, "Afghanistan")
(n2 / name, op, "Taliban")
(p2 / plant, direction, p / poppy)
(p3 / person, mod, c / country)
(p4 / pressure-01, ARG1, p3 / person)
(p4 / pressure-01, ARG6, l / less)
(s / stance, mod, p5 / passive)
(t / take-01, ARG0, c3 / criminal-organization)
(t / take-01, ARG1, s / stance)
(t / take-01, ARG6, t2 / temporal-quantity)
(t2 / temporal-quantity, unit, y / year)
(y / year, mod, t3 / this)

Decoded in 978,368 microseconds
Sentence: This then supports the current price.

Spans:
Span 4-5:  current => current
Span 5-6:  price => (thing :ARG2-of price-01)
Span 2-3:  supports => support-01
Span 1-2:  then => then
Span 0-1:  This => this

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(1, 0),price,(thing :ARG2-of price-01),false), Span(4,5,List(2),current,current,false), Span(2,3,List(3),supports,support-01,false), Span(1,2,List(4),then,then,false), Span(0,1,List(5),This,this,false)),Map(2 -> current, 5 -> this, 1 -> price-01, 4 -> then, 0 -> thing, 3 -> support-01),Map(t -> thing, s -> support-01, t3 -> this, p -> price-01, t2 -> then, c -> current))),[Ljava.lang.String;@529cfee5,Annotation([Ljava.lang.String;@7ca0863b,[Ljava.lang.String;@319854f0,[Ljava.lang.String;@748fe51d),Annotation([Ljava.lang.String;@415156bf,[Ljava.lang.String;@393881f0,[Ledu.cmu.lti.nlp.amr.Dependency;@4af46df3),Annotation([Ljava.lang.String;@4158debd,[Ljava.lang.String;@af78c87,[Ljava.lang.String;@773dab28),Annotation([Ljava.lang.String;@1ecfcbc9,[Ljava.lang.String;@1965539b,[Ledu.cmu.lti.nlp.amr.Entity;@2fc07784))
AMR:
(p / price-01, ARG1, c / current)
(p / price-01, ARG2, t / thing)
(s / support-01, ARG0, t3 / this)
(s / support-01, ARG1, t / thing)
(s / support-01, time, t2 / then)

Decoded in 52,813 microseconds
Sentence: Costa is an Italian diplomat who has served at the U.N. Office on Drugs and Crime for 6 years.

NER Entity: (person :name (name :op "Costa"))
NER Entity: (thing :name (name :op "Italian"))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (organization :name (name :op "U.N."))
NER Entity: (thing :name (name :op "Italian"))
NER Entity: (person :name (name :op "Costa"))
Spans:
Span 17-18:  6 => 6
Span 14-15:  and => and
Span 0-1:  Costa => (person :name (name :op "Costa"))
Span 15-16:  Crime => crime
Span 3-4:  Italian => (country :name (name :op "Italy"))
Span 11-12:  Office => office
Span 7-8:  served => serve-01
Span 10-11:  U.N. => (have-org-role-91 :ARG1 (government-organization :name (name :op "U.N.")))
Span 18-19:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),years,(temporal-quantity :unit year),false), Span(17,18,List(2),6,6,false), Span(15,16,List(3),Crime,crime,false), Span(14,15,List(4),and,and,false), Span(11,12,List(5),Office,office,false), Span(10,11,List(9, 8, 7, 6),U.N.,(have-org-role-91 :ARG1 (government-organization :name (name :op "U.N."))),false), Span(7,8,List(10),served,serve-01,false), Span(3,4,List(13, 12, 11),Italian,(country :name (name :op "Italy")),false), Span(0,1,List(16, 15, 14),Costa,(person :name (name :op "Costa")),false)),Map(2 -> 6, 5 -> office, 12 -> name, 15 -> name, 8 -> name, 7 -> government-organization, 1 -> year, 4 -> and, 11 -> country, 14 -> person, 6 -> have-org-role-91, 0 -> temporal-quantity, 9 -> "U.N.", 16 -> "Costa", 3 -> crime, 10 -> serve-01, 13 -> "Italy"),Map(n -> name, h -> have-org-role-91, t -> temporal-quantity, s -> serve-01, y -> year, g -> government-organization, p -> person, n3 -> name, a -> and, 6 -> 6, c -> crime, o -> office, c2 -> country, n2 -> name))),[Ljava.lang.String;@353efdbf,Annotation([Ljava.lang.String;@55cff952,[Ljava.lang.String;@660591fb,[Ljava.lang.String;@4a55a6e8),Annotation([Ljava.lang.String;@8c46918,[Ljava.lang.String;@226b143b,[Ledu.cmu.lti.nlp.amr.Dependency;@682bd3c4),Annotation([Ljava.lang.String;@f2e4acf,[Ljava.lang.String;@24097e9b,[Ljava.lang.String;@5eb97ced),Annotation([Ljava.lang.String;@68ba310d,[Ljava.lang.String;@153f66e7,[Ledu.cmu.lti.nlp.amr.Entity;@7aad3f7d))
AMR:
(a / and, op, c / crime)
(c / crime, location, t / temporal-quantity)
(c2 / country, name, n2 / name)
(g / government-organization, name, n / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, g / government-organization)
(n / name, op, "U.N.")
(n2 / name, op, "Italy")
(n3 / name, op, "Costa")
(o / office, mod, h / have-org-role-91)
(o / office, prep-against, a / and)
(p / person, name, n3 / name)
(s / serve-01, ARG1, o / office)
(s / serve-01, ARG6, c2 / country)
(t / temporal-quantity, quant, 6 / 6)
(t / temporal-quantity, unit, y / year)

Decoded in 412,797 microseconds
Sentence: 2001-10-05

mkDayMonthYear(2001-10-05,05,10,2001)
mkDayMonthYear(2001-10-05,05,10,2001)
Spans:
Span 0-1:  2001-10-05 => (date-entity :year 2001 :month 10 :day 5)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2001-10-05,(date-entity :year 2001 :month 10 :day 5),false)),Map(2 -> 10, 1 -> 2001, 0 -> date-entity, 3 -> 5),Map(2 -> 2001, 5 -> 5, d -> date-entity, 1 -> 10))),[Ljava.lang.String;@6f667ad1,Annotation([Ljava.lang.String;@566d0c69,[Ljava.lang.String;@388b401d,[Ljava.lang.String;@2bcec6a6),Annotation([Ljava.lang.String;@77a281fc,[Ljava.lang.String;@4912d525,[Ledu.cmu.lti.nlp.amr.Dependency;@2bfbffb2),Annotation([Ljava.lang.String;@765df79d,[Ljava.lang.String;@151335cb,[Ljava.lang.String;@4a7761b1),Annotation([Ljava.lang.String;@3e850122,[Ljava.lang.String;@27fde870,[Ledu.cmu.lti.nlp.amr.Entity;@2b4c3c29))
AMR:
(d / date-entity, day, 5 / 5)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2001)

Decoded in 9,737 microseconds
Sentence: South Africa (ZA)

NER Entity: (country :name (name :op "South" :op "Africa"))
Spans:
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,2,List(3, 2, 1, 0),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(2 -> "South", 1 -> name, 0 -> country, 3 -> "Africa"),Map(n -> name, c -> country))),[Ljava.lang.String;@5ac7aa18,Annotation([Ljava.lang.String;@4cdd2c73,[Ljava.lang.String;@4abf3f0,[Ljava.lang.String;@4e4c3a38),Annotation([Ljava.lang.String;@293cde83,[Ljava.lang.String;@c27d163,[Ledu.cmu.lti.nlp.amr.Dependency;@57c88764),Annotation([Ljava.lang.String;@78faea5f,[Ljava.lang.String;@37fdfb05,[Ljava.lang.String;@5e39850),Annotation([Ljava.lang.String;@1603dc2f,[Ljava.lang.String;@398474a2,[Ledu.cmu.lti.nlp.amr.Entity;@61799544))
AMR:
(c / country, name, n / name)
(n / name, op, "Africa")
(n / name, op, "South")

Decoded in 5,576 microseconds
Sentence: International; terrorism; Government; money

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 6-7:  money => money
Span 2-3:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),money,money,false), Span(5,6,List(1),;,and,false), Span(4,5,List(3, 2),Government,(government-organization :ARG0-of govern-01),false), Span(3,4,List(4),;,and,false), Span(2,3,List(5),terrorism,terrorism,false), Span(1,2,List(6),;,and,false), Span(0,1,List(7),International,international,false)),Map(2 -> government-organization, 5 -> terrorism, 7 -> international, 1 -> and, 4 -> and, 6 -> and, 0 -> money, 3 -> govern-01),Map(t -> terrorism, a3 -> and, m -> money, g2 -> govern-01, g -> government-organization, a -> and, i -> international, a2 -> and))),[Ljava.lang.String;@78c1a023,Annotation([Ljava.lang.String;@70abf9b0,[Ljava.lang.String;@6a10b263,[Ljava.lang.String;@476ec9d0),Annotation([Ljava.lang.String;@325bb9a6,[Ljava.lang.String;@1d12b024,[Ledu.cmu.lti.nlp.amr.Dependency;@72fe8a4f),Annotation([Ljava.lang.String;@43effd89,[Ljava.lang.String;@2c16fadb,[Ljava.lang.String;@248deced),Annotation([Ljava.lang.String;@2227a6c1,[Ljava.lang.String;@1e9804b9,[Ledu.cmu.lti.nlp.amr.Entity;@543e593))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, g / government-organization)
(a2 / and, op, t / terrorism)
(a3 / and, op, a2 / and)
(a3 / and, op, i / international)
(a3 / and, op, m / money)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 28,667 microseconds
Sentence: The South African government imposed a ban that prohibits the recruitment of people inside or outside of South Africa for mercenary or foreign military assistance.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "South" :op "Africa"))
Spans:
Span 24-25:  assistance => assist-01
Span 6-7:  ban => ban-01
Span 22-23:  foreign => foreign
Span 3-4:  government => (government-organization :ARG0-of govern-01)
Span 4-5:  imposed => impose-01
Span 13-14:  inside => inside
Span 20-21:  mercenary => mercenary
Span 23-24:  military => military
Span 21-22:  or => or
Span 14-15:  or => or
Span 15-16:  outside => outside
Span 12-13:  people => people
Span 8-9:  prohibits => prohibit-01
Span 10-11:  recruitment => recruit-01
Span 17-19:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))

Langrangian relaxation converged after 68 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),assistance,assist-01,false), Span(23,24,List(1),military,military,false), Span(22,23,List(2),foreign,foreign,false), Span(21,22,List(3),or,or,false), Span(20,21,List(4),mercenary,mercenary,false), Span(17,19,List(8, 7, 6, 5),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(15,16,List(9),outside,outside,false), Span(14,15,List(10),or,or,false), Span(13,14,List(11),inside,inside,false), Span(12,13,List(12),people,people,false), Span(10,11,List(13),recruitment,recruit-01,false), Span(8,9,List(14),prohibits,prohibit-01,false), Span(6,7,List(15),ban,ban-01,false), Span(4,5,List(16),imposed,impose-01,false), Span(3,4,List(18, 17),government,(government-organization :ARG0-of govern-01),false), Span(1,3,List(22, 21, 20, 19),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> foreign, 5 -> country, 12 -> people, 15 -> ban-01, 8 -> "Africa", 21 -> "South", 18 -> govern-01, 7 -> "South", 17 -> government-organization, 1 -> military, 4 -> mercenary, 11 -> inside, 14 -> prohibit-01, 20 -> name, 6 -> name, 22 -> "African", 0 -> assist-01, 9 -> outside, 16 -> impose-01, 19 -> thing, 3 -> or, 10 -> or, 13 -> recruit-01),Map(n -> name, t -> thing, b -> ban-01, m2 -> mercenary, o3 -> or, p2 -> prohibit-01, m -> military, g2 -> govern-01, g -> government-organization, p -> people, a -> assist-01, o2 -> outside, i2 -> impose-01, i -> inside, r -> recruit-01, c -> country, f -> foreign, o -> or, n2 -> name))),[Ljava.lang.String;@4e628b52,Annotation([Ljava.lang.String;@51ec2df1,[Ljava.lang.String;@f8f56b9,[Ljava.lang.String;@15fa55a6),Annotation([Ljava.lang.String;@4f186450,[Ljava.lang.String;@7fab4be7,[Ledu.cmu.lti.nlp.amr.Dependency;@a64e035),Annotation([Ljava.lang.String;@4d74c3ba,[Ljava.lang.String;@41c204a0,[Ljava.lang.String;@64138b0c),Annotation([Ljava.lang.String;@49dbaaf3,[Ljava.lang.String;@22d9c961,[Ledu.cmu.lti.nlp.amr.Entity;@736f3e9e))
AMR:
(a / assist-01, ARG1, m / military)
(b / ban-01, ARG1, t / thing)
(c / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i / inside, op, c / country)
(i2 / impose-01, ARG0, g / government-organization)
(i2 / impose-01, ARG1, b / ban-01)
(m / military, mod, f / foreign)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "African")
(n2 / name, op, "South")
(o / or, op, a / assist-01)
(o / or, op, m2 / mercenary)
(o3 / or, op, i / inside)
(o3 / or, op, o2 / outside)
(p2 / prohibit-01, ARG1, r / recruit-01)
(r / recruit-01, ARG0, p / people)
(r / recruit-01, ARG1, o3 / or)
(r / recruit-01, ARG2, o / or)
(t / thing, name, n2 / name)

Decoded in 1,831,616 microseconds
Sentence: On 011006 The Citizen newspaper stated that it is illegal for South Africans to be involved in mercenary activity or to render foreign military assistance inside or outside of South Africa.

mkDayMonthYear(011006,06,10,2001)
mkDayMonthYear(011006,06,10,01)
NER Entity: (thing :name (name :op "South" :op "Africans"))
NER Entity: (country :name (name :op "South" :op "Africa"))
mkDayMonthYear(011006,06,10,2001)
mkDayMonthYear(011006,06,10,01)
Spans:
Span 1-2:  011006 => (date-entity :year 2001 :month 10 :day 6)
Span 18-19:  activity => activity
Span 24-25:  assistance => assist-01
Span 22-23:  foreign => foreign
Span 9-10:  illegal => (law :polarity -)
Span 25-26:  inside => inside
Span 15-16:  involved => involve-01
Span 7-8:  it => it
Span 17-18:  mercenary => mercenary
Span 23-24:  military => military
Span 4-5:  newspaper => newspaper
Span 26-27:  or => or
Span 19-20:  or => or
Span 27-28:  outside => outside
Span 21-22:  render => render-01
Span 29-31:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 11-13:  South Africans => (thing :name (name :op "South" :op "Africans"))
Span 5-6:  stated => state-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,31,List(3, 2, 1, 0),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(27,28,List(4),outside,outside,false), Span(26,27,List(5),or,or,false), Span(25,26,List(6),inside,inside,false), Span(24,25,List(7),assistance,assist-01,false), Span(23,24,List(8),military,military,false), Span(22,23,List(9),foreign,foreign,false), Span(21,22,List(10),render,render-01,false), Span(19,20,List(11),or,or,false), Span(18,19,List(12),activity,activity,false), Span(17,18,List(13),mercenary,mercenary,false), Span(15,16,List(14),involved,involve-01,false), Span(11,13,List(18, 17, 16, 15),South Africans,(thing :name (name :op "South" :op "Africans")),false), Span(9,10,List(20, 19),illegal,(law :polarity -),false), Span(7,8,List(21),it,it,false), Span(5,6,List(22),stated,state-01,false), Span(4,5,List(23),newspaper,newspaper,false), Span(1,2,List(27, 26, 25, 24),011006,(date-entity :year 2001 :month 10 :day 6),false)),Map(2 -> "South", 5 -> or, 27 -> 6, 12 -> activity, 8 -> military, 15 -> thing, 21 -> it, 18 -> "Africans", 24 -> date-entity, 7 -> assist-01, 1 -> name, 17 -> "South", 23 -> newspaper, 26 -> 10, 4 -> outside, 11 -> or, 14 -> involve-01, 20 -> -, 6 -> inside, 9 -> foreign, 0 -> country, 22 -> state-01, 16 -> name, 19 -> law, 10 -> render-01, 3 -> "Africa", 25 -> 2001, 13 -> mercenary),Map(n -> name, 2 -> 2001, t -> thing, o3 -> or, m2 -> mercenary, s -> state-01, d -> date-entity, m -> military, 1 -> 10, i3 -> it, n3 -> newspaper, a -> assist-01, o2 -> or, i2 -> involve-01, i -> inside, r -> render-01, a2 -> activity, 6 -> 6, c -> country, l -> law, f -> foreign, o -> outside, n2 -> name))),[Ljava.lang.String;@bdc8014,Annotation([Ljava.lang.String;@1f443fae,[Ljava.lang.String;@73ba6fe6,[Ljava.lang.String;@79ab34c1),Annotation([Ljava.lang.String;@1698d7c0,[Ljava.lang.String;@281f23f2,[Ledu.cmu.lti.nlp.amr.Dependency;@87abc48),Annotation([Ljava.lang.String;@28d79cba,[Ljava.lang.String;@782168b7,[Ljava.lang.String;@29f0c4f2),Annotation([Ljava.lang.String;@7435a578,[Ljava.lang.String;@6093d508,[Ledu.cmu.lti.nlp.amr.Entity;@13047d7d))
AMR:
(a / assist-01, ARG1, m / military)
(a2 / activity, mod, m2 / mercenary)
(c / country, name, n / name)
(d / date-entity, day, 6 / 6)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2001)
(i / inside, op, c / country)
(i2 / involve-01, ARG1, t / thing)
(i2 / involve-01, ARG2, a2 / activity)
(l / law, domain, i3 / it)
(l / law, domain, o3 / or)
(l / law, polarity, -)
(m / military, mod, f / foreign)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "Africans")
(n2 / name, op, "South")
(o / outside, op, c / country)
(o2 / or, op, o / outside)
(o3 / or, location, o2 / or)
(o3 / or, op, i2 / involve-01)
(r / render-01, ARG0, c / country)
(r / render-01, ARG1, a / assist-01)
(s / state-01, ARG0, n3 / newspaper)
(s / state-01, ARG1, l / law)
(s / state-01, time, d / date-entity)
(t / thing, name, n2 / name)

Decoded in 990,200 microseconds
Sentence: The Citizen newspaper stated that the South African Foreign Ministry announced on 011005 that the South African government imposed the mercenary activity ban following reports that 1000 Muslims with military training have enlisted to leave South Africa for Afghanistan to fight for the Taliban against the United States.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (organization :name (name :op "Foreign" :op "Ministry"))
mkDayMonthYear(011005,05,10,2001)
mkDayMonthYear(011005,05,10,01)
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Afghanistan"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "Taliban"))
NER Entity: (country :name (name :op "Afghanistan"))
mkDayMonthYear(011005,05,10,2001)
mkDayMonthYear(011005,05,10,01)
Spans:
Span 12-13:  011005 => (date-entity :year 2001 :month 10 :day 5)
Span 26-27:  1000 => (date-entity :year 1000)
Span 21-22:  activity => activity
Span 38-39:  Afghanistan => (country :name (name :op "Afghanistan"))
Span 10-11:  announced => announce-01
Span 22-23:  ban => ban-01
Span 32-33:  enlisted => enlist-01
Span 40-41:  fight => fight-01
Span 23-24:  following => follow-01
Span 8-10:  Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Span 17-18:  government => (government-organization :ARG0-of govern-01)
Span 18-19:  imposed => impose-01
Span 34-35:  leave => leave-01
Span 20-21:  mercenary => mercenary
Span 29-30:  military => military
Span 27-28:  Muslims => (religious-group :name (name :op "Muslim"))
Span 2-3:  newspaper => newspaper
Span 24-25:  reports => report-01
Span 35-37:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 15-17:  South African => (thing :name (name :op "South" :op "African"))
Span 6-8:  South African => (thing :name (name :op "South" :op "African"))
Span 3-4:  stated => state-01
Span 43-44:  Taliban => (criminal-organization :name (name :op "Taliban"))
Span 30-31:  training => train-01
Span 46-48:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,48,List(3, 2, 1, 0),United States,(country :name (name :op "United" :op "States")),false), Span(43,44,List(6, 5, 4),Taliban,(criminal-organization :name (name :op "Taliban")),false), Span(40,41,List(7),fight,fight-01,false), Span(38,39,List(10, 9, 8),Afghanistan,(country :name (name :op "Afghanistan")),false), Span(35,37,List(14, 13, 12, 11),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(34,35,List(15),leave,leave-01,false), Span(32,33,List(16),enlisted,enlist-01,false), Span(30,31,List(17),training,train-01,false), Span(29,30,List(18),military,military,false), Span(27,28,List(21, 20, 19),Muslims,(religious-group :name (name :op "Muslim")),false), Span(26,27,List(23, 22),1000,(date-entity :year 1000),false), Span(24,25,List(24),reports,report-01,false), Span(23,24,List(25),following,follow-01,false), Span(22,23,List(26),ban,ban-01,false), Span(21,22,List(27),activity,activity,false), Span(20,21,List(28),mercenary,mercenary,false), Span(18,19,List(29),imposed,impose-01,false), Span(17,18,List(31, 30),government,(government-organization :ARG0-of govern-01),false), Span(15,17,List(35, 34, 33, 32),South African,(thing :name (name :op "South" :op "African")),false), Span(12,13,List(39, 38, 37, 36),011005,(date-entity :year 2001 :month 10 :day 5),false), Span(10,11,List(40),announced,announce-01,false), Span(8,10,List(44, 43, 42, 41),Foreign Ministry,(organization :name (name :op "Foreign" :op "Ministry")),false), Span(6,8,List(48, 47, 46, 45),South African,(thing :name (name :op "South" :op "African")),false), Span(3,4,List(49),stated,state-01,false), Span(2,3,List(50),newspaper,newspaper,false)),Map(30 -> government-organization, 39 -> 5, 45 -> thing, 2 -> "United", 5 -> name, 48 -> "African", 33 -> name, 27 -> activity, 12 -> name, 8 -> country, 15 -> leave-01, 42 -> name, 36 -> date-entity, 21 -> "Muslim", 18 -> military, 24 -> report-01, 35 -> "African", 41 -> organization, 7 -> fight-01, 17 -> train-01, 1 -> name, 50 -> newspaper, 44 -> "Ministry", 23 -> 1000, 38 -> 10, 47 -> "South", 4 -> criminal-organization, 26 -> ban-01, 11 -> country, 32 -> thing, 14 -> "Africa", 20 -> name, 29 -> impose-01, 46 -> name, 34 -> "South", 6 -> "Taliban", 28 -> mercenary, 40 -> announce-01, 49 -> state-01, 0 -> country, 9 -> name, 43 -> "Foreign", 22 -> date-entity, 16 -> enlist-01, 37 -> 2001, 19 -> religious-group, 3 -> "States", 10 -> "Afghanistan", 25 -> follow-01, 31 -> govern-01, 13 -> "South"),Map(e -> enlist-01, n -> name, 2 -> 2001, 5 -> 5, 12 -> 10, t -> train-01, b -> ban-01, m2 -> mercenary, n7 -> name, n4 -> name, c4 -> country, s -> state-01, m -> military, d -> date-entity, t3 -> thing, 1 -> 1000, g2 -> govern-01, r2 -> report-01, g -> government-organization, n3 -> name, c3 -> country, a -> activity, d2 -> date-entity, n6 -> name, n9 -> newspaper, t2 -> thing, a2 -> announce-01, r -> religious-group, i -> impose-01, c -> country, f2 -> follow-01, l -> leave-01, n8 -> name, f -> fight-01, o -> organization, n2 -> name, c2 -> criminal-organization, n5 -> name))),[Ljava.lang.String;@3c7cfcbb,Annotation([Ljava.lang.String;@65bb9029,[Ljava.lang.String;@1bfe3203,[Ljava.lang.String;@2b214b94),Annotation([Ljava.lang.String;@70e3f36f,[Ljava.lang.String;@49601f82,[Ledu.cmu.lti.nlp.amr.Dependency;@23e44287),Annotation([Ljava.lang.String;@2b8d084,[Ljava.lang.String;@6daf2337,[Ljava.lang.String;@24fabd0f),Annotation([Ljava.lang.String;@250b236d,[Ljava.lang.String;@61f3fbb8,[Ledu.cmu.lti.nlp.amr.Entity;@7551da2a))
AMR:
(a / activity, mod, m2 / mercenary)
(a2 / announce-01, ARG0, o / organization)
(a2 / announce-01, ARG1, i / impose-01)
(a2 / announce-01, time, d / date-entity)
(a2 / announce-01, time, d2 / date-entity)
(b / ban-01, ARG1, a / activity)
(c / country, name, n / name)
(c2 / criminal-organization, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(d / date-entity, year, 1 / 1000)
(d2 / date-entity, day, 5 / 5)
(d2 / date-entity, month, 12 / 10)
(d2 / date-entity, year, 2 / 2001)
(e / enlist-01, ARG0, r / religious-group)
(e / enlist-01, ARG1, l / leave-01)
(f / fight-01, ARG0, c4 / country)
(f / fight-01, ARG1, c / country)
(f / fight-01, beneficiary, c2 / criminal-organization)
(f2 / follow-01, ARG1, t2 / thing)
(f2 / follow-01, ARG2, t / train-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c4 / country)
(i / impose-01, ARG0, g / government-organization)
(i / impose-01, ARG1, b / ban-01)
(i / impose-01, time, f2 / follow-01)
(l / leave-01, ARG1, c4 / country)
(l / leave-01, ARG2, c3 / country)
(n / name, op, "States")
(n / name, op, "United")
(n2 / name, op, "Taliban")
(n3 / name, op, "Afghanistan")
(n4 / name, op, "Africa")
(n4 / name, op, "South")
(n5 / name, op, "Muslim")
(n6 / name, op, "African")
(n6 / name, op, "South")
(n7 / name, op, "Foreign")
(n7 / name, op, "Ministry")
(n8 / name, op, "African")
(n8 / name, op, "South")
(o / organization, mod, t3 / thing)
(o / organization, name, n7 / name)
(r / religious-group, name, n5 / name)
(r2 / report-01, ARG1, e / enlist-01)
(s / state-01, ARG0, n9 / newspaper)
(s / state-01, ARG1, a2 / announce-01)
(t / train-01, ARG1, m / military)
(t2 / thing, name, n6 / name)
(t3 / thing, name, n8 / name)

Decoded in 4,096,302 microseconds
Sentence: A report claims that Muslims Against Illegitimate Leaders has claimed that the 1000 Muslim men with military training have volunteered their services and have received the backing of local businessmen.

NER Entity: (thing :name (name :op "Muslim"))
NER Entity: (thing :name (name :op "Muslim"))
Spans:
Span 12-13:  1000 => (date-entity :year 1000)
Span 22-23:  and => and
Span 26-27:  backing => back-01
Span 29-30:  businessmen => businessman
Span 9-10:  claimed => claim-01
Span 2-3:  claims => claim-01
Span 28-29:  local => local
Span 14-15:  men => man
Span 16-17:  military => military
Span 13-14:  Muslim => (religious-group :name (name :op "Muslim"))
Span 4-8:  Muslims Against Illegitimate Leaders => (organization :name (name :op "Leaders" :op "Illegitimate" :op "Against" :op "Muslims"))
Span 24-25:  received => receive-01
Span 1-2:  report => report
Span 21-22:  services => service
Span 17-18:  training => train-01
Span 19-20:  volunteered => volunteer-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),businessmen,businessman,false), Span(28,29,List(1),local,local,false), Span(26,27,List(2),backing,back-01,false), Span(24,25,List(3),received,receive-01,false), Span(22,23,List(4),and,and,false), Span(21,22,List(5),services,service,false), Span(19,20,List(6),volunteered,volunteer-01,false), Span(17,18,List(7),training,train-01,false), Span(16,17,List(8),military,military,false), Span(14,15,List(9),men,man,false), Span(13,14,List(12, 11, 10),Muslim,(religious-group :name (name :op "Muslim")),false), Span(12,13,List(14, 13),1000,(date-entity :year 1000),false), Span(9,10,List(15),claimed,claim-01,false), Span(4,8,List(21, 20, 19, 18, 17, 16),Muslims Against Illegitimate Leaders,(organization :name (name :op "Leaders" :op "Illegitimate" :op "Against" :op "Muslims")),false), Span(2,3,List(22),claims,claim-01,false), Span(1,2,List(23),report,report,false)),Map(2 -> back-01, 5 -> service, 12 -> "Muslim", 15 -> claim-01, 8 -> military, 21 -> "Muslims", 18 -> "Leaders", 7 -> train-01, 17 -> name, 1 -> local, 23 -> report, 4 -> and, 11 -> name, 14 -> 1000, 20 -> "Against", 6 -> volunteer-01, 22 -> claim-01, 0 -> businessman, 9 -> man, 16 -> organization, 19 -> "Illegitimate", 3 -> receive-01, 10 -> religious-group, 13 -> date-entity),Map(n -> name, r3 -> report, b -> businessman, t -> train-01, b2 -> back-01, m2 -> man, s -> service, v -> volunteer-01, m -> military, d -> date-entity, 1 -> 1000, r2 -> religious-group, a -> and, r -> receive-01, c -> claim-01, l -> local, o -> organization, c2 -> claim-01, n2 -> name))),[Ljava.lang.String;@432034a,Annotation([Ljava.lang.String;@78de58ea,[Ljava.lang.String;@60e5272,[Ljava.lang.String;@7d755813),Annotation([Ljava.lang.String;@69c93ca4,[Ljava.lang.String;@63da207f,[Ledu.cmu.lti.nlp.amr.Dependency;@173373b4),Annotation([Ljava.lang.String;@40d10481,[Ljava.lang.String;@60dd3c23,[Ljava.lang.String;@52b6319f),Annotation([Ljava.lang.String;@5e9456ae,[Ljava.lang.String;@16a9a4f1,[Ledu.cmu.lti.nlp.amr.Entity;@1f1cae23))
AMR:
(a / and, op, r / receive-01)
(a / and, op, v / volunteer-01)
(b / businessman, mod, l / local)
(b2 / back-01, ARG0, b / businessman)
(b2 / back-01, ARG1, d / date-entity)
(c / claim-01, ARG0, o / organization)
(c / claim-01, ARG1, a / and)
(c2 / claim-01, ARG0, r3 / report)
(c2 / claim-01, ARG1, c / claim-01)
(d / date-entity, year, 1 / 1000)
(m2 / man, mod, r2 / religious-group)
(n / name, op, "Muslim")
(n2 / name, op, "Against")
(n2 / name, op, "Illegitimate")
(n2 / name, op, "Leaders")
(n2 / name, op, "Muslims")
(o / organization, name, n2 / name)
(r / receive-01, ARG0, m2 / man)
(r / receive-01, ARG1, b2 / back-01)
(r2 / religious-group, name, n / name)
(s / service, poss, m2 / man)
(t / train-01, ARG1, m / military)
(t / train-01, ARG2, m2 / man)
(v / volunteer-01, ARG0, m2 / man)
(v / volunteer-01, ARG1, s / service)

Decoded in 512,807 microseconds
Sentence: Reports claim that all of the 1000 Muslim men with military training are over the age of 18.

NER Entity: (thing :name (name :op "Muslim"))
NER Entity: (thing :name (name :op "Muslim"))
Spans:
Span 6-7:  1000 => (date-entity :year 1000)
Span 17-18:  18 => 18
Span 15-16:  age => age
Span 3-4:  all => all
Span 1-2:  claim => claim-01
Span 8-9:  men => man
Span 10-11:  military => military
Span 7-8:  Muslim => (religious-group :name (name :op "Muslim"))
Span 13-14:  over => over
Span 0-1:  Reports => report-01
Span 11-12:  training => train-01

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),18,18,false), Span(15,16,List(1),age,age,false), Span(13,14,List(2),over,over,false), Span(11,12,List(3),training,train-01,false), Span(10,11,List(4),military,military,false), Span(8,9,List(5),men,man,false), Span(7,8,List(8, 7, 6),Muslim,(religious-group :name (name :op "Muslim")),false), Span(6,7,List(10, 9),1000,(date-entity :year 1000),false), Span(3,4,List(11),all,all,false), Span(1,2,List(12),claim,claim-01,false), Span(0,1,List(13),Reports,report-01,false)),Map(2 -> over, 5 -> man, 12 -> claim-01, 8 -> "Muslim", 7 -> name, 1 -> age, 4 -> military, 11 -> all, 6 -> religious-group, 0 -> 18, 9 -> date-entity, 3 -> train-01, 10 -> 1000, 13 -> report-01),Map(n -> name, t -> train-01, 12 -> 1000, m2 -> man, m -> military, d -> date-entity, 1 -> 18, r2 -> report-01, a -> age, r -> religious-group, a2 -> all, c -> claim-01, o -> over))),[Ljava.lang.String;@7c455e96,Annotation([Ljava.lang.String;@985696,[Ljava.lang.String;@5bcde458,[Ljava.lang.String;@215a34b4),Annotation([Ljava.lang.String;@77bd7fe7,[Ljava.lang.String;@35d3ab60,[Ledu.cmu.lti.nlp.amr.Dependency;@10876a6),Annotation([Ljava.lang.String;@71870da7,[Ljava.lang.String;@6dd91637,[Ljava.lang.String;@45792847),Annotation([Ljava.lang.String;@706cb08,[Ljava.lang.String;@4e25147a,[Ledu.cmu.lti.nlp.amr.Entity;@6b68cb27))
AMR:
(1 / 18, op, r2 / report-01)
(c / claim-01, ARG0, r2 / report-01)
(c / claim-01, ARG1, m2 / man)
(d / date-entity, year, 12 / 1000)
(m2 / man, age, o / over)
(m2 / man, mod, r / religious-group)
(m2 / man, quant, a2 / all)
(n / name, op, "Muslim")
(o / over, op, a / age)
(r / religious-group, name, n / name)
(r2 / report-01, ARG1, d / date-entity)
(t / train-01, ARG1, m / military)
(t / train-01, ARG2, m2 / man)

Decoded in 346,650 microseconds
Sentence: Muslims Against Illegitimate Leaders is a Cape Town-based group.

NER Entity: (country :name (name :op "Cape" :op "Town" :op "-" :op "based"))
Spans:
Span 9-10:  based => base-01
Span 6-8:  Cape Town => (city :name (name :op "Town" :op "Cape"))
Span 10-11:  group => group
Span 0-4:  Muslims Against Illegitimate Leaders => (organization :name (name :op "Leaders" :op "Illegitimate" :op "Against" :op "Muslims"))

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),group,group,false), Span(9,10,List(1),based,base-01,false), Span(6,8,List(5, 4, 3, 2),Cape Town,(city :name (name :op "Town" :op "Cape")),false), Span(0,4,List(11, 10, 9, 8, 7, 6),Muslims Against Illegitimate Leaders,(organization :name (name :op "Leaders" :op "Illegitimate" :op "Against" :op "Muslims")),false)),Map(2 -> city, 5 -> "Cape", 8 -> "Leaders", 7 -> name, 1 -> base-01, 11 -> "Muslims", 4 -> "Town", 6 -> organization, 9 -> "Illegitimate", 0 -> group, 10 -> "Against", 3 -> name),Map(n -> name, b -> base-01, g -> group, c -> city, o -> organization, n2 -> name))),[Ljava.lang.String;@675ffd1d,Annotation([Ljava.lang.String;@56303475,[Ljava.lang.String;@30506c0d,[Ljava.lang.String;@1dcca8d3),Annotation([Ljava.lang.String;@5631962,[Ljava.lang.String;@52a70627,[Ledu.cmu.lti.nlp.amr.Dependency;@6124287a),Annotation([Ljava.lang.String;@19569ebd,[Ljava.lang.String;@4632cfc,[Ljava.lang.String;@6e1f8469),Annotation([Ljava.lang.String;@2e380628,[Ljava.lang.String;@3b6c624,[Ledu.cmu.lti.nlp.amr.Entity;@1eaf1e62))
AMR:
(b / base-01, ARG1, g / group)
(b / base-01, location, c / city)
(c / city, name, n / name)
(g / group, domain, o / organization)
(n / name, op, "Cape")
(n / name, op, "Town")
(n2 / name, op, "Against")
(n2 / name, op, "Illegitimate")
(n2 / name, op, "Leaders")
(n2 / name, op, "Muslims")
(o / organization, name, n2 / name)

Decoded in 145,230 microseconds
Sentence: The report was refuted by the Muslim Judicial Council.

NER Entity: (organization :name (name :op "Muslim" :op "Judicial" :op "Council"))
Spans:
Span 6-9:  Muslim Judicial Council => (organization :name (name :op "Council" :op "Judicial" :op "Muslim"))
Span 3-4:  refuted => refute-01
Span 1-2:  report => report

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,9,List(4, 3, 2, 1, 0),Muslim Judicial Council,(organization :name (name :op "Council" :op "Judicial" :op "Muslim")),false), Span(3,4,List(5),refuted,refute-01,false), Span(1,2,List(6),report,report,false)),Map(2 -> "Council", 5 -> refute-01, 1 -> name, 4 -> "Muslim", 6 -> report, 0 -> organization, 3 -> "Judicial"),Map(n -> name, r2 -> report, r -> refute-01, o -> organization))),[Ljava.lang.String;@c81fd12,Annotation([Ljava.lang.String;@62e6a3ec,[Ljava.lang.String;@5754de72,[Ljava.lang.String;@31ee96f4),Annotation([Ljava.lang.String;@320494b6,[Ljava.lang.String;@652ab8d9,[Ledu.cmu.lti.nlp.amr.Dependency;@14fc5d40),Annotation([Ljava.lang.String;@51e0301d,[Ljava.lang.String;@47d7bfb3,[Ljava.lang.String;@770b3be0),Annotation([Ljava.lang.String;@1eb6e1c,[Ljava.lang.String;@51dbd6e4,[Ledu.cmu.lti.nlp.amr.Entity;@2b8bd14b))
AMR:
(n / name, op, "Council")
(n / name, op, "Judicial")
(n / name, op, "Muslim")
(o / organization, name, n / name)
(r / refute-01, ARG0, o / organization)
(r / refute-01, ARG1, r2 / report)

Decoded in 29,393 microseconds
Sentence: South Africa's Foreign Ministry stated that South Africa's Foreign Military Assistance Act prohibits the recruitment of people inside or outside of South Africa for mercenary or foreign military assistance.

NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Ministry"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
NER Entity: (country :name (name :op "South" :op "Africa"))
Spans:
Span 30-31:  assistance => assist-01
Span 28-29:  foreign => foreign
Span 10-14:  Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Span 3-5:  Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Span 19-20:  inside => inside
Span 26-27:  mercenary => mercenary
Span 29-30:  military => military
Span 27-28:  or => or
Span 20-21:  or => or
Span 21-22:  outside => outside
Span 18-19:  people => people
Span 14-15:  prohibits => prohibit-01
Span 16-17:  recruitment => recruit-01
Span 23-25:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 7-9:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 5-6:  stated => state-01

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),assistance,assist-01,false), Span(29,30,List(1),military,military,false), Span(28,29,List(2),foreign,foreign,false), Span(27,28,List(3),or,or,false), Span(26,27,List(4),mercenary,mercenary,false), Span(23,25,List(8, 7, 6, 5),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(21,22,List(9),outside,outside,false), Span(20,21,List(10),or,or,false), Span(19,20,List(11),inside,inside,false), Span(18,19,List(12),people,people,false), Span(16,17,List(13),recruitment,recruit-01,false), Span(14,15,List(14),prohibits,prohibit-01,false), Span(10,14,List(20, 19, 18, 17, 16, 15),Foreign Military Assistance Act,(organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act")),false), Span(7,9,List(24, 23, 22, 21),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(5,6,List(25),stated,state-01,false), Span(3,5,List(29, 28, 27, 26),Foreign Ministry,(organization :name (name :op "Foreign" :op "Ministry")),false), Span(0,2,List(33, 32, 31, 30),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(30 -> country, 2 -> foreign, 5 -> country, 33 -> "Africa", 27 -> name, 12 -> people, 8 -> "Africa", 15 -> organization, 21 -> country, 18 -> "Military", 24 -> "Africa", 7 -> "South", 1 -> military, 17 -> "Foreign", 23 -> "South", 26 -> organization, 4 -> mercenary, 11 -> inside, 32 -> "South", 14 -> prohibit-01, 29 -> "Ministry", 20 -> "Act", 28 -> "Foreign", 6 -> name, 9 -> outside, 0 -> assist-01, 22 -> name, 16 -> name, 19 -> "Assistance", 10 -> or, 3 -> or, 31 -> name, 25 -> state-01, 13 -> recruit-01),Map(n -> name, m2 -> mercenary, o3 -> or, p2 -> prohibit-01, n4 -> name, s -> state-01, m -> military, o5 -> organization, p -> people, c3 -> country, n3 -> name, a -> assist-01, o2 -> outside, i -> inside, r -> recruit-01, c -> country, f -> foreign, o4 -> organization, o -> or, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@5f13be1,Annotation([Ljava.lang.String;@5f303ecd,[Ljava.lang.String;@50d3bf39,[Ljava.lang.String;@25a73de1),Annotation([Ljava.lang.String;@29852487,[Ljava.lang.String;@771db12c,[Ledu.cmu.lti.nlp.amr.Dependency;@3afae281),Annotation([Ljava.lang.String;@26ae880a,[Ljava.lang.String;@260f2144,[Ljava.lang.String;@3c017078),Annotation([Ljava.lang.String;@51827393,[Ljava.lang.String;@3be4f71,[Ledu.cmu.lti.nlp.amr.Entity;@5c645b43))
AMR:
(a / assist-01, ARG1, m / military)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(i / inside, op, c / country)
(i / inside, op, c3 / country)
(m / military, mod, f / foreign)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "Act")
(n2 / name, op, "Assistance")
(n2 / name, op, "Foreign")
(n2 / name, op, "Military")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Foreign")
(n4 / name, op, "Ministry")
(n5 / name, op, "Africa")
(n5 / name, op, "South")
(o / or, op, a / assist-01)
(o / or, op, m2 / mercenary)
(o3 / or, op, i / inside)
(o3 / or, op, o2 / outside)
(o4 / organization, name, n2 / name)
(o4 / organization, poss, c2 / country)
(o5 / organization, name, n4 / name)
(o5 / organization, poss, c3 / country)
(p2 / prohibit-01, ARG0, o4 / organization)
(p2 / prohibit-01, ARG1, r / recruit-01)
(r / recruit-01, ARG1, p / people)
(r / recruit-01, ARG2, o / or)
(s / state-01, ARG0, o5 / organization)
(s / state-01, ARG1, p2 / prohibit-01)

Decoded in 1,073,534 microseconds
Sentence: South Africa's Foreign Military Assistance Act means that no person is allowed to offer military assistance to any State, organ of State, group or other country, unless permission is granted by the National Conventional Arms Control Committee.

NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
NER Entity: (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Spans:
Span 12-13:  allowed => allow-01
Span 18-19:  any => any
Span 16-17:  assistance => assist-01
Span 28-29:  country => country
Span 3-7:  Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Span 33-34:  granted => grant-01
Span 25-26:  group => group
Span 7-8:  means => mean-01
Span 15-16:  military => military
Span 36-41:  National Conventional Arms Control Committee => (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Span 9-10:  no => -
Span 14-15:  offer => offer-01
Span 26-27:  or => or
Span 21-22:  organ => organ
Span 27-28:  other => other
Span 31-32:  permission => permit-01
Span 10-11:  person => person
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,41,List(6, 5, 4, 3, 2, 1, 0),National Conventional Arms Control Committee,(organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee")),false), Span(33,34,List(7),granted,grant-01,false), Span(31,32,List(8),permission,permit-01,false), Span(28,29,List(9),country,country,false), Span(27,28,List(10),other,other,false), Span(26,27,List(11),or,or,false), Span(25,26,List(12),group,group,false), Span(21,22,List(13),organ,organ,false), Span(18,19,List(14),any,any,false), Span(16,17,List(15),assistance,assist-01,false), Span(15,16,List(16),military,military,false), Span(14,15,List(17),offer,offer-01,false), Span(12,13,List(18),allowed,allow-01,false), Span(10,11,List(19),person,person,false), Span(9,10,List(20),no,-,false), Span(7,8,List(21),means,mean-01,false), Span(3,7,List(27, 26, 25, 24, 23, 22),Foreign Military Assistance Act,(organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act")),false), Span(0,2,List(31, 30, 29, 28),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(30 -> "South", 2 -> "National", 5 -> "Control", 27 -> "Act", 12 -> group, 8 -> permit-01, 15 -> assist-01, 21 -> mean-01, 18 -> allow-01, 24 -> "Foreign", 7 -> grant-01, 1 -> name, 17 -> offer-01, 23 -> name, 26 -> "Assistance", 4 -> "Arms", 11 -> or, 14 -> any, 29 -> name, 20 -> -, 28 -> country, 6 -> "Committee", 9 -> country, 0 -> organization, 22 -> organization, 16 -> military, 19 -> person, 10 -> other, 3 -> "Conventional", 31 -> "Africa", 25 -> "Military", 13 -> organ),Map(n -> name, m2 -> mean-01, o3 -> or, o6 -> organization, p2 -> person, a3 -> allow-01, m -> military, g2 -> group, g -> grant-01, p -> permit-01, o5 -> offer-01, n3 -> name, a -> any, o2 -> other, a2 -> assist-01, - -> -, c -> country, o -> organization, o4 -> organ, c2 -> country, n2 -> name))),[Ljava.lang.String;@6bd16207,Annotation([Ljava.lang.String;@298d9a05,[Ljava.lang.String;@58399d82,[Ljava.lang.String;@26f96b85),Annotation([Ljava.lang.String;@46d8f407,[Ljava.lang.String;@3c0036b,[Ledu.cmu.lti.nlp.amr.Dependency;@17814b1c),Annotation([Ljava.lang.String;@7ac9af2a,[Ljava.lang.String;@7bb004b8,[Ljava.lang.String;@78e89bfe),Annotation([Ljava.lang.String;@652ce654,[Ljava.lang.String;@522ba524,[Ledu.cmu.lti.nlp.amr.Entity;@29c5ee1d))
AMR:
(a2 / assist-01, ARG1, m / military)
(a3 / allow-01, ARG1, o5 / offer-01)
(a3 / allow-01, ARG6, - / -)
(a3 / allow-01, condition, g / grant-01)
(c2 / country, name, n3 / name)
(g / grant-01, ARG0, o / organization)
(g / grant-01, ARG1, p / permit-01)
(m2 / mean-01, ARG0, o6 / organization)
(m2 / mean-01, ARG1, a3 / allow-01)
(n / name, op, "Arms")
(n / name, op, "Committee")
(n / name, op, "Control")
(n / name, op, "Conventional")
(n / name, op, "National")
(n2 / name, op, "Act")
(n2 / name, op, "Assistance")
(n2 / name, op, "Foreign")
(n2 / name, op, "Military")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(o / organization, name, n / name)
(o3 / or, mod, a / any)
(o3 / or, op, c / country)
(o3 / or, op, g2 / group)
(o3 / or, op, o4 / organ)
(o5 / offer-01, ARG0, p2 / person)
(o5 / offer-01, ARG1, a2 / assist-01)
(o5 / offer-01, ARG3, o3 / or)
(o6 / organization, mod, o2 / other)
(o6 / organization, name, n2 / name)
(o6 / organization, poss, c2 / country)
(p / permit-01, ARG1, o5 / offer-01)

Decoded in 1,675,337 microseconds
Sentence: South Africa's Foreign Military Assistance Act means that foreign military assistance could be rendered only in accordance with an agreement approved by the National Conventional Arms Control Committee.

NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
NER Entity: (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Spans:
Span 20-21:  agreement => agree-01
Span 21-22:  approved => approve-01
Span 11-12:  assistance => assist-01
Span 12-13:  could => possible
Span 9-10:  foreign => foreign
Span 3-7:  Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Span 7-8:  means => mean-01
Span 10-11:  military => military
Span 24-29:  National Conventional Arms Control Committee => (organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee"))
Span 15-16:  only => only
Span 14-15:  rendered => render-02
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 51 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,29,List(6, 5, 4, 3, 2, 1, 0),National Conventional Arms Control Committee,(organization :name (name :op "National" :op "Conventional" :op "Arms" :op "Control" :op "Committee")),false), Span(21,22,List(7),approved,approve-01,false), Span(20,21,List(8),agreement,agree-01,false), Span(15,16,List(9),only,only,false), Span(14,15,List(10),rendered,render-02,false), Span(12,13,List(11),could,possible,false), Span(11,12,List(12),assistance,assist-01,false), Span(10,11,List(13),military,military,false), Span(9,10,List(14),foreign,foreign,false), Span(7,8,List(15),means,mean-01,false), Span(3,7,List(21, 20, 19, 18, 17, 16),Foreign Military Assistance Act,(organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act")),false), Span(0,2,List(25, 24, 23, 22),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(2 -> "National", 5 -> "Control", 12 -> assist-01, 8 -> agree-01, 15 -> mean-01, 21 -> "Act", 18 -> "Foreign", 24 -> "South", 7 -> approve-01, 1 -> name, 17 -> name, 23 -> name, 4 -> "Arms", 11 -> possible, 14 -> foreign, 20 -> "Assistance", 6 -> "Committee", 9 -> only, 0 -> organization, 22 -> country, 16 -> organization, 19 -> "Military", 10 -> render-02, 3 -> "Conventional", 25 -> "Africa", 13 -> military),Map(n -> name, m2 -> mean-01, o3 -> organization, a3 -> assist-01, m -> military, p -> possible, n3 -> name, a -> approve-01, o2 -> only, a2 -> agree-01, r -> render-02, c -> country, f -> foreign, o -> organization, n2 -> name))),[Ljava.lang.String;@15cea7b0,Annotation([Ljava.lang.String;@17d2ed1b,[Ljava.lang.String;@185f7840,[Ljava.lang.String;@1e6cc850),Annotation([Ljava.lang.String;@7e7f0f0a,[Ljava.lang.String;@7ec58feb,[Ledu.cmu.lti.nlp.amr.Dependency;@1dbb650b),Annotation([Ljava.lang.String;@656d10a4,[Ljava.lang.String;@63ec445c,[Ljava.lang.String;@3104351d),Annotation([Ljava.lang.String;@77d18d0b,[Ljava.lang.String;@7a344b65,[Ledu.cmu.lti.nlp.amr.Entity;@7b7b3edb))
AMR:
(a / approve-01, ARG0, o / organization)
(a / approve-01, ARG1, a2 / agree-01)
(a2 / agree-01, ARG1, r / render-02)
(a3 / assist-01, ARG1, m / military)
(c / country, name, n3 / name)
(m / military, mod, f / foreign)
(m2 / mean-01, ARG0, o3 / organization)
(m2 / mean-01, ARG1, p / possible)
(n / name, op, "Arms")
(n / name, op, "Committee")
(n / name, op, "Control")
(n / name, op, "Conventional")
(n / name, op, "National")
(n2 / name, op, "Act")
(n2 / name, op, "Assistance")
(n2 / name, op, "Foreign")
(n2 / name, op, "Military")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(o / organization, name, n / name)
(o3 / organization, name, n2 / name)
(o3 / organization, poss, c / country)
(p / possible, domain, r / render-02)
(r / render-02, ARG1, a3 / assist-01)
(r / render-02, ARG6, o2 / only)

Decoded in 1,194,349 microseconds
Sentence: The South African Foreign Ministry stated that any person found in violation of South Africa's Foreign Military Assistance Act or any person that fails to receive permission to participate in foreign military activities could be prosecuted and sentenced to a fine, imprisonment or both.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (organization :name (name :op "Foreign" :op "Ministry"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Spans:
Span 33-34:  activities => activity
Span 37-38:  and => and
Span 21-22:  any => any
Span 7-8:  any => any
Span 45-46:  both => both
Span 34-35:  could => possible
Span 24-25:  fails => fail-01
Span 41-42:  fine => fine-01
Span 31-32:  foreign => foreign
Span 16-20:  Foreign Military Assistance Act => (organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act"))
Span 3-5:  Foreign Ministry => (organization :name (name :op "Foreign" :op "Ministry"))
Span 9-10:  found => find-01
Span 43-44:  imprisonment => imprison-01
Span 32-33:  military => military
Span 44-45:  or => or
Span 20-21:  or => or
Span 29-30:  participate => participate-01
Span 27-28:  permission => permit-01
Span 22-23:  person => person
Span 8-9:  person => person
Span 36-37:  prosecuted => prosecute-01
Span 26-27:  receive => receive-01
Span 38-39:  sentenced => sentence-01
Span 13-15:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 5-6:  stated => state-01
Span 11-12:  violation => violate-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),both,both,false), Span(44,45,List(1),or,or,false), Span(43,44,List(2),imprisonment,imprison-01,false), Span(41,42,List(3),fine,fine-01,false), Span(38,39,List(4),sentenced,sentence-01,false), Span(37,38,List(5),and,and,false), Span(36,37,List(6),prosecuted,prosecute-01,false), Span(34,35,List(7),could,possible,false), Span(33,34,List(8),activities,activity,false), Span(32,33,List(9),military,military,false), Span(31,32,List(10),foreign,foreign,false), Span(29,30,List(11),participate,participate-01,false), Span(27,28,List(12),permission,permit-01,false), Span(26,27,List(13),receive,receive-01,false), Span(24,25,List(14),fails,fail-01,false), Span(22,23,List(15),person,person,false), Span(21,22,List(16),any,any,false), Span(20,21,List(17),or,or,false), Span(16,20,List(23, 22, 21, 20, 19, 18),Foreign Military Assistance Act,(organization :name (name :op "Foreign" :op "Military" :op "Assistance" :op "Act")),false), Span(13,15,List(27, 26, 25, 24),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(11,12,List(28),violation,violate-01,false), Span(9,10,List(29),found,find-01,false), Span(8,9,List(30),person,person,false), Span(7,8,List(31),any,any,false), Span(5,6,List(32),stated,state-01,false), Span(3,5,List(36, 35, 34, 33),Foreign Ministry,(organization :name (name :op "Foreign" :op "Ministry")),false), Span(1,3,List(40, 39, 38, 37),South African,(thing :name (name :op "South" :op "African")),false)),Map(39 -> "South", 30 -> person, 2 -> imprison-01, 5 -> and, 33 -> organization, 27 -> "Africa", 12 -> permit-01, 8 -> activity, 15 -> person, 36 -> "Ministry", 21 -> "Military", 18 -> organization, 24 -> country, 35 -> "Foreign", 7 -> possible, 1 -> or, 17 -> or, 23 -> "Act", 38 -> name, 26 -> "South", 4 -> sentence-01, 11 -> participate-01, 32 -> state-01, 14 -> fail-01, 29 -> find-01, 20 -> "Foreign", 34 -> name, 28 -> violate-01, 6 -> prosecute-01, 40 -> "African", 9 -> military, 0 -> both, 22 -> "Assistance", 16 -> any, 37 -> thing, 19 -> name, 10 -> foreign, 3 -> fine-01, 31 -> any, 25 -> name, 13 -> receive-01),Map(n -> name, s2 -> state-01, p5 -> person, t -> thing, b -> both, o3 -> organization, f4 -> find-01, p2 -> possible, n4 -> name, a3 -> any, s -> sentence-01, v -> violate-01, m -> military, p -> prosecute-01, n3 -> name, a -> and, p4 -> permit-01, o2 -> or, f3 -> fail-01, a2 -> activity, i -> imprison-01, r -> receive-01, c -> country, f2 -> foreign, p6 -> person, f -> fine-01, o -> or, o4 -> organization, p3 -> participate-01, n2 -> name, a4 -> any))),[Ljava.lang.String;@6b474074,Annotation([Ljava.lang.String;@108531c2,[Ljava.lang.String;@48b22fd4,[Ljava.lang.String;@6a9d5dff),Annotation([Ljava.lang.String;@3b08f438,[Ljava.lang.String;@2bac9ba,[Ledu.cmu.lti.nlp.amr.Dependency;@5b2f8ab6),Annotation([Ljava.lang.String;@5bdd5689,[Ljava.lang.String;@2788d0fe,[Ljava.lang.String;@73ab3aac),Annotation([Ljava.lang.String;@54f66455,[Ljava.lang.String;@65ae095c,[Ledu.cmu.lti.nlp.amr.Entity;@4c03a37))
AMR:
(a / and, op, p / prosecute-01)
(a / and, op, s / sentence-01)
(a2 / activity, mod, m / military)
(c / country, name, n2 / name)
(f3 / fail-01, ARG1, p6 / person)
(f3 / fail-01, ARG2, r / receive-01)
(f4 / find-01, ARG0, p5 / person)
(i / imprison-01, ARG1, b / both)
(m / military, mod, f2 / foreign)
(n / name, op, "Act")
(n / name, op, "Assistance")
(n / name, op, "Foreign")
(n / name, op, "Military")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Foreign")
(n3 / name, op, "Ministry")
(n4 / name, op, "African")
(n4 / name, op, "South")
(o / or, op, p5 / person)
(o / or, op, p6 / person)
(o2 / or, op, f / fine-01)
(o2 / or, op, i / imprison-01)
(o3 / organization, name, n / name)
(o3 / organization, poss, c / country)
(o4 / organization, mod, t / thing)
(o4 / organization, name, n3 / name)
(p / prosecute-01, ARG1, o / or)
(p2 / possible, domain, a / and)
(p3 / participate-01, ARG1, a2 / activity)
(p4 / permit-01, ARG1, p3 / participate-01)
(p5 / person, mod, a3 / any)
(p6 / person, mod, a4 / any)
(r / receive-01, ARG1, p4 / permit-01)
(s / sentence-01, ARG1, o / or)
(s / sentence-01, ARG2, o2 / or)
(s2 / state-01, ARG0, o4 / organization)
(s2 / state-01, ARG1, p2 / possible)
(t / thing, name, n4 / name)
(v / violate-01, ARG0, p5 / person)
(v / violate-01, ARG1, o3 / organization)

Decoded in 1,858,824 microseconds
Sentence: 2002-07-01

mkDayMonthYear(2002-07-01,01,07,2002)
mkDayMonthYear(2002-07-01,01,07,2002)
Spans:
Span 0-1:  2002-07-01 => (date-entity :year 2002 :month 7 :day 1)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-07-01,(date-entity :year 2002 :month 7 :day 1),false)),Map(2 -> 7, 1 -> 2002, 0 -> date-entity, 3 -> 1),Map(2 -> 2002, 7 -> 7, d -> date-entity, 1 -> 1))),[Ljava.lang.String;@2e140e59,Annotation([Ljava.lang.String;@49a71302,[Ljava.lang.String;@5cd61783,[Ljava.lang.String;@59429fac),Annotation([Ljava.lang.String;@57aa341b,[Ljava.lang.String;@26e412ef,[Ledu.cmu.lti.nlp.amr.Dependency;@4ae263bf),Annotation([Ljava.lang.String;@7103ab0,[Ljava.lang.String;@19ccca5,[Ljava.lang.String;@769d513),Annotation([Ljava.lang.String;@5e4fa1da,[Ljava.lang.String;@588cd519,[Ledu.cmu.lti.nlp.amr.Entity;@3f92c349))
AMR:
(d / date-entity, day, 1 / 1)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2002)

Decoded in 7,325 microseconds
Sentence: Peru (PE)

NER Entity: (country :name (name :op "Peru"))
NER Entity: (country :name (name :op "PE"))
NER Entity: (country :name (name :op "Peru"))
Spans:
Span 0-1:  Peru => (country :name (name :op "Peru"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Peru,(country :name (name :op "Peru")),false)),Map(2 -> "Peru", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@769a58e5,Annotation([Ljava.lang.String;@55f8669d,[Ljava.lang.String;@6be25526,[Ljava.lang.String;@42435b98),Annotation([Ljava.lang.String;@66ba7e45,[Ljava.lang.String;@70e02081,[Ledu.cmu.lti.nlp.amr.Dependency;@9d200de),Annotation([Ljava.lang.String;@511505e7,[Ljava.lang.String;@646811d6,[Ljava.lang.String;@15fdd1f2),Annotation([Ljava.lang.String;@cb0f763,[Ljava.lang.String;@7573e12f,[Ledu.cmu.lti.nlp.amr.Entity;@51b1a8f6))
AMR:
(c / country, name, n / name)
(n / name, op, "Peru")

Decoded in 4,508 microseconds
Sentence: International; money; crime; human rights; Government; narcotics; politics; leader

Spans:
Span 14-15:  ; => and
Span 12-13:  ; => and
Span 10-11:  ; => and
Span 8-9:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  crime => crime
Span 9-10:  Government => (government-organization :ARG0-of govern-01)
Span 6-7:  human => human
Span 0-1:  International => international
Span 15-16:  leader => (person :ARG0-of lead-02)
Span 2-3:  money => money
Span 11-12:  narcotics => narcotic
Span 13-14:  politics => politics
Span 7-8:  rights => right

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),leader,(person :ARG0-of lead-02),false), Span(14,15,List(2),;,and,false), Span(13,14,List(3),politics,politics,false), Span(12,13,List(4),;,and,false), Span(11,12,List(5),narcotics,narcotic,false), Span(10,11,List(6),;,and,false), Span(9,10,List(8, 7),Government,(government-organization :ARG0-of govern-01),false), Span(8,9,List(9),;,and,false), Span(7,8,List(10),rights,right,false), Span(6,7,List(11),human,human,false), Span(5,6,List(12),;,and,false), Span(4,5,List(13),crime,crime,false), Span(3,4,List(14),;,and,false), Span(2,3,List(15),money,money,false), Span(1,2,List(16),;,and,false), Span(0,1,List(17),International,international,false)),Map(2 -> and, 5 -> narcotic, 12 -> and, 15 -> money, 8 -> govern-01, 7 -> government-organization, 17 -> international, 1 -> lead-02, 4 -> and, 11 -> human, 14 -> and, 6 -> and, 0 -> person, 9 -> and, 16 -> and, 3 -> politics, 10 -> right, 13 -> crime),Map(a7 -> and, n -> narcotic, h -> human, p2 -> politics, a3 -> and, a6 -> and, m -> money, g2 -> govern-01, p -> person, g -> government-organization, a -> and, a5 -> and, i -> international, a2 -> and, r -> right, c -> crime, l -> lead-02, a4 -> and))),[Ljava.lang.String;@2a389173,Annotation([Ljava.lang.String;@213860b8,[Ljava.lang.String;@4ba89729,[Ljava.lang.String;@178270b2),Annotation([Ljava.lang.String;@795fd838,[Ljava.lang.String;@1b005a0b,[Ledu.cmu.lti.nlp.amr.Dependency;@141e879d),Annotation([Ljava.lang.String;@109d724c,[Ljava.lang.String;@1704f67f,[Ljava.lang.String;@e4d2696),Annotation([Ljava.lang.String;@6e0f7aad,[Ljava.lang.String;@15fb7a32,[Ledu.cmu.lti.nlp.amr.Entity;@257cc1fc))
AMR:
(a2 / and, op, a / and)
(a4 / and, op, a3 / and)
(a4 / and, op, p2 / politics)
(a5 / and, op, r / right)
(a6 / and, op, a2 / and)
(a6 / and, op, a5 / and)
(a6 / and, op, m / money)
(a6 / and, op, n / narcotic)
(a6 / and, op, p / person)
(a7 / and, op, a6 / and)
(a7 / and, op, c / crime)
(a7 / and, op, g / government-organization)
(a7 / and, op, i / international)
(a7 / and, op, p2 / politics)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p / person)
(r / right, mod, h / human)

Decoded in 136,782 microseconds
Sentence: Former Peruvian spy chief Vladimiro Montesinos convicted of illegally taking control of the National Intelligence Service during ex-President Fujimori's tenure.

NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (person :name (name :op "Vladimiro" :op "Montesinos"))
NER Entity: (organization :name (name :op "National" :op "Intelligence" :op "Service"))
NER Entity: (person :name (name :op "Fujimori"))
NER Entity: (thing :name (name :op "Peruvian"))
Spans:
Span 3-4:  chief => chief
Span 10-11:  control => control-01
Span 6-7:  convicted => convict-01
Span 16-17:  during => during
Span 17-18:  ex => ex
Span 0-1:  Former => former
Span 20-21:  Fujimori => (person :name (name :op "Fujimori"))
Span 13-16:  National Intelligence Service => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Span 1-2:  Peruvian => (country :name (name :op "Peru"))
Span 19-20:  President => (have-org-role-91 :ARG2 president)
Span 2-3:  spy => spy-01
Span 9-10:  taking => take-01
Span 22-23:  tenure => tenure
Span 4-6:  Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),tenure,tenure,false), Span(20,21,List(3, 2, 1),Fujimori,(person :name (name :op "Fujimori")),false), Span(19,20,List(5, 4),President,(have-org-role-91 :ARG2 president),false), Span(17,18,List(6),ex,ex,false), Span(16,17,List(7),during,during,false), Span(13,16,List(12, 11, 10, 9, 8),National Intelligence Service,(organization :name (name :op "National" :op "Intelligence" :op "Service")),false), Span(10,11,List(13),control,control-01,false), Span(9,10,List(14),taking,take-01,false), Span(6,7,List(15),convicted,convict-01,false), Span(4,6,List(19, 18, 17, 16),Vladimiro Montesinos,(person :name (name :op "Montesinos" :op "Vladimiro")),false), Span(3,4,List(20),chief,chief,false), Span(2,3,List(21),spy,spy-01,false), Span(1,2,List(24, 23, 22),Peruvian,(country :name (name :op "Peru")),false), Span(0,1,List(25),Former,former,false)),Map(2 -> name, 5 -> president, 12 -> "Service", 8 -> organization, 15 -> convict-01, 21 -> spy-01, 18 -> "Montesinos", 24 -> "Peru", 7 -> during, 1 -> person, 17 -> name, 23 -> name, 4 -> have-org-role-91, 11 -> "Intelligence", 14 -> take-01, 20 -> chief, 6 -> ex, 9 -> name, 0 -> tenure, 22 -> country, 16 -> person, 19 -> "Vladimiro", 10 -> "National", 3 -> "Fujimori", 25 -> former, 13 -> control-01),Map(e -> ex, n -> name, h -> have-org-role-91, t -> tenure, p2 -> president, n4 -> name, c4 -> country, s -> spy-01, d -> during, p -> person, c3 -> chief, n3 -> name, t2 -> take-01, c -> control-01, f -> former, o -> organization, p3 -> person, n2 -> name, c2 -> convict-01))),[Ljava.lang.String;@42e22a53,Annotation([Ljava.lang.String;@57adfab0,[Ljava.lang.String;@1949309d,[Ljava.lang.String;@5af97169),Annotation([Ljava.lang.String;@99a78d7,[Ljava.lang.String;@31da6b2e,[Ledu.cmu.lti.nlp.amr.Dependency;@61c76850),Annotation([Ljava.lang.String;@70242f38,[Ljava.lang.String;@2a22ad2b,[Ljava.lang.String;@48c3205a),Annotation([Ljava.lang.String;@121c54fa,[Ljava.lang.String;@4390f46e,[Ledu.cmu.lti.nlp.amr.Entity;@7c6442c2))
AMR:
(c / control-01, ARG0, p3 / person)
(c / control-01, ARG1, o / organization)
(c / control-01, time, t / tenure)
(c2 / convict-01, ARG0, c3 / chief)
(c2 / convict-01, ARG1, p3 / person)
(c2 / convict-01, ARG2, t2 / take-01)
(c3 / chief, mod, f / former)
(c3 / chief, mod, s / spy-01)
(c4 / country, name, n4 / name)
(d / during, op, t / tenure)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Fujimori")
(n2 / name, op, "Intelligence")
(n2 / name, op, "National")
(n2 / name, op, "Service")
(n3 / name, op, "Montesinos")
(n3 / name, op, "Vladimiro")
(n4 / name, op, "Peru")
(o / organization, name, n2 / name)
(p / person, name, n / name)
(p2 / president, mod, e / ex)
(p3 / person, name, n3 / name)
(t / tenure, poss, p / person)
(t2 / take-01, ARG1, c / control-01)

Decoded in 286,732 microseconds
Sentence: Montesinos has been sentenced to 9 years and 4 months for the conviction.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 8-9:  4 => 4
Span 5-6:  9 => 9
Span 7-8:  and => and
Span 12-13:  conviction => convict-01
Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Span 9-10:  months => (temporal-quantity :unit month)
Span 3-4:  sentenced => sentence-01
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),conviction,convict-01,false), Span(9,10,List(2, 1),months,(temporal-quantity :unit month),false), Span(8,9,List(3),4,4,false), Span(7,8,List(4),and,and,false), Span(6,7,List(6, 5),years,(temporal-quantity :unit year),false), Span(5,6,List(7),9,9,false), Span(3,4,List(8),sentenced,sentence-01,false), Span(0,1,List(11, 10, 9),Montesinos,(person :name (name :op "Montesinos")),false)),Map(2 -> month, 5 -> temporal-quantity, 8 -> sentence-01, 7 -> 9, 1 -> temporal-quantity, 11 -> "Montesinos", 4 -> and, 6 -> year, 9 -> person, 0 -> convict-01, 10 -> name, 3 -> 4),Map(n -> name, t -> temporal-quantity, s -> sentence-01, m -> month, p -> person, y -> year, a -> and, 4 -> 4, t2 -> temporal-quantity, c -> convict-01, 9 -> 9))),[Ljava.lang.String;@2d746ce4,Annotation([Ljava.lang.String;@5dbf5634,[Ljava.lang.String;@1948ea69,[Ljava.lang.String;@47e4d9d0),Annotation([Ljava.lang.String;@49798e84,[Ljava.lang.String;@6ed06f69,[Ledu.cmu.lti.nlp.amr.Dependency;@3015db78),Annotation([Ljava.lang.String;@515ebef3,[Ljava.lang.String;@545607f2,[Ljava.lang.String;@39109136),Annotation([Ljava.lang.String;@27c04377,[Ljava.lang.String;@34dc85a,[Ledu.cmu.lti.nlp.amr.Entity;@67403656))
AMR:
(a / and, op, t / temporal-quantity)
(a / and, op, t2 / temporal-quantity)
(c / convict-01, ARG1, 4 / 4)
(n / name, op, "Montesinos")
(p / person, name, n / name)
(s / sentence-01, ARG1, p / person)
(s / sentence-01, ARG2, a / and)
(s / sentence-01, ARG3, c / convict-01)
(t / temporal-quantity, unit, m / month)
(t2 / temporal-quantity, quant, 9 / 9)
(t2 / temporal-quantity, unit, y / year)

Decoded in 68,766 microseconds
Sentence: Montesinos plans to appeal the sentence.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 3-4:  appeal => appeal-01
Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Span 1-2:  plans => plan-01
Span 5-6:  sentence => sentence-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),sentence,sentence-01,false), Span(3,4,List(1),appeal,appeal-01,false), Span(1,2,List(2),plans,plan-01,false), Span(0,1,List(5, 4, 3),Montesinos,(person :name (name :op "Montesinos")),false)),Map(2 -> plan-01, 5 -> "Montesinos", 1 -> appeal-01, 4 -> name, 0 -> sentence-01, 3 -> person),Map(n -> name, p2 -> person, s -> sentence-01, p -> plan-01, a -> appeal-01))),[Ljava.lang.String;@5a6482a9,Annotation([Ljava.lang.String;@7f9ab969,[Ljava.lang.String;@12f8b1d8,[Ljava.lang.String;@746cd757),Annotation([Ljava.lang.String;@ae372b9,[Ljava.lang.String;@2098d37d,[Ledu.cmu.lti.nlp.amr.Dependency;@77b9d0c7),Annotation([Ljava.lang.String;@65fd6708,[Ljava.lang.String;@749ab7b4,[Ljava.lang.String;@127f9161),Annotation([Ljava.lang.String;@2bf94401,[Ljava.lang.String;@2532b351,[Ledu.cmu.lti.nlp.amr.Entity;@4349754))
AMR:
(a / appeal-01, ARG1, s / sentence-01)
(n / name, op, "Montesinos")
(p / plan-01, ARG0, p2 / person)
(p / plan-01, ARG1, a / appeal-01)
(p2 / person, name, n / name)

Decoded in 15,747 microseconds
Sentence: On 1 July 2002 former Peruvian spy chief during the government of ex-president Alberto Fujimori, Vladimiro Montesinos, was convicted of illegally taking control of the National Intelligence Service when Montesinos was supposed to be only an adviser to the spy agency.

mkDayMonthYear(1	July	2002,1,July,2002)
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (person :name (name :op "Alberto" :op "Fujimori"))
NER Entity: (person :name (name :op "Vladimiro" :op "Montesinos"))
NER Entity: (organization :name (name :op "National" :op "Intelligence" :op "Service"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (thing :name (name :op "Peruvian"))
Spans:
Span 13-15:  - president => (person :name (name :op "Alberto" :op "Fujimori"))
Span 1-4:  1 July 2002 => (date-entity :day 1 :month 7 :year 2002)
Span 40-41:  adviser => advise-01
Span 44-45:  agency => agency
Span 7-8:  chief => chief
Span 26-27:  control => control-01
Span 22-23:  convicted => convict-01
Span 8-9:  during => during
Span 12-13:  ex => ex
Span 4-5:  former => former
Span 16-18:  Fujimori , => (person :name (name :op "Vladimiro" :op "Montesinos"))
Span 10-11:  government => (government-organization :ARG0-of govern-01)
Span 30-31:  Intelligence => intelligence
Span 33-34:  Montesinos => (person :name (name :op "Montesinos"))
Span 27-30:  of the National => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Span 38-39:  only => only
Span 5-6:  Peruvian => (country :name (name :op "Peru"))
Span 43-44:  spy => spy-01
Span 6-7:  spy => spy-01
Span 35-36:  supposed => suppose-02
Span 25-26:  taking => take-01
Span 18-20:  Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),agency,agency,false), Span(43,44,List(1),spy,spy-01,false), Span(40,41,List(2),adviser,advise-01,false), Span(38,39,List(3),only,only,false), Span(35,36,List(4),supposed,suppose-02,false), Span(33,34,List(7, 6, 5),Montesinos,(person :name (name :op "Montesinos")),false), Span(30,31,List(8),Intelligence,intelligence,false), Span(27,30,List(13, 12, 11, 10, 9),of the National,(organization :name (name :op "National" :op "Intelligence" :op "Service")),false), Span(26,27,List(14),control,control-01,false), Span(25,26,List(15),taking,take-01,false), Span(22,23,List(16),convicted,convict-01,false), Span(18,20,List(20, 19, 18, 17),Vladimiro Montesinos,(person :name (name :op "Montesinos" :op "Vladimiro")),false), Span(16,18,List(24, 23, 22, 21),Fujimori ,,(person :name (name :op "Vladimiro" :op "Montesinos")),false), Span(13,15,List(28, 27, 26, 25),- president,(person :name (name :op "Alberto" :op "Fujimori")),false), Span(12,13,List(29),ex,ex,false), Span(10,11,List(31, 30),government,(government-organization :ARG0-of govern-01),false), Span(8,9,List(32),during,during,false), Span(7,8,List(33),chief,chief,false), Span(6,7,List(34),spy,spy-01,false), Span(5,6,List(37, 36, 35),Peruvian,(country :name (name :op "Peru")),false), Span(4,5,List(38),former,former,false), Span(1,4,List(42, 41, 40, 39),1 July 2002,(date-entity :day 1 :month 7 :year 2002),false)),Map(39 -> date-entity, 30 -> government-organization, 2 -> advise-01, 5 -> person, 33 -> chief, 27 -> "Alberto", 12 -> "Intelligence", 8 -> intelligence, 15 -> take-01, 42 -> 2002, 36 -> name, 21 -> person, 18 -> name, 24 -> "Montesinos", 41 -> 7, 35 -> country, 7 -> "Montesinos", 1 -> spy-01, 17 -> person, 23 -> "Vladimiro", 38 -> former, 26 -> name, 4 -> suppose-02, 11 -> "National", 32 -> during, 14 -> control-01, 29 -> ex, 20 -> "Vladimiro", 34 -> spy-01, 28 -> "Fujimori", 6 -> name, 40 -> 1, 9 -> organization, 0 -> agency, 22 -> name, 16 -> convict-01, 37 -> "Peru", 19 -> "Montesinos", 10 -> name, 3 -> only, 31 -> govern-01, 25 -> person, 13 -> "Service"),Map(e -> ex, n -> name, 2 -> 2002, s2 -> suppose-02, t -> take-01, p2 -> person, c4 -> country, n4 -> name, s -> spy-01, d -> during, 7 -> 7, 1 -> 1, g2 -> govern-01, p -> person, g -> government-organization, a -> agency, n3 -> name, c3 -> chief, p4 -> person, d2 -> date-entity, n6 -> name, o2 -> organization, i -> intelligence, a2 -> advise-01, c -> control-01, s3 -> spy-01, f -> former, o -> only, p3 -> person, c2 -> convict-01, n2 -> name, n5 -> name))),[Ljava.lang.String;@6a2eea2a,Annotation([Ljava.lang.String;@b967222,[Ljava.lang.String;@3b0ee03a,[Ljava.lang.String;@1ba05e38),Annotation([Ljava.lang.String;@6c298dc,[Ljava.lang.String;@3e7dfd44,[Ledu.cmu.lti.nlp.amr.Dependency;@723ed581),Annotation([Ljava.lang.String;@6b760460,[Ljava.lang.String;@796065aa,[Ljava.lang.String;@28a6301f),Annotation([Ljava.lang.String;@2c306a57,[Ljava.lang.String;@773e2eb5,[Ledu.cmu.lti.nlp.amr.Entity;@d8948cd))
AMR:
(a / agency, mod, s3 / spy-01)
(a2 / advise-01, ARG0, p2 / person)
(a2 / advise-01, ARG1, a / agency)
(c / control-01, ARG1, g / government-organization)
(c / control-01, time, s2 / suppose-02)
(c2 / convict-01, ARG1, c3 / chief)
(c2 / convict-01, ARG2, t / take-01)
(c2 / convict-01, time, d2 / date-entity)
(c3 / chief, mod, c4 / country)
(c3 / chief, mod, f / former)
(c3 / chief, mod, s / spy-01)
(c4 / country, name, n6 / name)
(d / during, op, g / government-organization)
(d2 / date-entity, day, 1 / 1)
(d2 / date-entity, month, 7 / 7)
(d2 / date-entity, year, 2 / 2002)
(g / government-organization, name, i / intelligence)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, p3 / person)
(n / name, op, "Montesinos")
(n2 / name, op, "Intelligence")
(n2 / name, op, "National")
(n2 / name, op, "Service")
(n3 / name, op, "Montesinos")
(n3 / name, op, "Vladimiro")
(n4 / name, op, "Montesinos")
(n4 / name, op, "Vladimiro")
(n5 / name, op, "Alberto")
(n5 / name, op, "Fujimori")
(n6 / name, op, "Peru")
(o2 / organization, name, n2 / name)
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p3 / person, name, n4 / name)
(p4 / person, mod, e / ex)
(p4 / person, name, n5 / name)
(s2 / suppose-02, ARG1, p / person)
(s2 / suppose-02, ARG2, a2 / advise-01)
(s2 / suppose-02, ARG6, o2 / organization)
(s2 / suppose-02, mod, o / only)
(s3 / spy-01, ARG1, e / ex)
(t / take-01, ARG1, c / control-01)

Decoded in 3,549,635 microseconds
Sentence: Montesinos was sentenced to 9 years and 4 months in prison for abuse of authority.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 7-8:  4 => 4
Span 4-5:  9 => 9
Span 12-13:  abuse => abuse-01
Span 6-7:  and => and
Span 14-15:  authority => authority
Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Span 8-9:  months => (temporal-quantity :unit month)
Span 10-11:  prison => prison
Span 2-3:  sentenced => sentence-01
Span 5-6:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),authority,authority,false), Span(12,13,List(1),abuse,abuse-01,false), Span(10,11,List(2),prison,prison,false), Span(8,9,List(4, 3),months,(temporal-quantity :unit month),false), Span(7,8,List(5),4,4,false), Span(6,7,List(6),and,and,false), Span(5,6,List(8, 7),years,(temporal-quantity :unit year),false), Span(4,5,List(9),9,9,false), Span(2,3,List(10),sentenced,sentence-01,false), Span(0,1,List(13, 12, 11),Montesinos,(person :name (name :op "Montesinos")),false)),Map(2 -> prison, 5 -> 4, 12 -> name, 8 -> year, 7 -> temporal-quantity, 1 -> abuse-01, 4 -> month, 11 -> person, 6 -> and, 0 -> authority, 9 -> 9, 3 -> temporal-quantity, 10 -> sentence-01, 13 -> "Montesinos"),Map(n -> name, t -> temporal-quantity, p2 -> person, a3 -> and, s -> sentence-01, m -> month, p -> prison, y -> year, a -> authority, 4 -> 4, t2 -> temporal-quantity, a2 -> abuse-01, 9 -> 9))),[Ljava.lang.String;@1436a7ab,Annotation([Ljava.lang.String;@3b7b05a8,[Ljava.lang.String;@3d36dff4,[Ljava.lang.String;@7abe27bf),Annotation([Ljava.lang.String;@5b94ccbc,[Ljava.lang.String;@38a1c423,[Ledu.cmu.lti.nlp.amr.Dependency;@336365bc),Annotation([Ljava.lang.String;@38eb2fb0,[Ljava.lang.String;@4567e53d,[Ljava.lang.String;@7351a16e),Annotation([Ljava.lang.String;@5bb7643d,[Ljava.lang.String;@3ac04654,[Ledu.cmu.lti.nlp.amr.Entity;@4074023c))
AMR:
(a2 / abuse-01, ARG1, a / authority)
(a3 / and, location, p / prison)
(a3 / and, op, t / temporal-quantity)
(a3 / and, op, t2 / temporal-quantity)
(n / name, op, "Montesinos")
(p2 / person, name, n / name)
(s / sentence-01, ARG1, p2 / person)
(s / sentence-01, ARG2, a3 / and)
(s / sentence-01, ARG3, a2 / abuse-01)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, m / month)
(t2 / temporal-quantity, quant, 9 / 9)
(t2 / temporal-quantity, unit, y / year)

Decoded in 131,323 microseconds
Sentence: The sentence also ordered Montesinos pay a fine of 3 million dollars as compensation to the State.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 9-10:  3 => 3
Span 2-3:  also => also
Span 13-14:  compensation => compensate-01
Span 11-12:  dollars => (monetary-quantity :unit dollar)
Span 7-8:  fine => fine-01
Span 4-5:  Montesinos => (person :name (name :op "Montesinos"))
Span 3-4:  ordered => order-01
Span 5-6:  pay => pay-01
Span 1-2:  sentence => sentence-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),compensation,compensate-01,false), Span(11,12,List(2, 1),dollars,(monetary-quantity :unit dollar),false), Span(9,10,List(3),3,3,false), Span(7,8,List(4),fine,fine-01,false), Span(5,6,List(5),pay,pay-01,false), Span(4,5,List(8, 7, 6),Montesinos,(person :name (name :op "Montesinos")),false), Span(3,4,List(9),ordered,order-01,false), Span(2,3,List(10),also,also,false), Span(1,2,List(11),sentence,sentence-01,false)),Map(2 -> dollar, 5 -> pay-01, 8 -> "Montesinos", 7 -> name, 1 -> monetary-quantity, 11 -> sentence-01, 4 -> fine-01, 6 -> person, 9 -> order-01, 0 -> compensate-01, 10 -> also, 3 -> 3),Map(n -> name, p2 -> person, s -> sentence-01, d -> dollar, m -> monetary-quantity, p -> pay-01, a -> also, c -> compensate-01, o -> order-01, f -> fine-01, 3 -> 3))),[Ljava.lang.String;@3ed0918d,Annotation([Ljava.lang.String;@5e268ce6,[Ljava.lang.String;@66ec9390,[Ljava.lang.String;@6e91893),Annotation([Ljava.lang.String;@3c0fbd3a,[Ljava.lang.String;@562457e1,[Ledu.cmu.lti.nlp.amr.Dependency;@54562ea6),Annotation([Ljava.lang.String;@1a35993f,[Ljava.lang.String;@5b12012e,[Ljava.lang.String;@2f7dcef2),Annotation([Ljava.lang.String;@4a3be6a5,[Ljava.lang.String;@7cf162bc,[Ledu.cmu.lti.nlp.amr.Entity;@3721177d))
AMR:
(c / compensate-01, ARG1, 3 / 3)
(f / fine-01, ARG1, m / monetary-quantity)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Montesinos")
(o / order-01, ARG0, s / sentence-01)
(o / order-01, ARG2, p / pay-01)
(o / order-01, mod, a / also)
(p / pay-01, ARG0, p2 / person)
(p / pay-01, ARG1, f / fine-01)
(p / pay-01, ARG3, c / compensate-01)
(p2 / person, name, n / name)

Decoded in 104,853 microseconds
Sentence: Anti-corruption judge Saul Pena stated Montesinos has admitted to the abuse of authority charge.

NER Entity: (person :name (name :op "Saul" :op "Pena"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 12-13:  abuse => abuse-01
Span 9-10:  admitted => admit-01
Span 0-1:  Anti => oppose-01
Span 14-15:  authority => authority
Span 15-16:  charge => charge-05
Span 2-4:  corruption judge => (person :name (name :op "Saul" :op "Pena"))
Span 7-8:  Montesinos => (person :name (name :op "Montesinos"))
Span 4-6:  Saul Pena => (person :name (name :op "Pena" :op "Saul"))
Span 6-7:  stated => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),charge,charge-05,false), Span(14,15,List(1),authority,authority,false), Span(12,13,List(2),abuse,abuse-01,false), Span(9,10,List(3),admitted,admit-01,false), Span(7,8,List(6, 5, 4),Montesinos,(person :name (name :op "Montesinos")),false), Span(6,7,List(7),stated,state-01,false), Span(4,6,List(11, 10, 9, 8),Saul Pena,(person :name (name :op "Pena" :op "Saul")),false), Span(2,4,List(15, 14, 13, 12),corruption judge,(person :name (name :op "Saul" :op "Pena")),false), Span(0,1,List(16),Anti,oppose-01,false)),Map(2 -> abuse-01, 5 -> name, 12 -> person, 15 -> "Pena", 8 -> person, 7 -> state-01, 1 -> authority, 4 -> person, 11 -> "Saul", 14 -> "Saul", 6 -> "Montesinos", 0 -> charge-05, 9 -> name, 16 -> oppose-01, 3 -> admit-01, 10 -> "Pena", 13 -> name),Map(n -> name, p2 -> person, s -> state-01, a3 -> admit-01, p -> person, n3 -> name, a -> authority, a2 -> abuse-01, c -> charge-05, o -> oppose-01, p3 -> person, n2 -> name))),[Ljava.lang.String;@766a4535,Annotation([Ljava.lang.String;@63718b93,[Ljava.lang.String;@14e2e1c3,[Ljava.lang.String;@2b4786dd),Annotation([Ljava.lang.String;@f202d6d,[Ljava.lang.String;@60e21209,[Ledu.cmu.lti.nlp.amr.Dependency;@630d1b2f),Annotation([Ljava.lang.String;@746b18fd,[Ljava.lang.String;@7a2e0858,[Ljava.lang.String;@aac3f4e),Annotation([Ljava.lang.String;@1f38957,[Ljava.lang.String;@2df3c564,[Ledu.cmu.lti.nlp.amr.Entity;@2715644a))
AMR:
(a2 / abuse-01, ARG1, a / authority)
(a3 / admit-01, ARG0, p / person)
(a3 / admit-01, ARG1, c / charge-05)
(c / charge-05, ARG1, a2 / abuse-01)
(n / name, op, "Montesinos")
(n2 / name, op, "Pena")
(n2 / name, op, "Saul")
(n3 / name, op, "Pena")
(n3 / name, op, "Saul")
(o / oppose-01, ARG0, p2 / person)
(o / oppose-01, ARG1, p3 / person)
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, a3 / admit-01)

Decoded in 76,071 microseconds
Sentence: This is the first ruling of more than 50 charges against Montesinos which include corruption, drug trafficking, illegal arms deals and human rights violations.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 8-9:  50 => 50
Span 22-23:  and => and
Span 20-21:  arms => arm
Span 9-10:  charges => charge-05
Span 14-15:  corruption => corrupt-01
Span 21-22:  deals => deal-01
Span 16-17:  drug => drug
Span 23-24:  human => human
Span 19-20:  illegal => (law :polarity -)
Span 13-14:  include => include-01
Span 11-12:  Montesinos => (person :name (name :op "Montesinos"))
Span 6-7:  more => more
Span 24-25:  rights => right
Span 4-5:  ruling => rule-03
Span 0-1:  This => this
Span 17-18:  trafficking => traffic-00
Span 25-26:  violations => violate-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),violations,violate-01,false), Span(24,25,List(1),rights,right,false), Span(23,24,List(2),human,human,false), Span(22,23,List(3),and,and,false), Span(21,22,List(4),deals,deal-01,false), Span(20,21,List(5),arms,arm,false), Span(19,20,List(7, 6),illegal,(law :polarity -),false), Span(17,18,List(8),trafficking,traffic-00,false), Span(16,17,List(9),drug,drug,false), Span(14,15,List(10),corruption,corrupt-01,false), Span(13,14,List(11),include,include-01,false), Span(11,12,List(14, 13, 12),Montesinos,(person :name (name :op "Montesinos")),false), Span(9,10,List(15),charges,charge-05,false), Span(8,9,List(16),50,50,false), Span(6,7,List(17),more,more,false), Span(4,5,List(18),ruling,rule-03,false), Span(0,1,List(19),This,this,false)),Map(2 -> human, 5 -> arm, 12 -> person, 15 -> charge-05, 8 -> traffic-00, 18 -> rule-03, 7 -> -, 17 -> more, 1 -> right, 4 -> deal-01, 11 -> include-01, 14 -> "Montesinos", 6 -> law, 0 -> violate-01, 9 -> drug, 16 -> 50, 19 -> this, 3 -> and, 10 -> corrupt-01, 13 -> name),Map(n -> name, h -> human, 5 -> 50, t -> traffic-00, v -> violate-01, m -> more, d -> deal-01, r2 -> rule-03, p -> person, a -> and, d2 -> drug, t2 -> this, r -> right, a2 -> arm, i -> include-01, c -> corrupt-01, l -> law, c2 -> charge-05))),[Ljava.lang.String;@4c2869a9,Annotation([Ljava.lang.String;@518cf84a,[Ljava.lang.String;@62e7dffa,[Ljava.lang.String;@6edcd0d8),Annotation([Ljava.lang.String;@6136998b,[Ljava.lang.String;@57ce634f,[Ledu.cmu.lti.nlp.amr.Dependency;@b8a7e43),Annotation([Ljava.lang.String;@35835fa,[Ljava.lang.String;@56f71edb,[Ljava.lang.String;@7207cb51),Annotation([Ljava.lang.String;@2a27cb34,[Ljava.lang.String;@6892cc6f,[Ledu.cmu.lti.nlp.amr.Entity;@6fd1660))
AMR:
(a / and, op, c / corrupt-01)
(a / and, op, d / deal-01)
(a / and, op, t / traffic-00)
(a / and, op, v / violate-01)
(a2 / arm, mod, l / law)
(c / corrupt-01, ARG1, m / more)
(c2 / charge-05, ARG1, p / person)
(c2 / charge-05, quant, 5 / 50)
(d / deal-01, ARG1, a2 / arm)
(i / include-01, ARG1, a / and)
(i / include-01, ARG2, r2 / rule-03)
(l / law, polarity, -)
(m / more, op, c2 / charge-05)
(n / name, op, "Montesinos")
(p / person, name, n / name)
(r / right, mod, h / human)
(r2 / rule-03, domain, t2 / this)
(t / traffic-00, ARG1, d2 / drug)
(v / violate-01, ARG1, r / right)

Decoded in 1,016,376 microseconds
Sentence: Montesinos is alleged to run a network of bribes.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 2-3:  alleged => allege-01
Span 8-9:  bribes => bribe-01
Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Span 6-7:  network => network
Span 4-5:  run => run-01

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),bribes,bribe-01,false), Span(6,7,List(1),network,network,false), Span(4,5,List(2),run,run-01,false), Span(2,3,List(3),alleged,allege-01,false), Span(0,1,List(6, 5, 4),Montesinos,(person :name (name :op "Montesinos")),false)),Map(2 -> run-01, 5 -> name, 1 -> network, 4 -> person, 6 -> "Montesinos", 0 -> bribe-01, 3 -> allege-01),Map(n -> network, b -> bribe-01, p -> person, a -> allege-01, r -> run-01, n2 -> name))),[Ljava.lang.String;@4a6c18ad,Annotation([Ljava.lang.String;@5e8604bf,[Ljava.lang.String;@20095ab4,[Ljava.lang.String;@4e2916c3),Annotation([Ljava.lang.String;@64aad6db,[Ljava.lang.String;@ae7950d,[Ledu.cmu.lti.nlp.amr.Dependency;@60d1b21f),Annotation([Ljava.lang.String;@66c83fc8,[Ljava.lang.String;@546621c4,[Ljava.lang.String;@621f89b8),Annotation([Ljava.lang.String;@f339eae,[Ljava.lang.String;@2822c6ff,[Ledu.cmu.lti.nlp.amr.Entity;@4dafba3e))
AMR:
(a / allege-01, ARG1, r / run-01)
(b / bribe-01, ARG1, n / network)
(n2 / name, op, "Montesinos")
(p / person, name, n2 / name)
(r / run-01, ARG0, p / person)
(r / run-01, ARG1, n / network)

Decoded in 68,520 microseconds
Sentence: A leaked videotape showed Montesinos bribing a congressman to switch to the government party and triggered events that culminated in Fujimori's resignation in November 2000.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Fujimori"))
NER Entity: (person :name (name :op "Fujimori"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 14-15:  and => and
Span 5-6:  bribing => bribe-01
Span 7-8:  congressman => congressman
Span 18-19:  culminated => culminate-01
Span 16-17:  events => event
Span 20-21:  Fujimori => (person :name (name :op "Fujimori"))
Span 12-13:  government => (government-organization :ARG0-of govern-01)
Span 1-2:  leaked => leak-01
Span 4-5:  Montesinos => (person :name (name :op "Montesinos"))
Span 24-26:  November 2000 => (date-entity :month 11 :year 2000)
Span 13-14:  party => party
Span 22-23:  resignation => resign-01
Span 3-4:  showed => show-01
Span 9-10:  switch => switch-01
Span 15-16:  triggered => trigger-01
Span 2-3:  videotape => videotape

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,26,List(2, 1, 0),November 2000,(date-entity :month 11 :year 2000),false), Span(22,23,List(3),resignation,resign-01,false), Span(20,21,List(6, 5, 4),Fujimori,(person :name (name :op "Fujimori")),false), Span(18,19,List(7),culminated,culminate-01,false), Span(16,17,List(8),events,event,false), Span(15,16,List(9),triggered,trigger-01,false), Span(14,15,List(10),and,and,false), Span(13,14,List(11),party,party,false), Span(12,13,List(13, 12),government,(government-organization :ARG0-of govern-01),false), Span(9,10,List(14),switch,switch-01,false), Span(7,8,List(15),congressman,congressman,false), Span(5,6,List(16),bribing,bribe-01,false), Span(4,5,List(19, 18, 17),Montesinos,(person :name (name :op "Montesinos")),false), Span(3,4,List(20),showed,show-01,false), Span(2,3,List(21),videotape,videotape,false), Span(1,2,List(22),leaked,leak-01,false)),Map(2 -> 2000, 5 -> name, 12 -> government-organization, 15 -> congressman, 8 -> event, 21 -> videotape, 18 -> name, 7 -> culminate-01, 17 -> person, 1 -> 11, 4 -> person, 11 -> party, 14 -> switch-01, 20 -> show-01, 6 -> "Fujimori", 22 -> leak-01, 0 -> date-entity, 9 -> trigger-01, 16 -> bribe-01, 19 -> "Montesinos", 3 -> resign-01, 10 -> and, 13 -> govern-01),Map(e -> event, n -> name, 2 -> 2000, s2 -> show-01, b -> bribe-01, t -> trigger-01, p2 -> party, s -> switch-01, v -> videotape, d -> date-entity, 1 -> 11, g2 -> govern-01, p -> person, g -> government-organization, a -> and, r -> resign-01, c -> culminate-01, l -> leak-01, p3 -> person, n2 -> name, c2 -> congressman))),[Ljava.lang.String;@53e3a87a,Annotation([Ljava.lang.String;@40368a46,[Ljava.lang.String;@7e9da981,[Ljava.lang.String;@4ed38226),Annotation([Ljava.lang.String;@3d43fe,[Ljava.lang.String;@74ad8d05,[Ledu.cmu.lti.nlp.amr.Dependency;@676ff3b0),Annotation([Ljava.lang.String;@35ff8fc9,[Ljava.lang.String;@5fb7183b,[Ljava.lang.String;@476a736d),Annotation([Ljava.lang.String;@5f80fa43,[Ljava.lang.String;@16c8b7bd,[Ledu.cmu.lti.nlp.amr.Entity;@7159139f))
AMR:
(a / and, op, s2 / show-01)
(a / and, op, t / trigger-01)
(b / bribe-01, ARG0, p3 / person)
(b / bribe-01, ARG1, c2 / congressman)
(c / culminate-01, ARG1, e / event)
(c / culminate-01, ARG2, r / resign-01)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2000)
(g2 / govern-01, ARG0, g / government-organization)
(l / leak-01, ARG1, v / videotape)
(n / name, op, "Fujimori")
(n2 / name, op, "Montesinos")
(p / person, name, n / name)
(p2 / party, mod, g / government-organization)
(p3 / person, name, n2 / name)
(r / resign-01, ARG0, p / person)
(r / resign-01, time, d / date-entity)
(s / switch-01, ARG1, c2 / congressman)
(s / switch-01, ARG2, p2 / party)
(s2 / show-01, ARG0, v / videotape)
(s2 / show-01, ARG1, b / bribe-01)
(t / trigger-01, ARG0, v / videotape)
(t / trigger-01, ARG1, e / event)

Decoded in 255,526 microseconds
Sentence: Fujimori is accused of dereliction of duty and embezzlement and has been in self-imposed exile in Japan since resigning to avoid the legal action from the Peruvian authorities under the protection of dual nationality.

NER Entity: (person :name (name :op "Fujimori"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (person :name (name :op "Fujimori"))
Spans:
Span 2-3:  accused => accuse-01
Span 25-26:  action => action
Span 9-10:  and => and
Span 7-8:  and => and
Span 29-30:  authorities => authority
Span 22-23:  avoid => avoid-01
Span 4-5:  dereliction => dereliction
Span 34-35:  dual => dual
Span 6-7:  duty => duty
Span 8-9:  embezzlement => embezzle-01
Span 16-17:  exile => exile-01
Span 0-1:  Fujimori => (person :name (name :op "Fujimori"))
Span 15-16:  imposed => impose-01
Span 18-19:  Japan => (country :name (name :op "Japan"))
Span 24-25:  legal => legal
Span 35-36:  nationality => nationality
Span 28-29:  Peruvian => (country :name (name :op "Peru"))
Span 32-33:  protection => protect-01
Span 20-21:  resigning => resign-01
Span 13-14:  self => self
Span 19-20:  since => since

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),nationality,nationality,false), Span(34,35,List(1),dual,dual,false), Span(32,33,List(2),protection,protect-01,false), Span(29,30,List(3),authorities,authority,false), Span(28,29,List(6, 5, 4),Peruvian,(country :name (name :op "Peru")),false), Span(25,26,List(7),action,action,false), Span(24,25,List(8),legal,legal,false), Span(22,23,List(9),avoid,avoid-01,false), Span(20,21,List(10),resigning,resign-01,false), Span(19,20,List(11),since,since,false), Span(18,19,List(14, 13, 12),Japan,(country :name (name :op "Japan")),false), Span(16,17,List(15),exile,exile-01,false), Span(15,16,List(16),imposed,impose-01,false), Span(13,14,List(17),self,self,false), Span(9,10,List(18),and,and,false), Span(8,9,List(19),embezzlement,embezzle-01,false), Span(7,8,List(20),and,and,false), Span(6,7,List(21),duty,duty,false), Span(4,5,List(22),dereliction,dereliction,false), Span(2,3,List(23),accused,accuse-01,false), Span(0,1,List(26, 25, 24),Fujimori,(person :name (name :op "Fujimori")),false)),Map(2 -> protect-01, 5 -> name, 12 -> country, 8 -> legal, 15 -> exile-01, 21 -> duty, 18 -> and, 24 -> person, 7 -> action, 1 -> dual, 17 -> self, 23 -> accuse-01, 26 -> "Fujimori", 4 -> country, 11 -> since, 14 -> "Japan", 20 -> and, 6 -> "Peru", 9 -> avoid-01, 0 -> nationality, 22 -> dereliction, 16 -> impose-01, 19 -> embezzle-01, 10 -> resign-01, 3 -> authority, 25 -> name, 13 -> name),Map(e -> exile-01, n -> nationality, s2 -> self, d3 -> dereliction, p2 -> person, e2 -> embezzle-01, n4 -> name, a3 -> avoid-01, s -> since, a6 -> accuse-01, d -> dual, p -> protect-01, a -> authority, n3 -> name, d2 -> duty, a5 -> and, i -> impose-01, a2 -> action, r -> resign-01, c -> country, l -> legal, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@65bcf7c2,Annotation([Ljava.lang.String;@3db64bd4,[Ljava.lang.String;@6e106680,[Ljava.lang.String;@576c5536),Annotation([Ljava.lang.String;@55ecbafe,[Ljava.lang.String;@5a8ba37c,[Ledu.cmu.lti.nlp.amr.Dependency;@37c2eacb),Annotation([Ljava.lang.String;@232cce0,[Ljava.lang.String;@32b9bd12,[Ljava.lang.String;@352e787a),Annotation([Ljava.lang.String;@159a48a6,[Ljava.lang.String;@15bc339,[Ledu.cmu.lti.nlp.amr.Entity;@7e75bf2d))
AMR:
(a / authority, mod, c / country)
(a2 / action, mod, l / legal)
(a3 / avoid-01, ARG1, a2 / action)
(a3 / avoid-01, prep-under, p / protect-01)
(a4 / and, op, d3 / dereliction)
(a4 / and, op, e2 / embezzle-01)
(a5 / and, op, e / exile-01)
(a6 / accuse-01, ARG1, p2 / person)
(a6 / accuse-01, ARG2, a4 / and)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(d3 / dereliction, mod, d2 / duty)
(e / exile-01, ARG1, p2 / person)
(e / exile-01, location, c2 / country)
(e2 / embezzle-01, ARG1, a / authority)
(i / impose-01, ARG1, e / exile-01)
(i / impose-01, mod, s2 / self)
(n / nationality, mod, d / dual)
(n2 / name, op, "Peru")
(n3 / name, op, "Japan")
(n4 / name, op, "Fujimori")
(p / protect-01, ARG1, n / nationality)
(p2 / person, name, n4 / name)
(r / resign-01, ARG0, p2 / person)
(r / resign-01, ARG1, a2 / action)
(s / since, op, r / resign-01)

Decoded in 1,029,911 microseconds
Sentence: Montesinos fled Peru in October 2000 but was captured in Venezuela on 23 June 2001.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (country :name (name :op "Peru"))
NER Entity: (country :name (name :op "Venezuela"))
mkDayMonthYear(23	June	2001,23,June,2001)
NER Entity: (country :name (name :op "Venezuela"))
NER Entity: (country :name (name :op "Peru"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 12-15:  23 June 2001 => (date-entity :day 23 :month 6 :year 2001)
Span 6-7:  but => contrast-01
Span 8-9:  captured => capture-01
Span 1-2:  fled => flee-01
Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Span 4-6:  October 2000 => (date-entity :month 10 :year 2000)
Span 2-3:  Peru => (country :name (name :op "Peru"))
Span 10-11:  Venezuela => (country :name (name :op "Venezuela"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,15,List(3, 2, 1, 0),23 June 2001,(date-entity :day 23 :month 6 :year 2001),false), Span(10,11,List(6, 5, 4),Venezuela,(country :name (name :op "Venezuela")),false), Span(8,9,List(7),captured,capture-01,false), Span(6,7,List(8),but,contrast-01,false), Span(4,6,List(11, 10, 9),October 2000,(date-entity :month 10 :year 2000),false), Span(2,3,List(14, 13, 12),Peru,(country :name (name :op "Peru")),false), Span(1,2,List(15),fled,flee-01,false), Span(0,1,List(18, 17, 16),Montesinos,(person :name (name :op "Montesinos")),false)),Map(2 -> 6, 5 -> name, 12 -> country, 15 -> flee-01, 8 -> contrast-01, 18 -> "Montesinos", 7 -> capture-01, 17 -> name, 1 -> 23, 4 -> country, 11 -> 2000, 14 -> "Peru", 6 -> "Venezuela", 0 -> date-entity, 9 -> date-entity, 16 -> person, 3 -> 2001, 10 -> 10, 13 -> name),Map(n -> name, 2 -> 23, c4 -> country, d -> date-entity, 1 -> 10, p -> person, 23 -> 2000, n3 -> name, c3 -> contrast-01, d2 -> date-entity, 6 -> 6, c -> country, f -> flee-01, 22 -> 2001, c2 -> capture-01, n2 -> name))),[Ljava.lang.String;@385ef531,Annotation([Ljava.lang.String;@7fc645e4,[Ljava.lang.String;@205b132e,[Ljava.lang.String;@73044cdf),Annotation([Ljava.lang.String;@3cbcd8f3,[Ljava.lang.String;@719843e5,[Ledu.cmu.lti.nlp.amr.Dependency;@9a2ec9b),Annotation([Ljava.lang.String;@58112bc4,[Ljava.lang.String;@2301b75,[Ljava.lang.String;@3104f7bd),Annotation([Ljava.lang.String;@2f5c1332,[Ljava.lang.String;@7ec25216,[Ledu.cmu.lti.nlp.amr.Entity;@7cab1508))
AMR:
(c / country, name, n / name)
(c2 / capture-01, ARG1, p / person)
(c2 / capture-01, location, c / country)
(c2 / capture-01, time, d / date-entity)
(c3 / contrast-01, ARG1, f / flee-01)
(c3 / contrast-01, ARG2, c2 / capture-01)
(c4 / country, name, n2 / name)
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 22 / 2001)
(d2 / date-entity, month, 1 / 10)
(d2 / date-entity, year, 23 / 2000)
(f / flee-01, ARG0, p / person)
(f / flee-01, ARG1, c4 / country)
(f / flee-01, time, d2 / date-entity)
(n / name, op, "Venezuela")
(n2 / name, op, "Peru")
(n3 / name, op, "Montesinos")
(p / person, name, n3 / name)

Decoded in 249,455 microseconds
Sentence: Montesinos heard the sentence at the Callao Naval Base where Montesinos has been imprisoned since 2001.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (organization :name (name :op "Callao" :op "Naval" :op "Base"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 15-16:  2001 => (date-entity :year 2001)
Span 6-9:  Callao Naval Base => (port :name (name :op "Base" :op "Naval" :op "Callao"))
Span 1-2:  heard => hear-01
Span 13-14:  imprisoned => imprison-01
Span 10-11:  Montesinos => (person :name (name :op "Montesinos"))
Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Span 3-4:  sentence => sentence-01
Span 14-15:  since => since

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(1, 0),2001,(date-entity :year 2001),false), Span(14,15,List(2),since,since,false), Span(13,14,List(3),imprisoned,imprison-01,false), Span(10,11,List(6, 5, 4),Montesinos,(person :name (name :op "Montesinos")),false), Span(6,9,List(11, 10, 9, 8, 7),Callao Naval Base,(port :name (name :op "Base" :op "Naval" :op "Callao")),false), Span(3,4,List(12),sentence,sentence-01,false), Span(1,2,List(13),heard,hear-01,false), Span(0,1,List(16, 15, 14),Montesinos,(person :name (name :op "Montesinos")),false)),Map(2 -> since, 5 -> name, 12 -> sentence-01, 15 -> name, 8 -> name, 7 -> port, 1 -> 2001, 4 -> person, 11 -> "Callao", 14 -> person, 6 -> "Montesinos", 0 -> date-entity, 9 -> "Base", 16 -> "Montesinos", 3 -> imprison-01, 10 -> "Naval", 13 -> hear-01),Map(n -> name, h -> hear-01, 2 -> 2001, s2 -> sentence-01, p2 -> port, s -> since, d -> date-entity, p -> person, n3 -> name, i -> imprison-01, p3 -> person, n2 -> name))),[Ljava.lang.String;@6a84bc3f,Annotation([Ljava.lang.String;@258ee7de,[Ljava.lang.String;@4930539b,[Ljava.lang.String;@6d171ce0),Annotation([Ljava.lang.String;@22bd2039,[Ljava.lang.String;@705f83a7,[Ledu.cmu.lti.nlp.amr.Dependency;@3bb8aabc),Annotation([Ljava.lang.String;@6e1d4137,[Ljava.lang.String;@256a1825,[Ljava.lang.String;@29a4f594),Annotation([Ljava.lang.String;@57b75756,[Ljava.lang.String;@5327a06e,[Ledu.cmu.lti.nlp.amr.Entity;@2679311f))
AMR:
(d / date-entity, year, 2 / 2001)
(h / hear-01, ARG0, p3 / person)
(h / hear-01, ARG1, s2 / sentence-01)
(h / hear-01, location, p2 / port)
(i / imprison-01, ARG1, p / person)
(i / imprison-01, location, p2 / port)
(i / imprison-01, time, s / since)
(n / name, op, "Montesinos")
(n2 / name, op, "Base")
(n2 / name, op, "Callao")
(n2 / name, op, "Naval")
(n3 / name, op, "Montesinos")
(p / person, name, n / name)
(p2 / port, name, n2 / name)
(p3 / person, name, n3 / name)
(s / since, op, d / date-entity)

Decoded in 671,186 microseconds
Sentence: Montesinos stated Montesinos would consult with a defense lawyer to appeal.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 10-11:  appeal => appeal-01
Span 4-5:  consult => consult-01
Span 7-8:  defense => defense
Span 8-9:  lawyer => lawyer
Span 2-3:  Montesinos => (person :name (name :op "Montesinos"))
Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Span 1-2:  stated => state-01

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),appeal,appeal-01,false), Span(8,9,List(1),lawyer,lawyer,false), Span(7,8,List(2),defense,defense,false), Span(4,5,List(3),consult,consult-01,false), Span(2,3,List(6, 5, 4),Montesinos,(person :name (name :op "Montesinos")),false), Span(1,2,List(7),stated,state-01,false), Span(0,1,List(10, 9, 8),Montesinos,(person :name (name :op "Montesinos")),false)),Map(2 -> defense, 5 -> name, 8 -> person, 7 -> state-01, 1 -> lawyer, 4 -> person, 6 -> "Montesinos", 9 -> name, 0 -> appeal-01, 10 -> "Montesinos", 3 -> consult-01),Map(n -> name, p2 -> person, s -> state-01, d -> defense, p -> person, a -> appeal-01, c -> consult-01, l -> lawyer, n2 -> name))),[Ljava.lang.String;@287f7811,Annotation([Ljava.lang.String;@451f87af,[Ljava.lang.String;@2b556bb2,[Ljava.lang.String;@44cb460e),Annotation([Ljava.lang.String;@17271176,[Ljava.lang.String;@2e3cdec2,[Ledu.cmu.lti.nlp.amr.Dependency;@2e34384c),Annotation([Ljava.lang.String;@3051e0b2,[Ljava.lang.String;@1f52eb6f,[Ljava.lang.String;@57d0fc89),Annotation([Ljava.lang.String;@58294867,[Ljava.lang.String;@67c277a0,[Ledu.cmu.lti.nlp.amr.Entity;@6fc3e1a4))
AMR:
(a / appeal-01, ARG0, p2 / person)
(c / consult-01, ARG0, p / person)
(c / consult-01, ARG1, l / lawyer)
(c / consult-01, ARG2, a / appeal-01)
(l / lawyer, mod, d / defense)
(n / name, op, "Montesinos")
(n2 / name, op, "Montesinos")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, c / consult-01)

Decoded in 188,759 microseconds
Sentence: 2002-07-25

mkDayMonthYear(2002-07-25,25,07,2002)
mkDayMonthYear(2002-07-25,25,07,2002)
Spans:
Span 0-1:  2002-07-25 => (date-entity :day 25 :month 7 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-07-25,(date-entity :day 25 :month 7 :year 2002),false)),Map(2 -> 7, 1 -> 25, 0 -> date-entity, 3 -> 2002),Map(2 -> 25, 7 -> 7, d -> date-entity, 22 -> 2002))),[Ljava.lang.String;@3fa76c61,Annotation([Ljava.lang.String;@2d5f7182,[Ljava.lang.String;@59546cfe,[Ljava.lang.String;@29ea78b1),Annotation([Ljava.lang.String;@2d2acd89,[Ljava.lang.String;@7baf6acf,[Ledu.cmu.lti.nlp.amr.Dependency;@1e6dad8),Annotation([Ljava.lang.String;@7b3315a5,[Ljava.lang.String;@8ed9cf,[Ljava.lang.String;@f72203),Annotation([Ljava.lang.String;@377008df,[Ljava.lang.String;@540dbda9,[Ledu.cmu.lti.nlp.amr.Entity;@22bb5646))
AMR:
(d / date-entity, day, 2 / 25)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2002)

Decoded in 6,996 microseconds
Sentence: Hong Kong (HK)

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "HK"))
Spans:
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,2,List(3, 2, 1, 0),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> "Kong", 1 -> name, 0 -> city, 3 -> "Hong"),Map(n -> name, c -> city))),[Ljava.lang.String;@1be59f28,Annotation([Ljava.lang.String;@2ce45a7b,[Ljava.lang.String;@153d4abb,[Ljava.lang.String;@6d4c273c),Annotation([Ljava.lang.String;@5a67e962,[Ljava.lang.String;@545e57d7,[Ledu.cmu.lti.nlp.amr.Dependency;@2bc9a775),Annotation([Ljava.lang.String;@27b000f7,[Ljava.lang.String;@42f9c19a,[Ljava.lang.String;@64bfd6fd),Annotation([Ljava.lang.String;@2ab2710,[Ljava.lang.String;@253b380a,[Ledu.cmu.lti.nlp.amr.Entity;@29c2c826))
AMR:
(c / city, name, n / name)
(n / name, op, "Hong")
(n / name, op, "Kong")

Decoded in 5,340 microseconds
Sentence: International; Government; crime; weapons; narcotics

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  crime => crime
Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 8-9:  narcotics => narcotic
Span 6-7:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),narcotics,narcotic,false), Span(7,8,List(1),;,and,false), Span(6,7,List(2),weapons,weapon,false), Span(5,6,List(3),;,and,false), Span(4,5,List(4),crime,crime,false), Span(3,4,List(5),;,and,false), Span(2,3,List(7, 6),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(8),;,and,false), Span(0,1,List(9),International,international,false)),Map(2 -> weapon, 5 -> and, 8 -> and, 7 -> govern-01, 1 -> and, 4 -> crime, 6 -> government-organization, 9 -> international, 0 -> narcotic, 3 -> and),Map(w -> weapon, n -> narcotic, a3 -> and, g2 -> govern-01, g -> government-organization, a -> and, i -> international, a2 -> and, c -> crime, a4 -> and))),[Ljava.lang.String;@3350ebdd,Annotation([Ljava.lang.String;@6818d900,[Ljava.lang.String;@149f5761,[Ljava.lang.String;@2ba33e2c),Annotation([Ljava.lang.String;@1f193686,[Ljava.lang.String;@31e72cbc,[Ledu.cmu.lti.nlp.amr.Dependency;@5fad41be),Annotation([Ljava.lang.String;@6dcd5639,[Ljava.lang.String;@3b36e000,[Ljava.lang.String;@333cb916),Annotation([Ljava.lang.String;@629ae7e,[Ljava.lang.String;@1d25c1c,[Ledu.cmu.lti.nlp.amr.Entity;@de88ac6))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, w / weapon)
(a4 / and, op, a / and)
(a4 / and, op, a3 / and)
(a4 / and, op, c / crime)
(a4 / and, op, g / government-organization)
(a4 / and, op, i / international)
(a4 / and, op, n / narcotic)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 43,314 microseconds
Sentence: Hong Kong police making efforts to prevent triads or transnational criminal syndicates to engage in criminal activities

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 16-17:  activities => activity
Span 15-16:  criminal => crime
Span 10-11:  criminal => crime
Span 4-5:  efforts => effort
Span 13-14:  engage => engage-01
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 3-4:  making => make-01
Span 8-9:  or => or
Span 2-3:  police => police
Span 6-7:  prevent => prevent-01
Span 11-12:  syndicates => syndicate
Span 9-10:  transnational => transnational
Span 7-8:  triads => (criminal-organization :name (name :op "Triad"))

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),activities,activity,false), Span(15,16,List(1),criminal,crime,false), Span(13,14,List(2),engage,engage-01,false), Span(11,12,List(3),syndicates,syndicate,false), Span(10,11,List(4),criminal,crime,false), Span(9,10,List(5),transnational,transnational,false), Span(8,9,List(6),or,or,false), Span(7,8,List(9, 8, 7),triads,(criminal-organization :name (name :op "Triad")),false), Span(6,7,List(10),prevent,prevent-01,false), Span(4,5,List(11),efforts,effort,false), Span(3,4,List(12),making,make-01,false), Span(2,3,List(13),police,police,false), Span(0,2,List(17, 16, 15, 14),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> engage-01, 5 -> transnational, 12 -> make-01, 15 -> name, 8 -> name, 7 -> criminal-organization, 17 -> "Hong", 1 -> crime, 4 -> crime, 11 -> effort, 14 -> city, 6 -> or, 0 -> activity, 9 -> "Triad", 16 -> "Kong", 3 -> syndicate, 10 -> prevent-01, 13 -> police),Map(e -> engage-01, n -> name, t -> transnational, e2 -> effort, p2 -> police, c4 -> city, s -> syndicate, m -> make-01, p -> prevent-01, a -> activity, c3 -> criminal-organization, c -> crime, o -> or, n2 -> name, c2 -> crime))),[Ljava.lang.String;@5bca7664,Annotation([Ljava.lang.String;@105b693d,[Ljava.lang.String;@3fae596,[Ljava.lang.String;@4a0df195),Annotation([Ljava.lang.String;@42fcc7e6,[Ljava.lang.String;@9255c05,[Ledu.cmu.lti.nlp.amr.Dependency;@5da7cee2),Annotation([Ljava.lang.String;@78830d9a,[Ljava.lang.String;@5ce4369b,[Ljava.lang.String;@7f829c76),Annotation([Ljava.lang.String;@1cb19dba,[Ljava.lang.String;@7c3ebc6b,[Ledu.cmu.lti.nlp.amr.Entity;@1931d99))
AMR:
(a / activity, mod, c2 / crime)
(c3 / criminal-organization, name, n / name)
(c4 / city, name, n2 / name)
(e / engage-01, ARG0, o / or)
(e / engage-01, ARG2, a / activity)
(e2 / effort, poss, p2 / police)
(m / make-01, ARG1, p2 / police)
(n / name, op, "Triad")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(o / or, op, c3 / criminal-organization)
(o / or, op, s / syndicate)
(p / prevent-01, ARG0, e2 / effort)
(p / prevent-01, ARG1, e / engage-01)
(p2 / police, mod, c4 / city)
(s / syndicate, mod, c / crime)
(s / syndicate, mod, t / transnational)

Decoded in 788,851 microseconds
Sentence: Recently, the Hong Kong police have smashed a transnational theft syndicate, a cross-boundary criminal syndicate and a local triad gang specializing in exploiting youngsters to commit various crimes.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 19-20:  and => and
Span 16-17:  boundary => boundary
Span 29-30:  commit => commit-02
Span 31-32:  crimes => crime
Span 17-18:  criminal => crime
Span 14-15:  cross => cross-02
Span 26-27:  exploiting => exploit-01
Span 23-24:  gang => gang
Span 3-5:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 21-22:  local => local
Span 5-6:  police => police
Span 0-1:  Recently => recent
Span 7-8:  smashed => smash-01
Span 24-25:  specializing => specialize-01
Span 18-19:  syndicate => syndicate
Span 11-12:  syndicate => syndicate
Span 9-10:  transnational => transnational
Span 22-23:  triad => (criminal-organization :name (name :op "Triad"))
Span 30-31:  various => various
Span 27-28:  youngsters => youngster

Langrangian relaxation converged after 70 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),crimes,crime,false), Span(30,31,List(1),various,various,false), Span(29,30,List(2),commit,commit-02,false), Span(27,28,List(3),youngsters,youngster,false), Span(26,27,List(4),exploiting,exploit-01,false), Span(24,25,List(5),specializing,specialize-01,false), Span(23,24,List(6),gang,gang,false), Span(22,23,List(9, 8, 7),triad,(criminal-organization :name (name :op "Triad")),false), Span(21,22,List(10),local,local,false), Span(19,20,List(11),and,and,false), Span(18,19,List(12),syndicate,syndicate,false), Span(17,18,List(13),criminal,crime,false), Span(16,17,List(14),boundary,boundary,false), Span(14,15,List(15),cross,cross-02,false), Span(11,12,List(16),syndicate,syndicate,false), Span(9,10,List(17),transnational,transnational,false), Span(7,8,List(18),smashed,smash-01,false), Span(5,6,List(19),police,police,false), Span(3,5,List(23, 22, 21, 20),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(0,1,List(24),Recently,recent,false)),Map(2 -> commit-02, 5 -> specialize-01, 12 -> syndicate, 8 -> name, 15 -> cross-02, 21 -> name, 18 -> smash-01, 24 -> recent, 7 -> criminal-organization, 1 -> various, 17 -> transnational, 23 -> "Hong", 4 -> exploit-01, 11 -> and, 14 -> boundary, 20 -> city, 6 -> gang, 9 -> "Triad", 0 -> crime, 22 -> "Kong", 16 -> syndicate, 19 -> police, 10 -> local, 3 -> youngster, 13 -> crime),Map(e -> exploit-01, n -> name, s2 -> syndicate, t -> transnational, b -> boundary, c4 -> crime, s -> specialize-01, s4 -> smash-01, v -> various, p -> police, y -> youngster, g -> gang, c3 -> criminal-organization, a -> and, c6 -> city, r -> recent, s3 -> syndicate, c -> crime, l -> local, n2 -> name, c2 -> commit-02, c5 -> cross-02))),[Ljava.lang.String;@6a9950f1,Annotation([Ljava.lang.String;@7ad54c55,[Ljava.lang.String;@73017a80,[Ljava.lang.String;@6ae7deac),Annotation([Ljava.lang.String;@4a5905d9,[Ljava.lang.String;@1a3e5f23,[Ledu.cmu.lti.nlp.amr.Dependency;@6293e39e),Annotation([Ljava.lang.String;@365553de,[Ljava.lang.String;@34a0ef00,[Ljava.lang.String;@5c0f79f0),Annotation([Ljava.lang.String;@21fdfefc,[Ljava.lang.String;@3daa82be,[Ledu.cmu.lti.nlp.amr.Entity;@ec1b2e4))
AMR:
(a / and, op, g / gang)
(a / and, op, s3 / syndicate)
(c / crime, quant, v / various)
(c2 / commit-02, ARG1, c / crime)
(c3 / criminal-organization, name, n / name)
(c4 / crime, name, c3 / criminal-organization)
(c5 / cross-02, ARG0, s3 / syndicate)
(c5 / cross-02, ARG1, b / boundary)
(c6 / city, name, n2 / name)
(e / exploit-01, ARG1, y / youngster)
(g / gang, mod, l / local)
(g / gang, poss, c4 / crime)
(n / name, op, "Triad")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p / police, mod, c6 / city)
(s / specialize-01, ARG0, s2 / syndicate)
(s / specialize-01, ARG1, e / exploit-01)
(s / specialize-01, ARG6, s3 / syndicate)
(s3 / syndicate, mod, c / crime)
(s3 / syndicate, mod, t / transnational)
(s4 / smash-01, ARG0, p / police)
(s4 / smash-01, ARG1, a / and)
(s4 / smash-01, time, r / recent)

Decoded in 2,378,711 microseconds
Sentence: The Oriental Daily News opined that the recent Hong Kong police efforts to cut down 5 of the so-called Triad branch leaders or district team leaders within a short 3-week period demonstrates the police's determination to eradicate criminal activities.

NER Entity: (organization :name (name :op "Oriental" :op "Daily" :op "News"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Triad"))
Spans:
Span 31-32:  3 => 3
Span 15-16:  5 => 5
Span 43-44:  activities => activity
Span 22-23:  branch => branch
Span 42-43:  criminal => crime
Span 13-14:  cut => cut-02
Span 35-36:  demonstrates => demonstrate-01
Span 39-40:  determination => determine-01
Span 25-26:  district => district
Span 14-15:  down => down
Span 11-12:  efforts => effort
Span 41-42:  eradicate => eradicate-01
Span 8-10:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 27-28:  leaders => (person :ARG0-of lead-02)
Span 23-24:  leaders => (person :ARG0-of lead-02)
Span 4-5:  opined => opine-01
Span 24-25:  or => or
Span 1-4:  Oriental Daily News => (newspaper :name (name :op "News" :op "Daily" :op "Oriental"))
Span 34-35:  period => period
Span 37-38:  police => police
Span 10-11:  police => police
Span 7-8:  recent => recent
Span 30-31:  short => short
Span 18-19:  so => so
Span 26-27:  team => team
Span 21-22:  Triad => (criminal-organization :name (name :op "Triad"))
Span 33-34:  week => week
Span 28-29:  within => within

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(0),activities,activity,false), Span(42,43,List(1),criminal,crime,false), Span(41,42,List(2),eradicate,eradicate-01,false), Span(39,40,List(3),determination,determine-01,false), Span(37,38,List(4),police,police,false), Span(35,36,List(5),demonstrates,demonstrate-01,false), Span(34,35,List(6),period,period,false), Span(33,34,List(7),week,week,false), Span(31,32,List(8),3,3,false), Span(30,31,List(9),short,short,false), Span(28,29,List(10),within,within,false), Span(27,28,List(12, 11),leaders,(person :ARG0-of lead-02),false), Span(26,27,List(13),team,team,false), Span(25,26,List(14),district,district,false), Span(24,25,List(15),or,or,false), Span(23,24,List(17, 16),leaders,(person :ARG0-of lead-02),false), Span(22,23,List(18),branch,branch,false), Span(21,22,List(21, 20, 19),Triad,(criminal-organization :name (name :op "Triad")),false), Span(18,19,List(22),so,so,false), Span(15,16,List(23),5,5,false), Span(14,15,List(24),down,down,false), Span(13,14,List(25),cut,cut-02,false), Span(11,12,List(26),efforts,effort,false), Span(10,11,List(27),police,police,false), Span(8,10,List(31, 30, 29, 28),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(7,8,List(32),recent,recent,false), Span(4,5,List(33),opined,opine-01,false), Span(1,4,List(38, 37, 36, 35, 34),Oriental Daily News,(newspaper :name (name :op "News" :op "Daily" :op "Oriental")),false)),Map(30 -> "Kong", 2 -> eradicate-01, 5 -> demonstrate-01, 33 -> opine-01, 27 -> police, 12 -> lead-02, 8 -> 3, 15 -> or, 36 -> "News", 21 -> "Triad", 18 -> branch, 24 -> down, 35 -> name, 7 -> week, 1 -> crime, 17 -> lead-02, 23 -> 5, 38 -> "Oriental", 26 -> effort, 4 -> police, 11 -> person, 32 -> recent, 14 -> district, 29 -> name, 20 -> name, 34 -> newspaper, 28 -> city, 6 -> period, 9 -> short, 0 -> activity, 22 -> so, 16 -> person, 37 -> "Daily", 19 -> criminal-organization, 10 -> within, 3 -> determine-01, 31 -> "Hong", 25 -> cut-02, 13 -> team),Map(e -> eradicate-01, w -> week, n -> name, 5 -> 5, p5 -> police, s2 -> so, t -> team, b -> branch, d3 -> district, e2 -> effort, p2 -> period, n4 -> name, c4 -> city, s -> short, d -> determine-01, p -> police, n3 -> newspaper, a -> activity, c3 -> cut-02, p4 -> person, o2 -> opine-01, d2 -> demonstrate-01, w2 -> within, l2 -> lead-02, r -> recent, c -> crime, l -> lead-02, d4 -> down, o -> or, p3 -> person, 3 -> 3, n2 -> name, c2 -> criminal-organization))),[Ljava.lang.String;@29a69a35,Annotation([Ljava.lang.String;@67e28be3,[Ljava.lang.String;@e344ad3,[Ljava.lang.String;@de18f63),Annotation([Ljava.lang.String;@108bdbd8,[Ljava.lang.String;@6345e7b9,[Ledu.cmu.lti.nlp.amr.Dependency;@4f8b4bd0),Annotation([Ljava.lang.String;@4e904fd5,[Ljava.lang.String;@b18c4,[Ljava.lang.String;@4cbf4f53),Annotation([Ljava.lang.String;@597f48df,[Ljava.lang.String;@15dd5ac2,[Ledu.cmu.lti.nlp.amr.Entity;@4d48bd85))
AMR:
(a / activity, mod, c / crime)
(b / branch, poss, c2 / criminal-organization)
(c2 / criminal-organization, name, n / name)
(c3 / cut-02, ARG1, p4 / person)
(c3 / cut-02, ARG6, d4 / down)
(c3 / cut-02, time, w2 / within)
(c4 / city, name, n2 / name)
(d / determine-01, ARG0, p / police)
(d / determine-01, ARG1, e / eradicate-01)
(d2 / demonstrate-01, ARG0, e2 / effort)
(d2 / demonstrate-01, ARG1, d / determine-01)
(d4 / down, op, 5 / 5)
(e / eradicate-01, ARG0, p5 / police)
(e / eradicate-01, ARG1, a / activity)
(e2 / effort, purpose, c3 / cut-02)
(e2 / effort, time, r / recent)
(l / lead-02, ARG0, p3 / person)
(l / lead-02, ARG1, b / branch)
(l2 / lead-02, ARG0, p4 / person)
(l2 / lead-02, ARG1, t / team)
(n / name, op, "Triad")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / newspaper, name, n4 / name)
(n4 / name, op, "Daily")
(n4 / name, op, "News")
(n4 / name, op, "Oriental")
(o / or, op, p3 / person)
(o / or, op, p4 / person)
(o / or, op, s2 / so)
(o2 / opine-01, ARG0, n3 / newspaper)
(o2 / opine-01, ARG1, d2 / demonstrate-01)
(p2 / period, mod, s / short)
(p2 / period, mod, w / week)
(p5 / police, mod, c4 / city)
(t / team, mod, d3 / district)
(w / week, quant, 3 / 3)
(w2 / within, op, p2 / period)

Decoded in 3,286,839 microseconds
Sentence: The Hong Kong police recently has been working closely with the Guangdong Public Security Bureau for exchange of intelligence and has carried out a series of raids and operations.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Guangdong" :op "Public" :op "Security" :op "Bureau"))
Spans:
Span 27-28:  and => and
Span 19-20:  and => and
Span 21-22:  carried => carry-03
Span 8-9:  closely => close
Span 16-17:  exchange => exchange-01
Span 11-15:  Guangdong Public Security Bureau => (organization :name (name :op "Guangdong" :op "Public" :op "Security" :op "Bureau"))
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 18-19:  intelligence => intelligence
Span 28-29:  operations => operation
Span 22-23:  out => out
Span 3-4:  police => police
Span 26-27:  raids => raid-01
Span 4-5:  recently => recent
Span 24-25:  series => series
Span 7-8:  working => work-01

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),operations,operation,false), Span(27,28,List(1),and,and,false), Span(26,27,List(2),raids,raid-01,false), Span(24,25,List(3),series,series,false), Span(22,23,List(4),out,out,false), Span(21,22,List(5),carried,carry-03,false), Span(19,20,List(6),and,and,false), Span(18,19,List(7),intelligence,intelligence,false), Span(16,17,List(8),exchange,exchange-01,false), Span(11,15,List(14, 13, 12, 11, 10, 9),Guangdong Public Security Bureau,(organization :name (name :op "Guangdong" :op "Public" :op "Security" :op "Bureau")),false), Span(8,9,List(15),closely,close,false), Span(7,8,List(16),working,work-01,false), Span(4,5,List(17),recently,recent,false), Span(3,4,List(18),police,police,false), Span(1,3,List(22, 21, 20, 19),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> raid-01, 5 -> carry-03, 12 -> "Public", 15 -> close, 8 -> exchange-01, 21 -> "Kong", 18 -> police, 7 -> intelligence, 17 -> recent, 1 -> and, 4 -> out, 11 -> "Guangdong", 14 -> "Bureau", 20 -> name, 6 -> and, 22 -> "Hong", 0 -> operation, 9 -> organization, 16 -> work-01, 19 -> city, 3 -> series, 10 -> name, 13 -> "Security"),Map(e -> exchange-01, n -> name, w -> work-01, o3 -> organization, s -> series, p -> police, r2 -> recent, c3 -> city, a -> and, o2 -> out, r -> raid-01, a2 -> and, i -> intelligence, c -> carry-03, o -> operation, n2 -> name, c2 -> close))),[Ljava.lang.String;@7bbbb6a8,Annotation([Ljava.lang.String;@58a120b0,[Ljava.lang.String;@27d57a2c,[Ljava.lang.String;@2ff95fc6),Annotation([Ljava.lang.String;@9d1a267,[Ljava.lang.String;@58a4a74d,[Ledu.cmu.lti.nlp.amr.Dependency;@54aca26f),Annotation([Ljava.lang.String;@314ed053,[Ljava.lang.String;@35088e87,[Ljava.lang.String;@486bc9a4),Annotation([Ljava.lang.String;@7965a51c,[Ljava.lang.String;@3eee3e2b,[Ledu.cmu.lti.nlp.amr.Entity;@4f63e3c7))
AMR:
(a / and, op, o / operation)
(a2 / and, op, c / carry-03)
(c / carry-03, ARG0, p / police)
(c / carry-03, ARG1, o2 / out)
(c3 / city, name, n2 / name)
(e / exchange-01, ARG1, i / intelligence)
(n / name, op, "Bureau")
(n / name, op, "Guangdong")
(n / name, op, "Public")
(n / name, op, "Security")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(o2 / out, op, e / exchange-01)
(o2 / out, op, s / series)
(o3 / organization, name, n / name)
(p / police, mod, c3 / city)
(r / raid-01, ARG1, s / series)
(s / series, part, o / operation)
(w / work-01, ARG0, p / police)
(w / work-01, ARG3, o3 / organization)
(w / work-01, manner, c2 / close)
(w / work-01, time, r2 / recent)

Decoded in 395,361 microseconds
Sentence: During 020718-020724 the Hong Kong police cracked down on triad activities, including drug trafficking, illegal arms possession, theft, burglary and robbery, the selling of pirated and obscene recordings, dutiable cigarettes and trafficking in dangerous drugs.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 10-11:  activities => activity
Span 36-37:  and => and
Span 30-31:  and => and
Span 23-24:  and => and
Span 17-18:  arms => arm
Span 22-23:  burglary => burgle-01
Span 35-36:  cigarettes => cigarette
Span 6-7:  cracked => crack-06
Span 39-40:  dangerous => dangerous
Span 7-8:  down => down
Span 13-14:  drug => drug
Span 40-41:  drugs => drug
Span 3-5:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 16-17:  illegal => (law :polarity -)
Span 12-13:  including => include-91
Span 31-32:  obscene => obscene
Span 29-30:  pirated => pirate-01
Span 5-6:  police => police
Span 18-19:  possession => possess-01
Span 32-33:  recordings => (thing :ARG1-of record-01)
Span 27-28:  selling => sell-01
Span 37-38:  trafficking => traffic-00
Span 14-15:  trafficking => traffic-00
Span 9-10:  triad => (criminal-organization :name (name :op "Triad"))

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),drugs,drug,false), Span(39,40,List(1),dangerous,dangerous,false), Span(37,38,List(2),trafficking,traffic-00,false), Span(36,37,List(3),and,and,false), Span(35,36,List(4),cigarettes,cigarette,false), Span(32,33,List(6, 5),recordings,(thing :ARG1-of record-01),false), Span(31,32,List(7),obscene,obscene,false), Span(30,31,List(8),and,and,false), Span(29,30,List(9),pirated,pirate-01,false), Span(27,28,List(10),selling,sell-01,false), Span(23,24,List(11),and,and,false), Span(22,23,List(12),burglary,burgle-01,false), Span(18,19,List(13),possession,possess-01,false), Span(17,18,List(14),arms,arm,false), Span(16,17,List(16, 15),illegal,(law :polarity -),false), Span(14,15,List(17),trafficking,traffic-00,false), Span(13,14,List(18),drug,drug,false), Span(12,13,List(19),including,include-91,false), Span(10,11,List(20),activities,activity,false), Span(9,10,List(23, 22, 21),triad,(criminal-organization :name (name :op "Triad")),false), Span(7,8,List(24),down,down,false), Span(6,7,List(25),cracked,crack-06,false), Span(5,6,List(26),police,police,false), Span(3,5,List(30, 29, 28, 27),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(30 -> "Hong", 2 -> traffic-00, 5 -> thing, 27 -> city, 12 -> burgle-01, 8 -> and, 15 -> law, 21 -> criminal-organization, 18 -> drug, 24 -> down, 7 -> obscene, 1 -> dangerous, 17 -> traffic-00, 23 -> "Triad", 26 -> police, 4 -> cigarette, 11 -> and, 14 -> arm, 29 -> "Kong", 20 -> activity, 28 -> name, 6 -> record-01, 9 -> pirate-01, 0 -> drug, 22 -> name, 16 -> -, 19 -> include-91, 10 -> sell-01, 3 -> and, 25 -> crack-06, 13 -> possess-01),Map(n -> name, t -> traffic-00, b -> burgle-01, d3 -> drug, p2 -> possess-01, c4 -> city, a3 -> and, s -> sell-01, d -> drug, t3 -> traffic-00, p -> pirate-01, a -> and, c3 -> crack-06, d2 -> dangerous, a5 -> activity, t2 -> thing, a2 -> and, r -> record-01, i -> include-91, c -> cigarette, l -> law, d4 -> down, o -> obscene, p3 -> police, n2 -> name, c2 -> criminal-organization, a4 -> arm))),[Ljava.lang.String;@59532566,Annotation([Ljava.lang.String;@dca2615,[Ljava.lang.String;@421a4ee1,[Ljava.lang.String;@1237e0be),Annotation([Ljava.lang.String;@528f8f8b,[Ljava.lang.String;@ea9e141,[Ledu.cmu.lti.nlp.amr.Dependency;@1e54cb33),Annotation([Ljava.lang.String;@33cbfa57,[Ljava.lang.String;@1d96d872,[Ljava.lang.String;@5c748168),Annotation([Ljava.lang.String;@6441c486,[Ljava.lang.String;@834831b,[Ledu.cmu.lti.nlp.amr.Entity;@234a8f27))
AMR:
(a / and, op, t2 / thing)
(a2 / and, op, a / and)
(a2 / and, op, c / cigarette)
(a3 / and, op, b / burgle-01)
(a3 / and, op, p2 / possess-01)
(a3 / and, op, s / sell-01)
(a3 / and, op, t / traffic-00)
(a3 / and, op, t3 / traffic-00)
(a4 / arm, mod, l / law)
(a5 / activity, poss, c2 / criminal-organization)
(b / burgle-01, ARG1, d2 / dangerous)
(c2 / criminal-organization, name, n / name)
(c3 / crack-06, ARG0, p3 / police)
(c3 / crack-06, ARG1, a5 / activity)
(c4 / city, name, n2 / name)
(d4 / down, op, a5 / activity)
(i / include-91, ARG1, a3 / and)
(i / include-91, ARG2, a5 / activity)
(l / law, polarity, -)
(n / name, op, "Triad")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p / pirate-01, ARG1, d4 / down)
(p2 / possess-01, ARG1, a4 / arm)
(p3 / police, mod, c4 / city)
(r / record-01, ARG1, t2 / thing)
(r / record-01, mod, o / obscene)
(s / sell-01, ARG1, a2 / and)
(t / traffic-00, ARG1, d / drug)
(t3 / traffic-00, ARG1, d3 / drug)

Decoded in 1,151,246 microseconds
Sentence: On 020724 the police dispatched over 100 staff reportedly stormed a propitiation dance and wine party organized to settle some disputes by 2 triad groups at a disco nightclub in mongkok, Kowloon.

mkDayMonthYear(020724,24,07,2002)
mkDayMonthYear(020724,24,07,02)
NER Entity: (country :name (name :op "Kowloon"))
NER Entity: (country :name (name :op "Kowloon"))
mkDayMonthYear(020724,24,07,2002)
mkDayMonthYear(020724,24,07,02)
Spans:
Span 1-2:  020724 => (date-entity :day 24 :month 7 :year 2002)
Span 6-7:  100 => 100
Span 22-23:  2 => 2
Span 13-14:  and => and
Span 12-13:  dance => dance-01
Span 27-28:  disco => disco
Span 4-5:  dispatched => dispatch-01
Span 20-21:  disputes => dispute-01
Span 24-25:  groups => group
Span 32-33:  Kowloon => (city-district :name (name :op "Kowloon"))
Span 30-31:  mongkok => (city-district :name (name :op "Mongkok"))
Span 28-29:  nightclub => nightclub
Span 16-17:  organized => organize-01
Span 5-6:  over => over
Span 15-16:  party => party
Span 3-4:  police => police
Span 11-12:  propitiation => propitiate-00
Span 8-9:  reportedly => report-01
Span 18-19:  settle => settle-02
Span 19-20:  some => some
Span 7-8:  staff => staff
Span 9-10:  stormed => storm-02
Span 23-24:  triad => (criminal-organization :name (name :op "Triad"))
Span 14-15:  wine => wine

Langrangian relaxation converged after 87 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(2, 1, 0),Kowloon,(city-district :name (name :op "Kowloon")),false), Span(30,31,List(5, 4, 3),mongkok,(city-district :name (name :op "Mongkok")),false), Span(28,29,List(6),nightclub,nightclub,false), Span(27,28,List(7),disco,disco,false), Span(24,25,List(8),groups,group,false), Span(23,24,List(11, 10, 9),triad,(criminal-organization :name (name :op "Triad")),false), Span(22,23,List(12),2,2,false), Span(20,21,List(13),disputes,dispute-01,false), Span(19,20,List(14),some,some,false), Span(18,19,List(15),settle,settle-02,false), Span(16,17,List(16),organized,organize-01,false), Span(15,16,List(17),party,party,false), Span(14,15,List(18),wine,wine,false), Span(13,14,List(19),and,and,false), Span(12,13,List(20),dance,dance-01,false), Span(11,12,List(21),propitiation,propitiate-00,false), Span(9,10,List(22),stormed,storm-02,false), Span(8,9,List(23),reportedly,report-01,false), Span(7,8,List(24),staff,staff,false), Span(6,7,List(25),100,100,false), Span(5,6,List(26),over,over,false), Span(4,5,List(27),dispatched,dispatch-01,false), Span(3,4,List(28),police,police,false), Span(1,2,List(32, 31, 30, 29),020724,(date-entity :day 24 :month 7 :year 2002),false)),Map(30 -> 24, 2 -> "Kowloon", 5 -> "Mongkok", 27 -> dispatch-01, 12 -> 2, 8 -> group, 15 -> settle-02, 21 -> propitiate-00, 18 -> wine, 24 -> staff, 7 -> disco, 1 -> name, 17 -> party, 23 -> report-01, 26 -> over, 4 -> name, 11 -> "Triad", 32 -> 2002, 14 -> some, 29 -> date-entity, 20 -> dance-01, 28 -> police, 6 -> nightclub, 9 -> criminal-organization, 0 -> city-district, 22 -> storm-02, 16 -> organize-01, 19 -> and, 10 -> name, 3 -> city-district, 31 -> 7, 25 -> 100, 13 -> dispute-01),Map(n -> name, w -> wine, 2 -> 2, s2 -> settle-02, d3 -> dance-01, p2 -> propitiate-00, n4 -> name, s -> some, s4 -> staff, d -> disco, 7 -> 7, 1 -> 100, 23 -> 2002, g -> group, p -> party, c3 -> criminal-organization, n3 -> nightclub, a -> and, d2 -> dispute-01, o2 -> over, d5 -> date-entity, r -> report-01, c -> city-district, s3 -> storm-02, d4 -> dispatch-01, 22 -> 24, o -> organize-01, p3 -> police, n2 -> name, c2 -> city-district))),[Ljava.lang.String;@5b4d25e7,Annotation([Ljava.lang.String;@31c2affc,[Ljava.lang.String;@1dc2de84,[Ljava.lang.String;@6a0659ac),Annotation([Ljava.lang.String;@58d63b16,[Ljava.lang.String;@7c4fc2bf,[Ledu.cmu.lti.nlp.amr.Dependency;@7772054c),Annotation([Ljava.lang.String;@2f61f937,[Ljava.lang.String;@46866946,[Ljava.lang.String;@44de0113),Annotation([Ljava.lang.String;@236134a1,[Ljava.lang.String;@369c9bb,[Ledu.cmu.lti.nlp.amr.Entity;@76d05cc9))
AMR:
(a / and, op, p / party)
(c / city-district, name, n / name)
(c2 / city-district, location, c / city-district)
(c2 / city-district, name, n2 / name)
(c3 / criminal-organization, name, n4 / name)
(d2 / dispute-01, ARG1, g / group)
(d2 / dispute-01, quant, s / some)
(d3 / dance-01, ARG1, s4 / staff)
(d4 / dispatch-01, ARG0, p3 / police)
(d4 / dispatch-01, ARG1, s4 / staff)
(d4 / dispatch-01, ARG6, d5 / date-entity)
(d4 / dispatch-01, purpose, s3 / storm-02)
(d5 / date-entity, day, 22 / 24)
(d5 / date-entity, month, 7 / 7)
(d5 / date-entity, year, 23 / 2002)
(g / group, poss, c3 / criminal-organization)
(g / group, quant, 2 / 2)
(n / name, op, "Kowloon")
(n2 / name, op, "Mongkok")
(n3 / nightclub, location, c2 / city-district)
(n3 / nightclub, mod, d / disco)
(n4 / name, op, "Triad")
(o / organize-01, ARG1, a / and)
(o / organize-01, location, n3 / nightclub)
(o / organize-01, purpose, s2 / settle-02)
(o2 / over, op, 1 / 100)
(p / party, mod, w / wine)
(p2 / propitiate-00, ARG1, d3 / dance-01)
(r / report-01, ARG1, d4 / dispatch-01)
(s2 / settle-02, ARG1, d2 / dispute-01)
(s3 / storm-02, ARG0, s4 / staff)
(s3 / storm-02, ARG1, a / and)
(s4 / staff, quant, o2 / over)

Decoded in 5,024,678 microseconds
Sentence: The police eventually arrested 3 branch leaders and 14 core Triad members.

NER Entity: (organization :name (name :op "Triad"))
NER Entity: (organization :name (name :op "Triad"))
Spans:
Span 8-9:  14 => 14
Span 4-5:  3 => 3
Span 7-8:  and => and
Span 3-4:  arrested => arrest-01
Span 5-6:  branch => branch
Span 9-10:  core => core
Span 2-3:  eventually => eventual
Span 6-7:  leaders => (person :ARG0-of lead-02)
Span 11-12:  members => (have-org-role-91 :ARG2 member)
Span 1-2:  police => police
Span 10-11:  Triad => (criminal-organization :name (name :op "Triad"))

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(1, 0),members,(have-org-role-91 :ARG2 member),false), Span(10,11,List(4, 3, 2),Triad,(criminal-organization :name (name :op "Triad")),false), Span(9,10,List(5),core,core,false), Span(8,9,List(6),14,14,false), Span(7,8,List(7),and,and,false), Span(6,7,List(9, 8),leaders,(person :ARG0-of lead-02),false), Span(5,6,List(10),branch,branch,false), Span(4,5,List(11),3,3,false), Span(3,4,List(12),arrested,arrest-01,false), Span(2,3,List(13),eventually,eventual,false), Span(1,2,List(14),police,police,false)),Map(2 -> criminal-organization, 5 -> core, 12 -> arrest-01, 8 -> person, 7 -> and, 1 -> member, 4 -> "Triad", 11 -> 3, 14 -> police, 6 -> 14, 0 -> have-org-role-91, 9 -> lead-02, 3 -> name, 10 -> branch, 13 -> eventual),Map(e -> eventual, n -> name, h -> have-org-role-91, b -> branch, p2 -> police, m -> member, 1 -> 14, p -> person, a -> and, a2 -> arrest-01, c -> criminal-organization, l -> lead-02, 3 -> 3, c2 -> core))),[Ljava.lang.String;@42b21d99,Annotation([Ljava.lang.String;@68dcfd52,[Ljava.lang.String;@25b5c5e3,[Ljava.lang.String;@5177e388),Annotation([Ljava.lang.String;@37b72ea,[Ljava.lang.String;@cc239ba,[Ledu.cmu.lti.nlp.amr.Dependency;@7d37f1c),Annotation([Ljava.lang.String;@69d6a7cd,[Ljava.lang.String;@3162743f,[Ljava.lang.String;@2c708440),Annotation([Ljava.lang.String;@3047254d,[Ljava.lang.String;@6cf31447,[Ledu.cmu.lti.nlp.amr.Entity;@4e92466a))
AMR:
(a / and, op, m / member)
(a / and, op, p / person)
(a2 / arrest-01, ARG0, p2 / police)
(a2 / arrest-01, ARG1, a / and)
(a2 / arrest-01, manner, e / eventual)
(c / criminal-organization, name, n / name)
(h / have-org-role-91, ARG1, c / criminal-organization)
(h / have-org-role-91, ARG2, m / member)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, b / branch)
(l / lead-02, ARG6, 1 / 14)
(m / member, mod, c2 / core)
(n / name, op, "Triad")
(p / person, quant, 3 / 3)

Decoded in 651,028 microseconds
Sentence: Police sources confirmed to the Xinhua New Agency on 020725 that all 17 arrested are still being detailed for questioning.

NER Entity: (organization :name (name :op "Xinhua" :op "New" :op "Agency"))
mkDayMonthYear(020725,25,07,2002)
mkDayMonthYear(020725,25,07,02)
mkDayMonthYear(020725,25,07,2002)
mkDayMonthYear(020725,25,07,02)
Spans:
Span 9-10:  020725 => (date-entity :day 25 :month 7 :year 2002)
Span 12-13:  17 => 17
Span 11-12:  all => all
Span 13-14:  arrested => arrest-01
Span 2-3:  confirmed => confirm-01
Span 17-18:  detailed => detain-01
Span 0-1:  Police => police
Span 19-20:  questioning => question-01
Span 1-2:  sources => source
Span 15-16:  still => still
Span 5-8:  Xinhua New Agency => (organization :name (name :op "Xinhua" :op "New" :op "Agency"))

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),questioning,question-01,false), Span(17,18,List(1),detailed,detain-01,false), Span(15,16,List(2),still,still,false), Span(13,14,List(3),arrested,arrest-01,false), Span(12,13,List(4),17,17,false), Span(11,12,List(5),all,all,false), Span(9,10,List(9, 8, 7, 6),020725,(date-entity :day 25 :month 7 :year 2002),false), Span(5,8,List(14, 13, 12, 11, 10),Xinhua New Agency,(organization :name (name :op "Xinhua" :op "New" :op "Agency")),false), Span(2,3,List(15),confirmed,confirm-01,false), Span(1,2,List(16),sources,source,false), Span(0,1,List(17),Police,police,false)),Map(2 -> still, 5 -> all, 12 -> "Xinhua", 15 -> confirm-01, 8 -> 7, 7 -> 25, 17 -> police, 1 -> detain-01, 4 -> 17, 11 -> name, 14 -> "Agency", 6 -> date-entity, 0 -> question-01, 9 -> 2002, 16 -> source, 3 -> arrest-01, 10 -> organization, 13 -> "New"),Map(n -> name, q -> question-01, 2 -> 25, s2 -> source, s -> still, d -> detain-01, 7 -> 7, 1 -> 17, p -> police, a -> arrest-01, d2 -> date-entity, a2 -> all, c -> confirm-01, 22 -> 2002, o -> organization))),[Ljava.lang.String;@66e8997c,Annotation([Ljava.lang.String;@6f0cb5a1,[Ljava.lang.String;@1b29d52b,[Ljava.lang.String;@47547132),Annotation([Ljava.lang.String;@655523dd,[Ljava.lang.String;@6f7e336b,[Ledu.cmu.lti.nlp.amr.Dependency;@3a2b2322),Annotation([Ljava.lang.String;@5e1218b4,[Ljava.lang.String;@12958360,[Ljava.lang.String;@c6e0f32),Annotation([Ljava.lang.String;@6f3f0fae,[Ljava.lang.String;@21a66d45,[Ledu.cmu.lti.nlp.amr.Entity;@1f966492))
AMR:
(a / arrest-01, ARG1, o / organization)
(a / arrest-01, ARG6, 1 / 17)
(a / arrest-01, mod, a2 / all)
(c / confirm-01, ARG0, s2 / source)
(c / confirm-01, ARG1, d / detain-01)
(c / confirm-01, time, d2 / date-entity)
(d / detain-01, ARG1, a / arrest-01)
(d / detain-01, ARG2, q / question-01)
(d / detain-01, time, s / still)
(d2 / date-entity, day, 2 / 25)
(d2 / date-entity, month, 7 / 7)
(d2 / date-entity, year, 22 / 2002)
(n / name, op, "Agency")
(n / name, op, "New")
(n / name, op, "Xinhua")
(o / organization, name, n / name)
(s2 / source, mod, p / police)

Decoded in 477,847 microseconds
Sentence: Hong Kong police sources were quoted as saying that the success of the operation in netting all 17 was the result of the police's effort to infiltrate into the relevant gangs here.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 17-18:  17 => 17
Span 16-17:  all => all
Span 25-26:  effort => effort
Span 31-32:  gangs => gang
Span 32-33:  here => here
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 27-28:  infiltrate => infiltrate-01
Span 15-16:  netting => net-03
Span 13-14:  operation => operation
Span 23-24:  police => police
Span 2-3:  police => police
Span 5-6:  quoted => quote-01
Span 30-31:  relevant => relevance
Span 20-21:  result => result-01
Span 7-8:  saying => say-01
Span 3-4:  sources => source
Span 10-11:  success => succeed-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),here,here,false), Span(31,32,List(1),gangs,gang,false), Span(30,31,List(2),relevant,relevance,false), Span(27,28,List(3),infiltrate,infiltrate-01,false), Span(25,26,List(4),effort,effort,false), Span(23,24,List(5),police,police,false), Span(20,21,List(6),result,result-01,false), Span(17,18,List(7),17,17,false), Span(16,17,List(8),all,all,false), Span(15,16,List(9),netting,net-03,false), Span(13,14,List(10),operation,operation,false), Span(10,11,List(11),success,succeed-01,false), Span(7,8,List(12),saying,say-01,false), Span(5,6,List(13),quoted,quote-01,false), Span(3,4,List(14),sources,source,false), Span(2,3,List(15),police,police,false), Span(0,2,List(19, 18, 17, 16),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> relevance, 5 -> police, 12 -> say-01, 15 -> police, 8 -> all, 18 -> "Kong", 7 -> 17, 17 -> name, 1 -> gang, 4 -> effort, 11 -> succeed-01, 14 -> source, 6 -> result-01, 0 -> here, 9 -> net-03, 16 -> city, 19 -> "Hong", 3 -> infiltrate-01, 10 -> operation, 13 -> quote-01),Map(e -> effort, n -> net-03, h -> here, q -> quote-01, s2 -> say-01, p2 -> police, s -> succeed-01, 1 -> 17, g -> gang, p -> police, r2 -> result-01, a -> all, r -> relevance, i -> infiltrate-01, c -> city, s3 -> source, o -> operation, n2 -> name))),[Ljava.lang.String;@63fdffcd,Annotation([Ljava.lang.String;@7428de63,[Ljava.lang.String;@66f659e6,[Ljava.lang.String;@4a68135e),Annotation([Ljava.lang.String;@46678e49,[Ljava.lang.String;@748e9b20,[Ledu.cmu.lti.nlp.amr.Dependency;@2063c53e),Annotation([Ljava.lang.String;@2a9bc08f,[Ljava.lang.String;@50f40653,[Ljava.lang.String;@50a3d0f6),Annotation([Ljava.lang.String;@6e57b5e9,[Ljava.lang.String;@1abc9f14,[Ledu.cmu.lti.nlp.amr.Entity;@6a0ac48e))
AMR:
(c / city, name, n2 / name)
(e / effort, poss, p / police)
(e / effort, poss, p2 / police)
(e / effort, purpose, i / infiltrate-01)
(g / gang, location, h / here)
(g / gang, mod, r / relevance)
(i / infiltrate-01, ARG0, a / all)
(i / infiltrate-01, ARG1, g / gang)
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p2 / police, mod, c / city)
(q / quote-01, ARG1, s3 / source)
(q / quote-01, ARG2, s2 / say-01)
(r2 / result-01, ARG1, e / effort)
(r2 / result-01, ARG2, s / succeed-01)
(s / succeed-01, ARG0, o / operation)
(s / succeed-01, ARG1, n / net-03)
(s / succeed-01, time, 1 / 17)
(s2 / say-01, ARG1, s / succeed-01)

Decoded in 1,059,914 microseconds
Sentence: Police sources also intimated that more crackdowns by the Hong Kong Police on other Triad gangs will follow.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Triad"))
NER Entity: (organization :name (name :op "Triad"))
Spans:
Span 2-3:  also => also
Span 6-7:  crackdowns => crack-06
Span 17-18:  follow => follow-03
Span 15-16:  gangs => gang
Span 9-11:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 3-4:  intimated => intimate-01
Span 5-6:  more => more
Span 13-14:  other => other
Span 11-12:  Police => police
Span 0-1:  Police => police
Span 1-2:  sources => source
Span 14-15:  Triad => (criminal-organization :name (name :op "Triad"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),follow,follow-03,false), Span(15,16,List(1),gangs,gang,false), Span(14,15,List(4, 3, 2),Triad,(criminal-organization :name (name :op "Triad")),false), Span(13,14,List(5),other,other,false), Span(11,12,List(6),Police,police,false), Span(9,11,List(10, 9, 8, 7),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(6,7,List(11),crackdowns,crack-06,false), Span(5,6,List(12),more,more,false), Span(3,4,List(13),intimated,intimate-01,false), Span(2,3,List(14),also,also,false), Span(1,2,List(15),sources,source,false), Span(0,1,List(16),Police,police,false)),Map(2 -> criminal-organization, 5 -> other, 12 -> more, 15 -> source, 8 -> name, 7 -> city, 1 -> gang, 4 -> "Triad", 11 -> crack-06, 14 -> also, 6 -> police, 0 -> follow-03, 9 -> "Kong", 16 -> police, 3 -> name, 10 -> "Hong", 13 -> intimate-01),Map(n -> name, p2 -> police, s -> source, m -> more, g -> gang, p -> police, c3 -> crack-06, a -> also, i -> intimate-01, c -> criminal-organization, f -> follow-03, o -> other, c2 -> city, n2 -> name))),[Ljava.lang.String;@24e08d59,Annotation([Ljava.lang.String;@77cb9cd1,[Ljava.lang.String;@971e903,[Ljava.lang.String;@35636217),Annotation([Ljava.lang.String;@1549bba7,[Ljava.lang.String;@3e4f80cb,[Ledu.cmu.lti.nlp.amr.Dependency;@38704ff0),Annotation([Ljava.lang.String;@16ade133,[Ljava.lang.String;@4e61e4c2,[Ljava.lang.String;@c6a6c1d),Annotation([Ljava.lang.String;@36dfbdaf,[Ljava.lang.String;@4f82663e,[Ledu.cmu.lti.nlp.amr.Entity;@e04ccf8))
AMR:
(c / criminal-organization, name, n / name)
(c2 / city, name, n2 / name)
(c3 / crack-06, ARG0, p2 / police)
(c3 / crack-06, ARG1, g / gang)
(c3 / crack-06, degree, m / more)
(f / follow-03, ARG1, c3 / crack-06)
(g / gang, mod, o / other)
(g / gang, poss, c / criminal-organization)
(i / intimate-01, ARG0, s / source)
(i / intimate-01, ARG1, f / follow-03)
(i / intimate-01, mod, a / also)
(n / name, op, "Triad")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p2 / police, mod, c2 / city)
(s / source, mod, p / police)

Decoded in 100,368 microseconds
Sentence: The Hong Kong police's effort in fighting organized criminals involves actively cooperating with police on the Chinese mainland and in other regions.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 11-12:  actively => active
Span 19-20:  and => and
Span 17-18:  Chinese => (country :name (name :op "China"))
Span 12-13:  cooperating => cooperate-01
Span 9-10:  criminals => criminal
Span 5-6:  effort => effort
Span 7-8:  fighting => fight-01
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 10-11:  involves => involve-01
Span 18-19:  mainland => mainland
Span 8-9:  organized => organize-01
Span 21-22:  other => other
Span 14-15:  police => police
Span 3-4:  police => police
Span 22-23:  regions => region

Langrangian relaxation converged after 100 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),regions,region,false), Span(21,22,List(1),other,other,false), Span(19,20,List(2),and,and,false), Span(18,19,List(3),mainland,mainland,false), Span(17,18,List(6, 5, 4),Chinese,(country :name (name :op "China")),false), Span(14,15,List(7),police,police,false), Span(12,13,List(8),cooperating,cooperate-01,false), Span(11,12,List(9),actively,active,false), Span(10,11,List(10),involves,involve-01,false), Span(9,10,List(11),criminals,criminal,false), Span(8,9,List(12),organized,organize-01,false), Span(7,8,List(13),fighting,fight-01,false), Span(5,6,List(14),effort,effort,false), Span(3,4,List(15),police,police,false), Span(1,3,List(19, 18, 17, 16),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> and, 5 -> name, 12 -> organize-01, 15 -> police, 8 -> cooperate-01, 18 -> "Kong", 7 -> police, 17 -> name, 1 -> other, 4 -> country, 11 -> criminal, 14 -> effort, 6 -> "China", 0 -> region, 9 -> active, 16 -> city, 19 -> "Hong", 3 -> mainland, 10 -> involve-01, 13 -> fight-01),Map(e -> effort, n -> name, p2 -> police, c4 -> city, m -> mainland, p -> police, a -> and, c3 -> criminal, o2 -> organize-01, r -> region, a2 -> active, i -> involve-01, c -> country, f -> fight-01, o -> other, n2 -> name, c2 -> cooperate-01))),[Ljava.lang.String;@51d143a1,Annotation([Ljava.lang.String;@1a28aef1,[Ljava.lang.String;@4647881c,[Ljava.lang.String;@6e0cff20),Annotation([Ljava.lang.String;@359b650b,[Ljava.lang.String;@6a9b0a6f,[Ledu.cmu.lti.nlp.amr.Dependency;@10667848),Annotation([Ljava.lang.String;@191a709b,[Ljava.lang.String;@77c7ed8e,[Ljava.lang.String;@453d496b),Annotation([Ljava.lang.String;@66bacdbc,[Ljava.lang.String;@2c6ee758,[Ledu.cmu.lti.nlp.amr.Entity;@640dc4c6))
AMR:
(a / and, op, p / police)
(c / country, name, n / name)
(c2 / cooperate-01, ARG0, p2 / police)
(c2 / cooperate-01, ARG1, a / and)
(c2 / cooperate-01, manner, a2 / active)
(c4 / city, name, n2 / name)
(e / effort, purpose, f / fight-01)
(f / fight-01, ARG1, c3 / criminal)
(i / involve-01, ARG1, c2 / cooperate-01)
(i / involve-01, ARG2, e / effort)
(m / mainland, mod, c / country)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(o2 / organize-01, ARG0, m / mainland)
(o2 / organize-01, ARG1, c3 / criminal)
(p / police, location, r / region)
(p2 / police, mod, c4 / city)
(r / region, mod, o / other)

Decoded in 2,112,040 microseconds
Sentence: The first so-called targeting Conference of the International Drug Enforcement Conference (IDEC) far east region was held in Hong Kong earlier in 020700.

NER Entity: (thing :name (name :op "Conference" :op "of" :op "the"))
NER Entity: (organization :name (name :op "International" :op "Drug" :op "Enforcement" :op "Conference"))
NER Entity: (organization :name (name :op "IDEC"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
mkDayMonthYear(020700,00,07,02)
mkDayMonthYear(020700,00,07,02)
NER Entity: (organization :name (name :op "IDEC"))
Spans:
Span 26-27:  020700 => (date-entity :month 7 :year 2002)
Span 4-7:  called targeting Conference => (thing :name (name :op "Conference" :op "of" :op "the"))
Span 12-13:  Conference => conference
Span 24-25:  earlier => early
Span 16-18:  far east => (name :op "East" :op "Far")
Span 20-22:  held in => (country :name (name :op "Hong" :op "Kong"))
Span 22-24:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 14-15:  IDEC => (conference :name (name :op "IDEC"))
Span 7-11:  of the International Drug => (organization :name (name :op "International" :op "Drug" :op "Enforcement" :op "Conference"))
Span 18-19:  region => region
Span 2-3:  so => so

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(2, 1, 0),020700,(date-entity :month 7 :year 2002),false), Span(24,25,List(3),earlier,early,false), Span(22,24,List(7, 6, 5, 4),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(20,22,List(11, 10, 9, 8),held in,(country :name (name :op "Hong" :op "Kong")),false), Span(18,19,List(12),region,region,false), Span(16,18,List(15, 14, 13),far east,(name :op "East" :op "Far"),false), Span(14,15,List(18, 17, 16),IDEC,(conference :name (name :op "IDEC")),false), Span(12,13,List(19),Conference,conference,false), Span(7,11,List(25, 24, 23, 22, 21, 20),of the International Drug,(organization :name (name :op "International" :op "Drug" :op "Enforcement" :op "Conference")),false), Span(4,7,List(30, 29, 28, 27, 26),called targeting Conference,(thing :name (name :op "Conference" :op "of" :op "the")),false), Span(2,3,List(31),so,so,false)),Map(30 -> "the", 2 -> 2002, 5 -> name, 27 -> name, 12 -> region, 8 -> country, 15 -> "Far", 21 -> name, 18 -> "IDEC", 24 -> "Enforcement", 7 -> "Hong", 1 -> 7, 17 -> name, 23 -> "Drug", 26 -> thing, 4 -> city, 11 -> "Kong", 14 -> "East", 29 -> "of", 20 -> organization, 28 -> "Conference", 6 -> "Kong", 9 -> name, 0 -> date-entity, 22 -> "International", 16 -> conference, 19 -> conference, 10 -> "Hong", 3 -> early, 31 -> so, 25 -> "Conference", 13 -> name),Map(e -> early, n -> name, 2 -> 2002, t -> thing, n4 -> name, c4 -> conference, s -> so, d -> date-entity, 7 -> 7, n3 -> name, c3 -> conference, n6 -> name, r -> region, c -> city, o -> organization, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@4b54af3d,Annotation([Ljava.lang.String;@7bb35cc6,[Ljava.lang.String;@203c20cf,[Ljava.lang.String;@2a1debfa),Annotation([Ljava.lang.String;@44de94c3,[Ljava.lang.String;@256aa5f2,[Ledu.cmu.lti.nlp.amr.Dependency;@6411d3c8),Annotation([Ljava.lang.String;@2116b68b,[Ljava.lang.String;@11de56e6,[Ljava.lang.String;@616b241a),Annotation([Ljava.lang.String;@b8e246c,[Ljava.lang.String;@1f387978,[Ledu.cmu.lti.nlp.amr.Entity;@7cb2651f))
AMR:
(c / city, name, n / name)
(c2 / country, calendar, e / early)
(c2 / country, name, n2 / name)
(c2 / country, op, c / city)
(c2 / country, poss, t / thing)
(c3 / conference, calendar, r / region)
(c3 / conference, name, n4 / name)
(c4 / conference, location, r / region)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2002)
(e / early, op, d / date-entity)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "East")
(n3 / name, op, "Far")
(n4 / name, op, "IDEC")
(n5 / name, op, "Conference")
(n5 / name, op, "Drug")
(n5 / name, op, "Enforcement")
(n5 / name, op, "International")
(n6 / name, op, "Conference")
(n6 / name, op, "of")
(n6 / name, op, "the")
(o / organization, name, n5 / name)
(r / region, name, n3 / name)
(t / thing, calendar, o / organization)
(t / thing, mod, s / so)
(t / thing, name, n6 / name)
(t / thing, poss, c4 / conference)

Decoded in 186,559 microseconds
Sentence: Hong Kong was chosen to host the event following the decision of the IDEC meeting held in Bolivia in 020200.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "IDEC"))
NER Entity: (country :name (name :op "Bolivia"))
mkDayMonthYear(020200,00,02,02)
mkDayMonthYear(020200,00,02,02)
NER Entity: (country :name (name :op "Bolivia"))
NER Entity: (organization :name (name :op "IDEC"))
Spans:
Span 19-20:  020200 => (date-entity :month 2 :year 2002)
Span 17-18:  Bolivia => (country :name (name :op "Bolivia"))
Span 3-4:  chosen => choose-01
Span 10-11:  decision => decide-01
Span 7-8:  event => event
Span 8-9:  following => follow-01
Span 15-16:  held => hold-04
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 5-6:  host => host-01
Span 13-14:  IDEC => (conference :name (name :op "IDEC"))
Span 14-15:  meeting => meet-03

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(2, 1, 0),020200,(date-entity :month 2 :year 2002),false), Span(17,18,List(5, 4, 3),Bolivia,(country :name (name :op "Bolivia")),false), Span(15,16,List(6),held,hold-04,false), Span(14,15,List(7),meeting,meet-03,false), Span(13,14,List(10, 9, 8),IDEC,(conference :name (name :op "IDEC")),false), Span(10,11,List(11),decision,decide-01,false), Span(8,9,List(12),following,follow-01,false), Span(7,8,List(13),event,event,false), Span(5,6,List(14),host,host-01,false), Span(3,4,List(15),chosen,choose-01,false), Span(0,2,List(19, 18, 17, 16),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> 2002, 5 -> "Bolivia", 12 -> follow-01, 15 -> choose-01, 8 -> conference, 18 -> "Kong", 7 -> meet-03, 17 -> name, 1 -> 2, 4 -> name, 11 -> decide-01, 14 -> host-01, 6 -> hold-04, 0 -> date-entity, 9 -> name, 16 -> city, 19 -> "Hong", 3 -> country, 10 -> "IDEC", 13 -> event),Map(e -> event, n -> name, h -> hold-04, 2 -> 2, h2 -> host-01, c4 -> city, d -> date-entity, m -> meet-03, n3 -> name, c3 -> choose-01, d2 -> decide-01, c -> country, 22 -> 2002, f -> follow-01, c2 -> conference, n2 -> name))),[Ljava.lang.String;@4441d567,Annotation([Ljava.lang.String;@3e1624c7,[Ljava.lang.String;@62b969c4,[Ljava.lang.String;@dcc6211),Annotation([Ljava.lang.String;@47ec7422,[Ljava.lang.String;@48535004,[Ledu.cmu.lti.nlp.amr.Dependency;@610df783),Annotation([Ljava.lang.String;@f3fcd59,[Ljava.lang.String;@2b56f5f8,[Ljava.lang.String;@79d743e6),Annotation([Ljava.lang.String;@776802b0,[Ljava.lang.String;@64c4c01,[Ledu.cmu.lti.nlp.amr.Entity;@1aa99005))
AMR:
(c / country, name, n / name)
(c2 / conference, name, n2 / name)
(c3 / choose-01, ARG1, c4 / city)
(c3 / choose-01, ARG4, h2 / host-01)
(c4 / city, name, n3 / name)
(d / date-entity, month, 2 / 2)
(d / date-entity, year, 22 / 2002)
(d2 / decide-01, ARG0, c2 / conference)
(d2 / decide-01, ARG1, m / meet-03)
(f / follow-01, ARG1, c3 / choose-01)
(f / follow-01, ARG2, d2 / decide-01)
(h / hold-04, ARG1, m / meet-03)
(h / hold-04, location, c / country)
(h / hold-04, time, d / date-entity)
(h2 / host-01, ARG0, c4 / city)
(h2 / host-01, ARG1, e / event)
(n / name, op, "Bolivia")
(n2 / name, op, "IDEC")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")

Decoded in 675,512 microseconds
Sentence: Some 42 senior anti-narcotics officers from the Chinese mainland, Hong Kong, Australia, Indonesia, Japan, South Korea, Myanmar, the Philippines, Singapore, Thailand and the United States met.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "Australia"))
NER Entity: (country :name (name :op "Indonesia"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "South" :op "Korea"))
NER Entity: (country :name (name :op "Myanmar"))
NER Entity: (country :name (name :op "Philippines"))
NER Entity: (country :name (name :op "Singapore"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "Singapore"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Indonesia"))
NER Entity: (country :name (name :op "Australia"))
Spans:
Span 1-2:  42 => 42
Span 32-34:  and the => (country :name (name :op "United" :op "States"))
Span 15-16:  Australia => (country :name (name :op "Australia"))
Span 9-10:  Chinese => (country :name (name :op "China"))
Span 12-14:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 17-18:  Indonesia => (country :name (name :op "Indonesia"))
Span 19-21:  Japan , => (country :name (name :op "South" :op "Korea"))
Span 10-12:  mainland , => (country :name (name :op "Hong" :op "Kong"))
Span 36-37:  met => meet-03
Span 24-25:  Myanmar => (country :name (name :op "Myanmar"))
Span 5-6:  narcotics => narcotic
Span 6-7:  officers => (have-org-role-91 :ARG2 officer)
Span 27-28:  Philippines => (country :name (name :op "Philippines"))
Span 2-3:  senior => senior
Span 29-30:  Singapore => (country :name (name :op "Singapore"))
Span 0-1:  Some => some
Span 31-32:  Thailand => (country :name (name :op "Thailand"))

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),met,meet-03,false), Span(32,34,List(4, 3, 2, 1),and the,(country :name (name :op "United" :op "States")),false), Span(31,32,List(7, 6, 5),Thailand,(country :name (name :op "Thailand")),false), Span(29,30,List(10, 9, 8),Singapore,(country :name (name :op "Singapore")),false), Span(27,28,List(13, 12, 11),Philippines,(country :name (name :op "Philippines")),false), Span(24,25,List(16, 15, 14),Myanmar,(country :name (name :op "Myanmar")),false), Span(19,21,List(20, 19, 18, 17),Japan ,,(country :name (name :op "South" :op "Korea")),false), Span(17,18,List(23, 22, 21),Indonesia,(country :name (name :op "Indonesia")),false), Span(15,16,List(26, 25, 24),Australia,(country :name (name :op "Australia")),false), Span(12,14,List(30, 29, 28, 27),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(10,12,List(34, 33, 32, 31),mainland ,,(country :name (name :op "Hong" :op "Kong")),false), Span(9,10,List(37, 36, 35),Chinese,(country :name (name :op "China")),false), Span(6,7,List(39, 38),officers,(have-org-role-91 :ARG2 officer),false), Span(5,6,List(40),narcotics,narcotic,false), Span(2,3,List(41),senior,senior,false), Span(1,2,List(42),42,42,false), Span(0,1,List(43),Some,some,false)),Map(39 -> officer, 30 -> "Hong", 2 -> name, 5 -> country, 33 -> "Hong", 27 -> city, 12 -> name, 8 -> country, 15 -> name, 42 -> 42, 36 -> name, 21 -> country, 18 -> name, 24 -> country, 41 -> senior, 35 -> country, 7 -> "Thailand", 1 -> country, 17 -> country, 23 -> "Indonesia", 38 -> have-org-role-91, 26 -> "Australia", 4 -> "States", 11 -> country, 32 -> name, 14 -> country, 29 -> "Kong", 20 -> "Korea", 34 -> "Kong", 28 -> name, 6 -> name, 40 -> narcotic, 43 -> some, 9 -> name, 0 -> meet-03, 22 -> name, 16 -> "Myanmar", 37 -> "China", 19 -> "South", 10 -> "Singapore", 3 -> "United", 31 -> country, 25 -> name, 13 -> "Philippines"),Map(n12 -> narcotic, n -> name, c8 -> country, h -> have-org-role-91, s2 -> some, n11 -> name, c7 -> country, n7 -> name, c10 -> country, n4 -> name, c4 -> country, s -> senior, m -> meet-03, n3 -> name, c3 -> country, 4 -> 42, n6 -> name, n10 -> name, c6 -> country, c9 -> city, n9 -> name, c -> country, n8 -> name, o -> officer, n2 -> name, c2 -> country, c11 -> country, n5 -> name, c5 -> country))),[Ljava.lang.String;@592238c5,Annotation([Ljava.lang.String;@6ee8dcd3,[Ljava.lang.String;@a20b94b,[Ljava.lang.String;@5cdf39b2),Annotation([Ljava.lang.String;@14f3c6fc,[Ljava.lang.String;@3cd59ef5,[Ledu.cmu.lti.nlp.amr.Dependency;@33b082c5),Annotation([Ljava.lang.String;@16073fa8,[Ljava.lang.String;@1cc9cfb2,[Ljava.lang.String;@cfbc8e8),Annotation([Ljava.lang.String;@3bead518,[Ljava.lang.String;@14bf57b2,[Ledu.cmu.lti.nlp.amr.Entity;@46d9aec8))
AMR:
(c / country, calendar, c2 / country)
(c / country, name, n / name)
(c / country, op, c3 / country)
(c / country, op, c4 / country)
(c / country, op, c5 / country)
(c / country, op, c6 / country)
(c / country, op, c7 / country)
(c / country, op, c8 / country)
(c / country, op, c9 / city)
(c10 / country, name, n10 / name)
(c11 / country, calendar, c10 / country)
(c11 / country, name, n11 / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(c7 / country, name, n7 / name)
(c8 / country, name, n8 / name)
(c9 / city, location, c10 / country)
(c9 / city, name, n9 / name)
(h / have-org-role-91, ARG1, c10 / country)
(h / have-org-role-91, ARG2, o / officer)
(m / meet-03, ARG0, n12 / narcotic)
(m / meet-03, ARG1, c6 / country)
(n / name, op, "States")
(n / name, op, "United")
(n10 / name, op, "Hong")
(n10 / name, op, "Kong")
(n11 / name, op, "China")
(n12 / narcotic, quant, s2 / some)
(n2 / name, op, "Thailand")
(n3 / name, op, "Singapore")
(n4 / name, op, "Philippines")
(n5 / name, op, "Myanmar")
(n6 / name, op, "Korea")
(n6 / name, op, "South")
(n7 / name, op, "Indonesia")
(n8 / name, op, "Australia")
(n9 / name, op, "Hong")
(n9 / name, op, "Kong")
(o / officer, mod, s / senior)
(s2 / some, op, 4 / 42)

Decoded in 1,180,703 microseconds
Sentence: The Hong Kong police's internal news letter recently reported that the conference aimed to provide a flexible and forward-thinking environment for sharing information and taking positive action against the organized criminals of transnational drug trafficking.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 29-30:  action => action
Span 13-14:  aimed => aim-02
Span 26-27:  and => and
Span 18-19:  and => and
Span 12-13:  conference => conference
Span 33-34:  criminals => criminal
Span 36-37:  drug => drug
Span 22-23:  environment => environment
Span 17-18:  flexible => flexible
Span 19-20:  forward => forward
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 25-26:  information => information
Span 5-6:  internal => internal
Span 7-8:  letter => letter
Span 6-7:  news => news
Span 32-33:  organized => organize-01
Span 3-4:  police => police
Span 28-29:  positive => positive
Span 15-16:  provide => provide-01
Span 8-9:  recently => recent
Span 9-10:  reported => report-01
Span 24-25:  sharing => share-01
Span 27-28:  taking => take-01
Span 21-22:  thinking => think-01
Span 37-38:  trafficking => traffic-00
Span 35-36:  transnational => transnational

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),trafficking,traffic-00,false), Span(36,37,List(1),drug,drug,false), Span(35,36,List(2),transnational,transnational,false), Span(33,34,List(3),criminals,criminal,false), Span(32,33,List(4),organized,organize-01,false), Span(29,30,List(5),action,action,false), Span(28,29,List(6),positive,positive,false), Span(27,28,List(7),taking,take-01,false), Span(26,27,List(8),and,and,false), Span(25,26,List(9),information,information,false), Span(24,25,List(10),sharing,share-01,false), Span(22,23,List(11),environment,environment,false), Span(21,22,List(12),thinking,think-01,false), Span(19,20,List(13),forward,forward,false), Span(18,19,List(14),and,and,false), Span(17,18,List(15),flexible,flexible,false), Span(15,16,List(16),provide,provide-01,false), Span(13,14,List(17),aimed,aim-02,false), Span(12,13,List(18),conference,conference,false), Span(9,10,List(19),reported,report-01,false), Span(8,9,List(20),recently,recent,false), Span(7,8,List(21),letter,letter,false), Span(6,7,List(22),news,news,false), Span(5,6,List(23),internal,internal,false), Span(3,4,List(24),police,police,false), Span(1,3,List(28, 27, 26, 25),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> transnational, 5 -> action, 27 -> "Kong", 12 -> think-01, 8 -> and, 15 -> flexible, 21 -> letter, 18 -> conference, 24 -> police, 7 -> take-01, 1 -> drug, 17 -> aim-02, 23 -> internal, 26 -> name, 4 -> organize-01, 11 -> environment, 14 -> and, 20 -> recent, 28 -> "Hong", 6 -> positive, 9 -> information, 0 -> traffic-00, 22 -> news, 16 -> provide-01, 19 -> report-01, 10 -> share-01, 3 -> criminal, 25 -> city, 13 -> forward),Map(e -> environment, n -> news, t4 -> think-01, t -> traffic-00, p2 -> provide-01, a3 -> and, s -> share-01, d -> drug, t3 -> take-01, r2 -> recent, p -> positive, c3 -> city, a -> action, t2 -> transnational, i2 -> internal, i -> information, a2 -> and, r -> report-01, c -> criminal, f2 -> flexible, l -> letter, f -> forward, o -> organize-01, p3 -> police, n2 -> name, c2 -> conference, a4 -> aim-02))),[Ljava.lang.String;@14379273,Annotation([Ljava.lang.String;@7918c7f8,[Ljava.lang.String;@17740dae,[Ljava.lang.String;@1c504e66),Annotation([Ljava.lang.String;@345cf395,[Ljava.lang.String;@bc4d5e1,[Ledu.cmu.lti.nlp.amr.Dependency;@3c6aa04a),Annotation([Ljava.lang.String;@2257fadf,[Ljava.lang.String;@7144655b,[Ljava.lang.String;@5c82cd4f),Annotation([Ljava.lang.String;@35835e65,[Ljava.lang.String;@289fdb08,[Ledu.cmu.lti.nlp.amr.Entity;@7a231dfd))
AMR:
(a / action, mod, p / positive)
(a2 / and, op, s / share-01)
(a2 / and, op, t3 / take-01)
(a4 / aim-02, ARG0, c2 / conference)
(a4 / aim-02, ARG1, p2 / provide-01)
(c3 / city, name, n2 / name)
(e / environment, mod, f2 / flexible)
(e / environment, mod, t4 / think-01)
(e / environment, purpose, a3 / and)
(l / letter, mod, n / news)
(l / letter, poss, p3 / police)
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(o / organize-01, ARG1, c / criminal)
(p2 / provide-01, ARG0, c2 / conference)
(p2 / provide-01, ARG1, e / environment)
(p2 / provide-01, instrument, a2 / and)
(p3 / police, mod, c3 / city)
(r / report-01, ARG0, l / letter)
(r / report-01, ARG1, a4 / aim-02)
(r / report-01, time, r2 / recent)
(s / share-01, ARG1, i / information)
(t / traffic-00, ARG0, c / criminal)
(t / traffic-00, ARG1, d / drug)
(t / traffic-00, mod, t2 / transnational)
(t3 / take-01, ARG0, f / forward)
(t3 / take-01, ARG1, a / action)
(t3 / take-01, ARG2, c / criminal)
(t4 / think-01, ARG1, i2 / internal)

Decoded in 1,840,406 microseconds
Sentence: The Hong Kong police's exchange of intelligence with the police on the Chinese mainland has been particularly intense.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 13-14:  Chinese => (country :name (name :op "China"))
Span 5-6:  exchange => exchange-01
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 7-8:  intelligence => intelligence
Span 18-19:  intense => intense
Span 14-15:  mainland => mainland
Span 17-18:  particularly => particular
Span 10-11:  police => police
Span 3-4:  police => police

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),intense,intense,false), Span(17,18,List(1),particularly,particular,false), Span(14,15,List(2),mainland,mainland,false), Span(13,14,List(5, 4, 3),Chinese,(country :name (name :op "China")),false), Span(10,11,List(6),police,police,false), Span(7,8,List(7),intelligence,intelligence,false), Span(5,6,List(8),exchange,exchange-01,false), Span(3,4,List(9),police,police,false), Span(1,3,List(13, 12, 11, 10),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> mainland, 5 -> "China", 12 -> "Kong", 8 -> exchange-01, 7 -> intelligence, 1 -> particular, 4 -> name, 11 -> name, 6 -> police, 0 -> intense, 9 -> police, 3 -> country, 10 -> city, 13 -> "Hong"),Map(e -> exchange-01, n -> name, p2 -> police, m -> mainland, p -> particular, i2 -> intelligence, i -> intense, c -> country, n2 -> name, c2 -> city, p3 -> police))),[Ljava.lang.String;@30814f43,Annotation([Ljava.lang.String;@1fde4f40,[Ljava.lang.String;@49cf9028,[Ljava.lang.String;@2b61a019),Annotation([Ljava.lang.String;@11a00961,[Ljava.lang.String;@7ce9e05a,[Ledu.cmu.lti.nlp.amr.Dependency;@4992613f),Annotation([Ljava.lang.String;@6fd5717c,[Ljava.lang.String;@7e2f86e6,[Ljava.lang.String;@4d774249),Annotation([Ljava.lang.String;@17b64941,[Ljava.lang.String;@53ac845a,[Ledu.cmu.lti.nlp.amr.Entity;@5136207f))
AMR:
(c / country, name, n / name)
(c2 / city, name, n2 / name)
(e / exchange-01, ARG0, p2 / police)
(e / exchange-01, ARG1, i2 / intelligence)
(e / exchange-01, ARG2, p3 / police)
(i / intense, domain, e / exchange-01)
(i / intense, mod, p / particular)
(m / mainland, mod, c / country)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p2 / police, mod, c2 / city)
(p3 / police, location, m / mainland)

Decoded in 83,435 microseconds
Sentence: An 11-member delegation from mainland China's National Narcotics Control Commission visited Hong Kong recently to study how the police here enforce their anti-narcotics laws.

NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 1-2:  11 => 11
Span 7-11:  China 's National Narcotics => (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
Span 12-14:  Commission visited => (country :name (name :op "Hong" :op "Kong"))
Span 4-5:  delegation => delegation
Span 23-24:  enforce => enforce-01
Span 22-23:  here => here
Span 14-16:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 28-29:  laws => law
Span 6-7:  mainland => mainland
Span 3-4:  member => (have-org-role-91 :ARG2 member)
Span 27-28:  narcotics => narcotic
Span 21-22:  police => police
Span 16-17:  recently => recent
Span 18-19:  study => study

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),laws,law,false), Span(27,28,List(1),narcotics,narcotic,false), Span(23,24,List(2),enforce,enforce-01,false), Span(22,23,List(3),here,here,false), Span(21,22,List(4),police,police,false), Span(18,19,List(5),study,study,false), Span(16,17,List(6),recently,recent,false), Span(14,16,List(10, 9, 8, 7),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(12,14,List(14, 13, 12, 11),Commission visited,(country :name (name :op "Hong" :op "Kong")),false), Span(7,11,List(20, 19, 18, 17, 16, 15),China 's National Narcotics,(organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission")),false), Span(6,7,List(21),mainland,mainland,false), Span(4,5,List(22),delegation,delegation,false), Span(3,4,List(24, 23),member,(have-org-role-91 :ARG2 member),false), Span(1,2,List(25),11,11,false)),Map(2 -> enforce-01, 5 -> study, 12 -> name, 8 -> name, 15 -> organization, 21 -> mainland, 18 -> "Narcotics", 24 -> member, 7 -> city, 1 -> narcotic, 17 -> "National", 23 -> have-org-role-91, 4 -> police, 11 -> country, 14 -> "Kong", 20 -> "Commission", 6 -> recent, 9 -> "Kong", 0 -> law, 22 -> delegation, 16 -> name, 19 -> "Control", 10 -> "Hong", 3 -> here, 25 -> 11, 13 -> "Hong"),Map(e -> enforce-01, n -> narcotic, h -> here, h2 -> have-org-role-91, m2 -> member, n4 -> name, s -> study, d -> delegation, m -> mainland, 1 -> 11, p -> police, n3 -> name, r -> recent, c -> city, l -> law, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@26a4551a,Annotation([Ljava.lang.String;@3fdecce,[Ljava.lang.String;@344426bf,[Ljava.lang.String;@5411dd90),Annotation([Ljava.lang.String;@50194e8d,[Ljava.lang.String;@3cee53dc,[Ledu.cmu.lti.nlp.amr.Dependency;@290aeb20),Annotation([Ljava.lang.String;@73ad4ecc,[Ljava.lang.String;@69da0b12,[Ljava.lang.String;@2764c546),Annotation([Ljava.lang.String;@59496961,[Ljava.lang.String;@408b87aa,[Ledu.cmu.lti.nlp.amr.Entity;@79b08632))
AMR:
(1 / 11, op, e / enforce-01)
(c / city, name, n2 / name)
(c2 / country, name, n3 / name)
(c2 / country, purpose, s / study)
(c2 / country, source, o / organization)
(c2 / country, time, r / recent)
(e / enforce-01, ARG0, p / police)
(e / enforce-01, ARG2, l / law)
(e / enforce-01, ARG6, r / recent)
(h2 / have-org-role-91, ARG1, d / delegation)
(h2 / have-org-role-91, ARG2, m2 / member)
(n / narcotic, mod, m / mainland)
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(n4 / name, op, "Commission")
(n4 / name, op, "Control")
(n4 / name, op, "Narcotics")
(n4 / name, op, "National")
(o / organization, mod, m / mainland)
(o / organization, name, n4 / name)
(p / police, location, h / here)
(s / study, calendar, c / city)
(s / study, domain, d / delegation)

Decoded in 1,521,485 microseconds
Sentence: The 11-person team was chaired by the Deputy Director of Bureau of narcotics control of the Chinese Ministry of Public Security Chen cunyi and was briefed by the Hong Kong Police as led by Hong Kong's head of narcotics bureau Ip Lau Chuen on enforced actions carried out in Hong Kong.

NER Entity: (organization :name (name :op "Bureau" :op "of" :op "narcotics"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (organization :name (name :op "Ministry" :op "of" :op "Public" :op "Security" :op "Chen"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (person :name (name :op "Ip" :op "Lau"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Bureau" :op "of" :op "narcotics"))
Spans:
Span 1-2:  11 => 11
Span 48-49:  actions => action
Span 25-26:  and => and
Span 27-28:  briefed => brief-01
Span 12-16:  Bureau of narcotics control => (organization :name (name :op "Control" :op "Narcotics" :op "of" :op "Bureau"))
Span 28-30:  by the => (country :name (name :op "Hong" :op "Kong"))
Span 49-50:  carried => carry-03
Span 6-7:  chaired => chair-01
Span 23-25:  Chen cunyi => (person :name (name :op "Cunyi" :op "Chen"))
Span 18-19:  Chinese => (country :name (name :op "China"))
Span 9-10:  Deputy => deputy
Span 10-11:  Director => (have-org-role-91 :ARG2 director)
Span 47-48:  enforced => enforce-01
Span 39-40:  head => head-01
Span 52-54:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 36-38:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 30-32:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 43-46:  Ip Lau Chuen => (name :op "Chuen" :op "Lau" :op "Ip")
Span 34-36:  led by => (country :name (name :op "Hong" :op "Kong"))
Span 19-23:  Ministry of Public Security => (organization :name (name :op "Security" :op "Public" :op "of" :op "Ministry"))
Span 41-43:  narcotics bureau => (organization :name (name :op "Bureau" :op "Narcotics"))
Span 50-52:  out in => (country :name (name :op "Hong" :op "Kong"))
Span 3-4:  person => person
Span 32-33:  Police => police
Span 4-5:  team => team

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(52,54,List(3, 2, 1, 0),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(50,52,List(7, 6, 5, 4),out in,(country :name (name :op "Hong" :op "Kong")),false), Span(49,50,List(8),carried,carry-03,false), Span(48,49,List(9),actions,action,false), Span(47,48,List(10),enforced,enforce-01,false), Span(43,46,List(14, 13, 12, 11),Ip Lau Chuen,(name :op "Chuen" :op "Lau" :op "Ip"),false), Span(41,43,List(18, 17, 16, 15),narcotics bureau,(organization :name (name :op "Bureau" :op "Narcotics")),false), Span(39,40,List(19),head,head-01,false), Span(36,38,List(23, 22, 21, 20),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(34,36,List(27, 26, 25, 24),led by,(country :name (name :op "Hong" :op "Kong")),false), Span(32,33,List(28),Police,police,false), Span(30,32,List(32, 31, 30, 29),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(28,30,List(36, 35, 34, 33),by the,(country :name (name :op "Hong" :op "Kong")),false), Span(27,28,List(37),briefed,brief-01,false), Span(25,26,List(38),and,and,false), Span(23,25,List(42, 41, 40, 39),Chen cunyi,(person :name (name :op "Cunyi" :op "Chen")),false), Span(19,23,List(48, 47, 46, 45, 44, 43),Ministry of Public Security,(organization :name (name :op "Security" :op "Public" :op "of" :op "Ministry")),false), Span(18,19,List(51, 50, 49),Chinese,(country :name (name :op "China")),false), Span(12,16,List(57, 56, 55, 54, 53, 52),Bureau of narcotics control,(organization :name (name :op "Control" :op "Narcotics" :op "of" :op "Bureau")),false), Span(10,11,List(59, 58),Director,(have-org-role-91 :ARG2 director),false), Span(9,10,List(60),Deputy,deputy,false), Span(6,7,List(61),chaired,chair-01,false), Span(4,5,List(62),team,team,false), Span(3,4,List(63),person,person,false), Span(1,2,List(64),11,11,false)),Map(57 -> "Bureau", 63 -> person, 30 -> name, 39 -> person, 45 -> "Security", 51 -> "China", 2 -> "Kong", 5 -> name, 48 -> "Ministry", 33 -> country, 27 -> "Kong", 54 -> "Control", 12 -> "Chuen", 60 -> deputy, 8 -> carry-03, 15 -> organization, 42 -> "Chen", 36 -> "Kong", 21 -> name, 18 -> "Narcotics", 24 -> country, 53 -> name, 35 -> "Hong", 41 -> "Cunyi", 62 -> team, 56 -> "of", 7 -> "Kong", 59 -> director, 17 -> "Bureau", 1 -> name, 50 -> name, 44 -> name, 23 -> "Hong", 38 -> and, 47 -> "of", 4 -> country, 26 -> "Hong", 11 -> name, 32 -> "Hong", 14 -> "Ip", 20 -> city, 29 -> city, 64 -> 11, 46 -> "Public", 52 -> organization, 34 -> name, 6 -> "Hong", 28 -> police, 55 -> "Narcotics", 40 -> name, 61 -> chair-01, 49 -> country, 0 -> city, 9 -> action, 43 -> organization, 22 -> "Kong", 58 -> have-org-role-91, 16 -> name, 37 -> brief-01, 19 -> head-01, 3 -> "Hong", 10 -> enforce-01, 25 -> name, 31 -> "Kong", 13 -> "Lau"),Map(n12 -> name, e -> enforce-01, n -> name, c8 -> country, h -> head-01, h2 -> have-org-role-91, t -> team, b -> brief-01, o3 -> organization, n11 -> name, n7 -> name, c7 -> country, p2 -> person, c4 -> city, n4 -> name, d -> director, 1 -> 11, p -> police, n3 -> name, a -> action, c3 -> carry-03, d2 -> deputy, n6 -> name, o2 -> organization, n10 -> name, c6 -> city, c9 -> chair-01, n9 -> name, a2 -> and, c -> city, n8 -> name, o -> organization, p3 -> person, n2 -> name, c2 -> country, n5 -> name, c5 -> country))),[Ljava.lang.String;@787f32b7,Annotation([Ljava.lang.String;@6aef4eb8,[Ljava.lang.String;@76c52298,[Ljava.lang.String;@bb9ab64),Annotation([Ljava.lang.String;@a52ca2e,[Ljava.lang.String;@1ad8df52,[Ledu.cmu.lti.nlp.amr.Dependency;@45d6ef73),Annotation([Ljava.lang.String;@3f29e26,[Ljava.lang.String;@1f6d27cc,[Ljava.lang.String;@4393593c),Annotation([Ljava.lang.String;@314c8b4a,[Ljava.lang.String;@26d820eb,[Ledu.cmu.lti.nlp.amr.Entity;@507d20bb))
AMR:
(1 / 11, name, n3 / name)
(a2 / and, op, b / brief-01)
(a2 / and, op, c5 / country)
(a2 / and, op, c9 / chair-01)
(b / brief-01, ARG0, p / police)
(b / brief-01, ARG1, t / team)
(b / brief-01, ARG2, a / action)
(b / brief-01, ARG6, c7 / country)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(c3 / carry-03, ARG1, c5 / country)
(c3 / carry-03, ARG6, c2 / country)
(c3 / carry-03, location, c / city)
(c3 / carry-03, location, c6 / city)
(c4 / city, name, n5 / name)
(c5 / country, name, n6 / name)
(c6 / city, name, n7 / name)
(c7 / country, name, n8 / name)
(c8 / country, name, n11 / name)
(c9 / chair-01, ARG0, p2 / person)
(c9 / chair-01, ARG1, t / team)
(d / director, mod, d2 / deputy)
(e / enforce-01, ARG1, a / action)
(h / head-01, ARG0, p3 / person)
(h / head-01, ARG1, o / organization)
(h / head-01, ARG6, c4 / city)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, o3 / organization)
(h2 / have-org-role-91, ARG2, d / director)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n10 / name, op, "Ministry")
(n10 / name, op, "Public")
(n10 / name, op, "Security")
(n10 / name, op, "of")
(n11 / name, op, "China")
(n12 / name, op, "Bureau")
(n12 / name, op, "Control")
(n12 / name, op, "Narcotics")
(n12 / name, op, "of")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "Chuen")
(n3 / name, op, "Ip")
(n3 / name, op, "Lau")
(n4 / name, op, "Bureau")
(n4 / name, op, "Narcotics")
(n5 / name, op, "Hong")
(n5 / name, op, "Kong")
(n6 / name, op, "Hong")
(n6 / name, op, "Kong")
(n7 / name, op, "Hong")
(n7 / name, op, "Kong")
(n8 / name, op, "Hong")
(n8 / name, op, "Kong")
(n9 / name, op, "Chen")
(n9 / name, op, "Cunyi")
(o / organization, name, n4 / name)
(o / organization, poss, c6 / city)
(o2 / organization, mod, c8 / country)
(o2 / organization, name, n10 / name)
(o2 / organization, part, o3 / organization)
(o3 / organization, name, n12 / name)
(p2 / person, name, n9 / name)
(p3 / person, name, n3 / name)

Decoded in 4,930,588 microseconds
Sentence: The Hong Kong police and China's National Narcotics Control Commission also exchanged mutual concerns and discussed a number of issues which included investigations to counter drug trafficking and money laundering activities.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 31-32:  activities => activity
Span 11-12:  also => also
Span 28-29:  and => and
Span 15-16:  and => and
Span 4-5:  and => and
Span 5-6:  China => (country :name (name :op "China"))
Span 14-15:  concerns => concern-01
Span 25-26:  counter => counter-01
Span 16-17:  discussed => discuss-01
Span 26-27:  drug => drug
Span 12-13:  exchanged => exchange-01
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 22-23:  included => include-01
Span 23-24:  investigations => investigate-01
Span 20-21:  issues => issue
Span 30-31:  laundering => launder-01
Span 29-30:  money => money
Span 13-14:  mutual => mutual
Span 7-11:  National Narcotics Control Commission => (organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission"))
Span 18-19:  number => number
Span 3-4:  police => police
Span 27-28:  trafficking => traffic-00

Langrangian relaxation converged after 60 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),activities,activity,false), Span(30,31,List(1),laundering,launder-01,false), Span(29,30,List(2),money,money,false), Span(28,29,List(3),and,and,false), Span(27,28,List(4),trafficking,traffic-00,false), Span(26,27,List(5),drug,drug,false), Span(25,26,List(6),counter,counter-01,false), Span(23,24,List(7),investigations,investigate-01,false), Span(22,23,List(8),included,include-01,false), Span(20,21,List(9),issues,issue,false), Span(18,19,List(10),number,number,false), Span(16,17,List(11),discussed,discuss-01,false), Span(15,16,List(12),and,and,false), Span(14,15,List(13),concerns,concern-01,false), Span(13,14,List(14),mutual,mutual,false), Span(12,13,List(15),exchanged,exchange-01,false), Span(11,12,List(16),also,also,false), Span(7,11,List(22, 21, 20, 19, 18, 17),National Narcotics Control Commission,(organization :name (name :op "National" :op "Narcotics" :op "Control" :op "Commission")),false), Span(5,6,List(25, 24, 23),China,(country :name (name :op "China")),false), Span(4,5,List(26),and,and,false), Span(3,4,List(27),police,police,false), Span(1,3,List(31, 30, 29, 28),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(30 -> "Kong", 2 -> money, 5 -> drug, 27 -> police, 12 -> and, 8 -> include-01, 15 -> exchange-01, 21 -> "Control", 18 -> name, 24 -> name, 7 -> investigate-01, 1 -> launder-01, 17 -> organization, 23 -> country, 26 -> and, 4 -> traffic-00, 11 -> discuss-01, 14 -> mutual, 29 -> name, 20 -> "Narcotics", 28 -> city, 6 -> counter-01, 9 -> issue, 0 -> activity, 22 -> "Commission", 16 -> also, 19 -> "National", 10 -> number, 3 -> and, 31 -> "Hong", 25 -> "China", 13 -> concern-01),Map(e -> exchange-01, n -> number, t -> traffic-00, m2 -> mutual, a3 -> and, c4 -> city, n4 -> name, d -> drug, m -> money, i3 -> issue, p -> police, a -> activity, c3 -> country, n3 -> name, d2 -> discuss-01, a5 -> and, i2 -> include-01, i -> investigate-01, a2 -> and, c -> counter-01, l -> launder-01, o -> organization, c2 -> concern-01, n2 -> name, a4 -> also))),[Ljava.lang.String;@9fec931,Annotation([Ljava.lang.String;@5cbd159f,[Ljava.lang.String;@3b05a99b,[Ljava.lang.String;@2c43eb8),Annotation([Ljava.lang.String;@7d0cc890,[Ljava.lang.String;@49293b43,[Ledu.cmu.lti.nlp.amr.Dependency;@5ff60a8c),Annotation([Ljava.lang.String;@7ce4de34,[Ljava.lang.String;@67b7c170,[Ljava.lang.String;@67440de6),Annotation([Ljava.lang.String;@889d9e8,[Ljava.lang.String;@5246a3b3,[Ledu.cmu.lti.nlp.amr.Entity;@ba354ca))
AMR:
(a / activity, mod, l / launder-01)
(a3 / and, op, a / activity)
(a3 / and, op, e / exchange-01)
(a3 / and, op, t / traffic-00)
(a5 / and, op, d2 / discuss-01)
(a5 / and, op, e / exchange-01)
(c / counter-01, ARG1, a2 / and)
(c2 / concern-01, mod, m2 / mutual)
(c3 / country, name, n3 / name)
(c4 / city, name, n4 / name)
(d2 / discuss-01, ARG0, p / police)
(d2 / discuss-01, ARG1, i3 / issue)
(d2 / discuss-01, ARG2, o / organization)
(e / exchange-01, ARG0, p / police)
(e / exchange-01, ARG1, c2 / concern-01)
(e / exchange-01, mod, a4 / also)
(i / investigate-01, ARG1, c / counter-01)
(i2 / include-01, ARG0, i3 / issue)
(i2 / include-01, ARG1, i / investigate-01)
(i3 / issue, quant, n / number)
(l / launder-01, ARG1, m / money)
(n2 / name, op, "Commission")
(n2 / name, op, "Control")
(n2 / name, op, "Narcotics")
(n2 / name, op, "National")
(n3 / name, op, "China")
(n4 / name, op, "Hong")
(n4 / name, op, "Kong")
(o / organization, name, n2 / name)
(o / organization, poss, c3 / country)
(p / police, mod, c4 / city)
(t / traffic-00, ARG1, d / drug)

Decoded in 2,734,331 microseconds
Sentence: The mainland party closed their visit after meeting with Hong Kong's deputy assistant commissioner for crime Yam TAT wing and held discussions on a proposal to further cooperate in combating cross-boundary drug trafficking activities.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (person :name (name :op "Yam"))
Spans:
Span 36-37:  activities => activity
Span 6-7:  after => after
Span 20-21:  and => and
Span 13-14:  assistant => assist-01
Span 33-34:  boundary => boundary
Span 3-4:  closed => close
Span 30-31:  combating => combat-01
Span 14-15:  commissioner => (have-org-role-91 :ARG2 commissioner)
Span 28-29:  cooperate => cooperate-01
Span 16-17:  crime => crime
Span 31-32:  cross => cross-02
Span 12-13:  deputy => deputy
Span 22-23:  discussions => discuss-01
Span 34-35:  drug => drug
Span 27-28:  further => further
Span 21-22:  held => hold-04
Span 9-11:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 1-2:  mainland => mainland
Span 7-8:  meeting => meet-03
Span 2-3:  party => party
Span 25-26:  proposal => propose-01
Span 35-36:  trafficking => traffic-00
Span 5-6:  visit => visit-01
Span 17-20:  Yam TAT wing => (person :name (name :op "Wing" :op "Tat" :op "Yam"))

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),activities,activity,false), Span(35,36,List(1),trafficking,traffic-00,false), Span(34,35,List(2),drug,drug,false), Span(33,34,List(3),boundary,boundary,false), Span(31,32,List(4),cross,cross-02,false), Span(30,31,List(5),combating,combat-01,false), Span(28,29,List(6),cooperate,cooperate-01,false), Span(27,28,List(7),further,further,false), Span(25,26,List(8),proposal,propose-01,false), Span(22,23,List(9),discussions,discuss-01,false), Span(21,22,List(10),held,hold-04,false), Span(20,21,List(11),and,and,false), Span(17,20,List(16, 15, 14, 13, 12),Yam TAT wing,(person :name (name :op "Wing" :op "Tat" :op "Yam")),false), Span(16,17,List(17),crime,crime,false), Span(14,15,List(19, 18),commissioner,(have-org-role-91 :ARG2 commissioner),false), Span(13,14,List(20),assistant,assist-01,false), Span(12,13,List(21),deputy,deputy,false), Span(9,11,List(25, 24, 23, 22),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(7,8,List(26),meeting,meet-03,false), Span(6,7,List(27),after,after,false), Span(5,6,List(28),visit,visit-01,false), Span(3,4,List(29),closed,close,false), Span(2,3,List(30),party,party,false), Span(1,2,List(31),mainland,mainland,false)),Map(30 -> party, 2 -> drug, 5 -> combat-01, 27 -> after, 12 -> person, 8 -> propose-01, 15 -> "Tat", 21 -> deputy, 18 -> have-org-role-91, 24 -> "Kong", 7 -> further, 1 -> traffic-00, 17 -> crime, 23 -> name, 26 -> meet-03, 4 -> cross-02, 11 -> and, 14 -> "Wing", 29 -> close, 20 -> assist-01, 28 -> visit-01, 6 -> cooperate-01, 9 -> discuss-01, 0 -> activity, 22 -> city, 16 -> "Yam", 19 -> commissioner, 10 -> hold-04, 3 -> boundary, 31 -> mainland, 25 -> "Hong", 13 -> name),Map(n -> name, h -> hold-04, h2 -> have-org-role-91, t -> traffic-00, b -> boundary, m2 -> mainland, d3 -> deputy, c7 -> close, p2 -> person, c4 -> crime, a3 -> assist-01, v -> visit-01, d -> drug, m -> meet-03, p -> propose-01, c3 -> cooperate-01, a -> activity, d2 -> discuss-01, c6 -> city, a2 -> and, c -> cross-02, f -> further, p3 -> party, c2 -> combat-01, n2 -> name, a4 -> after, c5 -> commissioner))),[Ljava.lang.String;@4c4f4365,Annotation([Ljava.lang.String;@acf859d,[Ljava.lang.String;@6df3e44c,[Ljava.lang.String;@7ce7e83c),Annotation([Ljava.lang.String;@4a05d8ae,[Ljava.lang.String;@3c904f1e,[Ledu.cmu.lti.nlp.amr.Dependency;@4eb30d44),Annotation([Ljava.lang.String;@d56aaa6,[Ljava.lang.String;@6972c30a,[Ljava.lang.String;@57a48985),Annotation([Ljava.lang.String;@1ab6718,[Ljava.lang.String;@3910fe11,[Ledu.cmu.lti.nlp.amr.Entity;@460510aa))
AMR:
(a / activity, mod, t / traffic-00)
(a2 / and, op, c7 / close)
(a2 / and, op, h / hold-04)
(a3 / assist-01, ARG0, c5 / commissioner)
(a3 / assist-01, ARG2, c4 / crime)
(a4 / after, op, m / meet-03)
(c / cross-02, ARG0, a / activity)
(c / cross-02, ARG1, b / boundary)
(c2 / combat-01, ARG1, a / activity)
(c3 / cooperate-01, ARG2, c2 / combat-01)
(c3 / cooperate-01, mod, f / further)
(c5 / commissioner, mod, d3 / deputy)
(c6 / city, name, n2 / name)
(d2 / discuss-01, ARG0, p3 / party)
(d2 / discuss-01, ARG1, p / propose-01)
(h / hold-04, ARG1, d2 / discuss-01)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, c6 / city)
(h2 / have-org-role-91, ARG2, c5 / commissioner)
(m / meet-03, ARG0, p3 / party)
(m / meet-03, ARG1, p2 / person)
(n / name, op, "Tat")
(n / name, op, "Wing")
(n / name, op, "Yam")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p / propose-01, ARG1, c3 / cooperate-01)
(p2 / person, name, n / name)
(p3 / party, mod, m2 / mainland)
(t / traffic-00, ARG1, d / drug)
(v / visit-01, ARG1, p3 / party)

Decoded in 884,065 microseconds
Sentence: 2002-07-25

mkDayMonthYear(2002-07-25,25,07,2002)
mkDayMonthYear(2002-07-25,25,07,2002)
Spans:
Span 0-1:  2002-07-25 => (date-entity :day 25 :month 7 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-07-25,(date-entity :day 25 :month 7 :year 2002),false)),Map(2 -> 7, 1 -> 25, 0 -> date-entity, 3 -> 2002),Map(2 -> 25, 7 -> 7, d -> date-entity, 22 -> 2002))),[Ljava.lang.String;@351e414e,Annotation([Ljava.lang.String;@6fd77352,[Ljava.lang.String;@5109e8cf,[Ljava.lang.String;@3f672204),Annotation([Ljava.lang.String;@78b41097,[Ljava.lang.String;@2c2db130,[Ledu.cmu.lti.nlp.amr.Dependency;@327c7bea),Annotation([Ljava.lang.String;@348d18a3,[Ljava.lang.String;@6c65860d,[Ljava.lang.String;@2d000e80),Annotation([Ljava.lang.String;@7cf283e1,[Ljava.lang.String;@20e6c4dc,[Ledu.cmu.lti.nlp.amr.Entity;@60737b23))
AMR:
(d / date-entity, day, 2 / 25)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 22 / 2002)

Decoded in 7,151 microseconds
Sentence: Peru (PE)

NER Entity: (country :name (name :op "Peru"))
NER Entity: (country :name (name :op "PE"))
NER Entity: (country :name (name :op "Peru"))
Spans:
Span 0-1:  Peru => (country :name (name :op "Peru"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Peru,(country :name (name :op "Peru")),false)),Map(2 -> "Peru", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@4d2a1da3,Annotation([Ljava.lang.String;@252f626c,[Ljava.lang.String;@33f98231,[Ljava.lang.String;@48284d0e),Annotation([Ljava.lang.String;@557286ad,[Ljava.lang.String;@b10a26d,[Ledu.cmu.lti.nlp.amr.Dependency;@74075134),Annotation([Ljava.lang.String;@7e4d2287,[Ljava.lang.String;@3f4b840d,[Ljava.lang.String;@31464a43),Annotation([Ljava.lang.String;@7f8633ae,[Ljava.lang.String;@68c87fc3,[Ledu.cmu.lti.nlp.amr.Entity;@bc0f53b))
AMR:
(c / country, name, n / name)
(n / name, op, "Peru")

Decoded in 4,447 microseconds
Sentence: Narcotics; crime; military; government

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 2-3:  crime => crime
Span 6-7:  government => (government-organization :ARG0-of govern-01)
Span 4-5:  military => military
Span 0-1:  Narcotics => narcotic

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(1, 0),government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(2),;,and,false), Span(4,5,List(3),military,military,false), Span(3,4,List(4),;,and,false), Span(2,3,List(5),crime,crime,false), Span(1,2,List(6),;,and,false), Span(0,1,List(7),Narcotics,narcotic,false)),Map(2 -> and, 5 -> crime, 7 -> narcotic, 1 -> govern-01, 4 -> and, 6 -> and, 0 -> government-organization, 3 -> military),Map(n -> narcotic, a3 -> and, m -> military, g2 -> govern-01, g -> government-organization, a -> and, a2 -> and, c -> crime))),[Ljava.lang.String;@8d7b252,Annotation([Ljava.lang.String;@4682eba5,[Ljava.lang.String;@6d9fb2d1,[Ljava.lang.String;@61fafb74),Annotation([Ljava.lang.String;@540a903b,[Ljava.lang.String;@58496dc,[Ledu.cmu.lti.nlp.amr.Dependency;@151db587),Annotation([Ljava.lang.String;@238acd0b,[Ljava.lang.String;@23811a09,[Ljava.lang.String;@2125ad3),Annotation([Ljava.lang.String;@7a5b769b,[Ljava.lang.String;@f4c0e4e,[Ledu.cmu.lti.nlp.amr.Entity;@24361cfc))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, a2 / and)
(a3 / and, op, c / crime)
(a3 / and, op, g / government-organization)
(a3 / and, op, m / military)
(a3 / and, op, n / narcotic)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 28,099 microseconds
Sentence: Peruvian military document discloses former intelligence head Montesinos' links with drug trafficking

NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (thing :name (name :op "Peruvian"))
Spans:
Span 3-4:  discloses => disclose-01
Span 2-3:  document => document
Span 11-12:  drug => drug
Span 4-5:  former => former
Span 6-7:  head => head-01
Span 5-6:  intelligence => intelligence
Span 9-10:  links => link-01
Span 1-2:  military => military
Span 7-8:  Montesinos => (person :name (name :op "Montesinos"))
Span 0-1:  Peruvian => (country :name (name :op "Peru"))
Span 12-13:  trafficking => traffic-00

Langrangian relaxation converged after 110 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),trafficking,traffic-00,false), Span(11,12,List(1),drug,drug,false), Span(9,10,List(2),links,link-01,false), Span(7,8,List(5, 4, 3),Montesinos,(person :name (name :op "Montesinos")),false), Span(6,7,List(6),head,head-01,false), Span(5,6,List(7),intelligence,intelligence,false), Span(4,5,List(8),former,former,false), Span(3,4,List(9),discloses,disclose-01,false), Span(2,3,List(10),document,document,false), Span(1,2,List(11),military,military,false), Span(0,1,List(14, 13, 12),Peruvian,(country :name (name :op "Peru")),false)),Map(2 -> link-01, 5 -> "Montesinos", 12 -> country, 8 -> former, 7 -> intelligence, 1 -> drug, 4 -> name, 11 -> military, 14 -> "Peru", 6 -> head-01, 0 -> traffic-00, 9 -> disclose-01, 3 -> person, 10 -> document, 13 -> name),Map(n -> name, h -> head-01, t -> traffic-00, d3 -> document, d -> drug, m -> military, p -> person, d2 -> disclose-01, i -> intelligence, c -> country, l -> link-01, f -> former, n2 -> name))),[Ljava.lang.String;@34e20e6b,Annotation([Ljava.lang.String;@15ac59c2,[Ljava.lang.String;@7a7d1b47,[Ljava.lang.String;@6eb82908),Annotation([Ljava.lang.String;@4a8df3e2,[Ljava.lang.String;@3d98d138,[Ledu.cmu.lti.nlp.amr.Dependency;@2f2d52ef),Annotation([Ljava.lang.String;@f2ce6b,[Ljava.lang.String;@25c53f74,[Ljava.lang.String;@5e2f3be5),Annotation([Ljava.lang.String;@1bd0b0e5,[Ljava.lang.String;@dc7b462,[Ledu.cmu.lti.nlp.amr.Entity;@1f51431))
AMR:
(c / country, name, n2 / name)
(d2 / disclose-01, ARG0, d3 / document)
(d2 / disclose-01, ARG1, l / link-01)
(d3 / document, mod, m / military)
(h / head-01, ARG0, p / person)
(h / head-01, ARG1, i / intelligence)
(h / head-01, mod, f / former)
(l / link-01, ARG1, p / person)
(l / link-01, ARG3, t / traffic-00)
(m / military, mod, c / country)
(n / name, op, "Montesinos")
(n2 / name, op, "Peru")
(p / person, name, n / name)
(t / traffic-00, ARG1, d / drug)

Decoded in 1,391,702 microseconds
Sentence: A document signed by a former high-ranking officer of the Peruvian army and disclosed on 020725 mentions links with drug trafficking and could further compromise the situation of the former head of the National Intelligence Service of Peru Vladimiro Montesinos.

NER Entity: (thing :name (name :op "Peruvian"))
mkDayMonthYear(020725,25,07,2002)
mkDayMonthYear(020725,25,07,02)
NER Entity: (organization :name (name :op "National" :op "Intelligence" :op "Service"))
NER Entity: (country :name (name :op "Peru"))
NER Entity: (person :name (name :op "Vladimiro" :op "Montesinos"))
mkDayMonthYear(020725,25,07,2002)
mkDayMonthYear(020725,25,07,02)
Spans:
Span 17-18:  020725 => (date-entity :day 25 :month 7 :year 2002)
Span 23-24:  and => and
Span 14-15:  and => and
Span 13-14:  army => army
Span 26-27:  compromise => compromise-02
Span 24-25:  could => possible
Span 15-16:  disclosed => disclose-01
Span 1-2:  document => document
Span 21-22:  drug => drug
Span 31-32:  former => former
Span 5-6:  former => former
Span 25-26:  further => further
Span 32-33:  head => head-01
Span 6-7:  high => high
Span 36-37:  Intelligence => intelligence
Span 19-20:  links => link-01
Span 18-19:  mentions => mention-01
Span 38-40:  of Peru => (person :name (name :op "Vladimiro" :op "Montesinos"))
Span 33-36:  of the National => (organization :name (name :op "National" :op "Intelligence" :op "Service"))
Span 9-10:  officer => (have-org-role-91 :ARG2 officer)
Span 12-13:  Peruvian => (country :name (name :op "Peru"))
Span 8-9:  ranking => rank-01
Span 2-3:  signed => sign-02
Span 28-29:  situation => situation
Span 22-23:  trafficking => traffic-00
Span 40-42:  Vladimiro Montesinos => (person :name (name :op "Montesinos" :op "Vladimiro"))

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,42,List(3, 2, 1, 0),Vladimiro Montesinos,(person :name (name :op "Montesinos" :op "Vladimiro")),false), Span(38,40,List(7, 6, 5, 4),of Peru,(person :name (name :op "Vladimiro" :op "Montesinos")),false), Span(36,37,List(8),Intelligence,intelligence,false), Span(33,36,List(13, 12, 11, 10, 9),of the National,(organization :name (name :op "National" :op "Intelligence" :op "Service")),false), Span(32,33,List(14),head,head-01,false), Span(31,32,List(15),former,former,false), Span(28,29,List(16),situation,situation,false), Span(26,27,List(17),compromise,compromise-02,false), Span(25,26,List(18),further,further,false), Span(24,25,List(19),could,possible,false), Span(23,24,List(20),and,and,false), Span(22,23,List(21),trafficking,traffic-00,false), Span(21,22,List(22),drug,drug,false), Span(19,20,List(23),links,link-01,false), Span(18,19,List(24),mentions,mention-01,false), Span(17,18,List(28, 27, 26, 25),020725,(date-entity :day 25 :month 7 :year 2002),false), Span(15,16,List(29),disclosed,disclose-01,false), Span(14,15,List(30),and,and,false), Span(13,14,List(31),army,army,false), Span(12,13,List(34, 33, 32),Peruvian,(country :name (name :op "Peru")),false), Span(9,10,List(36, 35),officer,(have-org-role-91 :ARG2 officer),false), Span(8,9,List(37),ranking,rank-01,false), Span(6,7,List(38),high,high,false), Span(5,6,List(39),former,former,false), Span(2,3,List(40),signed,sign-02,false), Span(1,2,List(41),document,document,false)),Map(39 -> former, 30 -> and, 2 -> "Montesinos", 5 -> name, 33 -> name, 27 -> 7, 12 -> "Intelligence", 8 -> intelligence, 15 -> former, 36 -> officer, 21 -> traffic-00, 18 -> further, 24 -> mention-01, 41 -> document, 35 -> have-org-role-91, 7 -> "Montesinos", 1 -> name, 17 -> compromise-02, 23 -> link-01, 38 -> high, 26 -> 25, 4 -> person, 11 -> "National", 32 -> country, 14 -> head-01, 29 -> disclose-01, 20 -> and, 34 -> "Peru", 28 -> 2002, 6 -> "Vladimiro", 40 -> sign-02, 9 -> organization, 0 -> person, 22 -> drug, 16 -> situation, 37 -> rank-01, 19 -> possible, 10 -> name, 3 -> "Vladimiro", 31 -> army, 25 -> date-entity, 13 -> "Service"),Map(n -> name, h -> head-01, 2 -> 25, s2 -> sign-02, h2 -> have-org-role-91, t -> traffic-00, d3 -> disclose-01, p2 -> person, n4 -> name, a3 -> army, s -> situation, d -> drug, m -> mention-01, 7 -> 7, p -> person, n3 -> name, a -> and, o2 -> officer, d2 -> date-entity, f3 -> former, r -> rank-01, i -> intelligence, a2 -> and, h3 -> high, c -> compromise-02, f2 -> further, l -> link-01, d4 -> document, f -> former, 22 -> 2002, o -> organization, p3 -> possible, c2 -> country, n2 -> name))),[Ljava.lang.String;@26a2f7f9,Annotation([Ljava.lang.String;@38eb2c50,[Ljava.lang.String;@8bffb8b,[Ljava.lang.String;@21422231),Annotation([Ljava.lang.String;@10ee04df,[Ljava.lang.String;@7186333e,[Ledu.cmu.lti.nlp.amr.Dependency;@692fd26),Annotation([Ljava.lang.String;@36f1046f,[Ljava.lang.String;@56d93692,[Ljava.lang.String;@1686f0b4),Annotation([Ljava.lang.String;@76c548f,[Ljava.lang.String;@3900fa71,[Ledu.cmu.lti.nlp.amr.Entity;@26722665))
AMR:
(a / and, op, p3 / possible)
(a2 / and, op, a3 / army)
(a2 / and, op, m / mention-01)
(a2 / and, op, p3 / possible)
(a3 / army, poss, c2 / country)
(c / compromise-02, ARG0, d4 / document)
(c / compromise-02, ARG1, s / situation)
(c / compromise-02, mod, f2 / further)
(c2 / country, name, n4 / name)
(d2 / date-entity, day, 2 / 25)
(d2 / date-entity, month, 7 / 7)
(d2 / date-entity, year, 22 / 2002)
(d3 / disclose-01, ARG1, d4 / document)
(d3 / disclose-01, time, d2 / date-entity)
(h / head-01, ARG0, p / person)
(h / head-01, ARG1, i / intelligence)
(h / head-01, ARG6, o / organization)
(h / head-01, mod, f3 / former)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, a3 / army)
(h2 / have-org-role-91, ARG2, o2 / officer)
(l / link-01, ARG1, t / traffic-00)
(m / mention-01, ARG0, d4 / document)
(m / mention-01, ARG1, l / link-01)
(n / name, op, "Montesinos")
(n / name, op, "Vladimiro")
(n2 / name, op, "Montesinos")
(n2 / name, op, "Vladimiro")
(n3 / name, op, "Intelligence")
(n3 / name, op, "National")
(n3 / name, op, "Service")
(n4 / name, op, "Peru")
(o / organization, name, n3 / name)
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(r / rank-01, ARG0, s / situation)
(r / rank-01, ARG1, f / former)
(r / rank-01, ARG2, h3 / high)
(s / situation, poss, p / person)
(s2 / sign-02, ARG1, d4 / document)
(t / traffic-00, ARG1, d / drug)

Decoded in 4,894,108 microseconds
Sentence: A front-page story in Peru's national daily El Comercio said Montesinos could have authorized the military leadership at Alto Huallaga to deal in drugs so as to find the leaders of the rebel group shinning path and the Tupac Amaru Revolutionary Movement.

NER Entity: (country :name (name :op "Peru"))
NER Entity: (organization :name (name :op "El" :op "Comercio"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (organization :name (name :op "Alto" :op "Huallaga"))
NER Entity: (organization :name (name :op "Tupac" :op "Amaru" :op "Revolutionary" :op "Movement"))
NER Entity: (organization :name (name :op "Tupac" :op "Amaru" :op "Revolutionary" :op "Movement"))
NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (country :name (name :op "Peru"))
Spans:
Span 21-23:  Alto Huallaga => (province :name (name :op "Huallaga" :op "Alto"))
Span 39-40:  and => and
Span 16-17:  authorized => authorize-01
Span 14-15:  could => possible
Span 24-25:  deal => deal-01
Span 26-27:  drugs => drug
Span 10-12:  El Comercio => (newspaper :name (name :op "Comercio" :op "El"))
Span 30-31:  find => find-01
Span 1-2:  front => front
Span 36-37:  group => group
Span 32-33:  leaders => (person :ARG0-of lead-02)
Span 19-21:  leadership at => (organization :name (name :op "Alto" :op "Huallaga"))
Span 18-19:  military => military
Span 13-14:  Montesinos => (person :name (name :op "Montesinos"))
Span 8-10:  national daily => (organization :name (name :op "El" :op "Comercio"))
Span 3-4:  page => page
Span 6-7:  Peru => (country :name (name :op "Peru"))
Span 35-36:  rebel => (person :ARG0-of rebel-01)
Span 12-13:  said => say-01
Span 37-39:  shinning path => (name :op "Path" :op "Shinning")
Span 27-28:  so => so
Span 4-5:  story => story
Span 41-45:  Tupac Amaru Revolutionary Movement => (criminal-organization :name (name :op "Movement" :op "Revolutionary" :op "Amaru" :op "Tupac"))

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,45,List(5, 4, 3, 2, 1, 0),Tupac Amaru Revolutionary Movement,(criminal-organization :name (name :op "Movement" :op "Revolutionary" :op "Amaru" :op "Tupac")),false), Span(39,40,List(6),and,and,false), Span(37,39,List(9, 8, 7),shinning path,(name :op "Path" :op "Shinning"),false), Span(36,37,List(10),group,group,false), Span(35,36,List(12, 11),rebel,(person :ARG0-of rebel-01),false), Span(32,33,List(14, 13),leaders,(person :ARG0-of lead-02),false), Span(30,31,List(15),find,find-01,false), Span(27,28,List(16),so,so,false), Span(26,27,List(17),drugs,drug,false), Span(24,25,List(18),deal,deal-01,false), Span(21,23,List(22, 21, 20, 19),Alto Huallaga,(province :name (name :op "Huallaga" :op "Alto")),false), Span(19,21,List(26, 25, 24, 23),leadership at,(organization :name (name :op "Alto" :op "Huallaga")),false), Span(18,19,List(27),military,military,false), Span(16,17,List(28),authorized,authorize-01,false), Span(14,15,List(29),could,possible,false), Span(13,14,List(32, 31, 30),Montesinos,(person :name (name :op "Montesinos")),false), Span(12,13,List(33),said,say-01,false), Span(10,12,List(37, 36, 35, 34),El Comercio,(newspaper :name (name :op "Comercio" :op "El")),false), Span(8,10,List(41, 40, 39, 38),national daily,(organization :name (name :op "El" :op "Comercio")),false), Span(6,7,List(44, 43, 42),Peru,(country :name (name :op "Peru")),false), Span(4,5,List(45),story,story,false), Span(3,4,List(46),page,page,false), Span(1,2,List(47),front,front,false)),Map(45 -> story, 39 -> name, 30 -> person, 2 -> "Movement", 5 -> "Tupac", 33 -> say-01, 27 -> military, 12 -> rebel-01, 8 -> "Path", 15 -> find-01, 42 -> country, 36 -> "Comercio", 21 -> "Huallaga", 18 -> deal-01, 24 -> name, 41 -> "Comercio", 35 -> name, 7 -> name, 1 -> name, 17 -> drug, 44 -> "Peru", 23 -> organization, 38 -> organization, 47 -> front, 26 -> "Huallaga", 4 -> "Amaru", 11 -> person, 32 -> "Montesinos", 14 -> lead-02, 29 -> possible, 20 -> name, 46 -> page, 34 -> newspaper, 28 -> authorize-01, 6 -> and, 40 -> "El", 43 -> name, 9 -> "Shinning", 0 -> criminal-organization, 22 -> "Alto", 16 -> so, 37 -> "El", 19 -> province, 10 -> group, 3 -> "Revolutionary", 31 -> name, 25 -> "Alto", 13 -> person),Map(n -> name, p5 -> person, s2 -> say-01, n7 -> name, p2 -> person, n4 -> name, s -> so, d -> drug, m -> military, p -> person, g -> group, a -> and, n3 -> name, p4 -> possible, o2 -> organization, d2 -> deal-01, n6 -> newspaper, n9 -> name, r -> rebel-01, a2 -> authorize-01, c -> criminal-organization, s3 -> story, f2 -> front, p6 -> page, l -> lead-02, n8 -> name, f -> find-01, o -> organization, p3 -> province, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@7d0614f,Annotation([Ljava.lang.String;@627d8516,[Ljava.lang.String;@5c10285a,[Ljava.lang.String;@6b667cb3),Annotation([Ljava.lang.String;@6f38a289,[Ljava.lang.String;@61e3cf4d,[Ledu.cmu.lti.nlp.amr.Dependency;@3cec79d3),Annotation([Ljava.lang.String;@64b70919,[Ljava.lang.String;@4e31c3ec,[Ljava.lang.String;@3157e4c0),Annotation([Ljava.lang.String;@6eaa21d8,[Ljava.lang.String;@328902d5,[Ledu.cmu.lti.nlp.amr.Entity;@72e789cb))
AMR:
(a / and, op, p2 / person)
(a2 / authorize-01, ARG0, p5 / person)
(a2 / authorize-01, ARG1, o / organization)
(a2 / authorize-01, ARG2, n2 / name)
(c / criminal-organization, name, n / name)
(c2 / country, name, n9 / name)
(d2 / deal-01, ARG0, o / organization)
(d2 / deal-01, ARG1, d / drug)
(d2 / deal-01, ARG6, s / so)
(d2 / deal-01, purpose, f / find-01)
(f / find-01, ARG1, a / and)
(g / group, name, n2 / name)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, c / criminal-organization)
(m / military, location, p3 / province)
(n / name, op, "Amaru")
(n / name, op, "Movement")
(n / name, op, "Revolutionary")
(n / name, op, "Tupac")
(n2 / name, op, "Path")
(n2 / name, op, "Shinning")
(n3 / name, op, "Alto")
(n3 / name, op, "Huallaga")
(n4 / name, op, "Alto")
(n4 / name, op, "Huallaga")
(n5 / name, op, "Montesinos")
(n6 / newspaper, name, n7 / name)
(n7 / name, op, "Comercio")
(n7 / name, op, "El")
(n8 / name, op, "Comercio")
(n8 / name, op, "El")
(n9 / name, op, "Peru")
(o / organization, name, n4 / name)
(o2 / organization, name, n8 / name)
(o2 / organization, part, s3 / story)
(o2 / organization, poss, c2 / country)
(p3 / province, name, n3 / name)
(p3 / province, source, o / organization)
(p4 / possible, domain, a2 / authorize-01)
(p5 / person, name, n5 / name)
(p6 / page, mod, f2 / front)
(r / rebel-01, ARG0, p / person)
(r / rebel-01, ARG1, g / group)
(s2 / say-01, ARG0, s3 / story)
(s2 / say-01, ARG1, p4 / possible)
(s2 / say-01, ARG6, n6 / newspaper)
(s3 / story, mod, p6 / page)

Decoded in 4,566,752 microseconds
Sentence: Alto Huallaga is located northeast of the capital Lima.

NER Entity: (organization :name (name :op "Alto" :op "Huallaga"))
NER Entity: (country :name (name :op "Lima"))
NER Entity: (country :name (name :op "Lima"))
Spans:
Span 0-2:  Alto Huallaga => (province :name (name :op "Huallaga" :op "Alto"))
Span 7-8:  capital => capital
Span 8-9:  Lima => (city :name (name :op "Lima"))
Span 3-4:  located => locate-01
Span 4-5:  northeast => northeast

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(2, 1, 0),Lima,(city :name (name :op "Lima")),false), Span(7,8,List(3),capital,capital,false), Span(4,5,List(4),northeast,northeast,false), Span(3,4,List(5),located,locate-01,false), Span(0,2,List(9, 8, 7, 6),Alto Huallaga,(province :name (name :op "Huallaga" :op "Alto")),false)),Map(2 -> "Lima", 5 -> locate-01, 8 -> "Huallaga", 7 -> name, 1 -> name, 4 -> northeast, 6 -> province, 9 -> "Alto", 0 -> city, 3 -> capital),Map(n -> name, p -> province, n3 -> name, l -> locate-01, c -> city, n2 -> northeast, c2 -> capital))),[Ljava.lang.String;@7c1812b3,Annotation([Ljava.lang.String;@43034809,[Ljava.lang.String;@39e67516,[Ljava.lang.String;@77010a30),Annotation([Ljava.lang.String;@4bb003e9,[Ljava.lang.String;@12aa4996,[Ledu.cmu.lti.nlp.amr.Dependency;@18eec010),Annotation([Ljava.lang.String;@67c119b7,[Ljava.lang.String;@2ca5f1ed,[Ljava.lang.String;@6c03fb16),Annotation([Ljava.lang.String;@28348c6,[Ljava.lang.String;@6de0f580,[Ledu.cmu.lti.nlp.amr.Entity;@6e495b48))
AMR:
(c / city, mod, c2 / capital)
(c / city, name, n / name)
(c / city, poss, p / province)
(l / locate-01, ARG1, p / province)
(l / locate-01, ARG6, n2 / northeast)
(n / name, op, "Lima")
(n3 / name, op, "Alto")
(n3 / name, op, "Huallaga")
(p / province, name, n3 / name)

Decoded in 91,697 microseconds
Sentence: The story is based on the final report of the Attorney General' s office.

NER Entity: (thing :name (name :op "General" :op "'s"))
Spans:
Span 10-14:  Attorney General 's office => (organization :name (name :op "Office" :op "General's" :op "Attorney"))
Span 3-4:  based => base-01
Span 6-7:  final => final
Span 7-8:  report => report
Span 1-2:  story => story

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,14,List(4, 3, 2, 1, 0),Attorney General 's office,(organization :name (name :op "Office" :op "General's" :op "Attorney")),false), Span(7,8,List(5),report,report,false), Span(6,7,List(6),final,final,false), Span(3,4,List(7),based,base-01,false), Span(1,2,List(8),story,story,false)),Map(2 -> "Office", 5 -> report, 8 -> story, 7 -> base-01, 1 -> name, 4 -> "Attorney", 6 -> final, 0 -> organization, 3 -> "General's"),Map(n -> name, b -> base-01, s -> story, r -> report, f -> final, o -> organization))),[Ljava.lang.String;@1d61c6dc,Annotation([Ljava.lang.String;@53c68ce,[Ljava.lang.String;@6f9ad11c,[Ljava.lang.String;@4b2d44bc),Annotation([Ljava.lang.String;@58e92c23,[Ljava.lang.String;@3e7545e8,[Ledu.cmu.lti.nlp.amr.Dependency;@75e710b),Annotation([Ljava.lang.String;@26f7cdf8,[Ljava.lang.String;@376e7531,[Ljava.lang.String;@23202c31),Annotation([Ljava.lang.String;@5782d777,[Ljava.lang.String;@4f824872,[Ledu.cmu.lti.nlp.amr.Entity;@b016b4e))
AMR:
(b / base-01, ARG1, s / story)
(b / base-01, ARG2, r / report)
(n / name, op, "Attorney")
(n / name, op, "General's")
(n / name, op, "Office")
(o / organization, name, n / name)
(r / report, mod, f / final)
(r / report, poss, o / organization)

Decoded in 84,777 microseconds
Sentence: The Attorney General' s Office report collected an accusatory document handed over by an unnamed Peruvian army general.

NER Entity: (thing :name (name :op "General" :op "'s"))
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (thing :name (name :op "Peruvian"))
Spans:
Span 8-9:  accusatory => accuse-01
Span 16-17:  army => army
Span 6-7:  collected => collect-01
Span 9-10:  document => document
Span 17-18:  general => general
Span 2-4:  General 's => (thing :name (name :op "General" :op "'s"))
Span 10-11:  handed => hand-02
Span 4-5:  Office => office
Span 11-12:  over => over
Span 15-16:  Peruvian => (country :name (name :op "Peru"))
Span 5-6:  report => report
Span 14-15:  unnamed => (name-01 :polarity -)

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),general,general,false), Span(16,17,List(1),army,army,false), Span(15,16,List(4, 3, 2),Peruvian,(country :name (name :op "Peru")),false), Span(14,15,List(6, 5),unnamed,(name-01 :polarity -),false), Span(11,12,List(7),over,over,false), Span(10,11,List(8),handed,hand-02,false), Span(9,10,List(9),document,document,false), Span(8,9,List(10),accusatory,accuse-01,false), Span(6,7,List(11),collected,collect-01,false), Span(5,6,List(12),report,report,false), Span(4,5,List(13),Office,office,false), Span(2,4,List(17, 16, 15, 14),General 's,(thing :name (name :op "General" :op "'s")),false)),Map(2 -> country, 5 -> name-01, 12 -> report, 15 -> name, 8 -> hand-02, 7 -> over, 17 -> "'s", 1 -> army, 4 -> "Peru", 11 -> collect-01, 14 -> thing, 6 -> -, 0 -> general, 9 -> document, 16 -> "General", 3 -> name, 10 -> accuse-01, 13 -> office),Map(n -> name, h -> hand-02, t -> thing, d -> document, g -> general, n3 -> name, a -> army, o2 -> office, a2 -> accuse-01, r -> report, c -> country, o -> over, n2 -> name-01, c2 -> collect-01))),[Ljava.lang.String;@29629fbb,Annotation([Ljava.lang.String;@681adc8f,[Ljava.lang.String;@3506d826,[Ljava.lang.String;@35dd9ed3),Annotation([Ljava.lang.String;@8ff5094,[Ljava.lang.String;@363f0ba0,[Ledu.cmu.lti.nlp.amr.Dependency;@35fb22a9),Annotation([Ljava.lang.String;@6c8909c3,[Ljava.lang.String;@1e008f36,[Ljava.lang.String;@50acf55d),Annotation([Ljava.lang.String;@3cae7b8b,[Ljava.lang.String;@184dbacc,[Ledu.cmu.lti.nlp.amr.Entity;@2aeefcc))
AMR:
(a / army, mod, c / country)
(a2 / accuse-01, ARG1, t / thing)
(c / country, name, n / name)
(c2 / collect-01, ARG0, r / report)
(c2 / collect-01, ARG1, d / document)
(d / document, mod, a2 / accuse-01)
(g / general, mod, a / army)
(h / hand-02, ARG0, g / general)
(h / hand-02, ARG1, d / document)
(h / hand-02, ARG6, o / over)
(n / name, op, "Peru")
(n2 / name-01, ARG1, c / country)
(n2 / name-01, polarity, -)
(n3 / name, op, "'s")
(n3 / name, op, "General")
(r / report, mod, o2 / office)
(t / thing, name, n3 / name)

Decoded in 499,967 microseconds
Sentence: El Comercio said that in 920000 the government of then-president Alberto Fujimori put into effect the intelligence operation Scorpion to fight terrorism and drug trafficking in the Amazon region.

NER Entity: (organization :name (name :op "El" :op "Comercio"))
mkDayMonthYear(920000,00,00,92)
NER Entity: (person :name (name :op "Alberto" :op "Fujimori"))
NER Entity: (organization :name (name :op "Scorpion"))
NER Entity: (country :name (name :op "Amazon"))
NER Entity: (organization :name (name :op "Scorpion"))
mkDayMonthYear(920000,00,00,92)
Spans:
Span 10-12:  - president => (person :name (name :op "Alberto" :op "Fujimori"))
Span 5-6:  920000 => (date-entity :year 1992)
Span 29-30:  Amazon => (world-region :name (name :op "Amazon"))
Span 24-25:  and => and
Span 25-26:  drug => drug
Span 16-17:  effect => effect
Span 0-2:  El Comercio => (newspaper :name (name :op "Comercio" :op "El"))
Span 22-23:  fight => fight-01
Span 13-14:  Fujimori => (person :name (name :op "Fujimori"))
Span 7-8:  government => (government-organization :ARG0-of govern-01)
Span 18-19:  intelligence => intelligence
Span 19-20:  operation => operation
Span 14-15:  put => put-03
Span 30-31:  region => region
Span 2-3:  said => say-01
Span 20-21:  Scorpion => "Scorpion"
Span 23-24:  terrorism => terrorism
Span 9-10:  then => then
Span 26-27:  trafficking => traffic-00

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),region,region,false), Span(29,30,List(3, 2, 1),Amazon,(world-region :name (name :op "Amazon")),false), Span(26,27,List(4),trafficking,traffic-00,false), Span(25,26,List(5),drug,drug,false), Span(24,25,List(6),and,and,false), Span(23,24,List(7),terrorism,terrorism,false), Span(22,23,List(8),fight,fight-01,false), Span(20,21,List(9),Scorpion,"Scorpion",false), Span(19,20,List(10),operation,operation,false), Span(18,19,List(11),intelligence,intelligence,false), Span(16,17,List(12),effect,effect,false), Span(14,15,List(13),put,put-03,false), Span(13,14,List(16, 15, 14),Fujimori,(person :name (name :op "Fujimori")),false), Span(10,12,List(20, 19, 18, 17),- president,(person :name (name :op "Alberto" :op "Fujimori")),false), Span(9,10,List(21),then,then,false), Span(7,8,List(23, 22),government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(25, 24),920000,(date-entity :year 1992),false), Span(2,3,List(26),said,say-01,false), Span(0,2,List(30, 29, 28, 27),El Comercio,(newspaper :name (name :op "Comercio" :op "El")),false)),Map(30 -> "El", 2 -> name, 5 -> drug, 27 -> newspaper, 12 -> effect, 8 -> fight-01, 15 -> name, 21 -> then, 18 -> name, 24 -> date-entity, 7 -> terrorism, 1 -> world-region, 17 -> person, 23 -> govern-01, 26 -> say-01, 4 -> traffic-00, 11 -> intelligence, 14 -> person, 29 -> "Comercio", 20 -> "Fujimori", 28 -> name, 6 -> and, 9 -> "Scorpion", 0 -> region, 22 -> government-organization, 16 -> "Fujimori", 19 -> "Alberto", 10 -> operation, 3 -> "Amazon", 25 -> 1992, 13 -> put-03),Map(e -> effect, S -> "Scorpion", n -> name, w -> world-region, t -> traffic-00, p2 -> person, n4 -> newspaper, s -> say-01, d -> drug, t3 -> then, g2 -> govern-01, 1 -> 1992, p -> put-03, g -> government-organization, a -> and, n3 -> name, d2 -> date-entity, t2 -> terrorism, i -> intelligence, r -> region, f -> fight-01, o -> operation, p3 -> person, n2 -> name, n5 -> name))),[Ljava.lang.String;@359ff4d9,Annotation([Ljava.lang.String;@7a22a3c2,[Ljava.lang.String;@f4cfd90,[Ljava.lang.String;@7ae9a33a),Annotation([Ljava.lang.String;@301aa982,[Ljava.lang.String;@5fc930f0,[Ledu.cmu.lti.nlp.amr.Dependency;@3701e6e4),Annotation([Ljava.lang.String;@c6634d,[Ljava.lang.String;@65f58c6e,[Ljava.lang.String;@73ad7e90),Annotation([Ljava.lang.String;@4ba380c7,[Ljava.lang.String;@784c5ef5,[Ledu.cmu.lti.nlp.amr.Entity;@31133b6e))
AMR:
(S / "Scorpion", purpose, f / fight-01)
(a / and, op, t / traffic-00)
(d2 / date-entity, year, 1 / 1992)
(f / fight-01, ARG0, a / and)
(f / fight-01, ARG1, t2 / terrorism)
(f / fight-01, location, w / world-region)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, p2 / person)
(n / name, op, "Amazon")
(n2 / name, op, "Fujimori")
(n3 / name, op, "Alberto")
(n3 / name, op, "Fujimori")
(n4 / newspaper, name, n5 / name)
(n5 / name, op, "Comercio")
(n5 / name, op, "El")
(o / operation, mod, i / intelligence)
(p / put-03, ARG0, g / government-organization)
(p / put-03, ARG1, o / operation)
(p / put-03, ARG2, e / effect)
(p / put-03, purpose, f / fight-01)
(p / put-03, time, d2 / date-entity)
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)
(p3 / person, time, t3 / then)
(r / region, mod, w / world-region)
(s / say-01, ARG0, n4 / newspaper)
(s / say-01, ARG1, p / put-03)
(t / traffic-00, ARG0, p3 / person)
(t / traffic-00, ARG1, d / drug)
(w / world-region, name, n / name)

Decoded in 2,070,512 microseconds
Sentence: As part of the SCORPION plan several agents infiltrated into the groups to gather information on the main rebel and drug-trafficking commanders.

NER Entity: (country :name (name :op "SCORPION"))
NER Entity: (country :name (name :op "SCORPION"))
Spans:
Span 7-8:  agents => (have-org-role-91 :ARG2 agent)
Span 19-20:  and => and
Span 23-24:  commanders => (person :ARG0-of command-02)
Span 20-21:  drug => drug
Span 13-14:  gather => gather-01
Span 11-12:  groups => group
Span 8-9:  infiltrated => infiltrate-01
Span 14-15:  information => information
Span 17-18:  main => main
Span 5-6:  plan => plan-01
Span 18-19:  rebel => (person :ARG0-of rebel-01)
Span 4-5:  SCORPION => (event :name (name :op "Scorpion"))
Span 6-7:  several => several
Span 22-23:  trafficking => traffic-00

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),commanders,(person :ARG0-of command-02),false), Span(22,23,List(2),trafficking,traffic-00,false), Span(20,21,List(3),drug,drug,false), Span(19,20,List(4),and,and,false), Span(18,19,List(6, 5),rebel,(person :ARG0-of rebel-01),false), Span(17,18,List(7),main,main,false), Span(14,15,List(8),information,information,false), Span(13,14,List(9),gather,gather-01,false), Span(11,12,List(10),groups,group,false), Span(8,9,List(11),infiltrated,infiltrate-01,false), Span(7,8,List(13, 12),agents,(have-org-role-91 :ARG2 agent),false), Span(6,7,List(14),several,several,false), Span(5,6,List(15),plan,plan-01,false), Span(4,5,List(18, 17, 16),SCORPION,(event :name (name :op "Scorpion")),false)),Map(2 -> traffic-00, 5 -> person, 12 -> have-org-role-91, 15 -> plan-01, 8 -> information, 18 -> "Scorpion", 7 -> main, 17 -> name, 1 -> command-02, 4 -> and, 11 -> infiltrate-01, 14 -> several, 6 -> rebel-01, 0 -> person, 9 -> gather-01, 16 -> event, 3 -> drug, 10 -> group, 13 -> agent),Map(e -> event, n -> name, h -> have-org-role-91, t -> traffic-00, p2 -> person, s -> several, d -> drug, m -> main, g2 -> group, p -> person, g -> gather-01, a -> and, i2 -> infiltrate-01, a2 -> agent, r -> rebel-01, i -> information, c -> command-02, p3 -> plan-01))),[Ljava.lang.String;@29528a22,Annotation([Ljava.lang.String;@7ea08277,[Ljava.lang.String;@6401d0a0,[Ljava.lang.String;@4ce14f05),Annotation([Ljava.lang.String;@71dfcf21,[Ljava.lang.String;@b965857,[Ledu.cmu.lti.nlp.amr.Dependency;@61f80d55),Annotation([Ljava.lang.String;@27a7ef08,[Ljava.lang.String;@280e8a1a,[Ljava.lang.String;@11e33bac),Annotation([Ljava.lang.String;@30501e60,[Ljava.lang.String;@289778cd,[Ledu.cmu.lti.nlp.amr.Entity;@7495699f))
AMR:
(a / and, op, p2 / person)
(a / and, op, t / traffic-00)
(c / command-02, ARG0, p / person)
(c / command-02, ARG1, a / and)
(e / event, name, n / name)
(g / gather-01, ARG1, i / information)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, p3 / plan-01)
(h / have-org-role-91, ARG2, a2 / agent)
(i / information, topic, p / person)
(i2 / infiltrate-01, ARG1, g2 / group)
(i2 / infiltrate-01, purpose, g / gather-01)
(n / name, op, "Scorpion")
(p2 / person, mod, m / main)
(p3 / plan-01, ARG1, e / event)
(r / rebel-01, ARG0, p2 / person)
(r / rebel-01, ARG1, s / several)
(t / traffic-00, ARG1, d / drug)

Decoded in 581,302 microseconds
Sentence: There also were additional orders for transporting cocaine as a cover for the agents.

Spans:
Span 3-4:  additional => additional
Span 13-14:  agents => (have-org-role-91 :ARG2 agent)
Span 1-2:  also => also
Span 7-8:  cocaine => cocaine
Span 10-11:  cover => cover-04
Span 4-5:  orders => order-01
Span 6-7:  transporting => transport-01

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(1, 0),agents,(have-org-role-91 :ARG2 agent),false), Span(10,11,List(2),cover,cover-04,false), Span(7,8,List(3),cocaine,cocaine,false), Span(6,7,List(4),transporting,transport-01,false), Span(4,5,List(5),orders,order-01,false), Span(3,4,List(6),additional,additional,false), Span(1,2,List(7),also,also,false)),Map(2 -> cover-04, 5 -> order-01, 7 -> also, 1 -> agent, 4 -> transport-01, 6 -> additional, 0 -> have-org-role-91, 3 -> cocaine),Map(h -> have-org-role-91, t -> transport-01, a3 -> also, a -> agent, a2 -> additional, c -> cover-04, o -> order-01, c2 -> cocaine))),[Ljava.lang.String;@7c2312fa,Annotation([Ljava.lang.String;@4cb0a000,[Ljava.lang.String;@5ff2e84b,[Ljava.lang.String;@74abbb),Annotation([Ljava.lang.String;@64a4dd8d,[Ljava.lang.String;@2dddc1b9,[Ledu.cmu.lti.nlp.amr.Dependency;@65a5d4f9),Annotation([Ljava.lang.String;@40298285,[Ljava.lang.String;@22367b8,[Ljava.lang.String;@41b0ae4c),Annotation([Ljava.lang.String;@af9a89f,[Ljava.lang.String;@6482eef,[Ledu.cmu.lti.nlp.amr.Entity;@1fcf9739))
AMR:
(c / cover-04, ARG0, t / transport-01)
(h / have-org-role-91, ARG1, t / transport-01)
(h / have-org-role-91, ARG2, a / agent)
(o / order-01, ARG1, t / transport-01)
(o / order-01, mod, a2 / additional)
(o / order-01, mod, a3 / also)
(t / transport-01, ARG1, c2 / cocaine)

Decoded in 81,752 microseconds
Sentence: Montesinos was a close adviser to former Peruvian President Alberto Fujimori.

NER Entity: (person :name (name :op "Montesinos"))
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (person :name (name :op "Alberto" :op "Fujimori"))
NER Entity: (thing :name (name :op "Peruvian"))
NER Entity: (person :name (name :op "Montesinos"))
Spans:
Span 4-5:  adviser => advise-01
Span 9-11:  Alberto Fujimori => (person :name (name :op "Alberto" :op "Fujimori"))
Span 6-7:  former => former
Span 0-1:  Montesinos => (person :name (name :op "Montesinos"))
Span 7-8:  Peruvian => (country :name (name :op "Peru"))
Span 8-9:  President => (have-org-role-91 :ARG2 president)

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,11,List(3, 2, 1, 0),Alberto Fujimori,(person :name (name :op "Alberto" :op "Fujimori")),false), Span(8,9,List(5, 4),President,(have-org-role-91 :ARG2 president),false), Span(7,8,List(8, 7, 6),Peruvian,(country :name (name :op "Peru")),false), Span(6,7,List(9),former,former,false), Span(4,5,List(10),adviser,advise-01,false), Span(0,1,List(13, 12, 11),Montesinos,(person :name (name :op "Montesinos")),false)),Map(2 -> "Alberto", 5 -> president, 12 -> name, 8 -> "Peru", 7 -> name, 1 -> name, 4 -> have-org-role-91, 11 -> person, 6 -> country, 0 -> person, 9 -> former, 3 -> "Fujimori", 10 -> advise-01, 13 -> "Montesinos"),Map(n -> name, h -> have-org-role-91, p2 -> president, p -> person, n3 -> name, a -> advise-01, c -> country, f -> former, p3 -> person, n2 -> name))),[Ljava.lang.String;@5b498842,Annotation([Ljava.lang.String;@1cb37ee4,[Ljava.lang.String;@5bcb04cb,[Ljava.lang.String;@385e36d4),Annotation([Ljava.lang.String;@2fc2a205,[Ljava.lang.String;@2881ad47,[Ledu.cmu.lti.nlp.amr.Dependency;@2bef09c0),Annotation([Ljava.lang.String;@62ce72ff,[Ljava.lang.String;@58a63629,[Ljava.lang.String;@7de843ef),Annotation([Ljava.lang.String;@2e1af49b,[Ljava.lang.String;@3fd2322d,[Ledu.cmu.lti.nlp.amr.Entity;@56ac5c80))
AMR:
(a / advise-01, ARG0, p3 / person)
(a / advise-01, ARG1, p / person)
(c / country, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Alberto")
(n / name, op, "Fujimori")
(n2 / name, op, "Peru")
(n3 / name, op, "Montesinos")
(p / person, name, n / name)
(p2 / president, mod, f / former)
(p3 / person, name, n3 / name)

Decoded in 70,360 microseconds
Sentence: Fujimori resigned in 001100 over a bribery scandal and is now imprisoned in Lima for alleged connection with the scandal.

NER Entity: (person :name (name :op "Fujimori"))
mkDayMonthYear(001100,00,11,00)
NER Entity: (country :name (name :op "Lima"))
NER Entity: (country :name (name :op "Lima"))
mkDayMonthYear(001100,00,11,00)
NER Entity: (person :name (name :op "Fujimori"))
Spans:
Span 3-4:  001100 => (date-entity :month 11)
Span 15-16:  alleged => allege-01
Span 8-9:  and => and
Span 6-7:  bribery => bribe-01
Span 16-17:  connection => connect-01
Span 0-1:  Fujimori => (person :name (name :op "Fujimori"))
Span 11-12:  imprisoned => imprison-01
Span 13-14:  Lima => (city :name (name :op "Lima"))
Span 10-11:  now => now
Span 4-5:  over => over
Span 1-2:  resigned => resign-01
Span 19-20:  scandal => scandal
Span 7-8:  scandal => scandal

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),scandal,scandal,false), Span(16,17,List(1),connection,connect-01,false), Span(15,16,List(2),alleged,allege-01,false), Span(13,14,List(5, 4, 3),Lima,(city :name (name :op "Lima")),false), Span(11,12,List(6),imprisoned,imprison-01,false), Span(10,11,List(7),now,now,false), Span(8,9,List(8),and,and,false), Span(7,8,List(9),scandal,scandal,false), Span(6,7,List(10),bribery,bribe-01,false), Span(4,5,List(11),over,over,false), Span(3,4,List(13, 12),001100,(date-entity :month 11),false), Span(1,2,List(14),resigned,resign-01,false), Span(0,1,List(17, 16, 15),Fujimori,(person :name (name :op "Fujimori")),false)),Map(2 -> allege-01, 5 -> "Lima", 12 -> date-entity, 15 -> person, 8 -> and, 7 -> now, 17 -> "Fujimori", 1 -> connect-01, 4 -> name, 11 -> over, 14 -> resign-01, 6 -> imprison-01, 0 -> scandal, 9 -> scandal, 16 -> name, 3 -> city, 10 -> bribe-01, 13 -> 11),Map(n -> name, s2 -> scandal, b -> bribe-01, s -> scandal, d -> date-entity, 1 -> 11, p -> person, n3 -> name, a -> allege-01, r -> resign-01, i -> imprison-01, a2 -> and, c -> connect-01, o -> over, c2 -> city, n2 -> now))),[Ljava.lang.String;@69e49a81,Annotation([Ljava.lang.String;@1023150a,[Ljava.lang.String;@3ece1e79,[Ljava.lang.String;@ab20d7c),Annotation([Ljava.lang.String;@474fae39,[Ljava.lang.String;@4f4c789f,[Ledu.cmu.lti.nlp.amr.Dependency;@13f9ad9),Annotation([Ljava.lang.String;@1b7cae6f,[Ljava.lang.String;@21f8e55f,[Ljava.lang.String;@d5ce97f),Annotation([Ljava.lang.String;@7048535f,[Ljava.lang.String;@e3994ef,[Ledu.cmu.lti.nlp.amr.Entity;@680d4a6a))
AMR:
(a / allege-01, ARG1, d / date-entity)
(a2 / and, op, i / imprison-01)
(a2 / and, op, r / resign-01)
(c / connect-01, ARG0, s / scandal)
(c / connect-01, ARG1, p / person)
(c / connect-01, mod, a / allege-01)
(c2 / city, name, n / name)
(d / date-entity, month, 1 / 11)
(i / imprison-01, ARG1, p / person)
(i / imprison-01, ARG2, o / over)
(i / imprison-01, location, c2 / city)
(i / imprison-01, time, n2 / now)
(n / name, op, "Lima")
(n3 / name, op, "Fujimori")
(o / over, op, s2 / scandal)
(p / person, name, n3 / name)
(r / resign-01, ARG0, p / person)
(s2 / scandal, mod, b / bribe-01)

Decoded in 784,053 microseconds
Sentence: 2002-08-29

mkDayMonthYear(2002-08-29,29,08,2002)
mkDayMonthYear(2002-08-29,29,08,2002)
Spans:
Span 0-1:  2002-08-29 => (date-entity :day 29 :month 8 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-08-29,(date-entity :day 29 :month 8 :year 2002),false)),Map(2 -> 8, 1 -> 29, 0 -> date-entity, 3 -> 2002),Map(2 -> 29, 8 -> 8, d -> date-entity, 22 -> 2002))),[Ljava.lang.String;@2f04105,Annotation([Ljava.lang.String;@309028af,[Ljava.lang.String;@724c5cbe,[Ljava.lang.String;@70101687),Annotation([Ljava.lang.String;@70e889e9,[Ljava.lang.String;@418c020b,[Ledu.cmu.lti.nlp.amr.Dependency;@51351f28),Annotation([Ljava.lang.String;@21618fa7,[Ljava.lang.String;@15f2eda3,[Ljava.lang.String;@34cf294c),Annotation([Ljava.lang.String;@4d7aaca2,[Ljava.lang.String;@604b1e1d,[Ledu.cmu.lti.nlp.amr.Entity;@62566842))
AMR:
(d / date-entity, day, 2 / 29)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)

Decoded in 6,878 microseconds
Sentence: Nepal (NP)

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (organization :name (name :op "NP"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false)),Map(2 -> "Nepal", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@2f1ea80d,Annotation([Ljava.lang.String;@37191ef0,[Ljava.lang.String;@f1a45f8,[Ljava.lang.String;@5edf2821),Annotation([Ljava.lang.String;@4dbad37,[Ljava.lang.String;@7b4acdc2,[Ledu.cmu.lti.nlp.amr.Dependency;@26a262d6),Annotation([Ljava.lang.String;@11bd803,[Ljava.lang.String;@58f07f02,[Ljava.lang.String;@75798d03),Annotation([Ljava.lang.String;@40f8f5a8,[Ljava.lang.String;@1ffcf674,[Ledu.cmu.lti.nlp.amr.Entity;@442f92e6))
AMR:
(c / country, name, n / name)
(n / name, op, "Nepal")

Decoded in 4,423 microseconds
Sentence: terrorism; dissent; military

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 2-3:  dissent => dissent-01
Span 4-5:  military => military
Span 0-1:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),military,military,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),dissent,dissent-01,false), Span(1,2,List(3),;,and,false), Span(0,1,List(4),terrorism,terrorism,false)),Map(2 -> dissent-01, 1 -> and, 4 -> terrorism, 0 -> military, 3 -> and),Map(t -> terrorism, d -> dissent-01, m -> military, a -> and, a2 -> and))),[Ljava.lang.String;@7d070ef5,Annotation([Ljava.lang.String;@7a55f148,[Ljava.lang.String;@2e2f720,[Ljava.lang.String;@3ae2ed38),Annotation([Ljava.lang.String;@7f572c37,[Ljava.lang.String;@2add4d24,[Ledu.cmu.lti.nlp.amr.Dependency;@3f93e4a8),Annotation([Ljava.lang.String;@12b5454f,[Ljava.lang.String;@5445f5ba,[Ljava.lang.String;@1431267b),Annotation([Ljava.lang.String;@342726f1,[Ljava.lang.String;@c808207,[Ledu.cmu.lti.nlp.amr.Entity;@77134e08))
AMR:
(a2 / and, op, d / dissent-01)
(a2 / and, op, m / military)
(a2 / and, op, t / terrorism)
(d / dissent-01, ARG1, a / and)

Decoded in 12,108 microseconds
Sentence: Soldier injured during bomb defusion in Kathmandu after state of emergency expires.

NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Kathmandu"))
Spans:
Span 7-8:  after => after
Span 3-4:  bomb => bomb
Span 4-5:  defusion => defuse-01
Span 2-3:  during => during
Span 10-11:  emergency => emergency
Span 11-12:  expires => expire-01
Span 1-2:  injured => injure-01
Span 6-7:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 0-1:  Soldier => soldier
Span 8-9:  state => state

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),expires,expire-01,false), Span(10,11,List(1),emergency,emergency,false), Span(8,9,List(2),state,state,false), Span(7,8,List(3),after,after,false), Span(6,7,List(6, 5, 4),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(4,5,List(7),defusion,defuse-01,false), Span(3,4,List(8),bomb,bomb,false), Span(2,3,List(9),during,during,false), Span(1,2,List(10),injured,injure-01,false), Span(0,1,List(11),Soldier,soldier,false)),Map(2 -> state, 5 -> name, 8 -> bomb, 7 -> defuse-01, 1 -> emergency, 11 -> soldier, 4 -> city, 6 -> "Kathmandu", 9 -> during, 0 -> expire-01, 10 -> injure-01, 3 -> after),Map(n -> name, e -> expire-01, s2 -> soldier, b -> bomb, e2 -> emergency, s -> state, d -> defuse-01, a -> after, d2 -> during, i -> injure-01, c -> city))),[Ljava.lang.String;@6a0cbc6f,Annotation([Ljava.lang.String;@67110f71,[Ljava.lang.String;@6f89292e,[Ljava.lang.String;@20749d9),Annotation([Ljava.lang.String;@de77232,[Ljava.lang.String;@62628e78,[Ledu.cmu.lti.nlp.amr.Dependency;@44841b43),Annotation([Ljava.lang.String;@7c75db8b,[Ljava.lang.String;@4ab550d5,[Ljava.lang.String;@3cd206b5),Annotation([Ljava.lang.String;@58e85c6f,[Ljava.lang.String;@a137d7a,[Ledu.cmu.lti.nlp.amr.Entity;@6ac0b715))
AMR:
(a / after, op, e / expire-01)
(c / city, name, n / name)
(d / defuse-01, ARG1, b / bomb)
(d / defuse-01, location, c / city)
(e / expire-01, ARG1, s / state)
(i / injure-01, ARG0, d / defuse-01)
(i / injure-01, ARG1, s2 / soldier)
(i / injure-01, time, a / after)
(i / injure-01, time, d2 / during)
(n / name, op, "Kathmandu")
(s / state, mod, e2 / emergency)

Decoded in 445,384 microseconds
Sentence: A Kathmandu police officer reports --

NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Kathmandu"))
Spans:
Span 1-2:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 3-4:  officer => (have-org-role-91 :ARG2 officer)
Span 2-3:  police => police
Span 4-5:  reports => report-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),reports,report-01,false), Span(3,4,List(2, 1),officer,(have-org-role-91 :ARG2 officer),false), Span(2,3,List(3),police,police,false), Span(1,2,List(6, 5, 4),Kathmandu,(city :name (name :op "Kathmandu")),false)),Map(2 -> officer, 5 -> name, 1 -> have-org-role-91, 4 -> city, 6 -> "Kathmandu", 0 -> report-01, 3 -> police),Map(n -> name, h -> have-org-role-91, p -> police, r -> report-01, c -> city, o -> officer))),[Ljava.lang.String;@468be356,Annotation([Ljava.lang.String;@5c9ac4cc,[Ljava.lang.String;@4df39a88,[Ljava.lang.String;@2264e43c),Annotation([Ljava.lang.String;@3bec2275,[Ljava.lang.String;@31da3d60,[Ledu.cmu.lti.nlp.amr.Dependency;@60acd609),Annotation([Ljava.lang.String;@65ec8b24,[Ljava.lang.String;@3f49e266,[Ljava.lang.String;@5f18f9d2),Annotation([Ljava.lang.String;@598260a6,[Ljava.lang.String;@58b67519,[Ledu.cmu.lti.nlp.amr.Entity;@281ce6bb))
AMR:
(c / city, name, n / name)
(h / have-org-role-91, ARG1, p / police)
(h / have-org-role-91, ARG2, o / officer)
(n / name, op, "Kathmandu")
(p / police, mod, c / city)
(r / report-01, ARG1, h / have-org-role-91)

Decoded in 18,148 microseconds
Sentence: 1 soldier of the Royal Nepal Army was seriously injured on 29 August 2002 when a bomb disposal team attempted to defuse the bomb left at an electricity pole in okubahal near Sundhara in Lalitpur district in Kathmandu.

NER Entity: (organization :name (name :op "Royal"))
NER Entity: (country :name (name :op "Nepal"))
mkDayMonthYear(29	August	2002,29,August,2002)
NER Entity: (country :name (name :op "Sundhara"))
NER Entity: (country :name (name :op "Lalitpur"))
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Lalitpur"))
NER Entity: (country :name (name :op "Sundhara"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 0-1:  1 => 1
Span 11-14:  29 August 2002 => (date-entity :day 29 :month 8 :year 2002)
Span 6-7:  Army => army
Span 19-20:  attempted => attempt-01
Span 23-24:  bomb => bomb
Span 16-17:  bomb => bomb
Span 21-22:  defuse => defuse-01
Span 17-18:  disposal => dispose-01
Span 35-36:  district => district
Span 27-28:  electricity => electricity
Span 9-10:  injured => injure-01
Span 37-38:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 34-35:  Lalitpur => (name :op "Lalitpur")
Span 24-25:  left => leave-01
Span 31-32:  near => near
Span 5-6:  Nepal => (country :name (name :op "Nepal"))
Span 30-31:  okubahal => (city :name (name :op "Okubahal"))
Span 28-29:  pole => pole
Span 8-9:  seriously => serious
Span 1-2:  soldier => soldier
Span 32-33:  Sundhara => (city :name (name :op "Sundhara"))
Span 18-19:  team => team

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(2, 1, 0),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(35,36,List(3),district,district,false), Span(34,35,List(5, 4),Lalitpur,(name :op "Lalitpur"),false), Span(32,33,List(8, 7, 6),Sundhara,(city :name (name :op "Sundhara")),false), Span(31,32,List(9),near,near,false), Span(30,31,List(12, 11, 10),okubahal,(city :name (name :op "Okubahal")),false), Span(28,29,List(13),pole,pole,false), Span(27,28,List(14),electricity,electricity,false), Span(24,25,List(15),left,leave-01,false), Span(23,24,List(16),bomb,bomb,false), Span(21,22,List(17),defuse,defuse-01,false), Span(19,20,List(18),attempted,attempt-01,false), Span(18,19,List(19),team,team,false), Span(17,18,List(20),disposal,dispose-01,false), Span(16,17,List(21),bomb,bomb,false), Span(11,14,List(25, 24, 23, 22),29 August 2002,(date-entity :day 29 :month 8 :year 2002),false), Span(9,10,List(26),injured,injure-01,false), Span(8,9,List(27),seriously,serious,false), Span(6,7,List(28),Army,army,false), Span(5,6,List(31, 30, 29),Nepal,(country :name (name :op "Nepal")),false), Span(1,2,List(32),soldier,soldier,false), Span(0,1,List(33),1,1,false)),Map(30 -> name, 2 -> "Kathmandu", 5 -> "Lalitpur", 33 -> 1, 27 -> serious, 12 -> "Okubahal", 8 -> "Sundhara", 15 -> leave-01, 21 -> bomb, 18 -> attempt-01, 24 -> 8, 7 -> name, 1 -> name, 17 -> defuse-01, 23 -> 29, 26 -> injure-01, 4 -> name, 11 -> name, 32 -> soldier, 14 -> electricity, 29 -> country, 20 -> dispose-01, 28 -> army, 6 -> city, 9 -> near, 0 -> city, 22 -> date-entity, 16 -> bomb, 19 -> team, 10 -> city, 3 -> district, 31 -> "Nepal", 25 -> 2002, 13 -> pole),Map(e -> electricity, n -> name, 2 -> 29, s2 -> soldier, t -> team, b -> bomb, b2 -> bomb, d3 -> dispose-01, 8 -> 8, c4 -> country, n4 -> near, s -> serious, d -> district, 1 -> 1, p -> pole, c3 -> city, n3 -> name, a -> attempt-01, n6 -> name, d2 -> defuse-01, i -> injure-01, a2 -> army, c -> city, l -> leave-01, d4 -> date-entity, 22 -> 2002, c2 -> city, n2 -> name, n5 -> name))),[Ljava.lang.String;@30d25c03,Annotation([Ljava.lang.String;@7a1f8def,[Ljava.lang.String;@116a2108,[Ljava.lang.String;@5e8c34a0),Annotation([Ljava.lang.String;@7c1c5936,[Ljava.lang.String;@7aead3af,[Ledu.cmu.lti.nlp.amr.Dependency;@3ac8cf9b),Annotation([Ljava.lang.String;@55ec556,[Ljava.lang.String;@1b15f922,[Ljava.lang.String;@37ce3644),Annotation([Ljava.lang.String;@4b869331,[Ljava.lang.String;@38018b62,[Ledu.cmu.lti.nlp.amr.Entity;@ce9b9a9))
AMR:
(a / attempt-01, ARG0, t / team)
(a / attempt-01, ARG1, d2 / defuse-01)
(a / attempt-01, ARG6, d4 / date-entity)
(a2 / army, poss, c4 / country)
(c / city, name, n / name)
(c2 / city, name, n3 / name)
(c3 / city, location, n4 / near)
(c3 / city, name, n5 / name)
(c4 / country, name, n6 / name)
(d / district, location, c / city)
(d / district, name, n2 / name)
(d2 / defuse-01, ARG1, b2 / bomb)
(d3 / dispose-01, ARG1, b / bomb)
(d4 / date-entity, day, 2 / 29)
(d4 / date-entity, month, 8 / 8)
(d4 / date-entity, year, 22 / 2002)
(i / injure-01, ARG1, s2 / soldier)
(i / injure-01, manner, s / serious)
(i / injure-01, time, d4 / date-entity)
(l / leave-01, ARG1, b2 / bomb)
(l / leave-01, location, p / pole)
(n / name, op, "Kathmandu")
(n2 / name, op, "Lalitpur")
(n3 / name, op, "Sundhara")
(n4 / near, op, c2 / city)
(n5 / name, op, "Okubahal")
(n6 / name, op, "Nepal")
(p / pole, location, c3 / city)
(p / pole, location, d / district)
(p / pole, mod, e / electricity)
(s2 / soldier, location, a2 / army)
(s2 / soldier, quant, 1 / 1)
(t / team, mod, d3 / dispose-01)

Decoded in 2,617,516 microseconds
Sentence: Anti-government insurgents are believed to have planted the bomb.

Spans:
Span 0-1:  Anti => oppose-01
Span 5-6:  believed => believe-01
Span 10-11:  bomb => bomb
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 3-4:  insurgents => insurgent
Span 8-9:  planted => plant-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),bomb,bomb,false), Span(8,9,List(1),planted,plant-01,false), Span(5,6,List(2),believed,believe-01,false), Span(3,4,List(3),insurgents,insurgent,false), Span(2,3,List(5, 4),government,(government-organization :ARG0-of govern-01),false), Span(0,1,List(6),Anti,oppose-01,false)),Map(2 -> believe-01, 5 -> govern-01, 1 -> plant-01, 4 -> government-organization, 6 -> oppose-01, 0 -> bomb, 3 -> insurgent),Map(b -> bomb, b2 -> believe-01, g2 -> govern-01, g -> government-organization, p -> plant-01, i -> insurgent, o -> oppose-01))),[Ljava.lang.String;@4ad3d266,Annotation([Ljava.lang.String;@3533df16,[Ljava.lang.String;@15d0849,[Ljava.lang.String;@4038cd3a),Annotation([Ljava.lang.String;@14ac77b9,[Ljava.lang.String;@3f4cd155,[Ledu.cmu.lti.nlp.amr.Dependency;@563a89b5),Annotation([Ljava.lang.String;@506dcf55,[Ljava.lang.String;@270b6b5e,[Ljava.lang.String;@7e94d093),Annotation([Ljava.lang.String;@7c6189d5,[Ljava.lang.String;@4248e66b,[Ledu.cmu.lti.nlp.amr.Entity;@3e6534e7))
AMR:
(b2 / believe-01, ARG1, p / plant-01)
(g2 / govern-01, ARG0, g / government-organization)
(o / oppose-01, ARG0, i / insurgent)
(o / oppose-01, ARG1, g / government-organization)
(p / plant-01, ARG0, i / insurgent)
(p / plant-01, ARG1, b / bomb)

Decoded in 29,302 microseconds
Sentence: The injured soldier has been admitted to the army hospital in Kathmandu.

NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Kathmandu"))
Spans:
Span 5-6:  admitted => admit-01
Span 8-9:  army => army
Span 9-10:  hospital => hospital
Span 1-2:  injured => injure-01
Span 11-12:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 2-3:  soldier => soldier

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(9,10,List(3),hospital,hospital,false), Span(8,9,List(4),army,army,false), Span(5,6,List(5),admitted,admit-01,false), Span(2,3,List(6),soldier,soldier,false), Span(1,2,List(7),injured,injure-01,false)),Map(2 -> "Kathmandu", 5 -> admit-01, 7 -> injure-01, 1 -> name, 4 -> army, 6 -> soldier, 0 -> city, 3 -> hospital),Map(n -> name, h -> hospital, s -> soldier, a -> army, i -> injure-01, a2 -> admit-01, c -> city))),[Ljava.lang.String;@66ad7bf0,Annotation([Ljava.lang.String;@167279d1,[Ljava.lang.String;@138caeca,[Ljava.lang.String;@4d96250),Annotation([Ljava.lang.String;@9a6fbc0,[Ljava.lang.String;@c1fa7d4,[Ledu.cmu.lti.nlp.amr.Dependency;@7a93b263),Annotation([Ljava.lang.String;@35178483,[Ljava.lang.String;@bd1111a,[Ljava.lang.String;@7a8136b3),Annotation([Ljava.lang.String;@1de6932a,[Ljava.lang.String;@14dc3f89,[Ledu.cmu.lti.nlp.amr.Entity;@1706a5c9))
AMR:
(a2 / admit-01, ARG1, s / soldier)
(a2 / admit-01, ARG2, h / hospital)
(c / city, name, n / name)
(h / hospital, location, c / city)
(h / hospital, poss, a / army)
(i / injure-01, ARG1, s / soldier)
(n / name, op, "Kathmandu")

Decoded in 119,501 microseconds
Sentence: There is no report of any other damage or casualty in the incident.

Spans:
Span 5-6:  any => any
Span 9-10:  casualty => casualty
Span 7-8:  damage => damage-01
Span 12-13:  incident => incident
Span 2-3:  no => -
Span 8-9:  or => or
Span 6-7:  other => other
Span 3-4:  report => report

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),incident,incident,false), Span(9,10,List(1),casualty,casualty,false), Span(8,9,List(2),or,or,false), Span(7,8,List(3),damage,damage-01,false), Span(6,7,List(4),other,other,false), Span(5,6,List(5),any,any,false), Span(3,4,List(6),report,report,false), Span(2,3,List(7),no,-,false)),Map(2 -> or, 5 -> any, 7 -> -, 1 -> casualty, 4 -> other, 6 -> report, 0 -> incident, 3 -> damage-01),Map(d -> damage-01, a -> any, o2 -> other, r -> report, i -> incident, - -> -, c -> casualty, o -> or))),[Ljava.lang.String;@64412d34,Annotation([Ljava.lang.String;@4d178d55,[Ljava.lang.String;@38c2c309,[Ljava.lang.String;@1a480135),Annotation([Ljava.lang.String;@778db7c5,[Ljava.lang.String;@681e144,[Ledu.cmu.lti.nlp.amr.Dependency;@2875b016),Annotation([Ljava.lang.String;@72ee5d84,[Ljava.lang.String;@68c7ef83,[Ljava.lang.String;@6145b81e),Annotation([Ljava.lang.String;@64355120,[Ljava.lang.String;@64b7225f,[Ledu.cmu.lti.nlp.amr.Entity;@33db72bd))
AMR:
(d / damage-01, ARG1, - / -)
(d / damage-01, mod, a / any)
(d / damage-01, mod, o2 / other)
(o / or, op, c / casualty)
(o / or, op, d / damage-01)
(o / or, op, r / report)
(r / report, prep-in, i / incident)

Decoded in 65,048 microseconds
Sentence: This is the second bomb explosion in Kathmandu since the morning of 28 August 2002 when a bomb exploded at bishalbazar supermarket in the heart of the city.

NER Entity: (country :name (name :op "Kathmandu"))
mkDayMonthYear(28	August	2002,28,August,2002)
NER Entity: (country :name (name :op "Kathmandu"))
Spans:
Span 12-15:  28 August 2002 => (date-entity :day 28 :month 8 :year 2002)
Span 17-18:  bomb => bomb
Span 4-5:  bomb => bomb
Span 27-28:  city => city
Span 18-19:  exploded => explode-01
Span 5-6:  explosion => explode-01
Span 24-25:  heart => heart
Span 7-8:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 10-11:  morning => morning
Span 8-9:  since => since
Span 21-22:  supermarket => supermarket
Span 0-1:  This => this

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),city,city,false), Span(24,25,List(1),heart,heart,false), Span(21,22,List(2),supermarket,supermarket,false), Span(18,19,List(3),exploded,explode-01,false), Span(17,18,List(4),bomb,bomb,false), Span(12,15,List(8, 7, 6, 5),28 August 2002,(date-entity :day 28 :month 8 :year 2002),false), Span(10,11,List(9),morning,morning,false), Span(8,9,List(10),since,since,false), Span(7,8,List(13, 12, 11),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(5,6,List(14),explosion,explode-01,false), Span(4,5,List(15),bomb,bomb,false), Span(0,1,List(16),This,this,false)),Map(2 -> supermarket, 5 -> date-entity, 12 -> name, 15 -> bomb, 8 -> 2002, 7 -> 8, 1 -> heart, 4 -> bomb, 11 -> city, 14 -> explode-01, 6 -> 28, 0 -> city, 9 -> morning, 16 -> this, 3 -> explode-01, 10 -> since, 13 -> "Kathmandu"),Map(e -> explode-01, n -> name, h -> heart, 2 -> 28, s2 -> since, t -> this, b -> bomb, b2 -> bomb, 8 -> 8, e2 -> explode-01, s -> supermarket, d -> date-entity, m -> morning, c -> city, 22 -> 2002, c2 -> city))),[Ljava.lang.String;@7f92b990,Annotation([Ljava.lang.String;@31e04b13,[Ljava.lang.String;@6c1832aa,[Ljava.lang.String;@4beeb0e),Annotation([Ljava.lang.String;@6e8a9c30,[Ljava.lang.String;@5d01ea21,[Ledu.cmu.lti.nlp.amr.Dependency;@70211e49),Annotation([Ljava.lang.String;@3b46dd8,[Ljava.lang.String;@39651a82,[Ljava.lang.String;@6be7bf6d),Annotation([Ljava.lang.String;@134c370e,[Ljava.lang.String;@33364212,[Ledu.cmu.lti.nlp.amr.Entity;@2216effc))
AMR:
(b / bomb, mod, t / this)
(c / city, part, h / heart)
(c2 / city, name, n / name)
(d / date-entity, day, 2 / 28)
(d / date-entity, dayperiod, m / morning)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)
(e / explode-01, ARG1, b / bomb)
(e / explode-01, location, c2 / city)
(e / explode-01, time, s2 / since)
(e2 / explode-01, ARG0, m / morning)
(e2 / explode-01, ARG1, b2 / bomb)
(h / heart, mod, t / this)
(n / name, op, "Kathmandu")
(s / supermarket, location, h / heart)
(t / this, mod, e2 / explode-01)

Decoded in 619,341 microseconds
Sentence: The explosion damaged the windowpanes of approximately a dozen shops and injured 2 customers.

Spans:
Span 12-13:  2 => 2
Span 10-11:  and => and
Span 6-7:  approximately => approximately
Span 13-14:  customers => customer
Span 2-3:  damaged => damage-01
Span 8-9:  dozen => dozen
Span 1-2:  explosion => explode-01
Span 11-12:  injured => injure-01
Span 9-10:  shops => shop
Span 4-5:  windowpanes => windowpane

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),customers,customer,false), Span(12,13,List(1),2,2,false), Span(11,12,List(2),injured,injure-01,false), Span(10,11,List(3),and,and,false), Span(9,10,List(4),shops,shop,false), Span(8,9,List(5),dozen,dozen,false), Span(6,7,List(6),approximately,approximately,false), Span(4,5,List(7),windowpanes,windowpane,false), Span(2,3,List(8),damaged,damage-01,false), Span(1,2,List(9),explosion,explode-01,false)),Map(2 -> injure-01, 5 -> dozen, 8 -> damage-01, 7 -> windowpane, 1 -> 2, 4 -> shop, 6 -> approximately, 9 -> explode-01, 0 -> customer, 3 -> and),Map(e -> explode-01, w -> windowpane, 2 -> 2, s -> shop, d -> dozen, a -> and, d2 -> damage-01, a2 -> approximately, i -> injure-01, c -> customer))),[Ljava.lang.String;@745c2004,Annotation([Ljava.lang.String;@6da9dc6,[Ljava.lang.String;@7fd69dd,[Ljava.lang.String;@12010fd1),Annotation([Ljava.lang.String;@7c84195,[Ljava.lang.String;@552ed807,[Ledu.cmu.lti.nlp.amr.Dependency;@3971f0fe),Annotation([Ljava.lang.String;@23940f86,[Ljava.lang.String;@66153688,[Ljava.lang.String;@455824ad),Annotation([Ljava.lang.String;@7318daf8,[Ljava.lang.String;@70f31322,[Ledu.cmu.lti.nlp.amr.Entity;@3f1ddac2))
AMR:
(a / and, op, d2 / damage-01)
(a / and, op, i / injure-01)
(a2 / approximately, op, d / dozen)
(c / customer, quant, 2 / 2)
(d2 / damage-01, ARG0, e / explode-01)
(d2 / damage-01, ARG1, w / windowpane)
(i / injure-01, ARG0, e / explode-01)
(i / injure-01, ARG1, c / customer)
(s / shop, mod, a2 / approximately)
(w / windowpane, poss, s / shop)

Decoded in 54,834 microseconds
Sentence: A state of emergency expired the evening of 28 August 2002 and the Nepali government has not yet decided to re-impose it.

mkDayMonthYear(28	August	2002,28,August,2002)
NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "Nepali"))
Spans:
Span 8-11:  28 August 2002 => (date-entity :day 28 :month 8 :year 2002)
Span 11-12:  and => and
Span 18-19:  decided => decide-01
Span 3-4:  emergency => emergency
Span 6-7:  evening => evening
Span 4-5:  expired => expire-01
Span 14-15:  government => (government-organization :ARG0-of govern-01)
Span 22-23:  impose => impose-01
Span 23-24:  it => it
Span 13-14:  Nepali => (country :name (name :op "Nepal"))
Span 1-2:  state => state
Span 17-18:  yet => yet

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),it,it,false), Span(22,23,List(1),impose,impose-01,false), Span(18,19,List(2),decided,decide-01,false), Span(17,18,List(3),yet,yet,false), Span(14,15,List(5, 4),government,(government-organization :ARG0-of govern-01),false), Span(13,14,List(8, 7, 6),Nepali,(country :name (name :op "Nepal")),false), Span(11,12,List(9),and,and,false), Span(8,11,List(13, 12, 11, 10),28 August 2002,(date-entity :day 28 :month 8 :year 2002),false), Span(6,7,List(14),evening,evening,false), Span(4,5,List(15),expired,expire-01,false), Span(3,4,List(16),emergency,emergency,false), Span(1,2,List(17),state,state,false)),Map(2 -> decide-01, 5 -> govern-01, 12 -> 8, 15 -> expire-01, 8 -> "Nepal", 7 -> name, 17 -> state, 1 -> impose-01, 4 -> government-organization, 11 -> 28, 14 -> evening, 6 -> country, 0 -> it, 9 -> and, 16 -> emergency, 3 -> yet, 10 -> date-entity, 13 -> 2002),Map(e -> evening, n -> name, 2 -> 28, 8 -> 8, e2 -> expire-01, s -> state, d -> decide-01, g2 -> govern-01, y -> yet, g -> government-organization, a -> and, d2 -> date-entity, i2 -> impose-01, i -> it, c -> country, 22 -> 2002, e3 -> emergency))),[Ljava.lang.String;@3be4fcc0,Annotation([Ljava.lang.String;@e1e2e5e,[Ljava.lang.String;@661c46bc,[Ljava.lang.String;@37864b77),Annotation([Ljava.lang.String;@2b98b3bb,[Ljava.lang.String;@540b0448,[Ledu.cmu.lti.nlp.amr.Dependency;@50a691d3),Annotation([Ljava.lang.String;@557eb543,[Ljava.lang.String;@3b95d13c,[Ljava.lang.String;@3730ab42),Annotation([Ljava.lang.String;@537c8c7e,[Ljava.lang.String;@7308ffff,[Ledu.cmu.lti.nlp.amr.Entity;@6601cc93))
AMR:
(a / and, op, d / decide-01)
(a / and, op, e2 / expire-01)
(c / country, name, n / name)
(d / decide-01, ARG0, g / government-organization)
(d / decide-01, ARG1, i2 / impose-01)
(d / decide-01, time, y / yet)
(d2 / date-entity, day, 2 / 28)
(d2 / date-entity, dayperiod, e / evening)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 22 / 2002)
(e2 / expire-01, ARG1, s / state)
(e2 / expire-01, time, d2 / date-entity)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(i2 / impose-01, ARG1, i / it)
(n / name, op, "Nepal")
(s / state, mod, e3 / emergency)

Decoded in 245,802 microseconds
Sentence: 2002-09-05

mkDayMonthYear(2002-09-05,05,09,2002)
mkDayMonthYear(2002-09-05,05,09,2002)
Spans:
Span 0-1:  2002-09-05 => (date-entity :day 5 :month 9 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-09-05,(date-entity :day 5 :month 9 :year 2002),false)),Map(2 -> 9, 1 -> 5, 0 -> date-entity, 3 -> 2002),Map(2 -> 2002, 5 -> 5, d -> date-entity, 9 -> 9))),[Ljava.lang.String;@54d901aa,Annotation([Ljava.lang.String;@63716833,[Ljava.lang.String;@573284a5,[Ljava.lang.String;@3fbfbf84),Annotation([Ljava.lang.String;@23f72d88,[Ljava.lang.String;@4bafe935,[Ledu.cmu.lti.nlp.amr.Dependency;@87b5b49),Annotation([Ljava.lang.String;@4a7a965d,[Ljava.lang.String;@507b79f7,[Ljava.lang.String;@64a9d48c),Annotation([Ljava.lang.String;@365a6a43,[Ljava.lang.String;@288cdaab,[Ledu.cmu.lti.nlp.amr.Entity;@23b3aa8c))
AMR:
(d / date-entity, day, 5 / 5)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2002)

Decoded in 6,890 microseconds
Sentence: Nepal (NP)

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (organization :name (name :op "NP"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false)),Map(2 -> "Nepal", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@99407c2,Annotation([Ljava.lang.String;@6c796cc1,[Ljava.lang.String;@226eba67,[Ljava.lang.String;@1cb7936c),Annotation([Ljava.lang.String;@35342d2f,[Ljava.lang.String;@128c502c,[Ledu.cmu.lti.nlp.amr.Dependency;@45667d98),Annotation([Ljava.lang.String;@65eabaab,[Ljava.lang.String;@7123be6c,[Ljava.lang.String;@1de9d54),Annotation([Ljava.lang.String;@77a2aa4a,[Ljava.lang.String;@47ad69f7,[Ledu.cmu.lti.nlp.amr.Entity;@2b917fb0))
AMR:
(c / country, name, n / name)
(n / name, op, "Nepal")

Decoded in 4,424 microseconds
Sentence: terrorism; politics; dissent

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  dissent => dissent-01
Span 2-3:  politics => politics
Span 0-1:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),dissent,dissent-01,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),politics,politics,false), Span(1,2,List(3),;,and,false), Span(0,1,List(4),terrorism,terrorism,false)),Map(2 -> politics, 1 -> and, 4 -> terrorism, 0 -> dissent-01, 3 -> and),Map(t -> terrorism, d -> dissent-01, p -> politics, a -> and, a2 -> and))),[Ljava.lang.String;@5e5073ab,Annotation([Ljava.lang.String;@3c4262d1,[Ljava.lang.String;@100c567f,[Ljava.lang.String;@30c0d731),Annotation([Ljava.lang.String;@6d5037a9,[Ljava.lang.String;@422b8438,[Ledu.cmu.lti.nlp.amr.Dependency;@30669dac),Annotation([Ljava.lang.String;@629adce,[Ljava.lang.String;@6a282fdd,[Ljava.lang.String;@743c6ce4),Annotation([Ljava.lang.String;@70331432,[Ljava.lang.String;@3bbf9027,[Ledu.cmu.lti.nlp.amr.Entity;@10c2064a))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, d / dissent-01)
(a2 / and, op, p / politics)
(a2 / and, op, t / terrorism)

Decoded in 12,160 microseconds
Sentence: Anti-government insurgents in Nepal escalate bombings and murders following end of state of emergency.

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 8-9:  and => and
Span 0-1:  Anti => oppose-01
Span 7-8:  bombings => bomb-01
Span 15-16:  emergency => emergency
Span 11-12:  end => end-01
Span 6-7:  escalate => escalate-01
Span 10-11:  following => follow-01
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 3-4:  insurgents => insurgent
Span 9-10:  murders => murder-01
Span 5-6:  Nepal => (country :name (name :op "Nepal"))
Span 13-14:  state => state

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),emergency,emergency,false), Span(13,14,List(1),state,state,false), Span(11,12,List(2),end,end-01,false), Span(10,11,List(3),following,follow-01,false), Span(9,10,List(4),murders,murder-01,false), Span(8,9,List(5),and,and,false), Span(7,8,List(6),bombings,bomb-01,false), Span(6,7,List(7),escalate,escalate-01,false), Span(5,6,List(10, 9, 8),Nepal,(country :name (name :op "Nepal")),false), Span(3,4,List(11),insurgents,insurgent,false), Span(2,3,List(13, 12),government,(government-organization :ARG0-of govern-01),false), Span(0,1,List(14),Anti,oppose-01,false)),Map(2 -> end-01, 5 -> and, 12 -> government-organization, 8 -> country, 7 -> escalate-01, 1 -> state, 4 -> murder-01, 11 -> insurgent, 14 -> oppose-01, 6 -> bomb-01, 0 -> emergency, 9 -> name, 3 -> follow-01, 10 -> "Nepal", 13 -> govern-01),Map(e -> emergency, n -> name, b -> bomb-01, e2 -> end-01, s -> state, m -> murder-01, g2 -> govern-01, g -> government-organization, a -> and, i -> insurgent, c -> country, f -> follow-01, o -> oppose-01, e3 -> escalate-01))),[Ljava.lang.String;@70e13fa,Annotation([Ljava.lang.String;@6ff415ad,[Ljava.lang.String;@280d9edc,[Ljava.lang.String;@28fd3dc1),Annotation([Ljava.lang.String;@5f9b6ae7,[Ljava.lang.String;@108d55c4,[Ledu.cmu.lti.nlp.amr.Dependency;@5432c277),Annotation([Ljava.lang.String;@15e0fe05,[Ljava.lang.String;@1128620c,[Ljava.lang.String;@6bf13698),Annotation([Ljava.lang.String;@299270eb,[Ljava.lang.String;@3b90a30a,[Ledu.cmu.lti.nlp.amr.Entity;@69fa8e76))
AMR:
(a / and, op, b / bomb-01)
(a / and, op, m / murder-01)
(c / country, name, n / name)
(e2 / end-01, ARG1, s / state)
(e3 / escalate-01, ARG0, i / insurgent)
(e3 / escalate-01, ARG1, a / and)
(f / follow-01, ARG1, e3 / escalate-01)
(f / follow-01, ARG2, e2 / end-01)
(g2 / govern-01, ARG0, g / government-organization)
(i / insurgent, location, c / country)
(n / name, op, "Nepal")
(o / oppose-01, ARG0, i / insurgent)
(o / oppose-01, ARG1, g / government-organization)
(s / state, mod, e / emergency)

Decoded in 415,696 microseconds
Sentence: Insurgents plan attacks during mid-term parliamentary elections.

Spans:
Span 2-3:  attacks => attack-01
Span 3-4:  during => during
Span 8-9:  elections => elect-01
Span 0-1:  Insurgents => insurgent
Span 4-5:  mid => mid
Span 7-8:  parliamentary => parliament
Span 1-2:  plan => plan-01
Span 6-7:  term => term

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),elections,elect-01,false), Span(7,8,List(1),parliamentary,parliament,false), Span(6,7,List(2),term,term,false), Span(4,5,List(3),mid,mid,false), Span(3,4,List(4),during,during,false), Span(2,3,List(5),attacks,attack-01,false), Span(1,2,List(6),plan,plan-01,false), Span(0,1,List(7),Insurgents,insurgent,false)),Map(2 -> term, 5 -> attack-01, 7 -> insurgent, 1 -> parliament, 4 -> during, 6 -> plan-01, 0 -> elect-01, 3 -> mid),Map(e -> elect-01, t -> term, p2 -> plan-01, d -> during, m -> mid, p -> parliament, a -> attack-01, i -> insurgent))),[Ljava.lang.String;@bdd2027,Annotation([Ljava.lang.String;@31f20c9f,[Ljava.lang.String;@f446158,[Ljava.lang.String;@32f0c7f8),Annotation([Ljava.lang.String;@504e1599,[Ljava.lang.String;@71f96dfb,[Ledu.cmu.lti.nlp.amr.Dependency;@5d1b9c3d),Annotation([Ljava.lang.String;@69e05f61,[Ljava.lang.String;@49a26d19,[Ljava.lang.String;@730e5763),Annotation([Ljava.lang.String;@7275c74b,[Ljava.lang.String;@19058533,[Ledu.cmu.lti.nlp.amr.Entity;@4315e9af))
AMR:
(a / attack-01, location, d / during)
(e / elect-01, ARG2, p / parliament)
(e / elect-01, mod, m / mid)
(e / elect-01, mod, t / term)
(p2 / plan-01, ARG0, i / insurgent)
(p2 / plan-01, ARG1, a / attack-01)
(p2 / plan-01, time, e / elect-01)

Decoded in 109,934 microseconds
Sentence: 20020828 a nine month long nationwide state of emergency in Nepal expired.

mkDayMonthYear(20020828,28,08,2002)
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
mkDayMonthYear(20020828,28,08,2002)
Spans:
Span 0-1:  20020828 => (date-entity :day 28 :month 8 :year 2002)
Span 8-9:  emergency => emergency
Span 11-12:  expired => expire-01
Span 4-5:  long => long
Span 3-4:  month => (temporal-quantity :unit month)
Span 5-6:  nationwide => nationwide
Span 10-11:  Nepal => (country :name (name :op "Nepal"))
Span 2-3:  nine => 9
Span 6-7:  state => state

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),expired,expire-01,false), Span(10,11,List(3, 2, 1),Nepal,(country :name (name :op "Nepal")),false), Span(8,9,List(4),emergency,emergency,false), Span(6,7,List(5),state,state,false), Span(5,6,List(6),nationwide,nationwide,false), Span(4,5,List(7),long,long,false), Span(3,4,List(9, 8),month,(temporal-quantity :unit month),false), Span(2,3,List(10),nine,9,false), Span(0,1,List(14, 13, 12, 11),20020828,(date-entity :day 28 :month 8 :year 2002),false)),Map(2 -> name, 5 -> state, 12 -> 28, 8 -> temporal-quantity, 7 -> long, 1 -> country, 4 -> emergency, 11 -> date-entity, 14 -> 2002, 6 -> nationwide, 0 -> expire-01, 9 -> month, 3 -> "Nepal", 10 -> 9, 13 -> 8),Map(e -> expire-01, n -> name, 2 -> 28, t -> temporal-quantity, 8 -> 8, e2 -> emergency, s -> state, m -> month, d -> date-entity, c -> country, l -> long, 22 -> 2002, 9 -> 9, n2 -> nationwide))),[Ljava.lang.String;@42210be1,Annotation([Ljava.lang.String;@1eb2d371,[Ljava.lang.String;@2babf189,[Ljava.lang.String;@479f2dc2),Annotation([Ljava.lang.String;@dab48d3,[Ljava.lang.String;@58a2b4c,[Ledu.cmu.lti.nlp.amr.Dependency;@7159a5cd),Annotation([Ljava.lang.String;@4f966719,[Ljava.lang.String;@18ac53e8,[Ljava.lang.String;@4ca8dbfa),Annotation([Ljava.lang.String;@7063686f,[Ljava.lang.String;@c3177d5,[Ledu.cmu.lti.nlp.amr.Entity;@76f856a8))
AMR:
(c / country, name, n / name)
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)
(e / expire-01, ARG1, s / state)
(e / expire-01, time, d / date-entity)
(n / name, op, "Nepal")
(s / state, duration, t / temporal-quantity)
(s / state, extent, n2 / nationwide)
(s / state, location, c / country)
(s / state, mod, e2 / emergency)
(s / state, mod, l / long)
(t / temporal-quantity, quant, 9 / 9)
(t / temporal-quantity, unit, m / month)

Decoded in 84,651 microseconds
Sentence: Violence by anti-government insurgents across Nepal has escalated and bomb threats and explosions have occurred throughout the country.

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 6-7:  across => across
Span 13-14:  and => and
Span 10-11:  and => and
Span 11-12:  bomb => bomb
Span 19-20:  country => country
Span 9-10:  escalated => escalate-01
Span 14-15:  explosions => explode-01
Span 4-5:  government => (government-organization :ARG0-of govern-01)
Span 5-6:  insurgents => insurgent
Span 7-8:  Nepal => (country :name (name :op "Nepal"))
Span 16-17:  occurred => occur-01
Span 12-13:  threats => threaten-01
Span 17-18:  throughout => throughout
Span 0-1:  Violence => violence

Langrangian relaxation converged after 9 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),country,country,false), Span(17,18,List(1),throughout,throughout,false), Span(16,17,List(2),occurred,occur-01,false), Span(14,15,List(3),explosions,explode-01,false), Span(13,14,List(4),and,and,false), Span(12,13,List(5),threats,threaten-01,false), Span(11,12,List(6),bomb,bomb,false), Span(10,11,List(7),and,and,false), Span(9,10,List(8),escalated,escalate-01,false), Span(7,8,List(11, 10, 9),Nepal,(country :name (name :op "Nepal")),false), Span(6,7,List(12),across,across,false), Span(5,6,List(13),insurgents,insurgent,false), Span(4,5,List(15, 14),government,(government-organization :ARG0-of govern-01),false), Span(0,1,List(16),Violence,violence,false)),Map(2 -> occur-01, 5 -> threaten-01, 12 -> across, 15 -> govern-01, 8 -> escalate-01, 7 -> and, 1 -> throughout, 4 -> and, 11 -> "Nepal", 14 -> government-organization, 6 -> bomb, 0 -> country, 9 -> country, 16 -> violence, 3 -> explode-01, 10 -> name, 13 -> insurgent),Map(e -> explode-01, n -> name, t -> throughout, b -> bomb, e2 -> escalate-01, a3 -> across, v -> violence, g2 -> govern-01, g -> government-organization, a -> and, t2 -> threaten-01, a2 -> and, i -> insurgent, c -> country, o -> occur-01, c2 -> country))),[Ljava.lang.String;@7c853486,Annotation([Ljava.lang.String;@174e1b69,[Ljava.lang.String;@1046498a,[Ljava.lang.String;@243f003c),Annotation([Ljava.lang.String;@71cb3139,[Ljava.lang.String;@1639f93a,[Ledu.cmu.lti.nlp.amr.Dependency;@3491e86e),Annotation([Ljava.lang.String;@68f32020,[Ljava.lang.String;@409986fe,[Ljava.lang.String;@19b047fe),Annotation([Ljava.lang.String;@22590e3e,[Ljava.lang.String;@53dad875,[Ledu.cmu.lti.nlp.amr.Entity;@5f780a86))
AMR:
(a / and, op, e / explode-01)
(a / and, op, t2 / threaten-01)
(a2 / and, op, e2 / escalate-01)
(a2 / and, op, o / occur-01)
(a3 / across, op, c2 / country)
(c2 / country, name, n / name)
(e2 / escalate-01, ARG1, v / violence)
(g2 / govern-01, ARG0, g / government-organization)
(i / insurgent, location, c2 / country)
(n / name, op, "Nepal")
(o / occur-01, ARG0, g / government-organization)
(o / occur-01, ARG1, a / and)
(o / occur-01, location, t / throughout)
(t / throughout, op, c / country)
(t2 / threaten-01, ARG1, b / bomb)
(v / violence, location, a3 / across)

Decoded in 268,967 microseconds
Sentence: At least 5 major bomb incidents occurred in the Kathmandu Valley 20020828-20020904.

NER Entity: (country :name (name :op "Kathmandu" :op "Valley"))
Spans:
Span 11-12:  20020828-20020904 => 2002
Span 2-3:  5 => 5
Span 4-5:  bomb => bomb
Span 5-6:  incidents => incident
Span 9-11:  Kathmandu Valley => (country :name (name :op "Kathmandu" :op "Valley"))
Span 3-4:  major => major
Span 6-7:  occurred => occur-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(0),20020828-20020904,2002,false), Span(9,11,List(4, 3, 2, 1),Kathmandu Valley,(country :name (name :op "Kathmandu" :op "Valley")),false), Span(6,7,List(5),occurred,occur-01,false), Span(5,6,List(6),incidents,incident,false), Span(4,5,List(7),bomb,bomb,false), Span(3,4,List(8),major,major,false), Span(2,3,List(9),5,5,false)),Map(2 -> name, 5 -> occur-01, 8 -> major, 7 -> bomb, 1 -> country, 4 -> "Valley", 6 -> incident, 9 -> 5, 0 -> 2002, 3 -> "Kathmandu"),Map(n -> name, 2 -> 2002, 5 -> 5, b -> bomb, m -> major, i -> incident, c -> country, o -> occur-01))),[Ljava.lang.String;@446c3920,Annotation([Ljava.lang.String;@2eaef76d,[Ljava.lang.String;@2b329bbd,[Ljava.lang.String;@34819867),Annotation([Ljava.lang.String;@118102ee,[Ljava.lang.String;@48cd9a2c,[Ledu.cmu.lti.nlp.amr.Dependency;@771d1ffb),Annotation([Ljava.lang.String;@4f67e3df,[Ljava.lang.String;@56681eaf,[Ljava.lang.String;@72d0f2b4),Annotation([Ljava.lang.String;@6d2dc9d2,[Ljava.lang.String;@1da4b6b3,[Ledu.cmu.lti.nlp.amr.Entity;@b2f4ece))
AMR:
(2 / 2002, mod, c / country)
(5 / 5, mod, c / country)
(c / country, name, n / name)
(i / incident, mod, b / bomb)
(i / incident, mod, m / major)
(n / name, op, "Kathmandu")
(n / name, op, "Valley")
(o / occur-01, ARG1, i / incident)
(o / occur-01, location, c / country)

Decoded in 99,010 microseconds
Sentence: 20020828 a bomb exploded at a supermarket in the center of Kathmandu city, injuring 2.

mkDayMonthYear(20020828,28,08,2002)
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Kathmandu"))
mkDayMonthYear(20020828,28,08,2002)
Spans:
Span 15-16:  2 => 2
Span 0-1:  20020828 => (date-entity :day 28 :month 8 :year 2002)
Span 2-3:  bomb => bomb
Span 9-10:  center => center
Span 12-13:  city => city
Span 3-4:  exploded => explode-01
Span 14-15:  injuring => injure-01
Span 11-12:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 6-7:  supermarket => supermarket

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),2,2,false), Span(14,15,List(1),injuring,injure-01,false), Span(12,13,List(2),city,city,false), Span(11,12,List(5, 4, 3),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(9,10,List(6),center,center,false), Span(6,7,List(7),supermarket,supermarket,false), Span(3,4,List(8),exploded,explode-01,false), Span(2,3,List(9),bomb,bomb,false), Span(0,1,List(13, 12, 11, 10),20020828,(date-entity :day 28 :month 8 :year 2002),false)),Map(2 -> city, 5 -> "Kathmandu", 12 -> 8, 8 -> explode-01, 7 -> supermarket, 1 -> injure-01, 4 -> name, 11 -> 28, 6 -> center, 0 -> 2, 9 -> bomb, 3 -> city, 10 -> date-entity, 13 -> 2002),Map(e -> explode-01, n -> name, 2 -> 2, b -> bomb, 8 -> 8, s -> supermarket, d -> date-entity, 23 -> 2002, c3 -> center, i -> injure-01, c -> city, 22 -> 28, c2 -> city))),[Ljava.lang.String;@7e1f584d,Annotation([Ljava.lang.String;@7dff6d05,[Ljava.lang.String;@45d64d27,[Ljava.lang.String;@34fe326d),Annotation([Ljava.lang.String;@30a7c98f,[Ljava.lang.String;@36361ddb,[Ledu.cmu.lti.nlp.amr.Dependency;@41fed14f),Annotation([Ljava.lang.String;@4d6ee47,[Ljava.lang.String;@a33b4e3,[Ljava.lang.String;@c6da8bb),Annotation([Ljava.lang.String;@3bae64d0,[Ljava.lang.String;@8b91134,[Ledu.cmu.lti.nlp.amr.Entity;@1fba386c))
AMR:
(c / city, mod, c2 / city)
(c2 / city, name, n / name)
(c3 / center, location, c / city)
(d / date-entity, day, 22 / 28)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 23 / 2002)
(e / explode-01, ARG1, b / bomb)
(e / explode-01, location, s / supermarket)
(e / explode-01, time, d / date-entity)
(i / injure-01, ARG0, e / explode-01)
(i / injure-01, ARG1, 2 / 2)
(n / name, op, "Kathmandu")
(s / supermarket, location, c3 / center)

Decoded in 316,139 microseconds
Sentence: 20020829 in Lalitpur district, Kathmandu valley 1 soldier was killed by a bomb.

mkDayMonthYear(20020829,29,08,2002)
NER Entity: (country :name (name :op "Lalitpur"))
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Lalitpur"))
mkDayMonthYear(20020829,29,08,2002)
Spans:
Span 7-8:  1 => 1
Span 0-1:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Span 13-14:  bomb => bomb
Span 3-4:  district => district
Span 5-6:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 10-11:  killed => kill-01
Span 2-3:  Lalitpur => (name :op "Lalitpur")
Span 8-9:  soldier => soldier
Span 6-7:  valley => valley

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),bomb,bomb,false), Span(10,11,List(1),killed,kill-01,false), Span(8,9,List(2),soldier,soldier,false), Span(7,8,List(3),1,1,false), Span(6,7,List(4),valley,valley,false), Span(5,6,List(7, 6, 5),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(3,4,List(8),district,district,false), Span(2,3,List(10, 9),Lalitpur,(name :op "Lalitpur"),false), Span(0,1,List(14, 13, 12, 11),20020829,(date-entity :day 29 :month 8 :year 2002),false)),Map(2 -> soldier, 5 -> city, 12 -> 29, 8 -> district, 7 -> "Kathmandu", 1 -> kill-01, 4 -> valley, 11 -> date-entity, 14 -> 2002, 6 -> name, 0 -> bomb, 9 -> name, 3 -> 1, 10 -> "Lalitpur", 13 -> 8),Map(n -> name, 2 -> 29, b -> bomb, k -> kill-01, 8 -> 8, s -> soldier, v -> valley, d -> district, 1 -> 1, d2 -> date-entity, c -> city, 22 -> 2002, n2 -> name))),[Ljava.lang.String;@7e736350,Annotation([Ljava.lang.String;@36b310aa,[Ljava.lang.String;@76c387f9,[Ljava.lang.String;@3874b815),Annotation([Ljava.lang.String;@5d7835a8,[Ljava.lang.String;@736048ed,[Ledu.cmu.lti.nlp.amr.Dependency;@1976f537),Annotation([Ljava.lang.String;@45f421c,[Ljava.lang.String;@1816e24a,[Ljava.lang.String;@6940f685),Annotation([Ljava.lang.String;@47b179d7,[Ljava.lang.String;@39008c9f,[Ledu.cmu.lti.nlp.amr.Entity;@162b3d47))
AMR:
(c / city, name, n / name)
(d / district, location, v / valley)
(d / district, name, n2 / name)
(d2 / date-entity, day, 2 / 29)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 22 / 2002)
(k / kill-01, ARG1, s / soldier)
(k / kill-01, ARG2, b / bomb)
(k / kill-01, location, d / district)
(k / kill-01, time, d2 / date-entity)
(n / name, op, "Kathmandu")
(n2 / name, op, "Lalitpur")
(s / soldier, quant, 1 / 1)
(v / valley, mod, c / city)

Decoded in 80,090 microseconds
Sentence: After 20020829 2 separate bomb incidents occurred at the municipality in Lalitpur district and a shop in Kathmandu city.

mkDayMonthYear(20020829,29,08,2002)
NER Entity: (country :name (name :op "Lalitpur"))
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Lalitpur"))
mkDayMonthYear(20020829,29,08,2002)
Spans:
Span 2-3:  2 => 2
Span 1-2:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Span 0-1:  After => after
Span 13-14:  and => and
Span 4-5:  bomb => bomb
Span 18-19:  city => city
Span 12-13:  district => district
Span 5-6:  incidents => incident
Span 17-18:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 11-12:  Lalitpur => (name :op "Lalitpur")
Span 9-10:  municipality => municipality
Span 6-7:  occurred => occur-01
Span 3-4:  separate => separate
Span 15-16:  shop => shop

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),city,city,false), Span(17,18,List(3, 2, 1),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(15,16,List(4),shop,shop,false), Span(13,14,List(5),and,and,false), Span(12,13,List(6),district,district,false), Span(11,12,List(8, 7),Lalitpur,(name :op "Lalitpur"),false), Span(9,10,List(9),municipality,municipality,false), Span(6,7,List(10),occurred,occur-01,false), Span(5,6,List(11),incidents,incident,false), Span(4,5,List(12),bomb,bomb,false), Span(3,4,List(13),separate,separate,false), Span(2,3,List(14),2,2,false), Span(1,2,List(18, 17, 16, 15),20020829,(date-entity :day 29 :month 8 :year 2002),false), Span(0,1,List(19),After,after,false)),Map(2 -> name, 5 -> and, 12 -> bomb, 15 -> date-entity, 8 -> "Lalitpur", 18 -> 2002, 7 -> name, 17 -> 8, 1 -> city, 4 -> shop, 11 -> incident, 14 -> 2, 6 -> district, 0 -> city, 9 -> municipality, 16 -> 29, 19 -> after, 3 -> "Kathmandu", 10 -> occur-01, 13 -> separate),Map(n -> name, 2 -> 2, s2 -> separate, b -> bomb, 8 -> 8, s -> shop, d -> district, m -> municipality, 23 -> 2002, a -> and, d2 -> date-entity, a2 -> after, i -> incident, c -> city, 22 -> 29, o -> occur-01, c2 -> city, n2 -> name))),[Ljava.lang.String;@783115d9,Annotation([Ljava.lang.String;@3402b4c9,[Ljava.lang.String;@95bb2a2,[Ljava.lang.String;@46d567cb),Annotation([Ljava.lang.String;@363a3d15,[Ljava.lang.String;@173f73e7,[Ledu.cmu.lti.nlp.amr.Dependency;@43a51d00),Annotation([Ljava.lang.String;@2e23c180,[Ljava.lang.String;@499683c4,[Ljava.lang.String;@25da615a),Annotation([Ljava.lang.String;@4efc25fc,[Ljava.lang.String;@7ee3d262,[Ledu.cmu.lti.nlp.amr.Entity;@396e6d9))
AMR:
(a / and, op, m / municipality)
(a / and, op, s / shop)
(a2 / after, op, d2 / date-entity)
(c / city, mod, c2 / city)
(c2 / city, name, n / name)
(d / district, name, n2 / name)
(d2 / date-entity, day, 22 / 29)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 23 / 2002)
(i / incident, mod, b / bomb)
(i / incident, mod, s2 / separate)
(i / incident, quant, 2 / 2)
(m / municipality, location, d / district)
(n / name, op, "Kathmandu")
(n2 / name, op, "Lalitpur")
(o / occur-01, ARG1, i / incident)
(o / occur-01, location, a / and)
(o / occur-01, time, a2 / after)
(s / shop, location, c / city)

Decoded in 236,134 microseconds
Sentence: 20020904 a bomb exploded at the Kathmandu metropolitan office.

mkDayMonthYear(20020904,04,09,2002)
NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Kathmandu"))
mkDayMonthYear(20020904,04,09,2002)
Spans:
Span 0-1:  20020904 => (date-entity :day 4 :month 9 :year 2002)
Span 2-3:  bomb => bomb
Span 3-4:  exploded => explode-01
Span 6-7:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 7-8:  metropolitan => metropolis
Span 8-9:  office => office

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),office,office,false), Span(7,8,List(1),metropolitan,metropolis,false), Span(6,7,List(4, 3, 2),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(3,4,List(5),exploded,explode-01,false), Span(2,3,List(6),bomb,bomb,false), Span(0,1,List(10, 9, 8, 7),20020904,(date-entity :day 4 :month 9 :year 2002),false)),Map(2 -> city, 5 -> explode-01, 8 -> 4, 7 -> date-entity, 1 -> metropolis, 4 -> "Kathmandu", 6 -> bomb, 9 -> 9, 0 -> office, 10 -> 2002, 3 -> name),Map(e -> explode-01, n -> name, 2 -> 2002, b -> bomb, d -> date-entity, m -> metropolis, 4 -> 4, c -> city, 9 -> 9, o -> office))),[Ljava.lang.String;@75308740,Annotation([Ljava.lang.String;@5acc9fdf,[Ljava.lang.String;@3a5c2626,[Ljava.lang.String;@e48bf9a),Annotation([Ljava.lang.String;@7fb33394,[Ljava.lang.String;@41bf79da,[Ledu.cmu.lti.nlp.amr.Dependency;@1a891add),Annotation([Ljava.lang.String;@5176d279,[Ljava.lang.String;@373f7450,[Ljava.lang.String;@d74bac4),Annotation([Ljava.lang.String;@5ff90645,[Ljava.lang.String;@387bf2d9,[Ledu.cmu.lti.nlp.amr.Entity;@74aa9c72))
AMR:
(c / city, name, n / name)
(d / date-entity, day, 4 / 4)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2002)
(e / explode-01, ARG1, b / bomb)
(e / explode-01, location, o / office)
(e / explode-01, time, d / date-entity)
(n / name, op, "Kathmandu")
(o / office, mod, c / city)
(o / office, mod, m / metropolis)

Decoded in 45,467 microseconds
Sentence: Outside the Kathmandu Valley anti-government guerrillas have murdered many activists from the ruling Nepali Congress party and others and burned or bombed several buildings.

NER Entity: (country :name (name :op "Kathmandu" :op "Valley"))
NER Entity: (organization :name (name :op "Nepali" :op "Congress"))
Spans:
Span 11-12:  activists => activist
Span 20-21:  and => and
Span 18-19:  and => and
Span 23-24:  bombed => bomb-01
Span 25-26:  buildings => building
Span 21-22:  burned => burn-01
Span 6-7:  government => (government-organization :ARG0-of govern-01)
Span 7-8:  guerrillas => guerrilla
Span 2-4:  Kathmandu Valley => (country :name (name :op "Kathmandu" :op "Valley"))
Span 10-11:  many => many
Span 9-10:  murdered => murder-01
Span 15-17:  Nepali Congress => (have-org-role-91 :ARG1 (party :name (name :op "Congress" :op "Nepali")))
Span 22-23:  or => or
Span 19-20:  others => other
Span 0-1:  Outside => outside
Span 17-18:  party => party
Span 24-25:  several => several
Span 13-15:  the ruling => (organization :name (name :op "Nepali" :op "Congress"))

Langrangian relaxation converged after 59 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),buildings,building,false), Span(24,25,List(1),several,several,false), Span(23,24,List(2),bombed,bomb-01,false), Span(22,23,List(3),or,or,false), Span(21,22,List(4),burned,burn-01,false), Span(20,21,List(5),and,and,false), Span(19,20,List(6),others,other,false), Span(18,19,List(7),and,and,false), Span(17,18,List(8),party,party,false), Span(15,17,List(13, 12, 11, 10, 9),Nepali Congress,(have-org-role-91 :ARG1 (party :name (name :op "Congress" :op "Nepali"))),false), Span(13,15,List(17, 16, 15, 14),the ruling,(organization :name (name :op "Nepali" :op "Congress")),false), Span(11,12,List(18),activists,activist,false), Span(10,11,List(19),many,many,false), Span(9,10,List(20),murdered,murder-01,false), Span(7,8,List(21),guerrillas,guerrilla,false), Span(6,7,List(23, 22),government,(government-organization :ARG0-of govern-01),false), Span(2,4,List(27, 26, 25, 24),Kathmandu Valley,(country :name (name :op "Kathmandu" :op "Valley")),false), Span(0,1,List(28),Outside,outside,false)),Map(2 -> bomb-01, 5 -> and, 27 -> "Valley", 12 -> "Congress", 8 -> party, 15 -> name, 21 -> guerrilla, 18 -> activist, 24 -> country, 7 -> and, 1 -> several, 17 -> "Congress", 23 -> govern-01, 26 -> "Kathmandu", 4 -> burn-01, 11 -> name, 14 -> organization, 20 -> murder-01, 28 -> outside, 6 -> other, 9 -> have-org-role-91, 0 -> building, 22 -> government-organization, 16 -> "Nepali", 19 -> many, 10 -> party, 3 -> or, 25 -> name, 13 -> "Nepali"),Map(b3 -> burn-01, n -> name, g3 -> govern-01, h -> have-org-role-91, b -> building, m2 -> murder-01, b2 -> bomb-01, o3 -> organization, p2 -> party, a3 -> activist, s -> several, m -> many, g2 -> government-organization, g -> guerrilla, p -> party, n3 -> name, a -> and, o2 -> other, a2 -> and, c -> country, o4 -> outside, o -> or, n2 -> name))),[Ljava.lang.String;@5c20aab9,Annotation([Ljava.lang.String;@4b7c4456,[Ljava.lang.String;@2c768ada,[Ljava.lang.String;@c1fca2a),Annotation([Ljava.lang.String;@5533dc72,[Ljava.lang.String;@7c447c76,[Ledu.cmu.lti.nlp.amr.Dependency;@64fc097e),Annotation([Ljava.lang.String;@1640c151,[Ljava.lang.String;@5d5b5fa7,[Ljava.lang.String;@2a32fb6),Annotation([Ljava.lang.String;@6107165,[Ljava.lang.String;@164a62bf,[Ledu.cmu.lti.nlp.amr.Entity;@11ebb1b6))
AMR:
(a / and, quant, m / many)
(a2 / and, location, o4 / outside)
(a2 / and, op, o / or)
(a2 / and, op, p / party)
(b / building, quant, s / several)
(b2 / bomb-01, ARG0, g / guerrilla)
(b2 / bomb-01, ARG1, b / building)
(b3 / burn-01, ARG0, g / guerrilla)
(b3 / burn-01, ARG1, b / building)
(c / country, name, n3 / name)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG0, p / party)
(h / have-org-role-91, ARG1, p2 / party)
(h / have-org-role-91, ARG6, o3 / organization)
(m2 / murder-01, ARG0, g / guerrilla)
(m2 / murder-01, ARG1, a / and)
(m2 / murder-01, ARG2, a3 / activist)
(n / name, op, "Congress")
(n / name, op, "Nepali")
(n2 / name, op, "Congress")
(n2 / name, op, "Nepali")
(n3 / name, op, "Kathmandu")
(n3 / name, op, "Valley")
(o / or, op, b2 / bomb-01)
(o / or, op, b3 / burn-01)
(o3 / organization, name, n2 / name)
(o4 / outside, op, c / country)
(p / party, mod, o2 / other)
(p2 / party, name, n / name)

Decoded in 2,280,862 microseconds
Sentence: An underground insurgent leader stated in an interview with the English language daily newspaper The Kathmandu Post that insurgents would comprehensively and violently disrupt mid-term parliamentary elections on 20021113.

NER Entity: (thing :name (name :op "English"))
NER Entity: (organization :name (name :op "The" :op "Kathmandu" :op "Post"))
mkDayMonthYear(20021113,13,11,2002)
mkDayMonthYear(20021113,13,11,2002)
NER Entity: (thing :name (name :op "English"))
Spans:
Span 30-31:  20021113 => (date-entity :day 13 :month 11 :year 2002)
Span 21-22:  and => and
Span 20-21:  comprehensively => comprehensive
Span 12-13:  daily => daily
Span 23-24:  disrupt => disrupt-01
Span 28-29:  elections => elect-01
Span 10-11:  English => (name :op "English")
Span 2-3:  insurgent => insurgent
Span 18-19:  insurgents => insurgent
Span 7-8:  interview => interview-01
Span 11-12:  language => language
Span 3-4:  leader => (person :ARG0-of lead-02)
Span 24-25:  mid => mid
Span 13-14:  newspaper => newspaper
Span 27-28:  parliamentary => parliament
Span 4-5:  stated => state-01
Span 26-27:  term => term
Span 14-17:  The Kathmandu Post => (organization :name (name :op "The" :op "Kathmandu" :op "Post"))
Span 1-2:  underground => underground
Span 22-23:  violently => violent

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(3, 2, 1, 0),20021113,(date-entity :day 13 :month 11 :year 2002),false), Span(28,29,List(4),elections,elect-01,false), Span(27,28,List(5),parliamentary,parliament,false), Span(26,27,List(6),term,term,false), Span(24,25,List(7),mid,mid,false), Span(23,24,List(8),disrupt,disrupt-01,false), Span(22,23,List(9),violently,violent,false), Span(21,22,List(10),and,and,false), Span(20,21,List(11),comprehensively,comprehensive,false), Span(18,19,List(12),insurgents,insurgent,false), Span(14,17,List(17, 16, 15, 14, 13),The Kathmandu Post,(organization :name (name :op "The" :op "Kathmandu" :op "Post")),false), Span(13,14,List(18),newspaper,newspaper,false), Span(12,13,List(19),daily,daily,false), Span(11,12,List(20),language,language,false), Span(10,11,List(22, 21),English,(name :op "English"),false), Span(7,8,List(23),interview,interview-01,false), Span(4,5,List(24),stated,state-01,false), Span(3,4,List(26, 25),leader,(person :ARG0-of lead-02),false), Span(2,3,List(27),insurgent,insurgent,false), Span(1,2,List(28),underground,underground,false)),Map(2 -> 11, 5 -> parliament, 27 -> insurgent, 12 -> insurgent, 8 -> disrupt-01, 15 -> "The", 21 -> name, 18 -> newspaper, 24 -> state-01, 7 -> mid, 1 -> 13, 17 -> "Post", 23 -> interview-01, 26 -> lead-02, 4 -> elect-01, 11 -> comprehensive, 14 -> name, 20 -> language, 28 -> underground, 6 -> term, 9 -> violent, 0 -> date-entity, 22 -> "English", 16 -> "Kathmandu", 19 -> daily, 10 -> and, 3 -> 2002, 25 -> person, 13 -> organization),Map(e -> elect-01, n -> name, 2 -> 2002, t -> term, 12 -> 11, d3 -> daily, p2 -> person, s -> state-01, v -> violent, m -> mid, d -> date-entity, 1 -> 13, i3 -> insurgent, p -> parliament, a -> and, n3 -> name, d2 -> disrupt-01, i2 -> interview-01, l2 -> lead-02, i -> insurgent, c -> comprehensive, l -> language, u -> underground, o -> organization, n2 -> newspaper))),[Ljava.lang.String;@aaee2a2,Annotation([Ljava.lang.String;@f3021cb,[Ljava.lang.String;@4aaae508,[Ljava.lang.String;@6009bea),Annotation([Ljava.lang.String;@7bc6d27a,[Ljava.lang.String;@75769ab0,[Ledu.cmu.lti.nlp.amr.Dependency;@6869a3b3),Annotation([Ljava.lang.String;@6ab4ba9f,[Ljava.lang.String;@27ace0b1,[Ljava.lang.String;@664e5dee),Annotation([Ljava.lang.String;@431f1eaf,[Ljava.lang.String;@cb03411,[Ledu.cmu.lti.nlp.amr.Entity;@4c59e45e))
AMR:
(a / and, op, c / comprehensive)
(a / and, op, v / violent)
(d / date-entity, day, 1 / 13)
(d / date-entity, month, 12 / 11)
(d / date-entity, year, 2 / 2002)
(d2 / disrupt-01, ARG0, i3 / insurgent)
(d2 / disrupt-01, ARG1, e / elect-01)
(d2 / disrupt-01, manner, a / and)
(d2 / disrupt-01, time, d / date-entity)
(e / elect-01, ARG2, p / parliament)
(e / elect-01, mod, m / mid)
(e / elect-01, mod, t / term)
(i2 / interview-01, ARG0, n2 / newspaper)
(i2 / interview-01, ARG1, d3 / daily)
(l / language, name, n3 / name)
(l2 / lead-02, ARG0, p2 / person)
(l2 / lead-02, ARG1, i / insurgent)
(n / name, op, "Kathmandu")
(n / name, op, "Post")
(n / name, op, "The")
(n2 / newspaper, mod, l / language)
(n2 / newspaper, name, o / organization)
(n3 / name, op, "English")
(o / organization, name, n / name)
(p2 / person, mod, u / underground)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, d2 / disrupt-01)
(s / state-01, medium, i2 / interview-01)

Decoded in 1,057,675 microseconds
Sentence: 20020829 the British Embassy to Nepal warned British nationals of increasing anti-government offensives and advised them to avoid areas cordoned off by Nepali security personnel.

mkDayMonthYear(20020829,29,08,2002)
NER Entity: (thing :name (name :op "British"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (thing :name (name :op "British"))
NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "British"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (thing :name (name :op "British"))
mkDayMonthYear(20020829,29,08,2002)
Spans:
Span 0-1:  20020829 => (date-entity :day 29 :month 8 :year 2002)
Span 16-17:  advised => advise-01
Span 15-16:  and => and
Span 20-21:  areas => area
Span 19-20:  avoid => avoid-01
Span 7-8:  British => (country :name (name :op "Britain"))
Span 2-3:  British => (country :name (name :op "Britain"))
Span 21-22:  cordoned => cordon-01
Span 3-4:  Embassy => embassy
Span 13-14:  government => (government-organization :ARG0-of govern-01)
Span 10-11:  increasing => increase-01
Span 8-9:  nationals => national
Span 5-6:  Nepal => (country :name (name :op "Nepal"))
Span 24-25:  Nepali => (country :name (name :op "Nepal"))
Span 22-23:  off => off
Span 14-15:  offensives => offensive
Span 26-27:  personnel => (have-org-role-91 :ARG2 personnel)
Span 25-26:  security => security
Span 6-7:  warned => warn-01

Langrangian relaxation converged after 117 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(1, 0),personnel,(have-org-role-91 :ARG2 personnel),false), Span(25,26,List(2),security,security,false), Span(24,25,List(5, 4, 3),Nepali,(country :name (name :op "Nepal")),false), Span(22,23,List(6),off,off,false), Span(21,22,List(7),cordoned,cordon-01,false), Span(20,21,List(8),areas,area,false), Span(19,20,List(9),avoid,avoid-01,false), Span(16,17,List(10),advised,advise-01,false), Span(15,16,List(11),and,and,false), Span(14,15,List(12),offensives,offensive,false), Span(13,14,List(14, 13),government,(government-organization :ARG0-of govern-01),false), Span(10,11,List(15),increasing,increase-01,false), Span(8,9,List(16),nationals,national,false), Span(7,8,List(19, 18, 17),British,(country :name (name :op "Britain")),false), Span(6,7,List(20),warned,warn-01,false), Span(5,6,List(23, 22, 21),Nepal,(country :name (name :op "Nepal")),false), Span(3,4,List(24),Embassy,embassy,false), Span(2,3,List(27, 26, 25),British,(country :name (name :op "Britain")),false), Span(0,1,List(31, 30, 29, 28),20020829,(date-entity :day 29 :month 8 :year 2002),false)),Map(30 -> 8, 2 -> security, 5 -> "Nepal", 27 -> "Britain", 12 -> offensive, 8 -> area, 15 -> increase-01, 21 -> country, 18 -> name, 24 -> embassy, 7 -> cordon-01, 1 -> personnel, 17 -> country, 23 -> "Nepal", 26 -> name, 4 -> name, 11 -> and, 14 -> govern-01, 29 -> 29, 20 -> warn-01, 28 -> date-entity, 6 -> off, 9 -> avoid-01, 0 -> have-org-role-91, 22 -> name, 16 -> national, 19 -> "Britain", 10 -> advise-01, 3 -> country, 31 -> 2002, 25 -> country, 13 -> government-organization),Map(e -> embassy, n -> name, w -> warn-01, h -> have-org-role-91, 2 -> 29, 8 -> 8, a3 -> advise-01, c4 -> country, n4 -> name, s -> security, d -> date-entity, g2 -> govern-01, g -> government-organization, p -> personnel, a -> area, c3 -> country, n3 -> name, o2 -> offensive, a2 -> avoid-01, i -> increase-01, c -> country, 22 -> 2002, o -> off, c2 -> cordon-01, n2 -> national, a4 -> and, c5 -> country, n5 -> name))),[Ljava.lang.String;@58ec7116,Annotation([Ljava.lang.String;@63bde6c2,[Ljava.lang.String;@6ea04618,[Ljava.lang.String;@6dd82486),Annotation([Ljava.lang.String;@56078cea,[Ljava.lang.String;@5a00eb1e,[Ledu.cmu.lti.nlp.amr.Dependency;@36fcf6c0),Annotation([Ljava.lang.String;@1aac188d,[Ljava.lang.String;@7026b7ee,[Ljava.lang.String;@2d23faef),Annotation([Ljava.lang.String;@7cb8437d,[Ljava.lang.String;@62a4417,[Ledu.cmu.lti.nlp.amr.Entity;@43f61afb))
AMR:
(a2 / avoid-01, ARG0, n2 / national)
(a2 / avoid-01, ARG1, a / area)
(a3 / advise-01, ARG0, e / embassy)
(a3 / advise-01, ARG1, n2 / national)
(a3 / advise-01, ARG2, a2 / avoid-01)
(a4 / and, op, a3 / advise-01)
(a4 / and, op, w / warn-01)
(a4 / and, time, d / date-entity)
(c / country, name, n / name)
(c2 / cordon-01, ARG1, a / area)
(c2 / cordon-01, manner, o / off)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(d / date-entity, day, 2 / 29)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 22 / 2002)
(e / embassy, prep-to, c4 / country)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG1, s / security)
(h / have-org-role-91, ARG2, p / personnel)
(i / increase-01, ARG1, o2 / offensive)
(n / name, op, "Nepal")
(n2 / national, mod, c3 / country)
(n2 / national, mod, c5 / country)
(n3 / name, op, "Britain")
(n4 / name, op, "Nepal")
(n5 / name, op, "Britain")
(s / security, mod, c / country)
(s / security, mod, c4 / country)
(w / warn-01, ARG0, e / embassy)
(w / warn-01, ARG1, o2 / offensive)
(w / warn-01, ARG2, n2 / national)

Decoded in 5,961,982 microseconds
Sentence: The embassy stated that intelligence assessments suggest that anti-government guerrillas may be preparing an urban campaign to complement their rural activities.

Spans:
Span 22-23:  activities => activity
Span 5-6:  assessments => assess-01
Span 17-18:  campaign => campaign-01
Span 19-20:  complement => complement-01
Span 1-2:  embassy => embassy
Span 10-11:  government => (government-organization :ARG0-of govern-01)
Span 11-12:  guerrillas => guerrilla
Span 4-5:  intelligence => intelligence
Span 12-13:  may => possible
Span 14-15:  preparing => prepare-01
Span 21-22:  rural => rural
Span 2-3:  stated => state-01
Span 6-7:  suggest => suggest-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),activities,activity,false), Span(21,22,List(1),rural,rural,false), Span(19,20,List(2),complement,complement-01,false), Span(17,18,List(3),campaign,campaign-01,false), Span(14,15,List(4),preparing,prepare-01,false), Span(12,13,List(5),may,possible,false), Span(11,12,List(6),guerrillas,guerrilla,false), Span(10,11,List(8, 7),government,(government-organization :ARG0-of govern-01),false), Span(6,7,List(9),suggest,suggest-01,false), Span(5,6,List(10),assessments,assess-01,false), Span(4,5,List(11),intelligence,intelligence,false), Span(2,3,List(12),stated,state-01,false), Span(1,2,List(13),embassy,embassy,false)),Map(2 -> complement-01, 5 -> possible, 12 -> state-01, 8 -> govern-01, 7 -> government-organization, 1 -> rural, 4 -> prepare-01, 11 -> intelligence, 6 -> guerrilla, 0 -> activity, 9 -> suggest-01, 3 -> campaign-01, 10 -> assess-01, 13 -> embassy),Map(e -> embassy, g3 -> govern-01, s2 -> state-01, p2 -> possible, s -> suggest-01, g2 -> government-organization, p -> prepare-01, g -> guerrilla, a -> activity, r -> rural, a2 -> assess-01, i -> intelligence, c -> complement-01, c2 -> campaign-01))),[Ljava.lang.String;@713064e8,Annotation([Ljava.lang.String;@4fad6218,[Ljava.lang.String;@1bf39d06,[Ljava.lang.String;@68217d41),Annotation([Ljava.lang.String;@1ac45389,[Ljava.lang.String;@3e5d4f6b,[Ledu.cmu.lti.nlp.amr.Dependency;@39c1fe0b),Annotation([Ljava.lang.String;@5ae95707,[Ljava.lang.String;@62891fc8,[Ljava.lang.String;@367b22e5),Annotation([Ljava.lang.String;@fca387,[Ljava.lang.String;@10bd9df0,[Ledu.cmu.lti.nlp.amr.Entity;@3ae0b770))
AMR:
(a / activity, mod, r / rural)
(a2 / assess-01, ARG1, i / intelligence)
(c / complement-01, ARG1, a / activity)
(c2 / campaign-01, ARG1, c / complement-01)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, g / guerrilla)
(p / prepare-01, ARG0, g / guerrilla)
(p / prepare-01, ARG1, c2 / campaign-01)
(p2 / possible, domain, p / prepare-01)
(s / suggest-01, ARG0, a2 / assess-01)
(s / suggest-01, ARG1, p2 / possible)
(s2 / state-01, ARG0, e / embassy)
(s2 / state-01, ARG1, s / suggest-01)

Decoded in 194,092 microseconds
Sentence: The US State Department stated that after recent bombings US citizens and interests are at heightened risk from anti-government insurgents in Nepal, particularly outside the Kathmandu Valley.

NER Entity: (organization :name (name :op "US" :op "State" :op "Department"))
NER Entity: (organization :name (name :op "US" :op "citizens"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Kathmandu" :op "Valley"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 6-7:  after => after
Span 11-12:  and => and
Span 8-9:  bombings => bomb-01
Span 20-21:  government => (government-organization :ARG0-of govern-01)
Span 15-16:  heightened => heighten-01
Span 21-22:  insurgents => insurgent
Span 12-13:  interests => interest
Span 28-29:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 23-24:  Nepal => (country :name (name :op "Nepal"))
Span 26-28:  outside the => (country :name (name :op "Kathmandu" :op "Valley"))
Span 25-26:  particularly => particular
Span 7-8:  recent => recent
Span 16-17:  risk => risk-01
Span 4-5:  stated => state-01
Span 9-11:  US citizens => (organization :name (name :op "US" :op "citizens"))
Span 1-4:  US State Department => (government-organization :name (name :op "Department" :op "State" :op "US"))
Span 29-30:  Valley => valley

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),Valley,valley,false), Span(28,29,List(3, 2, 1),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(26,28,List(7, 6, 5, 4),outside the,(country :name (name :op "Kathmandu" :op "Valley")),false), Span(25,26,List(8),particularly,particular,false), Span(23,24,List(11, 10, 9),Nepal,(country :name (name :op "Nepal")),false), Span(21,22,List(12),insurgents,insurgent,false), Span(20,21,List(14, 13),government,(government-organization :ARG0-of govern-01),false), Span(16,17,List(15),risk,risk-01,false), Span(15,16,List(16),heightened,heighten-01,false), Span(12,13,List(17),interests,interest,false), Span(11,12,List(18),and,and,false), Span(9,11,List(22, 21, 20, 19),US citizens,(organization :name (name :op "US" :op "citizens")),false), Span(8,9,List(23),bombings,bomb-01,false), Span(7,8,List(24),recent,recent,false), Span(6,7,List(25),after,after,false), Span(4,5,List(26),stated,state-01,false), Span(1,4,List(31, 30, 29, 28, 27),US State Department,(government-organization :name (name :op "Department" :op "State" :op "US")),false)),Map(30 -> "State", 2 -> name, 5 -> name, 27 -> government-organization, 12 -> insurgent, 8 -> particular, 15 -> risk-01, 21 -> "US", 18 -> and, 24 -> recent, 7 -> "Valley", 1 -> city, 17 -> interest, 23 -> bomb-01, 26 -> state-01, 4 -> country, 11 -> "Nepal", 14 -> govern-01, 29 -> "Department", 20 -> name, 28 -> name, 6 -> "Kathmandu", 9 -> country, 0 -> valley, 22 -> "citizens", 16 -> heighten-01, 19 -> organization, 10 -> name, 3 -> "Kathmandu", 31 -> "US", 25 -> after, 13 -> government-organization),Map(n -> name, g3 -> government-organization, h -> heighten-01, b -> bomb-01, n4 -> name, s -> state-01, v -> valley, g2 -> govern-01, r2 -> recent, p -> particular, g -> government-organization, a -> and, c3 -> country, n3 -> name, i2 -> interest, a2 -> after, i -> insurgent, r -> risk-01, c -> city, o -> organization, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@55e3d6c3,Annotation([Ljava.lang.String;@30e6a763,[Ljava.lang.String;@4c48fe92,[Ljava.lang.String;@732c9b5c),Annotation([Ljava.lang.String;@38320e34,[Ljava.lang.String;@3d6a6bee,[Ledu.cmu.lti.nlp.amr.Dependency;@36ddaebf),Annotation([Ljava.lang.String;@213c3543,[Ljava.lang.String;@9d7ccfe,[Ljava.lang.String;@670ce331),Annotation([Ljava.lang.String;@3cff0139,[Ljava.lang.String;@7c29adc8,[Ledu.cmu.lti.nlp.amr.Entity;@4b2e3e8f))
AMR:
(a / and, op, i2 / interest)
(a2 / after, op, b / bomb-01)
(b / bomb-01, ARG1, o / organization)
(b / bomb-01, time, r2 / recent)
(c / city, name, n / name)
(c2 / country, mod, p / particular)
(c2 / country, name, n2 / name)
(c2 / country, op, v / valley)
(c3 / country, name, n3 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(g3 / government-organization, name, n5 / name)
(h / heighten-01, ARG1, r / risk-01)
(h / heighten-01, location, c2 / country)
(h / heighten-01, time, a2 / after)
(i / insurgent, location, c3 / country)
(n / name, op, "Kathmandu")
(n2 / name, op, "Kathmandu")
(n2 / name, op, "Valley")
(n3 / name, op, "Nepal")
(n4 / name, op, "US")
(n4 / name, op, "citizens")
(n5 / name, op, "Department")
(n5 / name, op, "State")
(n5 / name, op, "US")
(o / organization, name, n4 / name)
(r / risk-01, ARG0, a / and)
(r / risk-01, ARG1, i / insurgent)
(s / state-01, ARG0, g3 / government-organization)
(s / state-01, ARG1, h / heighten-01)
(v / valley, mod, c / city)

Decoded in 1,090,179 microseconds
Sentence: 20020903 the US State Department publicly stated that anti-government insurgents plan new violence before the general strike declared for 20020916.

mkDayMonthYear(20020903,03,09,2002)
NER Entity: (organization :name (name :op "US" :op "State" :op "Department"))
mkDayMonthYear(20020916,16,09,2002)
mkDayMonthYear(20020916,16,09,2002)
mkDayMonthYear(20020903,03,09,2002)
Spans:
Span 0-1:  20020903 => (date-entity :day 3 :month 9 :year 2002)
Span 21-22:  20020916 => (date-entity :day 16 :month 9 :year 2002)
Span 15-16:  before => before
Span 19-20:  declared => declare-02
Span 17-18:  general => general
Span 10-11:  government => (government-organization :ARG0-of govern-01)
Span 11-12:  insurgents => insurgent
Span 13-14:  new => new
Span 12-13:  plan => plan-01
Span 5-6:  publicly => public
Span 6-7:  stated => state-01
Span 18-19:  strike => strike-01
Span 2-5:  US State Department => (government-organization :name (name :op "Department" :op "State" :op "US"))
Span 14-15:  violence => violence

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(3, 2, 1, 0),20020916,(date-entity :day 16 :month 9 :year 2002),false), Span(19,20,List(4),declared,declare-02,false), Span(18,19,List(5),strike,strike-01,false), Span(17,18,List(6),general,general,false), Span(15,16,List(7),before,before,false), Span(14,15,List(8),violence,violence,false), Span(13,14,List(9),new,new,false), Span(12,13,List(10),plan,plan-01,false), Span(11,12,List(11),insurgents,insurgent,false), Span(10,11,List(13, 12),government,(government-organization :ARG0-of govern-01),false), Span(6,7,List(14),stated,state-01,false), Span(5,6,List(15),publicly,public,false), Span(2,5,List(20, 19, 18, 17, 16),US State Department,(government-organization :name (name :op "Department" :op "State" :op "US")),false), Span(0,1,List(24, 23, 22, 21),20020903,(date-entity :day 3 :month 9 :year 2002),false)),Map(2 -> 9, 5 -> strike-01, 12 -> government-organization, 8 -> violence, 15 -> public, 21 -> date-entity, 18 -> "Department", 24 -> 2002, 7 -> before, 1 -> 16, 17 -> name, 23 -> 9, 4 -> declare-02, 11 -> insurgent, 14 -> state-01, 20 -> "US", 6 -> general, 9 -> new, 0 -> date-entity, 22 -> 3, 16 -> government-organization, 19 -> "State", 10 -> plan-01, 3 -> 2002, 13 -> govern-01),Map(n -> new, g3 -> govern-01, 2 -> 2002, s2 -> state-01, b -> before, d3 -> date-entity, 92 -> 9, p2 -> public, s -> strike-01, v -> violence, d -> date-entity, 1 -> 16, g2 -> government-organization, g -> general, p -> plan-01, d2 -> declare-02, i -> insurgent, 22 -> 2002, 9 -> 9, 3 -> 3, n2 -> name, g4 -> government-organization))),[Ljava.lang.String;@4bbb49b0,Annotation([Ljava.lang.String;@f096f37,[Ljava.lang.String;@3effd4f3,[Ljava.lang.String;@41f4fe5),Annotation([Ljava.lang.String;@15f8701f,[Ljava.lang.String;@514cd540,[Ledu.cmu.lti.nlp.amr.Dependency;@11d4dbd6),Annotation([Ljava.lang.String;@6f4ade6e,[Ljava.lang.String;@39e43310,[Ljava.lang.String;@eb507b9),Annotation([Ljava.lang.String;@390877d2,[Ljava.lang.String;@86733,[Ledu.cmu.lti.nlp.amr.Entity;@186cb891))
AMR:
(b / before, op, s / strike-01)
(d / date-entity, day, 1 / 16)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 2 / 2002)
(d2 / declare-02, ARG1, s / strike-01)
(d2 / declare-02, prep-for, d / date-entity)
(d3 / date-entity, day, 3 / 3)
(d3 / date-entity, month, 92 / 9)
(d3 / date-entity, year, 22 / 2002)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, p2 / public)
(g4 / government-organization, name, n2 / name)
(n2 / name, op, "Department")
(n2 / name, op, "State")
(n2 / name, op, "US")
(p / plan-01, ARG0, i / insurgent)
(p / plan-01, ARG1, v / violence)
(p / plan-01, time, b / before)
(s / strike-01, ARG1, d3 / date-entity)
(s / strike-01, mod, g / general)
(s2 / state-01, ARG0, g4 / government-organization)
(s2 / state-01, ARG1, p / plan-01)
(s2 / state-01, manner, p2 / public)
(v / violence, mod, n / new)

Decoded in 667,281 microseconds
Sentence: The Nepali government is considering re-imposition of the state of emergency to maintain law and order.

NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "Nepali"))
Spans:
Span 16-17:  and => and
Span 4-5:  considering => consider-02
Span 12-13:  emergency => emergency
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 15-16:  law => law
Span 14-15:  maintain => maintain-01
Span 1-2:  Nepali => (country :name (name :op "Nepal"))
Span 10-11:  state => state

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),and,and,false), Span(15,16,List(1),law,law,false), Span(14,15,List(2),maintain,maintain-01,false), Span(12,13,List(3),emergency,emergency,false), Span(10,11,List(4),state,state,false), Span(4,5,List(5),considering,consider-02,false), Span(2,3,List(7, 6),government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(10, 9, 8),Nepali,(country :name (name :op "Nepal")),false)),Map(2 -> maintain-01, 5 -> consider-02, 8 -> country, 7 -> govern-01, 1 -> law, 4 -> state, 6 -> government-organization, 9 -> name, 0 -> and, 10 -> "Nepal", 3 -> emergency),Map(n -> name, e -> emergency, s -> state, m -> maintain-01, g2 -> govern-01, g -> government-organization, a -> and, c -> consider-02, l -> law, c2 -> country))),[Ljava.lang.String;@3ec2ecea,Annotation([Ljava.lang.String;@440eaa07,[Ljava.lang.String;@7fc7c4a,[Ljava.lang.String;@7aa9e414),Annotation([Ljava.lang.String;@53a5e217,[Ljava.lang.String;@624a24f6,[Ledu.cmu.lti.nlp.amr.Dependency;@6b00ad9),Annotation([Ljava.lang.String;@338cc75f,[Ljava.lang.String;@4f453e63,[Ljava.lang.String;@7c9bdee9),Annotation([Ljava.lang.String;@7afbf561,[Ljava.lang.String;@2f98635e,[Ledu.cmu.lti.nlp.amr.Entity;@49c8f6e8))
AMR:
(a / and, op, l / law)
(c / consider-02, ARG0, g / government-organization)
(c / consider-02, ARG1, m / maintain-01)
(c2 / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(m / maintain-01, ARG0, e / emergency)
(m / maintain-01, ARG1, a / and)
(n / name, op, "Nepal")
(s / state, mod, e / emergency)

Decoded in 279,680 microseconds
Sentence: Prime Minister Sher Bahadur Deuba stated that Deuba would consult with concerned persons and political parties on the possible extension of the state of emergency.

NER Entity: (person :name (name :op "Sher" :op "Bahadur" :op "Deuba"))
NER Entity: (person :name (name :op "Deuba"))
NER Entity: (person :name (name :op "Deuba"))
Spans:
Span 13-14:  and => and
Span 11-12:  concerned => concern-01
Span 9-10:  consult => consult-01
Span 7-8:  Deuba => (person :name (name :op "Deuba"))
Span 24-25:  emergency => emergency
Span 19-20:  extension => extend-01
Span 1-2:  Minister => (have-org-role-91 :ARG2 minister)
Span 15-16:  parties => party
Span 12-13:  persons => person
Span 14-15:  political => politics
Span 18-19:  possible => possible
Span 0-1:  Prime => prime
Span 2-5:  Sher Bahadur Deuba => (person :name (name :op "Deuba" :op "Bahadur" :op "Sher"))
Span 22-23:  state => state
Span 5-6:  stated => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),emergency,emergency,false), Span(22,23,List(1),state,state,false), Span(19,20,List(2),extension,extend-01,false), Span(18,19,List(3),possible,possible,false), Span(15,16,List(4),parties,party,false), Span(14,15,List(5),political,politics,false), Span(13,14,List(6),and,and,false), Span(12,13,List(7),persons,person,false), Span(11,12,List(8),concerned,concern-01,false), Span(9,10,List(9),consult,consult-01,false), Span(7,8,List(12, 11, 10),Deuba,(person :name (name :op "Deuba")),false), Span(5,6,List(13),stated,state-01,false), Span(2,5,List(18, 17, 16, 15, 14),Sher Bahadur Deuba,(person :name (name :op "Deuba" :op "Bahadur" :op "Sher")),false), Span(1,2,List(20, 19),Minister,(have-org-role-91 :ARG2 minister),false), Span(0,1,List(21),Prime,prime,false)),Map(2 -> extend-01, 5 -> politics, 12 -> "Deuba", 15 -> name, 8 -> concern-01, 21 -> prime, 18 -> "Sher", 7 -> person, 17 -> "Bahadur", 1 -> state, 4 -> party, 11 -> name, 14 -> person, 20 -> minister, 6 -> and, 0 -> emergency, 9 -> consult-01, 16 -> "Deuba", 19 -> have-org-role-91, 3 -> possible, 10 -> person, 13 -> state-01),Map(e -> emergency, n -> name, h -> have-org-role-91, p5 -> person, s2 -> state-01, e2 -> extend-01, p2 -> party, s -> state, m -> minister, p -> possible, a -> and, p4 -> person, p7 -> prime, c -> concern-01, p6 -> person, p3 -> politics, n2 -> name, c2 -> consult-01))),[Ljava.lang.String;@6b0615ae,Annotation([Ljava.lang.String;@4e73b552,[Ljava.lang.String;@221dad51,[Ljava.lang.String;@2cec704c),Annotation([Ljava.lang.String;@771cbb1a,[Ljava.lang.String;@2416498e,[Ledu.cmu.lti.nlp.amr.Dependency;@6b2e0f78),Annotation([Ljava.lang.String;@240f6c41,[Ljava.lang.String;@3659d7b1,[Ljava.lang.String;@2015b2cd),Annotation([Ljava.lang.String;@3bdb2c78,[Ljava.lang.String;@64693226,[Ledu.cmu.lti.nlp.amr.Entity;@1c758545))
AMR:
(a / and, op, p2 / party)
(a / and, op, p4 / person)
(c / concern-01, ARG1, p4 / person)
(c2 / consult-01, ARG0, p5 / person)
(c2 / consult-01, ARG1, a / and)
(c2 / consult-01, ARG2, p / possible)
(e2 / extend-01, ARG0, p5 / person)
(e2 / extend-01, ARG1, s / state)
(h / have-org-role-91, ARG0, p6 / person)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p7 / prime)
(n / name, op, "Deuba")
(n2 / name, op, "Bahadur")
(n2 / name, op, "Deuba")
(n2 / name, op, "Sher")
(p2 / party, mod, p3 / politics)
(p5 / person, name, n / name)
(p6 / person, name, n2 / name)
(s / state, mod, e / emergency)
(s2 / state-01, ARG0, p6 / person)
(s2 / state-01, ARG1, c2 / consult-01)

Decoded in 180,276 microseconds
Sentence: Due to the tension Deuba aborted a planned trip to Johannesburg for the World Summit on Sustainable Development and returned immediately to Nepal after a nine-day visit to Europe.

NER Entity: (person :name (name :op "Deuba"))
NER Entity: (country :name (name :op "Johannesburg"))
NER Entity: (organization :name (name :op "World" :op "Summit"))
NER Entity: (organization :name (name :op "Sustainable" :op "Development"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Johannesburg"))
NER Entity: (person :name (name :op "Deuba"))
Spans:
Span 5-6:  aborted => abort-01
Span 23-24:  after => after
Span 18-19:  and => and
Span 27-28:  day => (temporal-quantity :unit day)
Span 4-5:  Deuba => (person :name (name :op "Deuba"))
Span 30-31:  Europe => (continent :name (name :op "Europe"))
Span 20-21:  immediately => immediate
Span 10-11:  Johannesburg => (city :name (name :op "Johannesburg"))
Span 22-23:  Nepal => (country :name (name :op "Nepal"))
Span 25-26:  nine => 9
Span 7-8:  planned => plan-01
Span 19-20:  returned => return-01
Span 16-18:  Sustainable Development => (organization :name (name :op "Sustainable" :op "Development"))
Span 3-4:  tension => tension
Span 8-9:  trip => trip-01
Span 28-29:  visit => visit-01
Span 13-15:  World Summit => (organization :name (name :op "World" :op "Summit"))

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(2, 1, 0),Europe,(continent :name (name :op "Europe")),false), Span(28,29,List(3),visit,visit-01,false), Span(27,28,List(5, 4),day,(temporal-quantity :unit day),false), Span(25,26,List(6),nine,9,false), Span(23,24,List(7),after,after,false), Span(22,23,List(10, 9, 8),Nepal,(country :name (name :op "Nepal")),false), Span(20,21,List(11),immediately,immediate,false), Span(19,20,List(12),returned,return-01,false), Span(18,19,List(13),and,and,false), Span(16,18,List(17, 16, 15, 14),Sustainable Development,(organization :name (name :op "Sustainable" :op "Development")),false), Span(13,15,List(21, 20, 19, 18),World Summit,(organization :name (name :op "World" :op "Summit")),false), Span(10,11,List(24, 23, 22),Johannesburg,(city :name (name :op "Johannesburg")),false), Span(8,9,List(25),trip,trip-01,false), Span(7,8,List(26),planned,plan-01,false), Span(5,6,List(27),aborted,abort-01,false), Span(4,5,List(30, 29, 28),Deuba,(person :name (name :op "Deuba")),false), Span(3,4,List(31),tension,tension,false)),Map(30 -> "Deuba", 2 -> "Europe", 5 -> day, 27 -> abort-01, 12 -> return-01, 8 -> country, 15 -> name, 21 -> "Summit", 18 -> organization, 24 -> "Johannesburg", 7 -> after, 1 -> name, 17 -> "Development", 23 -> name, 26 -> plan-01, 4 -> temporal-quantity, 11 -> immediate, 14 -> organization, 29 -> name, 20 -> "World", 28 -> person, 6 -> 9, 9 -> name, 0 -> continent, 22 -> city, 16 -> "Sustainable", 19 -> name, 10 -> "Nepal", 3 -> visit-01, 31 -> tension, 25 -> trip-01, 13 -> and),Map(n -> name, t -> temporal-quantity, p2 -> person, a3 -> abort-01, n4 -> name, v -> visit-01, d -> day, t3 -> tension, p -> plan-01, c3 -> city, n3 -> name, a -> after, n6 -> name, o2 -> organization, t2 -> trip-01, i -> immediate, r -> return-01, a2 -> and, c -> continent, 9 -> 9, o -> organization, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@117bcfdc,Annotation([Ljava.lang.String;@73a19967,[Ljava.lang.String;@5e746d37,[Ljava.lang.String;@6e1b9411),Annotation([Ljava.lang.String;@21d1b321,[Ljava.lang.String;@5ec46cdd,[Ledu.cmu.lti.nlp.amr.Dependency;@2324bfe7),Annotation([Ljava.lang.String;@112d1c8e,[Ljava.lang.String;@3d49fd31,[Ljava.lang.String;@4016ccc1),Annotation([Ljava.lang.String;@46cb98a3,[Ljava.lang.String;@3ffb3598,[Ledu.cmu.lti.nlp.amr.Entity;@4da9f723))
AMR:
(a / after, op, v / visit-01)
(a2 / and, op, a3 / abort-01)
(a2 / and, op, r / return-01)
(a3 / abort-01, ARG0, p2 / person)
(a3 / abort-01, ARG1, t2 / trip-01)
(c / continent, name, n / name)
(c2 / country, name, n2 / name)
(c3 / city, name, n5 / name)
(i / immediate, time, a / after)
(n / name, op, "Europe")
(n2 / name, op, "Nepal")
(n3 / name, op, "Development")
(n3 / name, op, "Sustainable")
(n4 / name, op, "Summit")
(n4 / name, op, "World")
(n5 / name, op, "Johannesburg")
(n6 / name, op, "Deuba")
(o / organization, name, n3 / name)
(o2 / organization, name, n4 / name)
(p / plan-01, ARG1, t2 / trip-01)
(p2 / person, name, n6 / name)
(r / return-01, ARG1, p2 / person)
(r / return-01, ARG4, c2 / country)
(t / temporal-quantity, quant, 9 / 9)
(t / temporal-quantity, unit, d / day)
(t2 / trip-01, ARG0, o / organization)
(t2 / trip-01, ARG1, c3 / city)
(t2 / trip-01, time, o2 / organization)
(t3 / tension, name, p2 / person)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, c / continent)
(v / visit-01, duration, t / temporal-quantity)

Decoded in 2,772,277 microseconds
Sentence: 20011126 the Nepali government imposed a stated of emergency when anti-government guerrillas unilaterally defied 4 month long cease-fire negotiations with the Government and attacked army barracks and police posts.

mkDayMonthYear(20011126,26,11,2001)
NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "Nepali"))
mkDayMonthYear(20011126,26,11,2001)
Spans:
Span 0-1:  20011126 => (date-entity :day 26 :month 11 :year 2001)
Span 16-17:  4 => 4
Span 30-31:  and => and
Span 26-27:  and => and
Span 28-29:  army => army
Span 27-28:  attacked => attack-01
Span 29-30:  barracks => barrack
Span 19-20:  cease => cease-01
Span 15-16:  defied => defy-01
Span 8-9:  emergency => emergency
Span 21-22:  fire => fire-01
Span 25-26:  Government => (government-organization :ARG0-of govern-01)
Span 12-13:  government => (government-organization :ARG0-of govern-01)
Span 3-4:  government => (government-organization :ARG0-of govern-01)
Span 13-14:  guerrillas => guerrilla
Span 4-5:  imposed => impose-01
Span 18-19:  long => long
Span 17-18:  month => (temporal-quantity :unit month)
Span 22-23:  negotiations => negotiate-01
Span 2-3:  Nepali => (country :name (name :op "Nepal"))
Span 31-32:  police => police
Span 32-33:  posts => post
Span 6-7:  stated => state-01
Span 14-15:  unilaterally => unilateral

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),posts,post,false), Span(31,32,List(1),police,police,false), Span(30,31,List(2),and,and,false), Span(29,30,List(3),barracks,barrack,false), Span(28,29,List(4),army,army,false), Span(27,28,List(5),attacked,attack-01,false), Span(26,27,List(6),and,and,false), Span(25,26,List(8, 7),Government,(government-organization :ARG0-of govern-01),false), Span(22,23,List(9),negotiations,negotiate-01,false), Span(21,22,List(10),fire,fire-01,false), Span(19,20,List(11),cease,cease-01,false), Span(18,19,List(12),long,long,false), Span(17,18,List(14, 13),month,(temporal-quantity :unit month),false), Span(16,17,List(15),4,4,false), Span(15,16,List(16),defied,defy-01,false), Span(14,15,List(17),unilaterally,unilateral,false), Span(13,14,List(18),guerrillas,guerrilla,false), Span(12,13,List(20, 19),government,(government-organization :ARG0-of govern-01),false), Span(8,9,List(21),emergency,emergency,false), Span(6,7,List(22),stated,state-01,false), Span(4,5,List(23),imposed,impose-01,false), Span(3,4,List(25, 24),government,(government-organization :ARG0-of govern-01),false), Span(2,3,List(28, 27, 26),Nepali,(country :name (name :op "Nepal")),false), Span(0,1,List(32, 31, 30, 29),20011126,(date-entity :day 26 :month 11 :year 2001),false)),Map(30 -> 26, 2 -> and, 5 -> attack-01, 27 -> name, 12 -> long, 8 -> govern-01, 15 -> 4, 21 -> emergency, 18 -> guerrilla, 24 -> government-organization, 7 -> government-organization, 1 -> police, 17 -> unilateral, 23 -> impose-01, 26 -> country, 4 -> army, 11 -> cease-01, 32 -> 2001, 14 -> month, 29 -> date-entity, 20 -> govern-01, 28 -> "Nepal", 6 -> and, 9 -> negotiate-01, 0 -> post, 22 -> state-01, 16 -> defy-01, 19 -> government-organization, 10 -> fire-01, 3 -> barrack, 31 -> 11, 25 -> govern-01, 13 -> temporal-quantity),Map(e -> emergency, n -> negotiate-01, g3 -> guerrilla, 2 -> 26, t -> temporal-quantity, g6 -> government-organization, b -> barrack, p2 -> police, a3 -> attack-01, s -> state-01, m -> month, d -> defy-01, 1 -> 11, g2 -> govern-01, g -> government-organization, p -> post, a -> and, 4 -> 4, g5 -> govern-01, d2 -> date-entity, a2 -> army, i -> impose-01, g7 -> govern-01, c -> cease-01, l -> long, u -> unilateral, 22 -> 2001, f -> fire-01, n2 -> name, c2 -> country, g4 -> government-organization, a4 -> and))),[Ljava.lang.String;@3b2f4a93,Annotation([Ljava.lang.String;@213bd3d5,[Ljava.lang.String;@470a659f,[Ljava.lang.String;@451882b2),Annotation([Ljava.lang.String;@4a23350,[Ljava.lang.String;@7b78ed6a,[Ledu.cmu.lti.nlp.amr.Dependency;@6fca5907),Annotation([Ljava.lang.String;@6ec65b5e,[Ljava.lang.String;@7bebcd65,[Ljava.lang.String;@47447ccf),Annotation([Ljava.lang.String;@7afb1741,[Ljava.lang.String;@263bbfeb,[Ledu.cmu.lti.nlp.amr.Entity;@31edeac))
AMR:
(a / and, op, b / barrack)
(a / and, op, p / post)
(a3 / attack-01, ARG0, g3 / guerrilla)
(a3 / attack-01, ARG1, a / and)
(a4 / and, op, a3 / attack-01)
(a4 / and, op, d / defy-01)
(b / barrack, mod, a2 / army)
(c / cease-01, ARG1, f / fire-01)
(c2 / country, name, n2 / name)
(d / defy-01, ARG0, g3 / guerrilla)
(d / defy-01, ARG1, n / negotiate-01)
(d / defy-01, mod, u / unilateral)
(d2 / date-entity, day, 2 / 26)
(d2 / date-entity, month, 1 / 11)
(d2 / date-entity, year, 22 / 2001)
(f / fire-01, ARG1, g / government-organization)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(g5 / govern-01, ARG0, g4 / government-organization)
(g5 / govern-01, ARG1, c2 / country)
(g7 / govern-01, ARG0, g6 / government-organization)
(g7 / govern-01, ARG1, c2 / country)
(i / impose-01, ARG0, g / government-organization)
(i / impose-01, ARG1, s / state-01)
(i / impose-01, time, a4 / and)
(i / impose-01, time, d2 / date-entity)
(n / negotiate-01, ARG0, g3 / guerrilla)
(n / negotiate-01, ARG1, l / long)
(n / negotiate-01, duration, t / temporal-quantity)
(n2 / name, op, "Nepal")
(p / post, mod, p2 / police)
(s / state-01, ARG1, e / emergency)
(t / temporal-quantity, quant, 4 / 4)
(t / temporal-quantity, unit, m / month)

Decoded in 2,400,066 microseconds
Sentence: 2002-10-19

mkDayMonthYear(2002-10-19,19,10,2002)
mkDayMonthYear(2002-10-19,19,10,2002)
Spans:
Span 0-1:  2002-10-19 => (date-entity :day 19 :month 10 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-10-19,(date-entity :day 19 :month 10 :year 2002),false)),Map(2 -> 10, 1 -> 19, 0 -> date-entity, 3 -> 2002),Map(2 -> 2002, 12 -> 10, d -> date-entity, 1 -> 19))),[Ljava.lang.String;@67d86804,Annotation([Ljava.lang.String;@45bb2aa1,[Ljava.lang.String;@3e84111a,[Ljava.lang.String;@4b1a43d8),Annotation([Ljava.lang.String;@6fa69af7,[Ljava.lang.String;@73545b80,[Ledu.cmu.lti.nlp.amr.Dependency;@6d469831),Annotation([Ljava.lang.String;@74db12c2,[Ljava.lang.String;@2ff15f8c,[Ljava.lang.String;@7ea899a9),Annotation([Ljava.lang.String;@2776015d,[Ljava.lang.String;@b174a73,[Ledu.cmu.lti.nlp.amr.Entity;@2e3f79a2))
AMR:
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 12 / 10)
(d / date-entity, year, 2 / 2002)

Decoded in 6,925 microseconds
Sentence: Nepal (NP)

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (organization :name (name :op "NP"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 0-1:  Nepal => (country :name (name :op "Nepal"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false)),Map(2 -> "Nepal", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@1460c81d,Annotation([Ljava.lang.String;@38b5f25,[Ljava.lang.String;@327ed9f5,[Ljava.lang.String;@67594471),Annotation([Ljava.lang.String;@756b58a7,[Ljava.lang.String;@2cc04358,[Ledu.cmu.lti.nlp.amr.Dependency;@68b58644),Annotation([Ljava.lang.String;@45e22def,[Ljava.lang.String;@6ae3fb94,[Ljava.lang.String;@4417af13),Annotation([Ljava.lang.String;@d48673,[Ljava.lang.String;@548d5ed3,[Ledu.cmu.lti.nlp.amr.Entity;@21c7208d))
AMR:
(c / country, name, n / name)
(n / name, op, "Nepal")

Decoded in 4,406 microseconds
Sentence: terrorism; dissent

Spans:
Span 1-2:  ; => and
Span 2-3:  dissent => dissent-01
Span 0-1:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),dissent,dissent-01,false), Span(1,2,List(1),;,and,false), Span(0,1,List(2),terrorism,terrorism,false)),Map(2 -> terrorism, 1 -> and, 0 -> dissent-01),Map(t -> terrorism, d -> dissent-01, a -> and))),[Ljava.lang.String;@58516c91,Annotation([Ljava.lang.String;@7c129ef6,[Ljava.lang.String;@42d73c61,[Ljava.lang.String;@5a8cbffe),Annotation([Ljava.lang.String;@96a75da,[Ljava.lang.String;@61e7bf2f,[Ledu.cmu.lti.nlp.amr.Dependency;@1a28b346),Annotation([Ljava.lang.String;@25e49cb2,[Ljava.lang.String;@7f7af971,[Ljava.lang.String;@23382f76),Annotation([Ljava.lang.String;@7c551ad4,[Ljava.lang.String;@7d5508e0,[Ledu.cmu.lti.nlp.amr.Entity;@554cd74a))
AMR:
(a / and, op, d / dissent-01)
(a / and, op, t / terrorism)

Decoded in 5,121 microseconds
Sentence: Several policemen killed and wounded by guerrillas in Nepal following a breakdown in peace talks between guerrillas and the Nepali government.

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 17-18:  and => and
Span 3-4:  and => and
Span 15-16:  between => between
Span 11-12:  breakdown => break-12
Span 9-10:  following => follow-01
Span 20-21:  government => (government-organization :ARG0-of govern-01)
Span 16-17:  guerrillas => guerrilla
Span 6-7:  guerrillas => guerrilla
Span 2-3:  killed => kill-01
Span 8-9:  Nepal => (country :name (name :op "Nepal"))
Span 19-20:  Nepali => (country :name (name :op "Nepal"))
Span 13-14:  peace => peace
Span 1-2:  policemen => policeman
Span 0-1:  Several => several
Span 14-15:  talks => talk-01
Span 4-5:  wounded => wound-01

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(1, 0),government,(government-organization :ARG0-of govern-01),false), Span(19,20,List(4, 3, 2),Nepali,(country :name (name :op "Nepal")),false), Span(17,18,List(5),and,and,false), Span(16,17,List(6),guerrillas,guerrilla,false), Span(15,16,List(7),between,between,false), Span(14,15,List(8),talks,talk-01,false), Span(13,14,List(9),peace,peace,false), Span(11,12,List(10),breakdown,break-12,false), Span(9,10,List(11),following,follow-01,false), Span(8,9,List(14, 13, 12),Nepal,(country :name (name :op "Nepal")),false), Span(6,7,List(15),guerrillas,guerrilla,false), Span(4,5,List(16),wounded,wound-01,false), Span(3,4,List(17),and,and,false), Span(2,3,List(18),killed,kill-01,false), Span(1,2,List(19),policemen,policeman,false), Span(0,1,List(20),Several,several,false)),Map(2 -> country, 5 -> and, 12 -> country, 15 -> guerrilla, 8 -> talk-01, 18 -> kill-01, 7 -> between, 17 -> and, 1 -> govern-01, 4 -> "Nepal", 11 -> follow-01, 14 -> "Nepal", 20 -> several, 6 -> guerrilla, 0 -> government-organization, 9 -> peace, 16 -> wound-01, 19 -> policeman, 3 -> name, 10 -> break-12, 13 -> name),Map(w -> wound-01, n -> name, g3 -> guerrilla, k -> kill-01, b -> between, t -> talk-01, b2 -> break-12, p2 -> policeman, s -> several, g2 -> govern-01, g -> government-organization, p -> peace, a -> and, a2 -> and, c -> country, f -> follow-01, g4 -> guerrilla, c2 -> country, n2 -> name))),[Ljava.lang.String;@37ed010a,Annotation([Ljava.lang.String;@633a2e99,[Ljava.lang.String;@367d2816,[Ljava.lang.String;@5b84f14),Annotation([Ljava.lang.String;@5a82ebf8,[Ljava.lang.String;@68fe48d7,[Ledu.cmu.lti.nlp.amr.Dependency;@379ce046),Annotation([Ljava.lang.String;@701bc94e,[Ljava.lang.String;@3d8b319e,[Ljava.lang.String;@27a97e08),Annotation([Ljava.lang.String;@77e7246b,[Ljava.lang.String;@5918c260,[Ledu.cmu.lti.nlp.amr.Entity;@3d7b1f1c))
AMR:
(a / and, op, g3 / guerrilla)
(a2 / and, location, c2 / country)
(a2 / and, op, w / wound-01)
(b / between, op, g3 / guerrilla)
(b2 / break-12, ARG1, t / talk-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(f / follow-01, ARG1, a / and)
(f / follow-01, ARG2, b2 / break-12)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(k / kill-01, ARG1, p2 / policeman)
(n / name, op, "Nepal")
(n2 / name, op, "Nepal")
(p2 / policeman, quant, s / several)
(t / talk-01, ARG0, g4 / guerrilla)
(t / talk-01, ARG1, p / peace)
(t / talk-01, ARG2, g / government-organization)
(w / wound-01, ARG0, g4 / guerrilla)
(w / wound-01, ARG1, p2 / policeman)

Decoded in 940,260 microseconds
Sentence: State-run Radio Nepal reported on 20 October 2002 that at least 3 policemen were killed and 19 others wounded the evening of 19 October 2002 when their vehicle was ambushed by anti-government guerrillas in western Nepal.

NER Entity: (country :name (name :op "Nepal"))
mkDayMonthYear(20	October	2002,20,October,2002)
mkDayMonthYear(19	October	2002,19,October,2002)
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 18-19:  19 => 19
Span 24-27:  19 October 2002 => (date-entity :day 19 :month 10 :year 2002)
Span 7-10:  20 October 2002 => (date-entity :day 20 :month 10 :year 2002)
Span 13-14:  3 => 3
Span 31-32:  ambushed => ambush-01
Span 17-18:  and => and
Span 22-23:  evening => evening
Span 35-36:  government => (government-organization :ARG0-of govern-01)
Span 36-37:  guerrillas => guerrilla
Span 16-17:  killed => kill-01
Span 39-40:  Nepal => (country :name (name :op "Nepal"))
Span 19-20:  others => other
Span 14-15:  policemen => policeman
Span 3-5:  Radio Nepal => (publication :name (name :op "Nepal" :op "Radio"))
Span 5-6:  reported => report-01
Span 2-3:  run => run-01
Span 29-30:  vehicle => vehicle
Span 38-39:  western => western
Span 20-21:  wounded => wound-01

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(2, 1, 0),Nepal,(country :name (name :op "Nepal")),false), Span(38,39,List(3),western,western,false), Span(36,37,List(4),guerrillas,guerrilla,false), Span(35,36,List(6, 5),government,(government-organization :ARG0-of govern-01),false), Span(31,32,List(7),ambushed,ambush-01,false), Span(29,30,List(8),vehicle,vehicle,false), Span(24,27,List(12, 11, 10, 9),19 October 2002,(date-entity :day 19 :month 10 :year 2002),false), Span(22,23,List(13),evening,evening,false), Span(20,21,List(14),wounded,wound-01,false), Span(19,20,List(15),others,other,false), Span(18,19,List(16),19,19,false), Span(17,18,List(17),and,and,false), Span(16,17,List(18),killed,kill-01,false), Span(14,15,List(19),policemen,policeman,false), Span(13,14,List(20),3,3,false), Span(7,10,List(24, 23, 22, 21),20 October 2002,(date-entity :day 20 :month 10 :year 2002),false), Span(5,6,List(25),reported,report-01,false), Span(3,5,List(29, 28, 27, 26),Radio Nepal,(publication :name (name :op "Nepal" :op "Radio")),false), Span(2,3,List(30),run,run-01,false)),Map(30 -> run-01, 2 -> "Nepal", 5 -> government-organization, 27 -> name, 12 -> 2002, 8 -> vehicle, 15 -> other, 21 -> date-entity, 18 -> kill-01, 24 -> 2002, 7 -> ambush-01, 1 -> name, 17 -> and, 23 -> 10, 26 -> publication, 4 -> guerrilla, 11 -> 10, 14 -> wound-01, 29 -> "Radio", 20 -> 3, 28 -> "Nepal", 6 -> govern-01, 9 -> date-entity, 0 -> country, 22 -> 20, 16 -> 19, 19 -> policeman, 10 -> 19, 3 -> western, 25 -> report-01, 13 -> evening),Map(e -> evening, w -> western, n -> name, g3 -> govern-01, 2 -> 2002, 12 -> 10, k -> kill-01, p2 -> publication, v -> vehicle, d -> date-entity, 1 -> 19, g2 -> government-organization, r2 -> run-01, 23 -> 2002, g -> guerrilla, p -> policeman, a -> ambush-01, d2 -> date-entity, 14 -> 10, w2 -> wound-01, a2 -> and, r -> report-01, c -> country, 22 -> 20, o -> other, 3 -> 3, n2 -> name, 13 -> 19))),[Ljava.lang.String;@51ce6f85,Annotation([Ljava.lang.String;@1f44ddab,[Ljava.lang.String;@5017e1,[Ljava.lang.String;@65b66b08),Annotation([Ljava.lang.String;@4726927c,[Ljava.lang.String;@7eb6b6b6,[Ledu.cmu.lti.nlp.amr.Dependency;@7ed9499e),Annotation([Ljava.lang.String;@28e19366,[Ljava.lang.String;@5b275174,[Ljava.lang.String;@10ef5fa0),Annotation([Ljava.lang.String;@244e619a,[Ljava.lang.String;@10acd6,[Ledu.cmu.lti.nlp.amr.Entity;@61dde151))
AMR:
(3 / 3, mod, g2 / government-organization)
(a / ambush-01, ARG0, g / guerrilla)
(a / ambush-01, ARG1, v / vehicle)
(a / ambush-01, location, w / western)
(a2 / and, op, k / kill-01)
(a2 / and, op, w2 / wound-01)
(a2 / and, time, a / ambush-01)
(a2 / and, time, d / date-entity)
(c / country, name, n / name)
(d / date-entity, day, 1 / 19)
(d / date-entity, dayperiod, e / evening)
(d / date-entity, month, 12 / 10)
(d / date-entity, year, 2 / 2002)
(d2 / date-entity, day, 22 / 20)
(d2 / date-entity, month, 14 / 10)
(d2 / date-entity, year, 23 / 2002)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, g / guerrilla)
(k / kill-01, ARG1, c / country)
(n / name, op, "Nepal")
(n2 / name, op, "Nepal")
(n2 / name, op, "Radio")
(p / policeman, mod, o / other)
(p / policeman, quant, 13 / 19)
(p2 / publication, name, n2 / name)
(r / report-01, ARG0, p2 / publication)
(r / report-01, ARG1, a2 / and)
(r / report-01, time, d2 / date-entity)
(r2 / run-01, ARG1, p2 / publication)
(w2 / wound-01, ARG1, p / policeman)

Decoded in 2,506,076 microseconds
Sentence: Radio Nepal quoted a security official as stating --

NER Entity: (country :name (name :op "Nepal"))
NER Entity: (country :name (name :op "Nepal"))
Spans:
Span 5-6:  official => (have-org-role-91 :ARG2 official)
Span 2-3:  quoted => quote-01
Span 0-2:  Radio Nepal => (publication :name (name :op "Nepal" :op "Radio"))
Span 4-5:  security => security
Span 7-8:  stating => state-01

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),stating,state-01,false), Span(5,6,List(2, 1),official,(have-org-role-91 :ARG2 official),false), Span(4,5,List(3),security,security,false), Span(2,3,List(4),quoted,quote-01,false), Span(0,2,List(8, 7, 6, 5),Radio Nepal,(publication :name (name :op "Nepal" :op "Radio")),false)),Map(2 -> official, 5 -> publication, 8 -> "Radio", 7 -> "Nepal", 1 -> have-org-role-91, 4 -> quote-01, 6 -> name, 0 -> state-01, 3 -> security),Map(n -> name, q -> quote-01, h -> have-org-role-91, s2 -> security, s -> state-01, p -> publication, o -> official))),[Ljava.lang.String;@b25b095,Annotation([Ljava.lang.String;@5cb042da,[Ljava.lang.String;@59c33386,[Ljava.lang.String;@571a9686),Annotation([Ljava.lang.String;@719d35e8,[Ljava.lang.String;@2f651f93,[Ledu.cmu.lti.nlp.amr.Dependency;@6ffa56fa),Annotation([Ljava.lang.String;@6c575325,[Ljava.lang.String;@747d1932,[Ljava.lang.String;@736309a9),Annotation([Ljava.lang.String;@4e93dcb9,[Ljava.lang.String;@188b6035,[Ledu.cmu.lti.nlp.amr.Entity;@4a34e9f))
AMR:
(h / have-org-role-91, ARG1, s2 / security)
(h / have-org-role-91, ARG2, o / official)
(n / name, op, "Nepal")
(n / name, op, "Radio")
(p / publication, name, n / name)
(q / quote-01, ARG0, p / publication)
(q / quote-01, ARG1, h / have-org-role-91)
(q / quote-01, ARG2, s / state-01)

Decoded in 182,594 microseconds
Sentence: 3 police personnel including an inspector and a sub-inspector were killed when 2 police vehicles were moving towards Tikapur area in Kailali district in search of the guerrillas.

NER Entity: (country :name (name :op "Tikapur"))
NER Entity: (country :name (name :op "Kailali"))
NER Entity: (country :name (name :op "Kailali"))
NER Entity: (country :name (name :op "Tikapur"))
Spans:
Span 14-15:  2 => 2
Span 0-1:  3 => 3
Span 6-7:  and => and
Span 21-22:  area => area
Span 24-25:  district => district
Span 29-30:  guerrillas => guerrilla
Span 3-4:  including => include-91
Span 10-11:  inspector => inspect-01
Span 5-6:  inspector => inspect-01
Span 23-24:  Kailali => (name :op "Kailali")
Span 12-13:  killed => kill-01
Span 18-19:  moving => move-02
Span 2-3:  personnel => (have-org-role-91 :ARG2 personnel)
Span 15-16:  police => police
Span 1-2:  police => police
Span 26-27:  search => search-01
Span 8-9:  sub => sub
Span 20-21:  Tikapur => (name :op "Tikapur")
Span 16-17:  vehicles => vehicle

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),guerrillas,guerrilla,false), Span(26,27,List(1),search,search-01,false), Span(24,25,List(2),district,district,false), Span(23,24,List(4, 3),Kailali,(name :op "Kailali"),false), Span(21,22,List(5),area,area,false), Span(20,21,List(7, 6),Tikapur,(name :op "Tikapur"),false), Span(18,19,List(8),moving,move-02,false), Span(16,17,List(9),vehicles,vehicle,false), Span(15,16,List(10),police,police,false), Span(14,15,List(11),2,2,false), Span(12,13,List(12),killed,kill-01,false), Span(10,11,List(13),inspector,inspect-01,false), Span(8,9,List(14),sub,sub,false), Span(6,7,List(15),and,and,false), Span(5,6,List(16),inspector,inspect-01,false), Span(3,4,List(17),including,include-91,false), Span(2,3,List(19, 18),personnel,(have-org-role-91 :ARG2 personnel),false), Span(1,2,List(20),police,police,false), Span(0,1,List(21),3,3,false)),Map(2 -> district, 5 -> area, 12 -> kill-01, 15 -> and, 8 -> move-02, 21 -> 3, 18 -> have-org-role-91, 7 -> "Tikapur", 17 -> include-91, 1 -> search-01, 4 -> "Kailali", 11 -> 2, 14 -> sub, 20 -> police, 6 -> name, 0 -> guerrilla, 9 -> vehicle, 16 -> inspect-01, 19 -> personnel, 3 -> name, 10 -> police, 13 -> inspect-01),Map(n -> name, h -> have-org-role-91, 2 -> 2, s2 -> sub, k -> kill-01, p2 -> personnel, s -> search-01, v -> vehicle, d -> district, m -> move-02, i3 -> include-91, g -> guerrilla, p -> police, a -> area, i2 -> inspect-01, a2 -> and, i -> inspect-01, 3 -> 3, p3 -> police, n2 -> name))),[Ljava.lang.String;@6f6621e3,Annotation([Ljava.lang.String;@3fc05ea2,[Ljava.lang.String;@7c891ba7,[Ljava.lang.String;@6240651f),Annotation([Ljava.lang.String;@3cf7298d,[Ljava.lang.String;@1ff55ff,[Ledu.cmu.lti.nlp.amr.Dependency;@351f2244),Annotation([Ljava.lang.String;@5496c165,[Ljava.lang.String;@51a8313b,[Ljava.lang.String;@2a03d65c),Annotation([Ljava.lang.String;@6642dc5a,[Ljava.lang.String;@43da41e,[Ledu.cmu.lti.nlp.amr.Entity;@148c7c4b))
AMR:
(a / area, location, d / district)
(a / area, name, n2 / name)
(a2 / and, op, s2 / sub)
(d / district, name, n / name)
(h / have-org-role-91, ARG1, p3 / police)
(h / have-org-role-91, ARG2, p2 / personnel)
(i / inspect-01, ARG1, s2 / sub)
(i2 / inspect-01, ARG1, s / search-01)
(i3 / include-91, ARG1, a2 / and)
(i3 / include-91, ARG6, 3 / 3)
(k / kill-01, ARG1, i3 / include-91)
(k / kill-01, time, m / move-02)
(m / move-02, ARG1, v / vehicle)
(m / move-02, ARG2, a / area)
(m / move-02, purpose, s / search-01)
(n / name, op, "Kailali")
(n2 / name, op, "Tikapur")
(s / search-01, ARG2, g / guerrilla)
(v / vehicle, mod, p / police)
(v / vehicle, mod, p3 / police)
(v / vehicle, quant, 2 / 2)

Decoded in 741,032 microseconds
Sentence: The policemen killed and wounded were all in the first vehicle.

Spans:
Span 6-7:  all => all
Span 3-4:  and => and
Span 2-3:  killed => kill-01
Span 1-2:  policemen => policeman
Span 10-11:  vehicle => vehicle
Span 4-5:  wounded => wound-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),vehicle,vehicle,false), Span(6,7,List(1),all,all,false), Span(4,5,List(2),wounded,wound-01,false), Span(3,4,List(3),and,and,false), Span(2,3,List(4),killed,kill-01,false), Span(1,2,List(5),policemen,policeman,false)),Map(2 -> wound-01, 5 -> policeman, 1 -> all, 4 -> kill-01, 0 -> vehicle, 3 -> and),Map(w -> wound-01, k -> kill-01, v -> vehicle, p -> policeman, a -> all, a2 -> and))),[Ljava.lang.String;@2009f9b0,Annotation([Ljava.lang.String;@50d951e7,[Ljava.lang.String;@39ad12b6,[Ljava.lang.String;@4eb45fec),Annotation([Ljava.lang.String;@211febf3,[Ljava.lang.String;@3bd3d05e,[Ledu.cmu.lti.nlp.amr.Dependency;@6aba5d30),Annotation([Ljava.lang.String;@61d34b4,[Ljava.lang.String;@588307f7,[Ljava.lang.String;@7df76d99),Annotation([Ljava.lang.String;@459cfcca,[Ljava.lang.String;@2acbc859,[Ledu.cmu.lti.nlp.amr.Entity;@6ab7ce48))
AMR:
(a2 / and, op, k / kill-01)
(a2 / and, op, p / policeman)
(a2 / and, quant, a / all)
(v / vehicle, op, w / wound-01)
(w / wound-01, ARG1, p / policeman)

Decoded in 94,885 microseconds
Sentence: The driver of the vehicle was also killed in the ambush.

Spans:
Span 6-7:  also => also
Span 10-11:  ambush => ambush-01
Span 1-2:  driver => (person :ARG0-of drive-01)
Span 7-8:  killed => kill-01
Span 4-5:  vehicle => vehicle

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),ambush,ambush-01,false), Span(7,8,List(1),killed,kill-01,false), Span(6,7,List(2),also,also,false), Span(4,5,List(3),vehicle,vehicle,false), Span(1,2,List(5, 4),driver,(person :ARG0-of drive-01),false)),Map(2 -> also, 5 -> drive-01, 1 -> kill-01, 4 -> person, 0 -> ambush-01, 3 -> vehicle),Map(k -> kill-01, d -> drive-01, v -> vehicle, p -> person, a -> ambush-01, a2 -> also))),[Ljava.lang.String;@2c6aed22,Annotation([Ljava.lang.String;@e322ec9,[Ljava.lang.String;@7acfb656,[Ljava.lang.String;@2e5ee2c9),Annotation([Ljava.lang.String;@55a609dd,[Ljava.lang.String;@4afd21c6,[Ledu.cmu.lti.nlp.amr.Dependency;@4d0753c9),Annotation([Ljava.lang.String;@1416a80a,[Ljava.lang.String;@719bb3b4,[Ljava.lang.String;@52cb4f50),Annotation([Ljava.lang.String;@25a5c7db,[Ljava.lang.String;@4d27d9d,[Ledu.cmu.lti.nlp.amr.Entity;@28f878a0))
AMR:
(d / drive-01, ARG0, p / person)
(d / drive-01, ARG1, v / vehicle)
(k / kill-01, ARG1, p / person)
(k / kill-01, ARG2, a / ambush-01)
(k / kill-01, mod, a2 / also)

Decoded in 23,359 microseconds
Sentence: 5 police personnel are still missing.

Spans:
Span 0-1:  5 => 5
Span 5-6:  missing => miss-01
Span 2-3:  personnel => (have-org-role-91 :ARG2 personnel)
Span 1-2:  police => police
Span 4-5:  still => still

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),missing,miss-01,false), Span(4,5,List(1),still,still,false), Span(2,3,List(3, 2),personnel,(have-org-role-91 :ARG2 personnel),false), Span(1,2,List(4),police,police,false), Span(0,1,List(5),5,5,false)),Map(2 -> have-org-role-91, 5 -> 5, 1 -> still, 4 -> police, 0 -> miss-01, 3 -> personnel),Map(h -> have-org-role-91, 5 -> 5, p2 -> police, s -> still, m -> miss-01, p -> personnel))),[Ljava.lang.String;@20411320,Annotation([Ljava.lang.String;@2b5183ec,[Ljava.lang.String;@3c782d8e,[Ljava.lang.String;@572e6fd9),Annotation([Ljava.lang.String;@7f5eae0f,[Ljava.lang.String;@58b71ceb,[Ledu.cmu.lti.nlp.amr.Dependency;@255e5e2e),Annotation([Ljava.lang.String;@12abdfb,[Ljava.lang.String;@b0e5507,[Ljava.lang.String;@6bbe50c9),Annotation([Ljava.lang.String;@3c46dcbe,[Ljava.lang.String;@68577ba8,[Ledu.cmu.lti.nlp.amr.Entity;@1108adc8))
AMR:
(h / have-org-role-91, ARG1, p2 / police)
(h / have-org-role-91, ARG2, p / personnel)
(h / have-org-role-91, ARG6, 5 / 5)
(m / miss-01, ARG1, p / personnel)
(m / miss-01, mod, s / still)

Decoded in 52,928 microseconds
Sentence: The wounded police personnel were brought to Kathmandu and Nepalgunj for treatment and additional security personnel were mobilized in the area to defend against the guerrillas.

NER Entity: (country :name (name :op "Kathmandu"))
NER Entity: (country :name (name :op "Nepalgunj"))
NER Entity: (country :name (name :op "Nepalgunj"))
NER Entity: (country :name (name :op "Kathmandu"))
Spans:
Span 13-14:  additional => additional
Span 12-13:  and => and
Span 8-9:  and => and
Span 20-21:  area => area
Span 5-6:  brought => bring-01
Span 22-23:  defend => defend-01
Span 25-26:  guerrillas => guerrilla
Span 7-8:  Kathmandu => (city :name (name :op "Kathmandu"))
Span 17-18:  mobilized => mobilize-01
Span 9-10:  Nepalgunj => (city :name (name :op "Nepalgunj"))
Span 15-16:  personnel => (have-org-role-91 :ARG2 personnel)
Span 3-4:  personnel => (have-org-role-91 :ARG2 personnel)
Span 2-3:  police => police
Span 14-15:  security => security
Span 11-12:  treatment => treat-03
Span 1-2:  wounded => wound-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),guerrillas,guerrilla,false), Span(22,23,List(1),defend,defend-01,false), Span(20,21,List(2),area,area,false), Span(17,18,List(3),mobilized,mobilize-01,false), Span(15,16,List(5, 4),personnel,(have-org-role-91 :ARG2 personnel),false), Span(14,15,List(6),security,security,false), Span(13,14,List(7),additional,additional,false), Span(12,13,List(8),and,and,false), Span(11,12,List(9),treatment,treat-03,false), Span(9,10,List(12, 11, 10),Nepalgunj,(city :name (name :op "Nepalgunj")),false), Span(8,9,List(13),and,and,false), Span(7,8,List(16, 15, 14),Kathmandu,(city :name (name :op "Kathmandu")),false), Span(5,6,List(17),brought,bring-01,false), Span(3,4,List(19, 18),personnel,(have-org-role-91 :ARG2 personnel),false), Span(2,3,List(20),police,police,false), Span(1,2,List(21),wounded,wound-01,false)),Map(2 -> area, 5 -> personnel, 12 -> "Nepalgunj", 15 -> name, 8 -> and, 21 -> wound-01, 18 -> have-org-role-91, 7 -> additional, 17 -> bring-01, 1 -> defend-01, 4 -> have-org-role-91, 11 -> name, 14 -> city, 20 -> police, 6 -> security, 0 -> guerrilla, 9 -> treat-03, 16 -> "Kathmandu", 19 -> personnel, 3 -> mobilize-01, 10 -> city, 13 -> and),Map(w -> wound-01, n -> name, h -> have-org-role-91, h2 -> have-org-role-91, b -> bring-01, t -> treat-03, p2 -> personnel, a3 -> and, s -> security, d -> defend-01, m -> mobilize-01, g -> guerrilla, p -> personnel, a -> area, a2 -> additional, c -> city, p3 -> police, n2 -> name, c2 -> city, a4 -> and))),[Ljava.lang.String;@8a98f38,Annotation([Ljava.lang.String;@20011bf,[Ljava.lang.String;@51d9b06c,[Ljava.lang.String;@5eb2172),Annotation([Ljava.lang.String;@41ffaeb8,[Ljava.lang.String;@43f0c2d1,[Ledu.cmu.lti.nlp.amr.Dependency;@5fb65013),Annotation([Ljava.lang.String;@38a1a26,[Ljava.lang.String;@3fbcfe81,[Ljava.lang.String;@7a1f45ed),Annotation([Ljava.lang.String;@1744a475,[Ljava.lang.String;@444cc791,[Ledu.cmu.lti.nlp.amr.Entity;@1c5c616f))
AMR:
(a3 / and, op, c / city)
(a3 / and, op, c2 / city)
(a4 / and, op, b / bring-01)
(a4 / and, op, m / mobilize-01)
(b / bring-01, ARG1, w / wound-01)
(b / bring-01, ARG2, a3 / and)
(b / bring-01, purpose, t / treat-03)
(c / city, name, n / name)
(c2 / city, name, n2 / name)
(d / defend-01, prep-against, g / guerrilla)
(h / have-org-role-91, ARG0, w / wound-01)
(h / have-org-role-91, ARG1, p3 / police)
(h / have-org-role-91, ARG2, p / personnel)
(h2 / have-org-role-91, ARG1, s / security)
(h2 / have-org-role-91, ARG2, p2 / personnel)
(m / mobilize-01, location, a / area)
(m / mobilize-01, purpose, d / defend-01)
(n / name, op, "Nepalgunj")
(n2 / name, op, "Kathmandu")
(p2 / personnel, mod, a2 / additional)
(w / wound-01, ARG1, h2 / have-org-role-91)

Decoded in 441,677 microseconds
Sentence: Anti-government insurgents have increased their violent activities across the Himalayan kingdom since the 9-month-long nationwide state of emergency expired at the end of August 2002.

NER Entity: (thing :name (name :op "Himalayan"))
NER Entity: (thing :name (name :op "Himalayan"))
Spans:
Span 15-16:  9 => 9
Span 9-10:  across => across
Span 8-9:  activities => activity
Span 0-1:  Anti => oppose-01
Span 29-31:  August 2002 => (date-entity :month 8 :year 2002)
Span 23-24:  emergency => emergency
Span 27-28:  end => end-01
Span 24-25:  expired => expire-01
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 5-6:  increased => increase-01
Span 3-4:  insurgents => insurgent
Span 12-13:  kingdom => kingdom
Span 19-20:  long => long
Span 17-18:  month => (temporal-quantity :unit month)
Span 20-21:  nationwide => nationwide
Span 13-14:  since => since
Span 21-22:  state => state
Span 7-8:  violent => violence

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,31,List(2, 1, 0),August 2002,(date-entity :month 8 :year 2002),false), Span(27,28,List(3),end,end-01,false), Span(24,25,List(4),expired,expire-01,false), Span(23,24,List(5),emergency,emergency,false), Span(21,22,List(6),state,state,false), Span(20,21,List(7),nationwide,nationwide,false), Span(19,20,List(8),long,long,false), Span(17,18,List(10, 9),month,(temporal-quantity :unit month),false), Span(15,16,List(11),9,9,false), Span(13,14,List(12),since,since,false), Span(12,13,List(13),kingdom,kingdom,false), Span(9,10,List(14),across,across,false), Span(8,9,List(15),activities,activity,false), Span(7,8,List(16),violent,violence,false), Span(5,6,List(17),increased,increase-01,false), Span(3,4,List(18),insurgents,insurgent,false), Span(2,3,List(20, 19),government,(government-organization :ARG0-of govern-01),false), Span(0,1,List(21),Anti,oppose-01,false)),Map(2 -> 2002, 5 -> emergency, 12 -> since, 15 -> activity, 8 -> long, 21 -> oppose-01, 18 -> insurgent, 7 -> nationwide, 17 -> increase-01, 1 -> 8, 4 -> expire-01, 11 -> 9, 14 -> across, 20 -> govern-01, 6 -> state, 0 -> date-entity, 9 -> temporal-quantity, 16 -> violence, 19 -> government-organization, 3 -> end-01, 10 -> month, 13 -> kingdom),Map(e -> end-01, n -> nationwide, 2 -> 2002, s2 -> since, k -> kingdom, t -> temporal-quantity, 8 -> 8, e2 -> expire-01, s -> state, v -> violence, d -> date-entity, m -> month, g2 -> govern-01, g -> government-organization, a -> across, i2 -> insurgent, i -> increase-01, a2 -> activity, l -> long, 9 -> 9, o -> oppose-01, e3 -> emergency))),[Ljava.lang.String;@1c6c6f24,Annotation([Ljava.lang.String;@2eb917d0,[Ljava.lang.String;@c6b2dd9,[Ljava.lang.String;@73437222),Annotation([Ljava.lang.String;@ca93621,[Ljava.lang.String;@6a48a7f3,[Ledu.cmu.lti.nlp.amr.Dependency;@3f985a86),Annotation([Ljava.lang.String;@57a2ed35,[Ljava.lang.String;@12ffd1de,[Ljava.lang.String;@3d278b4d),Annotation([Ljava.lang.String;@4096aa05,[Ljava.lang.String;@9d3c67,[Ledu.cmu.lti.nlp.amr.Entity;@6c806c8b))
AMR:
(a / across, op, k / kingdom)
(a2 / activity, mod, v / violence)
(a2 / activity, poss, i2 / insurgent)
(d / date-entity, month, 8 / 8)
(d / date-entity, year, 2 / 2002)
(e / end-01, ARG1, d / date-entity)
(e2 / expire-01, ARG1, s / state)
(e2 / expire-01, time, e / end-01)
(g2 / govern-01, ARG0, g / government-organization)
(i / increase-01, ARG0, i2 / insurgent)
(i / increase-01, ARG1, a2 / activity)
(i / increase-01, location, a / across)
(i / increase-01, time, s2 / since)
(o / oppose-01, ARG0, i2 / insurgent)
(o / oppose-01, ARG1, g / government-organization)
(s / state, duration, t / temporal-quantity)
(s / state, extent, n / nationwide)
(s / state, mod, e3 / emergency)
(s2 / since, op, e2 / expire-01)
(t / temporal-quantity, quant, 9 / 9)
(t / temporal-quantity, quant, l / long)
(t / temporal-quantity, unit, m / month)

Decoded in 725,625 microseconds
Sentence: The Nepali government initiated peace talks with the guerrillas in August 2001 in order to find a peaceful solution to the guerrilla insurgency that has killed more than 5000 people including policemen, guerrilla members and civilians since it began in the Himalayan kingdom in 1996.

NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "Himalayan"))
NER Entity: (thing :name (name :op "Nepali"))
Spans:
Span 45-46:  1996 => (date-entity :year 1996)
Span 28-29:  5000 => 5000
Span 35-36:  and => and
Span 10-12:  August 2001 => (date-entity :month 8 :year 2001)
Span 39-40:  began => begin-01
Span 36-37:  civilians => civilian
Span 15-16:  find => find-01
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 33-34:  guerrilla => guerrilla
Span 21-22:  guerrilla => guerrilla
Span 8-9:  guerrillas => guerrilla
Span 30-31:  including => include-91
Span 3-4:  initiated => initiate-01
Span 22-23:  insurgency => insurgency
Span 38-39:  it => it
Span 25-26:  killed => kill-01
Span 43-44:  kingdom => kingdom
Span 34-35:  members => (have-org-role-91 :ARG2 member)
Span 26-27:  more => more
Span 1-2:  Nepali => (country :name (name :op "Nepal"))
Span 4-5:  peace => peace
Span 17-18:  peaceful => peaceful
Span 29-30:  people => people
Span 31-32:  policemen => policeman
Span 37-38:  since => since
Span 18-19:  solution => solution
Span 5-6:  talks => talk-01

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(1, 0),1996,(date-entity :year 1996),false), Span(43,44,List(2),kingdom,kingdom,false), Span(39,40,List(3),began,begin-01,false), Span(38,39,List(4),it,it,false), Span(37,38,List(5),since,since,false), Span(36,37,List(6),civilians,civilian,false), Span(35,36,List(7),and,and,false), Span(34,35,List(9, 8),members,(have-org-role-91 :ARG2 member),false), Span(33,34,List(10),guerrilla,guerrilla,false), Span(31,32,List(11),policemen,policeman,false), Span(30,31,List(12),including,include-91,false), Span(29,30,List(13),people,people,false), Span(28,29,List(14),5000,5000,false), Span(26,27,List(15),more,more,false), Span(25,26,List(16),killed,kill-01,false), Span(22,23,List(17),insurgency,insurgency,false), Span(21,22,List(18),guerrilla,guerrilla,false), Span(18,19,List(19),solution,solution,false), Span(17,18,List(20),peaceful,peaceful,false), Span(15,16,List(21),find,find-01,false), Span(10,12,List(24, 23, 22),August 2001,(date-entity :month 8 :year 2001),false), Span(8,9,List(25),guerrillas,guerrilla,false), Span(5,6,List(26),talks,talk-01,false), Span(4,5,List(27),peace,peace,false), Span(3,4,List(28),initiated,initiate-01,false), Span(2,3,List(30, 29),government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(33, 32, 31),Nepali,(country :name (name :op "Nepal")),false)),Map(30 -> govern-01, 2 -> kingdom, 5 -> since, 33 -> "Nepal", 27 -> peace, 12 -> include-91, 8 -> have-org-role-91, 15 -> more, 21 -> find-01, 18 -> guerrilla, 24 -> 2001, 7 -> and, 1 -> 1996, 17 -> insurgency, 23 -> 8, 26 -> talk-01, 4 -> it, 11 -> policeman, 32 -> name, 14 -> 5000, 29 -> government-organization, 20 -> peaceful, 28 -> initiate-01, 6 -> civilian, 9 -> member, 0 -> date-entity, 22 -> date-entity, 16 -> kill-01, 19 -> solution, 10 -> guerrilla, 3 -> begin-01, 31 -> country, 25 -> guerrilla, 13 -> people),Map(n -> name, k2 -> kill-01, g3 -> guerrilla, h -> have-org-role-91, i4 -> initiate-01, 2 -> 2001, 5 -> 5000, s2 -> solution, t -> talk-01, b -> begin-01, k -> kingdom, m2 -> more, 8 -> 8, p2 -> people, s -> since, m -> member, d -> date-entity, 1 -> 1996, g2 -> guerrilla, i3 -> insurgency, p -> policeman, g -> guerrilla, a -> and, p4 -> peace, g5 -> govern-01, d2 -> date-entity, i2 -> include-91, i -> it, c -> civilian, f -> find-01, p3 -> peaceful, c2 -> country, g4 -> government-organization))),[Ljava.lang.String;@6dfcffb5,Annotation([Ljava.lang.String;@184fb68d,[Ljava.lang.String;@71d8cfe7,[Ljava.lang.String;@1e530163),Annotation([Ljava.lang.String;@14d8444b,[Ljava.lang.String;@71466383,[Ledu.cmu.lti.nlp.amr.Dependency;@46d63dbb),Annotation([Ljava.lang.String;@4088741b,[Ljava.lang.String;@16a49a5d,[Ljava.lang.String;@54bca971),Annotation([Ljava.lang.String;@23706db8,[Ljava.lang.String;@205bed61,[Ledu.cmu.lti.nlp.amr.Entity;@129fed45))
AMR:
(a / and, op, c / civilian)
(a / and, op, p / policeman)
(b / begin-01, ARG0, i / it)
(b / begin-01, ARG1, i3 / insurgency)
(b / begin-01, location, k / kingdom)
(b / begin-01, time, d / date-entity)
(c2 / country, name, n / name)
(d / date-entity, year, 1 / 1996)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 2 / 2001)
(f / find-01, ARG1, s2 / solution)
(g5 / govern-01, ARG0, g4 / government-organization)
(g5 / govern-01, ARG1, c2 / country)
(h / have-org-role-91, ARG1, g / guerrilla)
(h / have-org-role-91, ARG2, m / member)
(h / have-org-role-91, ARG6, i2 / include-91)
(i2 / include-91, ARG1, a / and)
(i2 / include-91, ARG2, p2 / people)
(i2 / include-91, quant, m2 / more)
(i3 / insurgency, mod, g3 / guerrilla)
(i4 / initiate-01, ARG0, g4 / government-organization)
(i4 / initiate-01, ARG1, t / talk-01)
(i4 / initiate-01, purpose, f / find-01)
(i4 / initiate-01, time, d2 / date-entity)
(k2 / kill-01, ARG0, i3 / insurgency)
(k2 / kill-01, ARG1, i2 / include-91)
(n / name, op, "Nepal")
(p2 / people, quant, 5 / 5000)
(s / since, op, b / begin-01)
(s2 / solution, mod, g3 / guerrilla)
(s2 / solution, mod, p3 / peaceful)
(t / talk-01, ARG0, g4 / government-organization)
(t / talk-01, ARG1, p4 / peace)
(t / talk-01, ARG2, g2 / guerrilla)

Decoded in 3,339,466 microseconds
Sentence: The 3 rounds of talks held were inconclusive as the guerrillas demanded the establishment of a republican State, an interim government and a new constitution, which the Nepali government rejected.

NER Entity: (thing :name (name :op "Nepali"))
NER Entity: (thing :name (name :op "Nepali"))
Spans:
Span 1-2:  3 => 3
Span 22-23:  and => and
Span 25-26:  constitution => constitution
Span 11-12:  demanded => demand-01
Span 13-14:  establishment => establish-01
Span 30-31:  government => (government-organization :ARG0-of govern-01)
Span 21-22:  government => (government-organization :ARG0-of govern-01)
Span 10-11:  guerrillas => guerrilla
Span 5-6:  held => hold-04
Span 7-8:  inconclusive => (conclude-01 :polarity -)
Span 20-21:  interim => interim
Span 29-30:  Nepali => (country :name (name :op "Nepal"))
Span 24-25:  new => new
Span 31-32:  rejected => reject-01
Span 16-17:  republican => republic
Span 2-3:  rounds => round
Span 4-5:  talks => talk-01

Langrangian relaxation converged after 121 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),rejected,reject-01,false), Span(30,31,List(2, 1),government,(government-organization :ARG0-of govern-01),false), Span(29,30,List(5, 4, 3),Nepali,(country :name (name :op "Nepal")),false), Span(25,26,List(6),constitution,constitution,false), Span(24,25,List(7),new,new,false), Span(22,23,List(8),and,and,false), Span(21,22,List(10, 9),government,(government-organization :ARG0-of govern-01),false), Span(20,21,List(11),interim,interim,false), Span(16,17,List(12),republican,republic,false), Span(13,14,List(13),establishment,establish-01,false), Span(11,12,List(14),demanded,demand-01,false), Span(10,11,List(15),guerrillas,guerrilla,false), Span(7,8,List(17, 16),inconclusive,(conclude-01 :polarity -),false), Span(5,6,List(18),held,hold-04,false), Span(4,5,List(19),talks,talk-01,false), Span(2,3,List(20),rounds,round,false), Span(1,2,List(21),3,3,false)),Map(2 -> govern-01, 5 -> "Nepal", 12 -> republic, 15 -> guerrilla, 8 -> and, 21 -> 3, 18 -> hold-04, 7 -> new, 17 -> -, 1 -> government-organization, 4 -> name, 11 -> interim, 14 -> demand-01, 20 -> round, 6 -> constitution, 0 -> reject-01, 9 -> government-organization, 16 -> conclude-01, 19 -> talk-01, 3 -> country, 10 -> govern-01, 13 -> establish-01),Map(e -> establish-01, n -> name, r3 -> round, h -> hold-04, g3 -> government-organization, t -> talk-01, d -> demand-01, g2 -> govern-01, g -> government-organization, r2 -> republic, c3 -> conclude-01, a -> and, g5 -> guerrilla, r -> reject-01, i -> interim, c -> country, 3 -> 3, c2 -> constitution, n2 -> new, g4 -> govern-01))),[Ljava.lang.String;@23592946,Annotation([Ljava.lang.String;@3e48d38,[Ljava.lang.String;@7c2b58c0,[Ljava.lang.String;@11b377c5),Annotation([Ljava.lang.String;@7bca6fac,[Ljava.lang.String;@5c60b0a0,[Ledu.cmu.lti.nlp.amr.Dependency;@7a2b1eb4),Annotation([Ljava.lang.String;@702c436b,[Ljava.lang.String;@5833f5cd,[Ljava.lang.String;@10fbbdb),Annotation([Ljava.lang.String;@23f3dbf0,[Ljava.lang.String;@31d6f3fe,[Ledu.cmu.lti.nlp.amr.Entity;@760cf594))
AMR:
(a / and, op, c2 / constitution)
(a / and, op, e / establish-01)
(c / country, name, n / name)
(c2 / constitution, mod, n2 / new)
(c3 / conclude-01, ARG0, t / talk-01)
(c3 / conclude-01, ARG1, i / interim)
(c3 / conclude-01, polarity, -)
(d / demand-01, ARG0, g5 / guerrilla)
(d / demand-01, ARG1, a / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c / country)
(h / hold-04, ARG0, r2 / republic)
(h / hold-04, ARG1, t / talk-01)
(n / name, op, "Nepal")
(r / reject-01, ARG0, g / government-organization)
(r / reject-01, ARG1, d / demand-01)
(r3 / round, quant, 3 / 3)
(t / talk-01, ARG1, c2 / constitution)
(t / talk-01, quant, r3 / round)

Decoded in 3,419,449 microseconds
Sentence: More than 3700 guerrillas and hundreds of security personnel have been killed since the Nepali government imposed the state of emergency on 26 November 2001 following a series of attacks by the guerrillas on government security forces after the guerrillas broke 4-month-long cease-fire talks with the government on 23 November 2001.

NER Entity: (thing :name (name :op "Nepali"))
mkDayMonthYear(26	November	2001,26,November,2001)
mkDayMonthYear(23	November	2001,23,November,2001)
NER Entity: (thing :name (name :op "Nepali"))
Spans:
Span 54-57:  23 November 2001 => (date-entity :day 23 :month 11 :year 2001)
Span 22-25:  26 November 2001 => (date-entity :year 2001 :month 11 :day 26)
Span 2-3:  3700 => (date-entity :year 3700)
Span 41-42:  4 => 4
Span 37-38:  after => after
Span 4-5:  and => and
Span 29-30:  attacks => attack-01
Span 40-41:  broke => break-08
Span 46-47:  cease => cease-01
Span 20-21:  emergency => emergency
Span 48-49:  fire => fire-01
Span 25-26:  following => follow-01
Span 36-37:  forces => force
Span 52-53:  government => (government-organization :ARG0-of govern-01)
Span 34-35:  government => (government-organization :ARG0-of govern-01)
Span 15-16:  government => (government-organization :ARG0-of govern-01)
Span 39-40:  guerrillas => guerrilla
Span 32-33:  guerrillas => guerrilla
Span 3-4:  guerrillas => guerrilla
Span 5-6:  hundreds => hundreds
Span 16-17:  imposed => impose-01
Span 11-12:  killed => kill-01
Span 45-46:  long => long
Span 43-44:  month => (temporal-quantity :unit month)
Span 0-1:  More => more-than
Span 14-15:  Nepali => (country :name (name :op "Nepal"))
Span 8-9:  personnel => (have-org-role-91 :ARG2 personnel)
Span 35-36:  security => security
Span 7-8:  security => security
Span 27-28:  series => series
Span 12-13:  since => since
Span 18-19:  state => state
Span 49-50:  talks => talk-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,57,List(3, 2, 1, 0),23 November 2001,(date-entity :day 23 :month 11 :year 2001),false), Span(52,53,List(5, 4),government,(government-organization :ARG0-of govern-01),false), Span(49,50,List(6),talks,talk-01,false), Span(48,49,List(7),fire,fire-01,false), Span(46,47,List(8),cease,cease-01,false), Span(45,46,List(9),long,long,false), Span(43,44,List(11, 10),month,(temporal-quantity :unit month),false), Span(41,42,List(12),4,4,false), Span(40,41,List(13),broke,break-08,false), Span(39,40,List(14),guerrillas,guerrilla,false), Span(37,38,List(15),after,after,false), Span(36,37,List(16),forces,force,false), Span(35,36,List(17),security,security,false), Span(34,35,List(19, 18),government,(government-organization :ARG0-of govern-01),false), Span(32,33,List(20),guerrillas,guerrilla,false), Span(29,30,List(21),attacks,attack-01,false), Span(27,28,List(22),series,series,false), Span(25,26,List(23),following,follow-01,false), Span(22,25,List(27, 26, 25, 24),26 November 2001,(date-entity :year 2001 :month 11 :day 26),false), Span(20,21,List(28),emergency,emergency,false), Span(18,19,List(29),state,state,false), Span(16,17,List(30),imposed,impose-01,false), Span(15,16,List(32, 31),government,(government-organization :ARG0-of govern-01),false), Span(14,15,List(35, 34, 33),Nepali,(country :name (name :op "Nepal")),false), Span(12,13,List(36),since,since,false), Span(11,12,List(37),killed,kill-01,false), Span(8,9,List(39, 38),personnel,(have-org-role-91 :ARG2 personnel),false), Span(7,8,List(40),security,security,false), Span(5,6,List(41),hundreds,hundreds,false), Span(4,5,List(42),and,and,false), Span(3,4,List(43),guerrillas,guerrilla,false), Span(2,3,List(45, 44),3700,(date-entity :year 3700),false), Span(0,1,List(46),More,more-than,false)),Map(45 -> 3700, 39 -> personnel, 30 -> impose-01, 2 -> 11, 5 -> govern-01, 33 -> country, 27 -> 26, 12 -> 4, 8 -> cease-01, 15 -> after, 42 -> and, 36 -> since, 21 -> attack-01, 18 -> government-organization, 24 -> date-entity, 41 -> hundreds, 35 -> "Nepal", 7 -> fire-01, 1 -> 23, 17 -> security, 44 -> date-entity, 23 -> follow-01, 38 -> have-org-role-91, 26 -> 11, 4 -> government-organization, 11 -> month, 32 -> govern-01, 14 -> guerrilla, 29 -> state, 20 -> guerrilla, 46 -> more-than, 34 -> name, 28 -> emergency, 6 -> talk-01, 40 -> security, 43 -> guerrilla, 9 -> long, 0 -> date-entity, 22 -> series, 16 -> force, 37 -> kill-01, 19 -> govern-01, 10 -> temporal-quantity, 3 -> 2001, 31 -> government-organization, 25 -> 2001, 13 -> break-08),Map(s5 -> security, e -> emergency, n -> name, h -> have-org-role-91, g3 -> guerrilla, 2 -> 23, h2 -> hundreds, s2 -> series, 12 -> 11, t -> talk-01, g6 -> guerrilla, k -> kill-01, b -> break-08, m2 -> more-than, d3 -> date-entity, g9 -> guerrilla, 24 -> 26, a3 -> and, s -> security, s4 -> since, m -> month, d -> date-entity, g8 -> govern-01, g2 -> govern-01, 1 -> 11, 23 -> 2001, p -> personnel, g -> government-organization, a -> after, 4 -> 4, g5 -> govern-01, d2 -> date-entity, f3 -> follow-01, t2 -> temporal-quantity, i -> impose-01, a2 -> attack-01, g7 -> government-organization, c -> cease-01, s3 -> state, f2 -> force, l -> long, f -> fire-01, 22 -> 2001, 3 -> 3700, c2 -> country, g4 -> government-organization))),[Ljava.lang.String;@aa149ed,Annotation([Ljava.lang.String;@37303f12,[Ljava.lang.String;@31ff6309,[Ljava.lang.String;@204e90f7),Annotation([Ljava.lang.String;@20a05b32,[Ljava.lang.String;@165e389b,[Ledu.cmu.lti.nlp.amr.Dependency;@5c73f672),Annotation([Ljava.lang.String;@8ee0c23,[Ljava.lang.String;@2ab5afc7,[Ljava.lang.String;@4dc8c0ea),Annotation([Ljava.lang.String;@e4b6f47,[Ljava.lang.String;@763cf5b9,[Ledu.cmu.lti.nlp.amr.Entity;@71f0b72e))
AMR:
(a / after, op, b / break-08)
(a2 / attack-01, ARG1, f2 / force)
(a2 / attack-01, quant, s2 / series)
(a3 / and, op, h2 / hundreds)
(b / break-08, ARG0, g9 / guerrilla)
(b / break-08, ARG1, g3 / guerrilla)
(b / break-08, time, d / date-entity)
(c / cease-01, ARG1, f / fire-01)
(c2 / country, name, n / name)
(d / date-entity, day, 2 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 22 / 2001)
(d2 / date-entity, day, 24 / 26)
(d2 / date-entity, month, 12 / 11)
(d2 / date-entity, year, 23 / 2001)
(d3 / date-entity, year, 3 / 3700)
(f2 / force, mod, s / security)
(f2 / force, mod, s5 / security)
(f3 / follow-01, ARG1, i / impose-01)
(f3 / follow-01, ARG2, a2 / attack-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(g5 / govern-01, ARG0, g4 / government-organization)
(g5 / govern-01, ARG1, c2 / country)
(g6 / guerrilla, poss, g7 / government-organization)
(g8 / govern-01, ARG0, g7 / government-organization)
(g8 / govern-01, ARG1, c2 / country)
(g9 / guerrilla, quant, m2 / more-than)
(h / have-org-role-91, ARG1, g4 / government-organization)
(h / have-org-role-91, ARG2, p / personnel)
(i / impose-01, ARG0, g7 / government-organization)
(i / impose-01, ARG1, s3 / state)
(i / impose-01, time, d2 / date-entity)
(k / kill-01, ARG1, a3 / and)
(k / kill-01, time, s4 / since)
(m2 / more-than, op, d3 / date-entity)
(n / name, op, "Nepal")
(s3 / state, mod, e / emergency)
(s4 / since, op, i / impose-01)
(t / talk-01, ARG0, g9 / guerrilla)
(t / talk-01, ARG1, c / cease-01)
(t / talk-01, ARG2, g7 / government-organization)
(t / talk-01, duration, t2 / temporal-quantity)
(t / talk-01, mod, l / long)
(t2 / temporal-quantity, quant, 4 / 4)
(t2 / temporal-quantity, unit, m / month)

Decoded in 4,157,973 microseconds
Sentence: 2002-11-23

mkDayMonthYear(2002-11-23,23,11,2002)
mkDayMonthYear(2002-11-23,23,11,2002)
Spans:
Span 0-1:  2002-11-23 => (date-entity :year 2002 :month 11 :day 23)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-11-23,(date-entity :year 2002 :month 11 :day 23),false)),Map(2 -> 11, 1 -> 2002, 0 -> date-entity, 3 -> 23),Map(2 -> 2002, d -> date-entity, 1 -> 11, 22 -> 23))),[Ljava.lang.String;@7a34f66a,Annotation([Ljava.lang.String;@2f508f3c,[Ljava.lang.String;@3ed03652,[Ljava.lang.String;@4aedaf61),Annotation([Ljava.lang.String;@173797f0,[Ljava.lang.String;@3c35c345,[Ledu.cmu.lti.nlp.amr.Dependency;@3681037),Annotation([Ljava.lang.String;@2459319c,[Ljava.lang.String;@ffaaaf0,[Ljava.lang.String;@1dc76fa1),Annotation([Ljava.lang.String;@5eed2d86,[Ljava.lang.String;@33d53216,[Ledu.cmu.lti.nlp.amr.Entity;@69a2b3b6))
AMR:
(d / date-entity, day, 22 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2002)

Decoded in 6,994 microseconds
Sentence: China (CN); Russian Federation (RU); Kazakhstan (KZ); Kyrgyzstan (KG); Tajikistan (TJ); Uzbekistan (UZ)

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Russian" :op "Federation"))
NER Entity: (country :name (name :op "Kazakhstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Tajikistan"))
NER Entity: (country :name (name :op "Uzbekistan"))
NER Entity: (country :name (name :op "UZ"))
NER Entity: (country :name (name :op "Uzbekistan"))
NER Entity: (country :name (name :op "Tajikistan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kazakhstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 25-26:  ; => and
Span 20-21:  ; => and
Span 15-16:  ; => and
Span 10-11:  ; => and
Span 4-5:  ; => and
Span 0-1:  China => (country :name (name :op "China"))
Span 11-12:  Kazakhstan => (country :name (name :op "Kazakhstan"))
Span 16-17:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 5-7:  Russian Federation => (country :name (name :op "Russian" :op "Federation"))
Span 21-22:  Tajikistan => (country :name (name :op "Tajikistan"))
Span 26-27:  Uzbekistan => (country :name (name :op "Uzbekistan"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(2, 1, 0),Uzbekistan,(country :name (name :op "Uzbekistan")),false), Span(25,26,List(3),;,and,false), Span(21,22,List(6, 5, 4),Tajikistan,(country :name (name :op "Tajikistan")),false), Span(20,21,List(7),;,and,false), Span(16,17,List(10, 9, 8),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(15,16,List(11),;,and,false), Span(11,12,List(14, 13, 12),Kazakhstan,(country :name (name :op "Kazakhstan")),false), Span(10,11,List(15),;,and,false), Span(5,7,List(19, 18, 17, 16),Russian Federation,(country :name (name :op "Russian" :op "Federation")),false), Span(4,5,List(20),;,and,false), Span(0,1,List(23, 22, 21),China,(country :name (name :op "China")),false)),Map(2 -> "Uzbekistan", 5 -> name, 12 -> country, 15 -> and, 8 -> country, 21 -> country, 18 -> "Russian", 7 -> and, 17 -> name, 1 -> name, 23 -> "China", 4 -> country, 11 -> and, 14 -> "Kazakhstan", 20 -> and, 6 -> "Tajikistan", 22 -> name, 0 -> country, 9 -> name, 16 -> country, 19 -> "Federation", 3 -> and, 10 -> "Kyrgyzstan", 13 -> name),Map(n -> name, a3 -> and, c4 -> country, n4 -> name, a -> and, c3 -> country, n3 -> name, n6 -> name, a5 -> and, c6 -> country, a2 -> and, c -> country, c2 -> country, n2 -> name, a4 -> and, n5 -> name, c5 -> country))),[Ljava.lang.String;@4f3e7344,Annotation([Ljava.lang.String;@7808f638,[Ljava.lang.String;@62d73ead,[Ljava.lang.String;@1e141e42),Annotation([Ljava.lang.String;@228cea97,[Ljava.lang.String;@1d0a61c8,[Ledu.cmu.lti.nlp.amr.Dependency;@46731692),Annotation([Ljava.lang.String;@782bf610,[Ljava.lang.String;@3db663d0,[Ljava.lang.String;@73fc518f),Annotation([Ljava.lang.String;@2de50ee4,[Ljava.lang.String;@ad9e63e,[Ledu.cmu.lti.nlp.amr.Entity;@47fbc56))
AMR:
(a / and, op, c / country)
(a2 / and, op, c2 / country)
(a3 / and, op, c3 / country)
(a4 / and, op, c4 / country)
(a4 / and, op, c5 / country)
(a5 / and, op, a / and)
(a5 / and, op, a2 / and)
(a5 / and, op, a3 / and)
(a5 / and, op, a4 / and)
(a5 / and, op, c6 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(n / name, op, "Uzbekistan")
(n2 / name, op, "Tajikistan")
(n3 / name, op, "Kyrgyzstan")
(n4 / name, op, "Kazakhstan")
(n5 / name, op, "Federation")
(n5 / name, op, "Russian")
(n6 / name, op, "China")

Decoded in 174,342 microseconds
Sentence: International; terrorism; politics

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 0-1:  International => international
Span 4-5:  politics => politics
Span 2-3:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),politics,politics,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),terrorism,terrorism,false), Span(1,2,List(3),;,and,false), Span(0,1,List(4),International,international,false)),Map(2 -> terrorism, 1 -> and, 4 -> international, 0 -> politics, 3 -> and),Map(t -> terrorism, p -> politics, a -> and, i -> international, a2 -> and))),[Ljava.lang.String;@151ef57f,Annotation([Ljava.lang.String;@10895b16,[Ljava.lang.String;@5524b72f,[Ljava.lang.String;@2cc03cd1),Annotation([Ljava.lang.String;@4e17913b,[Ljava.lang.String;@149c3204,[Ledu.cmu.lti.nlp.amr.Dependency;@64f16277),Annotation([Ljava.lang.String;@497aec8c,[Ljava.lang.String;@3b9632d1,[Ljava.lang.String;@4e6f2bb5),Annotation([Ljava.lang.String;@21e20ad5,[Ljava.lang.String;@3f628ce9,[Ledu.cmu.lti.nlp.amr.Entity;@35e8316e))
AMR:
(a / and, op, p / politics)
(a / and, op, t / terrorism)
(a2 / and, op, a / and)
(a2 / and, op, i / international)

Decoded in 12,661 microseconds
Sentence: Chinese Foreign Minister Tang Jiaxuan reports that the member countries of the Shanghai Cooperation Organization will proceed with the construction of the SCO and begin anti-terrorism discussions at a meeting in Moscow on 23 November 2002.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Tang" :op "Jiaxuan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Moscow"))
mkDayMonthYear(23	November	2002,23,November,2002)
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 35-38:  23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Span 23-24:  and => and
Span 24-25:  begin => begin-01
Span 0-1:  Chinese => (country :name (name :op "China"))
Span 19-20:  construction => construct-01
Span 9-10:  countries => country
Span 28-29:  discussions => discuss-01
Span 1-2:  Foreign => foreign
Span 31-32:  meeting => meet-03
Span 8-9:  member => (have-org-role-91 :ARG2 member)
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 33-34:  Moscow => (city :name (name :op "Moscow"))
Span 16-17:  proceed => proceed-01
Span 5-6:  reports => report-01
Span 22-23:  SCO => (organization :name (name :op "SCO"))
Span 12-15:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 3-5:  Tang Jiaxuan => (person :name (name :op "Jiaxuan" :op "Tang"))
Span 27-28:  terrorism => terrorism

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,38,List(3, 2, 1, 0),23 November 2002,(date-entity :year 2002 :month 11 :day 23),false), Span(33,34,List(6, 5, 4),Moscow,(city :name (name :op "Moscow")),false), Span(31,32,List(7),meeting,meet-03,false), Span(28,29,List(8),discussions,discuss-01,false), Span(27,28,List(9),terrorism,terrorism,false), Span(24,25,List(10),begin,begin-01,false), Span(23,24,List(11),and,and,false), Span(22,23,List(14, 13, 12),SCO,(organization :name (name :op "SCO")),false), Span(19,20,List(15),construction,construct-01,false), Span(16,17,List(16),proceed,proceed-01,false), Span(12,15,List(21, 20, 19, 18, 17),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(9,10,List(22),countries,country,false), Span(8,9,List(24, 23),member,(have-org-role-91 :ARG2 member),false), Span(5,6,List(25),reports,report-01,false), Span(3,5,List(29, 28, 27, 26),Tang Jiaxuan,(person :name (name :op "Jiaxuan" :op "Tang")),false), Span(2,3,List(31, 30),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(32),Foreign,foreign,false), Span(0,1,List(35, 34, 33),Chinese,(country :name (name :op "China")),false)),Map(30 -> have-org-role-91, 2 -> 11, 5 -> name, 33 -> country, 27 -> name, 12 -> organization, 8 -> discuss-01, 15 -> construct-01, 21 -> "Organization", 18 -> name, 24 -> member, 35 -> "China", 7 -> meet-03, 1 -> 2002, 17 -> organization, 23 -> have-org-role-91, 26 -> person, 4 -> city, 11 -> and, 32 -> foreign, 14 -> "SCO", 29 -> "Tang", 20 -> "Cooperation", 34 -> name, 28 -> "Jiaxuan", 6 -> "Moscow", 9 -> terrorism, 0 -> date-entity, 22 -> country, 16 -> proceed-01, 19 -> "Shanghai", 10 -> begin-01, 3 -> 23, 31 -> minister, 25 -> report-01, 13 -> name),Map(m3 -> minister, n -> name, h -> have-org-role-91, 2 -> 2002, h2 -> have-org-role-91, t -> terrorism, b -> begin-01, m2 -> member, p2 -> person, c4 -> country, n4 -> name, m -> meet-03, d -> date-entity, 1 -> 11, p -> proceed-01, a -> and, n3 -> name, c3 -> country, d2 -> discuss-01, o2 -> organization, r -> report-01, c -> city, f -> foreign, 22 -> 23, o -> organization, n2 -> name, c2 -> construct-01, n5 -> name))),[Ljava.lang.String;@26d96e5,Annotation([Ljava.lang.String;@336880df,[Ljava.lang.String;@1846579f,[Ljava.lang.String;@6cd166b8),Annotation([Ljava.lang.String;@2650f79,[Ljava.lang.String;@75fc1992,[Ledu.cmu.lti.nlp.amr.Dependency;@5fac521d),Annotation([Ljava.lang.String;@38af1bf6,[Ljava.lang.String;@129bd55d,[Ljava.lang.String;@7be7e15),Annotation([Ljava.lang.String;@3abfe845,[Ljava.lang.String;@7a0f244f,[Ledu.cmu.lti.nlp.amr.Entity;@3672276e))
AMR:
(a / and, op, b / begin-01)
(a / and, op, p / proceed-01)
(b / begin-01, ARG0, c3 / country)
(b / begin-01, ARG1, d2 / discuss-01)
(b / begin-01, time, m / meet-03)
(c / city, name, n / name)
(c2 / construct-01, ARG1, o / organization)
(c4 / country, name, n5 / name)
(d / date-entity, day, 22 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2002)
(d2 / discuss-01, ARG0, c3 / country)
(d2 / discuss-01, ARG1, t / terrorism)
(h / have-org-role-91, ARG0, c3 / country)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m2 / member)
(h2 / have-org-role-91, ARG0, p2 / person)
(h2 / have-org-role-91, ARG1, c4 / country)
(h2 / have-org-role-91, ARG2, m3 / minister)
(m / meet-03, location, c / city)
(m / meet-03, time, d / date-entity)
(m3 / minister, mod, f / foreign)
(n / name, op, "Moscow")
(n2 / name, op, "SCO")
(n3 / name, op, "Cooperation")
(n3 / name, op, "Organization")
(n3 / name, op, "Shanghai")
(n4 / name, op, "Jiaxuan")
(n4 / name, op, "Tang")
(n5 / name, op, "China")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(p / proceed-01, ARG0, c3 / country)
(p / proceed-01, ARG1, c2 / construct-01)
(p2 / person, name, n4 / name)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, a / and)

Decoded in 3,168,663 microseconds
Sentence: Chinese Foreign Minister Tang Jiaxuan stated on 23 November 2002 that the member States of the Shanghai Cooperation Organization (SCO) have progressed in the construction of the Organization and the cooperation among member nations.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Tang" :op "Jiaxuan"))
mkDayMonthYear(23	November	2002,23,November,2002)
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "Organization"))
NER Entity: (organization :name (name :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 7-10:  23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Span 30-31:  and => and
Span 0-1:  Chinese => (country :name (name :op "China"))
Span 26-27:  construction => construct-01
Span 32-33:  cooperation => cooperate-01
Span 1-2:  Foreign => foreign
Span 34-35:  member => (have-org-role-91 :ARG2 member)
Span 12-13:  member => (have-org-role-91 :ARG2 member)
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 35-36:  nations => nation
Span 29-30:  Organization => organization
Span 23-24:  progressed => progress-01
Span 20-21:  SCO => (organization :name (name :op "SCO"))
Span 16-19:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 5-6:  stated => state-01
Span 3-5:  Tang Jiaxuan => (person :name (name :op "Jiaxuan" :op "Tang"))

Langrangian relaxation converged after 56 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),nations,nation,false), Span(34,35,List(2, 1),member,(have-org-role-91 :ARG2 member),false), Span(32,33,List(3),cooperation,cooperate-01,false), Span(30,31,List(4),and,and,false), Span(29,30,List(5),Organization,organization,false), Span(26,27,List(6),construction,construct-01,false), Span(23,24,List(7),progressed,progress-01,false), Span(20,21,List(10, 9, 8),SCO,(organization :name (name :op "SCO")),false), Span(16,19,List(15, 14, 13, 12, 11),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(12,13,List(17, 16),member,(have-org-role-91 :ARG2 member),false), Span(7,10,List(21, 20, 19, 18),23 November 2002,(date-entity :year 2002 :month 11 :day 23),false), Span(5,6,List(22),stated,state-01,false), Span(3,5,List(26, 25, 24, 23),Tang Jiaxuan,(person :name (name :op "Jiaxuan" :op "Tang")),false), Span(2,3,List(28, 27),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(29),Foreign,foreign,false), Span(0,1,List(32, 31, 30),Chinese,(country :name (name :op "China")),false)),Map(30 -> country, 2 -> member, 5 -> organization, 27 -> have-org-role-91, 12 -> name, 8 -> organization, 15 -> "Organization", 21 -> 23, 18 -> date-entity, 24 -> name, 7 -> progress-01, 1 -> have-org-role-91, 17 -> member, 23 -> person, 26 -> "Tang", 4 -> and, 11 -> organization, 32 -> "China", 14 -> "Cooperation", 29 -> foreign, 20 -> 11, 28 -> minister, 6 -> construct-01, 9 -> name, 0 -> nation, 22 -> state-01, 16 -> have-org-role-91, 19 -> 2002, 10 -> "SCO", 3 -> cooperate-01, 31 -> name, 25 -> "Jiaxuan", 13 -> "Shanghai"),Map(m3 -> minister, n -> nation, h -> have-org-role-91, 2 -> 2002, h2 -> have-org-role-91, m2 -> member, o3 -> organization, p2 -> person, n4 -> name, s -> state-01, m -> member, d -> date-entity, 1 -> 11, p -> progress-01, n3 -> name, a -> and, c3 -> country, o2 -> organization, c -> cooperate-01, h3 -> have-org-role-91, 22 -> 23, f -> foreign, o -> organization, n2 -> name, c2 -> construct-01, n5 -> name))),[Ljava.lang.String;@4248b963,Annotation([Ljava.lang.String;@7f08caf,[Ljava.lang.String;@4defd42,[Ljava.lang.String;@2330e3e0),Annotation([Ljava.lang.String;@24b4d544,[Ljava.lang.String;@27a2a089,[Ledu.cmu.lti.nlp.amr.Dependency;@54657dd2),Annotation([Ljava.lang.String;@706eab5d,[Ljava.lang.String;@72725ee1,[Ljava.lang.String;@40e60ece),Annotation([Ljava.lang.String;@3f9270ed,[Ljava.lang.String;@3a230001,[Ledu.cmu.lti.nlp.amr.Entity;@5ac6c4f2))
AMR:
(a / and, op, c / cooperate-01)
(a / and, op, c2 / construct-01)
(c / cooperate-01, ARG0, n / nation)
(c / cooperate-01, ARG1, o3 / organization)
(c2 / construct-01, ARG1, o / organization)
(c3 / country, name, n5 / name)
(d / date-entity, day, 22 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2002)
(h / have-org-role-91, ARG0, n / nation)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m / member)
(h2 / have-org-role-91, ARG1, o3 / organization)
(h2 / have-org-role-91, ARG2, m2 / member)
(h3 / have-org-role-91, ARG0, p2 / person)
(h3 / have-org-role-91, ARG1, c3 / country)
(h3 / have-org-role-91, ARG2, m3 / minister)
(m3 / minister, mod, f / foreign)
(n2 / name, op, "SCO")
(n3 / name, op, "Cooperation")
(n3 / name, op, "Organization")
(n3 / name, op, "Shanghai")
(n4 / name, op, "Jiaxuan")
(n4 / name, op, "Tang")
(n5 / name, op, "China")
(o2 / organization, name, n2 / name)
(o3 / organization, name, n3 / name)
(p / progress-01, topic, a / and)
(p2 / person, name, n4 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, p / progress-01)
(s / state-01, time, d / date-entity)

Decoded in 2,885,639 microseconds
Sentence: Tang and 5 foreign ministers from Russia, Kazakhstan, Kyrgyzstan, Tajikistan and Uzbekistan will meet in Moscow on 23 November 2002 for discussions of the SCO's construction and a series of international and regional issues.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Kazakhstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Tajikistan"))
NER Entity: (country :name (name :op "Uzbekistan"))
NER Entity: (country :name (name :op "Moscow"))
mkDayMonthYear(23	November	2002,23,November,2002)
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Uzbekistan"))
NER Entity: (country :name (name :op "Tajikistan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kazakhstan"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 20-23:  23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Span 2-3:  5 => 5
Span 35-36:  and => and
Span 30-31:  and => and
Span 13-14:  and => and
Span 1-2:  and => and
Span 29-30:  construction => construct-01
Span 24-25:  discussions => discuss-01
Span 3-4:  foreign => foreign
Span 34-35:  international => international
Span 37-38:  issues => issue
Span 8-9:  Kazakhstan => (country :name (name :op "Kazakhstan"))
Span 10-11:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 16-17:  meet => meet-03
Span 4-5:  ministers => (have-org-role-91 :ARG2 minister)
Span 18-19:  Moscow => (city :name (name :op "Moscow"))
Span 36-37:  regional => region
Span 6-7:  Russia => (country :name (name :op "Russia"))
Span 27-28:  SCO => (organization :name (name :op "SCO"))
Span 32-33:  series => series
Span 12-13:  Tajikistan => (country :name (name :op "Tajikistan"))
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 14-15:  Uzbekistan => (country :name (name :op "Uzbekistan"))

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),issues,issue,false), Span(36,37,List(1),regional,region,false), Span(35,36,List(2),and,and,false), Span(34,35,List(3),international,international,false), Span(32,33,List(4),series,series,false), Span(30,31,List(5),and,and,false), Span(29,30,List(6),construction,construct-01,false), Span(27,28,List(9, 8, 7),SCO,(organization :name (name :op "SCO")),false), Span(24,25,List(10),discussions,discuss-01,false), Span(20,23,List(14, 13, 12, 11),23 November 2002,(date-entity :year 2002 :month 11 :day 23),false), Span(18,19,List(17, 16, 15),Moscow,(city :name (name :op "Moscow")),false), Span(16,17,List(18),meet,meet-03,false), Span(14,15,List(21, 20, 19),Uzbekistan,(country :name (name :op "Uzbekistan")),false), Span(13,14,List(22),and,and,false), Span(12,13,List(25, 24, 23),Tajikistan,(country :name (name :op "Tajikistan")),false), Span(10,11,List(28, 27, 26),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(8,9,List(31, 30, 29),Kazakhstan,(country :name (name :op "Kazakhstan")),false), Span(6,7,List(34, 33, 32),Russia,(country :name (name :op "Russia")),false), Span(4,5,List(36, 35),ministers,(have-org-role-91 :ARG2 minister),false), Span(3,4,List(37),foreign,foreign,false), Span(2,3,List(38),5,5,false), Span(1,2,List(39),and,and,false), Span(0,1,List(42, 41, 40),Tang,(person :name (name :op "Tang")),false)),Map(39 -> and, 30 -> name, 2 -> and, 5 -> and, 33 -> name, 27 -> name, 12 -> 2002, 8 -> name, 15 -> city, 42 -> "Tang", 36 -> minister, 21 -> "Uzbekistan", 18 -> meet-03, 24 -> name, 41 -> name, 35 -> have-org-role-91, 7 -> organization, 1 -> region, 17 -> "Moscow", 23 -> country, 38 -> 5, 26 -> country, 4 -> series, 11 -> date-entity, 32 -> country, 14 -> 23, 29 -> country, 20 -> name, 34 -> "Russia", 28 -> "Kyrgyzstan", 6 -> construct-01, 40 -> person, 9 -> "SCO", 0 -> issue, 22 -> and, 16 -> name, 37 -> foreign, 19 -> country, 10 -> discuss-01, 3 -> international, 31 -> "Kazakhstan", 25 -> "Tajikistan", 13 -> 11),Map(n -> name, h -> have-org-role-91, 2 -> 2002, 5 -> 5, m2 -> minister, n7 -> name, c7 -> country, a3 -> and, c4 -> country, n4 -> name, s -> series, d -> discuss-01, m -> meet-03, 1 -> 11, p -> person, a -> and, c3 -> country, n3 -> name, n6 -> name, d2 -> date-entity, c6 -> country, i2 -> international, a2 -> and, r -> region, i -> issue, c -> construct-01, n8 -> name, f -> foreign, 22 -> 23, o -> organization, c2 -> city, n2 -> name, a4 -> and, c5 -> country, n5 -> name))),[Ljava.lang.String;@2aa6311a,Annotation([Ljava.lang.String;@61f39bb,[Ljava.lang.String;@249e0271,[Ljava.lang.String;@4893b344),Annotation([Ljava.lang.String;@53a665ad,[Ljava.lang.String;@2c0b4c83,[Ledu.cmu.lti.nlp.amr.Dependency;@78525ef9),Annotation([Ljava.lang.String;@2d0ecb24,[Ljava.lang.String;@4d654825,[Ljava.lang.String;@3bfc6a5e),Annotation([Ljava.lang.String;@51b35e4e,[Ljava.lang.String;@abff8b7,[Ledu.cmu.lti.nlp.amr.Entity;@6d7cada5))
AMR:
(a / and, op, i / issue)
(a / and, op, i2 / international)
(a2 / and, op, d / discuss-01)
(a3 / and, op, c3 / country)
(a3 / and, op, c4 / country)
(a3 / and, op, c6 / country)
(a3 / and, op, c7 / country)
(a3 / and, quant, 5 / 5)
(a4 / and, op, c / construct-01)
(a4 / and, op, i / issue)
(c / construct-01, ARG0, c5 / country)
(c / construct-01, ARG1, o / organization)
(c2 / city, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / country, name, n6 / name)
(c7 / country, name, n7 / name)
(d / discuss-01, ARG1, a4 / and)
(d2 / date-entity, day, 22 / 23)
(d2 / date-entity, month, 1 / 11)
(d2 / date-entity, year, 2 / 2002)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, m2 / minister)
(i / issue, mod, r / region)
(i / issue, quant, s / series)
(m / meet-03, ARG0, p / person)
(m / meet-03, ARG1, a3 / and)
(m / meet-03, location, c2 / city)
(m / meet-03, purpose, d / discuss-01)
(m / meet-03, time, d2 / date-entity)
(m2 / minister, mod, f / foreign)
(n / name, op, "SCO")
(n2 / name, op, "Moscow")
(n3 / name, op, "Uzbekistan")
(n4 / name, op, "Tajikistan")
(n5 / name, op, "Kyrgyzstan")
(n6 / name, op, "Kazakhstan")
(n7 / name, op, "Russia")
(n8 / name, op, "Tang")
(o / organization, name, n / name)
(p / person, name, n8 / name)

Decoded in 3,365,156 microseconds
Sentence: Tang stated that mechanism construction is the current focus for SCO and that preparation work for creating a secretariat had entered a key stage under the joint efforts of coordinators and experts from the 6 countries.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 34-35:  6 => 6
Span 30-31:  and => and
Span 11-12:  and => and
Span 4-5:  construction => construct-01
Span 29-30:  coordinators => (person :ARG0-of coordinate-01)
Span 35-36:  countries => country
Span 16-17:  creating => create-01
Span 7-8:  current => current
Span 27-28:  efforts => effort
Span 20-21:  entered => enter-01
Span 31-32:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 8-9:  focus => focus-01
Span 26-27:  joint => joint
Span 22-23:  key => key
Span 3-4:  mechanism => mechanism
Span 13-14:  preparation => prepare-02
Span 10-11:  SCO => (organization :name (name :op "SCO"))
Span 18-19:  secretariat => secretariat
Span 23-24:  stage => stage
Span 1-2:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 14-15:  work => work-01

Langrangian relaxation converged after 83 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),countries,country,false), Span(34,35,List(1),6,6,false), Span(31,32,List(4, 3, 2),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(30,31,List(5),and,and,false), Span(29,30,List(7, 6),coordinators,(person :ARG0-of coordinate-01),false), Span(27,28,List(8),efforts,effort,false), Span(26,27,List(9),joint,joint,false), Span(23,24,List(10),stage,stage,false), Span(22,23,List(11),key,key,false), Span(20,21,List(12),entered,enter-01,false), Span(18,19,List(13),secretariat,secretariat,false), Span(16,17,List(14),creating,create-01,false), Span(14,15,List(15),work,work-01,false), Span(13,14,List(16),preparation,prepare-02,false), Span(11,12,List(17),and,and,false), Span(10,11,List(20, 19, 18),SCO,(organization :name (name :op "SCO")),false), Span(8,9,List(21),focus,focus-01,false), Span(7,8,List(22),current,current,false), Span(4,5,List(23),construction,construct-01,false), Span(3,4,List(24),mechanism,mechanism,false), Span(1,2,List(25),stated,state-01,false), Span(0,1,List(28, 27, 26),Tang,(person :name (name :op "Tang")),false)),Map(2 -> have-org-role-91, 5 -> and, 27 -> name, 12 -> enter-01, 8 -> effort, 15 -> work-01, 21 -> focus-01, 18 -> organization, 24 -> mechanism, 7 -> coordinate-01, 1 -> 6, 17 -> and, 23 -> construct-01, 26 -> person, 4 -> expert-41, 11 -> key, 14 -> create-01, 20 -> "SCO", 28 -> "Tang", 6 -> person, 9 -> joint, 0 -> country, 22 -> current, 16 -> prepare-02, 19 -> name, 10 -> stage, 3 -> person, 25 -> state-01, 13 -> secretariat),Map(e -> expert-41, w -> work-01, n -> name, h -> have-org-role-91, s2 -> secretariat, k -> key, e2 -> effort, p2 -> person, j -> joint, c4 -> current, s -> stage, m -> mechanism, p -> person, a -> and, c3 -> create-01, p4 -> person, a2 -> and, 6 -> 6, c -> country, s3 -> state-01, f -> focus-01, o -> organization, e3 -> enter-01, p3 -> prepare-02, n2 -> name, c2 -> coordinate-01, c5 -> construct-01))),[Ljava.lang.String;@350a94ce,Annotation([Ljava.lang.String;@7e00ed0f,[Ljava.lang.String;@b0fc838,[Ljava.lang.String;@3964d79),Annotation([Ljava.lang.String;@62db0521,[Ljava.lang.String;@1b4ae4e0,[Ledu.cmu.lti.nlp.amr.Dependency;@6ef1a1b9),Annotation([Ljava.lang.String;@5fbdc49b,[Ljava.lang.String;@65753040,[Ljava.lang.String;@2954b5ea),Annotation([Ljava.lang.String;@4acb2510,[Ljava.lang.String;@7be3a9ce,[Ledu.cmu.lti.nlp.amr.Entity;@37d871c2))
AMR:
(a / and, op, p2 / person)
(a / and, source, c / country)
(a2 / and, op, e3 / enter-01)
(a2 / and, op, f / focus-01)
(c / country, quant, 6 / 6)
(c2 / coordinate-01, ARG0, p2 / person)
(c3 / create-01, ARG1, s2 / secretariat)
(c5 / construct-01, ARG1, m / mechanism)
(e / expert-41, ARG1, p / person)
(e2 / effort, mod, j / joint)
(e2 / effort, poss, a / and)
(e3 / enter-01, ARG0, w / work-01)
(e3 / enter-01, ARG1, s / stage)
(e3 / enter-01, prep-under, e2 / effort)
(f / focus-01, ARG0, o / organization)
(f / focus-01, ARG1, c5 / construct-01)
(f / focus-01, time, c4 / current)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p / person)
(n / name, op, "SCO")
(n2 / name, op, "Tang")
(o / organization, name, n / name)
(p3 / prepare-02, ARG2, c3 / create-01)
(p4 / person, name, n2 / name)
(s / stage, mod, k / key)
(s3 / state-01, ARG0, p4 / person)
(s3 / state-01, ARG1, a2 / and)
(w / work-01, ARG1, p3 / prepare-02)

Decoded in 4,055,492 microseconds
Sentence: Tang also stated the Chinese government seeks to complete the drafting of relevant documents before next year's SCO summit and to attempt to officially open the secretariat after the summit.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 28-29:  after => after
Span 1-2:  also => also
Span 20-21:  and => and
Span 22-23:  attempt => attempt-01
Span 14-15:  before => before
Span 4-5:  Chinese => (country :name (name :op "China"))
Span 8-9:  complete => complete-01
Span 13-14:  documents => document
Span 10-11:  drafting => draft-01
Span 5-6:  government => (government-organization :ARG0-of govern-01)
Span 15-16:  next => next
Span 24-25:  officially => official
Span 25-26:  open => open-01
Span 12-13:  relevant => relevance
Span 18-19:  SCO => (organization :name (name :op "SCO"))
Span 27-28:  secretariat => secretariat
Span 6-7:  seeks => seek-01
Span 2-3:  stated => state-01
Span 30-31:  summit => summit
Span 19-20:  summit => summit
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 16-17:  year => (temporal-quantity :unit year)

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),summit,summit,false), Span(28,29,List(1),after,after,false), Span(27,28,List(2),secretariat,secretariat,false), Span(25,26,List(3),open,open-01,false), Span(24,25,List(4),officially,official,false), Span(22,23,List(5),attempt,attempt-01,false), Span(20,21,List(6),and,and,false), Span(19,20,List(7),summit,summit,false), Span(18,19,List(10, 9, 8),SCO,(organization :name (name :op "SCO")),false), Span(16,17,List(12, 11),year,(temporal-quantity :unit year),false), Span(15,16,List(13),next,next,false), Span(14,15,List(14),before,before,false), Span(13,14,List(15),documents,document,false), Span(12,13,List(16),relevant,relevance,false), Span(10,11,List(17),drafting,draft-01,false), Span(8,9,List(18),complete,complete-01,false), Span(6,7,List(19),seeks,seek-01,false), Span(5,6,List(21, 20),government,(government-organization :ARG0-of govern-01),false), Span(4,5,List(24, 23, 22),Chinese,(country :name (name :op "China")),false), Span(2,3,List(25),stated,state-01,false), Span(1,2,List(26),also,also,false), Span(0,1,List(29, 28, 27),Tang,(person :name (name :op "Tang")),false)),Map(2 -> secretariat, 5 -> attempt-01, 27 -> person, 12 -> year, 8 -> organization, 15 -> document, 21 -> govern-01, 18 -> complete-01, 24 -> "China", 7 -> summit, 1 -> after, 17 -> draft-01, 23 -> name, 26 -> also, 4 -> official, 11 -> temporal-quantity, 14 -> before, 29 -> "Tang", 20 -> government-organization, 28 -> name, 6 -> and, 9 -> name, 0 -> summit, 22 -> country, 16 -> relevance, 19 -> seek-01, 10 -> "SCO", 3 -> open-01, 25 -> state-01, 13 -> next),Map(s5 -> state-01, n -> name, s2 -> secretariat, t -> temporal-quantity, b -> before, o3 -> organization, n4 -> name, a3 -> and, s -> summit, s4 -> seek-01, d -> document, g2 -> govern-01, y -> year, p -> person, g -> government-organization, a -> after, n3 -> name, o2 -> official, d2 -> draft-01, a2 -> attempt-01, r -> relevance, c -> complete-01, s3 -> summit, o -> open-01, n2 -> next, c2 -> country, a4 -> also))),[Ljava.lang.String;@3baf6936,Annotation([Ljava.lang.String;@285f38f6,[Ljava.lang.String;@4e1459ea,[Ljava.lang.String;@3ab6678b),Annotation([Ljava.lang.String;@7a904f32,[Ljava.lang.String;@2b59501e,[Ledu.cmu.lti.nlp.amr.Dependency;@476e8796),Annotation([Ljava.lang.String;@4eed2acf,[Ljava.lang.String;@36fc05ff,[Ljava.lang.String;@57c47a9e),Annotation([Ljava.lang.String;@642505c7,[Ljava.lang.String;@4339e0de,[Ledu.cmu.lti.nlp.amr.Entity;@153cd6bb))
AMR:
(a / after, op, s / summit)
(a2 / attempt-01, ARG0, g / government-organization)
(a2 / attempt-01, ARG1, o / open-01)
(a2 / attempt-01, time, a / after)
(a3 / and, op, c / complete-01)
(b / before, op, s3 / summit)
(c / complete-01, ARG0, g / government-organization)
(c / complete-01, ARG1, d2 / draft-01)
(c / complete-01, time, b / before)
(c2 / country, name, n3 / name)
(d / document, mod, r / relevance)
(d2 / draft-01, ARG0, g / government-organization)
(d2 / draft-01, ARG1, d / document)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "SCO")
(n3 / name, op, "China")
(n4 / name, op, "Tang")
(o / open-01, ARG0, g / government-organization)
(o / open-01, ARG1, s2 / secretariat)
(o / open-01, mod, o2 / official)
(o3 / organization, name, n / name)
(p / person, name, n4 / name)
(s3 / summit, mod, o3 / organization)
(s3 / summit, time, t / temporal-quantity)
(s4 / seek-01, ARG0, g / government-organization)
(s4 / seek-01, ARG1, a3 / and)
(s5 / state-01, ARG0, p / person)
(s5 / state-01, ARG1, s4 / seek-01)
(s5 / state-01, mod, a4 / also)
(t / temporal-quantity, mod, n2 / next)
(t / temporal-quantity, unit, y / year)

Decoded in 527,083 microseconds
Sentence: Tang stated the SCO still faces a very stern anti-terrorism fight and cited the October 2002 hostage crisis in Moscow.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 13-14:  and => and
Span 14-15:  cited => cite-01
Span 19-20:  crisis => crisis
Span 5-6:  faces => face-01
Span 12-13:  fight => fight-01
Span 18-19:  hostage => hostage
Span 21-22:  Moscow => (city :name (name :op "Moscow"))
Span 16-18:  October 2002 => (date-entity :month 10 :year 2002)
Span 3-4:  SCO => (organization :name (name :op "SCO"))
Span 1-2:  stated => state-01
Span 8-9:  stern => stern
Span 4-5:  still => still
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 11-12:  terrorism => terrorism
Span 7-8:  very => very

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(2, 1, 0),Moscow,(city :name (name :op "Moscow")),false), Span(19,20,List(3),crisis,crisis,false), Span(18,19,List(4),hostage,hostage,false), Span(16,18,List(7, 6, 5),October 2002,(date-entity :month 10 :year 2002),false), Span(14,15,List(8),cited,cite-01,false), Span(13,14,List(9),and,and,false), Span(12,13,List(10),fight,fight-01,false), Span(11,12,List(11),terrorism,terrorism,false), Span(8,9,List(12),stern,stern,false), Span(7,8,List(13),very,very,false), Span(5,6,List(14),faces,face-01,false), Span(4,5,List(15),still,still,false), Span(3,4,List(18, 17, 16),SCO,(organization :name (name :op "SCO")),false), Span(1,2,List(19),stated,state-01,false), Span(0,1,List(22, 21, 20),Tang,(person :name (name :op "Tang")),false)),Map(2 -> "Moscow", 5 -> date-entity, 12 -> stern, 15 -> still, 8 -> cite-01, 21 -> name, 18 -> "SCO", 7 -> 2002, 17 -> name, 1 -> name, 4 -> hostage, 11 -> terrorism, 14 -> face-01, 20 -> person, 6 -> 10, 22 -> "Tang", 0 -> city, 9 -> and, 16 -> organization, 19 -> state-01, 3 -> crisis, 10 -> fight-01, 13 -> very),Map(n -> name, h -> hostage, 2 -> 2002, s2 -> still, t -> terrorism, s -> stern, v -> very, d -> date-entity, 1 -> 10, p -> person, n3 -> name, c3 -> cite-01, a -> and, s3 -> state-01, c -> city, f2 -> face-01, f -> fight-01, o -> organization, n2 -> name, c2 -> crisis))),[Ljava.lang.String;@61d84e08,Annotation([Ljava.lang.String;@2d9f64c9,[Ljava.lang.String;@21ac5eb4,[Ljava.lang.String;@52d6cd34),Annotation([Ljava.lang.String;@715d6168,[Ljava.lang.String;@27b2faa6,[Ledu.cmu.lti.nlp.amr.Dependency;@6428591a),Annotation([Ljava.lang.String;@7397c6,[Ljava.lang.String;@1abfe081,[Ljava.lang.String;@2a685eba),Annotation([Ljava.lang.String;@c2e3264,[Ljava.lang.String;@107f4980,[Ledu.cmu.lti.nlp.amr.Entity;@75a118e6))
AMR:
(a / and, op, c3 / cite-01)
(a / and, op, s3 / state-01)
(c / city, name, n / name)
(c2 / crisis, location, c / city)
(c2 / crisis, mod, h / hostage)
(c2 / crisis, time, d / date-entity)
(c3 / cite-01, ARG0, p / person)
(c3 / cite-01, ARG1, c2 / crisis)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2002)
(f / fight-01, ARG1, t / terrorism)
(f / fight-01, mod, s / stern)
(f2 / face-01, ARG0, o / organization)
(f2 / face-01, ARG1, f / fight-01)
(f2 / face-01, time, s2 / still)
(n / name, op, "Moscow")
(n2 / name, op, "SCO")
(n3 / name, op, "Tang")
(o / organization, name, n2 / name)
(p / person, name, n3 / name)
(s / stern, degree, v / very)
(s3 / state-01, ARG0, p / person)
(s3 / state-01, ARG1, f2 / face-01)

Decoded in 500,957 microseconds
Sentence: Tang stated the fact that the terrorist attack in Moscow was masterminded by national separatists and regional extremists demonstrated the necessity and correctness of efforts in reducing the 3-forces of terrorism, separatism and extremism.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 28-29:  3 => 3
Span 35-36:  and => and
Span 21-22:  and => and
Span 15-16:  and => and
Span 7-8:  attack => attack-01
Span 22-23:  correctness => correct
Span 18-19:  demonstrated => demonstrate-01
Span 24-25:  efforts => effort
Span 36-37:  extremism => extremism
Span 17-18:  extremists => extremist
Span 3-4:  fact => fact
Span 30-31:  forces => force
Span 11-12:  masterminded => mastermind-01
Span 9-10:  Moscow => (city :name (name :op "Moscow"))
Span 13-14:  national => nation
Span 26-27:  reducing => reduce-01
Span 16-17:  regional => region
Span 34-35:  separatism => separatism
Span 14-15:  separatists => separatist
Span 1-2:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 32-33:  terrorism => terrorism
Span 6-7:  terrorist => terrorist

Langrangian relaxation converged after 73 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),extremism,extremism,false), Span(35,36,List(1),and,and,false), Span(34,35,List(2),separatism,separatism,false), Span(32,33,List(3),terrorism,terrorism,false), Span(30,31,List(4),forces,force,false), Span(28,29,List(5),3,3,false), Span(26,27,List(6),reducing,reduce-01,false), Span(24,25,List(7),efforts,effort,false), Span(22,23,List(8),correctness,correct,false), Span(21,22,List(9),and,and,false), Span(18,19,List(10),demonstrated,demonstrate-01,false), Span(17,18,List(11),extremists,extremist,false), Span(16,17,List(12),regional,region,false), Span(15,16,List(13),and,and,false), Span(14,15,List(14),separatists,separatist,false), Span(13,14,List(15),national,nation,false), Span(11,12,List(16),masterminded,mastermind-01,false), Span(9,10,List(19, 18, 17),Moscow,(city :name (name :op "Moscow")),false), Span(7,8,List(20),attack,attack-01,false), Span(6,7,List(21),terrorist,terrorist,false), Span(3,4,List(22),fact,fact,false), Span(1,2,List(23),stated,state-01,false), Span(0,1,List(26, 25, 24),Tang,(person :name (name :op "Tang")),false)),Map(2 -> separatism, 5 -> 3, 12 -> region, 8 -> correct, 15 -> nation, 21 -> terrorist, 18 -> name, 24 -> person, 7 -> effort, 1 -> and, 17 -> city, 23 -> state-01, 26 -> "Tang", 4 -> force, 11 -> extremist, 14 -> separatist, 20 -> attack-01, 6 -> reduce-01, 9 -> and, 0 -> extremism, 22 -> fact, 16 -> mastermind-01, 19 -> "Moscow", 10 -> demonstrate-01, 3 -> terrorism, 25 -> name, 13 -> and),Map(e -> extremism, n -> nation, s2 -> separatist, t -> terrorism, e2 -> effort, a3 -> and, s -> separatism, d -> demonstrate-01, m -> mastermind-01, r2 -> region, p -> person, a -> and, n3 -> name, t2 -> terrorist, a2 -> and, r -> reduce-01, c -> correct, s3 -> state-01, f2 -> fact, f -> force, e3 -> extremist, 3 -> 3, c2 -> city, n2 -> name, a4 -> attack-01))),[Ljava.lang.String;@1d540566,Annotation([Ljava.lang.String;@6014a9ba,[Ljava.lang.String;@acdcf71,[Ljava.lang.String;@77d680e6),Annotation([Ljava.lang.String;@4a14c44f,[Ljava.lang.String;@f08fdce,[Ledu.cmu.lti.nlp.amr.Dependency;@6bda1d19),Annotation([Ljava.lang.String;@28c86134,[Ljava.lang.String;@4492eede,[Ljava.lang.String;@cbc8d0f),Annotation([Ljava.lang.String;@37b57b54,[Ljava.lang.String;@5c1f6d57,[Ledu.cmu.lti.nlp.amr.Entity;@f288c14))
AMR:
(a / and, op, e3 / extremist)
(a / and, op, s2 / separatist)
(a / and, op, t / terrorism)
(a2 / and, op, f / force)
(a2 / and, quant, 3 / 3)
(a3 / and, op, c / correct)
(a4 / attack-01, ARG0, t2 / terrorist)
(a4 / attack-01, ARG1, c2 / city)
(c / correct, domain, e2 / effort)
(c2 / city, name, n2 / name)
(d / demonstrate-01, ARG0, m / mastermind-01)
(d / demonstrate-01, ARG1, a3 / and)
(e2 / effort, purpose, r / reduce-01)
(e3 / extremist, mod, r2 / region)
(f / force, mod, e / extremism)
(m / mastermind-01, ARG0, a / and)
(m / mastermind-01, ARG1, a4 / attack-01)
(n / nation, mod, s / separatism)
(n2 / name, op, "Moscow")
(n3 / name, op, "Tang")
(p / person, name, n3 / name)
(r / reduce-01, ARG1, a2 / and)
(s2 / separatist, mod, n / nation)
(s3 / state-01, ARG0, p / person)
(s3 / state-01, ARG1, d / demonstrate-01)
(s3 / state-01, ARG2, f2 / fact)

Decoded in 3,086,373 microseconds
Sentence: Tang stated that all SCO members should deepen and expand security cooperation by adopting deals on jointly fighting against the 3-forces and terrorist organizations and by creating a regional anti-terrorist organization in Kyrgyz capital Bishkek as soon as possible.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (thing :name (name :op "Kyrgyz"))
NER Entity: (country :name (name :op "Bishkek"))
NER Entity: (country :name (name :op "Bishkek"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 20-21:  3 => 3
Span 13-14:  adopting => adopt-01
Span 3-4:  all => all
Span 26-27:  and => and
Span 23-24:  and => and
Span 8-9:  and => and
Span 38-39:  Bishkek => (name :op "Bishkek")
Span 37-38:  capital => capital
Span 11-12:  cooperation => cooperate-01
Span 28-29:  creating => create-01
Span 14-15:  deals => deal-01
Span 7-8:  deepen => deepen-01
Span 9-10:  expand => expand-01
Span 17-18:  fighting => fight-01
Span 22-23:  forces => force
Span 16-17:  jointly => joint
Span 36-37:  Kyrgyz => (country :name (name :op "Kyrgyzstan"))
Span 5-6:  members => (have-org-role-91 :ARG2 member)
Span 34-35:  organization => organization
Span 25-26:  organizations => organization
Span 42-43:  possible => possible
Span 30-31:  regional => region
Span 4-5:  SCO => (organization :name (name :op "SCO"))
Span 10-11:  security => security
Span 6-7:  should => recommend-01
Span 40-41:  soon => soon
Span 1-2:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 33-34:  terrorist => terrorist
Span 24-25:  terrorist => terrorist

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),possible,possible,false), Span(40,41,List(1),soon,soon,false), Span(38,39,List(3, 2),Bishkek,(name :op "Bishkek"),false), Span(37,38,List(4),capital,capital,false), Span(36,37,List(7, 6, 5),Kyrgyz,(country :name (name :op "Kyrgyzstan")),false), Span(34,35,List(8),organization,organization,false), Span(33,34,List(9),terrorist,terrorist,false), Span(30,31,List(10),regional,region,false), Span(28,29,List(11),creating,create-01,false), Span(26,27,List(12),and,and,false), Span(25,26,List(13),organizations,organization,false), Span(24,25,List(14),terrorist,terrorist,false), Span(23,24,List(15),and,and,false), Span(22,23,List(16),forces,force,false), Span(20,21,List(17),3,3,false), Span(17,18,List(18),fighting,fight-01,false), Span(16,17,List(19),jointly,joint,false), Span(14,15,List(20),deals,deal-01,false), Span(13,14,List(21),adopting,adopt-01,false), Span(11,12,List(22),cooperation,cooperate-01,false), Span(10,11,List(23),security,security,false), Span(9,10,List(24),expand,expand-01,false), Span(8,9,List(25),and,and,false), Span(7,8,List(26),deepen,deepen-01,false), Span(6,7,List(27),should,recommend-01,false), Span(5,6,List(29, 28),members,(have-org-role-91 :ARG2 member),false), Span(4,5,List(32, 31, 30),SCO,(organization :name (name :op "SCO")),false), Span(3,4,List(33),all,all,false), Span(1,2,List(34),stated,state-01,false), Span(0,1,List(37, 36, 35),Tang,(person :name (name :op "Tang")),false)),Map(30 -> organization, 2 -> name, 5 -> country, 33 -> all, 27 -> recommend-01, 12 -> and, 8 -> organization, 15 -> and, 36 -> name, 21 -> adopt-01, 18 -> fight-01, 24 -> expand-01, 35 -> person, 7 -> "Kyrgyzstan", 1 -> soon, 17 -> 3, 23 -> security, 26 -> deepen-01, 4 -> capital, 11 -> create-01, 32 -> "SCO", 14 -> terrorist, 29 -> member, 20 -> deal-01, 34 -> state-01, 28 -> have-org-role-91, 6 -> name, 9 -> terrorist, 0 -> possible, 22 -> cooperate-01, 16 -> force, 37 -> "Tang", 19 -> joint, 10 -> region, 3 -> "Bishkek", 31 -> name, 25 -> and, 13 -> organization),Map(e -> expand-01, n -> name, h -> have-org-role-91, s2 -> security, t -> terrorist, o3 -> organization, p2 -> person, n4 -> name, j -> joint, a3 -> adopt-01, c4 -> cooperate-01, s -> soon, m -> member, d -> deal-01, r2 -> recommend-01, p -> possible, n3 -> name, a -> and, c3 -> create-01, a5 -> all, o2 -> organization, d2 -> deepen-01, t2 -> terrorist, r -> region, a2 -> and, c -> capital, s3 -> state-01, f2 -> fight-01, f -> force, o -> organization, 3 -> 3, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@6794ac0b,Annotation([Ljava.lang.String;@7be71476,[Ljava.lang.String;@5cb5bb88,[Ljava.lang.String;@17b6d426),Annotation([Ljava.lang.String;@5580d62f,[Ljava.lang.String;@16872c4d,[Ledu.cmu.lti.nlp.amr.Dependency;@671facee),Annotation([Ljava.lang.String;@46a953cf,[Ljava.lang.String;@154bd49b,[Ljava.lang.String;@3a01773b),Annotation([Ljava.lang.String;@20e3c449,[Ljava.lang.String;@2c58dcb1,[Ledu.cmu.lti.nlp.amr.Entity;@67fc2aad))
AMR:
(a / and, op, f / force)
(a / and, op, o / organization)
(a2 / and, op, a3 / adopt-01)
(a2 / and, op, c3 / create-01)
(a3 / adopt-01, ARG1, d / deal-01)
(a4 / and, instrument, a2 / and)
(a4 / and, op, d2 / deepen-01)
(a4 / and, op, e / expand-01)
(c / capital, location, c2 / country)
(c / capital, name, n / name)
(c2 / country, name, n2 / name)
(c3 / create-01, ARG1, o2 / organization)
(c3 / create-01, location, c / capital)
(c3 / create-01, time, s / soon)
(c4 / cooperate-01, ARG1, t / terrorist)
(c4 / cooperate-01, ARG2, s2 / security)
(d / deal-01, ARG1, f2 / fight-01)
(d2 / deepen-01, ARG1, c4 / cooperate-01)
(e / expand-01, ARG0, h / have-org-role-91)
(e / expand-01, ARG1, c4 / cooperate-01)
(f / force, quant, 3 / 3)
(f2 / fight-01, ARG1, a / and)
(f2 / fight-01, manner, j / joint)
(h / have-org-role-91, ARG1, o3 / organization)
(h / have-org-role-91, ARG2, m / member)
(h / have-org-role-91, ARG6, a5 / all)
(n / name, op, "Bishkek")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "SCO")
(n4 / name, op, "Tang")
(o / organization, mod, t2 / terrorist)
(o2 / organization, mod, r / region)
(o3 / organization, name, n3 / name)
(p2 / person, name, n4 / name)
(r2 / recommend-01, ARG0, p2 / person)
(r2 / recommend-01, ARG1, a4 / and)
(s / soon, degree, p / possible)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, r2 / recommend-01)

Decoded in 4,197,569 microseconds
Sentence: Tang stated that the Chinese government appreciated and supported some Central Asian countries' proposals on enhancing anti-drug cooperation.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Central" :op "Asian"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 7-8:  and => and
Span 6-7:  appreciated => appreciate-02
Span 10-12:  Central Asian => (thing :name (name :op "Central" :op "Asian"))
Span 4-5:  Chinese => (country :name (name :op "China"))
Span 20-21:  cooperation => cooperate-01
Span 12-13:  countries => country
Span 19-20:  drug => drug
Span 16-17:  enhancing => enhance-01
Span 5-6:  government => (government-organization :ARG0-of govern-01)
Span 14-15:  proposals => propose-01
Span 9-10:  some => some
Span 1-2:  stated => state-01
Span 8-9:  supported => support-01
Span 0-1:  Tang => (person :name (name :op "Tang"))

Langrangian relaxation converged after 113 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),cooperation,cooperate-01,false), Span(19,20,List(1),drug,drug,false), Span(16,17,List(2),enhancing,enhance-01,false), Span(14,15,List(3),proposals,propose-01,false), Span(12,13,List(4),countries,country,false), Span(10,12,List(8, 7, 6, 5),Central Asian,(thing :name (name :op "Central" :op "Asian")),false), Span(9,10,List(9),some,some,false), Span(8,9,List(10),supported,support-01,false), Span(7,8,List(11),and,and,false), Span(6,7,List(12),appreciated,appreciate-02,false), Span(5,6,List(14, 13),government,(government-organization :ARG0-of govern-01),false), Span(4,5,List(17, 16, 15),Chinese,(country :name (name :op "China")),false), Span(1,2,List(18),stated,state-01,false), Span(0,1,List(21, 20, 19),Tang,(person :name (name :op "Tang")),false)),Map(2 -> enhance-01, 5 -> thing, 12 -> appreciate-02, 15 -> country, 8 -> "Asian", 21 -> "Tang", 18 -> state-01, 7 -> "Central", 17 -> "China", 1 -> drug, 4 -> country, 11 -> and, 14 -> govern-01, 20 -> name, 6 -> name, 0 -> cooperate-01, 9 -> some, 16 -> name, 19 -> person, 3 -> propose-01, 10 -> support-01, 13 -> government-organization),Map(e -> enhance-01, n -> name, s2 -> support-01, t -> thing, p2 -> person, s -> some, d -> drug, g2 -> govern-01, p -> propose-01, g -> government-organization, n3 -> name, c3 -> country, a -> and, a2 -> appreciate-02, s3 -> state-01, c -> cooperate-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@56f521c6,Annotation([Ljava.lang.String;@680a66dd,[Ljava.lang.String;@2dd8239,[Ljava.lang.String;@472698d),Annotation([Ljava.lang.String;@7b7683d4,[Ljava.lang.String;@40712ee9,[Ledu.cmu.lti.nlp.amr.Dependency;@2e53b094),Annotation([Ljava.lang.String;@39fa8ad2,[Ljava.lang.String;@76ddd61a,[Ljava.lang.String;@3f92a84e),Annotation([Ljava.lang.String;@cf67838,[Ljava.lang.String;@6137cf6e,[Ledu.cmu.lti.nlp.amr.Entity;@7942a854))
AMR:
(a / and, op, s2 / support-01)
(a2 / appreciate-02, ARG0, g / government-organization)
(a2 / appreciate-02, ARG1, p / propose-01)
(c / cooperate-01, ARG1, s / some)
(c / cooperate-01, ARG2, d / drug)
(c2 / country, name, n2 / name)
(c3 / country, name, n2 / name)
(e / enhance-01, ARG1, c / cooperate-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(n / name, op, "Asian")
(n / name, op, "Central")
(n2 / name, op, "China")
(n3 / name, op, "Tang")
(p / propose-01, ARG1, e / enhance-01)
(p / propose-01, ARG6, t / thing)
(p2 / person, name, n3 / name)
(s2 / support-01, ARG0, g / government-organization)
(s2 / support-01, ARG1, p / propose-01)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, a / and)
(t / thing, name, n / name)

Decoded in 2,656,732 microseconds
Sentence: Tang stated that the Chinese Government signed multilateral anti-drug cooperation pact.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 4-5:  Chinese => (country :name (name :op "China"))
Span 11-12:  cooperation => cooperate-01
Span 10-11:  drug => drug
Span 5-6:  Government => (government-organization :ARG0-of govern-01)
Span 7-8:  multilateral => multilateral
Span 12-13:  pact => pact
Span 6-7:  signed => sign-02
Span 1-2:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),pact,pact,false), Span(11,12,List(1),cooperation,cooperate-01,false), Span(10,11,List(2),drug,drug,false), Span(7,8,List(3),multilateral,multilateral,false), Span(6,7,List(4),signed,sign-02,false), Span(5,6,List(6, 5),Government,(government-organization :ARG0-of govern-01),false), Span(4,5,List(9, 8, 7),Chinese,(country :name (name :op "China")),false), Span(1,2,List(10),stated,state-01,false), Span(0,1,List(13, 12, 11),Tang,(person :name (name :op "Tang")),false)),Map(2 -> drug, 5 -> government-organization, 12 -> name, 8 -> name, 7 -> country, 1 -> cooperate-01, 4 -> sign-02, 11 -> person, 6 -> govern-01, 0 -> pact, 9 -> "China", 3 -> multilateral, 10 -> state-01, 13 -> "Tang"),Map(n -> name, s2 -> state-01, p2 -> person, s -> sign-02, m -> multilateral, d -> drug, g2 -> govern-01, g -> government-organization, p -> pact, c -> cooperate-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@53b8afea,Annotation([Ljava.lang.String;@6c302a1d,[Ljava.lang.String;@33a3c44a,[Ljava.lang.String;@5fcfca62),Annotation([Ljava.lang.String;@499ef98e,[Ljava.lang.String;@24934262,[Ledu.cmu.lti.nlp.amr.Dependency;@93f432e),Annotation([Ljava.lang.String;@288214b1,[Ljava.lang.String;@16eedaa6,[Ljava.lang.String;@28501a4b),Annotation([Ljava.lang.String;@5b051a5c,[Ljava.lang.String;@639aba11,[Ledu.cmu.lti.nlp.amr.Entity;@341672e))
AMR:
(c / cooperate-01, ARG1, d / drug)
(c2 / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "China")
(n2 / name, op, "Tang")
(p / pact, mod, m / multilateral)
(p / pact, topic, c / cooperate-01)
(p2 / person, name, n2 / name)
(s / sign-02, ARG0, g / government-organization)
(s / sign-02, ARG1, p / pact)
(s2 / state-01, ARG0, p2 / person)
(s2 / state-01, ARG1, s / sign-02)

Decoded in 68,400 microseconds
Sentence: Tang stated anti-drug measures as one of the top tasks of regional anti-terrorist organizations.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 4-5:  drug => drug
Span 5-6:  measures => measure
Span 7-8:  one => 1
Span 17-18:  organizations => organization
Span 13-14:  regional => region
Span 1-2:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 11-12:  tasks => task
Span 16-17:  terrorist => terrorist
Span 10-11:  top => top

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),organizations,organization,false), Span(16,17,List(1),terrorist,terrorist,false), Span(13,14,List(2),regional,region,false), Span(11,12,List(3),tasks,task,false), Span(10,11,List(4),top,top,false), Span(7,8,List(5),one,1,false), Span(5,6,List(6),measures,measure,false), Span(4,5,List(7),drug,drug,false), Span(1,2,List(8),stated,state-01,false), Span(0,1,List(11, 10, 9),Tang,(person :name (name :op "Tang")),false)),Map(2 -> region, 5 -> 1, 8 -> state-01, 7 -> drug, 1 -> terrorist, 11 -> "Tang", 4 -> top, 6 -> measure, 9 -> person, 0 -> organization, 10 -> name, 3 -> task),Map(n -> name, t -> terrorist, s -> state-01, d -> drug, m -> measure, p -> person, 1 -> 1, t3 -> top, t2 -> task, r -> region, o -> organization))),[Ljava.lang.String;@2bebb74f,Annotation([Ljava.lang.String;@58cf8f94,[Ljava.lang.String;@6e33fcae,[Ljava.lang.String;@66c38e51),Annotation([Ljava.lang.String;@10641c09,[Ljava.lang.String;@34f392be,[Ledu.cmu.lti.nlp.amr.Dependency;@4554de02),Annotation([Ljava.lang.String;@3f9f71ff,[Ljava.lang.String;@fabb651,[Ljava.lang.String;@27e5b378),Annotation([Ljava.lang.String;@4422dd48,[Ljava.lang.String;@764cba,[Ledu.cmu.lti.nlp.amr.Entity;@523d6bdb))
AMR:
(d / drug, mod, t / terrorist)
(m / measure, mod, d / drug)
(n / name, op, "Tang")
(o / organization, mod, r / region)
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, m / measure)
(s / state-01, ARG3, t2 / task)
(t2 / task, mod, t3 / top)
(t2 / task, poss, o / organization)
(t2 / task, quant, 1 / 1)

Decoded in 159,121 microseconds
Sentence: Tang stated that economic cooperation is a key area for cooperation between the SCO members, stating --

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 8-9:  area => area
Span 11-12:  between => between
Span 10-11:  cooperation => cooperate-01
Span 4-5:  cooperation => cooperate-01
Span 3-4:  economic => economy
Span 7-8:  key => key
Span 14-15:  members => (have-org-role-91 :ARG2 member)
Span 13-14:  SCO => (organization :name (name :op "SCO"))
Span 1-2:  stated => state-01
Span 16-17:  stating => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),stating,state-01,false), Span(14,15,List(2, 1),members,(have-org-role-91 :ARG2 member),false), Span(13,14,List(5, 4, 3),SCO,(organization :name (name :op "SCO")),false), Span(11,12,List(6),between,between,false), Span(10,11,List(7),cooperation,cooperate-01,false), Span(8,9,List(8),area,area,false), Span(7,8,List(9),key,key,false), Span(4,5,List(10),cooperation,cooperate-01,false), Span(3,4,List(11),economic,economy,false), Span(1,2,List(12),stated,state-01,false), Span(0,1,List(15, 14, 13),Tang,(person :name (name :op "Tang")),false)),Map(2 -> member, 5 -> "SCO", 12 -> state-01, 15 -> "Tang", 8 -> area, 7 -> cooperate-01, 1 -> have-org-role-91, 4 -> name, 11 -> economy, 14 -> name, 6 -> between, 0 -> state-01, 9 -> key, 3 -> organization, 10 -> cooperate-01, 13 -> person),Map(e -> economy, n -> name, h -> have-org-role-91, s2 -> state-01, b -> between, k -> key, s -> state-01, m -> member, p -> person, a -> area, c -> cooperate-01, o -> organization, n2 -> name, c2 -> cooperate-01))),[Ljava.lang.String;@58496c97,Annotation([Ljava.lang.String;@ad3324b,[Ljava.lang.String;@3872bc37,[Ljava.lang.String;@1a87b51),Annotation([Ljava.lang.String;@12968227,[Ljava.lang.String;@144ab54,[Ledu.cmu.lti.nlp.amr.Dependency;@2cfa2c4f),Annotation([Ljava.lang.String;@6ecab872,[Ljava.lang.String;@48eb9836,[Ljava.lang.String;@6c518474),Annotation([Ljava.lang.String;@11b455e5,[Ljava.lang.String;@2a066689,[Ledu.cmu.lti.nlp.amr.Entity;@3e3861d7))
AMR:
(a / area, mod, k / key)
(a / area, prep-for, c / cooperate-01)
(b / between, op, h / have-org-role-91)
(c / cooperate-01, location, b / between)
(c2 / cooperate-01, ARG1, e / economy)
(c2 / cooperate-01, mod, a / area)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "SCO")
(n2 / name, op, "Tang")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, c2 / cooperate-01)
(s2 / state-01, instrument, s / state-01)

Decoded in 110,900 microseconds
Sentence: To gain substantial benefits from economic and trade cooperation, all Member States should strengthen political common sense over economic and trade cooperation and regard economic and trade cooperation as a strategic problem that could affect regional security and the SCO's development.

NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
Spans:
Span 35-36:  affect => affect-01
Span 10-11:  all => all
Span 38-39:  and => and
Span 26-27:  and => and
Span 23-24:  and => and
Span 20-21:  and => and
Span 6-7:  and => and
Span 3-4:  benefits => benefit-01
Span 16-17:  common => common
Span 28-29:  cooperation => cooperate-01
Span 22-23:  cooperation => cooperate-01
Span 8-9:  cooperation => cooperate-01
Span 34-35:  could => possible
Span 42-43:  development => develop-02
Span 25-26:  economic => economy
Span 19-20:  economic => economy
Span 5-6:  economic => economy
Span 1-2:  gain => gain-02
Span 11-12:  Member => (have-org-role-91 :ARG2 member)
Span 18-19:  over => over
Span 15-16:  political => politics
Span 32-33:  problem => problem
Span 24-25:  regard => regard-01
Span 36-37:  regional => region
Span 40-41:  SCO => (organization :name (name :op "SCO"))
Span 37-38:  security => security
Span 17-18:  sense => sense-01
Span 13-14:  should => recommend-01
Span 31-32:  strategic => strategy
Span 14-15:  strengthen => strengthen-01
Span 2-3:  substantial => substantial
Span 27-28:  trade => trade-01
Span 21-22:  trade => trade-01
Span 7-8:  trade => trade-01

Langrangian relaxation converged after 66 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),development,develop-02,false), Span(40,41,List(3, 2, 1),SCO,(organization :name (name :op "SCO")),false), Span(38,39,List(4),and,and,false), Span(37,38,List(5),security,security,false), Span(36,37,List(6),regional,region,false), Span(35,36,List(7),affect,affect-01,false), Span(34,35,List(8),could,possible,false), Span(32,33,List(9),problem,problem,false), Span(31,32,List(10),strategic,strategy,false), Span(28,29,List(11),cooperation,cooperate-01,false), Span(27,28,List(12),trade,trade-01,false), Span(26,27,List(13),and,and,false), Span(25,26,List(14),economic,economy,false), Span(24,25,List(15),regard,regard-01,false), Span(23,24,List(16),and,and,false), Span(22,23,List(17),cooperation,cooperate-01,false), Span(21,22,List(18),trade,trade-01,false), Span(20,21,List(19),and,and,false), Span(19,20,List(20),economic,economy,false), Span(18,19,List(21),over,over,false), Span(17,18,List(22),sense,sense-01,false), Span(16,17,List(23),common,common,false), Span(15,16,List(24),political,politics,false), Span(14,15,List(25),strengthen,strengthen-01,false), Span(13,14,List(26),should,recommend-01,false), Span(11,12,List(28, 27),Member,(have-org-role-91 :ARG2 member),false), Span(10,11,List(29),all,all,false), Span(8,9,List(30),cooperation,cooperate-01,false), Span(7,8,List(31),trade,trade-01,false), Span(6,7,List(32),and,and,false), Span(5,6,List(33),economic,economy,false), Span(3,4,List(34),benefits,benefit-01,false), Span(2,3,List(35),substantial,substantial,false), Span(1,2,List(36),gain,gain-02,false)),Map(30 -> cooperate-01, 2 -> name, 5 -> security, 33 -> economy, 27 -> have-org-role-91, 12 -> trade-01, 8 -> possible, 15 -> regard-01, 36 -> gain-02, 21 -> over, 18 -> trade-01, 24 -> politics, 35 -> substantial, 7 -> affect-01, 1 -> organization, 17 -> cooperate-01, 23 -> common, 26 -> recommend-01, 4 -> and, 11 -> cooperate-01, 32 -> and, 14 -> economy, 29 -> all, 20 -> economy, 34 -> benefit-01, 28 -> member, 6 -> region, 9 -> problem, 0 -> develop-02, 22 -> sense-01, 16 -> and, 19 -> and, 10 -> strategy, 3 -> "SCO", 31 -> trade-01, 25 -> strengthen-01, 13 -> and),Map(s5 -> substantial, a7 -> and, e -> economy, n -> name, h -> have-org-role-91, r3 -> recommend-01, s2 -> strategy, t -> trade-01, b -> benefit-01, p2 -> problem, e2 -> economy, c4 -> cooperate-01, a3 -> and, s -> security, a6 -> all, s4 -> strengthen-01, m -> member, d -> develop-02, t3 -> trade-01, r2 -> regard-01, g -> gain-02, p -> possible, a -> and, c3 -> common, a5 -> and, o2 -> over, t2 -> trade-01, a2 -> affect-01, r -> region, c -> cooperate-01, s3 -> sense-01, o -> organization, e3 -> economy, p3 -> politics, c2 -> cooperate-01, a4 -> and))),[Ljava.lang.String;@5e2a3040,Annotation([Ljava.lang.String;@6d025d1d,[Ljava.lang.String;@74294c1a,[Ljava.lang.String;@9e2ad91),Annotation([Ljava.lang.String;@64524dd,[Ljava.lang.String;@79d06bbd,[Ledu.cmu.lti.nlp.amr.Dependency;@47a7a101),Annotation([Ljava.lang.String;@5bb51241,[Ljava.lang.String;@7479b626,[Ljava.lang.String;@e8ea697),Annotation([Ljava.lang.String;@74dbb1ee,[Ljava.lang.String;@70f822e,[Ledu.cmu.lti.nlp.amr.Entity;@3efedc6f))
AMR:
(a / and, op, d / develop-02)
(a2 / affect-01, ARG1, a / and)
(a2 / affect-01, ARG2, p2 / problem)
(a2 / affect-01, mod, p / possible)
(a3 / and, op, r2 / regard-01)
(a4 / and, op, c2 / cooperate-01)
(a4 / and, op, r2 / regard-01)
(a4 / and, op, s / security)
(a5 / and, op, r2 / regard-01)
(a5 / and, op, s4 / strengthen-01)
(a7 / and, op, t3 / trade-01)
(b / benefit-01, ARG1, e3 / economy)
(b / benefit-01, mod, s5 / substantial)
(c / cooperate-01, ARG1, e / economy)
(c2 / cooperate-01, ARG1, o2 / over)
(c4 / cooperate-01, ARG1, a6 / all)
(c4 / cooperate-01, ARG2, a7 / and)
(d / develop-02, ARG1, o / organization)
(e2 / economy, degree, o2 / over)
(g / gain-02, ARG1, b / benefit-01)
(g / gain-02, ARG2, c4 / cooperate-01)
(h / have-org-role-91, ARG1, a2 / affect-01)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "SCO")
(o / organization, name, n / name)
(p2 / problem, mod, s2 / strategy)
(r2 / regard-01, ARG1, c / cooperate-01)
(r2 / regard-01, ARG2, p2 / problem)
(r3 / recommend-01, ARG1, a5 / and)
(r3 / recommend-01, purpose, g / gain-02)
(s / security, mod, r / region)
(s3 / sense-01, mod, c3 / common)
(s3 / sense-01, mod, p3 / politics)
(s4 / strengthen-01, ARG1, s3 / sense-01)
(s4 / strengthen-01, topic, c4 / cooperate-01)
(t / trade-01, ARG1, t2 / trade-01)
(t2 / trade-01, ARG1, c2 / cooperate-01)

Decoded in 5,407,677 microseconds
Sentence: Tang also referenced a volatile world situation and stated that the common and pressing task of all SCO members is to manage threats from untraditional security spheres including terrorism, drug trafficking, weapons smuggle, transnational monetary crimes.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 16-17:  all => all
Span 1-2:  also => also
Span 12-13:  and => and
Span 7-8:  and => and
Span 11-12:  common => common
Span 38-39:  crimes => crime
Span 30-31:  drug => drug
Span 27-28:  including => include-91
Span 21-22:  manage => manage-01
Span 18-19:  members => (have-org-role-91 :ARG2 member)
Span 37-38:  monetary => money
Span 13-14:  pressing => press-01
Span 2-3:  referenced => reference-01
Span 17-18:  SCO => (organization :name (name :op "SCO"))
Span 25-26:  security => security
Span 6-7:  situation => situation
Span 34-35:  smuggle => smuggle-01
Span 26-27:  spheres => sphere
Span 8-9:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 14-15:  task => task-01
Span 28-29:  terrorism => terrorism
Span 22-23:  threats => threaten-01
Span 31-32:  trafficking => traffic-00
Span 36-37:  transnational => transnational
Span 24-25:  untraditional => (traditional :polarity -)
Span 4-5:  volatile => volatile
Span 33-34:  weapons => weapon
Span 5-6:  world => world

Langrangian relaxation converged after 86 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(0),crimes,crime,false), Span(37,38,List(1),monetary,money,false), Span(36,37,List(2),transnational,transnational,false), Span(34,35,List(3),smuggle,smuggle-01,false), Span(33,34,List(4),weapons,weapon,false), Span(31,32,List(5),trafficking,traffic-00,false), Span(30,31,List(6),drug,drug,false), Span(28,29,List(7),terrorism,terrorism,false), Span(27,28,List(8),including,include-91,false), Span(26,27,List(9),spheres,sphere,false), Span(25,26,List(10),security,security,false), Span(24,25,List(12, 11),untraditional,(traditional :polarity -),false), Span(22,23,List(13),threats,threaten-01,false), Span(21,22,List(14),manage,manage-01,false), Span(18,19,List(16, 15),members,(have-org-role-91 :ARG2 member),false), Span(17,18,List(19, 18, 17),SCO,(organization :name (name :op "SCO")),false), Span(16,17,List(20),all,all,false), Span(14,15,List(21),task,task-01,false), Span(13,14,List(22),pressing,press-01,false), Span(12,13,List(23),and,and,false), Span(11,12,List(24),common,common,false), Span(8,9,List(25),stated,state-01,false), Span(7,8,List(26),and,and,false), Span(6,7,List(27),situation,situation,false), Span(5,6,List(28),world,world,false), Span(4,5,List(29),volatile,volatile,false), Span(2,3,List(30),referenced,reference-01,false), Span(1,2,List(31),also,also,false), Span(0,1,List(34, 33, 32),Tang,(person :name (name :op "Tang")),false)),Map(30 -> reference-01, 2 -> transnational, 5 -> traffic-00, 33 -> name, 27 -> situation, 12 -> -, 8 -> include-91, 15 -> have-org-role-91, 21 -> task-01, 18 -> name, 24 -> common, 7 -> terrorism, 1 -> money, 17 -> organization, 23 -> and, 26 -> and, 4 -> weapon, 11 -> traditional, 32 -> person, 14 -> manage-01, 29 -> volatile, 20 -> all, 34 -> "Tang", 28 -> world, 6 -> drug, 9 -> sphere, 0 -> crime, 22 -> press-01, 16 -> member, 19 -> "SCO", 10 -> security, 3 -> smuggle-01, 31 -> also, 25 -> state-01, 13 -> threaten-01),Map(s5 -> situation, m3 -> member, w -> weapon, n -> name, h -> have-org-role-91, t4 -> traditional, s2 -> sphere, t -> transnational, m2 -> manage-01, p2 -> person, a3 -> and, t6 -> task-01, s -> smuggle-01, s4 -> state-01, v -> volatile, d -> drug, m -> money, t3 -> terrorism, p -> press-01, a -> all, t2 -> traffic-00, w2 -> world, t5 -> threaten-01, r -> reference-01, i -> include-91, a2 -> and, c -> crime, s3 -> security, o -> organization, n2 -> name, c2 -> common, a4 -> also))),[Ljava.lang.String;@45bf6f39,Annotation([Ljava.lang.String;@6c42f2a1,[Ljava.lang.String;@17a703f5,[Ljava.lang.String;@5ff2b8ca),Annotation([Ljava.lang.String;@618ad2aa,[Ljava.lang.String;@1aa6e3c0,[Ledu.cmu.lti.nlp.amr.Dependency;@3531f3ca),Annotation([Ljava.lang.String;@7fcf294e,[Ljava.lang.String;@4867ab9f,[Ljava.lang.String;@65f2f9b0),Annotation([Ljava.lang.String;@5fe7f967,[Ljava.lang.String;@59e43e8c,[Ledu.cmu.lti.nlp.amr.Entity;@2caa5d7c))
AMR:
(a2 / and, op, c / crime)
(a2 / and, op, s / smuggle-01)
(a2 / and, op, t2 / traffic-00)
(a2 / and, op, t3 / terrorism)
(a3 / and, op, r / reference-01)
(a3 / and, op, s4 / state-01)
(c / crime, mod, m / money)
(c / crime, mod, t / transnational)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m3 / member)
(i / include-91, ARG1, t3 / terrorism)
(i / include-91, ARG2, s2 / sphere)
(m2 / manage-01, ARG1, t5 / threaten-01)
(n / name, op, "SCO")
(n2 / name, op, "Tang")
(o / organization, name, n / name)
(p / press-01, ARG0, t6 / task-01)
(p / press-01, ARG1, h / have-org-role-91)
(p2 / person, name, n2 / name)
(r / reference-01, ARG0, p2 / person)
(r / reference-01, ARG1, s5 / situation)
(r / reference-01, mod, a4 / also)
(s / smuggle-01, ARG1, w / weapon)
(s2 / sphere, mod, s3 / security)
(s2 / sphere, mod, t4 / traditional)
(s4 / state-01, ARG0, p2 / person)
(s4 / state-01, ARG1, t6 / task-01)
(s5 / situation, location, w2 / world)
(s5 / situation, mod, v / volatile)
(t2 / traffic-00, ARG1, d / drug)
(t4 / traditional, polarity, -)
(t5 / threaten-01, ARG0, s2 / sphere)
(t5 / threaten-01, ARG1, a / all)
(t6 / task-01, ARG1, m2 / manage-01)
(t6 / task-01, mod, c2 / common)

Decoded in 5,555,981 microseconds
Sentence: Tang stated that peace and development still dominate the current age as the general situation of the world is stable and the economy is developing forward in waves.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 10-11:  age => age
Span 20-21:  and => and
Span 4-5:  and => and
Span 9-10:  current => current
Span 24-25:  developing => develop-02
Span 5-6:  development => develop-02
Span 7-8:  dominate => dominate-01
Span 22-23:  economy => economy
Span 25-26:  forward => forward
Span 13-14:  general => general
Span 3-4:  peace => peace
Span 14-15:  situation => situation
Span 19-20:  stable => stable
Span 1-2:  stated => state-01
Span 6-7:  still => still
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 27-28:  waves => wave
Span 17-18:  world => world

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),waves,wave,false), Span(25,26,List(1),forward,forward,false), Span(24,25,List(2),developing,develop-02,false), Span(22,23,List(3),economy,economy,false), Span(20,21,List(4),and,and,false), Span(19,20,List(5),stable,stable,false), Span(17,18,List(6),world,world,false), Span(14,15,List(7),situation,situation,false), Span(13,14,List(8),general,general,false), Span(10,11,List(9),age,age,false), Span(9,10,List(10),current,current,false), Span(7,8,List(11),dominate,dominate-01,false), Span(6,7,List(12),still,still,false), Span(5,6,List(13),development,develop-02,false), Span(4,5,List(14),and,and,false), Span(3,4,List(15),peace,peace,false), Span(1,2,List(16),stated,state-01,false), Span(0,1,List(19, 18, 17),Tang,(person :name (name :op "Tang")),false)),Map(2 -> develop-02, 5 -> stable, 12 -> still, 15 -> peace, 8 -> general, 18 -> name, 7 -> situation, 17 -> person, 1 -> forward, 4 -> and, 11 -> dominate-01, 14 -> and, 6 -> world, 0 -> wave, 9 -> age, 16 -> state-01, 19 -> "Tang", 3 -> economy, 10 -> current, 13 -> develop-02),Map(e -> economy, n -> name, w -> wave, s2 -> situation, d3 -> develop-02, p2 -> person, a3 -> and, s -> stable, s4 -> state-01, d -> develop-02, p -> peace, g -> general, a -> and, d2 -> dominate-01, w2 -> world, a2 -> age, c -> current, s3 -> still, f -> forward))),[Ljava.lang.String;@5e671e20,Annotation([Ljava.lang.String;@3eabe84a,[Ljava.lang.String;@46c3a14d,[Ljava.lang.String;@38fc5554),Annotation([Ljava.lang.String;@5e8cda75,[Ljava.lang.String;@3f049056,[Ledu.cmu.lti.nlp.amr.Dependency;@64968732),Annotation([Ljava.lang.String;@3e1a3801,[Ljava.lang.String;@6fd12c5,[Ljava.lang.String;@1de0a46c),Annotation([Ljava.lang.String;@4d1f1ff5,[Ljava.lang.String;@222afc67,[Ledu.cmu.lti.nlp.amr.Entity;@4c2fb9dd))
AMR:
(a / and, op, d3 / develop-02)
(a / and, op, p / peace)
(a / and, op, s / stable)
(a2 / age, time, c / current)
(a3 / and, op, d / develop-02)
(a3 / and, op, p2 / person)
(a3 / and, op, s2 / situation)
(d / develop-02, ARG1, e / economy)
(d / develop-02, direction, f / forward)
(d / develop-02, manner, w / wave)
(d2 / dominate-01, ARG0, a / and)
(d2 / dominate-01, ARG1, a2 / age)
(d2 / dominate-01, mod, s3 / still)
(d3 / develop-02, ARG1, w2 / world)
(n / name, op, "Tang")
(p2 / person, name, n / name)
(s2 / situation, mod, g / general)
(s4 / state-01, ARG0, p2 / person)
(s4 / state-01, ARG1, d2 / dominate-01)

Decoded in 1,202,168 microseconds
Sentence: Tang stated that the international community was watching the organization closely as more countries and international organizations were willing to conduct dialogues and cooperation with the SCO.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 22-23:  and => and
Span 14-15:  and => and
Span 10-11:  closely => close
Span 5-6:  community => community
Span 20-21:  conduct => conduct-01
Span 23-24:  cooperation => cooperate-01
Span 13-14:  countries => country
Span 21-22:  dialogues => dialogue-00
Span 15-16:  international => international
Span 4-5:  international => international
Span 12-13:  more => more
Span 9-10:  organization => organization
Span 16-17:  organizations => organization
Span 26-27:  SCO => (organization :name (name :op "SCO"))
Span 1-2:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 7-8:  watching => watch-01
Span 18-19:  willing => will-02

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(2, 1, 0),SCO,(organization :name (name :op "SCO")),false), Span(23,24,List(3),cooperation,cooperate-01,false), Span(22,23,List(4),and,and,false), Span(21,22,List(5),dialogues,dialogue-00,false), Span(20,21,List(6),conduct,conduct-01,false), Span(18,19,List(7),willing,will-02,false), Span(16,17,List(8),organizations,organization,false), Span(15,16,List(9),international,international,false), Span(14,15,List(10),and,and,false), Span(13,14,List(11),countries,country,false), Span(12,13,List(12),more,more,false), Span(10,11,List(13),closely,close,false), Span(9,10,List(14),organization,organization,false), Span(7,8,List(15),watching,watch-01,false), Span(5,6,List(16),community,community,false), Span(4,5,List(17),international,international,false), Span(1,2,List(18),stated,state-01,false), Span(0,1,List(21, 20, 19),Tang,(person :name (name :op "Tang")),false)),Map(2 -> "SCO", 5 -> dialogue-00, 12 -> more, 15 -> watch-01, 8 -> organization, 21 -> "Tang", 18 -> state-01, 7 -> will-02, 17 -> international, 1 -> name, 4 -> and, 11 -> country, 14 -> organization, 20 -> name, 6 -> conduct-01, 0 -> organization, 9 -> international, 16 -> community, 19 -> person, 3 -> cooperate-01, 10 -> and, 13 -> close),Map(n -> name, w -> will-02, o3 -> organization, c4 -> close, s -> state-01, d -> dialogue-00, m -> more, p -> person, a -> and, c3 -> country, o2 -> organization, i2 -> international, w2 -> watch-01, i -> international, a2 -> and, c -> cooperate-01, o -> organization, n2 -> name, c2 -> conduct-01, c5 -> community))),[Ljava.lang.String;@54f4a7f0,Annotation([Ljava.lang.String;@61a1ea2c,[Ljava.lang.String;@149debbb,[Ljava.lang.String;@25cd49a4),Annotation([Ljava.lang.String;@5477a1ca,[Ljava.lang.String;@3ae9d1e2,[Ledu.cmu.lti.nlp.amr.Dependency;@41522537),Annotation([Ljava.lang.String;@e9dc4d0,[Ljava.lang.String;@670d4d38,[Ljava.lang.String;@131ff6fa),Annotation([Ljava.lang.String;@43b40233,[Ljava.lang.String;@23eff5d1,[Ledu.cmu.lti.nlp.amr.Entity;@2e060819))
AMR:
(a / and, op, c3 / country)
(a / and, op, o2 / organization)
(a2 / and, op, c / cooperate-01)
(a2 / and, op, d / dialogue-00)
(c / cooperate-01, ARG1, o3 / organization)
(c2 / conduct-01, ARG1, a2 / and)
(c3 / country, quant, m / more)
(c5 / community, mod, i / international)
(n / name, op, "SCO")
(n2 / name, op, "Tang")
(o / organization, name, n / name)
(o2 / organization, mod, i2 / international)
(o3 / organization, name, o / organization)
(p / person, name, n2 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, w2 / watch-01)
(w / will-02, ARG0, a / and)
(w / will-02, ARG1, c2 / conduct-01)
(w2 / watch-01, ARG0, c5 / community)
(w2 / watch-01, ARG1, o3 / organization)
(w2 / watch-01, manner, c4 / close)

Decoded in 648,979 microseconds
Sentence: Tang stated that the SCO should further enhance the exchange and cooperation with other parties through wider visibility and a more positive post, which may not only strengthen SCO's international influence but also reflect SCO's principles of no-alignment, not-against-a-third-party and opening-up.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 42-43:  alignment => align-01
Span 34-35:  also => also
Span 53-54:  and => and
Span 18-19:  and => and
Span 10-11:  and => and
Span 33-34:  but => contrast-01
Span 11-12:  cooperation => cooperate-01
Span 7-8:  enhance => enhance-01
Span 9-10:  exchange => exchange-01
Span 6-7:  further => further
Span 32-33:  influence => influence-01
Span 31-32:  international => international
Span 25-26:  may => possible
Span 20-21:  more => more
Span 40-41:  no => -
Span 27-28:  only => only
Span 54-55:  opening => open-01
Span 13-14:  other => other
Span 14-15:  parties => party
Span 52-53:  party => party
Span 21-22:  positive => positive
Span 22-23:  post => post
Span 38-39:  principles => principle
Span 35-36:  reflect => reflect-01
Span 36-37:  SCO => (organization :name (name :op "SCO"))
Span 29-30:  SCO => (organization :name (name :op "SCO"))
Span 4-5:  SCO => (organization :name (name :op "SCO"))
Span 5-6:  should => recommend-01
Span 1-2:  stated => state-01
Span 28-29:  strengthen => strengthen-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 15-16:  through => through
Span 17-18:  visibility => visibility
Span 16-17:  wider => wide

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(54,55,List(0),opening,open-01,false), Span(53,54,List(1),and,and,false), Span(52,53,List(2),party,party,false), Span(42,43,List(3),alignment,align-01,false), Span(40,41,List(4),no,-,false), Span(38,39,List(5),principles,principle,false), Span(36,37,List(8, 7, 6),SCO,(organization :name (name :op "SCO")),false), Span(35,36,List(9),reflect,reflect-01,false), Span(34,35,List(10),also,also,false), Span(33,34,List(11),but,contrast-01,false), Span(32,33,List(12),influence,influence-01,false), Span(31,32,List(13),international,international,false), Span(29,30,List(16, 15, 14),SCO,(organization :name (name :op "SCO")),false), Span(28,29,List(17),strengthen,strengthen-01,false), Span(27,28,List(18),only,only,false), Span(25,26,List(19),may,possible,false), Span(22,23,List(20),post,post,false), Span(21,22,List(21),positive,positive,false), Span(20,21,List(22),more,more,false), Span(18,19,List(23),and,and,false), Span(17,18,List(24),visibility,visibility,false), Span(16,17,List(25),wider,wide,false), Span(15,16,List(26),through,through,false), Span(14,15,List(27),parties,party,false), Span(13,14,List(28),other,other,false), Span(11,12,List(29),cooperation,cooperate-01,false), Span(10,11,List(30),and,and,false), Span(9,10,List(31),exchange,exchange-01,false), Span(7,8,List(32),enhance,enhance-01,false), Span(6,7,List(33),further,further,false), Span(5,6,List(34),should,recommend-01,false), Span(4,5,List(37, 36, 35),SCO,(organization :name (name :op "SCO")),false), Span(1,2,List(38),stated,state-01,false), Span(0,1,List(41, 40, 39),Tang,(person :name (name :op "Tang")),false)),Map(39 -> person, 30 -> and, 2 -> party, 5 -> principle, 33 -> further, 27 -> party, 12 -> influence-01, 8 -> "SCO", 15 -> name, 36 -> name, 21 -> positive, 18 -> only, 24 -> visibility, 41 -> "Tang", 35 -> organization, 7 -> name, 1 -> and, 17 -> strengthen-01, 23 -> and, 38 -> state-01, 26 -> through, 4 -> -, 11 -> contrast-01, 32 -> enhance-01, 14 -> organization, 29 -> cooperate-01, 20 -> post, 34 -> recommend-01, 28 -> other, 6 -> organization, 40 -> name, 9 -> reflect-01, 0 -> open-01, 22 -> more, 16 -> "SCO", 37 -> "SCO", 19 -> possible, 10 -> also, 3 -> align-01, 31 -> exchange-01, 25 -> wide, 13 -> international),Map(e -> exchange-01, n -> name, w -> wide, s2 -> state-01, p5 -> positive, t -> through, o3 -> organization, o6 -> organization, e2 -> enhance-01, p2 -> principle, n4 -> name, a3 -> also, s -> strengthen-01, v -> visibility, m -> more, r2 -> recommend-01, o5 -> other, p -> party, n3 -> name, a -> and, p4 -> post, a5 -> and, o2 -> organization, p7 -> person, i2 -> international, i -> influence-01, r -> reflect-01, a2 -> align-01, - -> -, c -> contrast-01, p6 -> party, f -> further, o -> open-01, o4 -> only, p3 -> possible, c2 -> cooperate-01, n2 -> name, a4 -> and))),[Ljava.lang.String;@42c28305,Annotation([Ljava.lang.String;@2184b4f4,[Ljava.lang.String;@7d199c68,[Ljava.lang.String;@63411512),Annotation([Ljava.lang.String;@35cd68d4,[Ljava.lang.String;@316a598d,[Ledu.cmu.lti.nlp.amr.Dependency;@216914),Annotation([Ljava.lang.String;@6ba30587,[Ljava.lang.String;@35764bef,[Ljava.lang.String;@5633dafd),Annotation([Ljava.lang.String;@5d5160e6,[Ljava.lang.String;@2eadc9f6,[Ledu.cmu.lti.nlp.amr.Entity;@2903c6ff))
AMR:
(a / and, op, - / -)
(a2 / align-01, ARG1, o6 / organization)
(a4 / and, op, p4 / post)
(a5 / and, op, p2 / principle)
(c / contrast-01, ARG1, e2 / enhance-01)
(c2 / cooperate-01, ARG0, o6 / organization)
(c2 / cooperate-01, ARG1, p / party)
(e / exchange-01, ARG0, o6 / organization)
(e / exchange-01, ARG1, p6 / party)
(e2 / enhance-01, ARG0, o6 / organization)
(e2 / enhance-01, ARG1, a / and)
(e2 / enhance-01, instrument, a4 / and)
(e2 / enhance-01, mod, f / further)
(i / influence-01, ARG1, o3 / organization)
(i / influence-01, mod, i2 / international)
(n / name, op, "SCO")
(n2 / name, op, "SCO")
(n3 / name, op, "SCO")
(n4 / name, op, "Tang")
(o / open-01, ARG1, o6 / organization)
(o2 / organization, name, n / name)
(o3 / organization, name, n2 / name)
(o6 / organization, name, n3 / name)
(p / party, mod, o5 / other)
(p2 / principle, poss, o2 / organization)
(p4 / post, mod, p5 / positive)
(p5 / positive, degree, m / more)
(p7 / person, name, n4 / name)
(r / reflect-01, ARG1, a5 / and)
(r / reflect-01, ARG2, e2 / enhance-01)
(r / reflect-01, mod, a3 / also)
(r / reflect-01, mod, p3 / possible)
(r2 / recommend-01, ARG0, p7 / person)
(r2 / recommend-01, ARG1, e2 / enhance-01)
(s / strengthen-01, ARG0, e2 / enhance-01)
(s / strengthen-01, ARG1, i / influence-01)
(s / strengthen-01, mod, o4 / only)
(s2 / state-01, ARG0, p7 / person)
(s2 / state-01, ARG1, r2 / recommend-01)
(t / through, op, p7 / person)
(t / through, op, v / visibility)
(v / visibility, manner, w / wide)

Decoded in 3,333,957 microseconds
Sentence: Tang stated that the SCO will pass a temporary pact on SCO's foreign policies at the meeting on 23 November 2002.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
mkDayMonthYear(23	November	2002,23,November,2002)
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 19-22:  23 November 2002 => (date-entity :year 2002 :month 11 :day 23)
Span 13-14:  foreign => foreign
Span 17-18:  meeting => meet-03
Span 9-10:  pact => pact
Span 6-7:  pass => pass-03
Span 14-15:  policies => policy
Span 11-12:  SCO => (organization :name (name :op "SCO"))
Span 4-5:  SCO => (organization :name (name :op "SCO"))
Span 1-2:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 8-9:  temporary => temporary

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,22,List(3, 2, 1, 0),23 November 2002,(date-entity :year 2002 :month 11 :day 23),false), Span(17,18,List(4),meeting,meet-03,false), Span(14,15,List(5),policies,policy,false), Span(13,14,List(6),foreign,foreign,false), Span(11,12,List(9, 8, 7),SCO,(organization :name (name :op "SCO")),false), Span(9,10,List(10),pact,pact,false), Span(8,9,List(11),temporary,temporary,false), Span(6,7,List(12),pass,pass-03,false), Span(4,5,List(15, 14, 13),SCO,(organization :name (name :op "SCO")),false), Span(1,2,List(16),stated,state-01,false), Span(0,1,List(19, 18, 17),Tang,(person :name (name :op "Tang")),false)),Map(2 -> 11, 5 -> policy, 12 -> pass-03, 15 -> "SCO", 8 -> name, 18 -> name, 7 -> organization, 17 -> person, 1 -> 2002, 4 -> meet-03, 11 -> temporary, 14 -> name, 6 -> foreign, 0 -> date-entity, 9 -> "SCO", 16 -> state-01, 19 -> "Tang", 3 -> 23, 10 -> pact, 13 -> organization),Map(n -> name, 2 -> 2002, t -> temporary, p2 -> pact, s -> state-01, d -> date-entity, m -> meet-03, 1 -> 11, p -> policy, n3 -> name, p4 -> person, o2 -> organization, 22 -> 23, f -> foreign, o -> organization, p3 -> pass-03, n2 -> name))),[Ljava.lang.String;@61af1510,Annotation([Ljava.lang.String;@37af1f93,[Ljava.lang.String;@778d82e9,[Ljava.lang.String;@408e96d9),Annotation([Ljava.lang.String;@59901c4d,[Ljava.lang.String;@168cd36b,[Ledu.cmu.lti.nlp.amr.Dependency;@d8d9199),Annotation([Ljava.lang.String;@3901f6af,[Ljava.lang.String;@602ae7b6,[Ljava.lang.String;@10cd6753),Annotation([Ljava.lang.String;@71ad3d8a,[Ljava.lang.String;@47af099e,[Ledu.cmu.lti.nlp.amr.Entity;@700f518a))
AMR:
(d / date-entity, day, 22 / 23)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2002)
(m / meet-03, ARG0, o / organization)
(m / meet-03, time, d / date-entity)
(n / name, op, "SCO")
(n2 / name, op, "SCO")
(n3 / name, op, "Tang")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(p / policy, mod, f / foreign)
(p / policy, poss, o2 / organization)
(p2 / pact, mod, t / temporary)
(p3 / pass-03, ARG0, o2 / organization)
(p3 / pass-03, ARG1, p2 / pact)
(p3 / pass-03, time, m / meet-03)
(p4 / person, name, n3 / name)
(s / state-01, ARG0, p4 / person)
(s / state-01, ARG1, p3 / pass-03)

Decoded in 451,257 microseconds
Sentence: Tang stated that the pact will officially start the SCO's exchange activities with other organizations and promote the Shanghai-spirit of mutual trust and benefit, equality, cooperation, multicultural respect and the search for common development.

NER Entity: (person :name (name :op "Tang"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "Shanghai" :op "-" :op "spirit" :op "of" :op "mutual"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (person :name (name :op "Tang"))
Spans:
Span 12-13:  activities => activity
Span 34-35:  and => and
Span 25-26:  and => and
Span 16-17:  and => and
Span 26-27:  benefit => benefit-01
Span 38-39:  common => common
Span 30-31:  cooperation => cooperate-01
Span 39-40:  development => develop-02
Span 28-29:  equality => equality
Span 11-12:  exchange => exchange-01
Span 32-33:  multicultural => multicultural
Span 23-24:  mutual => mutual
Span 6-7:  officially => official
Span 15-16:  organizations => organization
Span 14-15:  other => other
Span 4-5:  pact => pact
Span 17-18:  promote => promote-02
Span 33-34:  respect => respect-01
Span 9-10:  SCO => (organization :name (name :op "SCO"))
Span 36-37:  search => search-01
Span 19-22:  Shanghai - spirit => (organization :name (name :op "Shanghai" :op "-" :op "spirit" :op "of" :op "mutual"))
Span 7-8:  start => start-01
Span 1-2:  stated => state-01
Span 0-1:  Tang => (person :name (name :op "Tang"))
Span 24-25:  trust => trust-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),development,develop-02,false), Span(38,39,List(1),common,common,false), Span(36,37,List(2),search,search-01,false), Span(34,35,List(3),and,and,false), Span(33,34,List(4),respect,respect-01,false), Span(32,33,List(5),multicultural,multicultural,false), Span(30,31,List(6),cooperation,cooperate-01,false), Span(28,29,List(7),equality,equality,false), Span(26,27,List(8),benefit,benefit-01,false), Span(25,26,List(9),and,and,false), Span(24,25,List(10),trust,trust-01,false), Span(23,24,List(11),mutual,mutual,false), Span(19,22,List(18, 17, 16, 15, 14, 13, 12),Shanghai - spirit,(organization :name (name :op "Shanghai" :op "-" :op "spirit" :op "of" :op "mutual")),false), Span(17,18,List(19),promote,promote-02,false), Span(16,17,List(20),and,and,false), Span(15,16,List(21),organizations,organization,false), Span(14,15,List(22),other,other,false), Span(12,13,List(23),activities,activity,false), Span(11,12,List(24),exchange,exchange-01,false), Span(9,10,List(27, 26, 25),SCO,(organization :name (name :op "SCO")),false), Span(7,8,List(28),start,start-01,false), Span(6,7,List(29),officially,official,false), Span(4,5,List(30),pact,pact,false), Span(1,2,List(31),stated,state-01,false), Span(0,1,List(34, 33, 32),Tang,(person :name (name :op "Tang")),false)),Map(30 -> pact, 2 -> search-01, 5 -> multicultural, 33 -> name, 27 -> "SCO", 12 -> organization, 8 -> benefit-01, 15 -> "-", 21 -> organization, 18 -> "mutual", 24 -> exchange-01, 7 -> equality, 1 -> common, 17 -> "of", 23 -> activity, 26 -> name, 4 -> respect-01, 11 -> mutual, 32 -> person, 14 -> "Shanghai", 29 -> official, 20 -> and, 34 -> "Tang", 28 -> start-01, 6 -> cooperate-01, 9 -> and, 0 -> develop-02, 22 -> other, 16 -> "spirit", 19 -> promote-02, 10 -> trust-01, 3 -> and, 31 -> state-01, 25 -> organization, 13 -> name),Map(e -> equality, n -> name, s2 -> start-01, t -> trust-01, b -> benefit-01, m2 -> mutual, o3 -> other, e2 -> exchange-01, p2 -> pact, a3 -> and, s -> search-01, m -> multicultural, d -> develop-02, o5 -> official, p -> promote-02, n3 -> name, a -> and, o2 -> organization, a2 -> and, r -> respect-01, c -> common, s3 -> state-01, o -> organization, o4 -> organization, p3 -> person, c2 -> cooperate-01, n2 -> name, a4 -> activity))),[Ljava.lang.String;@b835727,Annotation([Ljava.lang.String;@13da7ab0,[Ljava.lang.String;@2c8662ac,[Ljava.lang.String;@260ff5b7),Annotation([Ljava.lang.String;@3724b43e,[Ljava.lang.String;@77eb5790,[Ledu.cmu.lti.nlp.amr.Dependency;@68e7c8c3),Annotation([Ljava.lang.String;@319c3a25,[Ljava.lang.String;@238bfd6c,[Ljava.lang.String;@ef1695a),Annotation([Ljava.lang.String;@58860997,[Ljava.lang.String;@81b5db0,[Ledu.cmu.lti.nlp.amr.Entity;@7487b142))
AMR:
(a / and, op, c2 / cooperate-01)
(a2 / and, op, r / respect-01)
(a3 / and, op, p / promote-02)
(a3 / and, op, s2 / start-01)
(a4 / activity, mod, e2 / exchange-01)
(b / benefit-01, mod, m2 / mutual)
(d / develop-02, ARG1, c / common)
(e2 / exchange-01, ARG0, o4 / organization)
(e2 / exchange-01, ARG2, o2 / organization)
(n / name, op, "-")
(n / name, op, "Shanghai")
(n / name, op, "mutual")
(n / name, op, "of")
(n / name, op, "spirit")
(n2 / name, op, "SCO")
(n3 / name, op, "Tang")
(o / organization, mod, c2 / cooperate-01)
(o / organization, mod, e / equality)
(o / organization, mod, r / respect-01)
(o / organization, mod, s / search-01)
(o / organization, mod, t / trust-01)
(o / organization, name, n / name)
(o2 / organization, mod, o3 / other)
(o4 / organization, name, n2 / name)
(p / promote-02, ARG0, p2 / pact)
(p / promote-02, ARG1, o / organization)
(p3 / person, name, n3 / name)
(r / respect-01, ARG1, m / multicultural)
(s / search-01, ARG1, d / develop-02)
(s2 / start-01, ARG0, p2 / pact)
(s2 / start-01, ARG1, a4 / activity)
(s2 / start-01, mod, o5 / official)
(s3 / state-01, ARG0, p3 / person)
(s3 / state-01, ARG1, a3 / and)
(t / trust-01, mod, m2 / mutual)

Decoded in 1,264,059 microseconds
Sentence: 2002-12-28

mkDayMonthYear(2002-12-28,28,12,2002)
mkDayMonthYear(2002-12-28,28,12,2002)
Spans:
Span 0-1:  2002-12-28 => (date-entity :day 28 :month 12 :year 2002)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2002-12-28,(date-entity :day 28 :month 12 :year 2002),false)),Map(2 -> 12, 1 -> 28, 0 -> date-entity, 3 -> 2002),Map(2 -> 28, d -> date-entity, 1 -> 12, 22 -> 2002))),[Ljava.lang.String;@7139bd31,Annotation([Ljava.lang.String;@199bc830,[Ljava.lang.String;@4b3fe06e,[Ljava.lang.String;@27b45ea),Annotation([Ljava.lang.String;@3e17a0a1,[Ljava.lang.String;@790a251b,[Ledu.cmu.lti.nlp.amr.Dependency;@4d8286c4),Annotation([Ljava.lang.String;@150ede8b,[Ljava.lang.String;@161f6623,[Ljava.lang.String;@3e15bb06),Annotation([Ljava.lang.String;@6778aea6,[Ljava.lang.String;@4e1ce44,[Ledu.cmu.lti.nlp.amr.Entity;@69228e85))
AMR:
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 22 / 2002)

Decoded in 7,027 microseconds
Sentence: Iraq (IQ)

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 0-1:  Iraq => (country :name (name :op "Iraq"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Iraq,(country :name (name :op "Iraq")),false)),Map(2 -> "Iraq", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@7a7cc52c,Annotation([Ljava.lang.String;@5853495b,[Ljava.lang.String;@524a2ffb,[Ljava.lang.String;@2f61d591),Annotation([Ljava.lang.String;@332820f4,[Ljava.lang.String;@7173ae5b,[Ledu.cmu.lti.nlp.amr.Dependency;@72456279),Annotation([Ljava.lang.String;@53a9fcfd,[Ljava.lang.String;@21f459fc,[Ljava.lang.String;@4d192aef),Annotation([Ljava.lang.String;@1416cf9f,[Ljava.lang.String;@84487f4,[Ledu.cmu.lti.nlp.amr.Entity;@bfc14b9))
AMR:
(c / country, name, n / name)
(n / name, op, "Iraq")

Decoded in 4,290 microseconds
Sentence: International; proliferation; weapons

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 0-1:  International => international
Span 2-3:  proliferation => proliferate-01
Span 4-5:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),weapons,weapon,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),proliferation,proliferate-01,false), Span(1,2,List(3),;,and,false), Span(0,1,List(4),International,international,false)),Map(2 -> proliferate-01, 1 -> and, 4 -> international, 0 -> weapon, 3 -> and),Map(w -> weapon, p -> proliferate-01, a -> and, i -> international, a2 -> and))),[Ljava.lang.String;@fb6097b,Annotation([Ljava.lang.String;@2dfe5525,[Ljava.lang.String;@1290c49,[Ljava.lang.String;@6a9b9909),Annotation([Ljava.lang.String;@55d9b8f0,[Ljava.lang.String;@a518813,[Ledu.cmu.lti.nlp.amr.Dependency;@43d38654),Annotation([Ljava.lang.String;@75361cf6,[Ljava.lang.String;@6d303498,[Ljava.lang.String;@6ba7383d),Annotation([Ljava.lang.String;@3419e23b,[Ljava.lang.String;@710d89e2,[Ledu.cmu.lti.nlp.amr.Entity;@1d75e7af))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, i / international)
(a2 / and, op, p / proliferate-01)
(a2 / and, op, w / weapon)

Decoded in 12,641 microseconds
Sentence: On December 28, 2002 United Nations inspectors searched 7 Iraqi sites for banned weapons.

mkDayMonthYear(December	28	,	2002,28,December,2002)
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (thing :name (name :op "Iraqi"))
NER Entity: (thing :name (name :op "Iraqi"))
Spans:
Span 9-10:  7 => 7
Span 13-14:  banned => ban-01
Span 1-5:  December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Span 7-8:  inspectors => (person :ARG0-of inspect-01)
Span 10-11:  Iraqi => (country :name (name :op "Iraq"))
Span 8-9:  searched => search-01
Span 11-12:  sites => site
Span 5-7:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 14-15:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),weapons,weapon,false), Span(13,14,List(1),banned,ban-01,false), Span(11,12,List(2),sites,site,false), Span(10,11,List(5, 4, 3),Iraqi,(country :name (name :op "Iraq")),false), Span(9,10,List(6),7,7,false), Span(8,9,List(7),searched,search-01,false), Span(7,8,List(9, 8),inspectors,(person :ARG0-of inspect-01),false), Span(5,7,List(13, 12, 11, 10),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(1,5,List(17, 16, 15, 14),December 28 , 2002,(date-entity :day 28 :month 12 :year 2002),false)),Map(2 -> site, 5 -> "Iraq", 12 -> "United", 15 -> 28, 8 -> person, 7 -> search-01, 17 -> 2002, 1 -> ban-01, 4 -> name, 11 -> name, 14 -> date-entity, 6 -> 7, 0 -> weapon, 9 -> inspect-01, 16 -> 12, 3 -> country, 10 -> organization, 13 -> "Nations"),Map(w -> weapon, n -> name, 2 -> 28, s2 -> search-01, b -> ban-01, s -> site, 7 -> 7, d -> date-entity, 1 -> 12, p -> person, i -> inspect-01, c -> country, 22 -> 2002, o -> organization, n2 -> name))),[Ljava.lang.String;@4fc142ec,Annotation([Ljava.lang.String;@34b27915,[Ljava.lang.String;@29eda4f8,[Ljava.lang.String;@1b9776f5),Annotation([Ljava.lang.String;@5e048149,[Ljava.lang.String;@79d9214d,[Ledu.cmu.lti.nlp.amr.Dependency;@3d5790ea),Annotation([Ljava.lang.String;@1dd7796b,[Ljava.lang.String;@67a3bd51,[Ljava.lang.String;@57402ba1),Annotation([Ljava.lang.String;@56913163,[Ljava.lang.String;@702b06fb,[Ledu.cmu.lti.nlp.amr.Entity;@a18649a))
AMR:
(b / ban-01, ARG1, w / weapon)
(c / country, name, n / name)
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 22 / 2002)
(i / inspect-01, ARG0, p / person)
(i / inspect-01, ARG1, o / organization)
(n / name, op, "Iraq")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(o / organization, name, n2 / name)
(s / site, mod, c / country)
(s / site, quant, 7 / 7)
(s2 / search-01, ARG0, p / person)
(s2 / search-01, ARG1, s / site)
(s2 / search-01, ARG2, w / weapon)
(s2 / search-01, time, d / date-entity)

Decoded in 104,335 microseconds
Sentence: United Nations arms inspectors on December 28, 2002 visited 7 sites in Iraq in order to search for prohibited weapons of mass destruction according to spokesman Hiro Ueki.

NER Entity: (organization :name (name :op "United" :op "Nations"))
mkDayMonthYear(December	28	,	2002,28,December,2002)
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (person :name (name :op "Hiro" :op "Ueki"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 10-11:  7 => 7
Span 2-3:  arms => arm
Span 5-9:  December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Span 23-24:  destruction => destroy-01
Span 27-29:  Hiro Ueki => (person :name (name :op "Ueki" :op "Hiro"))
Span 3-4:  inspectors => (person :ARG0-of inspect-01)
Span 13-14:  Iraq => (country :name (name :op "Iraq"))
Span 22-23:  mass => mass
Span 19-20:  prohibited => prohibit-01
Span 17-18:  search => search-01
Span 11-12:  sites => site
Span 26-27:  spokesman => (have-org-role-91 :ARG2 spokesman)
Span 0-2:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 9-10:  visited => visit-01
Span 20-21:  weapons => weapon

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,29,List(3, 2, 1, 0),Hiro Ueki,(person :name (name :op "Ueki" :op "Hiro")),false), Span(26,27,List(5, 4),spokesman,(have-org-role-91 :ARG2 spokesman),false), Span(23,24,List(6),destruction,destroy-01,false), Span(22,23,List(7),mass,mass,false), Span(20,21,List(8),weapons,weapon,false), Span(19,20,List(9),prohibited,prohibit-01,false), Span(17,18,List(10),search,search-01,false), Span(13,14,List(13, 12, 11),Iraq,(country :name (name :op "Iraq")),false), Span(11,12,List(14),sites,site,false), Span(10,11,List(15),7,7,false), Span(9,10,List(16),visited,visit-01,false), Span(5,9,List(20, 19, 18, 17),December 28 , 2002,(date-entity :day 28 :month 12 :year 2002),false), Span(3,4,List(22, 21),inspectors,(person :ARG0-of inspect-01),false), Span(2,3,List(23),arms,arm,false), Span(0,2,List(27, 26, 25, 24),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> "Ueki", 5 -> spokesman, 27 -> "Nations", 12 -> name, 8 -> weapon, 15 -> 7, 21 -> person, 18 -> 28, 24 -> organization, 7 -> mass, 1 -> name, 17 -> date-entity, 23 -> arm, 26 -> "United", 4 -> have-org-role-91, 11 -> country, 14 -> site, 20 -> 2002, 6 -> destroy-01, 9 -> prohibit-01, 0 -> person, 22 -> inspect-01, 16 -> visit-01, 19 -> 12, 10 -> search-01, 3 -> "Hiro", 25 -> name, 13 -> "Iraq"),Map(n -> name, w -> weapon, h -> have-org-role-91, 2 -> 28, s2 -> search-01, p2 -> prohibit-01, s -> spokesman, v -> visit-01, d -> destroy-01, m -> mass, 7 -> 7, 1 -> 12, p -> person, n3 -> name, a -> arm, d2 -> date-entity, i -> inspect-01, c -> country, s3 -> site, 22 -> 2002, o -> organization, p3 -> person, n2 -> name))),[Ljava.lang.String;@5c534b5b,Annotation([Ljava.lang.String;@396639b,[Ljava.lang.String;@2b22a1cc,[Ljava.lang.String;@62573c86),Annotation([Ljava.lang.String;@2418ba04,[Ljava.lang.String;@14229fa7,[Ledu.cmu.lti.nlp.amr.Dependency;@2ab0702e),Annotation([Ljava.lang.String;@7158daf2,[Ljava.lang.String;@10f19647,[Ljava.lang.String;@102efc59),Annotation([Ljava.lang.String;@3936df72,[Ljava.lang.String;@e8e0dec,[Ledu.cmu.lti.nlp.amr.Entity;@12d1f1d4))
AMR:
(c / country, name, n2 / name)
(d / destroy-01, ARG2, w / weapon)
(d / destroy-01, degree, m / mass)
(d2 / date-entity, day, 2 / 28)
(d2 / date-entity, month, 1 / 12)
(d2 / date-entity, year, 22 / 2002)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, s / spokesman)
(i / inspect-01, ARG0, p3 / person)
(i / inspect-01, ARG1, a / arm)
(n / name, op, "Hiro")
(n / name, op, "Ueki")
(n2 / name, op, "Iraq")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(o / organization, name, n3 / name)
(p / person, name, n / name)
(p2 / prohibit-01, ARG1, w / weapon)
(p3 / person, poss, o / organization)
(s2 / search-01, ARG2, w / weapon)
(s3 / site, location, c / country)
(s3 / site, quant, 7 / 7)
(v / visit-01, ARG0, p3 / person)
(v / visit-01, ARG1, s3 / site)
(v / visit-01, purpose, s2 / search-01)
(v / visit-01, time, d2 / date-entity)

Decoded in 915,620 microseconds
Sentence: A team of biological experts from the United Nations Monitoring, Verification and Inspection Commission visited the Yaffa juice plant of the National Food Industries Co. in Baghdad's zafaraniyah industrial area.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "Inspection" :op "Commission"))
NER Entity: (thing :name (name :op "Yaffa"))
NER Entity: (organization :name (name :op "National" :op "Food" :op "Industries" :op "Co."))
NER Entity: (country :name (name :op "Baghdad"))
NER Entity: (country :name (name :op "Baghdad"))
NER Entity: (thing :name (name :op "Yaffa"))
Spans:
Span 12-13:  and => and
Span 31-32:  area => area
Span 27-28:  Baghdad => (city :name (name :op "Baghdad"))
Span 3-4:  biological => biology
Span 4-5:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 13-15:  Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Span 18-19:  juice => juice
Span 22-26:  National Food Industries Co. => (organization :name (name :op "National" :op "Food" :op "Industries" :op "Co."))
Span 19-20:  plant => plant
Span 1-2:  team => team
Span 7-9:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 15-16:  visited => visit-01
Span 17-18:  Yaffa => (name :op "Yaffa")
Span 29-30:  zafaraniyah => (city-district :name (name :op "Zafaraniyah"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),area,area,false), Span(29,30,List(3, 2, 1),zafaraniyah,(city-district :name (name :op "Zafaraniyah")),false), Span(27,28,List(6, 5, 4),Baghdad,(city :name (name :op "Baghdad")),false), Span(22,26,List(12, 11, 10, 9, 8, 7),National Food Industries Co.,(organization :name (name :op "National" :op "Food" :op "Industries" :op "Co.")),false), Span(19,20,List(13),plant,plant,false), Span(18,19,List(14),juice,juice,false), Span(17,18,List(16, 15),Yaffa,(name :op "Yaffa"),false), Span(15,16,List(17),visited,visit-01,false), Span(13,15,List(21, 20, 19, 18),Inspection Commission,(organization :name (name :op "Inspection" :op "Commission")),false), Span(12,13,List(22),and,and,false), Span(7,9,List(26, 25, 24, 23),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(4,5,List(29, 28, 27),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(3,4,List(30),biological,biology,false), Span(1,2,List(31),team,team,false)),Map(30 -> biology, 2 -> name, 5 -> name, 27 -> have-org-role-91, 12 -> "Co.", 8 -> name, 15 -> name, 21 -> "Commission", 18 -> organization, 24 -> name, 7 -> organization, 1 -> city-district, 17 -> visit-01, 23 -> organization, 26 -> "Nations", 4 -> city, 11 -> "Industries", 14 -> juice, 29 -> expert-41, 20 -> "Inspection", 28 -> person, 6 -> "Baghdad", 9 -> "National", 0 -> area, 22 -> and, 16 -> "Yaffa", 19 -> name, 10 -> "Food", 3 -> "Zafaraniyah", 31 -> team, 25 -> "United", 13 -> plant),Map(e -> expert-41, n -> name, h -> have-org-role-91, t -> team, b -> biology, o3 -> organization, p2 -> person, j -> juice, n4 -> name, v -> visit-01, p -> plant, a -> area, n3 -> name, n6 -> name, o2 -> organization, a2 -> and, c -> city-district, o -> organization, c2 -> city, n2 -> name, n5 -> name))),[Ljava.lang.String;@75fa1be3,Annotation([Ljava.lang.String;@7a389761,[Ljava.lang.String;@42714a7,[Ljava.lang.String;@19650aa6),Annotation([Ljava.lang.String;@3ce53f6a,[Ljava.lang.String;@2d82408,[Ledu.cmu.lti.nlp.amr.Dependency;@3ee69ad8),Annotation([Ljava.lang.String;@f679798,[Ljava.lang.String;@1a6cf771,[Ljava.lang.String;@59d77850),Annotation([Ljava.lang.String;@53ed09e8,[Ljava.lang.String;@60859f5a,[Ledu.cmu.lti.nlp.amr.Entity;@1daf3b44))
AMR:
(a2 / and, op, o2 / organization)
(a2 / and, op, o3 / organization)
(a2 / and, op, v / visit-01)
(c / city-district, location, c2 / city)
(c / city-district, mod, a / area)
(c / city-district, name, n / name)
(c2 / city, name, n2 / name)
(e / expert-41, ARG1, p2 / person)
(e / expert-41, ARG2, b / biology)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p2 / person)
(j / juice, name, n4 / name)
(j / juice, poss, o / organization)
(n / name, op, "Zafaraniyah")
(n2 / name, op, "Baghdad")
(n3 / name, op, "Co.")
(n3 / name, op, "Food")
(n3 / name, op, "Industries")
(n3 / name, op, "National")
(n4 / name, op, "Yaffa")
(n5 / name, op, "Commission")
(n5 / name, op, "Inspection")
(n6 / name, op, "Nations")
(n6 / name, op, "United")
(o / organization, location, c2 / city)
(o / organization, name, n3 / name)
(o2 / organization, name, n5 / name)
(o3 / organization, name, n6 / name)
(p / plant, mod, j / juice)
(v / visit-01, ARG0, t / team)
(v / visit-01, ARG1, p / plant)

Decoded in 662,481 microseconds
Sentence: The Yaffa juice plant is self-financed, has a mixed ownership and is a previously declared and monitored site due to the presence of some dual-use equipment.

NER Entity: (thing :name (name :op "Yaffa"))
NER Entity: (thing :name (name :op "Yaffa"))
Spans:
Span 18-19:  and => and
Span 13-14:  and => and
Span 17-18:  declared => declare-02
Span 27-28:  dual => dual
Span 30-31:  equipment => equipment
Span 7-8:  financed => (thing :manner-of finance-01)
Span 2-3:  juice => juice
Span 11-12:  mixed => mix-01
Span 19-20:  monitored => monitor-01
Span 3-4:  plant => plant
Span 24-25:  presence => present
Span 16-17:  previously => previous
Span 5-6:  self => self
Span 20-21:  site => site
Span 26-27:  some => some
Span 29-30:  use => use-01
Span 1-2:  Yaffa => (name :op "Yaffa")

Langrangian relaxation converged after 70 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),equipment,equipment,false), Span(29,30,List(1),use,use-01,false), Span(27,28,List(2),dual,dual,false), Span(26,27,List(3),some,some,false), Span(24,25,List(4),presence,present,false), Span(20,21,List(5),site,site,false), Span(19,20,List(6),monitored,monitor-01,false), Span(18,19,List(7),and,and,false), Span(17,18,List(8),declared,declare-02,false), Span(16,17,List(9),previously,previous,false), Span(13,14,List(10),and,and,false), Span(11,12,List(11),mixed,mix-01,false), Span(7,8,List(13, 12),financed,(thing :manner-of finance-01),false), Span(5,6,List(14),self,self,false), Span(3,4,List(15),plant,plant,false), Span(2,3,List(16),juice,juice,false), Span(1,2,List(18, 17),Yaffa,(name :op "Yaffa"),false)),Map(2 -> dual, 5 -> site, 12 -> thing, 15 -> plant, 8 -> declare-02, 18 -> "Yaffa", 7 -> and, 17 -> name, 1 -> use-01, 4 -> present, 11 -> mix-01, 14 -> self, 6 -> monitor-01, 0 -> equipment, 9 -> previous, 16 -> juice, 3 -> some, 10 -> and, 13 -> finance-01),Map(e -> equipment, n -> name, s2 -> site, t -> thing, m2 -> mix-01, p2 -> previous, j -> juice, s -> some, d -> dual, m -> monitor-01, p -> present, a -> and, d2 -> declare-02, a2 -> and, s3 -> self, u -> use-01, f -> finance-01, p3 -> plant))),[Ljava.lang.String;@7fd8c559,Annotation([Ljava.lang.String;@44c13103,[Ljava.lang.String;@8f2098e,[Ljava.lang.String;@6c6366cf),Annotation([Ljava.lang.String;@55a88417,[Ljava.lang.String;@18acfe88,[Ledu.cmu.lti.nlp.amr.Dependency;@8a2a6a),Annotation([Ljava.lang.String;@772861aa,[Ljava.lang.String;@6631cb64,[Ljava.lang.String;@19962194),Annotation([Ljava.lang.String;@481e91b6,[Ljava.lang.String;@7c8f9c2e,[Ledu.cmu.lti.nlp.amr.Entity;@140d1230))
AMR:
(a / and, op, e / equipment)
(a / and, op, m / monitor-01)
(a2 / and, op, s2 / site)
(a2 / and, op, s3 / self)
(d2 / declare-02, ARG1, s2 / site)
(e / equipment, mod, s / some)
(f / finance-01, ARG1, p3 / plant)
(f / finance-01, manner, t / thing)
(j / juice, name, n / name)
(m / monitor-01, ARG1, s2 / site)
(m / monitor-01, time, p2 / previous)
(m2 / mix-01, ARG1, s2 / site)
(n / name, op, "Yaffa")
(p / present, poss, e / equipment)
(p3 / plant, mod, j / juice)
(s2 / site, domain, p3 / plant)
(u / use-01, ARG1, e / equipment)
(u / use-01, ARG2, d / dual)

Decoded in 1,598,675 microseconds
Sentence: A biological team returned to the Al Kindi veterinary vaccines site as a follow-up to the previous inspection carried out on December 22, 2002.

NER Entity: (person :name (name :op "Al" :op "Kindi"))
mkDayMonthYear(December	22	,	2002,22,December,2002)
Spans:
Span 6-8:  Al Kindi => (person :name (name :op "Al" :op "Kindi"))
Span 1-2:  biological => biology
Span 20-21:  carried => carry-03
Span 23-27:  December 22 , 2002 => (date-entity :day 22 :month 12 :year 2002)
Span 13-14:  follow => follow-03
Span 19-20:  inspection => inspect-01
Span 21-22:  out => out
Span 18-19:  previous => previous
Span 3-4:  returned => return-01
Span 10-11:  site => site
Span 2-3:  team => team
Span 9-10:  vaccines => vaccine
Span 8-9:  veterinary => veterinary

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,27,List(3, 2, 1, 0),December 22 , 2002,(date-entity :day 22 :month 12 :year 2002),false), Span(21,22,List(4),out,out,false), Span(20,21,List(5),carried,carry-03,false), Span(19,20,List(6),inspection,inspect-01,false), Span(18,19,List(7),previous,previous,false), Span(13,14,List(8),follow,follow-03,false), Span(10,11,List(9),site,site,false), Span(9,10,List(10),vaccines,vaccine,false), Span(8,9,List(11),veterinary,veterinary,false), Span(6,8,List(15, 14, 13, 12),Al Kindi,(person :name (name :op "Al" :op "Kindi")),false), Span(3,4,List(16),returned,return-01,false), Span(2,3,List(17),team,team,false), Span(1,2,List(18),biological,biology,false)),Map(2 -> 12, 5 -> carry-03, 12 -> person, 15 -> "Kindi", 8 -> follow-03, 18 -> biology, 7 -> previous, 17 -> team, 1 -> 22, 4 -> out, 11 -> veterinary, 14 -> "Al", 6 -> inspect-01, 0 -> date-entity, 9 -> site, 16 -> return-01, 3 -> 2002, 10 -> vaccine, 13 -> name),Map(n -> name, v2 -> veterinary, 2 -> 22, b -> biology, t -> team, p2 -> person, s -> site, v -> vaccine, d -> date-entity, 1 -> 12, p -> previous, r -> return-01, i -> inspect-01, c -> carry-03, 22 -> 2002, f -> follow-03, o -> out))),[Ljava.lang.String;@3cbf1ba4,Annotation([Ljava.lang.String;@10bea4,[Ljava.lang.String;@7e2c64,[Ljava.lang.String;@7c1e32c9),Annotation([Ljava.lang.String;@383864d5,[Ljava.lang.String;@3dd818e8,[Ledu.cmu.lti.nlp.amr.Dependency;@4cb40e3b),Annotation([Ljava.lang.String;@41b1f51e,[Ljava.lang.String;@3a543f31,[Ljava.lang.String;@47b67fcb),Annotation([Ljava.lang.String;@2b9f74d0,[Ljava.lang.String;@65c86db8,[Ledu.cmu.lti.nlp.amr.Entity;@7efe7b87))
AMR:
(c / carry-03, ARG1, i / inspect-01)
(c / carry-03, ARG5, o / out)
(c / carry-03, time, d / date-entity)
(d / date-entity, day, 2 / 22)
(d / date-entity, month, 1 / 12)
(d / date-entity, year, 22 / 2002)
(f / follow-03, ARG0, r / return-01)
(f / follow-03, ARG1, i / inspect-01)
(i / inspect-01, ARG1, p / previous)
(n / name, op, "Al")
(n / name, op, "Kindi")
(p2 / person, name, n / name)
(r / return-01, ARG1, t / team)
(r / return-01, ARG3, s / site)
(s / site, location, p2 / person)
(s / site, mod, v / vaccine)
(t / team, mod, b / biology)
(v / vaccine, mod, v2 / veterinary)

Decoded in 340,004 microseconds
Sentence: Some United Nations Monitoring, Verification and Inspection Commission missile experts conducted an unannounced visit to the Al qaib warhead-filling factory in the Al Qa Qaa complex which undertakes filling of warheads of Al Samoud and Al Fatah missiles.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "Inspection" :op "Commission"))
NER Entity: (country :name (name :op "Al"))
NER Entity: (person :name (name :op "Al" :op "Qa"))
NER Entity: (person :name (name :op "Al" :op "Samoud"))
NER Entity: (person :name (name :op "Al" :op "Fatah"))
Spans:
Span 17-19:  Al qaib => (name :op "Qaib" :op "Al")
Span 6-7:  and => and
Span 28-29:  complex => complex
Span 11-12:  conducted => conduct-01
Span 10-11:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 22-23:  factory => factory
Span 31-32:  filling => fill-01
Span 21-22:  filling => fill-01
Span 23-25:  in the => (person :name (name :op "Al" :op "Qa"))
Span 7-9:  Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Span 9-10:  missile => missile
Span 40-41:  missiles => missile
Span 36-38:  Samoud and => (person :name (name :op "Al" :op "Fatah"))
Span 0-1:  Some => some
Span 13-14:  unannounced => (announce-01 :polarity -)
Span 30-31:  undertakes => undertake-01
Span 1-3:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 14-15:  visit => visit-01
Span 19-20:  warhead => warhead
Span 33-35:  warheads of => (person :name (name :op "Al" :op "Samoud"))

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),missiles,missile,false), Span(36,38,List(4, 3, 2, 1),Samoud and,(person :name (name :op "Al" :op "Fatah")),false), Span(33,35,List(8, 7, 6, 5),warheads of,(person :name (name :op "Al" :op "Samoud")),false), Span(31,32,List(9),filling,fill-01,false), Span(30,31,List(10),undertakes,undertake-01,false), Span(28,29,List(11),complex,complex,false), Span(23,25,List(15, 14, 13, 12),in the,(person :name (name :op "Al" :op "Qa")),false), Span(22,23,List(16),factory,factory,false), Span(21,22,List(17),filling,fill-01,false), Span(19,20,List(18),warhead,warhead,false), Span(17,19,List(21, 20, 19),Al qaib,(name :op "Qaib" :op "Al"),false), Span(14,15,List(22),visit,visit-01,false), Span(13,14,List(24, 23),unannounced,(announce-01 :polarity -),false), Span(11,12,List(25),conducted,conduct-01,false), Span(10,11,List(28, 27, 26),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(9,10,List(29),missile,missile,false), Span(7,9,List(33, 32, 31, 30),Inspection Commission,(organization :name (name :op "Inspection" :op "Commission")),false), Span(6,7,List(34),and,and,false), Span(1,3,List(38, 37, 36, 35),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(0,1,List(39),Some,some,false)),Map(39 -> some, 30 -> organization, 2 -> name, 5 -> person, 33 -> "Commission", 27 -> person, 12 -> person, 8 -> "Samoud", 15 -> "Qa", 36 -> name, 21 -> "Al", 18 -> warhead, 24 -> -, 35 -> organization, 7 -> "Al", 1 -> person, 17 -> fill-01, 23 -> announce-01, 38 -> "Nations", 26 -> have-org-role-91, 4 -> "Fatah", 11 -> complex, 32 -> "Inspection", 14 -> "Al", 29 -> missile, 20 -> "Qaib", 34 -> and, 28 -> expert-41, 6 -> name, 9 -> fill-01, 0 -> missile, 22 -> visit-01, 16 -> factory, 37 -> "United", 19 -> name, 10 -> undertake-01, 3 -> "Al", 31 -> name, 25 -> conduct-01, 13 -> name),Map(e -> expert-41, w -> warhead, n -> name, h -> have-org-role-91, m2 -> missile, p2 -> person, n4 -> name, s -> some, v -> visit-01, m -> missile, p -> person, n3 -> name, a -> announce-01, p4 -> person, n6 -> name, o2 -> organization, f3 -> fill-01, a2 -> and, c -> complex, f2 -> factory, u -> undertake-01, f -> fill-01, o -> organization, p3 -> person, n2 -> name, c2 -> conduct-01, n5 -> name))),[Ljava.lang.String;@ac20bb4,Annotation([Ljava.lang.String;@5a2bd7c8,[Ljava.lang.String;@7ca8d498,[Ljava.lang.String;@7187bac9),Annotation([Ljava.lang.String;@6b8280e6,[Ljava.lang.String;@6f139fc9,[Ledu.cmu.lti.nlp.amr.Dependency;@55259aa7),Annotation([Ljava.lang.String;@19382338,[Ljava.lang.String;@66420549,[Ljava.lang.String;@15dc339f),Annotation([Ljava.lang.String;@6cd56321,[Ljava.lang.String;@34acbc60,[Ledu.cmu.lti.nlp.amr.Entity;@42b28ff1))
AMR:
(a / announce-01, ARG0, s / some)
(a / announce-01, ARG1, v / visit-01)
(a / announce-01, polarity, -)
(a2 / and, op, m2 / missile)
(a2 / and, op, o / organization)
(a2 / and, op, o2 / organization)
(c2 / conduct-01, ARG0, p4 / person)
(c2 / conduct-01, ARG1, v / visit-01)
(c2 / conduct-01, time, p3 / person)
(e / expert-41, ARG1, p4 / person)
(f / fill-01, ARG0, f2 / factory)
(f / fill-01, ARG1, p2 / person)
(f2 / factory, location, c / complex)
(f2 / factory, name, n4 / name)
(f3 / fill-01, ARG1, w / warhead)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, p4 / person)
(m / missile, name, p / person)
(n / name, op, "Al")
(n / name, op, "Fatah")
(n2 / name, op, "Al")
(n2 / name, op, "Samoud")
(n3 / name, op, "Al")
(n3 / name, op, "Qa")
(n4 / name, op, "Al")
(n4 / name, op, "Qaib")
(n5 / name, op, "Commission")
(n5 / name, op, "Inspection")
(n6 / name, op, "Nations")
(n6 / name, op, "United")
(o / organization, name, n5 / name)
(o2 / organization, name, n6 / name)
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n3 / name)
(u / undertake-01, ARG0, c / complex)
(u / undertake-01, ARG1, f3 / fill-01)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, f2 / factory)

Decoded in 1,526,647 microseconds
Sentence: A United Nations Monitoring, Verification and Inspection Commission chemical team with support from the missile and biological teams inspected the Ibn Younis center, which was a mechanical design establishment in Baghdad.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "Inspection" :op "Commission"))
NER Entity: (country :name (name :op "Baghdad"))
NER Entity: (country :name (name :op "Baghdad"))
Spans:
Span 16-17:  and => and
Span 6-7:  and => and
Span 32-33:  Baghdad => (city :name (name :op "Baghdad"))
Span 17-18:  biological => biology
Span 9-10:  chemical => chemical
Span 29-30:  design => design-01
Span 30-31:  establishment => establish-01
Span 21-24:  Ibn Younis center => (research-institute :name (name :op "Center" :op "Younis" :op "Ibn"))
Span 19-20:  inspected => inspect-01
Span 7-9:  Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Span 28-29:  mechanical => mechanics
Span 15-16:  missile => missile
Span 12-13:  support => support-01
Span 10-11:  team => team
Span 18-19:  teams => team
Span 1-3:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(2, 1, 0),Baghdad,(city :name (name :op "Baghdad")),false), Span(30,31,List(3),establishment,establish-01,false), Span(29,30,List(4),design,design-01,false), Span(28,29,List(5),mechanical,mechanics,false), Span(21,24,List(10, 9, 8, 7, 6),Ibn Younis center,(research-institute :name (name :op "Center" :op "Younis" :op "Ibn")),false), Span(19,20,List(11),inspected,inspect-01,false), Span(18,19,List(12),teams,team,false), Span(17,18,List(13),biological,biology,false), Span(16,17,List(14),and,and,false), Span(15,16,List(15),missile,missile,false), Span(12,13,List(16),support,support-01,false), Span(10,11,List(17),team,team,false), Span(9,10,List(18),chemical,chemical,false), Span(7,9,List(22, 21, 20, 19),Inspection Commission,(organization :name (name :op "Inspection" :op "Commission")),false), Span(6,7,List(23),and,and,false), Span(1,3,List(27, 26, 25, 24),United Nations,(organization :name (name :op "United" :op "Nations")),false)),Map(2 -> "Baghdad", 5 -> mechanics, 27 -> "Nations", 12 -> team, 8 -> "Center", 15 -> missile, 21 -> "Inspection", 18 -> chemical, 24 -> organization, 7 -> name, 1 -> name, 17 -> team, 23 -> and, 26 -> "United", 4 -> design-01, 11 -> inspect-01, 14 -> and, 20 -> name, 6 -> research-institute, 9 -> "Younis", 0 -> city, 22 -> "Commission", 16 -> support-01, 19 -> organization, 10 -> "Ibn", 3 -> establish-01, 25 -> name, 13 -> biology),Map(e -> establish-01, n -> name, t -> team, b -> biology, m2 -> missile, n4 -> name, s -> support-01, d -> design-01, m -> mechanics, n3 -> name, a -> and, o2 -> organization, t2 -> team, a2 -> and, r -> research-institute, i -> inspect-01, c -> city, o -> organization, c2 -> chemical, n2 -> name))),[Ljava.lang.String;@36061cf3,Annotation([Ljava.lang.String;@718dbd79,[Ljava.lang.String;@20134094,[Ljava.lang.String;@76889e60),Annotation([Ljava.lang.String;@706fe5c6,[Ljava.lang.String;@6c15e8c7,[Ledu.cmu.lti.nlp.amr.Dependency;@56380231),Annotation([Ljava.lang.String;@64f1fd08,[Ljava.lang.String;@6b3f6585,[Ljava.lang.String;@282ffbf5),Annotation([Ljava.lang.String;@3e104d4b,[Ljava.lang.String;@55e2fe3c,[Ledu.cmu.lti.nlp.amr.Entity;@45e1aa48))
AMR:
(a / and, op, m2 / missile)
(a / and, op, t / team)
(a2 / and, op, o / organization)
(a2 / and, op, o2 / organization)
(a2 / and, op, t2 / team)
(c / city, name, n / name)
(d / design-01, ARG1, e / establish-01)
(d / design-01, mod, m / mechanics)
(e / establish-01, ARG1, c / city)
(i / inspect-01, ARG0, t2 / team)
(i / inspect-01, ARG1, r / research-institute)
(n / name, op, "Baghdad")
(n2 / name, op, "Center")
(n2 / name, op, "Ibn")
(n2 / name, op, "Younis")
(n3 / name, op, "Commission")
(n3 / name, op, "Inspection")
(n4 / name, op, "Nations")
(n4 / name, op, "United")
(o / organization, name, n3 / name)
(o2 / organization, name, n4 / name)
(r / research-institute, mod, e / establish-01)
(r / research-institute, name, n2 / name)
(s / support-01, ARG0, a / and)
(s / support-01, ARG1, t2 / team)
(t / team, mod, b / biology)
(t2 / team, mod, c2 / chemical)

Decoded in 1,518,549 microseconds
Sentence: The site was located within a large compound occupied by other companies and institutions including a regional office of the ruling bath Party and the whole compound was inspected by the United Nations arms experts according to Hiro Ueki.

NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (person :name (name :op "Hiro" :op "Ueki"))
Spans:
Span 23-24:  and => and
Span 12-13:  and => and
Span 33-34:  arms => arm
Span 21-23:  bath Party => (political-party :name (name :op "Party" :op "Bath"))
Span 11-12:  companies => company
Span 26-27:  compound => compound
Span 7-8:  compound => compound
Span 34-35:  experts => (have-org-role-91 :ARG2 (person :ARG1-of expert-41))
Span 37-39:  Hiro Ueki => (person :name (name :op "Ueki" :op "Hiro"))
Span 14-15:  including => include-91
Span 28-29:  inspected => inspect-01
Span 13-14:  institutions => institution
Span 6-7:  large => large
Span 3-4:  located => locate-01
Span 8-9:  occupied => occupy-01
Span 17-18:  office => office
Span 10-11:  other => other
Span 16-17:  regional => region
Span 20-21:  ruling => rule-03
Span 1-2:  site => site
Span 31-33:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 25-26:  whole => whole
Span 4-5:  within => within

Langrangian relaxation converged after 57 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,39,List(3, 2, 1, 0),Hiro Ueki,(person :name (name :op "Ueki" :op "Hiro")),false), Span(34,35,List(6, 5, 4),experts,(have-org-role-91 :ARG2 (person :ARG1-of expert-41)),false), Span(33,34,List(7),arms,arm,false), Span(31,33,List(11, 10, 9, 8),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(28,29,List(12),inspected,inspect-01,false), Span(26,27,List(13),compound,compound,false), Span(25,26,List(14),whole,whole,false), Span(23,24,List(15),and,and,false), Span(21,23,List(19, 18, 17, 16),bath Party,(political-party :name (name :op "Party" :op "Bath")),false), Span(20,21,List(20),ruling,rule-03,false), Span(17,18,List(21),office,office,false), Span(16,17,List(22),regional,region,false), Span(14,15,List(23),including,include-91,false), Span(13,14,List(24),institutions,institution,false), Span(12,13,List(25),and,and,false), Span(11,12,List(26),companies,company,false), Span(10,11,List(27),other,other,false), Span(8,9,List(28),occupied,occupy-01,false), Span(7,8,List(29),compound,compound,false), Span(6,7,List(30),large,large,false), Span(4,5,List(31),within,within,false), Span(3,4,List(32),located,locate-01,false), Span(1,2,List(33),site,site,false)),Map(30 -> large, 2 -> "Ueki", 5 -> person, 33 -> site, 27 -> other, 12 -> inspect-01, 8 -> organization, 15 -> and, 21 -> office, 18 -> "Party", 24 -> institution, 7 -> arm, 1 -> name, 17 -> name, 23 -> include-91, 26 -> company, 4 -> have-org-role-91, 11 -> "Nations", 32 -> locate-01, 14 -> whole, 29 -> compound, 20 -> rule-03, 28 -> occupy-01, 6 -> expert-41, 9 -> name, 0 -> person, 22 -> region, 16 -> political-party, 19 -> "Bath", 10 -> "United", 3 -> "Hiro", 31 -> within, 25 -> and, 13 -> compound),Map(e -> expert-41, w -> whole, n -> name, h -> have-org-role-91, o3 -> other, p2 -> person, a3 -> and, s -> site, i3 -> institution, r2 -> region, p -> person, a -> arm, n3 -> name, c3 -> compound, o2 -> office, i2 -> include-91, l2 -> locate-01, w2 -> within, a2 -> and, i -> inspect-01, r -> rule-03, c -> compound, l -> large, o -> organization, o4 -> occupy-01, p3 -> political-party, n2 -> name, c2 -> company))),[Ljava.lang.String;@12c60152,Annotation([Ljava.lang.String;@2e807c54,[Ljava.lang.String;@6cd164a6,[Ljava.lang.String;@242a209e),Annotation([Ljava.lang.String;@64469d8,[Ljava.lang.String;@2b8bd798,[Ledu.cmu.lti.nlp.amr.Dependency;@4c18621b),Annotation([Ljava.lang.String;@39c385d6,[Ljava.lang.String;@1cec219f,[Ljava.lang.String;@692e028d),Annotation([Ljava.lang.String;@6629ad09,[Ljava.lang.String;@43e1692f,[Ledu.cmu.lti.nlp.amr.Entity;@3e7c4815))
AMR:
(a / arm, poss, o / organization)
(a2 / and, op, c2 / company)
(a2 / and, op, i3 / institution)
(a3 / and, op, i / inspect-01)
(c / compound, mod, l / large)
(c3 / compound, mod, w / whole)
(e / expert-41, ARG1, p2 / person)
(e / expert-41, ARG2, a / arm)
(h / have-org-role-91, ARG1, c2 / company)
(h / have-org-role-91, ARG2, p2 / person)
(i / inspect-01, ARG1, c3 / compound)
(i2 / include-91, ARG1, o2 / office)
(i2 / include-91, ARG2, p / person)
(i3 / institution, mod, o3 / other)
(l2 / locate-01, ARG1, s / site)
(l2 / locate-01, location, c / compound)
(l2 / locate-01, time, w2 / within)
(n / name, op, "Hiro")
(n / name, op, "Ueki")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(n3 / name, op, "Bath")
(n3 / name, op, "Party")
(o / organization, name, n2 / name)
(o2 / office, mod, r2 / region)
(o2 / office, poss, p3 / political-party)
(o4 / occupy-01, ARG0, a2 / and)
(o4 / occupy-01, ARG1, c / compound)
(p / person, name, n / name)
(p3 / political-party, name, n3 / name)
(r / rule-03, ARG0, p3 / political-party)
(r / rule-03, ARG1, c3 / compound)
(w2 / within, op, c3 / compound)

Decoded in 3,152,017 microseconds
Sentence: On December 28, 2002 other inspectors carried out field operations separately in the Hadre Air Force munitions test site near Mosul which is about 400 kilometers north of Baghdad and two private trading companies.

mkDayMonthYear(December	28	,	2002,28,December,2002)
NER Entity: (organization :name (name :op "Hadre" :op "Air" :op "Force"))
NER Entity: (country :name (name :op "Mosul"))
NER Entity: (country :name (name :op "Baghdad"))
NER Entity: (country :name (name :op "Baghdad"))
NER Entity: (country :name (name :op "Mosul"))
Spans:
Span 25-26:  400 => 400
Span 24-25:  about => about
Span 30-31:  and => and
Span 29-30:  Baghdad => (city :name (name :op "Baghdad"))
Span 7-8:  carried => carry-03
Span 34-35:  companies => company
Span 1-5:  December 28 , 2002 => (date-entity :day 28 :month 12 :year 2002)
Span 9-10:  field => field
Span 14-17:  Hadre Air Force => (name :op "Force" :op "Air" :op "Hadre")
Span 6-7:  inspectors => (person :ARG0-of inspect-01)
Span 26-27:  kilometers => (distance-quantity :unit kilometer)
Span 21-22:  Mosul => (city :name (name :op "Mosul"))
Span 17-18:  munitions => munition
Span 20-21:  near => near
Span 27-28:  north => north
Span 10-11:  operations => operation
Span 5-6:  other => other
Span 8-9:  out => out
Span 32-33:  private => private
Span 11-12:  separately => separate-01
Span 19-20:  site => site
Span 18-19:  test => test-01
Span 33-34:  trading => trade-01
Span 31-32:  two => 2

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(0),companies,company,false), Span(33,34,List(1),trading,trade-01,false), Span(32,33,List(2),private,private,false), Span(31,32,List(3),two,2,false), Span(30,31,List(4),and,and,false), Span(29,30,List(7, 6, 5),Baghdad,(city :name (name :op "Baghdad")),false), Span(27,28,List(8),north,north,false), Span(26,27,List(10, 9),kilometers,(distance-quantity :unit kilometer),false), Span(25,26,List(11),400,400,false), Span(24,25,List(12),about,about,false), Span(21,22,List(15, 14, 13),Mosul,(city :name (name :op "Mosul")),false), Span(20,21,List(16),near,near,false), Span(19,20,List(17),site,site,false), Span(18,19,List(18),test,test-01,false), Span(17,18,List(19),munitions,munition,false), Span(14,17,List(23, 22, 21, 20),Hadre Air Force,(name :op "Force" :op "Air" :op "Hadre"),false), Span(11,12,List(24),separately,separate-01,false), Span(10,11,List(25),operations,operation,false), Span(9,10,List(26),field,field,false), Span(8,9,List(27),out,out,false), Span(7,8,List(28),carried,carry-03,false), Span(6,7,List(30, 29),inspectors,(person :ARG0-of inspect-01),false), Span(5,6,List(31),other,other,false), Span(1,5,List(35, 34, 33, 32),December 28 , 2002,(date-entity :day 28 :month 12 :year 2002),false)),Map(30 -> inspect-01, 2 -> private, 5 -> city, 33 -> 28, 27 -> out, 12 -> about, 8 -> north, 15 -> "Mosul", 21 -> "Force", 18 -> test-01, 24 -> separate-01, 35 -> 2002, 7 -> "Baghdad", 1 -> trade-01, 17 -> site, 23 -> "Hadre", 26 -> field, 4 -> and, 11 -> 400, 32 -> date-entity, 14 -> name, 29 -> person, 20 -> name, 34 -> 12, 28 -> carry-03, 6 -> name, 9 -> distance-quantity, 0 -> company, 22 -> "Air", 16 -> near, 19 -> munition, 10 -> kilometer, 3 -> 2, 31 -> other, 25 -> operation, 13 -> city),Map(n -> name, 2 -> 2, s2 -> separate-01, t -> trade-01, k -> kilometer, o3 -> other, p2 -> person, n4 -> near, c4 -> carry-03, s -> site, d -> distance-quantity, m -> munition, 1 -> 12, 23 -> 2002, p -> private, c3 -> city, a -> and, n3 -> name, 4 -> 400, d2 -> date-entity, o2 -> out, t2 -> test-01, i -> inspect-01, a2 -> about, c -> company, 22 -> 28, f -> field, o -> operation, n2 -> north, c2 -> city, n5 -> name))),[Ljava.lang.String;@27df0f3d,Annotation([Ljava.lang.String;@c35af2a,[Ljava.lang.String;@44550792,[Ljava.lang.String;@1835d3ed),Annotation([Ljava.lang.String;@474c9131,[Ljava.lang.String;@66213a0d,[Ledu.cmu.lti.nlp.amr.Dependency;@aa4d8cc),Annotation([Ljava.lang.String;@3cb8c8ce,[Ljava.lang.String;@1fde0371,[Ljava.lang.String;@70c0a3d5),Annotation([Ljava.lang.String;@5c8e67b9,[Ljava.lang.String;@260a3a5e,[Ledu.cmu.lti.nlp.amr.Entity;@49206065))
AMR:
(a / and, op, c / company)
(a / and, op, s / site)
(a2 / about, op, d / distance-quantity)
(c / company, mod, p / private)
(c / company, quant, 2 / 2)
(c2 / city, name, n / name)
(c3 / city, name, n3 / name)
(c4 / carry-03, ARG0, p2 / person)
(c4 / carry-03, ARG1, o / operation)
(c4 / carry-03, ARG5, o2 / out)
(c4 / carry-03, location, a / and)
(c4 / carry-03, manner, s2 / separate-01)
(c4 / carry-03, time, d2 / date-entity)
(d / distance-quantity, quant, 4 / 400)
(d / distance-quantity, unit, k / kilometer)
(d2 / date-entity, day, 22 / 28)
(d2 / date-entity, month, 1 / 12)
(d2 / date-entity, year, 23 / 2002)
(i / inspect-01, ARG0, p2 / person)
(i / inspect-01, ARG1, n2 / north)
(n / name, op, "Baghdad")
(n3 / name, op, "Mosul")
(n4 / near, op, c3 / city)
(n5 / name, op, "Air")
(n5 / name, op, "Force")
(n5 / name, op, "Hadre")
(o / operation, mod, f / field)
(p2 / person, mod, o3 / other)
(s / site, location, n4 / near)
(s / site, name, n5 / name)
(s2 / separate-01, ARG1, c2 / city)
(t / trade-01, ARG0, c / company)
(t / trade-01, ARG1, a2 / about)
(t2 / test-01, ARG1, m / munition)
(t2 / test-01, location, s / site)

Decoded in 996,375 microseconds
Sentence: Currently there are 105 inspectors in Iraq, 99 of whom are from the United Nations Monitoring, Verification and Inspection Commission and six from the International Atomic Energy Agency.

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "Inspection" :op "Commission"))
NER Entity: (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 3-4:  105 => 105
Span 8-9:  99 => 99
Span 22-23:  and => and
Span 19-20:  and => and
Span 0-1:  Currently => current
Span 20-22:  Inspection Commission => (organization :name (name :op "Inspection" :op "Commission"))
Span 4-5:  inspectors => (person :ARG0-of inspect-01)
Span 26-30:  International Atomic Energy Agency => (organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency"))
Span 6-7:  Iraq => (country :name (name :op "Iraq"))
Span 23-24:  six => 6
Span 14-16:  United Nations => (organization :name (name :op "United" :op "Nations"))

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,30,List(5, 4, 3, 2, 1, 0),International Atomic Energy Agency,(organization :name (name :op "International" :op "Atomic" :op "Energy" :op "Agency")),false), Span(23,24,List(6),six,6,false), Span(22,23,List(7),and,and,false), Span(20,22,List(11, 10, 9, 8),Inspection Commission,(organization :name (name :op "Inspection" :op "Commission")),false), Span(19,20,List(12),and,and,false), Span(14,16,List(16, 15, 14, 13),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(8,9,List(17),99,99,false), Span(6,7,List(20, 19, 18),Iraq,(country :name (name :op "Iraq")),false), Span(4,5,List(22, 21),inspectors,(person :ARG0-of inspect-01),false), Span(3,4,List(23),105,105,false), Span(0,1,List(24),Currently,current,false)),Map(2 -> "International", 5 -> "Agency", 12 -> and, 8 -> organization, 15 -> "United", 21 -> person, 18 -> country, 24 -> current, 7 -> and, 1 -> name, 17 -> 99, 23 -> 105, 4 -> "Energy", 11 -> "Commission", 14 -> name, 20 -> "Iraq", 6 -> 6, 9 -> name, 0 -> organization, 22 -> inspect-01, 16 -> "Nations", 19 -> name, 10 -> "Inspection", 3 -> "Atomic", 13 -> organization),Map(n -> name, o3 -> organization, n4 -> name, 1 -> 105, p -> person, a -> and, n3 -> name, o2 -> organization, i -> inspect-01, a2 -> and, 6 -> 6, c -> country, 9 -> 99, o -> organization, c2 -> current, n2 -> name))),[Ljava.lang.String;@3c0bbc9f,Annotation([Ljava.lang.String;@1317b708,[Ljava.lang.String;@6438a7fe,[Ljava.lang.String;@2e51d054),Annotation([Ljava.lang.String;@4f5f6e45,[Ljava.lang.String;@615e3f51,[Ledu.cmu.lti.nlp.amr.Dependency;@407873d3),Annotation([Ljava.lang.String;@608bc8f8,[Ljava.lang.String;@5412bfea,[Ljava.lang.String;@44a6a68e),Annotation([Ljava.lang.String;@4743a322,[Ljava.lang.String;@79316f3a,[Ledu.cmu.lti.nlp.amr.Entity;@381d7219))
AMR:
(9 / 99, mod, a2 / and)
(a / and, op, o2 / organization)
(a2 / and, op, c / country)
(a2 / and, op, o2 / organization)
(a2 / and, op, o3 / organization)
(a2 / and, op, p / person)
(c / country, name, n4 / name)
(c2 / current, mod, a / and)
(i / inspect-01, ARG0, p / person)
(i / inspect-01, ARG1, 6 / 6)
(n / name, op, "Agency")
(n / name, op, "Atomic")
(n / name, op, "Energy")
(n / name, op, "International")
(n2 / name, op, "Commission")
(n2 / name, op, "Inspection")
(n3 / name, op, "Nations")
(n3 / name, op, "United")
(n4 / name, op, "Iraq")
(o / organization, example, a2 / and)
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(o3 / organization, name, n3 / name)
(p / person, quant, 1 / 105)

Decoded in 255,703 microseconds
Sentence: The inspectors must give a first report to the United Nations Security Council about Iraq's weapons programs by January 27, 2003.

NER Entity: (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Iraq"))
mkDayMonthYear(January	27	,	2003,27,January,2003)
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 13-14:  about => about
Span 3-4:  give => give-01
Span 1-2:  inspectors => (person :ARG0-of inspect-01)
Span 14-15:  Iraq => (country :name (name :op "Iraq"))
Span 19-23:  January 27 , 2003 => (date-entity :day 27 :month 1 :year 2003)
Span 17-18:  programs => program
Span 6-7:  report => report
Span 9-13:  United Nations Security Council => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
Span 16-17:  weapons => weapon

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,23,List(3, 2, 1, 0),January 27 , 2003,(date-entity :day 27 :month 1 :year 2003),false), Span(17,18,List(4),programs,program,false), Span(16,17,List(5),weapons,weapon,false), Span(14,15,List(8, 7, 6),Iraq,(country :name (name :op "Iraq")),false), Span(13,14,List(9),about,about,false), Span(9,13,List(15, 14, 13, 12, 11, 10),United Nations Security Council,(organization :name (name :op "United" :op "Nations" :op "Security" :op "Council")),false), Span(6,7,List(16),report,report,false), Span(3,4,List(17),give,give-01,false), Span(1,2,List(19, 18),inspectors,(person :ARG0-of inspect-01),false)),Map(2 -> 1, 5 -> weapon, 12 -> "United", 15 -> "Council", 8 -> "Iraq", 18 -> person, 7 -> name, 17 -> give-01, 1 -> 27, 4 -> program, 11 -> name, 14 -> "Security", 6 -> country, 0 -> date-entity, 9 -> about, 16 -> report, 19 -> inspect-01, 3 -> 2003, 10 -> organization, 13 -> "Nations"),Map(w -> weapon, n -> name, 2 -> 27, p2 -> person, d -> date-entity, 1 -> 1, p -> program, g -> give-01, a -> about, i -> inspect-01, r -> report, c -> country, 22 -> 2003, o -> organization, n2 -> name))),[Ljava.lang.String;@49fe3142,Annotation([Ljava.lang.String;@13fed1ec,[Ljava.lang.String;@61c42416,[Ljava.lang.String;@329a1f8d),Annotation([Ljava.lang.String;@a565cbd,[Ljava.lang.String;@6fc29daa,[Ledu.cmu.lti.nlp.amr.Dependency;@2f66f0d0),Annotation([Ljava.lang.String;@4d62f4c6,[Ljava.lang.String;@7569ea63,[Ljava.lang.String;@ebd06a9),Annotation([Ljava.lang.String;@16c587de,[Ljava.lang.String;@4cdb8504,[Ledu.cmu.lti.nlp.amr.Entity;@76db540e))
AMR:
(a / about, op, p / program)
(c / country, name, n / name)
(d / date-entity, day, 2 / 27)
(d / date-entity, location, p / program)
(d / date-entity, month, 1 / 1)
(d / date-entity, year, 22 / 2003)
(g / give-01, ARG0, p2 / person)
(g / give-01, ARG1, r / report)
(i / inspect-01, ARG0, p2 / person)
(n / name, op, "Iraq")
(n2 / name, op, "Council")
(n2 / name, op, "Nations")
(n2 / name, op, "Security")
(n2 / name, op, "United")
(o / organization, name, n2 / name)
(p / program, mod, w / weapon)
(p / program, poss, c / country)
(r / report, op, o / organization)
(r / report, topic, p / program)

Decoded in 355,927 microseconds
Sentence: 2003-04-28

mkDayMonthYear(2003-04-28,28,04,2003)
mkDayMonthYear(2003-04-28,28,04,2003)
Spans:
Span 0-1:  2003-04-28 => (date-entity :day 28 :month 4 :year 2003)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2003-04-28,(date-entity :day 28 :month 4 :year 2003),false)),Map(2 -> 4, 1 -> 28, 0 -> date-entity, 3 -> 2003),Map(2 -> 28, d -> date-entity, 4 -> 4, 22 -> 2003))),[Ljava.lang.String;@10358c32,Annotation([Ljava.lang.String;@2af4129d,[Ljava.lang.String;@3a175162,[Ljava.lang.String;@1640190a),Annotation([Ljava.lang.String;@2a2843ec,[Ljava.lang.String;@2042ccce,[Ledu.cmu.lti.nlp.amr.Dependency;@20de05e5),Annotation([Ljava.lang.String;@36c0d0bd,[Ljava.lang.String;@5e1fc2aa,[Ljava.lang.String;@688d411b),Annotation([Ljava.lang.String;@382c90c2,[Ljava.lang.String;@859ea42,[Ledu.cmu.lti.nlp.amr.Entity;@28737371))
AMR:
(d / date-entity, day, 2 / 28)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 22 / 2003)

Decoded in 7,060 microseconds
Sentence: France (FR); India (IN)

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "IN"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 4-5:  ; => and
Span 0-1:  France => (country :name (name :op "France"))
Span 5-6:  India => (country :name (name :op "India"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(2, 1, 0),India,(country :name (name :op "India")),false), Span(4,5,List(3),;,and,false), Span(0,1,List(6, 5, 4),France,(country :name (name :op "France")),false)),Map(2 -> "India", 5 -> name, 1 -> name, 4 -> country, 6 -> "France", 0 -> country, 3 -> and),Map(n -> name, a -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@2af46afd,Annotation([Ljava.lang.String;@760245e1,[Ljava.lang.String;@31ceba99,[Ljava.lang.String;@295bf2a),Annotation([Ljava.lang.String;@bbf9e07,[Ljava.lang.String;@6ff6efdc,[Ledu.cmu.lti.nlp.amr.Dependency;@2b289ac9),Annotation([Ljava.lang.String;@4eb1c69,[Ljava.lang.String;@73d3e555,[Ljava.lang.String;@2b037cfc),Annotation([Ljava.lang.String;@44924587,[Ljava.lang.String;@18460128,[Ledu.cmu.lti.nlp.amr.Entity;@74d3b638))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "India")
(n2 / name, op, "France")

Decoded in 16,974 microseconds
Sentence: International; weapons; military; money; Government; technology

Spans:
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 8-9:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 4-5:  military => military
Span 6-7:  money => money
Span 10-11:  technology => technology
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(0),technology,technology,false), Span(9,10,List(1),;,and,false), Span(8,9,List(3, 2),Government,(government-organization :ARG0-of govern-01),false), Span(7,8,List(4),;,and,false), Span(6,7,List(5),money,money,false), Span(5,6,List(6),;,and,false), Span(4,5,List(7),military,military,false), Span(3,4,List(8),;,and,false), Span(2,3,List(9),weapons,weapon,false), Span(1,2,List(10),;,and,false), Span(0,1,List(11),International,international,false)),Map(2 -> government-organization, 5 -> money, 8 -> and, 7 -> military, 1 -> and, 11 -> international, 4 -> and, 6 -> and, 9 -> weapon, 0 -> technology, 10 -> and, 3 -> govern-01),Map(w -> weapon, t -> technology, m2 -> military, a3 -> and, m -> money, g2 -> govern-01, g -> government-organization, a -> and, a5 -> and, i -> international, a2 -> and, a4 -> and))),[Ljava.lang.String;@4487c0c2,Annotation([Ljava.lang.String;@126f1ba8,[Ljava.lang.String;@3a08078c,[Ljava.lang.String;@53830483),Annotation([Ljava.lang.String;@29f85fe1,[Ljava.lang.String;@43a0a32d,[Ledu.cmu.lti.nlp.amr.Dependency;@396ef8b2),Annotation([Ljava.lang.String;@72825400,[Ljava.lang.String;@19ee1ae6,[Ljava.lang.String;@5f117b3d),Annotation([Ljava.lang.String;@1174a305,[Ljava.lang.String;@71b6d77f,[Ledu.cmu.lti.nlp.amr.Entity;@1866da85))
AMR:
(a / and, op, g / government-organization)
(a2 / and, op, g / government-organization)
(a3 / and, op, g / government-organization)
(a4 / and, op, a3 / and)
(a4 / and, op, t / technology)
(a5 / and, op, a4 / and)
(a5 / and, op, i / international)
(a5 / and, op, m / money)
(a5 / and, op, m2 / military)
(a5 / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 61,953 microseconds
Sentence: France and India will sign an estimated 2 billion US dollar deal for manufacture in India under licensed production of 6 advanced diesel-propelled Scorpene submarines.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 7-8:  2 => 2
Span 20-21:  6 => 6
Span 21-22:  advanced => advance-01
Span 1-2:  and => and
Span 11-12:  deal => deal-01
Span 22-23:  diesel => diesel
Span 10-11:  dollar => (monetary-quantity :unit dollar)
Span 6-7:  estimated => estimate-01
Span 0-1:  France => (country :name (name :op "France"))
Span 15-16:  India => (country :name (name :op "India"))
Span 2-3:  India => (country :name (name :op "India"))
Span 17-18:  licensed => license-01
Span 13-14:  manufacture => manufacture-01
Span 18-19:  production => produce-01
Span 24-25:  propelled => propel-01
Span 25-26:  Scorpene => (name :op "Scorpene")
Span 4-5:  sign => sign-02
Span 26-27:  submarines => submarine
Span 9-10:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),submarines,submarine,false), Span(25,26,List(2, 1),Scorpene,(name :op "Scorpene"),false), Span(24,25,List(3),propelled,propel-01,false), Span(22,23,List(4),diesel,diesel,false), Span(21,22,List(5),advanced,advance-01,false), Span(20,21,List(6),6,6,false), Span(18,19,List(7),production,produce-01,false), Span(17,18,List(8),licensed,license-01,false), Span(15,16,List(11, 10, 9),India,(country :name (name :op "India")),false), Span(13,14,List(12),manufacture,manufacture-01,false), Span(11,12,List(13),deal,deal-01,false), Span(10,11,List(15, 14),dollar,(monetary-quantity :unit dollar),false), Span(9,10,List(18, 17, 16),US,(country :name (name :op "US")),false), Span(7,8,List(19),2,2,false), Span(6,7,List(20),estimated,estimate-01,false), Span(4,5,List(21),sign,sign-02,false), Span(2,3,List(24, 23, 22),India,(country :name (name :op "India")),false), Span(1,2,List(25),and,and,false), Span(0,1,List(28, 27, 26),France,(country :name (name :op "France")),false)),Map(2 -> "Scorpene", 5 -> advance-01, 27 -> name, 12 -> manufacture-01, 8 -> license-01, 15 -> dollar, 21 -> sign-02, 18 -> "US", 24 -> "India", 7 -> produce-01, 1 -> name, 17 -> name, 23 -> name, 26 -> country, 4 -> diesel, 11 -> "India", 14 -> monetary-quantity, 20 -> estimate-01, 28 -> "France", 6 -> 6, 9 -> country, 0 -> submarine, 22 -> country, 16 -> country, 19 -> 2, 10 -> name, 3 -> propel-01, 25 -> and, 13 -> deal-01),Map(e -> estimate-01, n -> name, 2 -> 2, s2 -> sign-02, d3 -> dollar, m2 -> monetary-quantity, p2 -> produce-01, c4 -> country, n4 -> name, s -> submarine, d -> diesel, m -> manufacture-01, p -> propel-01, c3 -> country, n3 -> name, a -> advance-01, d2 -> deal-01, a2 -> and, 6 -> 6, c -> country, l -> license-01, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@4cfa8227,Annotation([Ljava.lang.String;@78226c36,[Ljava.lang.String;@3f685162,[Ljava.lang.String;@11f406f8),Annotation([Ljava.lang.String;@987455b,[Ljava.lang.String;@622fdb81,[Ledu.cmu.lti.nlp.amr.Dependency;@1f3165e7),Annotation([Ljava.lang.String;@2ec3633f,[Ljava.lang.String;@1d5d5621,[Ljava.lang.String;@13275d8),Annotation([Ljava.lang.String;@15b82644,[Ljava.lang.String;@20576557,[Ledu.cmu.lti.nlp.amr.Entity;@574cd322))
AMR:
(a / advance-01, ARG1, s / submarine)
(a2 / and, op, c4 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(d2 / deal-01, ARG1, m / manufacture-01)
(d2 / deal-01, ARG6, 2 / 2)
(d3 / dollar, mod, c2 / country)
(e / estimate-01, ARG1, d2 / deal-01)
(e / estimate-01, ARG2, m2 / monetary-quantity)
(l / license-01, ARG1, p2 / produce-01)
(m / manufacture-01, ARG1, s / submarine)
(m / manufacture-01, location, c3 / country)
(m / manufacture-01, prep-under, p2 / produce-01)
(m2 / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Scorpene")
(n2 / name, op, "India")
(n3 / name, op, "US")
(n4 / name, op, "India")
(n5 / name, op, "France")
(p / propel-01, ARG0, d / diesel)
(p / propel-01, ARG1, s / submarine)
(p2 / produce-01, ARG1, c / country)
(s / submarine, name, n / name)
(s / submarine, quant, 6 / 6)
(s2 / sign-02, ARG0, a2 / and)
(s2 / sign-02, ARG1, d2 / deal-01)

Decoded in 1,573,951 microseconds
Sentence: French Defense Minister Michele Alliot-Marie conducted security dialogue with Indian leaders about the deal.

NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Michele" :op "Alliot" :op "-" :op "Marie"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "French"))
Spans:
Span 13-14:  about => about
Span 7-8:  conducted => conduct-01
Span 15-16:  deal => deal-01
Span 1-2:  Defense => defense
Span 9-10:  dialogue => dialogue
Span 0-1:  French => (country :name (name :op "France"))
Span 11-12:  Indian => (country :name (name :op "India"))
Span 12-13:  leaders => (person :ARG0-of lead-02)
Span 3-7:  Michele Alliot - Marie => (person :name (name :op "Alliot-Marie" :op "Michele"))
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 8-9:  security => security

Langrangian relaxation converged after 123 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),deal,deal-01,false), Span(13,14,List(1),about,about,false), Span(12,13,List(3, 2),leaders,(person :ARG0-of lead-02),false), Span(11,12,List(6, 5, 4),Indian,(country :name (name :op "India")),false), Span(9,10,List(7),dialogue,dialogue,false), Span(8,9,List(8),security,security,false), Span(7,8,List(9),conducted,conduct-01,false), Span(3,7,List(13, 12, 11, 10),Michele Alliot - Marie,(person :name (name :op "Alliot-Marie" :op "Michele")),false), Span(2,3,List(15, 14),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(16),Defense,defense,false), Span(0,1,List(19, 18, 17),French,(country :name (name :op "France")),false)),Map(2 -> person, 5 -> name, 12 -> "Alliot-Marie", 15 -> minister, 8 -> security, 18 -> name, 7 -> dialogue, 17 -> country, 1 -> about, 4 -> country, 11 -> name, 14 -> have-org-role-91, 6 -> "India", 0 -> deal-01, 9 -> conduct-01, 16 -> defense, 19 -> "France", 3 -> lead-02, 10 -> person, 13 -> "Michele"),Map(n -> name, h -> have-org-role-91, d3 -> defense, p2 -> person, s -> security, d -> deal-01, m -> minister, p -> person, n3 -> name, c3 -> country, a -> about, d2 -> dialogue, c -> country, l -> lead-02, c2 -> conduct-01, n2 -> name))),[Ljava.lang.String;@45c2e0a6,Annotation([Ljava.lang.String;@119c745c,[Ljava.lang.String;@a7ad6e5,[Ljava.lang.String;@3b1ed14b),Annotation([Ljava.lang.String;@690bc15e,[Ljava.lang.String;@1bc776b7,[Ledu.cmu.lti.nlp.amr.Dependency;@475646d4),Annotation([Ljava.lang.String;@a0f53fc,[Ljava.lang.String;@3db972d2,[Ljava.lang.String;@1debc91c),Annotation([Ljava.lang.String;@687e4c93,[Ljava.lang.String;@181e72d3,[Ledu.cmu.lti.nlp.amr.Entity;@6ec7bce0))
AMR:
(a / about, op, d / deal-01)
(c / country, name, n / name)
(c2 / conduct-01, ARG0, p2 / person)
(c2 / conduct-01, ARG1, d2 / dialogue)
(c2 / conduct-01, time, a / about)
(c3 / country, name, n3 / name)
(d2 / dialogue, mod, p / person)
(d2 / dialogue, mod, s / security)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, m / minister)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, c / country)
(m / minister, mod, d3 / defense)
(n / name, op, "India")
(n2 / name, op, "Alliot-Marie")
(n2 / name, op, "Michele")
(n3 / name, op, "France")
(p2 / person, name, n2 / name)

Decoded in 2,360,992 microseconds
Sentence: On 28 April 2003 France offered India long-term military cooperation on joint development, technology transfer and sale of high-tech weapons systems.

mkDayMonthYear(28	April	2003,28,April,2003)
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 1-4:  28 April 2003 => (date-entity :day 28 :month 4 :year 2003)
Span 18-19:  and => and
Span 11-12:  cooperation => cooperate-01
Span 14-15:  development => develop-02
Span 4-5:  France => (country :name (name :op "France"))
Span 21-22:  high => high
Span 6-7:  India => (country :name (name :op "India"))
Span 13-14:  joint => joint
Span 7-8:  long => long
Span 10-11:  military => military
Span 5-6:  offered => offer-01
Span 25-26:  systems => system
Span 23-24:  tech => technology
Span 16-17:  technology => technology
Span 9-10:  term => term
Span 17-18:  transfer => transfer-01
Span 24-25:  weapons => weapon

Langrangian relaxation converged after 59 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),systems,system,false), Span(24,25,List(1),weapons,weapon,false), Span(23,24,List(2),tech,technology,false), Span(21,22,List(3),high,high,false), Span(18,19,List(4),and,and,false), Span(17,18,List(5),transfer,transfer-01,false), Span(16,17,List(6),technology,technology,false), Span(14,15,List(7),development,develop-02,false), Span(13,14,List(8),joint,joint,false), Span(11,12,List(9),cooperation,cooperate-01,false), Span(10,11,List(10),military,military,false), Span(9,10,List(11),term,term,false), Span(7,8,List(12),long,long,false), Span(6,7,List(15, 14, 13),India,(country :name (name :op "India")),false), Span(5,6,List(16),offered,offer-01,false), Span(4,5,List(19, 18, 17),France,(country :name (name :op "France")),false), Span(1,4,List(23, 22, 21, 20),28 April 2003,(date-entity :day 28 :month 4 :year 2003),false)),Map(2 -> technology, 5 -> transfer-01, 12 -> long, 15 -> "India", 8 -> joint, 21 -> 28, 18 -> name, 7 -> develop-02, 17 -> country, 1 -> weapon, 23 -> 2003, 4 -> and, 11 -> term, 14 -> name, 20 -> date-entity, 6 -> technology, 22 -> 4, 0 -> system, 9 -> cooperate-01, 16 -> offer-01, 19 -> "France", 3 -> high, 10 -> military, 13 -> country),Map(n -> name, w -> weapon, h -> high, t4 -> term, 2 -> 28, t -> technology, j -> joint, s -> system, d -> develop-02, m -> military, t3 -> technology, 4 -> 4, c3 -> country, a -> and, d2 -> date-entity, t2 -> transfer-01, c -> cooperate-01, l -> long, 22 -> 2003, o -> offer-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@2d272b0d,Annotation([Ljava.lang.String;@3727f0ee,[Ljava.lang.String;@5c448433,[Ljava.lang.String;@fb713e7),Annotation([Ljava.lang.String;@1b5c3e5f,[Ljava.lang.String;@13741d5a,[Ledu.cmu.lti.nlp.amr.Dependency;@6b69761b),Annotation([Ljava.lang.String;@5c7668ba,[Ljava.lang.String;@26221bad,[Ljava.lang.String;@158f4cfe),Annotation([Ljava.lang.String;@35f639fa,[Ljava.lang.String;@5aaaa446,[Ledu.cmu.lti.nlp.amr.Entity;@6c6333cd))
AMR:
(a / and, op, d / develop-02)
(a / and, op, t2 / transfer-01)
(c / cooperate-01, ARG1, c2 / country)
(c / cooperate-01, ARG2, a / and)
(c / cooperate-01, duration, t4 / term)
(c / cooperate-01, mod, m / military)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d / develop-02, mod, j / joint)
(d2 / date-entity, day, 2 / 28)
(d2 / date-entity, month, 4 / 4)
(d2 / date-entity, year, 22 / 2003)
(n / name, op, "India")
(n2 / name, op, "France")
(o / offer-01, ARG0, c3 / country)
(o / offer-01, ARG1, c / cooperate-01)
(o / offer-01, time, d2 / date-entity)
(s / system, mod, t3 / technology)
(s / system, mod, w / weapon)
(t / technology, mod, h / high)
(t2 / transfer-01, ARG1, t3 / technology)
(t3 / technology, mod, h / high)
(t4 / term, mod, l / long)

Decoded in 1,988,439 microseconds
Sentence: France and India will sign an estimated 2 billion US dollar deal for manufacture in India under licensed production of 6 advanced diesel-propelled Scorpene submarines.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 7-8:  2 => 2
Span 20-21:  6 => 6
Span 21-22:  advanced => advance-01
Span 1-2:  and => and
Span 11-12:  deal => deal-01
Span 22-23:  diesel => diesel
Span 10-11:  dollar => (monetary-quantity :unit dollar)
Span 6-7:  estimated => estimate-01
Span 0-1:  France => (country :name (name :op "France"))
Span 15-16:  India => (country :name (name :op "India"))
Span 2-3:  India => (country :name (name :op "India"))
Span 17-18:  licensed => license-01
Span 13-14:  manufacture => manufacture-01
Span 18-19:  production => produce-01
Span 24-25:  propelled => propel-01
Span 25-26:  Scorpene => (name :op "Scorpene")
Span 4-5:  sign => sign-02
Span 26-27:  submarines => submarine
Span 9-10:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),submarines,submarine,false), Span(25,26,List(2, 1),Scorpene,(name :op "Scorpene"),false), Span(24,25,List(3),propelled,propel-01,false), Span(22,23,List(4),diesel,diesel,false), Span(21,22,List(5),advanced,advance-01,false), Span(20,21,List(6),6,6,false), Span(18,19,List(7),production,produce-01,false), Span(17,18,List(8),licensed,license-01,false), Span(15,16,List(11, 10, 9),India,(country :name (name :op "India")),false), Span(13,14,List(12),manufacture,manufacture-01,false), Span(11,12,List(13),deal,deal-01,false), Span(10,11,List(15, 14),dollar,(monetary-quantity :unit dollar),false), Span(9,10,List(18, 17, 16),US,(country :name (name :op "US")),false), Span(7,8,List(19),2,2,false), Span(6,7,List(20),estimated,estimate-01,false), Span(4,5,List(21),sign,sign-02,false), Span(2,3,List(24, 23, 22),India,(country :name (name :op "India")),false), Span(1,2,List(25),and,and,false), Span(0,1,List(28, 27, 26),France,(country :name (name :op "France")),false)),Map(2 -> "Scorpene", 5 -> advance-01, 27 -> name, 12 -> manufacture-01, 8 -> license-01, 15 -> dollar, 21 -> sign-02, 18 -> "US", 24 -> "India", 7 -> produce-01, 1 -> name, 17 -> name, 23 -> name, 26 -> country, 4 -> diesel, 11 -> "India", 14 -> monetary-quantity, 20 -> estimate-01, 28 -> "France", 6 -> 6, 9 -> country, 0 -> submarine, 22 -> country, 16 -> country, 19 -> 2, 10 -> name, 3 -> propel-01, 25 -> and, 13 -> deal-01),Map(e -> estimate-01, n -> name, 2 -> 2, s2 -> sign-02, d3 -> dollar, m2 -> monetary-quantity, p2 -> produce-01, c4 -> country, n4 -> name, s -> submarine, d -> diesel, m -> manufacture-01, p -> propel-01, c3 -> country, n3 -> name, a -> advance-01, d2 -> deal-01, a2 -> and, 6 -> 6, c -> country, l -> license-01, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@3e47a03,Annotation([Ljava.lang.String;@7d9ba6c,[Ljava.lang.String;@8deb645,[Ljava.lang.String;@7dd611c8),Annotation([Ljava.lang.String;@5d425813,[Ljava.lang.String;@1702830d,[Ledu.cmu.lti.nlp.amr.Dependency;@6a937336),Annotation([Ljava.lang.String;@278667fd,[Ljava.lang.String;@684b31de,[Ljava.lang.String;@6b52dd31),Annotation([Ljava.lang.String;@1a2909ae,[Ljava.lang.String;@e042c99,[Ledu.cmu.lti.nlp.amr.Entity;@3f702946))
AMR:
(a / advance-01, ARG1, s / submarine)
(a2 / and, op, c4 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(d2 / deal-01, ARG1, m / manufacture-01)
(d2 / deal-01, ARG6, 2 / 2)
(d3 / dollar, mod, c2 / country)
(e / estimate-01, ARG1, d2 / deal-01)
(e / estimate-01, ARG2, m2 / monetary-quantity)
(l / license-01, ARG1, p2 / produce-01)
(m / manufacture-01, ARG1, s / submarine)
(m / manufacture-01, location, c3 / country)
(m / manufacture-01, prep-under, p2 / produce-01)
(m2 / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Scorpene")
(n2 / name, op, "India")
(n3 / name, op, "US")
(n4 / name, op, "India")
(n5 / name, op, "France")
(p / propel-01, ARG0, d / diesel)
(p / propel-01, ARG1, s / submarine)
(p2 / produce-01, ARG1, c / country)
(s / submarine, name, n / name)
(s / submarine, quant, 6 / 6)
(s2 / sign-02, ARG0, a2 / and)
(s2 / sign-02, ARG1, d2 / deal-01)

Decoded in 1,575,565 microseconds
Sentence: French Defense Minister Michele Alliot-Marie conducted security dialogue with Indian leaders.

NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Michele" :op "Alliot" :op "-" :op "Marie"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "French"))
Spans:
Span 7-8:  conducted => conduct-01
Span 1-2:  Defense => defense
Span 9-10:  dialogue => dialogue
Span 0-1:  French => (country :name (name :op "France"))
Span 11-12:  Indian => (country :name (name :op "India"))
Span 12-13:  leaders => (person :ARG0-of lead-02)
Span 3-7:  Michele Alliot - Marie => (person :name (name :op "Alliot-Marie" :op "Michele"))
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 8-9:  security => security

Langrangian relaxation converged after 123 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(1, 0),leaders,(person :ARG0-of lead-02),false), Span(11,12,List(4, 3, 2),Indian,(country :name (name :op "India")),false), Span(9,10,List(5),dialogue,dialogue,false), Span(8,9,List(6),security,security,false), Span(7,8,List(7),conducted,conduct-01,false), Span(3,7,List(11, 10, 9, 8),Michele Alliot - Marie,(person :name (name :op "Alliot-Marie" :op "Michele")),false), Span(2,3,List(13, 12),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(14),Defense,defense,false), Span(0,1,List(17, 16, 15),French,(country :name (name :op "France")),false)),Map(2 -> country, 5 -> dialogue, 12 -> have-org-role-91, 15 -> country, 8 -> person, 7 -> conduct-01, 17 -> "France", 1 -> lead-02, 4 -> "India", 11 -> "Michele", 14 -> defense, 6 -> security, 0 -> person, 9 -> name, 16 -> name, 3 -> name, 10 -> "Alliot-Marie", 13 -> minister),Map(n -> name, h -> have-org-role-91, p2 -> person, s -> security, d -> dialogue, m -> minister, p -> person, n3 -> name, c3 -> country, d2 -> defense, c -> country, l -> lead-02, c2 -> conduct-01, n2 -> name))),[Ljava.lang.String;@42b6d0cc,Annotation([Ljava.lang.String;@1000d54d,[Ljava.lang.String;@3f4f5330,[Ljava.lang.String;@14b7786),Annotation([Ljava.lang.String;@750ff7d3,[Ljava.lang.String;@63b3ee82,[Ledu.cmu.lti.nlp.amr.Dependency;@2620e717),Annotation([Ljava.lang.String;@7c8d5312,[Ljava.lang.String;@7636823f,[Ljava.lang.String;@a0db585),Annotation([Ljava.lang.String;@2b34e38c,[Ljava.lang.String;@3d37203b,[Ledu.cmu.lti.nlp.amr.Entity;@7fd26ad8))
AMR:
(c / country, name, n / name)
(c2 / conduct-01, ARG0, p2 / person)
(c2 / conduct-01, ARG1, d / dialogue)
(c3 / country, name, n3 / name)
(d / dialogue, mod, p / person)
(d / dialogue, mod, s / security)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, m / minister)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, c / country)
(m / minister, mod, d2 / defense)
(n / name, op, "India")
(n2 / name, op, "Alliot-Marie")
(n2 / name, op, "Michele")
(n3 / name, op, "France")
(p2 / person, name, n2 / name)

Decoded in 1,916,613 microseconds
Sentence: Alliot-Marie stated that --

NER Entity: (person :name (name :op "Alliot" :op "-" :op "Marie"))
Spans:
Span 0-3:  Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Span 3-4:  stated => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(3,4,List(0),stated,state-01,false), Span(0,3,List(3, 2, 1),Alliot - Marie,(person :name (name :op "Alliot-Marie")),false)),Map(2 -> name, 1 -> person, 0 -> state-01, 3 -> "Alliot-Marie"),Map(n -> name, s -> state-01, p -> person))),[Ljava.lang.String;@1894593a,Annotation([Ljava.lang.String;@14b0e127,[Ljava.lang.String;@10823d72,[Ljava.lang.String;@7cea0110),Annotation([Ljava.lang.String;@468dda3e,[Ljava.lang.String;@5527b211,[Ledu.cmu.lti.nlp.amr.Dependency;@54cf7c6a),Annotation([Ljava.lang.String;@78010562,[Ljava.lang.String;@50756c76,[Ljava.lang.String;@38aafb53),Annotation([Ljava.lang.String;@1729ec00,[Ljava.lang.String;@67f3d192,[Ledu.cmu.lti.nlp.amr.Entity;@1c9e07c6))
AMR:
(n / name, op, "Alliot-Marie")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)

Decoded in 7,339 microseconds
Sentence: International cooperation is necessary especially after the recent war in Iraq.

NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 5-6:  after => after
Span 1-2:  cooperation => cooperate-01
Span 4-5:  especially => especially
Span 0-1:  International => international
Span 10-11:  Iraq => (country :name (name :op "Iraq"))
Span 7-8:  recent => recent
Span 8-9:  war => war

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),Iraq,(country :name (name :op "Iraq")),false), Span(8,9,List(3),war,war,false), Span(7,8,List(4),recent,recent,false), Span(5,6,List(5),after,after,false), Span(4,5,List(6),especially,especially,false), Span(1,2,List(7),cooperation,cooperate-01,false), Span(0,1,List(8),International,international,false)),Map(2 -> "Iraq", 5 -> after, 8 -> international, 7 -> cooperate-01, 1 -> name, 4 -> recent, 6 -> especially, 0 -> country, 3 -> war),Map(e -> especially, w -> war, n -> name, a -> after, i -> international, r -> recent, c -> country, c2 -> cooperate-01))),[Ljava.lang.String;@73010765,Annotation([Ljava.lang.String;@2b10ace9,[Ljava.lang.String;@52169758,[Ljava.lang.String;@3eda0aeb),Annotation([Ljava.lang.String;@459b187a,[Ljava.lang.String;@6b4283c4,[Ledu.cmu.lti.nlp.amr.Dependency;@d0865a3),Annotation([Ljava.lang.String;@636bbbbb,[Ljava.lang.String;@7eae3764,[Ljava.lang.String;@10dc7d6),Annotation([Ljava.lang.String;@4f668f29,[Ljava.lang.String;@716e431d,[Ledu.cmu.lti.nlp.amr.Entity;@7e744f43))
AMR:
(a / after, mod, e / especially)
(a / after, op, w / war)
(c / country, name, n / name)
(c2 / cooperate-01, ARG1, w / war)
(c2 / cooperate-01, mod, i / international)
(n / name, op, "Iraq")
(w / war, location, c / country)
(w / war, time, r / recent)

Decoded in 37,870 microseconds
Sentence: France wants to deepen the intensity of its defense relations with India.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 3-4:  deepen => deepen-01
Span 8-9:  defense => defense
Span 0-1:  France => (country :name (name :op "France"))
Span 11-12:  India => (country :name (name :op "India"))
Span 5-6:  intensity => intensity
Span 9-10:  relations => relation
Span 1-2:  wants => want-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),India,(country :name (name :op "India")),false), Span(9,10,List(3),relations,relation,false), Span(8,9,List(4),defense,defense,false), Span(5,6,List(5),intensity,intensity,false), Span(3,4,List(6),deepen,deepen-01,false), Span(1,2,List(7),wants,want-01,false), Span(0,1,List(10, 9, 8),France,(country :name (name :op "France")),false)),Map(2 -> "India", 5 -> intensity, 8 -> country, 7 -> want-01, 1 -> name, 4 -> defense, 6 -> deepen-01, 9 -> name, 0 -> country, 10 -> "France", 3 -> relation),Map(w -> want-01, n -> name, d -> defense, d2 -> deepen-01, i -> intensity, r -> relation, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@11a8042c,Annotation([Ljava.lang.String;@6a4ccef7,[Ljava.lang.String;@69391e08,[Ljava.lang.String;@35eb4a3b),Annotation([Ljava.lang.String;@64b3b1ce,[Ljava.lang.String;@6884f0d9,[Ledu.cmu.lti.nlp.amr.Dependency;@49ec6a9f),Annotation([Ljava.lang.String;@26b95b0b,[Ljava.lang.String;@5f7da3d3,[Ljava.lang.String;@103082dd),Annotation([Ljava.lang.String;@3a22bad6,[Ljava.lang.String;@56afdf9a,[Ledu.cmu.lti.nlp.amr.Entity;@64fe9da7))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d2 / deepen-01, ARG1, i / intensity)
(n / name, op, "India")
(n2 / name, op, "France")
(r / relation, mod, c / country)
(r / relation, mod, d / defense)
(r / relation, poss, c2 / country)
(w / want-01, ARG0, c2 / country)
(w / want-01, ARG1, d2 / deepen-01)

Decoded in 216,695 microseconds
Sentence: France will upgrade the weapon systems that France sold to India and maintain them at optimal operational use.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 11-12:  and => and
Span 7-8:  France => (country :name (name :op "France"))
Span 0-1:  France => (country :name (name :op "France"))
Span 10-11:  India => (country :name (name :op "India"))
Span 12-13:  maintain => maintain-01
Span 16-17:  operational => operate-01
Span 15-16:  optimal => optimum
Span 8-9:  sold => sell-01
Span 5-6:  systems => system
Span 2-3:  upgrade => upgrade-02
Span 17-18:  use => use-01
Span 4-5:  weapon => weapon

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),use,use-01,false), Span(16,17,List(1),operational,operate-01,false), Span(15,16,List(2),optimal,optimum,false), Span(12,13,List(3),maintain,maintain-01,false), Span(11,12,List(4),and,and,false), Span(10,11,List(7, 6, 5),India,(country :name (name :op "India")),false), Span(8,9,List(8),sold,sell-01,false), Span(7,8,List(11, 10, 9),France,(country :name (name :op "France")),false), Span(5,6,List(12),systems,system,false), Span(4,5,List(13),weapon,weapon,false), Span(2,3,List(14),upgrade,upgrade-02,false), Span(0,1,List(17, 16, 15),France,(country :name (name :op "France")),false)),Map(2 -> optimum, 5 -> country, 12 -> system, 15 -> country, 8 -> sell-01, 7 -> "India", 17 -> "France", 1 -> operate-01, 4 -> and, 11 -> "France", 14 -> upgrade-02, 6 -> name, 0 -> use-01, 9 -> country, 16 -> name, 3 -> maintain-01, 10 -> name, 13 -> weapon),Map(n -> name, w -> weapon, s2 -> system, s -> sell-01, u2 -> upgrade-02, m -> maintain-01, n3 -> name, c3 -> country, a -> and, o2 -> optimum, c -> country, u -> use-01, o -> operate-01, c2 -> country, n2 -> name))),[Ljava.lang.String;@70cccd8f,Annotation([Ljava.lang.String;@5f172d4a,[Ljava.lang.String;@77ec6a3d,[Ljava.lang.String;@67efd2c2),Annotation([Ljava.lang.String;@71d9cb05,[Ljava.lang.String;@17c2d509,[Ledu.cmu.lti.nlp.amr.Dependency;@36bf84e),Annotation([Ljava.lang.String;@1a0b5323,[Ljava.lang.String;@25b52284,[Ljava.lang.String;@245ec1a6),Annotation([Ljava.lang.String;@782be4eb,[Ljava.lang.String;@38792286,[Ledu.cmu.lti.nlp.amr.Entity;@34d4860f))
AMR:
(a / and, op, m / maintain-01)
(a / and, op, u2 / upgrade-02)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(m / maintain-01, ARG0, c3 / country)
(m / maintain-01, ARG1, u / use-01)
(m / maintain-01, ARG2, s2 / system)
(n / name, op, "India")
(n2 / name, op, "France")
(n3 / name, op, "France")
(s / sell-01, ARG0, c2 / country)
(s / sell-01, ARG1, s2 / system)
(s / sell-01, ARG2, c / country)
(s2 / system, mod, w / weapon)
(u / use-01, ARG1, o / operate-01)
(u / use-01, mod, o2 / optimum)
(u2 / upgrade-02, ARG0, c3 / country)
(u2 / upgrade-02, ARG1, s2 / system)

Decoded in 795,449 microseconds
Sentence: France offered the sale of its upgraded Mirage 2002-5 to India along with technology transfer and thermal imagers for India's Russia-made T-72 and T-90 tanks and angular determination system for artillery.

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (organization :name (name :op "Russia" :op "-" :op "made" :op "T" :op "-" :op "72"))
NER Entity: (organization :name (name :op "T" :op "-" :op "90"))
NER Entity: (organization :name (name :op "T" :op "-" :op "90"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 30-31:  90 => 90
Span 11-12:  along => along
Span 32-33:  and => and
Span 27-28:  and => and
Span 15-16:  and => and
Span 37-38:  artillery => artillery
Span 34-35:  determination => determine-01
Span 0-1:  France => (country :name (name :op "France"))
Span 17-18:  imagers => imager
Span 19-20:  India => (country :name (name :op "India"))
Span 10-11:  India => (country :name (name :op "India"))
Span 7-9:  Mirage 2002-5 => (product :name (name :op "2002-5" :op "Mirage"))
Span 1-2:  offered => offer-01
Span 21-23:  Russia - => (organization :name (name :op "Russia" :op "-" :op "made" :op "T" :op "-" :op "72"))
Span 35-36:  system => system
Span 28-29:  T => (tank :name (name :op "T-72"))
Span 24-25:  T => (tank :name (name :op "T-72"))
Span 31-32:  tanks => tank
Span 13-14:  technology => technology
Span 16-17:  thermal => thermal
Span 14-15:  transfer => transfer-01
Span 6-7:  upgraded => upgrade-02

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),artillery,artillery,false), Span(35,36,List(1),system,system,false), Span(34,35,List(2),determination,determine-01,false), Span(32,33,List(3),and,and,false), Span(31,32,List(4),tanks,tank,false), Span(30,31,List(5),90,90,false), Span(28,29,List(8, 7, 6),T,(tank :name (name :op "T-72")),false), Span(27,28,List(9),and,and,false), Span(24,25,List(12, 11, 10),T,(tank :name (name :op "T-72")),false), Span(21,23,List(20, 19, 18, 17, 16, 15, 14, 13),Russia -,(organization :name (name :op "Russia" :op "-" :op "made" :op "T" :op "-" :op "72")),false), Span(19,20,List(23, 22, 21),India,(country :name (name :op "India")),false), Span(17,18,List(24),imagers,imager,false), Span(16,17,List(25),thermal,thermal,false), Span(15,16,List(26),and,and,false), Span(14,15,List(27),transfer,transfer-01,false), Span(13,14,List(28),technology,technology,false), Span(11,12,List(29),along,along,false), Span(10,11,List(32, 31, 30),India,(country :name (name :op "India")),false), Span(7,9,List(36, 35, 34, 33),Mirage 2002-5,(product :name (name :op "2002-5" :op "Mirage")),false), Span(6,7,List(37),upgraded,upgrade-02,false), Span(1,2,List(38),offered,offer-01,false), Span(0,1,List(41, 40, 39),France,(country :name (name :op "France")),false)),Map(39 -> country, 30 -> country, 2 -> determine-01, 5 -> 90, 33 -> product, 27 -> transfer-01, 12 -> "T-72", 8 -> "T-72", 15 -> "Russia", 36 -> "Mirage", 21 -> country, 18 -> "T", 24 -> imager, 41 -> "France", 35 -> "2002-5", 7 -> name, 1 -> system, 17 -> "made", 23 -> "India", 38 -> offer-01, 26 -> and, 4 -> tank, 11 -> name, 32 -> "India", 14 -> name, 29 -> along, 20 -> "72", 34 -> name, 28 -> technology, 6 -> tank, 40 -> name, 9 -> and, 0 -> artillery, 22 -> name, 16 -> "-", 37 -> upgrade-02, 19 -> "-", 10 -> tank, 3 -> and, 31 -> name, 25 -> thermal, 13 -> organization),Map(n -> name, t4 -> thermal, t -> tank, n7 -> name, a3 -> and, n4 -> name, t6 -> technology, s -> system, d -> determine-01, t3 -> tank, p -> product, c3 -> country, n3 -> name, a -> artillery, o2 -> offer-01, a5 -> along, n6 -> name, t2 -> tank, t5 -> transfer-01, a2 -> and, i -> imager, c -> country, u -> upgrade-02, 9 -> 90, o -> organization, n2 -> name, c2 -> country, a4 -> and, n5 -> name))),[Ljava.lang.String;@665522c2,Annotation([Ljava.lang.String;@41fe8e5f,[Ljava.lang.String;@3062f9f4,[Ljava.lang.String;@2016f509),Annotation([Ljava.lang.String;@6f1a80fb,[Ljava.lang.String;@5a237731,[Ledu.cmu.lti.nlp.amr.Dependency;@7d2998d8),Annotation([Ljava.lang.String;@6a0094c9,[Ljava.lang.String;@51a6cc2a,[Ljava.lang.String;@10fda3d0),Annotation([Ljava.lang.String;@2123064f,[Ljava.lang.String;@4f6b687e,[Ledu.cmu.lti.nlp.amr.Entity;@28cb3a25))
AMR:
(a2 / and, op, t3 / tank)
(a3 / and, beneficiary, a2 / and)
(a3 / and, op, i / imager)
(a3 / and, op, t5 / transfer-01)
(a4 / and, op, a3 / and)
(a4 / and, op, p / product)
(a4 / and, op, s / system)
(c / country, name, n4 / name)
(c2 / country, name, n5 / name)
(c3 / country, name, n7 / name)
(d / determine-01, ARG1, c2 / country)
(i / imager, mod, t4 / thermal)
(n / name, op, "T-72")
(n2 / name, op, "T-72")
(n3 / name, op, "-")
(n3 / name, op, "-")
(n3 / name, op, "72")
(n3 / name, op, "Russia")
(n3 / name, op, "T")
(n3 / name, op, "made")
(n4 / name, op, "India")
(n5 / name, op, "India")
(n6 / name, op, "2002-5")
(n6 / name, op, "Mirage")
(n7 / name, op, "France")
(o / organization, name, n3 / name)
(o2 / offer-01, ARG0, c3 / country)
(o2 / offer-01, ARG1, a3 / and)
(p / product, name, n6 / name)
(s / system, beneficiary, a / artillery)
(t / tank, mod, 9 / 90)
(t / tank, poss, c2 / country)
(t2 / tank, name, n / name)
(t2 / tank, poss, c2 / country)
(t3 / tank, mod, o / organization)
(t3 / tank, name, n2 / name)
(t3 / tank, poss, c / country)
(t3 / tank, poss, c2 / country)
(t5 / transfer-01, ARG1, t6 / technology)
(t5 / transfer-01, ARG6, a5 / along)
(u / upgrade-02, ARG1, p / product)

Decoded in 3,021,721 microseconds
Sentence: France agreed to --

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 1-2:  agreed => agree-01
Span 0-1:  France => (country :name (name :op "France"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(1,2,List(0),agreed,agree-01,false), Span(0,1,List(3, 2, 1),France,(country :name (name :op "France")),false)),Map(2 -> name, 1 -> country, 0 -> agree-01, 3 -> "France"),Map(n -> name, a -> agree-01, c -> country))),[Ljava.lang.String;@5555ffcf,Annotation([Ljava.lang.String;@6cfd9a54,[Ljava.lang.String;@78c1372d,[Ljava.lang.String;@9aa2002),Annotation([Ljava.lang.String;@73fb1d7f,[Ljava.lang.String;@73d4066e,[Ledu.cmu.lti.nlp.amr.Dependency;@25d2f66),Annotation([Ljava.lang.String;@5a2fa51f,[Ljava.lang.String;@71945bc0,[Ljava.lang.String;@22a0d4ea),Annotation([Ljava.lang.String;@49ede9c7,[Ljava.lang.String;@6ecdbab8,[Ledu.cmu.lti.nlp.amr.Entity;@3dd4a6fa))
AMR:
(a / agree-01, ARG0, c / country)
(c / country, name, n / name)
(n / name, op, "France")

Decoded in 6,500 microseconds
Sentence: string high-intensity mines on the line of control in Kashmir.

NER Entity: (country :name (name :op "Kashmir"))
NER Entity: (country :name (name :op "Kashmir"))
Spans:
Span 9-10:  control => control-01
Span 1-2:  high => high
Span 3-4:  intensity => intensity
Span 11-12:  Kashmir => (world-region :name (name :op "Kashmir"))
Span 7-8:  line => line
Span 4-5:  mines => mine
Span 0-1:  string => string-01

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Kashmir,(world-region :name (name :op "Kashmir")),false), Span(9,10,List(3),control,control-01,false), Span(7,8,List(4),line,line,false), Span(4,5,List(5),mines,mine,false), Span(3,4,List(6),intensity,intensity,false), Span(1,2,List(7),high,high,false), Span(0,1,List(8),string,string-01,false)),Map(2 -> "Kashmir", 5 -> mine, 8 -> string-01, 7 -> high, 1 -> name, 4 -> line, 6 -> intensity, 0 -> world-region, 3 -> control-01),Map(n -> name, w -> world-region, h -> high, s -> string-01, m -> mine, i -> intensity, l -> line, c -> control-01))),[Ljava.lang.String;@19f7222e,Annotation([Ljava.lang.String;@3f725306,[Ljava.lang.String;@3c69362a,[Ljava.lang.String;@2412a42b),Annotation([Ljava.lang.String;@45404d5,[Ljava.lang.String;@29138d3a,[Ledu.cmu.lti.nlp.amr.Dependency;@5cbe2654),Annotation([Ljava.lang.String;@6dbcf214,[Ljava.lang.String;@496a31da,[Ljava.lang.String;@7c251f90),Annotation([Ljava.lang.String;@51841ac6,[Ljava.lang.String;@5ba26eb0,[Ledu.cmu.lti.nlp.amr.Entity;@435e60ff))
AMR:
(c / control-01, ARG1, w / world-region)
(i / intensity, mod, h / high)
(l / line, mod, c / control-01)
(m / mine, mod, i / intensity)
(n / name, op, "Kashmir")
(s / string-01, ARG1, m / mine)
(s / string-01, location, l / line)
(w / world-region, name, n / name)

Decoded in 56,378 microseconds
Sentence: check cross-border terrorism.

Spans:
Span 3-4:  border => border-01
Span 0-1:  check => check-07
Span 1-2:  cross => cross-02
Span 4-5:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),terrorism,terrorism,false), Span(3,4,List(1),border,border-01,false), Span(1,2,List(2),cross,cross-02,false), Span(0,1,List(3),check,check-07,false)),Map(2 -> cross-02, 1 -> border-01, 0 -> terrorism, 3 -> check-07),Map(b -> border-01, t -> terrorism, c -> cross-02, c2 -> check-07))),[Ljava.lang.String;@17d32e9b,Annotation([Ljava.lang.String;@66f0548d,[Ljava.lang.String;@2e6f610d,[Ljava.lang.String;@1e86a5a7),Annotation([Ljava.lang.String;@10afe71a,[Ljava.lang.String;@741f8dbe,[Ledu.cmu.lti.nlp.amr.Dependency;@212dfd39),Annotation([Ljava.lang.String;@a2ddf26,[Ljava.lang.String;@65d57e4e,[Ljava.lang.String;@6daf7d37),Annotation([Ljava.lang.String;@23a5818e,[Ljava.lang.String;@4715ae33,[Ledu.cmu.lti.nlp.amr.Entity;@9fc9f91))
AMR:
(c / cross-02, ARG0, t / terrorism)
(c / cross-02, ARG1, b / border-01)
(c2 / check-07, ARG1, t / terrorism)

Decoded in 9,381 microseconds
Sentence: upgrade fire control systems of Indian tanks.

NER Entity: (thing :name (name :op "Indian"))
NER Entity: (thing :name (name :op "Indian"))
Spans:
Span 2-3:  control => control-01
Span 1-2:  fire => fire-01
Span 5-6:  Indian => (country :name (name :op "India"))
Span 3-4:  systems => system
Span 6-7:  tanks => tank
Span 0-1:  upgrade => upgrade-02

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),tanks,tank,false), Span(5,6,List(3, 2, 1),Indian,(country :name (name :op "India")),false), Span(3,4,List(4),systems,system,false), Span(2,3,List(5),control,control-01,false), Span(1,2,List(6),fire,fire-01,false), Span(0,1,List(7),upgrade,upgrade-02,false)),Map(2 -> name, 5 -> control-01, 7 -> upgrade-02, 1 -> country, 4 -> system, 6 -> fire-01, 0 -> tank, 3 -> "India"),Map(n -> name, t -> tank, s -> system, u -> upgrade-02, c -> country, f -> fire-01, c2 -> control-01))),[Ljava.lang.String;@1fac1d5c,Annotation([Ljava.lang.String;@108a46d6,[Ljava.lang.String;@7a8406c2,[Ljava.lang.String;@17690e14),Annotation([Ljava.lang.String;@6850b758,[Ljava.lang.String;@2a2ef072,[Ledu.cmu.lti.nlp.amr.Dependency;@704641e3),Annotation([Ljava.lang.String;@2f00f851,[Ljava.lang.String;@4207609e,[Ljava.lang.String;@1f77b5cc),Annotation([Ljava.lang.String;@5d7ca698,[Ljava.lang.String;@75961f16,[Ledu.cmu.lti.nlp.amr.Entity;@c6c82aa))
AMR:
(c / country, name, n / name)
(c2 / control-01, ARG0, s / system)
(c2 / control-01, ARG1, f / fire-01)
(n / name, op, "India")
(s / system, poss, t / tank)
(t / tank, mod, c / country)
(u / upgrade-02, ARG1, s / system)

Decoded in 72,509 microseconds
Sentence: Before delegation-level talks on 28 April 2003 Alliot-Marie had a 1-to-1 meeting with Indian Defense Minister George Fernandes.

mkDayMonthYear(28	April	2003,28,April,2003)
NER Entity: (person :name (name :op "Alliot" :op "-" :op "Marie"))
NER Entity: (thing :name (name :op "Indian"))
NER Entity: (person :name (name :op "George" :op "Fernandes"))
Spans:
Span 18-19:  1 => 1
Span 14-15:  1 => 1
Span 6-9:  28 April 2003 => (date-entity :day 28 :month 4 :year 2003)
Span 9-12:  Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Span 0-1:  Before => before
Span 22-23:  Defense => defense
Span 1-2:  delegation => delegation
Span 21-22:  Indian => (country :name (name :op "India"))
Span 3-4:  level => level
Span 19-20:  meeting => meet-03
Span 23-24:  Minister => (have-org-role-91 :ARG2 minister)
Span 4-5:  talks => talk-01
Span 16-18:  to - => (person :name (name :op "George" :op "Fernandes"))

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(1, 0),Minister,(have-org-role-91 :ARG2 minister),false), Span(22,23,List(2),Defense,defense,false), Span(21,22,List(5, 4, 3),Indian,(country :name (name :op "India")),false), Span(19,20,List(6),meeting,meet-03,false), Span(18,19,List(7),1,1,false), Span(16,18,List(11, 10, 9, 8),to -,(person :name (name :op "George" :op "Fernandes")),false), Span(14,15,List(12),1,1,false), Span(9,12,List(15, 14, 13),Alliot - Marie,(person :name (name :op "Alliot-Marie")),false), Span(6,9,List(19, 18, 17, 16),28 April 2003,(date-entity :day 28 :month 4 :year 2003),false), Span(4,5,List(20),talks,talk-01,false), Span(3,4,List(21),level,level,false), Span(1,2,List(22),delegation,delegation,false), Span(0,1,List(23),Before,before,false)),Map(2 -> defense, 5 -> "India", 12 -> 1, 15 -> "Alliot-Marie", 8 -> person, 21 -> level, 18 -> 4, 7 -> 1, 17 -> 28, 1 -> minister, 23 -> before, 4 -> name, 11 -> "Fernandes", 14 -> name, 20 -> talk-01, 6 -> meet-03, 22 -> delegation, 0 -> have-org-role-91, 9 -> name, 16 -> date-entity, 19 -> 2003, 3 -> country, 10 -> "George", 13 -> person),Map(n -> name, h -> have-org-role-91, 2 -> 28, b -> before, t -> talk-01, 12 -> 1, d3 -> delegation, m2 -> meet-03, p2 -> person, m -> minister, d -> defense, 1 -> 1, p -> person, 4 -> 4, n3 -> name, d2 -> date-entity, c -> country, l -> level, 22 -> 2003, n2 -> name))),[Ljava.lang.String;@2e179f3e,Annotation([Ljava.lang.String;@16e7b402,[Ljava.lang.String;@534c6767,[Ljava.lang.String;@3bddc676),Annotation([Ljava.lang.String;@29a1505c,[Ljava.lang.String;@24db6ce,[Ledu.cmu.lti.nlp.amr.Dependency;@320a8ebf),Annotation([Ljava.lang.String;@67b100fe,[Ljava.lang.String;@44b18fe4,[Ljava.lang.String;@2ba5aa7a),Annotation([Ljava.lang.String;@4d3ca6c7,[Ljava.lang.String;@22e5f96e,[Ledu.cmu.lti.nlp.amr.Entity;@6a638c79))
AMR:
(1 / 1, mod, p / person)
(b / before, op, t / talk-01)
(c / country, name, n / name)
(d2 / date-entity, day, 2 / 28)
(d2 / date-entity, month, 4 / 4)
(d2 / date-entity, year, 22 / 2003)
(d3 / delegation, mod, l / level)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, d / defense)
(m2 / meet-03, ARG0, p2 / person)
(m2 / meet-03, ARG1, p / person)
(m2 / meet-03, location, c / country)
(m2 / meet-03, time, b / before)
(n / name, op, "India")
(n2 / name, op, "Fernandes")
(n2 / name, op, "George")
(n3 / name, op, "Alliot-Marie")
(p / person, name, n2 / name)
(p / person, quant, 12 / 1)
(p2 / person, name, n3 / name)
(t / talk-01, ARG1, d3 / delegation)
(t / talk-01, time, d2 / date-entity)

Decoded in 346,042 microseconds
Sentence: Alliot-Marie arrived on Sunday.

NER Entity: (person :name (name :op "Alliot" :op "-" :op "Marie"))
Spans:
Span 0-3:  Alliot - Marie => (person :name (name :op "Alliot-Marie"))
Span 3-4:  arrived => arrive-01
Span 5-6:  Sunday => sunday

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(0),Sunday,sunday,false), Span(3,4,List(1),arrived,arrive-01,false), Span(0,3,List(4, 3, 2),Alliot - Marie,(person :name (name :op "Alliot-Marie")),false)),Map(2 -> person, 1 -> arrive-01, 4 -> "Alliot-Marie", 0 -> sunday, 3 -> name),Map(n -> name, s -> sunday, p -> person, a -> arrive-01))),[Ljava.lang.String;@6c931d35,Annotation([Ljava.lang.String;@44b194fe,[Ljava.lang.String;@49122b8f,[Ljava.lang.String;@3fe46690),Annotation([Ljava.lang.String;@4beabeec,[Ljava.lang.String;@3b4d50b,[Ledu.cmu.lti.nlp.amr.Dependency;@5b22d8a1),Annotation([Ljava.lang.String;@476ee5b3,[Ljava.lang.String;@59ed3e6c,[Ljava.lang.String;@7cd4a4d7),Annotation([Ljava.lang.String;@317e9c3c,[Ljava.lang.String;@18da4dd,[Ledu.cmu.lti.nlp.amr.Entity;@31a3f4de))
AMR:
(a / arrive-01, ARG1, p / person)
(a / arrive-01, ARG4, s / sunday)
(n / name, op, "Alliot-Marie")
(p / person, name, n / name)

Decoded in 25,426 microseconds
Sentence: 2003-06-24

mkDayMonthYear(2003-06-24,24,06,2003)
mkDayMonthYear(2003-06-24,24,06,2003)
Spans:
Span 0-1:  2003-06-24 => (date-entity :day 24 :month 6 :year 2003)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2003-06-24,(date-entity :day 24 :month 6 :year 2003),false)),Map(2 -> 6, 1 -> 24, 0 -> date-entity, 3 -> 2003),Map(2 -> 24, d -> date-entity, 6 -> 6, 22 -> 2003))),[Ljava.lang.String;@68880c21,Annotation([Ljava.lang.String;@2dd2e270,[Ljava.lang.String;@4195105b,[Ljava.lang.String;@6f3e19b3),Annotation([Ljava.lang.String;@47ffe971,[Ljava.lang.String;@7d04529c,[Ledu.cmu.lti.nlp.amr.Dependency;@14fa92af),Annotation([Ljava.lang.String;@b16e202,[Ljava.lang.String;@339a3670,[Ljava.lang.String;@6cd5122d),Annotation([Ljava.lang.String;@2c7a8af2,[Ljava.lang.String;@10c07b8d,[Ledu.cmu.lti.nlp.amr.Entity;@720bf653))
AMR:
(d / date-entity, day, 2 / 24)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 22 / 2003)

Decoded in 6,878 microseconds
Sentence: France (FR)

NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 0-1:  France => (country :name (name :op "France"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),France,(country :name (name :op "France")),false)),Map(2 -> "France", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@360bc645,Annotation([Ljava.lang.String;@4edef76c,[Ljava.lang.String;@5d51e129,[Ljava.lang.String;@70c53dbe),Annotation([Ljava.lang.String;@1894e40d,[Ljava.lang.String;@21c815e4,[Ledu.cmu.lti.nlp.amr.Dependency;@7342e05d),Annotation([Ljava.lang.String;@2a331b46,[Ljava.lang.String;@15383681,[Ljava.lang.String;@743e66f7),Annotation([Ljava.lang.String;@109a2025,[Ljava.lang.String;@2241f05b,[Ledu.cmu.lti.nlp.amr.Entity;@761956ac))
AMR:
(c / country, name, n / name)
(n / name, op, "France")

Decoded in 4,431 microseconds
Sentence: International; Government; dissent; crime; terrorism; leader

Spans:
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 6-7:  crime => crime
Span 4-5:  dissent => dissent-01
Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 10-11:  leader => (person :ARG0-of lead-02)
Span 8-9:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),leader,(person :ARG0-of lead-02),false), Span(9,10,List(2),;,and,false), Span(8,9,List(3),terrorism,terrorism,false), Span(7,8,List(4),;,and,false), Span(6,7,List(5),crime,crime,false), Span(5,6,List(6),;,and,false), Span(4,5,List(7),dissent,dissent-01,false), Span(3,4,List(8),;,and,false), Span(2,3,List(10, 9),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(11),;,and,false), Span(0,1,List(12),International,international,false)),Map(2 -> and, 5 -> crime, 12 -> international, 8 -> and, 7 -> dissent-01, 1 -> lead-02, 4 -> and, 11 -> and, 6 -> and, 0 -> person, 9 -> government-organization, 3 -> terrorism, 10 -> govern-01),Map(t -> terrorism, a3 -> and, d -> dissent-01, g2 -> govern-01, p -> person, g -> government-organization, a -> and, a5 -> and, a2 -> and, i -> international, c -> crime, l -> lead-02, a4 -> and))),[Ljava.lang.String;@71978f46,Annotation([Ljava.lang.String;@304d0259,[Ljava.lang.String;@1d23ff23,[Ljava.lang.String;@2133661d),Annotation([Ljava.lang.String;@6c9320c2,[Ljava.lang.String;@3414a8c3,[Ledu.cmu.lti.nlp.amr.Dependency;@36cc9385),Annotation([Ljava.lang.String;@cf518cf,[Ljava.lang.String;@7915bca3,[Ljava.lang.String;@68d651f2),Annotation([Ljava.lang.String;@3ad4a7d6,[Ljava.lang.String;@1e43e323,[Ledu.cmu.lti.nlp.amr.Entity;@4a67b4ec))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, t / terrorism)
(a4 / and, op, a / and)
(a4 / and, op, a3 / and)
(a4 / and, op, p / person)
(a5 / and, op, a4 / and)
(a5 / and, op, c / crime)
(a5 / and, op, d / dissent-01)
(a5 / and, op, g / government-organization)
(a5 / and, op, i / international)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p / person)

Decoded in 70,560 microseconds
Sentence: The French foreign minister characterizes recent raids on People's Mujahedeen in Paris as part of fight on terrorism.

NER Entity: (thing :name (name :op "French"))
NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (thing :name (name :op "French"))
Spans:
Span 4-5:  characterizes => characterize-01
Span 16-17:  fight => fight-01
Span 2-3:  foreign => foreign
Span 1-2:  French => (country :name (name :op "France"))
Span 3-4:  minister => (have-org-role-91 :ARG2 minister)
Span 12-13:  Paris => (city :name (name :op "Paris"))
Span 8-10:  People 's => (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
Span 6-7:  raids => raid-01
Span 5-6:  recent => recent
Span 18-19:  terrorism => terrorism

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),terrorism,terrorism,false), Span(16,17,List(1),fight,fight-01,false), Span(12,13,List(4, 3, 2),Paris,(city :name (name :op "Paris")),false), Span(8,10,List(9, 8, 7, 6, 5),People 's,(organization :name (name :op "People" :op "'s" :op "Mujahedeen")),false), Span(6,7,List(10),raids,raid-01,false), Span(5,6,List(11),recent,recent,false), Span(4,5,List(12),characterizes,characterize-01,false), Span(3,4,List(14, 13),minister,(have-org-role-91 :ARG2 minister),false), Span(2,3,List(15),foreign,foreign,false), Span(1,2,List(18, 17, 16),French,(country :name (name :op "France")),false)),Map(2 -> city, 5 -> organization, 12 -> characterize-01, 15 -> foreign, 8 -> "'s", 18 -> "France", 7 -> "People", 17 -> name, 1 -> fight-01, 4 -> "Paris", 11 -> recent, 14 -> minister, 6 -> name, 0 -> terrorism, 9 -> "Mujahedeen", 16 -> country, 3 -> name, 10 -> raid-01, 13 -> have-org-role-91),Map(n -> name, h -> have-org-role-91, t -> terrorism, m -> minister, r2 -> recent, n3 -> name, c3 -> country, r -> raid-01, c -> city, f2 -> foreign, f -> fight-01, o -> organization, n2 -> name, c2 -> characterize-01))),[Ljava.lang.String;@10643593,Annotation([Ljava.lang.String;@f91da5e,[Ljava.lang.String;@eca6a74,[Ljava.lang.String;@79fd6f95),Annotation([Ljava.lang.String;@48840594,[Ljava.lang.String;@49c675f0,[Ledu.cmu.lti.nlp.amr.Dependency;@14823f76),Annotation([Ljava.lang.String;@6917bb4,[Ljava.lang.String;@6ed16657,[Ljava.lang.String;@1442f788),Annotation([Ljava.lang.String;@113e13f9,[Ljava.lang.String;@1c7f96b1,[Ledu.cmu.lti.nlp.amr.Entity;@7979b8b7))
AMR:
(c / city, name, n / name)
(c2 / characterize-01, ARG1, r / raid-01)
(c3 / country, name, n3 / name)
(f / fight-01, ARG0, c / city)
(f / fight-01, ARG1, t / terrorism)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, c3 / country)
(m / minister, mod, f2 / foreign)
(n / name, op, "Paris")
(n2 / name, op, "'s")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People")
(n3 / name, op, "France")
(o / organization, name, n2 / name)
(r / raid-01, ARG0, t / terrorism)
(r / raid-01, ARG1, o / organization)
(r / raid-01, time, r2 / recent)

Decoded in 785,884 microseconds
Sentence: French Foreign Minister Dominique de Villepin said on 030624 that the French Government considers the crackdown of the Iranian armed opposition group the People's Mujahedeen as part of the operations against terrorism.

NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Dominique" :op "de" :op "Villepin"))
mkDayMonthYear(030624,24,06,2003)
mkDayMonthYear(030624,24,06,03)
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "French"))
mkDayMonthYear(030624,24,06,2003)
mkDayMonthYear(030624,24,06,03)
NER Entity: (thing :name (name :op "French"))
Spans:
Span 8-9:  030624 => (date-entity :day 24 :month 6 :year 03)
Span 19-20:  armed => arm-01
Span 13-14:  considers => consider-01
Span 15-16:  crackdown => crack-06
Span 3-6:  Dominique de Villepin => (person :name (name :op "Villepin" :op "de" :op "Dominique"))
Span 1-2:  Foreign => foreign
Span 11-12:  French => (country :name (name :op "France"))
Span 0-1:  French => (country :name (name :op "France"))
Span 12-13:  Government => (government-organization :ARG0-of govern-01)
Span 21-22:  group => group
Span 18-19:  Iranian => (country :name (name :op "Iran"))
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 30-31:  operations => operation
Span 20-21:  opposition => oppose-01
Span 23-25:  People 's => (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
Span 6-7:  said => say-01
Span 32-33:  terrorism => terrorism

Langrangian relaxation converged after 97 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),terrorism,terrorism,false), Span(30,31,List(1),operations,operation,false), Span(23,25,List(6, 5, 4, 3, 2),People 's,(organization :name (name :op "People" :op "'s" :op "Mujahedeen")),false), Span(21,22,List(7),group,group,false), Span(20,21,List(8),opposition,oppose-01,false), Span(19,20,List(9),armed,arm-01,false), Span(18,19,List(12, 11, 10),Iranian,(country :name (name :op "Iran")),false), Span(15,16,List(13),crackdown,crack-06,false), Span(13,14,List(14),considers,consider-01,false), Span(12,13,List(16, 15),Government,(government-organization :ARG0-of govern-01),false), Span(11,12,List(19, 18, 17),French,(country :name (name :op "France")),false), Span(8,9,List(23, 22, 21, 20),030624,(date-entity :day 24 :month 6 :year 03),false), Span(6,7,List(24),said,say-01,false), Span(3,6,List(29, 28, 27, 26, 25),Dominique de Villepin,(person :name (name :op "Villepin" :op "de" :op "Dominique")),false), Span(2,3,List(31, 30),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(32),Foreign,foreign,false), Span(0,1,List(35, 34, 33),French,(country :name (name :op "France")),false)),Map(30 -> have-org-role-91, 2 -> organization, 5 -> "'s", 33 -> country, 27 -> "Villepin", 12 -> "Iran", 8 -> oppose-01, 15 -> government-organization, 21 -> 24, 18 -> name, 24 -> say-01, 35 -> "France", 7 -> group, 1 -> operation, 17 -> country, 23 -> 03, 26 -> name, 4 -> "People", 11 -> name, 32 -> foreign, 14 -> consider-01, 29 -> "Dominique", 20 -> date-entity, 34 -> name, 28 -> "de", 6 -> "Mujahedeen", 9 -> arm-01, 0 -> terrorism, 22 -> 6, 16 -> govern-01, 19 -> "France", 10 -> country, 3 -> name, 31 -> minister, 25 -> person, 13 -> crack-06),Map(n -> name, g3 -> govern-01, h -> have-org-role-91, 2 -> 24, t -> terrorism, o3 -> oppose-01, c4 -> country, n4 -> name, s -> say-01, d -> date-entity, m -> minister, g2 -> government-organization, g -> group, p -> person, c3 -> consider-01, a -> arm-01, n3 -> name, o2 -> organization, c -> country, 6 -> 6, 0 -> 03, f -> foreign, o -> operation, c2 -> crack-06, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@7a04fea7,Annotation([Ljava.lang.String;@1bc49bc5,[Ljava.lang.String;@7b6e5c12,[Ljava.lang.String;@4f66ffc8),Annotation([Ljava.lang.String;@124ac145,[Ljava.lang.String;@2def7a7a,[Ledu.cmu.lti.nlp.amr.Dependency;@24e83d19),Annotation([Ljava.lang.String;@5c080ef3,[Ljava.lang.String;@188cbcde,[Ljava.lang.String;@4ee6291f),Annotation([Ljava.lang.String;@2b03d52f,[Ljava.lang.String;@37e0292a,[Ledu.cmu.lti.nlp.amr.Entity;@4af70944))
AMR:
(a / arm-01, ARG1, g / group)
(c / country, name, n2 / name)
(c2 / crack-06, ARG1, g / group)
(c3 / consider-01, ARG0, g2 / government-organization)
(c3 / consider-01, ARG1, c2 / crack-06)
(c4 / country, name, n3 / name)
(c5 / country, name, n5 / name)
(d / date-entity, day, 2 / 24)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 0 / 03)
(g / group, mod, c / country)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c5 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o2 / organization)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, f / foreign)
(n / name, op, "'s")
(n / name, op, "Mujahedeen")
(n / name, op, "People")
(n2 / name, op, "Iran")
(n3 / name, op, "France")
(n4 / name, op, "Dominique")
(n4 / name, op, "Villepin")
(n4 / name, op, "de")
(n5 / name, op, "France")
(o / operation, prep-against, t / terrorism)
(o2 / organization, name, n / name)
(o3 / oppose-01, ARG0, g / group)
(o3 / oppose-01, ARG1, c4 / country)
(p / person, name, n4 / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, c3 / consider-01)
(s / say-01, time, d / date-entity)
(t / terrorism, op, h / have-org-role-91)

Decoded in 5,034,476 microseconds
Sentence: At French radio France Info de Villepin said that the People's Mujahedeen Organization has claimed responsibility for numerous attacks in Iran and said that this dimension of terrorism can not be hidden.

NER Entity: (thing :name (name :op "French"))
NER Entity: (country :name (name :op "France"))
NER Entity: (organization :name (name :op "Info"))
NER Entity: (person :name (name :op "de" :op "Villepin"))
NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen" :op "Organization"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (organization :name (name :op "Info"))
NER Entity: (thing :name (name :op "French"))
Spans:
Span 22-23:  and => and
Span 19-20:  attacks => attack-01
Span 29-30:  can => possible
Span 15-16:  claimed => claim-01
Span 5-7:  de Villepin => (person :name (name :op "Villepin" :op "de"))
Span 26-27:  dimension => dimension
Span 3-5:  France Info => (name :op "Info" :op "France")
Span 1-2:  French => (country :name (name :op "France"))
Span 32-33:  hidden => hide-01
Span 21-22:  Iran => (country :name (name :op "Iran"))
Span 18-19:  numerous => numerous
Span 13-14:  Organization => organization
Span 10-13:  People 's Mujahedeen => (organization :name (name :op "People" :op "'s" :op "Mujahedeen" :op "Organization"))
Span 2-3:  radio => radio
Span 16-17:  responsibility => responsible-41
Span 23-24:  said => say-01
Span 7-8:  said => say-01
Span 28-29:  terrorism => terrorism
Span 25-26:  this => this

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),hidden,hide-01,false), Span(29,30,List(1),can,possible,false), Span(28,29,List(2),terrorism,terrorism,false), Span(26,27,List(3),dimension,dimension,false), Span(25,26,List(4),this,this,false), Span(23,24,List(5),said,say-01,false), Span(22,23,List(6),and,and,false), Span(21,22,List(9, 8, 7),Iran,(country :name (name :op "Iran")),false), Span(19,20,List(10),attacks,attack-01,false), Span(18,19,List(11),numerous,numerous,false), Span(16,17,List(12),responsibility,responsible-41,false), Span(15,16,List(13),claimed,claim-01,false), Span(13,14,List(14),Organization,organization,false), Span(10,13,List(20, 19, 18, 17, 16, 15),People 's Mujahedeen,(organization :name (name :op "People" :op "'s" :op "Mujahedeen" :op "Organization")),false), Span(7,8,List(21),said,say-01,false), Span(5,7,List(25, 24, 23, 22),de Villepin,(person :name (name :op "Villepin" :op "de")),false), Span(3,5,List(28, 27, 26),France Info,(name :op "Info" :op "France"),false), Span(2,3,List(29),radio,radio,false), Span(1,2,List(32, 31, 30),French,(country :name (name :op "France")),false)),Map(30 -> country, 2 -> terrorism, 5 -> say-01, 27 -> "Info", 12 -> responsible-41, 8 -> name, 15 -> organization, 21 -> say-01, 18 -> "'s", 24 -> "Villepin", 7 -> country, 1 -> possible, 17 -> "People", 23 -> name, 26 -> name, 4 -> this, 11 -> numerous, 32 -> "France", 14 -> organization, 29 -> radio, 20 -> "Organization", 28 -> "France", 6 -> and, 9 -> "Iran", 0 -> hide-01, 22 -> person, 16 -> name, 19 -> "Mujahedeen", 10 -> attack-01, 3 -> dimension, 31 -> name, 25 -> "de", 13 -> claim-01),Map(n -> name, h -> hide-01, s2 -> say-01, t -> terrorism, p2 -> person, n4 -> name, s -> say-01, d -> dimension, r2 -> radio, p -> possible, c3 -> country, n3 -> name, a -> and, n6 -> name, o2 -> organization, t2 -> this, a2 -> attack-01, r -> responsible-41, c -> country, o -> organization, n2 -> numerous, c2 -> claim-01, n5 -> name))),[Ljava.lang.String;@35267fd4,Annotation([Ljava.lang.String;@397ef2,[Ljava.lang.String;@36a6bea6,[Ljava.lang.String;@44e93c1f),Annotation([Ljava.lang.String;@42373389,[Ljava.lang.String;@9b21bd3,[Ledu.cmu.lti.nlp.amr.Dependency;@a62c7cd),Annotation([Ljava.lang.String;@7661b5a,[Ljava.lang.String;@7c36db44,[Ljava.lang.String;@65c33b92),Annotation([Ljava.lang.String;@7903d448,[Ljava.lang.String;@4e08acf9,[Ledu.cmu.lti.nlp.amr.Entity;@42ea287))
AMR:
(a / and, op, c2 / claim-01)
(a / and, op, s / say-01)
(a2 / attack-01, ARG1, c / country)
(a2 / attack-01, quant, n2 / numerous)
(c / country, name, n / name)
(c2 / claim-01, ARG0, o / organization)
(c2 / claim-01, ARG1, r / responsible-41)
(c3 / country, name, n6 / name)
(d / dimension, mod, t / terrorism)
(d / dimension, mod, t2 / this)
(h / hide-01, ARG1, d / dimension)
(n / name, op, "Iran")
(n3 / name, op, "'s")
(n3 / name, op, "Mujahedeen")
(n3 / name, op, "Organization")
(n3 / name, op, "People")
(n4 / name, op, "Villepin")
(n4 / name, op, "de")
(n5 / name, op, "France")
(n5 / name, op, "Info")
(n6 / name, op, "France")
(o / organization, name, o2 / organization)
(o2 / organization, name, n3 / name)
(p / possible, domain, h / hide-01)
(p2 / person, name, n4 / name)
(r / responsible-41, ARG1, o / organization)
(r / responsible-41, ARG2, a2 / attack-01)
(r2 / radio, mod, c3 / country)
(r2 / radio, name, n5 / name)
(s / say-01, ARG1, p / possible)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, a / and)
(s2 / say-01, medium, r2 / radio)

Decoded in 627,568 microseconds
Sentence: De Villepin said that the arrests were a decision of justice and that there is no diplomatic factor in this affair.

NER Entity: (person :name (name :op "De" :op "Villepin"))
Spans:
Span 20-21:  affair => affair
Span 11-12:  and => and
Span 5-6:  arrests => arrest-01
Span 0-2:  De Villepin => (person :name (name :op "Villepin" :op "De"))
Span 8-9:  decision => decide-01
Span 16-17:  diplomatic => diplomacy
Span 17-18:  factor => factor
Span 10-11:  justice => justice
Span 15-16:  no => -
Span 2-3:  said => say-01
Span 19-20:  this => this

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),affair,affair,false), Span(19,20,List(1),this,this,false), Span(17,18,List(2),factor,factor,false), Span(16,17,List(3),diplomatic,diplomacy,false), Span(15,16,List(4),no,-,false), Span(11,12,List(5),and,and,false), Span(10,11,List(6),justice,justice,false), Span(8,9,List(7),decision,decide-01,false), Span(5,6,List(8),arrests,arrest-01,false), Span(2,3,List(9),said,say-01,false), Span(0,2,List(13, 12, 11, 10),De Villepin,(person :name (name :op "Villepin" :op "De")),false)),Map(2 -> factor, 5 -> and, 12 -> "Villepin", 8 -> arrest-01, 7 -> decide-01, 1 -> this, 4 -> -, 11 -> name, 6 -> justice, 0 -> affair, 9 -> say-01, 3 -> diplomacy, 10 -> person, 13 -> "De"),Map(n -> name, t -> this, s -> say-01, a3 -> arrest-01, j -> justice, d -> diplomacy, p -> person, a -> affair, d2 -> decide-01, a2 -> and, - -> -, f -> factor))),[Ljava.lang.String;@78cd163b,Annotation([Ljava.lang.String;@1f0b3cfe,[Ljava.lang.String;@14ef2482,[Ljava.lang.String;@65a48602),Annotation([Ljava.lang.String;@75483843,[Ljava.lang.String;@336206d8,[Ledu.cmu.lti.nlp.amr.Dependency;@5ec4ff02),Annotation([Ljava.lang.String;@1f11f64e,[Ljava.lang.String;@2b2f5fcf,[Ljava.lang.String;@858d8b4),Annotation([Ljava.lang.String;@711d1a52,[Ljava.lang.String;@612e21b9,[Ledu.cmu.lti.nlp.amr.Entity;@302edb74))
AMR:
(a / affair, mod, t / this)
(a2 / and, op, d2 / decide-01)
(a2 / and, op, f / factor)
(a3 / arrest-01, ARG1, - / -)
(d2 / decide-01, ARG0, j / justice)
(d2 / decide-01, ARG1, a3 / arrest-01)
(f / factor, mod, d / diplomacy)
(f / factor, topic, a / affair)
(n / name, op, "De")
(n / name, op, "Villepin")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a2 / and)

Decoded in 459,638 microseconds
Sentence: De Villepin said the French had acted strictly on the basis of justice and with the determination to make all efforts to fight terrorism.

NER Entity: (person :name (name :op "De" :op "Villepin"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "French"))
Spans:
Span 6-7:  acted => act-02
Span 19-20:  all => all
Span 13-14:  and => and
Span 0-2:  De Villepin => (person :name (name :op "Villepin" :op "De"))
Span 16-17:  determination => determine-01
Span 20-21:  efforts => effort
Span 22-23:  fight => fight-01
Span 4-5:  French => (country :name (name :op "France"))
Span 12-13:  justice => justice
Span 18-19:  make => make-01
Span 2-3:  said => say-01
Span 7-8:  strictly => strict
Span 23-24:  terrorism => terrorism

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),terrorism,terrorism,false), Span(22,23,List(1),fight,fight-01,false), Span(20,21,List(2),efforts,effort,false), Span(19,20,List(3),all,all,false), Span(18,19,List(4),make,make-01,false), Span(16,17,List(5),determination,determine-01,false), Span(13,14,List(6),and,and,false), Span(12,13,List(7),justice,justice,false), Span(7,8,List(8),strictly,strict,false), Span(6,7,List(9),acted,act-02,false), Span(4,5,List(12, 11, 10),French,(country :name (name :op "France")),false), Span(2,3,List(13),said,say-01,false), Span(0,2,List(17, 16, 15, 14),De Villepin,(person :name (name :op "Villepin" :op "De")),false)),Map(2 -> effort, 5 -> determine-01, 12 -> "France", 15 -> name, 8 -> strict, 7 -> justice, 17 -> "De", 1 -> fight-01, 4 -> make-01, 11 -> name, 14 -> person, 6 -> and, 0 -> terrorism, 9 -> act-02, 16 -> "Villepin", 3 -> all, 10 -> country, 13 -> say-01),Map(e -> effort, n -> name, s2 -> say-01, t -> terrorism, j -> justice, a3 -> act-02, s -> strict, m -> make-01, d -> determine-01, p -> person, a -> all, a2 -> and, c -> country, f -> fight-01, n2 -> name))),[Ljava.lang.String;@7efd28bd,Annotation([Ljava.lang.String;@672b72ba,[Ljava.lang.String;@7718a40f,[Ljava.lang.String;@312b34e3),Annotation([Ljava.lang.String;@26844abb,[Ljava.lang.String;@1a865273,[Ledu.cmu.lti.nlp.amr.Dependency;@288ca5f0),Annotation([Ljava.lang.String;@4068102e,[Ljava.lang.String;@44bd4b0a,[Ljava.lang.String;@6c008c24),Annotation([Ljava.lang.String;@216e0771,[Ljava.lang.String;@21079a12,[Ledu.cmu.lti.nlp.amr.Entity;@fcc6023))
AMR:
(a2 / and, op, j / justice)
(a3 / act-02, ARG0, c / country)
(a3 / act-02, ARG1, a2 / and)
(a3 / act-02, manner, d / determine-01)
(a3 / act-02, manner, s / strict)
(c / country, name, n / name)
(d / determine-01, ARG1, m / make-01)
(e / effort, purpose, f / fight-01)
(e / effort, quant, a / all)
(f / fight-01, ARG1, t / terrorism)
(m / make-01, ARG1, e / effort)
(n / name, op, "France")
(n2 / name, op, "De")
(n2 / name, op, "Villepin")
(p / person, name, n2 / name)
(s2 / say-01, ARG0, p / person)
(s2 / say-01, ARG1, a3 / act-02)

Decoded in 781,652 microseconds
Sentence: The headquarters of the People's Mujahedeen in northwest Paris was raided by the French police 030622.

NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "Paris"))
NER Entity: (thing :name (name :op "French"))
mkDayMonthYear(030622,22,06,2003)
mkDayMonthYear(030622,22,06,03)
mkDayMonthYear(030622,22,06,2003)
mkDayMonthYear(030622,22,06,03)
NER Entity: (thing :name (name :op "French"))
NER Entity: (country :name (name :op "Paris"))
Spans:
Span 16-17:  030622 => (date-entity :year 2003 :day 22 :month 6)
Span 14-15:  French => (country :name (name :op "France"))
Span 1-2:  headquarters => headquarters
Span 8-9:  northwest => northwest
Span 9-10:  Paris => (city :name (name :op "Paris"))
Span 4-6:  People 's => (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
Span 15-16:  police => police
Span 11-12:  raided => raid-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(3, 2, 1, 0),030622,(date-entity :year 2003 :day 22 :month 6),false), Span(15,16,List(4),police,police,false), Span(14,15,List(7, 6, 5),French,(country :name (name :op "France")),false), Span(11,12,List(8),raided,raid-01,false), Span(9,10,List(11, 10, 9),Paris,(city :name (name :op "Paris")),false), Span(8,9,List(12),northwest,northwest,false), Span(4,6,List(17, 16, 15, 14, 13),People 's,(organization :name (name :op "People" :op "'s" :op "Mujahedeen")),false), Span(1,2,List(18),headquarters,headquarters,false)),Map(2 -> 22, 5 -> country, 12 -> northwest, 15 -> "People", 8 -> raid-01, 18 -> headquarters, 7 -> "France", 17 -> "Mujahedeen", 1 -> 2003, 4 -> police, 11 -> "Paris", 14 -> name, 6 -> name, 0 -> date-entity, 9 -> city, 16 -> "'s", 3 -> 6, 10 -> name, 13 -> organization),Map(n -> name, h -> headquarters, 2 -> 2003, n4 -> name, d -> date-entity, p -> police, n3 -> northwest, r -> raid-01, 6 -> 6, c -> country, 22 -> 22, o -> organization, c2 -> city, n2 -> name))),[Ljava.lang.String;@67c5ac52,Annotation([Ljava.lang.String;@36417a54,[Ljava.lang.String;@2b8bb184,[Ljava.lang.String;@472a11ae),Annotation([Ljava.lang.String;@dc79225,[Ljava.lang.String;@30e9ca13,[Ledu.cmu.lti.nlp.amr.Dependency;@46185a1b),Annotation([Ljava.lang.String;@51288417,[Ljava.lang.String;@60cf62ad,[Ljava.lang.String;@1e0895f5),Annotation([Ljava.lang.String;@1ac4ccad,[Ljava.lang.String;@fd9ebde,[Ledu.cmu.lti.nlp.amr.Entity;@14982a82))
AMR:
(c / country, name, n / name)
(c2 / city, name, n2 / name)
(c2 / city, part, n3 / northwest)
(d / date-entity, day, 22 / 22)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2003)
(h / headquarters, location, n3 / northwest)
(n / name, op, "France")
(n2 / name, op, "Paris")
(n4 / name, op, "'s")
(n4 / name, op, "Mujahedeen")
(n4 / name, op, "People")
(o / organization, name, n4 / name)
(o / organization, poss, c / country)
(p / police, mod, c / country)
(r / raid-01, ARG0, p / police)
(r / raid-01, ARG1, h / headquarters)
(r / raid-01, time, d / date-entity)

Decoded in 377,506 microseconds
Sentence: The People's Mujahedeen accused the French authorities of carrying out the operation as part of a deal with the Iranian government.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "French"))
Spans:
Span 4-5:  accused => accuse-01
Span 7-8:  authorities => authority
Span 9-10:  carrying => carry-01
Span 17-18:  deal => deal-01
Span 6-7:  French => (country :name (name :op "France"))
Span 21-22:  government => (government-organization :ARG0-of govern-01)
Span 20-21:  Iranian => (country :name (name :op "Iran"))
Span 12-13:  operation => operation
Span 10-11:  out => out
Span 0-3:  The People 's => (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(1, 0),government,(government-organization :ARG0-of govern-01),false), Span(20,21,List(4, 3, 2),Iranian,(country :name (name :op "Iran")),false), Span(17,18,List(5),deal,deal-01,false), Span(12,13,List(6),operation,operation,false), Span(10,11,List(7),out,out,false), Span(9,10,List(8),carrying,carry-01,false), Span(7,8,List(9),authorities,authority,false), Span(6,7,List(12, 11, 10),French,(country :name (name :op "France")),false), Span(4,5,List(13),accused,accuse-01,false), Span(0,3,List(19, 18, 17, 16, 15, 14),The People 's,(organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen")),false)),Map(2 -> country, 5 -> deal-01, 12 -> "France", 15 -> name, 8 -> carry-01, 18 -> "'s", 7 -> out, 17 -> "People", 1 -> govern-01, 4 -> "Iran", 11 -> name, 14 -> organization, 6 -> operation, 0 -> government-organization, 9 -> authority, 16 -> "The", 19 -> "Mujahedeen", 3 -> name, 10 -> country, 13 -> accuse-01),Map(n -> name, o3 -> organization, d -> deal-01, g2 -> govern-01, g -> government-organization, n3 -> name, a -> authority, c3 -> country, o2 -> out, a2 -> accuse-01, c -> country, o -> operation, c2 -> carry-01, n2 -> name))),[Ljava.lang.String;@4ee5b2d9,Annotation([Ljava.lang.String;@72f8ae0c,[Ljava.lang.String;@323f3c96,[Ljava.lang.String;@6726cc69),Annotation([Ljava.lang.String;@4b6d92e,[Ljava.lang.String;@33899f7a,[Ledu.cmu.lti.nlp.amr.Dependency;@7899de11),Annotation([Ljava.lang.String;@290d10ef,[Ljava.lang.String;@1bc0d349,[Ljava.lang.String;@644ded04),Annotation([Ljava.lang.String;@5292ceca,[Ljava.lang.String;@13d9261f,[Ledu.cmu.lti.nlp.amr.Entity;@e9ef5b6))
AMR:
(a / authority, mod, c3 / country)
(a2 / accuse-01, ARG1, a / authority)
(a2 / accuse-01, ARG6, o3 / organization)
(c / country, name, n / name)
(c2 / carry-01, ARG0, a / authority)
(c2 / carry-01, ARG1, o / operation)
(c2 / carry-01, ARG5, o2 / out)
(c3 / country, name, n2 / name)
(d / deal-01, ARG1, g / government-organization)
(d / deal-01, part, o / operation)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Iran")
(n2 / name, op, "France")
(n3 / name, op, "'s")
(n3 / name, op, "Mujahedeen")
(n3 / name, op, "People")
(n3 / name, op, "The")
(o3 / organization, name, n3 / name)

Decoded in 854,074 microseconds
Sentence: This claim the Iranian government has denied.

NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 1-2:  claim => claim-01
Span 6-7:  denied => deny-01
Span 4-5:  government => (government-organization :ARG0-of govern-01)
Span 3-4:  Iranian => (country :name (name :op "Iran"))
Span 0-1:  This => this

Langrangian relaxation converged after 14 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(0),denied,deny-01,false), Span(4,5,List(2, 1),government,(government-organization :ARG0-of govern-01),false), Span(3,4,List(5, 4, 3),Iranian,(country :name (name :op "Iran")),false), Span(1,2,List(6),claim,claim-01,false), Span(0,1,List(7),This,this,false)),Map(2 -> govern-01, 5 -> "Iran", 7 -> this, 1 -> government-organization, 4 -> name, 6 -> claim-01, 0 -> deny-01, 3 -> country),Map(n -> name, t -> this, d -> deny-01, g2 -> govern-01, g -> government-organization, c -> country, c2 -> claim-01))),[Ljava.lang.String;@5300cac,Annotation([Ljava.lang.String;@4110765e,[Ljava.lang.String;@1ba359bd,[Ljava.lang.String;@62e93c3a),Annotation([Ljava.lang.String;@673919a7,[Ljava.lang.String;@25d93198,[Ledu.cmu.lti.nlp.amr.Dependency;@2436ea2f),Annotation([Ljava.lang.String;@f951a7f,[Ljava.lang.String;@20cece0b,[Ljava.lang.String;@4c777e7b),Annotation([Ljava.lang.String;@5f038248,[Ljava.lang.String;@78e22d35,[Ledu.cmu.lti.nlp.amr.Entity;@2e8a1ab4))
AMR:
(c / country, name, n / name)
(c2 / claim-01, ARG1, t / this)
(d / deny-01, ARG0, g / government-organization)
(d / deny-01, ARG1, c2 / claim-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(n / name, op, "Iran")

Decoded in 84,216 microseconds
Sentence: 17 Mujahedeen members are now under judicial investigation for alleged links to a terrorist organization and for funding terrorist activities.

NER Entity: (organization :name (name :op "Mujahedeen"))
Spans:
Span 0-1:  17 => 17
Span 19-20:  activities => activity
Span 9-10:  alleged => allege-01
Span 15-16:  and => and
Span 17-18:  funding => fund-01
Span 7-8:  investigation => investigate-01
Span 6-7:  judicial => judicial
Span 10-11:  links => link-01
Span 2-3:  members => (have-org-role-91 :ARG2 member)
Span 4-5:  now => now
Span 14-15:  organization => organization
Span 18-19:  terrorist => terrorist
Span 13-14:  terrorist => terrorist

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),activities,activity,false), Span(18,19,List(1),terrorist,terrorist,false), Span(17,18,List(2),funding,fund-01,false), Span(15,16,List(3),and,and,false), Span(14,15,List(4),organization,organization,false), Span(13,14,List(5),terrorist,terrorist,false), Span(10,11,List(6),links,link-01,false), Span(9,10,List(7),alleged,allege-01,false), Span(7,8,List(8),investigation,investigate-01,false), Span(6,7,List(9),judicial,judicial,false), Span(4,5,List(10),now,now,false), Span(2,3,List(12, 11),members,(have-org-role-91 :ARG2 member),false), Span(0,1,List(13),17,17,false)),Map(2 -> fund-01, 5 -> terrorist, 12 -> member, 8 -> investigate-01, 7 -> allege-01, 1 -> terrorist, 4 -> organization, 11 -> have-org-role-91, 6 -> link-01, 0 -> activity, 9 -> judicial, 3 -> and, 10 -> now, 13 -> 17),Map(n -> now, h -> have-org-role-91, t -> terrorist, a3 -> allege-01, j -> judicial, m -> member, 1 -> 17, a -> activity, t2 -> terrorist, a2 -> and, i -> investigate-01, l -> link-01, f -> fund-01, o -> organization))),[Ljava.lang.String;@59f93db8,Annotation([Ljava.lang.String;@1aabf50d,[Ljava.lang.String;@73c9e8e8,[Ljava.lang.String;@de8039f),Annotation([Ljava.lang.String;@1deceb67,[Ljava.lang.String;@582a764a,[Ledu.cmu.lti.nlp.amr.Dependency;@64984b0f),Annotation([Ljava.lang.String;@292158f8,[Ljava.lang.String;@53ec2968,[Ljava.lang.String;@58ff8d79),Annotation([Ljava.lang.String;@7e19755a,[Ljava.lang.String;@5d5c04f9,[Ledu.cmu.lti.nlp.amr.Entity;@6f49d153))
AMR:
(1 / 17, op, f / fund-01)
(a / activity, mod, t / terrorist)
(a2 / and, op, f / fund-01)
(a2 / and, op, l / link-01)
(a3 / allege-01, ARG1, l / link-01)
(f / fund-01, ARG1, a / activity)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(i / investigate-01, ARG1, o / organization)
(i / investigate-01, ARG2, a2 / and)
(i / investigate-01, manner, j / judicial)
(i / investigate-01, time, n / now)
(l / link-01, ARG1, t2 / terrorist)

Decoded in 690,927 microseconds
Sentence: Some 160 people were initially detained in the police crackdown of over 10 of the People's Mujahedeen's locations in France.

NER Entity: (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 12-13:  10 => 10
Span 1-2:  160 => 160
Span 9-10:  crackdown => crack-06
Span 5-6:  detained => detain-01
Span 21-22:  France => (country :name (name :op "France"))
Span 4-5:  initially => initial
Span 19-20:  locations => location
Span 11-12:  over => over
Span 2-3:  people => people
Span 15-17:  People 's => (organization :name (name :op "People" :op "'s" :op "Mujahedeen"))
Span 8-9:  police => police
Span 0-1:  Some => some

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(2, 1, 0),France,(country :name (name :op "France")),false), Span(19,20,List(3),locations,location,false), Span(15,17,List(8, 7, 6, 5, 4),People 's,(organization :name (name :op "People" :op "'s" :op "Mujahedeen")),false), Span(12,13,List(9),10,10,false), Span(11,12,List(10),over,over,false), Span(9,10,List(11),crackdown,crack-06,false), Span(8,9,List(12),police,police,false), Span(5,6,List(13),detained,detain-01,false), Span(4,5,List(14),initially,initial,false), Span(2,3,List(15),people,people,false), Span(1,2,List(16),160,160,false), Span(0,1,List(17),Some,some,false)),Map(2 -> "France", 5 -> name, 12 -> police, 15 -> people, 8 -> "Mujahedeen", 7 -> "'s", 17 -> some, 1 -> name, 4 -> organization, 11 -> crack-06, 14 -> initial, 6 -> "People", 0 -> country, 9 -> 10, 16 -> 160, 3 -> location, 10 -> over, 13 -> detain-01),Map(n -> name, 12 -> 160, p2 -> people, s -> some, d -> detain-01, 1 -> 10, p -> police, o2 -> over, i -> initial, c -> country, l -> location, o -> organization, n2 -> name, c2 -> crack-06))),[Ljava.lang.String;@4b790d86,Annotation([Ljava.lang.String;@7e7f0216,[Ljava.lang.String;@4339baec,[Ljava.lang.String;@62db3891),Annotation([Ljava.lang.String;@61cd1c71,[Ljava.lang.String;@6724cdec,[Ledu.cmu.lti.nlp.amr.Dependency;@6944e53e),Annotation([Ljava.lang.String;@52e04737,[Ljava.lang.String;@5bc7e78e,[Ljava.lang.String;@1a4d1ab7),Annotation([Ljava.lang.String;@546e61d5,[Ljava.lang.String;@4674d90,[Ledu.cmu.lti.nlp.amr.Entity;@60783105))
AMR:
(c / country, name, n / name)
(c2 / crack-06, ARG0, p / police)
(c2 / crack-06, ARG1, l / location)
(c2 / crack-06, part, p2 / people)
(d / detain-01, ARG1, s / some)
(d / detain-01, ARG2, p2 / people)
(d / detain-01, time, i / initial)
(l / location, quant, o2 / over)
(n / name, op, "France")
(n2 / name, op, "'s")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People")
(o / organization, mod, c / country)
(o / organization, name, n2 / name)
(o2 / over, op, 1 / 10)
(p2 / people, mod, c / country)
(p2 / people, quant, 12 / 160)

Decoded in 547,702 microseconds
Sentence: A Paris map with streets related to the United States Embassy marked out, bulletproof jackets, transmission equipment, more than 200 computers and about 9 million US dollars in cash were seized during the police raids.

NER Entity: (country :name (name :op "Paris"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Paris"))
Spans:
Span 22-23:  200 => 200
Span 26-27:  9 => 9
Span 25-26:  about => about
Span 24-25:  and => and
Span 14-15:  bulletproof => bulletproof
Span 31-32:  cash => cash
Span 23-24:  computers => computer
Span 29-30:  dollars => (monetary-quantity :unit dollar)
Span 34-35:  during => during
Span 10-11:  Embassy => embassy
Span 18-19:  equipment => equipment
Span 15-16:  jackets => jacket
Span 2-3:  map => map-01
Span 11-12:  marked => mark-02
Span 20-21:  more => more
Span 12-13:  out => out
Span 1-2:  Paris => (city :name (name :op "Paris"))
Span 36-37:  police => police
Span 37-38:  raids => raid-01
Span 5-6:  related => relate-01
Span 33-34:  seized => seize-01
Span 4-5:  streets => street
Span 17-18:  transmission => transmit-01
Span 8-10:  United States => (country :name (name :op "United" :op "States"))
Span 28-29:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),raids,raid-01,false), Span(36,37,List(1),police,police,false), Span(34,35,List(2),during,during,false), Span(33,34,List(3),seized,seize-01,false), Span(31,32,List(4),cash,cash,false), Span(29,30,List(6, 5),dollars,(monetary-quantity :unit dollar),false), Span(28,29,List(9, 8, 7),US,(country :name (name :op "US")),false), Span(26,27,List(10),9,9,false), Span(25,26,List(11),about,about,false), Span(24,25,List(12),and,and,false), Span(23,24,List(13),computers,computer,false), Span(22,23,List(14),200,200,false), Span(20,21,List(15),more,more,false), Span(18,19,List(16),equipment,equipment,false), Span(17,18,List(17),transmission,transmit-01,false), Span(15,16,List(18),jackets,jacket,false), Span(14,15,List(19),bulletproof,bulletproof,false), Span(12,13,List(20),out,out,false), Span(11,12,List(21),marked,mark-02,false), Span(10,11,List(22),Embassy,embassy,false), Span(8,10,List(26, 25, 24, 23),United States,(country :name (name :op "United" :op "States")),false), Span(5,6,List(27),related,relate-01,false), Span(4,5,List(28),streets,street,false), Span(2,3,List(29),map,map-01,false), Span(1,2,List(32, 31, 30),Paris,(city :name (name :op "Paris")),false)),Map(30 -> city, 2 -> during, 5 -> monetary-quantity, 27 -> relate-01, 12 -> and, 8 -> name, 15 -> more, 21 -> mark-02, 18 -> jacket, 24 -> name, 7 -> country, 1 -> police, 17 -> transmit-01, 23 -> country, 26 -> "States", 4 -> cash, 11 -> about, 32 -> "Paris", 14 -> 200, 29 -> map-01, 20 -> out, 28 -> street, 6 -> dollar, 9 -> "US", 0 -> raid-01, 22 -> embassy, 16 -> equipment, 19 -> bulletproof, 10 -> 9, 3 -> seize-01, 31 -> name, 25 -> "United", 13 -> computer),Map(e -> equipment, m3 -> mark-02, n -> name, 2 -> 200, s2 -> street, t -> transmit-01, b -> bulletproof, m2 -> more, e2 -> embassy, j -> jacket, c4 -> country, s -> seize-01, m -> monetary-quantity, d -> during, r2 -> relate-01, p -> police, n3 -> name, c3 -> computer, a -> about, d2 -> dollar, m4 -> map-01, a2 -> and, r -> raid-01, c -> cash, 9 -> 9, o -> out, c2 -> country, n2 -> name, c5 -> city))),[Ljava.lang.String;@1292071f,Annotation([Ljava.lang.String;@35d5ac51,[Ljava.lang.String;@b606cb6,[Ljava.lang.String;@2a3194c6),Annotation([Ljava.lang.String;@2819c460,[Ljava.lang.String;@30364216,[Ledu.cmu.lti.nlp.amr.Dependency;@38bb9d7a),Annotation([Ljava.lang.String;@1e8ab90f,[Ljava.lang.String;@78d6447a,[Ljava.lang.String;@7a729f84),Annotation([Ljava.lang.String;@1e469dfd,[Ljava.lang.String;@554f0dfb,[Ledu.cmu.lti.nlp.amr.Entity;@1f7076bc))
AMR:
(a / about, op, m / monetary-quantity)
(a2 / and, op, a / about)
(a2 / and, op, c3 / computer)
(a2 / and, op, e / equipment)
(a2 / and, op, j / jacket)
(a2 / and, op, m4 / map-01)
(c2 / country, name, n / name)
(c3 / computer, quant, m2 / more)
(c4 / country, name, n2 / name)
(c5 / city, name, n3 / name)
(d2 / dollar, mod, c / cash)
(d2 / dollar, mod, c2 / country)
(d2 / dollar, mod, c4 / country)
(e2 / embassy, poss, c4 / country)
(j / jacket, mod, b / bulletproof)
(m / monetary-quantity, unit, d2 / dollar)
(m3 / mark-02, ARG1, s2 / street)
(m3 / mark-02, manner, o / out)
(m4 / map-01, ARG1, c5 / city)
(n / name, op, "US")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "Paris")
(r / raid-01, ARG0, p / police)
(r / raid-01, ARG1, 2 / 200)
(r2 / relate-01, ARG1, s2 / street)
(r2 / relate-01, ARG2, e2 / embassy)
(s / seize-01, ARG1, a2 / and)
(s / seize-01, time, d / during)
(s / seize-01, time, r / raid-01)
(t / transmit-01, ARG1, 9 / 9)
(t / transmit-01, instrument, e / equipment)

Decoded in 1,405,571 microseconds
Sentence: The People's Mujahedeen has been classified by the United States, the European Union and Iran as a terrorist organization.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "European" :op "Union"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 15-16:  and => and
Span 6-7:  classified => classify-01
Span 13-15:  European Union => (organization :name (name :op "European" :op "Union"))
Span 16-17:  Iran => (country :name (name :op "Iran"))
Span 20-21:  organization => organization
Span 19-20:  terrorist => terrorist
Span 0-3:  The People 's => (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
Span 9-11:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),organization,organization,false), Span(19,20,List(1),terrorist,terrorist,false), Span(16,17,List(4, 3, 2),Iran,(country :name (name :op "Iran")),false), Span(15,16,List(5),and,and,false), Span(13,15,List(9, 8, 7, 6),European Union,(organization :name (name :op "European" :op "Union")),false), Span(9,11,List(13, 12, 11, 10),United States,(country :name (name :op "United" :op "States")),false), Span(6,7,List(14),classified,classify-01,false), Span(0,3,List(20, 19, 18, 17, 16, 15),The People 's,(organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen")),false)),Map(2 -> country, 5 -> and, 12 -> "United", 15 -> organization, 8 -> "European", 18 -> "People", 7 -> name, 17 -> "The", 1 -> terrorist, 4 -> "Iran", 11 -> name, 14 -> classify-01, 20 -> "Mujahedeen", 6 -> organization, 0 -> organization, 9 -> "Union", 16 -> name, 19 -> "'s", 3 -> name, 10 -> country, 13 -> "States"),Map(n -> name, t -> terrorist, o3 -> organization, n4 -> name, c3 -> classify-01, n3 -> name, a -> and, o2 -> organization, c -> country, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@71904469,Annotation([Ljava.lang.String;@5b9396d3,[Ljava.lang.String;@761e788f,[Ljava.lang.String;@6a472566),Annotation([Ljava.lang.String;@1907874b,[Ljava.lang.String;@5e65afb6,[Ledu.cmu.lti.nlp.amr.Dependency;@5b3a7ef5),Annotation([Ljava.lang.String;@8851ce1,[Ljava.lang.String;@2d9dff65,[Ljava.lang.String;@5ef6fd7f),Annotation([Ljava.lang.String;@5633ed82,[Ljava.lang.String;@767191b1,[Ledu.cmu.lti.nlp.amr.Entity;@34d52ecd))
AMR:
(a / and, op, c / country)
(a / and, op, o2 / organization)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / classify-01, ARG0, a / and)
(c3 / classify-01, ARG1, c2 / country)
(c3 / classify-01, ARG2, o / organization)
(c3 / classify-01, ARG6, o3 / organization)
(n / name, op, "Iran")
(n2 / name, op, "European")
(n2 / name, op, "Union")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "'s")
(n4 / name, op, "Mujahedeen")
(n4 / name, op, "People")
(n4 / name, op, "The")
(o / organization, mod, t / terrorist)
(o2 / organization, name, n2 / name)
(o3 / organization, name, n4 / name)

Decoded in 343,121 microseconds
Sentence: The People's Mujahedeen was formed in the 1960s by college-educated young Iranians and was described as an Islamic leftist Organization.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "Iranians"))
NER Entity: (thing :name (name :op "Islamic"))
NER Entity: (organization :name (name :op "Organization"))
NER Entity: (organization :name (name :op "Organization"))
NER Entity: (thing :name (name :op "Iranians"))
Spans:
Span 8-9:  1960s => 1960
Span 15-16:  and => and
Span 10-11:  college => college
Span 17-18:  described => describe-01
Span 12-13:  educated => (person :ARG1-of educate-01)
Span 5-6:  formed => form-01
Span 14-15:  Iranians => (person :mod (country :name (name :op "Iran")))
Span 20-21:  Islamic => (religious-group :name (name :op "Islam"))
Span 21-22:  leftist => leftist
Span 22-23:  Organization => organization
Span 0-3:  The People 's => (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
Span 13-14:  young => young

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),Organization,organization,false), Span(21,22,List(1),leftist,leftist,false), Span(20,21,List(4, 3, 2),Islamic,(religious-group :name (name :op "Islam")),false), Span(17,18,List(5),described,describe-01,false), Span(15,16,List(6),and,and,false), Span(14,15,List(10, 9, 8, 7),Iranians,(person :mod (country :name (name :op "Iran"))),false), Span(13,14,List(11),young,young,false), Span(12,13,List(13, 12),educated,(person :ARG1-of educate-01),false), Span(10,11,List(14),college,college,false), Span(8,9,List(15),1960s,1960,false), Span(5,6,List(16),formed,form-01,false), Span(0,3,List(22, 21, 20, 19, 18, 17),The People 's,(organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen")),false)),Map(2 -> religious-group, 5 -> describe-01, 12 -> person, 15 -> 1960, 8 -> country, 21 -> "'s", 18 -> name, 7 -> person, 17 -> organization, 1 -> leftist, 4 -> "Islam", 11 -> young, 14 -> college, 20 -> "People", 6 -> and, 22 -> "Mujahedeen", 0 -> organization, 9 -> name, 16 -> form-01, 19 -> "The", 3 -> name, 10 -> "Iran", 13 -> educate-01),Map(e -> educate-01, n -> name, p2 -> person, d -> describe-01, 1 -> 1960, p -> person, y -> young, n3 -> name, a -> and, o2 -> organization, r -> religious-group, c -> country, l -> leftist, f -> form-01, o -> organization, n2 -> name, c2 -> college))),[Ljava.lang.String;@5d21202d,Annotation([Ljava.lang.String;@14b789f6,[Ljava.lang.String;@6eb17ec8,[Ljava.lang.String;@730f9695),Annotation([Ljava.lang.String;@277bf091,[Ljava.lang.String;@fab35b1,[Ledu.cmu.lti.nlp.amr.Dependency;@6a094db2),Annotation([Ljava.lang.String;@65bdd558,[Ljava.lang.String;@1dba4e06,[Ljava.lang.String;@4beaf6bd),Annotation([Ljava.lang.String;@6b2e46af,[Ljava.lang.String;@60325987,[Ledu.cmu.lti.nlp.amr.Entity;@2f37f1f9))
AMR:
(a / and, op, d / describe-01)
(a / and, op, f / form-01)
(a / and, op, p / person)
(c / country, name, n2 / name)
(d / describe-01, ARG1, o2 / organization)
(d / describe-01, ARG2, o / organization)
(e / educate-01, ARG1, p2 / person)
(e / educate-01, location, c2 / college)
(f / form-01, ARG0, p2 / person)
(f / form-01, ARG1, 1 / 1960)
(n / name, op, "Islam")
(n2 / name, op, "Iran")
(n3 / name, op, "'s")
(n3 / name, op, "Mujahedeen")
(n3 / name, op, "People")
(n3 / name, op, "The")
(o / organization, mod, l / leftist)
(o / organization, mod, r / religious-group)
(o2 / organization, name, n3 / name)
(p / person, mod, c / country)
(p2 / person, mod, y / young)
(r / religious-group, name, n / name)

Decoded in 965,014 microseconds
Sentence: The People's Mujahedeen staged terrorist attacks inside Iran in the 1970s and killed several US military personnel and civilians working on defense projects in Teheran.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "Iran"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Teheran"))
NER Entity: (country :name (name :op "Teheran"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Iran"))
Spans:
Span 11-12:  1970s => 1970
Span 18-19:  and => and
Span 12-13:  and => and
Span 6-7:  attacks => attack-01
Span 19-20:  civilians => civilian
Span 22-23:  defense => defense
Span 7-8:  inside => inside
Span 8-9:  Iran => (country :name (name :op "Iran"))
Span 13-14:  killed => kill-01
Span 16-17:  military => military
Span 17-18:  personnel => (have-org-role-91 :ARG2 personnel)
Span 23-24:  projects => project
Span 14-15:  several => several
Span 4-5:  staged => stage-01
Span 25-26:  Teheran => (city :name (name :op "Teheran"))
Span 5-6:  terrorist => terrorist
Span 0-3:  The People 's => (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
Span 15-16:  US => (country :name (name :op "US"))
Span 20-21:  working => work-01

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(2, 1, 0),Teheran,(city :name (name :op "Teheran")),false), Span(23,24,List(3),projects,project,false), Span(22,23,List(4),defense,defense,false), Span(20,21,List(5),working,work-01,false), Span(19,20,List(6),civilians,civilian,false), Span(18,19,List(7),and,and,false), Span(17,18,List(9, 8),personnel,(have-org-role-91 :ARG2 personnel),false), Span(16,17,List(10),military,military,false), Span(15,16,List(13, 12, 11),US,(country :name (name :op "US")),false), Span(14,15,List(14),several,several,false), Span(13,14,List(15),killed,kill-01,false), Span(12,13,List(16),and,and,false), Span(11,12,List(17),1970s,1970,false), Span(8,9,List(20, 19, 18),Iran,(country :name (name :op "Iran")),false), Span(7,8,List(21),inside,inside,false), Span(6,7,List(22),attacks,attack-01,false), Span(5,6,List(23),terrorist,terrorist,false), Span(4,5,List(24),staged,stage-01,false), Span(0,3,List(30, 29, 28, 27, 26, 25),The People 's,(organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen")),false)),Map(30 -> "Mujahedeen", 2 -> "Teheran", 5 -> work-01, 27 -> "The", 12 -> name, 8 -> have-org-role-91, 15 -> kill-01, 21 -> inside, 18 -> country, 24 -> stage-01, 7 -> and, 1 -> name, 17 -> 1970, 23 -> terrorist, 26 -> name, 4 -> defense, 11 -> country, 14 -> several, 29 -> "'s", 20 -> "Iran", 28 -> "People", 6 -> civilian, 9 -> personnel, 0 -> city, 22 -> attack-01, 16 -> and, 19 -> name, 10 -> military, 3 -> project, 25 -> organization, 13 -> "US"),Map(n -> name, w -> work-01, h -> have-org-role-91, s2 -> stage-01, t -> terrorist, k -> kill-01, p2 -> personnel, n4 -> name, a3 -> attack-01, c4 -> country, s -> several, d -> defense, m -> military, 1 -> 1970, p -> project, n3 -> name, a -> and, c3 -> country, i -> inside, a2 -> and, c -> city, o -> organization, c2 -> civilian, n2 -> name))),[Ljava.lang.String;@3374b5bc,Annotation([Ljava.lang.String;@2af69643,[Ljava.lang.String;@587a1cfb,[Ljava.lang.String;@48528634),Annotation([Ljava.lang.String;@5e1d03d7,[Ljava.lang.String;@4047d2d9,[Ledu.cmu.lti.nlp.amr.Dependency;@48d293ee),Annotation([Ljava.lang.String;@146dcfe6,[Ljava.lang.String;@22587507,[Ljava.lang.String;@5c77ba8f),Annotation([Ljava.lang.String;@660f0c,[Ljava.lang.String;@7a0ef219,[Ledu.cmu.lti.nlp.amr.Entity;@1b1f5012))
AMR:
(a / and, op, c2 / civilian)
(a / and, op, c3 / country)
(a2 / and, op, k / kill-01)
(a2 / and, op, s2 / stage-01)
(a3 / attack-01, ARG0, t / terrorist)
(a3 / attack-01, location, i / inside)
(c / city, mod, s / several)
(c / city, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(h / have-org-role-91, ARG1, m / military)
(h / have-org-role-91, ARG2, p2 / personnel)
(i / inside, op, c4 / country)
(k / kill-01, ARG0, 1 / 1970)
(k / kill-01, ARG1, a / and)
(m / military, mod, c3 / country)
(n / name, op, "Teheran")
(n2 / name, op, "US")
(n3 / name, op, "Iran")
(n4 / name, op, "'s")
(n4 / name, op, "Mujahedeen")
(n4 / name, op, "People")
(n4 / name, op, "The")
(o / organization, name, n4 / name)
(p / project, mod, d / defense)
(s2 / stage-01, ARG1, a3 / attack-01)
(s2 / stage-01, ARG6, o / organization)
(w / work-01, ARG0, a / and)
(w / work-01, ARG1, p / project)
(w / work-01, location, c / city)

Decoded in 1,803,630 microseconds
Sentence: The People's Mujahedeen was part of the broad coalition that initially supported the Iranian Revolution and participated in the takeover in 790000 of the US embassy in Teheran.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(790000,00,00,79)
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "Teheran"))
NER Entity: (country :name (name :op "Teheran"))
NER Entity: (country :name (name :op "US"))
mkDayMonthYear(790000,00,00,79)
Spans:
Span 22-23:  790000 => (date-entity :day 0 :month 0 :year 79)
Span 16-17:  and => and
Span 8-9:  broad => broad
Span 9-10:  coalition => coalition
Span 26-27:  embassy => embassy
Span 11-12:  initially => initial
Span 14-16:  Iranian Revolution => (war :name (name :op "Revolution" :op "Iranian"))
Span 17-18:  participated => participate-01
Span 12-13:  supported => support-01
Span 20-21:  takeover => take-12
Span 28-29:  Teheran => (city :name (name :op "Teheran"))
Span 0-3:  The People 's => (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
Span 25-26:  US => (country :name (name :op "US"))

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(2, 1, 0),Teheran,(city :name (name :op "Teheran")),false), Span(26,27,List(3),embassy,embassy,false), Span(25,26,List(6, 5, 4),US,(country :name (name :op "US")),false), Span(22,23,List(10, 9, 8, 7),790000,(date-entity :day 0 :month 0 :year 79),false), Span(20,21,List(11),takeover,take-12,false), Span(17,18,List(12),participated,participate-01,false), Span(16,17,List(13),and,and,false), Span(14,16,List(17, 16, 15, 14),Iranian Revolution,(war :name (name :op "Revolution" :op "Iranian")),false), Span(12,13,List(18),supported,support-01,false), Span(11,12,List(19),initially,initial,false), Span(9,10,List(20),coalition,coalition,false), Span(8,9,List(21),broad,broad,false), Span(0,3,List(27, 26, 25, 24, 23, 22),The People 's,(organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen")),false)),Map(2 -> "Teheran", 5 -> name, 27 -> "Mujahedeen", 12 -> participate-01, 8 -> 0, 15 -> name, 21 -> broad, 18 -> support-01, 24 -> "The", 7 -> date-entity, 1 -> name, 17 -> "Iranian", 23 -> name, 26 -> "'s", 4 -> country, 11 -> take-12, 14 -> war, 20 -> coalition, 6 -> "US", 9 -> 0, 0 -> city, 22 -> organization, 16 -> "Revolution", 19 -> initial, 10 -> 79, 3 -> embassy, 25 -> "People", 13 -> and),Map(e -> embassy, n -> name, w -> war, b -> broad, t -> take-12, n4 -> name, s -> support-01, d -> date-entity, 7 -> 79, p -> participate-01, c3 -> coalition, n3 -> name, a -> and, 02 -> 0, i -> initial, c -> city, 0 -> 0, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@7add323c,Annotation([Ljava.lang.String;@4a734c04,[Ljava.lang.String;@4760f169,[Ljava.lang.String;@261ea657),Annotation([Ljava.lang.String;@35c12c7a,[Ljava.lang.String;@658255aa,[Ledu.cmu.lti.nlp.amr.Dependency;@25290bca),Annotation([Ljava.lang.String;@76563d26,[Ljava.lang.String;@4ac86d6a,[Ljava.lang.String;@3d904e9c),Annotation([Ljava.lang.String;@508a65bf,[Ljava.lang.String;@17f2dd85,[Ledu.cmu.lti.nlp.amr.Entity;@1e58512c))
AMR:
(a / and, op, p / participate-01)
(a / and, op, s / support-01)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(c3 / coalition, mod, b / broad)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 7 / 79)
(e / embassy, location, c / city)
(e / embassy, mod, c2 / country)
(n / name, op, "Teheran")
(n2 / name, op, "US")
(n3 / name, op, "Iranian")
(n3 / name, op, "Revolution")
(n4 / name, op, "'s")
(n4 / name, op, "Mujahedeen")
(n4 / name, op, "People")
(n4 / name, op, "The")
(o / organization, name, n4 / name)
(p / participate-01, ARG0, o / organization)
(p / participate-01, ARG1, t / take-12)
(s / support-01, ARG0, c3 / coalition)
(s / support-01, ARG1, w / war)
(s / support-01, time, i / initial)
(t / take-12, ARG1, e / embassy)
(t / take-12, time, d / date-entity)
(w / war, name, n3 / name)

Decoded in 1,112,221 microseconds
Sentence: The People's Mujahedeen fell out with the Government and has built military bases in Iraq and political bases in Europe since the 1980s.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Iraq"))
Spans:
Span 23-24:  1980s => 1980
Span 16-17:  and => and
Span 9-10:  and => and
Span 18-19:  bases => base
Span 13-14:  bases => base
Span 11-12:  built => build-01
Span 20-21:  Europe => (continent :name (name :op "Europe"))
Span 4-5:  fell => fall-01
Span 8-9:  Government => (government-organization :ARG0-of govern-01)
Span 15-16:  Iraq => (country :name (name :op "Iraq"))
Span 12-13:  military => military
Span 5-6:  out => out
Span 17-18:  political => politics
Span 21-22:  since => since
Span 0-3:  The People 's => (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),1980s,1980,false), Span(21,22,List(1),since,since,false), Span(20,21,List(4, 3, 2),Europe,(continent :name (name :op "Europe")),false), Span(18,19,List(5),bases,base,false), Span(17,18,List(6),political,politics,false), Span(16,17,List(7),and,and,false), Span(15,16,List(10, 9, 8),Iraq,(country :name (name :op "Iraq")),false), Span(13,14,List(11),bases,base,false), Span(12,13,List(12),military,military,false), Span(11,12,List(13),built,build-01,false), Span(9,10,List(14),and,and,false), Span(8,9,List(16, 15),Government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(17),out,out,false), Span(4,5,List(18),fell,fall-01,false), Span(0,3,List(24, 23, 22, 21, 20, 19),The People 's,(organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen")),false)),Map(2 -> continent, 5 -> base, 12 -> military, 8 -> country, 15 -> government-organization, 21 -> "The", 18 -> fall-01, 24 -> "Mujahedeen", 7 -> and, 1 -> since, 17 -> out, 23 -> "'s", 4 -> "Europe", 11 -> base, 14 -> and, 20 -> name, 6 -> politics, 9 -> name, 0 -> 1980, 22 -> "People", 16 -> govern-01, 19 -> organization, 10 -> "Iraq", 3 -> name, 13 -> build-01),Map(n -> name, b3 -> build-01, b -> base, b2 -> base, s -> since, m -> military, g2 -> govern-01, 1 -> 1980, g -> government-organization, p -> politics, n3 -> name, a -> and, o2 -> organization, a2 -> and, c -> continent, f -> fall-01, o -> out, c2 -> country, n2 -> name))),[Ljava.lang.String;@210308d5,Annotation([Ljava.lang.String;@22a736d7,[Ljava.lang.String;@23b8d9f3,[Ljava.lang.String;@7f353d99),Annotation([Ljava.lang.String;@4649d70a,[Ljava.lang.String;@5d43409a,[Ledu.cmu.lti.nlp.amr.Dependency;@38d17d80),Annotation([Ljava.lang.String;@6ede46f6,[Ljava.lang.String;@66273da0,[Ljava.lang.String;@2127e66e),Annotation([Ljava.lang.String;@1229a2b7,[Ljava.lang.String;@e5cbff2,[Ledu.cmu.lti.nlp.amr.Entity;@51c959a4))
AMR:
(a / and, duration, s / since)
(a / and, op, b / base)
(a / and, op, b3 / build-01)
(a2 / and, op, a / and)
(a2 / and, op, f / fall-01)
(b / base, mod, m / military)
(b2 / base, location, c2 / country)
(b2 / base, mod, p / politics)
(b3 / build-01, ARG1, b2 / base)
(b3 / build-01, location, c / continent)
(c / continent, location, 1 / 1980)
(c / continent, name, n / name)
(c2 / country, name, n2 / name)
(f / fall-01, ARG1, o2 / organization)
(f / fall-01, ARG5, o / out)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, o / out)
(n / name, op, "Europe")
(n2 / name, op, "Iraq")
(n3 / name, op, "'s")
(n3 / name, op, "Mujahedeen")
(n3 / name, op, "People")
(n3 / name, op, "The")
(o2 / organization, name, n3 / name)

Decoded in 882,559 microseconds
Sentence: The People's Mujahedeen in recent years claimed responsibility for the assassination of several persons in the Iranian regime.

NER Entity: (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (thing :name (name :op "Iranian"))
Spans:
Span 11-12:  assassination => assassinate-01
Span 7-8:  claimed => claim-01
Span 17-18:  Iranian => (country :name (name :op "Iran"))
Span 14-15:  persons => person
Span 5-6:  recent => recent
Span 18-19:  regime => regime
Span 8-9:  responsibility => responsible-41
Span 13-14:  several => several
Span 0-3:  The People 's => (organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen"))
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),regime,regime,false), Span(17,18,List(3, 2, 1),Iranian,(country :name (name :op "Iran")),false), Span(14,15,List(4),persons,person,false), Span(13,14,List(5),several,several,false), Span(11,12,List(6),assassination,assassinate-01,false), Span(8,9,List(7),responsibility,responsible-41,false), Span(7,8,List(8),claimed,claim-01,false), Span(6,7,List(10, 9),years,(temporal-quantity :unit year),false), Span(5,6,List(11),recent,recent,false), Span(0,3,List(17, 16, 15, 14, 13, 12),The People 's,(organization :name (name :op "The" :op "People" :op "'s" :op "Mujahedeen")),false)),Map(2 -> name, 5 -> several, 12 -> organization, 15 -> "People", 8 -> claim-01, 7 -> responsible-41, 17 -> "Mujahedeen", 1 -> country, 4 -> person, 11 -> recent, 14 -> "The", 6 -> assassinate-01, 0 -> regime, 9 -> temporal-quantity, 16 -> "'s", 3 -> "Iran", 10 -> year, 13 -> name),Map(n -> name, r3 -> recent, t -> temporal-quantity, s -> several, p -> person, r2 -> responsible-41, y -> year, a -> assassinate-01, r -> regime, c -> country, o -> organization, c2 -> claim-01, n2 -> name))),[Ljava.lang.String;@4fc3c165,Annotation([Ljava.lang.String;@10a0fe30,[Ljava.lang.String;@7b6860f9,[Ljava.lang.String;@60f70249),Annotation([Ljava.lang.String;@31ee2fdb,[Ljava.lang.String;@262816a8,[Ledu.cmu.lti.nlp.amr.Dependency;@1effd53c),Annotation([Ljava.lang.String;@46c269e0,[Ljava.lang.String;@6920614,[Ljava.lang.String;@6069dd38),Annotation([Ljava.lang.String;@5fa23c,[Ljava.lang.String;@558756be,[Ledu.cmu.lti.nlp.amr.Entity;@433348bc))
AMR:
(a / assassinate-01, ARG1, p / person)
(c / country, name, n / name)
(c2 / claim-01, ARG0, t / temporal-quantity)
(c2 / claim-01, ARG1, r2 / responsible-41)
(c2 / claim-01, ARG6, o / organization)
(n / name, op, "Iran")
(n2 / name, op, "'s")
(n2 / name, op, "Mujahedeen")
(n2 / name, op, "People")
(n2 / name, op, "The")
(o / organization, name, n2 / name)
(p / person, poss, r / regime)
(p / person, quant, s / several)
(r / regime, mod, c / country)
(r2 / responsible-41, ARG2, a / assassinate-01)
(t / temporal-quantity, unit, y / year)
(y / year, mod, r3 / recent)

Decoded in 359,363 microseconds
Sentence: These assassinations include that of the Teheran Evin prison's former director assodalah Ladjevardi in August 980800 and of former Commandant in chief of the Iranian army General Ali Sayad Chirazi in 990400.

NER Entity: (country :name (name :op "Teheran"))
NER Entity: (thing :name (name :op "Evin"))
NER Entity: (person :name (name :op "assodalah" :op "Ladjevardi"))
mkDayMonthYear(980800,00,08,98)
NER Entity: (thing :name (name :op "Iranian"))
NER Entity: (person :name (name :op "Ali" :op "Sayad" :op "Chirazi"))
mkDayMonthYear(990400,00,04,99)
mkDayMonthYear(990400,00,04,99)
NER Entity: (thing :name (name :op "Iranian"))
mkDayMonthYear(980800,00,08,98)
NER Entity: (thing :name (name :op "Evin"))
NER Entity: (country :name (name :op "Teheran"))
Spans:
Span 16-17:  980800 => (date-entity :year 1998 :month 8)
Span 32-33:  990400 => (date-entity :year 1999 :month 4)
Span 28-31:  Ali Sayad Chirazi => (person :name (name :op "Chirazi" :op "Sayad" :op "Ali"))
Span 17-18:  and => and
Span 26-27:  army => army
Span 1-2:  assassinations => assassinate-01
Span 12-14:  assodalah Ladjevardi => (person :name (name :op "Ladjevardi" :op "Assodalah"))
Span 15-16:  August => (date-entity :month 8)
Span 22-23:  chief => chief
Span 20-21:  Commandant => (have-org-role-91 :ARG2 commandant)
Span 11-12:  director => (have-org-role-91 :ARG2 director)
Span 7-8:  Evin => (name :op "Evin")
Span 19-20:  former => former
Span 10-11:  former => former
Span 27-28:  General => (have-org-role-91 :ARG2 general)
Span 2-3:  include => include-01
Span 25-26:  Iranian => (country :name (name :op "Iran"))
Span 8-9:  prison => prison
Span 6-7:  Teheran => (city :name (name :op "Teheran"))

Langrangian relaxation converged after 76 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(2, 1, 0),990400,(date-entity :year 1999 :month 4),false), Span(28,31,List(7, 6, 5, 4, 3),Ali Sayad Chirazi,(person :name (name :op "Chirazi" :op "Sayad" :op "Ali")),false), Span(27,28,List(9, 8),General,(have-org-role-91 :ARG2 general),false), Span(26,27,List(10),army,army,false), Span(25,26,List(13, 12, 11),Iranian,(country :name (name :op "Iran")),false), Span(22,23,List(14),chief,chief,false), Span(20,21,List(16, 15),Commandant,(have-org-role-91 :ARG2 commandant),false), Span(19,20,List(17),former,former,false), Span(17,18,List(18),and,and,false), Span(16,17,List(21, 20, 19),980800,(date-entity :year 1998 :month 8),false), Span(15,16,List(23, 22),August,(date-entity :month 8),false), Span(12,14,List(27, 26, 25, 24),assodalah Ladjevardi,(person :name (name :op "Ladjevardi" :op "Assodalah")),false), Span(11,12,List(29, 28),director,(have-org-role-91 :ARG2 director),false), Span(10,11,List(30),former,former,false), Span(8,9,List(31),prison,prison,false), Span(7,8,List(33, 32),Evin,(name :op "Evin"),false), Span(6,7,List(36, 35, 34),Teheran,(city :name (name :op "Teheran")),false), Span(2,3,List(37),include,include-01,false), Span(1,2,List(38),assassinations,assassinate-01,false)),Map(30 -> former, 2 -> 4, 5 -> "Chirazi", 33 -> "Evin", 27 -> "Assodalah", 12 -> name, 8 -> have-org-role-91, 15 -> have-org-role-91, 36 -> "Teheran", 21 -> 8, 18 -> and, 24 -> person, 35 -> name, 7 -> "Ali", 1 -> 1999, 17 -> former, 23 -> 8, 38 -> assassinate-01, 26 -> "Ladjevardi", 4 -> name, 11 -> country, 32 -> name, 14 -> chief, 29 -> director, 20 -> 1998, 34 -> city, 28 -> have-org-role-91, 6 -> "Sayad", 9 -> general, 0 -> date-entity, 22 -> date-entity, 16 -> commandant, 37 -> include-01, 19 -> date-entity, 10 -> army, 3 -> person, 31 -> prison, 25 -> name, 13 -> "Iran"),Map(n -> name, h -> have-org-role-91, h2 -> have-org-role-91, 12 -> 1998, 8 -> 8, d3 -> date-entity, p2 -> person, a3 -> assassinate-01, c4 -> city, n4 -> name, d -> date-entity, 1 -> 1999, g -> general, p -> person, c3 -> commandant, a -> army, n3 -> name, 4 -> 4, d2 -> date-entity, 82 -> 8, i -> include-01, a2 -> and, c -> country, h3 -> have-org-role-91, f2 -> former, d4 -> director, f -> former, p3 -> prison, c2 -> chief, n2 -> name, n5 -> name))),[Ljava.lang.String;@6d1dcdff,Annotation([Ljava.lang.String;@102ecc22,[Ljava.lang.String;@7ff35a3f,[Ljava.lang.String;@26dc9bd5),Annotation([Ljava.lang.String;@252dc8c4,[Ljava.lang.String;@43045f9f,[Ledu.cmu.lti.nlp.amr.Dependency;@2643d762),Annotation([Ljava.lang.String;@6403e24c,[Ljava.lang.String;@2f236de0,[Ljava.lang.String;@4eba373c),Annotation([Ljava.lang.String;@767a014e,[Ljava.lang.String;@d109c4f,[Ledu.cmu.lti.nlp.amr.Entity;@3968bc60))
AMR:
(a / army, mod, c / country)
(a3 / assassinate-01, ARG1, h3 / have-org-role-91)
(c / country, name, n2 / name)
(c3 / commandant, mod, c2 / chief)
(c3 / commandant, mod, f / former)
(c4 / city, name, n5 / name)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 1 / 1999)
(d2 / date-entity, month, 8 / 8)
(d2 / date-entity, year, 12 / 1998)
(d3 / date-entity, month, 82 / 8)
(d3 / date-entity, time, d2 / date-entity)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, a3 / assassinate-01)
(h / have-org-role-91, ARG2, g / general)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, a / army)
(h2 / have-org-role-91, ARG2, c3 / commandant)
(h3 / have-org-role-91, ARG0, p2 / person)
(h3 / have-org-role-91, ARG1, p3 / prison)
(h3 / have-org-role-91, ARG2, d4 / director)
(h3 / have-org-role-91, mod, f2 / former)
(i / include-01, ARG0, d / date-entity)
(i / include-01, ARG1, a2 / and)
(i / include-01, ARG2, a3 / assassinate-01)
(n / name, op, "Ali")
(n / name, op, "Chirazi")
(n / name, op, "Sayad")
(n2 / name, op, "Iran")
(n3 / name, op, "Assodalah")
(n3 / name, op, "Ladjevardi")
(n4 / name, op, "Evin")
(n5 / name, op, "Teheran")
(p / person, name, n / name)
(p2 / person, location, d3 / date-entity)
(p2 / person, name, n3 / name)
(p3 / prison, location, c4 / city)
(p3 / prison, name, n4 / name)

Decoded in 4,923,830 microseconds
Sentence: 2003-07-09

mkDayMonthYear(2003-07-09,09,07,2003)
mkDayMonthYear(2003-07-09,09,07,2003)
Spans:
Span 0-1:  2003-07-09 => (date-entity :day 9 :month 7 :year 2003)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2003-07-09,(date-entity :day 9 :month 7 :year 2003),false)),Map(2 -> 7, 1 -> 9, 0 -> date-entity, 3 -> 2003),Map(2 -> 2003, 7 -> 7, d -> date-entity, 9 -> 9))),[Ljava.lang.String;@26f46fa6,Annotation([Ljava.lang.String;@227a47,[Ljava.lang.String;@9596ce8,[Ljava.lang.String;@75ae4a1f),Annotation([Ljava.lang.String;@70228253,[Ljava.lang.String;@63c12e52,[Ledu.cmu.lti.nlp.amr.Dependency;@21bd20ee),Annotation([Ljava.lang.String;@26c47874,[Ljava.lang.String;@421056e5,[Ljava.lang.String;@2849434b),Annotation([Ljava.lang.String;@60bbacfc,[Ljava.lang.String;@65b97f47,[Ledu.cmu.lti.nlp.amr.Entity;@255eaa6b))
AMR:
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2003)

Decoded in 7,117 microseconds
Sentence: Australia (AU)

NER Entity: (country :name (name :op "Australia"))
NER Entity: (country :name (name :op "AU"))
NER Entity: (country :name (name :op "Australia"))
Spans:
Span 0-1:  Australia => (country :name (name :op "Australia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Australia,(country :name (name :op "Australia")),false)),Map(2 -> "Australia", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@476fe690,Annotation([Ljava.lang.String;@7a0e7ecd,[Ljava.lang.String;@54e3658c,[Ljava.lang.String;@43e9089),Annotation([Ljava.lang.String;@3c5dbdf8,[Ljava.lang.String;@352c44a8,[Ledu.cmu.lti.nlp.amr.Dependency;@7aac8884),Annotation([Ljava.lang.String;@a66e580,[Ljava.lang.String;@5b852b49,[Ljava.lang.String;@cdb2d95),Annotation([Ljava.lang.String;@122d6c22,[Ljava.lang.String;@2f5ac102,[Ledu.cmu.lti.nlp.amr.Entity;@5df778c3))
AMR:
(c / country, name, n / name)
(n / name, op, "Australia")

Decoded in 4,647 microseconds
Sentence: International; weapons; Government; leader

Spans:
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 6-7:  leader => (person :ARG0-of lead-02)
Span 2-3:  weapons => weapon

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(1, 0),leader,(person :ARG0-of lead-02),false), Span(5,6,List(2),;,and,false), Span(4,5,List(4, 3),Government,(government-organization :ARG0-of govern-01),false), Span(3,4,List(5),;,and,false), Span(2,3,List(6),weapons,weapon,false), Span(1,2,List(7),;,and,false), Span(0,1,List(8),International,international,false)),Map(2 -> and, 5 -> and, 8 -> international, 7 -> and, 1 -> lead-02, 4 -> govern-01, 6 -> weapon, 0 -> person, 3 -> government-organization),Map(w -> weapon, a3 -> and, g2 -> govern-01, g -> government-organization, p -> person, a -> and, i -> international, a2 -> and, l -> lead-02))),[Ljava.lang.String;@895416d,Annotation([Ljava.lang.String;@71a06021,[Ljava.lang.String;@80bfdc6,[Ljava.lang.String;@6edcad64),Annotation([Ljava.lang.String;@4c6007fb,[Ljava.lang.String;@3e33d73e,[Ledu.cmu.lti.nlp.amr.Dependency;@6981f8f3),Annotation([Ljava.lang.String;@623dcf2a,[Ljava.lang.String;@2eae4349,[Ljava.lang.String;@e84fb85),Annotation([Ljava.lang.String;@68a4dcc6,[Ljava.lang.String;@646c0a67,[Ledu.cmu.lti.nlp.amr.Entity;@3804a9a8))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, g / government-organization)
(a3 / and, op, a2 / and)
(a3 / and, op, i / international)
(a3 / and, op, p / person)
(a3 / and, op, w / weapon)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p / person)

Decoded in 34,315 microseconds
Sentence: Despite pressure from the United States and the creation of the Proliferation Security Initiative, Australian Prime Minister John Howard is hesitant to use military force to intercept suspected drug- or weapon-smuggling vessels belonging to the Democratic People's Republic of Korea.

NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (organization :name (name :op "Proliferation" :op "Security" :op "Initiative"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (person :name (name :op "John" :op "Howard"))
NER Entity: (organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea"))
NER Entity: (thing :name (name :op "Australian"))
Spans:
Span 6-7:  and => and
Span 15-16:  Australian => (country :name (name :op "Australia"))
Span 36-41:  belonging to the Democratic People => (organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea"))
Span 8-9:  creation => create-01
Span 29-30:  drug => drug
Span 25-26:  force => force
Span 21-22:  hesitant => hesitate-01
Span 27-28:  intercept => intercept-01
Span 18-20:  John Howard => (person :name (name :op "John" :op "Howard"))
Span 24-25:  military => military
Span 17-18:  Minister => (have-org-role-91 :ARG2 minister)
Span 31-32:  or => or
Span 1-2:  pressure => pressure-01
Span 16-17:  Prime => prime
Span 11-14:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Span 42-45:  Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic"))
Span 34-35:  smuggling => smuggle-01
Span 28-29:  suspected => suspect-01
Span 4-6:  United States => (country :name (name :op "United" :op "States"))
Span 23-24:  use => use-01
Span 35-36:  vessels => vessel
Span 32-33:  weapon => weapon

Langrangian relaxation converged after 68 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,45,List(4, 3, 2, 1, 0),Republic of Korea,(country :name (name :op "Korea" :op "of" :op "Republic")),false), Span(36,41,List(12, 11, 10, 9, 8, 7, 6, 5),belonging to the Democratic People,(organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea")),false), Span(35,36,List(13),vessels,vessel,false), Span(34,35,List(14),smuggling,smuggle-01,false), Span(32,33,List(15),weapon,weapon,false), Span(31,32,List(16),or,or,false), Span(29,30,List(17),drug,drug,false), Span(28,29,List(18),suspected,suspect-01,false), Span(27,28,List(19),intercept,intercept-01,false), Span(25,26,List(20),force,force,false), Span(24,25,List(21),military,military,false), Span(23,24,List(22),use,use-01,false), Span(21,22,List(23),hesitant,hesitate-01,false), Span(18,20,List(27, 26, 25, 24),John Howard,(person :name (name :op "John" :op "Howard")),false), Span(17,18,List(29, 28),Minister,(have-org-role-91 :ARG2 minister),false), Span(16,17,List(30),Prime,prime,false), Span(15,16,List(33, 32, 31),Australian,(country :name (name :op "Australia")),false), Span(11,14,List(38, 37, 36, 35, 34),Proliferation Security Initiative,(organization :name (name :op "Initiative" :op "Security" :op "Proliferation")),false), Span(8,9,List(39),creation,create-01,false), Span(6,7,List(40),and,and,false), Span(4,6,List(44, 43, 42, 41),United States,(country :name (name :op "United" :op "States")),false), Span(1,2,List(45),pressure,pressure-01,false)),Map(45 -> pressure-01, 39 -> create-01, 30 -> prime, 2 -> "Korea", 5 -> organization, 33 -> "Australia", 27 -> "Howard", 12 -> "Korea", 8 -> "People", 15 -> weapon, 42 -> name, 36 -> "Initiative", 21 -> military, 18 -> suspect-01, 24 -> person, 41 -> country, 35 -> name, 7 -> "Democratic", 1 -> name, 17 -> drug, 44 -> "States", 23 -> hesitate-01, 38 -> "Proliferation", 26 -> "John", 4 -> "Republic", 11 -> "of", 32 -> name, 14 -> smuggle-01, 29 -> minister, 20 -> force, 34 -> organization, 28 -> have-org-role-91, 6 -> name, 40 -> and, 43 -> "United", 9 -> "'s", 0 -> country, 22 -> use-01, 16 -> or, 37 -> "Security", 19 -> intercept-01, 10 -> "Republic", 3 -> "of", 31 -> country, 25 -> name, 13 -> vessel),Map(w -> weapon, n -> name, h -> hesitate-01, s2 -> suspect-01, h2 -> have-org-role-91, m2 -> minister, o3 -> organization, p2 -> prime, c4 -> country, n4 -> name, s -> smuggle-01, v -> vessel, m -> military, d -> drug, p -> person, a -> and, n3 -> name, c3 -> create-01, n6 -> name, o2 -> or, i -> intercept-01, c -> country, u -> use-01, f -> force, o -> organization, p3 -> pressure-01, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@117525fe,Annotation([Ljava.lang.String;@5f7989fa,[Ljava.lang.String;@5bc28f40,[Ljava.lang.String;@46963479),Annotation([Ljava.lang.String;@7e74a380,[Ljava.lang.String;@6dd1c3ed,[Ledu.cmu.lti.nlp.amr.Dependency;@22a6e998),Annotation([Ljava.lang.String;@55e42449,[Ljava.lang.String;@e57e5d6,[Ljava.lang.String;@6dfa915a),Annotation([Ljava.lang.String;@78054f54,[Ljava.lang.String;@cb7fa71,[Ledu.cmu.lti.nlp.amr.Entity;@3dffc764))
AMR:
(a / and, op, c3 / create-01)
(c / country, name, n / name)
(c2 / country, name, n4 / name)
(c3 / create-01, ARG1, o3 / organization)
(c4 / country, name, n6 / name)
(f / force, mod, m / military)
(h / hesitate-01, ARG0, p / person)
(h / hesitate-01, ARG1, u / use-01)
(h / hesitate-01, concession, p3 / pressure-01)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, m2 / minister)
(i / intercept-01, ARG0, p / person)
(i / intercept-01, ARG1, v / vessel)
(m2 / minister, mod, p2 / prime)
(n / name, op, "Korea")
(n / name, op, "Republic")
(n / name, op, "of")
(n2 / name, op, "'s")
(n2 / name, op, "Democratic")
(n2 / name, op, "Korea")
(n2 / name, op, "People")
(n2 / name, op, "Republic")
(n2 / name, op, "of")
(n3 / name, op, "Howard")
(n3 / name, op, "John")
(n4 / name, op, "Australia")
(n5 / name, op, "Initiative")
(n5 / name, op, "Proliferation")
(n5 / name, op, "Security")
(n6 / name, op, "States")
(n6 / name, op, "United")
(o / organization, calendar, v / vessel)
(o / organization, name, n2 / name)
(o / organization, poss, c / country)
(o2 / or, op, d / drug)
(o2 / or, op, w / weapon)
(o3 / organization, name, n5 / name)
(p / person, name, n3 / name)
(p3 / pressure-01, ARG0, a / and)
(p3 / pressure-01, ARG1, c4 / country)
(s / smuggle-01, ARG1, o2 / or)
(s2 / suspect-01, ARG1, d / drug)
(s2 / suspect-01, ARG2, v / vessel)
(u / use-01, ARG0, p / person)
(u / use-01, ARG1, f / force)
(u / use-01, purpose, i / intercept-01)

Decoded in 4,441,057 microseconds
Sentence: Australian Government is hesitating at using Australian military to intercept the Democratic People's Republic of Korea (DPRK)' s vessels suspected of trafficking weapons or drugs.

NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea"))
NER Entity: (organization :name (name :op "DPRK"))
NER Entity: (organization :name (name :op "DPRK"))
NER Entity: (organization :name (name :op "Democratic" :op "People" :op "'s" :op "Republic" :op "of" :op "Korea"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
Spans:
Span 6-7:  Australian => (country :name (name :op "Australia"))
Span 0-1:  Australian => (country :name (name :op "Australia"))
Span 11-12:  Democratic => "Democratic"
Span 18-19:  DPRK => (country :name (name :op "DPRK"))
Span 27-28:  drugs => drug
Span 1-2:  Government => (government-organization :ARG0-of govern-01)
Span 3-4:  hesitating => hesitate-01
Span 9-10:  intercept => intercept-01
Span 7-8:  military => military
Span 26-27:  or => or
Span 12-13:  People => "People's"
Span 14-17:  Republic of Korea => (country :name (name :op "Korea" :op "of" :op "Republic"))
Span 22-23:  suspected => suspect-01
Span 24-25:  trafficking => traffic-00
Span 5-6:  using => use-01
Span 21-22:  vessels => vessel
Span 25-26:  weapons => weapon

Langrangian relaxation converged after 74 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),drugs,drug,false), Span(26,27,List(1),or,or,false), Span(25,26,List(2),weapons,weapon,false), Span(24,25,List(3),trafficking,traffic-00,false), Span(22,23,List(4),suspected,suspect-01,false), Span(21,22,List(5),vessels,vessel,false), Span(18,19,List(8, 7, 6),DPRK,(country :name (name :op "DPRK")),false), Span(14,17,List(13, 12, 11, 10, 9),Republic of Korea,(country :name (name :op "Korea" :op "of" :op "Republic")),false), Span(12,13,List(14),People,"People's",false), Span(11,12,List(15),Democratic,"Democratic",false), Span(9,10,List(16),intercept,intercept-01,false), Span(7,8,List(17),military,military,false), Span(6,7,List(20, 19, 18),Australian,(country :name (name :op "Australia")),false), Span(5,6,List(21),using,use-01,false), Span(3,4,List(22),hesitating,hesitate-01,false), Span(1,2,List(24, 23),Government,(government-organization :ARG0-of govern-01),false), Span(0,1,List(27, 26, 25),Australian,(country :name (name :op "Australia")),false)),Map(2 -> weapon, 5 -> vessel, 27 -> "Australia", 12 -> "of", 8 -> "DPRK", 15 -> "Democratic", 21 -> use-01, 18 -> country, 24 -> govern-01, 7 -> name, 1 -> or, 17 -> military, 23 -> government-organization, 26 -> name, 4 -> suspect-01, 11 -> "Korea", 14 -> "People's", 20 -> "Australia", 6 -> country, 9 -> country, 0 -> drug, 22 -> hesitate-01, 16 -> intercept-01, 19 -> name, 10 -> name, 3 -> traffic-00, 25 -> country, 13 -> "Republic"),Map(w -> weapon, n -> name, h -> hesitate-01, D -> "Democratic", P -> "People's", t -> traffic-00, n4 -> name, c4 -> country, s -> suspect-01, v -> vessel, d -> drug, m -> military, g2 -> govern-01, g -> government-organization, n3 -> name, c3 -> country, i -> intercept-01, c -> country, u -> use-01, o -> or, c2 -> country, n2 -> name))),[Ljava.lang.String;@4b6e1c0,Annotation([Ljava.lang.String;@561b61ed,[Ljava.lang.String;@654c7d2d,[Ljava.lang.String;@26cb5207),Annotation([Ljava.lang.String;@15400fff,[Ljava.lang.String;@18d910b3,[Ledu.cmu.lti.nlp.amr.Dependency;@1e7ab390),Annotation([Ljava.lang.String;@625d9132,[Ljava.lang.String;@77774571,[Ljava.lang.String;@277b8fa4),Annotation([Ljava.lang.String;@6cd64ee8,[Ljava.lang.String;@620c8641,[Ledu.cmu.lti.nlp.amr.Entity;@2f1d0bbc))
AMR:
(c / country, name, n / name)
(c2 / country, location, P / "People's")
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / hesitate-01, ARG0, g / government-organization)
(h / hesitate-01, ARG1, u / use-01)
(i / intercept-01, ARG0, g / government-organization)
(i / intercept-01, ARG1, v / vessel)
(m / military, mod, c3 / country)
(m / military, mod, c4 / country)
(n / name, op, "DPRK")
(n2 / name, op, "Korea")
(n2 / name, op, "Republic")
(n2 / name, op, "of")
(n3 / name, op, "Australia")
(n4 / name, op, "Australia")
(o / or, op, d / drug)
(o / or, op, w / weapon)
(s / suspect-01, ARG0, D / "Democratic")
(s / suspect-01, ARG1, t / traffic-00)
(s / suspect-01, ARG2, v / vessel)
(t / traffic-00, ARG1, o / or)
(u / use-01, ARG0, g / government-organization)
(u / use-01, ARG1, m / military)
(v / vessel, mod, c2 / country)

Decoded in 2,674,777 microseconds
Sentence: Australian Prime Minister John Howard was quoted on 9 July 2003 by the Australian Associated Press as stating that the Australian government is not at this stage considering military contributions.

NER Entity: (thing :name (name :op "Australian"))
NER Entity: (person :name (name :op "John" :op "Howard"))
mkDayMonthYear(9	July	2003,9,July,2003)
NER Entity: (organization :name (name :op "Australian" :op "Associated" :op "Press"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
Spans:
Span 8-11:  9 July 2003 => (date-entity :day 9 :month 7 :year 2003)
Span 20-21:  Australian => (country :name (name :op "Australia"))
Span 0-1:  Australian => (country :name (name :op "Australia"))
Span 13-16:  Australian Associated Press => (organization :name (name :op "Australian" :op "Associated" :op "Press"))
Span 27-28:  considering => consider-02
Span 29-30:  contributions => contribute-01
Span 21-22:  government => (government-organization :ARG0-of govern-01)
Span 3-5:  John Howard => (person :name (name :op "John" :op "Howard"))
Span 28-29:  military => military
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 1-2:  Prime => prime
Span 6-7:  quoted => quote-01
Span 26-27:  stage => stage
Span 17-18:  stating => state-01
Span 25-26:  this => this

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),contributions,contribute-01,false), Span(28,29,List(1),military,military,false), Span(27,28,List(2),considering,consider-02,false), Span(26,27,List(3),stage,stage,false), Span(25,26,List(4),this,this,false), Span(21,22,List(6, 5),government,(government-organization :ARG0-of govern-01),false), Span(20,21,List(9, 8, 7),Australian,(country :name (name :op "Australia")),false), Span(17,18,List(10),stating,state-01,false), Span(13,16,List(15, 14, 13, 12, 11),Australian Associated Press,(organization :name (name :op "Australian" :op "Associated" :op "Press")),false), Span(8,11,List(19, 18, 17, 16),9 July 2003,(date-entity :day 9 :month 7 :year 2003),false), Span(6,7,List(20),quoted,quote-01,false), Span(3,5,List(24, 23, 22, 21),John Howard,(person :name (name :op "John" :op "Howard")),false), Span(2,3,List(26, 25),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(27),Prime,prime,false), Span(0,1,List(30, 29, 28),Australian,(country :name (name :op "Australia")),false)),Map(30 -> "Australia", 2 -> consider-02, 5 -> government-organization, 27 -> prime, 12 -> name, 8 -> name, 15 -> "Press", 21 -> person, 18 -> 7, 24 -> "Howard", 7 -> country, 1 -> military, 17 -> 9, 23 -> "John", 26 -> minister, 4 -> this, 11 -> organization, 14 -> "Associated", 29 -> name, 20 -> quote-01, 28 -> country, 6 -> govern-01, 9 -> "Australia", 0 -> contribute-01, 22 -> name, 16 -> date-entity, 19 -> 2003, 10 -> state-01, 3 -> stage, 25 -> have-org-role-91, 13 -> "Australian"),Map(n -> name, h -> have-org-role-91, q -> quote-01, 2 -> 2003, s2 -> state-01, t -> this, m2 -> minister, p2 -> prime, n4 -> name, c4 -> country, s -> stage, 7 -> 7, m -> military, d -> date-entity, g2 -> govern-01, p -> person, g -> government-organization, n3 -> name, c3 -> country, c -> contribute-01, 9 -> 9, o -> organization, c2 -> consider-02, n2 -> name))),[Ljava.lang.String;@5460b754,Annotation([Ljava.lang.String;@a9f023e,[Ljava.lang.String;@c27a3a2,[Ljava.lang.String;@4b200971),Annotation([Ljava.lang.String;@1a2bcd56,[Ljava.lang.String;@68d7a2df,[Ledu.cmu.lti.nlp.amr.Dependency;@59dc36d4),Annotation([Ljava.lang.String;@12fcc71f,[Ljava.lang.String;@5679e96b,[Ljava.lang.String;@3ed7821),Annotation([Ljava.lang.String;@3bbf841e,[Ljava.lang.String;@4f0f7849,[Ledu.cmu.lti.nlp.amr.Entity;@56a4f272))
AMR:
(c / contribute-01, ARG1, m / military)
(c2 / consider-02, ARG0, g / government-organization)
(c2 / consider-02, ARG1, c / contribute-01)
(c2 / consider-02, time, s / stage)
(c3 / country, name, n / name)
(c4 / country, name, n4 / name)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2003)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, m2 / minister)
(m2 / minister, mod, p2 / prime)
(n / name, op, "Australia")
(n2 / name, op, "Associated")
(n2 / name, op, "Australian")
(n2 / name, op, "Press")
(n3 / name, op, "Howard")
(n3 / name, op, "John")
(n4 / name, op, "Australia")
(o / organization, name, n2 / name)
(p / person, name, n3 / name)
(q / quote-01, ARG0, o / organization)
(q / quote-01, ARG1, p / person)
(q / quote-01, ARG2, s2 / state-01)
(q / quote-01, time, d / date-entity)
(s / stage, mod, t / this)
(s2 / state-01, ARG1, c2 / consider-02)

Decoded in 1,823,642 microseconds
Sentence: Howard stated the Australian government is considering ways and means of dealing with a very big problem and the Australian Government must choose descriptors and words sensibly because the Australian government is dealing with a volatile issue and a country that is not operating according to Convention.

NER Entity: (person :name (name :op "Howard"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (person :name (name :op "Howard"))
Spans:
Span 37-38:  and => and
Span 24-25:  and => and
Span 17-18:  and => and
Span 8-9:  and => and
Span 29-30:  Australian => (country :name (name :op "Australia"))
Span 19-20:  Australian => (country :name (name :op "Australia"))
Span 3-4:  Australian => (country :name (name :op "Australia"))
Span 27-28:  because => cause-01
Span 15-16:  big => big
Span 22-23:  choose => choose-01
Span 6-7:  considering => consider-02
Span 46-47:  Convention => (treaty :name (name :op "Convention"))
Span 39-40:  country => country
Span 32-33:  dealing => deal-01
Span 11-12:  dealing => deal-01
Span 23-24:  descriptors => descriptor
Span 30-31:  government => (government-organization :ARG0-of govern-01)
Span 20-21:  Government => (government-organization :ARG0-of govern-01)
Span 4-5:  government => (government-organization :ARG0-of govern-01)
Span 0-1:  Howard => (person :name (name :op "Howard"))
Span 36-37:  issue => issue
Span 9-10:  means => mean-01
Span 43-44:  operating => operate-01
Span 16-17:  problem => problem
Span 26-27:  sensibly => sensible
Span 1-2:  stated => state-01
Span 14-15:  very => very
Span 35-36:  volatile => volatile
Span 7-8:  ways => way
Span 25-26:  words => word

Langrangian relaxation converged after 88 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(46,47,List(2, 1, 0),Convention,(treaty :name (name :op "Convention")),false), Span(43,44,List(3),operating,operate-01,false), Span(39,40,List(4),country,country,false), Span(37,38,List(5),and,and,false), Span(36,37,List(6),issue,issue,false), Span(35,36,List(7),volatile,volatile,false), Span(32,33,List(8),dealing,deal-01,false), Span(30,31,List(10, 9),government,(government-organization :ARG0-of govern-01),false), Span(29,30,List(13, 12, 11),Australian,(country :name (name :op "Australia")),false), Span(27,28,List(14),because,cause-01,false), Span(26,27,List(15),sensibly,sensible,false), Span(25,26,List(16),words,word,false), Span(24,25,List(17),and,and,false), Span(23,24,List(18),descriptors,descriptor,false), Span(22,23,List(19),choose,choose-01,false), Span(20,21,List(21, 20),Government,(government-organization :ARG0-of govern-01),false), Span(19,20,List(24, 23, 22),Australian,(country :name (name :op "Australia")),false), Span(17,18,List(25),and,and,false), Span(16,17,List(26),problem,problem,false), Span(15,16,List(27),big,big,false), Span(14,15,List(28),very,very,false), Span(11,12,List(29),dealing,deal-01,false), Span(9,10,List(30),means,mean-01,false), Span(8,9,List(31),and,and,false), Span(7,8,List(32),ways,way,false), Span(6,7,List(33),considering,consider-02,false), Span(4,5,List(35, 34),government,(government-organization :ARG0-of govern-01),false), Span(3,4,List(38, 37, 36),Australian,(country :name (name :op "Australia")),false), Span(1,2,List(39),stated,state-01,false), Span(0,1,List(42, 41, 40),Howard,(person :name (name :op "Howard")),false)),Map(39 -> state-01, 30 -> mean-01, 2 -> "Convention", 5 -> and, 33 -> consider-02, 27 -> big, 12 -> name, 8 -> deal-01, 15 -> sensible, 42 -> "Howard", 36 -> country, 21 -> govern-01, 18 -> descriptor, 24 -> "Australia", 41 -> name, 35 -> govern-01, 7 -> volatile, 1 -> name, 17 -> and, 23 -> name, 38 -> "Australia", 26 -> problem, 4 -> country, 11 -> country, 32 -> way, 14 -> cause-01, 29 -> deal-01, 20 -> government-organization, 34 -> government-organization, 28 -> very, 6 -> issue, 40 -> person, 9 -> government-organization, 0 -> treaty, 22 -> country, 16 -> word, 37 -> name, 19 -> choose-01, 10 -> govern-01, 3 -> operate-01, 31 -> and, 25 -> and, 13 -> "Australia"),Map(n -> name, w -> word, v2 -> very, g3 -> government-organization, s2 -> state-01, g6 -> govern-01, t -> treaty, b -> big, d3 -> deal-01, c7 -> country, p2 -> person, n4 -> name, c4 -> choose-01, a3 -> and, s -> sensible, v -> volatile, m -> mean-01, d -> deal-01, g2 -> govern-01, g -> government-organization, p -> problem, c3 -> cause-01, a -> and, n3 -> name, g5 -> government-organization, d2 -> descriptor, c6 -> consider-02, w2 -> way, i -> issue, a2 -> and, c -> country, o -> operate-01, n2 -> name, c2 -> country, g4 -> govern-01, a4 -> and, n5 -> name, c5 -> country))),[Ljava.lang.String;@3ee0b4f7,Annotation([Ljava.lang.String;@79b84841,[Ljava.lang.String;@4d41ba0f,[Ljava.lang.String;@3c87e6b7),Annotation([Ljava.lang.String;@77bbadc,[Ljava.lang.String;@3c3a0032,[Ledu.cmu.lti.nlp.amr.Dependency;@7ceb4478),Annotation([Ljava.lang.String;@7fdab70c,[Ljava.lang.String;@25ad4f71,[Ljava.lang.String;@49faf066),Annotation([Ljava.lang.String;@6f94a5a5,[Ljava.lang.String;@455c1d8c,[Ledu.cmu.lti.nlp.amr.Entity;@a451491))
AMR:
(a / and, op, m / mean-01)
(a / and, op, w2 / way)
(a2 / and, op, d2 / descriptor)
(a2 / and, op, w / word)
(a3 / and, op, c / country)
(a3 / and, op, i / issue)
(b / big, degree, v2 / very)
(c2 / country, name, n2 / name)
(c3 / cause-01, ARG0, d3 / deal-01)
(c3 / cause-01, ARG1, s / sensible)
(c4 / choose-01, ARG0, g3 / government-organization)
(c4 / choose-01, ARG1, a2 / and)
(c4 / choose-01, manner, s / sensible)
(c5 / country, name, n3 / name)
(c6 / consider-02, ARG0, g5 / government-organization)
(c6 / consider-02, ARG1, a4 / and)
(c7 / country, name, n4 / name)
(d / deal-01, ARG0, g5 / government-organization)
(d / deal-01, ARG1, p / problem)
(d / deal-01, ARG2, g / government-organization)
(d3 / deal-01, ARG0, g5 / government-organization)
(d3 / deal-01, ARG1, a3 / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c5 / country)
(g6 / govern-01, ARG0, g5 / government-organization)
(g6 / govern-01, ARG1, c7 / country)
(i / issue, mod, v / volatile)
(m / mean-01, ARG1, d / deal-01)
(n / name, op, "Convention")
(n2 / name, op, "Australia")
(n3 / name, op, "Australia")
(n4 / name, op, "Australia")
(n5 / name, op, "Howard")
(o / operate-01, ARG1, c / country)
(p / problem, mod, b / big)
(p2 / person, name, n5 / name)
(s2 / state-01, ARG0, p2 / person)
(s2 / state-01, ARG1, a4 / and)
(t / treaty, mod, w / word)
(t / treaty, name, n / name)

Decoded in 8,049,674 microseconds
Sentence: Howard referenced future talks with Japanese Prime Minister Junichiro Koizumi and South Korean President Roh Woo-hyun on the issue when Howard visits the region during the week of 14 July 2003.

NER Entity: (person :name (name :op "Howard"))
NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (person :name (name :op "Junichiro" :op "Koizumi"))
NER Entity: (thing :name (name :op "South" :op "Korean"))
NER Entity: (person :name (name :op "Roh" :op "Woo" :op "-" :op "hyun"))
NER Entity: (person :name (name :op "Howard"))
mkDayMonthYear(14	July	2003,14,July,2003)
NER Entity: (person :name (name :op "Howard"))
NER Entity: (thing :name (name :op "Japanese"))
NER Entity: (person :name (name :op "Howard"))
Spans:
Span 30-33:  14 July 2003 => (date-entity :day 14 :month 7 :year 2003)
Span 10-11:  and => and
Span 26-27:  during => during
Span 2-3:  future => future
Span 22-23:  Howard => (person :name (name :op "Howard"))
Span 0-1:  Howard => (person :name (name :op "Howard"))
Span 20-21:  issue => issue
Span 5-6:  Japanese => (country :name (name :op "Japan"))
Span 8-10:  Junichiro Koizumi => (person :name (name :op "Koizumi" :op "Junichiro"))
Span 7-8:  Minister => (have-org-role-91 :ARG2 minister)
Span 13-14:  President => (have-org-role-91 :ARG2 president)
Span 6-7:  Prime => prime
Span 1-2:  referenced => reference-01
Span 25-26:  region => region
Span 14-18:  Roh Woo - hyun => (person :name (name :op "Woo-hyun" :op "Roh"))
Span 11-13:  South Korean => (thing :name (name :op "South" :op "Korean"))
Span 3-4:  talks => talk-01
Span 23-24:  visits => visit-01
Span 28-29:  week => week

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,33,List(3, 2, 1, 0),14 July 2003,(date-entity :day 14 :month 7 :year 2003),false), Span(28,29,List(4),week,week,false), Span(26,27,List(5),during,during,false), Span(25,26,List(6),region,region,false), Span(23,24,List(7),visits,visit-01,false), Span(22,23,List(10, 9, 8),Howard,(person :name (name :op "Howard")),false), Span(20,21,List(11),issue,issue,false), Span(14,18,List(15, 14, 13, 12),Roh Woo - hyun,(person :name (name :op "Woo-hyun" :op "Roh")),false), Span(13,14,List(17, 16),President,(have-org-role-91 :ARG2 president),false), Span(11,13,List(21, 20, 19, 18),South Korean,(thing :name (name :op "South" :op "Korean")),false), Span(10,11,List(22),and,and,false), Span(8,10,List(26, 25, 24, 23),Junichiro Koizumi,(person :name (name :op "Koizumi" :op "Junichiro")),false), Span(7,8,List(28, 27),Minister,(have-org-role-91 :ARG2 minister),false), Span(6,7,List(29),Prime,prime,false), Span(5,6,List(32, 31, 30),Japanese,(country :name (name :op "Japan")),false), Span(3,4,List(33),talks,talk-01,false), Span(2,3,List(34),future,future,false), Span(1,2,List(35),referenced,reference-01,false), Span(0,1,List(38, 37, 36),Howard,(person :name (name :op "Howard")),false)),Map(30 -> country, 2 -> 7, 5 -> during, 33 -> talk-01, 27 -> have-org-role-91, 12 -> person, 8 -> person, 15 -> "Roh", 36 -> person, 21 -> "Korean", 18 -> thing, 24 -> name, 35 -> reference-01, 7 -> visit-01, 1 -> 14, 17 -> president, 23 -> person, 38 -> "Howard", 26 -> "Junichiro", 4 -> week, 11 -> issue, 32 -> "Japan", 14 -> "Woo-hyun", 29 -> prime, 20 -> "South", 34 -> future, 28 -> minister, 6 -> region, 9 -> name, 0 -> date-entity, 22 -> and, 16 -> have-org-role-91, 37 -> name, 19 -> name, 10 -> "Howard", 3 -> 2003, 31 -> name, 25 -> "Koizumi", 13 -> name),Map(n -> name, w -> week, h -> have-org-role-91, 2 -> 2003, h2 -> have-org-role-91, p5 -> prime, t -> thing, p2 -> person, n4 -> name, v -> visit-01, d -> date-entity, m -> minister, 7 -> 7, 1 -> 14, r2 -> reference-01, p -> person, n3 -> name, a -> and, p4 -> person, n6 -> name, d2 -> during, t2 -> talk-01, i -> issue, r -> region, c -> country, p6 -> person, f -> future, p3 -> president, n2 -> name, n5 -> name))),[Ljava.lang.String;@1422ac7f,Annotation([Ljava.lang.String;@5e519ad3,[Ljava.lang.String;@7bc44ce8,[Ljava.lang.String;@59072e9d),Annotation([Ljava.lang.String;@58472096,[Ljava.lang.String;@a92be4f,[Ledu.cmu.lti.nlp.amr.Dependency;@53e800f9),Annotation([Ljava.lang.String;@337bbfdf,[Ljava.lang.String;@52d97ab6,[Ljava.lang.String;@4da6d664),Annotation([Ljava.lang.String;@5e5af8e1,[Ljava.lang.String;@30b131b2,[Ledu.cmu.lti.nlp.amr.Entity;@2924f1d8))
AMR:
(a / and, op, h / have-org-role-91)
(a / and, op, p4 / person)
(c / country, name, n5 / name)
(d / date-entity, day, 1 / 14)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2003)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, t / thing)
(h / have-org-role-91, ARG2, p3 / president)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, m / minister)
(m / minister, mod, p5 / prime)
(n / name, op, "Howard")
(n2 / name, op, "Roh")
(n2 / name, op, "Woo-hyun")
(n3 / name, op, "Korean")
(n3 / name, op, "South")
(n4 / name, op, "Junichiro")
(n4 / name, op, "Koizumi")
(n5 / name, op, "Japan")
(n6 / name, op, "Howard")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p4 / person, name, n4 / name)
(p6 / person, name, n6 / name)
(r2 / reference-01, ARG0, p6 / person)
(r2 / reference-01, ARG1, t2 / talk-01)
(r2 / reference-01, time, v / visit-01)
(t / thing, name, n3 / name)
(t2 / talk-01, ARG0, p6 / person)
(t2 / talk-01, ARG1, i / issue)
(t2 / talk-01, ARG2, a / and)
(t2 / talk-01, time, f / future)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, r / region)
(v / visit-01, time, d2 / during)
(v / visit-01, time, w / week)
(w / week, mod, d / date-entity)

Decoded in 1,606,243 microseconds
Sentence: American government has recently formed a proliferation security initiative that consists of 11 members.

NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "American"))
Spans:
Span 12-13:  11 => 11
Span 0-1:  American => (country :name (name :op "America"))
Span 10-11:  consists => consist-01
Span 4-5:  formed => form-01
Span 1-2:  government => (government-organization :ARG0-of govern-01)
Span 13-14:  members => (have-org-role-91 :ARG2 member)
Span 6-9:  proliferation security initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Span 3-4:  recently => recent

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(1, 0),members,(have-org-role-91 :ARG2 member),false), Span(12,13,List(2),11,11,false), Span(10,11,List(3),consists,consist-01,false), Span(6,9,List(8, 7, 6, 5, 4),proliferation security initiative,(organization :name (name :op "Initiative" :op "Security" :op "Proliferation")),false), Span(4,5,List(9),formed,form-01,false), Span(3,4,List(10),recently,recent,false), Span(1,2,List(12, 11),government,(government-organization :ARG0-of govern-01),false), Span(0,1,List(15, 14, 13),American,(country :name (name :op "America")),false)),Map(2 -> 11, 5 -> name, 12 -> govern-01, 15 -> "America", 8 -> "Proliferation", 7 -> "Security", 1 -> member, 4 -> organization, 11 -> government-organization, 14 -> name, 6 -> "Initiative", 0 -> have-org-role-91, 9 -> form-01, 3 -> consist-01, 10 -> recent, 13 -> country),Map(n -> name, h -> have-org-role-91, m -> member, g2 -> govern-01, g -> government-organization, 1 -> 11, r -> recent, c -> consist-01, f -> form-01, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@524a076e,Annotation([Ljava.lang.String;@5b5e7036,[Ljava.lang.String;@62dbe64e,[Ljava.lang.String;@6cff61fc),Annotation([Ljava.lang.String;@6e0c6a7a,[Ljava.lang.String;@467b684d,[Ledu.cmu.lti.nlp.amr.Dependency;@7baf1f5a),Annotation([Ljava.lang.String;@6cc86152,[Ljava.lang.String;@611a990b,[Ljava.lang.String;@7cbeac65),Annotation([Ljava.lang.String;@7fe82967,[Ljava.lang.String;@50850539,[Ledu.cmu.lti.nlp.amr.Entity;@65e21ce3))
AMR:
(c / consist-01, ARG1, o / organization)
(c2 / country, name, n2 / name)
(f / form-01, ARG0, g / government-organization)
(f / form-01, ARG1, o / organization)
(f / form-01, ARG2, 1 / 11)
(f / form-01, time, r / recent)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m / member)
(n / name, op, "Initiative")
(n / name, op, "Proliferation")
(n / name, op, "Security")
(n2 / name, op, "America")
(o / organization, name, n / name)

Decoded in 654,658 microseconds
Sentence: The Proliferation Security Initiative started a meeting 9 July 2003 in Brisbane.

NER Entity: (organization :name (name :op "Proliferation" :op "Security" :op "Initiative"))
mkDayMonthYear(9	July	2003,9,July,2003)
NER Entity: (country :name (name :op "Brisbane"))
NER Entity: (country :name (name :op "Brisbane"))
Spans:
Span 7-10:  9 July 2003 => (date-entity :day 9 :month 7 :year 2003)
Span 11-12:  Brisbane => (city :name (name :op "Brisbane"))
Span 6-7:  meeting => meet-03
Span 1-4:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Span 4-5:  started => start-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Brisbane,(city :name (name :op "Brisbane")),false), Span(7,10,List(6, 5, 4, 3),9 July 2003,(date-entity :day 9 :month 7 :year 2003),false), Span(6,7,List(7),meeting,meet-03,false), Span(4,5,List(8),started,start-01,false), Span(1,4,List(13, 12, 11, 10, 9),Proliferation Security Initiative,(organization :name (name :op "Initiative" :op "Security" :op "Proliferation")),false)),Map(2 -> "Brisbane", 5 -> 7, 12 -> "Security", 8 -> start-01, 7 -> meet-03, 1 -> name, 4 -> 9, 11 -> "Initiative", 6 -> 2003, 0 -> city, 9 -> organization, 3 -> date-entity, 10 -> name, 13 -> "Proliferation"),Map(n -> name, 2 -> 2003, s -> start-01, m -> meet-03, 7 -> 7, d -> date-entity, c -> city, o -> organization, 9 -> 9, n2 -> name))),[Ljava.lang.String;@6c3659be,Annotation([Ljava.lang.String;@522bf64e,[Ljava.lang.String;@2aff9dff,[Ljava.lang.String;@5f0f9947),Annotation([Ljava.lang.String;@1aad0b1,[Ljava.lang.String;@c3edf4c,[Ledu.cmu.lti.nlp.amr.Dependency;@5af8bb51),Annotation([Ljava.lang.String;@799ed4e8,[Ljava.lang.String;@2e66bc32,[Ljava.lang.String;@54d8c20d),Annotation([Ljava.lang.String;@4b65d9f4,[Ljava.lang.String;@44536de4,[Ledu.cmu.lti.nlp.amr.Entity;@5fcfde70))
AMR:
(c / city, name, n / name)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 7 / 7)
(d / date-entity, year, 2 / 2003)
(m / meet-03, ARG0, o / organization)
(m / meet-03, location, c / city)
(n / name, op, "Brisbane")
(n2 / name, op, "Initiative")
(n2 / name, op, "Proliferation")
(n2 / name, op, "Security")
(o / organization, name, n2 / name)
(s / start-01, ARG0, o / organization)
(s / start-01, ARG1, m / meet-03)
(s / start-01, time, d / date-entity)

Decoded in 104,442 microseconds
Sentence: Members of the Proliferation Security Initiative are considering ways of intercepting ships or aircraft suspected of carrying weapons of mass destruction.

NER Entity: (organization :name (name :op "Proliferation" :op "Security" :op "Initiative"))
Spans:
Span 13-14:  aircraft => aircraft
Span 16-17:  carrying => carry-01
Span 7-8:  considering => consider-02
Span 20-21:  destruction => destroy-01
Span 10-11:  intercepting => intercept-01
Span 19-20:  mass => mass
Span 0-1:  Members => member
Span 12-13:  or => or
Span 3-6:  Proliferation Security Initiative => (organization :name (name :op "Initiative" :op "Security" :op "Proliferation"))
Span 11-12:  ships => ship
Span 14-15:  suspected => suspect-01
Span 8-9:  ways => way
Span 17-18:  weapons => weapon

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),destruction,destroy-01,false), Span(19,20,List(1),mass,mass,false), Span(17,18,List(2),weapons,weapon,false), Span(16,17,List(3),carrying,carry-01,false), Span(14,15,List(4),suspected,suspect-01,false), Span(13,14,List(5),aircraft,aircraft,false), Span(12,13,List(6),or,or,false), Span(11,12,List(7),ships,ship,false), Span(10,11,List(8),intercepting,intercept-01,false), Span(8,9,List(9),ways,way,false), Span(7,8,List(10),considering,consider-02,false), Span(3,6,List(15, 14, 13, 12, 11),Proliferation Security Initiative,(organization :name (name :op "Initiative" :op "Security" :op "Proliferation")),false), Span(0,1,List(16),Members,member,false)),Map(2 -> weapon, 5 -> aircraft, 12 -> name, 15 -> "Proliferation", 8 -> intercept-01, 7 -> ship, 1 -> mass, 4 -> suspect-01, 11 -> organization, 14 -> "Security", 6 -> or, 0 -> destroy-01, 9 -> way, 16 -> member, 3 -> carry-01, 10 -> consider-02, 13 -> "Initiative"),Map(w -> weapon, n -> name, s2 -> ship, m2 -> member, s -> suspect-01, d -> destroy-01, m -> mass, a -> aircraft, o2 -> organization, w2 -> way, i -> intercept-01, c -> carry-01, o -> or, c2 -> consider-02))),[Ljava.lang.String;@4d95a72e,Annotation([Ljava.lang.String;@28da7d11,[Ljava.lang.String;@77b919a3,[Ljava.lang.String;@5624657a),Annotation([Ljava.lang.String;@36681447,[Ljava.lang.String;@4d21c56e,[Ledu.cmu.lti.nlp.amr.Dependency;@726aa968),Annotation([Ljava.lang.String;@7100dea,[Ljava.lang.String;@712cfb63,[Ljava.lang.String;@32e54a9d),Annotation([Ljava.lang.String;@15639440,[Ljava.lang.String;@121bb45b,[Ledu.cmu.lti.nlp.amr.Entity;@4faa298))
AMR:
(c / carry-01, ARG1, w / weapon)
(c2 / consider-02, ARG1, w2 / way)
(d / destroy-01, ARG1, o / or)
(d / destroy-01, degree, m / mass)
(i / intercept-01, ARG0, m2 / member)
(i / intercept-01, ARG1, o / or)
(m2 / member, poss, o2 / organization)
(n / name, op, "Initiative")
(n / name, op, "Proliferation")
(n / name, op, "Security")
(o / or, op, a / aircraft)
(o / or, op, s2 / ship)
(o2 / organization, name, n / name)
(s / suspect-01, ARG1, c / carry-01)
(s / suspect-01, ARG2, o / or)
(w2 / way, mod, i / intercept-01)

Decoded in 674,451 microseconds
Sentence: The American government has reportedly suggested the Australian military could be involved in stopping nations from transporting weapons both on the high seas and through Australian territorial waters.

NER Entity: (thing :name (name :op "American"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "American"))
Spans:
Span 1-2:  American => (country :name (name :op "America"))
Span 23-24:  and => and
Span 25-26:  Australian => (country :name (name :op "Australia"))
Span 7-8:  Australian => (country :name (name :op "Australia"))
Span 18-19:  both => both
Span 9-10:  could => possible
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 21-22:  high => high
Span 11-12:  involved => involve-01
Span 8-9:  military => military
Span 14-15:  nations => nation
Span 4-5:  reportedly => report-01
Span 22-23:  seas => sea
Span 13-14:  stopping => stop-01
Span 5-6:  suggested => suggest-01
Span 26-27:  territorial => territory
Span 24-25:  through => through
Span 16-17:  transporting => transport-01
Span 27-28:  waters => water
Span 17-18:  weapons => weapon

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),waters,water,false), Span(26,27,List(1),territorial,territory,false), Span(25,26,List(4, 3, 2),Australian,(country :name (name :op "Australia")),false), Span(24,25,List(5),through,through,false), Span(23,24,List(6),and,and,false), Span(22,23,List(7),seas,sea,false), Span(21,22,List(8),high,high,false), Span(18,19,List(9),both,both,false), Span(17,18,List(10),weapons,weapon,false), Span(16,17,List(11),transporting,transport-01,false), Span(14,15,List(12),nations,nation,false), Span(13,14,List(13),stopping,stop-01,false), Span(11,12,List(14),involved,involve-01,false), Span(9,10,List(15),could,possible,false), Span(8,9,List(16),military,military,false), Span(7,8,List(19, 18, 17),Australian,(country :name (name :op "Australia")),false), Span(5,6,List(20),suggested,suggest-01,false), Span(4,5,List(21),reportedly,report-01,false), Span(2,3,List(23, 22),government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(26, 25, 24),American,(country :name (name :op "America")),false)),Map(2 -> country, 5 -> through, 12 -> nation, 8 -> high, 15 -> possible, 21 -> report-01, 18 -> name, 24 -> country, 7 -> sea, 1 -> territory, 17 -> country, 23 -> govern-01, 26 -> "America", 4 -> "Australia", 11 -> transport-01, 14 -> involve-01, 20 -> suggest-01, 6 -> and, 9 -> both, 0 -> water, 22 -> government-organization, 16 -> military, 19 -> "Australia", 10 -> weapon, 3 -> name, 25 -> name, 13 -> stop-01),Map(w -> water, n -> name, h -> high, s2 -> stop-01, t -> territory, b -> both, n4 -> name, s -> sea, m -> military, g2 -> govern-01, t3 -> transport-01, g -> government-organization, p -> possible, c3 -> country, n3 -> name, a -> and, t2 -> through, w2 -> weapon, r -> report-01, i -> involve-01, s3 -> suggest-01, c -> country, c2 -> country, n2 -> nation))),[Ljava.lang.String;@1cd3b138,Annotation([Ljava.lang.String;@151bf776,[Ljava.lang.String;@5a6d30e2,[Ljava.lang.String;@b52b755),Annotation([Ljava.lang.String;@a098d76,[Ljava.lang.String;@40e37b06,[Ledu.cmu.lti.nlp.amr.Dependency;@733aa9d8),Annotation([Ljava.lang.String;@6dcc40f5,[Ljava.lang.String;@2b680207,[Ljava.lang.String;@70887727),Annotation([Ljava.lang.String;@56da7487,[Ljava.lang.String;@599e4d41,[Ledu.cmu.lti.nlp.amr.Entity;@328d044f))
AMR:
(a / and, mod, b / both)
(a / and, op, s / sea)
(a / and, op, t2 / through)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(i / involve-01, ARG1, m / military)
(i / involve-01, ARG2, s2 / stop-01)
(n / name, op, "Australia")
(n3 / name, op, "Australia")
(n4 / name, op, "America")
(p / possible, domain, i / involve-01)
(r / report-01, ARG1, s3 / suggest-01)
(s / sea, mod, h / high)
(s2 / stop-01, ARG0, m / military)
(s2 / stop-01, ARG1, n2 / nation)
(s2 / stop-01, ARG2, t3 / transport-01)
(s3 / suggest-01, ARG0, g / government-organization)
(s3 / suggest-01, ARG1, p / possible)
(t / territory, mod, c2 / country)
(t2 / through, path, w / water)
(t3 / transport-01, ARG0, n2 / nation)
(t3 / transport-01, ARG1, w2 / weapon)
(t3 / transport-01, ARG2, a / and)
(w / water, mod, c / country)
(w / water, mod, t / territory)

Decoded in 1,212,025 microseconds
Sentence: 2003-11-07

mkDayMonthYear(2003-11-07,07,11,2003)
mkDayMonthYear(2003-11-07,07,11,2003)
Spans:
Span 0-1:  2003-11-07 => (date-entity :day 7 :month 11 :year 2003)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2003-11-07,(date-entity :day 7 :month 11 :year 2003),false)),Map(2 -> 11, 1 -> 7, 0 -> date-entity, 3 -> 2003),Map(2 -> 2003, 7 -> 7, d -> date-entity, 1 -> 11))),[Ljava.lang.String;@10f7c76,Annotation([Ljava.lang.String;@4745e9c,[Ljava.lang.String;@2f2bff16,[Ljava.lang.String;@75de29c0),Annotation([Ljava.lang.String;@fc807c1,[Ljava.lang.String;@296e281a,[Ledu.cmu.lti.nlp.amr.Dependency;@59cda16e),Annotation([Ljava.lang.String;@5dd903be,[Ljava.lang.String;@12e0f1cb,[Ljava.lang.String;@4a163575),Annotation([Ljava.lang.String;@7e642b88,[Ljava.lang.String;@6b350309,[Ledu.cmu.lti.nlp.amr.Entity;@7ecec90d))
AMR:
(d / date-entity, day, 7 / 7)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 2 / 2003)

Decoded in 6,875 microseconds
Sentence: South Africa (ZA); Brazil (BR); India (IN)

NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (organization :name (name :op "BR"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "IN"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 10-11:  ; => and
Span 5-6:  ; => and
Span 6-7:  Brazil => (country :name (name :op "Brazil"))
Span 11-12:  India => (country :name (name :op "India"))
Span 0-2:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),India,(country :name (name :op "India")),false), Span(10,11,List(3),;,and,false), Span(6,7,List(6, 5, 4),Brazil,(country :name (name :op "Brazil")),false), Span(5,6,List(7),;,and,false), Span(0,2,List(11, 10, 9, 8),South Africa,(country :name (name :op "South" :op "Africa")),false)),Map(2 -> "India", 5 -> name, 8 -> country, 7 -> and, 1 -> name, 11 -> "Africa", 4 -> country, 6 -> "Brazil", 9 -> name, 0 -> country, 10 -> "South", 3 -> and),Map(n -> name, n3 -> name, c3 -> country, a -> and, a2 -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@588f63c,Annotation([Ljava.lang.String;@5a6fa56e,[Ljava.lang.String;@1981d861,[Ljava.lang.String;@118ffcfd),Annotation([Ljava.lang.String;@53f4c1e6,[Ljava.lang.String;@74174a23,[Ledu.cmu.lti.nlp.amr.Dependency;@6342d610),Annotation([Ljava.lang.String;@dc4a691,[Ljava.lang.String;@784abd3e,[Ljava.lang.String;@36c2b646),Annotation([Ljava.lang.String;@434514d8,[Ljava.lang.String;@6b1dc20f,[Ledu.cmu.lti.nlp.amr.Entity;@4613311f))
AMR:
(a / and, op, c2 / country)
(a2 / and, op, a / and)
(a2 / and, op, c / country)
(a2 / and, op, c3 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(n / name, op, "India")
(n2 / name, op, "Brazil")
(n3 / name, op, "Africa")
(n3 / name, op, "South")

Decoded in 40,953 microseconds
Sentence: International; politics

Spans:
Span 1-2:  ; => and
Span 0-1:  International => international
Span 2-3:  politics => politics

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),politics,politics,false), Span(1,2,List(1),;,and,false), Span(0,1,List(2),International,international,false)),Map(2 -> international, 1 -> and, 0 -> politics),Map(p -> politics, a -> and, i -> international))),[Ljava.lang.String;@6540cf1d,Annotation([Ljava.lang.String;@ec8f4b9,[Ljava.lang.String;@bc042d5,[Ljava.lang.String;@5484117b),Annotation([Ljava.lang.String;@37df14d1,[Ljava.lang.String;@7efb53af,[Ledu.cmu.lti.nlp.amr.Dependency;@7724704f),Annotation([Ljava.lang.String;@3dfa819,[Ljava.lang.String;@4ce94d2f,[Ljava.lang.String;@68ab0936),Annotation([Ljava.lang.String;@3cd9aa64,[Ljava.lang.String;@42b84286,[Ledu.cmu.lti.nlp.amr.Entity;@443effcb))
AMR:
(a / and, op, i / international)
(a / and, op, p / politics)

Decoded in 5,581 microseconds
Sentence: Brazilian President Lula da Silva arrived in Pretoria, South Africa on 031107 for bilateral political and economic discussions with South African President Thabo Mbeki scheduled for 031108.

NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (country :name (name :op "Pretoria"))
NER Entity: (country :name (name :op "South" :op "Africa"))
mkDayMonthYear(031107,07,11,2003)
mkDayMonthYear(031107,07,11,03)
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (person :name (name :op "Thabo" :op "Mbeki"))
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
mkDayMonthYear(031107,07,11,2003)
mkDayMonthYear(031107,07,11,03)
NER Entity: (country :name (name :op "Pretoria"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 12-13:  031107 => (date-entity :day 7 :month 11 :year 03)
Span 27-28:  031108 => (date-entity :day 8 :month 11 :year 03)
Span 16-17:  and => and
Span 5-6:  arrived => arrive-01
Span 14-15:  bilateral => bilateral
Span 0-1:  Brazilian => (country :name (name :op "Brazil"))
Span 18-19:  discussions => discuss-01
Span 17-18:  economic => economy
Span 2-5:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Span 15-16:  political => politics
Span 22-23:  President => (have-org-role-91 :ARG2 president)
Span 1-2:  President => (have-org-role-91 :ARG2 president)
Span 7-8:  Pretoria => (city :name (name :op "Pretoria"))
Span 25-26:  scheduled => schedule-01
Span 9-11:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 20-22:  South African => (thing :name (name :op "South" :op "African"))
Span 23-25:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(3, 2, 1, 0),031108,(date-entity :day 8 :month 11 :year 03),false), Span(25,26,List(4),scheduled,schedule-01,false), Span(23,25,List(8, 7, 6, 5),Thabo Mbeki,(person :name (name :op "Mbeki" :op "Thabo")),false), Span(22,23,List(10, 9),President,(have-org-role-91 :ARG2 president),false), Span(20,22,List(14, 13, 12, 11),South African,(thing :name (name :op "South" :op "African")),false), Span(18,19,List(15),discussions,discuss-01,false), Span(17,18,List(16),economic,economy,false), Span(16,17,List(17),and,and,false), Span(15,16,List(18),political,politics,false), Span(14,15,List(19),bilateral,bilateral,false), Span(12,13,List(23, 22, 21, 20),031107,(date-entity :day 7 :month 11 :year 03),false), Span(9,11,List(27, 26, 25, 24),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(7,8,List(30, 29, 28),Pretoria,(city :name (name :op "Pretoria")),false), Span(5,6,List(31),arrived,arrive-01,false), Span(2,5,List(36, 35, 34, 33, 32),Lula da Silva,(person :name (name :op "Silva" :op "da" :op "Lula")),false), Span(1,2,List(38, 37),President,(have-org-role-91 :ARG2 president),false), Span(0,1,List(41, 40, 39),Brazilian,(country :name (name :op "Brazil")),false)),Map(39 -> country, 30 -> "Pretoria", 2 -> 11, 5 -> person, 33 -> name, 27 -> "Africa", 12 -> name, 8 -> "Thabo", 15 -> discuss-01, 36 -> "Lula", 21 -> 7, 18 -> politics, 24 -> country, 41 -> "Brazil", 35 -> "da", 7 -> "Mbeki", 1 -> 8, 17 -> and, 23 -> 03, 38 -> president, 26 -> "South", 4 -> schedule-01, 11 -> thing, 32 -> person, 14 -> "African", 29 -> name, 20 -> date-entity, 34 -> "Silva", 28 -> city, 6 -> name, 40 -> name, 9 -> have-org-role-91, 0 -> date-entity, 22 -> 11, 16 -> economy, 37 -> have-org-role-91, 19 -> bilateral, 10 -> president, 3 -> 03, 31 -> arrive-01, 25 -> name, 13 -> "South"),Map(e -> economy, n -> name, h -> have-org-role-91, p5 -> president, h2 -> have-org-role-91, t -> thing, 12 -> 11, b -> bilateral, 8 -> 8, d3 -> date-entity, p2 -> president, n4 -> name, s -> schedule-01, d -> date-entity, 7 -> 7, 1 -> 11, p -> person, c3 -> country, a -> and, n3 -> name, p4 -> person, n6 -> name, d2 -> discuss-01, 02 -> 03, a2 -> arrive-01, c -> country, 0 -> 03, p3 -> politics, n2 -> name, c2 -> city, n5 -> name))),[Ljava.lang.String;@74ecacc3,Annotation([Ljava.lang.String;@517a2b0,[Ljava.lang.String;@53b7ce6,[Ljava.lang.String;@36480b2d),Annotation([Ljava.lang.String;@27d33393,[Ljava.lang.String;@1f6917fb,[Ledu.cmu.lti.nlp.amr.Dependency;@41eb94bc),Annotation([Ljava.lang.String;@378cfecf,[Ljava.lang.String;@97d0c06,[Ljava.lang.String;@5e7c141d),Annotation([Ljava.lang.String;@43af351a,[Ljava.lang.String;@1305c126,[Ledu.cmu.lti.nlp.amr.Entity;@72f9f27c))
AMR:
(a / and, mod, b / bilateral)
(a / and, op, e / economy)
(a / and, op, p3 / politics)
(a2 / arrive-01, ARG1, p4 / person)
(a2 / arrive-01, ARG4, c2 / city)
(a2 / arrive-01, purpose, d2 / discuss-01)
(a2 / arrive-01, time, d3 / date-entity)
(c / country, name, n3 / name)
(c2 / city, location, c / country)
(c2 / city, name, n4 / name)
(c3 / country, name, n6 / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 0 / 03)
(d2 / discuss-01, ARG0, p4 / person)
(d2 / discuss-01, ARG1, a / and)
(d3 / date-entity, day, 7 / 7)
(d3 / date-entity, month, 12 / 11)
(d3 / date-entity, year, 02 / 03)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, p2 / president)
(h / have-org-role-91, ARG6, t / thing)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, p5 / president)
(n / name, op, "Mbeki")
(n / name, op, "Thabo")
(n2 / name, op, "African")
(n2 / name, op, "South")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Pretoria")
(n5 / name, op, "Lula")
(n5 / name, op, "Silva")
(n5 / name, op, "da")
(n6 / name, op, "Brazil")
(p / person, name, n / name)
(p4 / person, name, n5 / name)
(s / schedule-01, ARG1, d2 / discuss-01)
(s / schedule-01, ARG3, d / date-entity)
(t / thing, name, n2 / name)

Decoded in 3,469,254 microseconds
Sentence: The South African Press Association reported on 031108 that the Brazilian President Lula da Silva arrived in Pretoria, South Africa on the evening of 031107 for bilateral political and economic discussions scheduled for the morning of 031108 with South African President Thabo Mbeki.

NER Entity: (thing :name (name :op "South"))
NER Entity: (organization :name (name :op "African" :op "Press" :op "Association"))
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (country :name (name :op "Pretoria"))
NER Entity: (country :name (name :op "South" :op "Africa"))
mkDayMonthYear(031107,07,11,2003)
mkDayMonthYear(031107,07,11,03)
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (person :name (name :op "Thabo" :op "Mbeki"))
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
mkDayMonthYear(031107,07,11,2003)
mkDayMonthYear(031107,07,11,03)
NER Entity: (country :name (name :op "Pretoria"))
NER Entity: (thing :name (name :op "Brazilian"))
mkDayMonthYear(031108,08,11,2003)
mkDayMonthYear(031108,08,11,03)
Spans:
Span 25-26:  031107 => (date-entity :day 7 :month 11 :year 03)
Span 37-38:  031108 => (date-entity :day 8 :month 11 :year 03)
Span 7-8:  031108 => (date-entity :day 8 :month 11 :year 03)
Span 2-5:  African Press Association => (organization :name (name :op "African" :op "Press" :op "Association"))
Span 29-30:  and => and
Span 15-16:  arrived => arrive-01
Span 27-28:  bilateral => bilateral
Span 10-11:  Brazilian => (country :name (name :op "Brazil"))
Span 31-32:  discussions => discuss-01
Span 30-31:  economic => economy
Span 23-24:  evening => evening
Span 12-15:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Span 35-36:  morning => morning
Span 28-29:  political => politics
Span 41-42:  President => (have-org-role-91 :ARG2 president)
Span 11-12:  President => (have-org-role-91 :ARG2 president)
Span 17-18:  Pretoria => (city :name (name :op "Pretoria"))
Span 5-6:  reported => report-01
Span 32-33:  scheduled => schedule-01
Span 19-21:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 39-41:  South African => (thing :name (name :op "South" :op "African"))
Span 42-44:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,44,List(3, 2, 1, 0),Thabo Mbeki,(person :name (name :op "Mbeki" :op "Thabo")),false), Span(41,42,List(5, 4),President,(have-org-role-91 :ARG2 president),false), Span(39,41,List(9, 8, 7, 6),South African,(thing :name (name :op "South" :op "African")),false), Span(37,38,List(13, 12, 11, 10),031108,(date-entity :day 8 :month 11 :year 03),false), Span(35,36,List(14),morning,morning,false), Span(32,33,List(15),scheduled,schedule-01,false), Span(31,32,List(16),discussions,discuss-01,false), Span(30,31,List(17),economic,economy,false), Span(29,30,List(18),and,and,false), Span(28,29,List(19),political,politics,false), Span(27,28,List(20),bilateral,bilateral,false), Span(25,26,List(24, 23, 22, 21),031107,(date-entity :day 7 :month 11 :year 03),false), Span(23,24,List(25),evening,evening,false), Span(19,21,List(29, 28, 27, 26),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(17,18,List(32, 31, 30),Pretoria,(city :name (name :op "Pretoria")),false), Span(15,16,List(33),arrived,arrive-01,false), Span(12,15,List(38, 37, 36, 35, 34),Lula da Silva,(person :name (name :op "Silva" :op "da" :op "Lula")),false), Span(11,12,List(40, 39),President,(have-org-role-91 :ARG2 president),false), Span(10,11,List(43, 42, 41),Brazilian,(country :name (name :op "Brazil")),false), Span(7,8,List(47, 46, 45, 44),031108,(date-entity :day 8 :month 11 :year 03),false), Span(5,6,List(48),reported,report-01,false), Span(2,5,List(53, 52, 51, 50, 49),African Press Association,(organization :name (name :op "African" :op "Press" :op "Association")),false)),Map(30 -> city, 39 -> have-org-role-91, 45 -> 8, 51 -> "African", 2 -> "Mbeki", 5 -> president, 48 -> report-01, 33 -> arrive-01, 27 -> name, 12 -> 11, 8 -> "South", 15 -> schedule-01, 42 -> name, 36 -> "Silva", 21 -> date-entity, 18 -> and, 24 -> 03, 53 -> "Association", 35 -> name, 41 -> country, 7 -> name, 17 -> economy, 1 -> name, 50 -> name, 44 -> date-entity, 23 -> 11, 38 -> "Lula", 47 -> 03, 4 -> have-org-role-91, 26 -> country, 11 -> 8, 32 -> "Pretoria", 14 -> morning, 20 -> bilateral, 29 -> "Africa", 46 -> 11, 52 -> "Press", 34 -> person, 6 -> thing, 28 -> "South", 40 -> president, 49 -> organization, 0 -> person, 9 -> "African", 43 -> "Brazil", 22 -> 7, 16 -> discuss-01, 37 -> "da", 19 -> politics, 3 -> "Thabo", 10 -> date-entity, 25 -> evening, 31 -> name, 13 -> 03),Map(e -> economy, n -> name, h -> have-org-role-91, p5 -> president, h2 -> have-org-role-91, t -> thing, 12 -> 11, b -> bilateral, 8 -> 8, d3 -> date-entity, n7 -> name, 03 -> 03, p2 -> president, e2 -> evening, n4 -> name, s -> schedule-01, m -> morning, d -> date-entity, 7 -> 7, 1 -> 11, p -> person, c3 -> country, a -> and, n3 -> name, p4 -> person, n6 -> name, d2 -> discuss-01, 82 -> 8, 02 -> 03, r -> report-01, a2 -> arrive-01, c -> country, d4 -> date-entity, 0 -> 03, o -> organization, p3 -> politics, n2 -> name, c2 -> city, 13 -> 11, n5 -> name))),[Ljava.lang.String;@4c1bdcc2,Annotation([Ljava.lang.String;@762637be,[Ljava.lang.String;@4b97c4ad,[Ljava.lang.String;@7640a5b1),Annotation([Ljava.lang.String;@642f9a77,[Ljava.lang.String;@23f3da8b,[Ledu.cmu.lti.nlp.amr.Dependency;@5634d0f4),Annotation([Ljava.lang.String;@252a8aae,[Ljava.lang.String;@3d4e405e,[Ljava.lang.String;@54e2fe),Annotation([Ljava.lang.String;@70972170,[Ljava.lang.String;@119aa36,[Ledu.cmu.lti.nlp.amr.Entity;@4e1a46fb))
AMR:
(a / and, mod, b / bilateral)
(a / and, op, e / economy)
(a / and, op, p3 / politics)
(a2 / arrive-01, ARG1, p4 / person)
(a2 / arrive-01, purpose, d2 / discuss-01)
(a2 / arrive-01, time, d3 / date-entity)
(c / country, name, n3 / name)
(c2 / city, location, c / country)
(c2 / city, name, n4 / name)
(c3 / country, name, n6 / name)
(d / date-entity, day, 8 / 8)
(d / date-entity, month, 1 / 11)
(d / date-entity, year, 0 / 03)
(d2 / discuss-01, ARG0, p4 / person)
(d2 / discuss-01, ARG1, a / and)
(d2 / discuss-01, ARG2, p / person)
(d3 / date-entity, day, 7 / 7)
(d3 / date-entity, dayperiod, e2 / evening)
(d3 / date-entity, month, 12 / 11)
(d3 / date-entity, year, 02 / 03)
(d4 / date-entity, day, 82 / 8)
(d4 / date-entity, dayperiod, m / morning)
(d4 / date-entity, month, 13 / 11)
(d4 / date-entity, year, 03 / 03)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, p2 / president)
(h / have-org-role-91, ARG6, t / thing)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, p5 / president)
(n / name, op, "Mbeki")
(n / name, op, "Thabo")
(n2 / name, op, "African")
(n2 / name, op, "South")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Pretoria")
(n5 / name, op, "Lula")
(n5 / name, op, "Silva")
(n5 / name, op, "da")
(n6 / name, op, "Brazil")
(n7 / name, op, "African")
(n7 / name, op, "Association")
(n7 / name, op, "Press")
(o / organization, name, n7 / name)
(p / person, name, n / name)
(p4 / person, name, n5 / name)
(r / report-01, ARG0, o / organization)
(r / report-01, ARG1, a2 / arrive-01)
(r / report-01, time, d / date-entity)
(s / schedule-01, ARG1, d2 / discuss-01)
(s / schedule-01, ARG2, d4 / date-entity)
(t / thing, name, n2 / name)

Decoded in 5,990,474 microseconds
Sentence: The discussions will be held in Pretoria, South Africa.

NER Entity: (country :name (name :op "Pretoria"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Pretoria"))
Spans:
Span 1-2:  discussions => discuss-01
Span 4-5:  held => hold-04
Span 6-7:  Pretoria => (city :name (name :op "Pretoria"))
Span 8-10:  South Africa => (country :name (name :op "South" :op "Africa"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,10,List(3, 2, 1, 0),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(6,7,List(6, 5, 4),Pretoria,(city :name (name :op "Pretoria")),false), Span(4,5,List(7),held,hold-04,false), Span(1,2,List(8),discussions,discuss-01,false)),Map(2 -> "South", 5 -> name, 8 -> discuss-01, 7 -> hold-04, 1 -> name, 4 -> city, 6 -> "Pretoria", 0 -> country, 3 -> "Africa"),Map(n -> name, h -> hold-04, d -> discuss-01, c -> country, n2 -> name, c2 -> city))),[Ljava.lang.String;@69fe0ed4,Annotation([Ljava.lang.String;@20ab3e3a,[Ljava.lang.String;@6caf7803,[Ljava.lang.String;@709ed6f3),Annotation([Ljava.lang.String;@698fee9a,[Ljava.lang.String;@102c577f,[Ledu.cmu.lti.nlp.amr.Dependency;@7d44a19),Annotation([Ljava.lang.String;@1fb2d5e,[Ljava.lang.String;@1716e8c5,[Ljava.lang.String;@6573d2f7),Annotation([Ljava.lang.String;@4052c8c2,[Ljava.lang.String;@181b8c4b,[Ledu.cmu.lti.nlp.amr.Entity;@38eb0f4d))
AMR:
(c / country, name, n / name)
(c2 / city, location, c / country)
(c2 / city, name, n2 / name)
(h / hold-04, ARG1, d / discuss-01)
(h / hold-04, location, c2 / city)
(n / name, op, "Africa")
(n / name, op, "South")
(n2 / name, op, "Pretoria")

Decoded in 24,278 microseconds
Sentence: South African foreign affairs spokeswoman manusha Pillay stated that Lula da Silva's aircraft landed at Waterkloof Air Force base shortly after 1730 Greenwich Mean Time.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (person :name (name :op "Pillay"))
NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (thing :name (name :op "Waterkloof"))
NER Entity: (organization :name (name :op "Air" :op "Force"))
NER Entity: (organization :name (name :op "Greenwich" :op "Mean" :op "Time"))
NER Entity: (person :name (name :op "Pillay"))
Spans:
Span 22-23:  1730 => (date-entity :year 1730)
Span 3-4:  affairs => affair
Span 21-22:  after => after
Span 13-14:  aircraft => aircraft
Span 19-20:  base => base
Span 2-3:  foreign => foreign
Span 23-26:  Greenwich Mean Time => (organization :name (name :op "Greenwich" :op "Mean" :op "Time"))
Span 14-15:  landed => land-01
Span 9-12:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Span 5-7:  manusha Pillay => (person :name (name :op "Pillay" :op "Manusha"))
Span 20-21:  shortly => short
Span 0-2:  South African => (thing :name (name :op "South" :op "African"))
Span 4-5:  spokeswoman => (have-org-role-91 :ARG2 spokeswoman)
Span 7-8:  stated => state-01
Span 16-19:  Waterkloof Air Force => (airport :name (name :op "Force" :op "Air" :op "Waterkloof"))

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,26,List(4, 3, 2, 1, 0),Greenwich Mean Time,(organization :name (name :op "Greenwich" :op "Mean" :op "Time")),false), Span(22,23,List(6, 5),1730,(date-entity :year 1730),false), Span(21,22,List(7),after,after,false), Span(20,21,List(8),shortly,short,false), Span(19,20,List(9),base,base,false), Span(16,19,List(14, 13, 12, 11, 10),Waterkloof Air Force,(airport :name (name :op "Force" :op "Air" :op "Waterkloof")),false), Span(14,15,List(15),landed,land-01,false), Span(13,14,List(16),aircraft,aircraft,false), Span(9,12,List(21, 20, 19, 18, 17),Lula da Silva,(person :name (name :op "Silva" :op "da" :op "Lula")),false), Span(7,8,List(22),stated,state-01,false), Span(5,7,List(26, 25, 24, 23),manusha Pillay,(person :name (name :op "Pillay" :op "Manusha")),false), Span(4,5,List(28, 27),spokeswoman,(have-org-role-91 :ARG2 spokeswoman),false), Span(3,4,List(29),affairs,affair,false), Span(2,3,List(30),foreign,foreign,false), Span(0,2,List(34, 33, 32, 31),South African,(thing :name (name :op "South" :op "African")),false)),Map(30 -> foreign, 2 -> "Greenwich", 5 -> date-entity, 33 -> "South", 27 -> have-org-role-91, 12 -> "Force", 8 -> short, 15 -> land-01, 21 -> "Lula", 18 -> name, 24 -> name, 7 -> after, 1 -> name, 17 -> person, 23 -> person, 26 -> "Manusha", 4 -> "Time", 11 -> name, 32 -> name, 14 -> "Waterkloof", 29 -> affair, 20 -> "da", 34 -> "African", 28 -> spokeswoman, 6 -> 1730, 9 -> base, 0 -> organization, 22 -> state-01, 16 -> aircraft, 19 -> "Silva", 10 -> airport, 3 -> "Mean", 31 -> thing, 25 -> "Pillay", 13 -> "Air"),Map(n -> name, h -> have-org-role-91, s2 -> state-01, t -> thing, b -> base, p2 -> person, n4 -> name, a3 -> aircraft, s -> short, d -> date-entity, 1 -> 1730, p -> person, a -> after, n3 -> name, a2 -> airport, s3 -> spokeswoman, l -> land-01, f -> foreign, o -> organization, n2 -> name, a4 -> affair, n5 -> name))),[Ljava.lang.String;@437486cd,Annotation([Ljava.lang.String;@15b642b9,[Ljava.lang.String;@518bfd90,[Ljava.lang.String;@317a118b),Annotation([Ljava.lang.String;@56dfab87,[Ljava.lang.String;@715b886f,[Ledu.cmu.lti.nlp.amr.Dependency;@7fb29ca9),Annotation([Ljava.lang.String;@1e253c9d,[Ljava.lang.String;@350d3f4d,[Ljava.lang.String;@18b8d173),Annotation([Ljava.lang.String;@73844119,[Ljava.lang.String;@44f24a20,[Ledu.cmu.lti.nlp.amr.Entity;@1859e2a4))
AMR:
(a / after, mod, s / short)
(a / after, op, d / date-entity)
(a / after, op, o / organization)
(a2 / airport, name, n2 / name)
(a3 / aircraft, beneficiary, p / person)
(a4 / affair, mod, f / foreign)
(a4 / affair, mod, t / thing)
(b / base, mod, a2 / airport)
(d / date-entity, year, 1 / 1730)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, a4 / affair)
(h / have-org-role-91, ARG2, s3 / spokeswoman)
(l / land-01, ARG1, a3 / aircraft)
(l / land-01, ARG2, o / organization)
(l / land-01, location, b / base)
(n / name, op, "Greenwich")
(n / name, op, "Mean")
(n / name, op, "Time")
(n2 / name, op, "Air")
(n2 / name, op, "Force")
(n2 / name, op, "Waterkloof")
(n3 / name, op, "Lula")
(n3 / name, op, "Silva")
(n3 / name, op, "da")
(n4 / name, op, "Manusha")
(n4 / name, op, "Pillay")
(n5 / name, op, "African")
(n5 / name, op, "South")
(o / organization, name, n / name)
(p / person, name, n3 / name)
(p2 / person, name, n4 / name)
(s2 / state-01, ARG0, p2 / person)
(s2 / state-01, ARG1, l / land-01)
(t / thing, name, n5 / name)

Decoded in 2,491,190 microseconds
Sentence: Lula da Silva's visit to South Africa follows the second meeting of the South Africa-Brazil Joint Commission held in Pretoria in 030500.

NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (thing :name (name :op "South" :op "Africa" :op "-" :op "Brazil"))
NER Entity: (organization :name (name :op "Joint" :op "Commission"))
NER Entity: (country :name (name :op "Pretoria"))
mkDayMonthYear(030500,00,05,03)
mkDayMonthYear(030500,00,05,03)
NER Entity: (country :name (name :op "Pretoria"))
Spans:
Span 16-18:  - Brazil => (organization :name (name :op "Joint" :op "Commission"))
Span 24-25:  030500 => (date-entity :month 5 :year 2003)
Span 8-9:  follows => follow-01
Span 20-21:  held => hold-04
Span 18-20:  Joint Commission => (organization :name (name :op "Commission" :op "Joint"))
Span 0-3:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Span 11-12:  meeting => meet-03
Span 22-23:  Pretoria => (city :name (name :op "Pretoria"))
Span 14-16:  South Africa => (thing :name (name :op "South" :op "Africa" :op "-" :op "Brazil"))
Span 6-8:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 4-5:  visit => visit-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),030500,(date-entity :month 5 :year 2003),false), Span(22,23,List(5, 4, 3),Pretoria,(city :name (name :op "Pretoria")),false), Span(20,21,List(6),held,hold-04,false), Span(18,20,List(10, 9, 8, 7),Joint Commission,(organization :name (name :op "Commission" :op "Joint")),false), Span(16,18,List(14, 13, 12, 11),- Brazil,(organization :name (name :op "Joint" :op "Commission")),false), Span(14,16,List(20, 19, 18, 17, 16, 15),South Africa,(thing :name (name :op "South" :op "Africa" :op "-" :op "Brazil")),false), Span(11,12,List(21),meeting,meet-03,false), Span(8,9,List(22),follows,follow-01,false), Span(6,8,List(26, 25, 24, 23),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(4,5,List(27),visit,visit-01,false), Span(0,3,List(32, 31, 30, 29, 28),Lula da Silva,(person :name (name :op "Silva" :op "da" :op "Lula")),false)),Map(30 -> "Silva", 2 -> 2003, 5 -> "Pretoria", 27 -> visit-01, 12 -> name, 8 -> name, 15 -> thing, 21 -> meet-03, 18 -> "Africa", 24 -> name, 7 -> organization, 1 -> 5, 17 -> "South", 23 -> country, 26 -> "Africa", 4 -> name, 11 -> organization, 32 -> "Lula", 14 -> "Commission", 29 -> name, 20 -> "Brazil", 28 -> person, 6 -> hold-04, 9 -> "Commission", 0 -> date-entity, 22 -> follow-01, 16 -> name, 19 -> "-", 10 -> "Joint", 3 -> city, 31 -> "da", 25 -> "South", 13 -> "Joint"),Map(n -> name, h -> hold-04, 2 -> 2003, 5 -> 5, t -> thing, n4 -> name, v -> visit-01, d -> date-entity, m -> meet-03, p -> person, n3 -> name, n6 -> name, o2 -> organization, c -> city, f -> follow-01, o -> organization, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@46349b95,Annotation([Ljava.lang.String;@176996c3,[Ljava.lang.String;@411c6d44,[Ljava.lang.String;@1687eb01),Annotation([Ljava.lang.String;@748d2277,[Ljava.lang.String;@2f897dab,[Ledu.cmu.lti.nlp.amr.Dependency;@d5d5353),Annotation([Ljava.lang.String;@242b6e1a,[Ljava.lang.String;@39a87e72,[Ljava.lang.String;@5d2828c9),Annotation([Ljava.lang.String;@3a082ff4,[Ljava.lang.String;@45acdd11,[Ledu.cmu.lti.nlp.amr.Entity;@3f0d6038))
AMR:
(c / city, name, n / name)
(c2 / country, name, n5 / name)
(d / date-entity, month, 5 / 5)
(d / date-entity, year, 2 / 2003)
(f / follow-01, ARG1, v / visit-01)
(f / follow-01, ARG2, h / hold-04)
(h / hold-04, ARG1, m / meet-03)
(m / meet-03, ARG0, o / organization)
(m / meet-03, location, c / city)
(m / meet-03, time, d / date-entity)
(n / name, op, "Pretoria")
(n2 / name, op, "Commission")
(n2 / name, op, "Joint")
(n3 / name, op, "Commission")
(n3 / name, op, "Joint")
(n4 / name, op, "-")
(n4 / name, op, "Africa")
(n4 / name, op, "Brazil")
(n4 / name, op, "South")
(n5 / name, op, "Africa")
(n5 / name, op, "South")
(n6 / name, op, "Lula")
(n6 / name, op, "Silva")
(n6 / name, op, "da")
(o / organization, name, n2 / name)
(o / organization, poss, o2 / organization)
(o2 / organization, name, n3 / name)
(p / person, name, n6 / name)
(t / thing, direction, o2 / organization)
(t / thing, name, n4 / name)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, c2 / country)

Decoded in 799,613 microseconds
Sentence: The Joint Commission was jointly chaired by South African Foreign Minister Dlamini-Zuma and Brazilian Foreign Minister Celso Amorim.

NER Entity: (organization :name (name :op "Joint" :op "Commission"))
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (person :name (name :op "Dlamini" :op "-" :op "Zuma"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (person :name (name :op "Celso" :op "Amorim"))
NER Entity: (thing :name (name :op "Brazilian"))
Spans:
Span 14-15:  and => and
Span 15-16:  Brazilian => (country :name (name :op "Brazil"))
Span 18-20:  Celso Amorim => (person :name (name :op "Amorim" :op "Celso"))
Span 5-6:  chaired => chair-01
Span 11-14:  Dlamini - Zuma => (person :name (name :op "Dlamini-Zuma"))
Span 9-10:  Foreign => foreign
Span 16-18:  Foreign Minister => (person :name (name :op "Celso" :op "Amorim"))
Span 1-3:  Joint Commission => (organization :name (name :op "Commission" :op "Joint"))
Span 4-5:  jointly => joint
Span 10-11:  Minister => (have-org-role-91 :ARG2 minister)
Span 7-9:  South African => (thing :name (name :op "South" :op "African"))

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,20,List(3, 2, 1, 0),Celso Amorim,(person :name (name :op "Amorim" :op "Celso")),false), Span(16,18,List(7, 6, 5, 4),Foreign Minister,(person :name (name :op "Celso" :op "Amorim")),false), Span(15,16,List(10, 9, 8),Brazilian,(country :name (name :op "Brazil")),false), Span(14,15,List(11),and,and,false), Span(11,14,List(14, 13, 12),Dlamini - Zuma,(person :name (name :op "Dlamini-Zuma")),false), Span(10,11,List(16, 15),Minister,(have-org-role-91 :ARG2 minister),false), Span(9,10,List(17),Foreign,foreign,false), Span(7,9,List(21, 20, 19, 18),South African,(thing :name (name :op "South" :op "African")),false), Span(5,6,List(22),chaired,chair-01,false), Span(4,5,List(23),jointly,joint,false), Span(1,3,List(27, 26, 25, 24),Joint Commission,(organization :name (name :op "Commission" :op "Joint")),false)),Map(2 -> "Amorim", 5 -> name, 27 -> "Joint", 12 -> person, 8 -> country, 15 -> have-org-role-91, 21 -> "African", 18 -> thing, 24 -> organization, 7 -> "Amorim", 1 -> name, 17 -> foreign, 23 -> joint, 26 -> "Commission", 4 -> person, 11 -> and, 14 -> "Dlamini-Zuma", 20 -> "South", 6 -> "Celso", 9 -> name, 0 -> person, 22 -> chair-01, 16 -> minister, 19 -> name, 10 -> "Brazil", 3 -> "Celso", 25 -> name, 13 -> name),Map(n -> name, h -> have-org-role-91, t -> thing, p2 -> person, j -> joint, n4 -> name, m -> minister, p -> person, n3 -> name, a -> and, n6 -> name, c -> country, f -> foreign, o -> organization, p3 -> person, c2 -> chair-01, n2 -> name, n5 -> name))),[Ljava.lang.String;@237f7970,Annotation([Ljava.lang.String;@58f39564,[Ljava.lang.String;@7b948f3e,[Ljava.lang.String;@2f4c2cd4),Annotation([Ljava.lang.String;@77a074b4,[Ljava.lang.String;@333c8791,[Ledu.cmu.lti.nlp.amr.Dependency;@6c0e13b7),Annotation([Ljava.lang.String;@22eaa86e,[Ljava.lang.String;@561b7d53,[Ljava.lang.String;@1cc680e),Annotation([Ljava.lang.String;@1dc3502b,[Ljava.lang.String;@6a1d3225,[Ledu.cmu.lti.nlp.amr.Entity;@67e13bd0))
AMR:
(a / and, op, p / person)
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(c / country, name, n3 / name)
(c2 / chair-01, ARG0, a / and)
(c2 / chair-01, ARG1, o / organization)
(c2 / chair-01, manner, j / joint)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, f / foreign)
(m / minister, mod, t / thing)
(n / name, op, "Amorim")
(n / name, op, "Celso")
(n2 / name, op, "Amorim")
(n2 / name, op, "Celso")
(n3 / name, op, "Brazil")
(n4 / name, op, "Dlamini-Zuma")
(n5 / name, op, "African")
(n5 / name, op, "South")
(n6 / name, op, "Commission")
(n6 / name, op, "Joint")
(o / organization, name, n6 / name)
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(p3 / person, name, n4 / name)
(t / thing, name, n5 / name)

Decoded in 1,062,533 microseconds
Sentence: Dlamini-Zuma participated in the Brazil-Africa Forum in Fortaleza, Brazil, in 030600.

NER Entity: (person :name (name :op "Dlamini" :op "-" :op "Zuma"))
NER Entity: (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))
NER Entity: (country :name (name :op "Fortaleza"))
NER Entity: (country :name (name :op "Brazil"))
mkDayMonthYear(030600,00,06,03)
mkDayMonthYear(030600,00,06,03)
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 16-17:  030600 => (date-entity :month 6 :year 2003)
Span 13-14:  Brazil => (country :name (name :op "Brazil"))
Span 6-10:  Brazil - Africa Forum => (organization :name (name :op "Forum" :op "Brazil-Africa"))
Span 0-3:  Dlamini - Zuma => (person :name (name :op "Dlamini-Zuma"))
Span 11-12:  Fortaleza => (city :name (name :op "Fortaleza"))
Span 4-6:  in the => (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))
Span 3-4:  participated => participate-01

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),030600,(date-entity :month 6 :year 2003),false), Span(13,14,List(5, 4, 3),Brazil,(country :name (name :op "Brazil")),false), Span(11,12,List(8, 7, 6),Fortaleza,(city :name (name :op "Fortaleza")),false), Span(6,10,List(12, 11, 10, 9),Brazil - Africa Forum,(organization :name (name :op "Forum" :op "Brazil-Africa")),false), Span(4,6,List(18, 17, 16, 15, 14, 13),in the,(organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum")),false), Span(3,4,List(19),participated,participate-01,false), Span(0,3,List(22, 21, 20),Dlamini - Zuma,(person :name (name :op "Dlamini-Zuma")),false)),Map(2 -> 2003, 5 -> "Brazil", 12 -> "Brazil-Africa", 15 -> "Brazil", 8 -> "Fortaleza", 21 -> name, 18 -> "Forum", 7 -> name, 17 -> "Africa", 1 -> 6, 4 -> name, 11 -> "Forum", 14 -> name, 20 -> person, 6 -> city, 22 -> "Dlamini-Zuma", 0 -> date-entity, 9 -> organization, 16 -> "-", 19 -> participate-01, 3 -> country, 10 -> name, 13 -> organization),Map(n -> name, 2 -> 2003, p2 -> person, n4 -> name, d -> date-entity, p -> participate-01, n3 -> name, o2 -> organization, 6 -> 6, c -> country, o -> organization, c2 -> city, n2 -> name, n5 -> name))),[Ljava.lang.String;@50fb33a,Annotation([Ljava.lang.String;@2cae9b8,[Ljava.lang.String;@1457fde,[Ljava.lang.String;@6f94fb9d),Annotation([Ljava.lang.String;@17fa1336,[Ljava.lang.String;@4228bf58,[Ledu.cmu.lti.nlp.amr.Dependency;@68b9834c),Annotation([Ljava.lang.String;@20b9d5d5,[Ljava.lang.String;@671d1157,[Ljava.lang.String;@60c8a093),Annotation([Ljava.lang.String;@44cffc25,[Ljava.lang.String;@2a369e14,[Ledu.cmu.lti.nlp.amr.Entity;@25aeb5ac))
AMR:
(c / country, name, n / name)
(c2 / city, location, c / country)
(c2 / city, name, n2 / name)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2003)
(n / name, op, "Brazil")
(n2 / name, op, "Fortaleza")
(n3 / name, op, "Brazil-Africa")
(n3 / name, op, "Forum")
(n4 / name, op, "-")
(n4 / name, op, "Africa")
(n4 / name, op, "Brazil")
(n4 / name, op, "Forum")
(n5 / name, op, "Dlamini-Zuma")
(o / organization, name, n3 / name)
(o2 / organization, name, n4 / name)
(p / participate-01, ARG0, p2 / person)
(p / participate-01, ARG1, o / organization)
(p / participate-01, ARG6, o2 / organization)
(p / participate-01, location, c2 / city)
(p / participate-01, time, d / date-entity)
(p2 / person, name, n5 / name)

Decoded in 280,994 microseconds
Sentence: The South African Foreign Affairs Department stated that The historic and strategic India-Brazil-South Africa agreement which resulted from the Brazil-Africa Forum had outlined plans for trilateral political and economic cooperation between India, Brazil and South Africa.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "India" :op "-" :op "Brazil" :op "-" :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))
NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 4-5:  Affairs => affair
Span 18-19:  agreement => agree-01
Span 40-41:  and => and
Span 33-34:  and => and
Span 10-11:  and => and
Span 39-40:  Brazil => (country :name (name :op "Brazil"))
Span 14-15:  Brazil => (country :name (name :op "Brazil"))
Span 23-27:  Brazil - Africa Forum => (organization :name (name :op "Forum" :op "Brazil-Africa"))
Span 35-37:  cooperation between => (country :name (name :op "South" :op "Africa"))
Span 34-35:  economic => economy
Span 3-4:  Foreign => foreign
Span 9-10:  historic => historic
Span 37-38:  India => (country :name (name :op "India"))
Span 12-14:  India - => (country :name (name :op "India" :op "-" :op "Brazil" :op "-" :op "South" :op "Africa"))
Span 28-29:  outlined => outline-01
Span 29-30:  plans => plan-01
Span 32-33:  political => politics
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 6-7:  stated => state-01
Span 11-12:  strategic => strategy
Span 31-32:  trilateral => trilateral
Span 19-21:  which resulted => (organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum"))

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),and,and,false), Span(39,40,List(3, 2, 1),Brazil,(country :name (name :op "Brazil")),false), Span(37,38,List(6, 5, 4),India,(country :name (name :op "India")),false), Span(35,37,List(10, 9, 8, 7),cooperation between,(country :name (name :op "South" :op "Africa")),false), Span(34,35,List(11),economic,economy,false), Span(33,34,List(12),and,and,false), Span(32,33,List(13),political,politics,false), Span(31,32,List(14),trilateral,trilateral,false), Span(29,30,List(15),plans,plan-01,false), Span(28,29,List(16),outlined,outline-01,false), Span(23,27,List(20, 19, 18, 17),Brazil - Africa Forum,(organization :name (name :op "Forum" :op "Brazil-Africa")),false), Span(19,21,List(26, 25, 24, 23, 22, 21),which resulted,(organization :name (name :op "Brazil" :op "-" :op "Africa" :op "Forum")),false), Span(18,19,List(27),agreement,agree-01,false), Span(14,15,List(30, 29, 28),Brazil,(country :name (name :op "Brazil")),false), Span(12,14,List(38, 37, 36, 35, 34, 33, 32, 31),India -,(country :name (name :op "India" :op "-" :op "Brazil" :op "-" :op "South" :op "Africa")),false), Span(11,12,List(39),strategic,strategy,false), Span(10,11,List(40),and,and,false), Span(9,10,List(41),historic,historic,false), Span(6,7,List(42),stated,state-01,false), Span(4,5,List(43),Affairs,affair,false), Span(3,4,List(44),Foreign,foreign,false), Span(1,3,List(48, 47, 46, 45),South African,(thing :name (name :op "South" :op "African")),false)),Map(30 -> "Brazil", 39 -> strategy, 45 -> thing, 2 -> name, 5 -> name, 48 -> "African", 33 -> "India", 27 -> agree-01, 12 -> and, 8 -> name, 15 -> plan-01, 42 -> state-01, 36 -> "-", 21 -> organization, 18 -> name, 24 -> "-", 35 -> "Brazil", 41 -> historic, 7 -> country, 17 -> organization, 1 -> country, 44 -> foreign, 23 -> "Brazil", 38 -> "Africa", 47 -> "South", 4 -> country, 26 -> "Forum", 11 -> economy, 32 -> name, 14 -> trilateral, 20 -> "Brazil-Africa", 29 -> name, 46 -> name, 34 -> "-", 6 -> "India", 28 -> country, 40 -> and, 0 -> and, 9 -> "South", 43 -> affair, 22 -> name, 16 -> outline-01, 37 -> "South", 19 -> "Forum", 3 -> "Brazil", 10 -> "Africa", 25 -> "Africa", 31 -> country, 13 -> politics),Map(e -> economy, n -> name, h -> historic, s2 -> state-01, t -> trilateral, o3 -> organization, n7 -> name, p2 -> plan-01, n4 -> name, a3 -> agree-01, c4 -> country, s -> strategy, p -> politics, n3 -> name, c3 -> country, a -> and, a5 -> affair, o2 -> organization, n6 -> name, t2 -> thing, a2 -> and, c -> country, n8 -> name, f -> foreign, o -> outline-01, n2 -> name, c2 -> country, a4 -> and, n5 -> name, c5 -> country))),[Ljava.lang.String;@c755b2,Annotation([Ljava.lang.String;@3bd2af5b,[Ljava.lang.String;@250a500b,[Ljava.lang.String;@75d982d3),Annotation([Ljava.lang.String;@4f89331f,[Ljava.lang.String;@618ff5c2,[Ledu.cmu.lti.nlp.amr.Dependency;@16727bf0),Annotation([Ljava.lang.String;@2f84acf7,[Ljava.lang.String;@291373d3,[Ljava.lang.String;@372ca2d6),Annotation([Ljava.lang.String;@3204e238,[Ljava.lang.String;@38ed139b,[Ledu.cmu.lti.nlp.amr.Entity;@a5272be))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a2 / and, mod, h / historic)
(a2 / and, mod, s / strategy)
(a2 / and, op, c4 / country)
(a2 / and, op, c5 / country)
(a3 / agree-01, ARG0, a2 / and)
(a3 / agree-01, ARG1, a4 / and)
(a3 / agree-01, ARG6, o3 / organization)
(a4 / and, op, e / economy)
(a4 / and, op, p / politics)
(a5 / affair, mod, f / foreign)
(a5 / affair, mod, t2 / thing)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, mod, a2 / and)
(c3 / country, mod, t / trilateral)
(c3 / country, name, n3 / name)
(c4 / country, name, n6 / name)
(c5 / country, name, n7 / name)
(n / name, op, "Brazil")
(n2 / name, op, "India")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Brazil-Africa")
(n4 / name, op, "Forum")
(n5 / name, op, "-")
(n5 / name, op, "Africa")
(n5 / name, op, "Brazil")
(n5 / name, op, "Forum")
(n6 / name, op, "Brazil")
(n7 / name, op, "-")
(n7 / name, op, "-")
(n7 / name, op, "Africa")
(n7 / name, op, "Brazil")
(n7 / name, op, "India")
(n7 / name, op, "South")
(n8 / name, op, "African")
(n8 / name, op, "South")
(o / outline-01, ARG0, a3 / agree-01)
(o / outline-01, ARG1, o2 / organization)
(o2 / organization, name, n4 / name)
(o3 / organization, name, n5 / name)
(p2 / plan-01, ARG0, a3 / agree-01)
(p2 / plan-01, ARG1, a / and)
(s2 / state-01, ARG0, f / foreign)
(s2 / state-01, ARG1, o / outline-01)
(t2 / thing, name, n8 / name)

Decoded in 2,283,997 microseconds
Sentence: India, Brazil and South Africa formed part of a group at recent World Trade Organization negotiations, which advocated support for the development agenda of under-developed countries.

NER Entity: (country :name (name :op "India"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (organization :name (name :op "World" :op "Trade" :op "Organization"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "India"))
Spans:
Span 19-20:  advocated => advocate-01
Span 24-25:  agenda => agenda
Span 3-4:  and => and
Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Span 29-30:  countries => country
Span 28-29:  developed => develop-02
Span 23-24:  development => develop-02
Span 6-7:  formed => form-01
Span 10-11:  group => group
Span 0-1:  India => (country :name (name :op "India"))
Span 16-17:  negotiations => negotiate-01
Span 12-13:  recent => recent
Span 4-6:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 20-21:  support => support-01
Span 13-16:  World Trade Organization => (organization :name (name :op "World" :op "Trade" :op "Organization"))

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),countries,country,false), Span(28,29,List(1),developed,develop-02,false), Span(24,25,List(2),agenda,agenda,false), Span(23,24,List(3),development,develop-02,false), Span(20,21,List(4),support,support-01,false), Span(19,20,List(5),advocated,advocate-01,false), Span(16,17,List(6),negotiations,negotiate-01,false), Span(13,16,List(11, 10, 9, 8, 7),World Trade Organization,(organization :name (name :op "World" :op "Trade" :op "Organization")),false), Span(12,13,List(12),recent,recent,false), Span(10,11,List(13),group,group,false), Span(6,7,List(14),formed,form-01,false), Span(4,6,List(18, 17, 16, 15),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(3,4,List(19),and,and,false), Span(2,3,List(22, 21, 20),Brazil,(country :name (name :op "Brazil")),false), Span(0,1,List(25, 24, 23),India,(country :name (name :op "India")),false)),Map(2 -> agenda, 5 -> advocate-01, 12 -> recent, 8 -> name, 15 -> country, 21 -> name, 18 -> "Africa", 24 -> name, 7 -> organization, 1 -> develop-02, 17 -> "South", 23 -> country, 4 -> support-01, 11 -> "Organization", 14 -> form-01, 20 -> country, 6 -> negotiate-01, 9 -> "World", 0 -> country, 22 -> "Brazil", 16 -> name, 19 -> and, 10 -> "Trade", 3 -> develop-02, 25 -> "India", 13 -> group),Map(n -> negotiate-01, c4 -> country, n4 -> name, a3 -> and, s -> support-01, d -> develop-02, g -> group, c3 -> country, n3 -> name, a -> agenda, d2 -> develop-02, a2 -> advocate-01, r -> recent, c -> country, f -> form-01, o -> organization, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@58ba5b30,Annotation([Ljava.lang.String;@4dba773d,[Ljava.lang.String;@1d9bd4da,[Ljava.lang.String;@4c58255),Annotation([Ljava.lang.String;@eac3a26,[Ljava.lang.String;@10b1a751,[Ledu.cmu.lti.nlp.amr.Dependency;@53cf9c99),Annotation([Ljava.lang.String;@7b306b9f,[Ljava.lang.String;@142213d5,[Ljava.lang.String;@934b52f),Annotation([Ljava.lang.String;@2630dbc4,[Ljava.lang.String;@5ea4300e,[Ledu.cmu.lti.nlp.amr.Entity;@5a1c3cb4))
AMR:
(a / agenda, mod, d / develop-02)
(a2 / advocate-01, ARG0, o / organization)
(a2 / advocate-01, ARG1, s / support-01)
(a2 / advocate-01, ARG2, a / agenda)
(a3 / and, op, c2 / country)
(a3 / and, op, c3 / country)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(d / develop-02, ARG1, c / country)
(d2 / develop-02, ARG0, a / agenda)
(d2 / develop-02, ARG1, g / group)
(f / form-01, ARG0, c4 / country)
(f / form-01, ARG1, a3 / and)
(n / negotiate-01, ARG0, o / organization)
(n / negotiate-01, ARG1, c4 / country)
(n2 / name, op, "Organization")
(n2 / name, op, "Trade")
(n2 / name, op, "World")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "Brazil")
(n5 / name, op, "India")
(o / organization, name, n2 / name)
(o / organization, time, r / recent)

Decoded in 873,429 microseconds
Sentence: The South African Foreign Affairs Department stated that relations between South Africa and Brazil were strategic in the sense that Brazil had the largest population of people of African origin outside the continent of Africa.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (thing :name (name :op "African"))
NER Entity: (country :name (name :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 4-5:  Affairs => affair
Span 12-13:  and => and
Span 9-10:  between => between
Span 20-21:  Brazil => (country :name (name :op "Brazil"))
Span 13-14:  Brazil => (country :name (name :op "Brazil"))
Span 32-33:  continent => continent
Span 3-4:  Foreign => foreign
Span 23-24:  largest => (large :degree most)
Span 29-30:  origin => originate-01
Span 30-31:  outside => outside
Span 26-27:  people => people
Span 24-25:  population => population
Span 8-9:  relations => relation
Span 18-19:  sense => sense-01
Span 10-12:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 6-7:  stated => state-01
Span 15-16:  strategic => strategy

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),continent,continent,false), Span(30,31,List(1),outside,outside,false), Span(29,30,List(2),origin,originate-01,false), Span(26,27,List(3),people,people,false), Span(24,25,List(4),population,population,false), Span(23,24,List(6, 5),largest,(large :degree most),false), Span(20,21,List(9, 8, 7),Brazil,(country :name (name :op "Brazil")),false), Span(18,19,List(10),sense,sense-01,false), Span(15,16,List(11),strategic,strategy,false), Span(13,14,List(14, 13, 12),Brazil,(country :name (name :op "Brazil")),false), Span(12,13,List(15),and,and,false), Span(10,12,List(19, 18, 17, 16),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(9,10,List(20),between,between,false), Span(8,9,List(21),relations,relation,false), Span(6,7,List(22),stated,state-01,false), Span(4,5,List(23),Affairs,affair,false), Span(3,4,List(24),Foreign,foreign,false), Span(1,3,List(28, 27, 26, 25),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> originate-01, 5 -> large, 27 -> "South", 12 -> country, 8 -> name, 15 -> and, 21 -> relation, 18 -> "South", 24 -> foreign, 7 -> country, 1 -> outside, 17 -> name, 23 -> affair, 26 -> name, 4 -> population, 11 -> strategy, 14 -> "Brazil", 20 -> between, 28 -> "African", 6 -> most, 9 -> "Brazil", 0 -> continent, 22 -> state-01, 16 -> country, 19 -> "Africa", 10 -> sense-01, 3 -> people, 25 -> thing, 13 -> name),Map(n -> name, s2 -> strategy, t -> thing, b -> between, p2 -> population, n4 -> name, c4 -> country, s -> sense-01, m -> most, p -> people, n3 -> name, a -> and, c3 -> country, o2 -> originate-01, a2 -> affair, r -> relation, s3 -> state-01, c -> continent, l -> large, f -> foreign, o -> outside, c2 -> country, n2 -> name))),[Ljava.lang.String;@76ad6715,Annotation([Ljava.lang.String;@56637cff,[Ljava.lang.String;@2938127d,[Ljava.lang.String;@127a7272),Annotation([Ljava.lang.String;@ff23ae7,[Ljava.lang.String;@423b2b62,[Ledu.cmu.lti.nlp.amr.Dependency;@2b7962a2),Annotation([Ljava.lang.String;@6ad16c5d,[Ljava.lang.String;@74ea46e2,[Ljava.lang.String;@6f911326),Annotation([Ljava.lang.String;@f1d0004,[Ljava.lang.String;@6e4f263e,[Ledu.cmu.lti.nlp.amr.Entity;@48b4a043))
AMR:
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a2 / affair, mod, f / foreign)
(a2 / affair, mod, t / thing)
(b / between, op, c4 / country)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(l / large, degree, m / most)
(n / name, op, "Brazil")
(n2 / name, op, "Brazil")
(n3 / name, op, "Africa")
(n3 / name, op, "South")
(n4 / name, op, "African")
(n4 / name, op, "South")
(o / outside, op, c / continent)
(o2 / originate-01, ARG1, p / people)
(o2 / originate-01, ARG2, c3 / country)
(o2 / originate-01, time, o / outside)
(p2 / population, mod, l / large)
(p2 / population, poss, c2 / country)
(r / relation, mod, b / between)
(s / sense-01, ARG1, c2 / country)
(s2 / strategy, domain, r / relation)
(s2 / strategy, prep-with, s / sense-01)
(s3 / state-01, ARG0, f / foreign)
(s3 / state-01, ARG1, s2 / strategy)
(t / thing, name, n4 / name)

Decoded in 1,246,451 microseconds
Sentence: The South African Foreign Affairs Department stated that South Africa and Brazil shared opinions on a variety of global issues including the importance of multi-lateralism and the expansion of the United Nations Security Council.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 4-5:  Affairs => affair
Span 27-28:  and => and
Span 10-11:  and => and
Span 11-12:  Brazil => (country :name (name :op "Brazil"))
Span 29-30:  expansion => expand-01
Span 3-4:  Foreign => foreign
Span 18-19:  global => globe
Span 22-23:  importance => importance
Span 20-21:  including => include-91
Span 19-20:  issues => issue
Span 30-34:  of the United Nations => (organization :name (name :op "United" :op "Nations" :op "Security" :op "Council"))
Span 13-14:  opinions => opine-01
Span 34-36:  Security Council => (organization :name (name :op "Council" :op "Security"))
Span 12-13:  shared => share-01
Span 8-10:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 6-7:  stated => state-01
Span 16-17:  variety => variety

Langrangian relaxation converged after 90 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,36,List(3, 2, 1, 0),Security Council,(organization :name (name :op "Council" :op "Security")),false), Span(30,34,List(9, 8, 7, 6, 5, 4),of the United Nations,(organization :name (name :op "United" :op "Nations" :op "Security" :op "Council")),false), Span(29,30,List(10),expansion,expand-01,false), Span(27,28,List(11),and,and,false), Span(22,23,List(12),importance,importance,false), Span(20,21,List(13),including,include-91,false), Span(19,20,List(14),issues,issue,false), Span(18,19,List(15),global,globe,false), Span(16,17,List(16),variety,variety,false), Span(13,14,List(17),opinions,opine-01,false), Span(12,13,List(18),shared,share-01,false), Span(11,12,List(21, 20, 19),Brazil,(country :name (name :op "Brazil")),false), Span(10,11,List(22),and,and,false), Span(8,10,List(26, 25, 24, 23),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(6,7,List(27),stated,state-01,false), Span(4,5,List(28),Affairs,affair,false), Span(3,4,List(29),Foreign,foreign,false), Span(1,3,List(33, 32, 31, 30),South African,(thing :name (name :op "South" :op "African")),false)),Map(30 -> thing, 2 -> "Council", 5 -> name, 33 -> "African", 27 -> state-01, 12 -> importance, 8 -> "Security", 15 -> globe, 21 -> "Brazil", 18 -> share-01, 24 -> name, 7 -> "Nations", 1 -> name, 17 -> opine-01, 23 -> country, 26 -> "Africa", 4 -> organization, 11 -> and, 32 -> "South", 14 -> issue, 29 -> foreign, 20 -> name, 28 -> affair, 6 -> "United", 9 -> "Council", 0 -> organization, 22 -> and, 16 -> variety, 19 -> country, 10 -> expand-01, 3 -> "Security", 31 -> name, 25 -> "South", 13 -> include-91),Map(e -> expand-01, n -> name, s2 -> state-01, t -> thing, o3 -> opine-01, a3 -> affair, n4 -> name, s -> share-01, v -> variety, i3 -> issue, g -> globe, n3 -> name, a -> and, o2 -> organization, i2 -> include-91, a2 -> and, i -> importance, c -> country, f -> foreign, o -> organization, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@2f5b8250,Annotation([Ljava.lang.String;@4821aa9f,[Ljava.lang.String;@5f481b73,[Ljava.lang.String;@32130e61),Annotation([Ljava.lang.String;@41294371,[Ljava.lang.String;@4996c99,[Ledu.cmu.lti.nlp.amr.Dependency;@1b956cfa),Annotation([Ljava.lang.String;@315f09ef,[Ljava.lang.String;@3a66e67e,[Ljava.lang.String;@75d4a80f),Annotation([Ljava.lang.String;@4596f8f3,[Ljava.lang.String;@ccf91df,[Ledu.cmu.lti.nlp.amr.Entity;@117d32e))
AMR:
(a / and, op, e / expand-01)
(a / and, op, i / importance)
(a2 / and, op, c2 / country)
(a3 / affair, mod, f / foreign)
(a3 / affair, mod, t / thing)
(c / country, name, n3 / name)
(c2 / country, name, n4 / name)
(e / expand-01, ARG1, o / organization)
(e / expand-01, ARG6, o2 / organization)
(i2 / include-91, ARG0, i3 / issue)
(i2 / include-91, ARG1, a / and)
(i3 / issue, mod, g / globe)
(i3 / issue, mod, v / variety)
(n / name, op, "Council")
(n / name, op, "Security")
(n2 / name, op, "Council")
(n2 / name, op, "Nations")
(n2 / name, op, "Security")
(n2 / name, op, "United")
(n3 / name, op, "Brazil")
(n4 / name, op, "Africa")
(n4 / name, op, "South")
(n5 / name, op, "African")
(n5 / name, op, "South")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(o3 / opine-01, ARG0, a2 / and)
(o3 / opine-01, ARG1, i3 / issue)
(s / share-01, ARG1, o3 / opine-01)
(s / share-01, ARG2, c / country)
(s2 / state-01, ARG0, f / foreign)
(s2 / state-01, ARG1, s / share-01)
(t / thing, name, n5 / name)

Decoded in 3,620,570 microseconds
Sentence: Discussions between Lula da Silva and Thabo Mbeki would also address new threats to international security such as terrorism, drugs, illegal weapons trafficking and AIDS.

NER Entity: (person :name (name :op "Lula" :op "da" :op "Silva"))
NER Entity: (person :name (name :op "Thabo" :op "Mbeki"))
NER Entity: (thing :name (name :op "AIDS"))
NER Entity: (thing :name (name :op "AIDS"))
Spans:
Span 10-11:  address => address-02
Span 26-27:  AIDS => (disease :name (name :op "AIDS"))
Span 9-10:  also => also
Span 25-26:  and => and
Span 5-6:  and => and
Span 1-2:  between => between
Span 0-1:  Discussions => discuss-01
Span 20-21:  drugs => drug
Span 22-23:  illegal => (law :polarity -)
Span 14-15:  international => international
Span 2-5:  Lula da Silva => (person :name (name :op "Silva" :op "da" :op "Lula"))
Span 11-12:  new => new
Span 15-16:  security => security
Span 16-17:  such => such
Span 18-19:  terrorism => terrorism
Span 6-8:  Thabo Mbeki => (person :name (name :op "Mbeki" :op "Thabo"))
Span 12-13:  threats => threaten-01
Span 24-25:  trafficking => traffic-00
Span 23-24:  weapons => weapon

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(2, 1, 0),AIDS,(disease :name (name :op "AIDS")),false), Span(25,26,List(3),and,and,false), Span(24,25,List(4),trafficking,traffic-00,false), Span(23,24,List(5),weapons,weapon,false), Span(22,23,List(7, 6),illegal,(law :polarity -),false), Span(20,21,List(8),drugs,drug,false), Span(18,19,List(9),terrorism,terrorism,false), Span(16,17,List(10),such,such,false), Span(15,16,List(11),security,security,false), Span(14,15,List(12),international,international,false), Span(12,13,List(13),threats,threaten-01,false), Span(11,12,List(14),new,new,false), Span(10,11,List(15),address,address-02,false), Span(9,10,List(16),also,also,false), Span(6,8,List(20, 19, 18, 17),Thabo Mbeki,(person :name (name :op "Mbeki" :op "Thabo")),false), Span(5,6,List(21),and,and,false), Span(2,5,List(26, 25, 24, 23, 22),Lula da Silva,(person :name (name :op "Silva" :op "da" :op "Lula")),false), Span(1,2,List(27),between,between,false), Span(0,1,List(28),Discussions,discuss-01,false)),Map(2 -> "AIDS", 5 -> weapon, 27 -> between, 12 -> international, 8 -> drug, 15 -> address-02, 21 -> and, 18 -> name, 24 -> "Silva", 7 -> -, 1 -> name, 17 -> person, 23 -> name, 26 -> "Lula", 4 -> traffic-00, 11 -> security, 14 -> new, 20 -> "Thabo", 28 -> discuss-01, 6 -> law, 9 -> terrorism, 0 -> disease, 22 -> person, 16 -> also, 19 -> "Mbeki", 10 -> such, 3 -> and, 25 -> "da", 13 -> threaten-01),Map(n -> name, w -> weapon, s2 -> security, b -> between, t -> traffic-00, d3 -> discuss-01, p2 -> person, n4 -> name, a3 -> also, s -> such, d -> disease, t3 -> threaten-01, p -> person, n3 -> name, a -> and, d2 -> drug, t2 -> terrorism, a2 -> address-02, i -> international, l -> law, n2 -> new, a4 -> and))),[Ljava.lang.String;@51d387d3,Annotation([Ljava.lang.String;@2370ac7a,[Ljava.lang.String;@534180a2,[Ljava.lang.String;@6cf0a747),Annotation([Ljava.lang.String;@21505815,[Ljava.lang.String;@7e53339,[Ledu.cmu.lti.nlp.amr.Dependency;@58fef7f7),Annotation([Ljava.lang.String;@31ddb930,[Ljava.lang.String;@12eedfee,[Ljava.lang.String;@3c3c4a71),Annotation([Ljava.lang.String;@1352434e,[Ljava.lang.String;@4f9a6c2d,[Ledu.cmu.lti.nlp.amr.Entity;@2b6fcb9f))
AMR:
(a / and, op, d / disease)
(a / and, op, t / traffic-00)
(a2 / address-02, ARG0, d3 / discuss-01)
(a2 / address-02, ARG1, t3 / threaten-01)
(a2 / address-02, ARG2, s2 / security)
(a2 / address-02, mod, a3 / also)
(a4 / and, op, d2 / drug)
(a4 / and, op, t / traffic-00)
(a4 / and, op, t2 / terrorism)
(b / between, op, p2 / person)
(d / disease, name, n / name)
(d3 / discuss-01, ARG0, p2 / person)
(d3 / discuss-01, ARG1, s / such)
(d3 / discuss-01, ARG2, p / person)
(l / law, polarity, -)
(n / name, op, "AIDS")
(n3 / name, op, "Mbeki")
(n3 / name, op, "Thabo")
(n4 / name, op, "Lula")
(n4 / name, op, "Silva")
(n4 / name, op, "da")
(p / person, name, n3 / name)
(p2 / person, name, n4 / name)
(s2 / security, mod, i / international)
(t / traffic-00, ARG1, w / weapon)
(t3 / threaten-01, ARG1, l / law)
(t3 / threaten-01, example, a4 / and)
(t3 / threaten-01, mod, n2 / new)

Decoded in 912,446 microseconds
Sentence: The South African Foreign Affairs Department stated that Brazil is South Africa's largest trading partner in Latin America.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "Latin" :op "America"))
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 4-5:  Affairs => affair
Span 8-9:  Brazil => (country :name (name :op "Brazil"))
Span 3-4:  Foreign => foreign
Span 13-14:  largest => (large :degree most)
Span 17-19:  Latin America => (country :name (name :op "Latin" :op "America"))
Span 15-16:  partner => partner-01
Span 10-12:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 6-7:  stated => state-01
Span 14-15:  trading => trade-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,19,List(3, 2, 1, 0),Latin America,(country :name (name :op "Latin" :op "America")),false), Span(15,16,List(4),partner,partner-01,false), Span(14,15,List(5),trading,trade-01,false), Span(13,14,List(7, 6),largest,(large :degree most),false), Span(10,12,List(11, 10, 9, 8),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(8,9,List(14, 13, 12),Brazil,(country :name (name :op "Brazil")),false), Span(6,7,List(15),stated,state-01,false), Span(4,5,List(16),Affairs,affair,false), Span(3,4,List(17),Foreign,foreign,false), Span(1,3,List(21, 20, 19, 18),South African,(thing :name (name :op "South" :op "African")),false)),Map(2 -> "Latin", 5 -> trade-01, 12 -> country, 15 -> state-01, 8 -> country, 21 -> "African", 18 -> thing, 7 -> most, 17 -> foreign, 1 -> name, 4 -> partner-01, 11 -> "Africa", 14 -> "Brazil", 20 -> "South", 6 -> large, 0 -> country, 9 -> name, 16 -> affair, 19 -> name, 3 -> "America", 10 -> "South", 13 -> name),Map(n -> name, t -> trade-01, n4 -> name, s -> state-01, m -> most, p -> partner-01, c3 -> country, n3 -> name, a -> affair, t2 -> thing, c -> country, l -> large, f -> foreign, c2 -> country, n2 -> name))),[Ljava.lang.String;@75de6341,Annotation([Ljava.lang.String;@74170687,[Ljava.lang.String;@68f0f72c,[Ljava.lang.String;@3d96fa9e),Annotation([Ljava.lang.String;@3b545206,[Ljava.lang.String;@77bb48d5,[Ledu.cmu.lti.nlp.amr.Dependency;@181d8899),Annotation([Ljava.lang.String;@12d5c30e,[Ljava.lang.String;@b887730,[Ljava.lang.String;@26586b74),Annotation([Ljava.lang.String;@52f57666,[Ljava.lang.String;@6e041285,[Ledu.cmu.lti.nlp.amr.Entity;@267dc982))
AMR:
(a / affair, mod, f / foreign)
(a / affair, mod, t2 / thing)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(l / large, degree, m / most)
(n / name, op, "America")
(n / name, op, "Latin")
(n2 / name, op, "Africa")
(n2 / name, op, "South")
(n3 / name, op, "Brazil")
(n4 / name, op, "African")
(n4 / name, op, "South")
(p / partner-01, ARG0, c3 / country)
(p / partner-01, ARG1, t / trade-01)
(p / partner-01, location, c / country)
(p / partner-01, mod, l / large)
(s / state-01, ARG0, f / foreign)
(s / state-01, ARG1, p / partner-01)
(t / trade-01, ARG2, c2 / country)
(t2 / thing, name, n4 / name)

Decoded in 399,906 microseconds
Sentence: Trade between Brazil and South Africa totaled 696 million United States dollars in 020000 and 296 million United States dollars more in the trade balance going to Brazil.

NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "South" :op "Africa"))
NER Entity: (country :name (name :op "United" :op "States"))
mkDayMonthYear(020000,00,00,02)
NER Entity: (country :name (name :op "United" :op "States"))
NER Entity: (country :name (name :op "Brazil"))
NER Entity: (country :name (name :op "Brazil"))
mkDayMonthYear(020000,00,00,02)
NER Entity: (country :name (name :op "Brazil"))
Spans:
Span 13-14:  020000 => (date-entity :year 2002)
Span 14-15:  and => and
Span 3-4:  and => and
Span 24-25:  balance => balance-01
Span 1-2:  between => between
Span 27-28:  Brazil => (country :name (name :op "Brazil"))
Span 2-3:  Brazil => (country :name (name :op "Brazil"))
Span 19-20:  dollars => (monetary-quantity :unit dollar)
Span 11-12:  dollars => (monetary-quantity :unit dollar)
Span 25-26:  going => go-02
Span 20-21:  more => more
Span 4-6:  South Africa => (country :name (name :op "South" :op "Africa"))
Span 6-7:  totaled => total-01
Span 23-24:  trade => trade-01
Span 0-1:  Trade => trade
Span 17-19:  United States => (country :name (name :op "United" :op "States"))
Span 9-11:  United States => (country :name (name :op "United" :op "States"))

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(2, 1, 0),Brazil,(country :name (name :op "Brazil")),false), Span(25,26,List(3),going,go-02,false), Span(24,25,List(4),balance,balance-01,false), Span(23,24,List(5),trade,trade-01,false), Span(20,21,List(6),more,more,false), Span(19,20,List(8, 7),dollars,(monetary-quantity :unit dollar),false), Span(17,19,List(12, 11, 10, 9),United States,(country :name (name :op "United" :op "States")),false), Span(14,15,List(13),and,and,false), Span(13,14,List(15, 14),020000,(date-entity :year 2002),false), Span(11,12,List(17, 16),dollars,(monetary-quantity :unit dollar),false), Span(9,11,List(21, 20, 19, 18),United States,(country :name (name :op "United" :op "States")),false), Span(6,7,List(22),totaled,total-01,false), Span(4,6,List(26, 25, 24, 23),South Africa,(country :name (name :op "South" :op "Africa")),false), Span(3,4,List(27),and,and,false), Span(2,3,List(30, 29, 28),Brazil,(country :name (name :op "Brazil")),false), Span(1,2,List(31),between,between,false), Span(0,1,List(32),Trade,trade,false)),Map(30 -> "Brazil", 2 -> "Brazil", 5 -> trade-01, 27 -> and, 12 -> "States", 8 -> dollar, 15 -> 2002, 21 -> "States", 18 -> country, 24 -> name, 7 -> monetary-quantity, 1 -> name, 17 -> dollar, 23 -> country, 26 -> "Africa", 4 -> balance-01, 11 -> "United", 32 -> trade, 14 -> date-entity, 29 -> name, 20 -> "United", 28 -> country, 6 -> more, 9 -> country, 0 -> country, 22 -> total-01, 16 -> monetary-quantity, 19 -> name, 10 -> name, 3 -> go-02, 31 -> between, 25 -> "South", 13 -> and),Map(m3 -> monetary-quantity, n -> name, 2 -> 2002, t -> trade-01, b -> balance-01, m2 -> monetary-quantity, b2 -> between, d3 -> dollar, c4 -> country, n4 -> name, d -> dollar, m -> more, t3 -> trade, g -> go-02, a -> and, c3 -> country, n3 -> name, d2 -> date-entity, t2 -> total-01, a2 -> and, c -> country, n2 -> name, c2 -> country, c5 -> country, n5 -> name))),[Ljava.lang.String;@439b15f2,Annotation([Ljava.lang.String;@3aa41da1,[Ljava.lang.String;@74fab04a,[Ljava.lang.String;@3c83468e),Annotation([Ljava.lang.String;@272ce069,[Ljava.lang.String;@3d7fb838,[Ledu.cmu.lti.nlp.amr.Dependency;@1c26273d),Annotation([Ljava.lang.String;@3a37a501,[Ljava.lang.String;@7a583586,[Ljava.lang.String;@3a26ec8d),Annotation([Ljava.lang.String;@17143b3b,[Ljava.lang.String;@100c8b75,[Ledu.cmu.lti.nlp.amr.Entity;@2bc378f7))
AMR:
(a / and, op, t2 / total-01)
(a2 / and, op, c5 / country)
(a2 / and, op, m3 / monetary-quantity)
(b / balance-01, ARG1, t3 / trade)
(b2 / between, op, c4 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(d / dollar, mod, c2 / country)
(d2 / date-entity, year, 2 / 2002)
(d3 / dollar, mod, c3 / country)
(g / go-02, ARG0, m / more)
(g / go-02, ARG1, b / balance-01)
(g / go-02, ARG4, c / country)
(m2 / monetary-quantity, unit, d / dollar)
(m3 / monetary-quantity, time, d2 / date-entity)
(m3 / monetary-quantity, unit, d3 / dollar)
(n / name, op, "Brazil")
(n2 / name, op, "States")
(n2 / name, op, "United")
(n3 / name, op, "States")
(n3 / name, op, "United")
(n4 / name, op, "Africa")
(n4 / name, op, "South")
(n5 / name, op, "Brazil")
(t / trade-01, ARG0, c5 / country)
(t / trade-01, ARG1, m2 / monetary-quantity)
(t / trade-01, ARG2, c4 / country)
(t2 / total-01, ARG1, t / trade-01)
(t3 / trade, mod, b2 / between)

Decoded in 1,161,761 microseconds
Sentence: The South African Foreign Affairs Department stated that the South African delegation is to brief the Brazilians on progress with the African Union and the New Partnership for Africa' s development.

NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (thing :name (name :op "South" :op "African"))
NER Entity: (thing :name (name :op "Brazilians"))
NER Entity: (organization :name (name :op "African" :op "Union"))
NER Entity: (organization :name (name :op "New" :op "Partnership"))
NER Entity: (thing :name (name :op "Africa" :op "'s"))
NER Entity: (thing :name (name :op "Brazilians"))
Spans:
Span 4-5:  Affairs => affair
Span 28-30:  Africa 's => (thing :name (name :op "Africa" :op "'s"))
Span 21-23:  African Union => (organization :name (name :op "Union" :op "African"))
Span 23-24:  and => and
Span 16-17:  Brazilians => (person :mod (country :name (name :op "Brazil")))
Span 14-15:  brief => brief
Span 11-12:  delegation => delegation
Span 30-31:  development => develop-02
Span 3-4:  Foreign => foreign
Span 25-27:  New Partnership => (organization :name (name :op "New" :op "Partnership"))
Span 18-19:  progress => progress-01
Span 9-11:  South African => (thing :name (name :op "South" :op "African"))
Span 1-3:  South African => (thing :name (name :op "South" :op "African"))
Span 6-7:  stated => state-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),development,develop-02,false), Span(28,30,List(4, 3, 2, 1),Africa 's,(thing :name (name :op "Africa" :op "'s")),false), Span(25,27,List(8, 7, 6, 5),New Partnership,(organization :name (name :op "New" :op "Partnership")),false), Span(23,24,List(9),and,and,false), Span(21,23,List(13, 12, 11, 10),African Union,(organization :name (name :op "Union" :op "African")),false), Span(18,19,List(14),progress,progress-01,false), Span(16,17,List(18, 17, 16, 15),Brazilians,(person :mod (country :name (name :op "Brazil"))),false), Span(14,15,List(19),brief,brief,false), Span(11,12,List(20),delegation,delegation,false), Span(9,11,List(24, 23, 22, 21),South African,(thing :name (name :op "South" :op "African")),false), Span(6,7,List(25),stated,state-01,false), Span(4,5,List(26),Affairs,affair,false), Span(3,4,List(27),Foreign,foreign,false), Span(1,3,List(31, 30, 29, 28),South African,(thing :name (name :op "South" :op "African")),false)),Map(30 -> "South", 2 -> name, 5 -> organization, 27 -> foreign, 12 -> "Union", 8 -> "Partnership", 15 -> person, 21 -> thing, 18 -> "Brazil", 24 -> "African", 7 -> "New", 1 -> thing, 17 -> name, 23 -> "South", 26 -> affair, 4 -> "'s", 11 -> name, 14 -> progress-01, 29 -> name, 20 -> delegation, 28 -> thing, 6 -> name, 9 -> and, 0 -> develop-02, 22 -> name, 16 -> country, 19 -> brief, 10 -> organization, 3 -> "Africa", 31 -> "African", 25 -> state-01, 13 -> "African"),Map(n -> name, t -> thing, b -> brief, p2 -> person, n4 -> name, s -> state-01, d -> develop-02, t3 -> thing, p -> progress-01, a -> and, n3 -> name, n6 -> name, d2 -> delegation, o2 -> organization, t2 -> thing, a2 -> affair, c -> country, f -> foreign, o -> organization, n2 -> name, n5 -> name))),[Ljava.lang.String;@268cbb86,Annotation([Ljava.lang.String;@10f7918f,[Ljava.lang.String;@64d4f7c7,[Ljava.lang.String;@54e02f6a),Annotation([Ljava.lang.String;@17f3eefb,[Ljava.lang.String;@3ba46e63,[Ledu.cmu.lti.nlp.amr.Dependency;@788ddc1f),Annotation([Ljava.lang.String;@2dc3271b,[Ljava.lang.String;@254f906e,[Ljava.lang.String;@3d0035d2),Annotation([Ljava.lang.String;@2bfb6b49,[Ljava.lang.String;@1f346ad2,[Ledu.cmu.lti.nlp.amr.Entity;@46a145ba))
AMR:
(a / and, op, o / organization)
(a / and, op, o2 / organization)
(a2 / affair, mod, f / foreign)
(b / brief, calendar, p2 / person)
(b / brief, domain, d2 / delegation)
(c / country, name, n4 / name)
(d / develop-02, ARG1, t / thing)
(d2 / delegation, mod, t2 / thing)
(d2 / delegation, mod, t3 / thing)
(n / name, op, "'s")
(n / name, op, "Africa")
(n2 / name, op, "New")
(n2 / name, op, "Partnership")
(n3 / name, op, "African")
(n3 / name, op, "Union")
(n4 / name, op, "Brazil")
(n5 / name, op, "African")
(n5 / name, op, "South")
(n6 / name, op, "African")
(n6 / name, op, "South")
(o / organization, beneficiary, d / develop-02)
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(p / progress-01, ARG0, d2 / delegation)
(p / progress-01, ARG1, a / and)
(p2 / person, mod, c / country)
(s / state-01, ARG0, f / foreign)
(s / state-01, ARG1, b / brief)
(t / thing, name, n / name)
(t2 / thing, name, n5 / name)
(t3 / thing, name, n6 / name)

Decoded in 1,221,289 microseconds
Sentence: 2004-04-03

mkDayMonthYear(2004-04-03,03,04,2004)
mkDayMonthYear(2004-04-03,03,04,2004)
Spans:
Span 0-1:  2004-04-03 => (date-entity :day 3 :month 4 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-04-03,(date-entity :day 3 :month 4 :year 2004),false)),Map(2 -> 4, 1 -> 3, 0 -> date-entity, 3 -> 2004),Map(2 -> 2004, d -> date-entity, 4 -> 4, 3 -> 3))),[Ljava.lang.String;@7ab34619,Annotation([Ljava.lang.String;@ae2db25,[Ljava.lang.String;@363c4251,[Ljava.lang.String;@7afc4db9),Annotation([Ljava.lang.String;@1a1f5f71,[Ljava.lang.String;@63884e4,[Ledu.cmu.lti.nlp.amr.Dependency;@524270b8),Annotation([Ljava.lang.String;@4acb7ecc,[Ljava.lang.String;@2a4f5433,[Ljava.lang.String;@6812fa3a),Annotation([Ljava.lang.String;@29149030,[Ljava.lang.String;@38b8b6c0,[Ledu.cmu.lti.nlp.amr.Entity;@68868328))
AMR:
(d / date-entity, day, 3 / 3)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)

Decoded in 6,888 microseconds
Sentence: Russia (RU)

NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "RU"))
NER Entity: (country :name (name :op "Russia"))
Spans:
Span 0-1:  Russia => (country :name (name :op "Russia"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Russia,(country :name (name :op "Russia")),false)),Map(2 -> "Russia", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@173a6728,Annotation([Ljava.lang.String;@1a22e0ef,[Ljava.lang.String;@67514bdd,[Ljava.lang.String;@3b920bdc),Annotation([Ljava.lang.String;@7f5538a1,[Ljava.lang.String;@72fd8a3c,[Ledu.cmu.lti.nlp.amr.Dependency;@1f9f381d),Annotation([Ljava.lang.String;@34780cd9,[Ljava.lang.String;@623ebac7,[Ljava.lang.String;@7c8c70d6),Annotation([Ljava.lang.String;@1ab5f08a,[Ljava.lang.String;@6edf29c1,[Ledu.cmu.lti.nlp.amr.Entity;@79a04e5f))
AMR:
(c / country, name, n / name)
(n / name, op, "Russia")

Decoded in 4,448 microseconds
Sentence: International; Government; technology; military; space; leader

Spans:
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 10-11:  leader => (person :ARG0-of lead-02)
Span 6-7:  military => military
Span 8-9:  space => space
Span 4-5:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),leader,(person :ARG0-of lead-02),false), Span(9,10,List(2),;,and,false), Span(8,9,List(3),space,space,false), Span(7,8,List(4),;,and,false), Span(6,7,List(5),military,military,false), Span(5,6,List(6),;,and,false), Span(4,5,List(7),technology,technology,false), Span(3,4,List(8),;,and,false), Span(2,3,List(10, 9),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(11),;,and,false), Span(0,1,List(12),International,international,false)),Map(2 -> and, 5 -> military, 12 -> international, 8 -> and, 7 -> technology, 1 -> lead-02, 4 -> and, 11 -> and, 6 -> and, 0 -> person, 9 -> government-organization, 3 -> space, 10 -> govern-01),Map(t -> technology, a3 -> and, s -> space, m -> military, g2 -> govern-01, p -> person, g -> government-organization, a -> and, a5 -> and, a2 -> and, i -> international, l -> lead-02, a4 -> and))),[Ljava.lang.String;@66b59b7d,Annotation([Ljava.lang.String;@53311681,[Ljava.lang.String;@4437ac07,[Ljava.lang.String;@3f1ed068),Annotation([Ljava.lang.String;@753aca85,[Ljava.lang.String;@2e645fbd,[Ledu.cmu.lti.nlp.amr.Dependency;@574a89e2),Annotation([Ljava.lang.String;@1e1e9ef3,[Ljava.lang.String;@3dd31157,[Ljava.lang.String;@31c628e7),Annotation([Ljava.lang.String;@3240b2a4,[Ljava.lang.String;@58434b19,[Ledu.cmu.lti.nlp.amr.Entity;@7d3fb0ef))
AMR:
(a2 / and, op, a / and)
(a3 / and, op, s / space)
(a4 / and, op, a / and)
(a4 / and, op, a3 / and)
(a4 / and, op, m / military)
(a4 / and, op, p / person)
(a4 / and, op, t / technology)
(a5 / and, op, a4 / and)
(a5 / and, op, g / government-organization)
(a5 / and, op, i / international)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p / person)

Decoded in 70,888 microseconds
Sentence: French President Jacques Chirac became the first Western leader to visit the top-secret Russian Titov test and control space center in Krasnoznamernsk

NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Jacques" :op "Chirac"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "French"))
Spans:
Span 18-19:  and => and
Span 4-5:  became => become-01
Span 21-22:  center => center
Span 19-20:  control => control-01
Span 0-1:  French => (country :name (name :op "France"))
Span 2-4:  Jacques Chirac => (person :name (name :op "Chirac" :op "Jacques"))
Span 23-24:  Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Span 8-9:  leader => (person :ARG0-of lead-02)
Span 1-2:  President => (have-org-role-91 :ARG2 president)
Span 15-16:  Russian => (country :name (name :op "Russia"))
Span 14-15:  secret => secret
Span 20-21:  space => space
Span 17-18:  test => test-01
Span 16-17:  Titov => (name :op "Titov")
Span 12-13:  top => top
Span 10-11:  visit => visit-01
Span 7-8:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(2, 1, 0),Krasnoznamernsk,(city :name (name :op "Krasnoznamernsk")),false), Span(21,22,List(3),center,center,false), Span(20,21,List(4),space,space,false), Span(19,20,List(5),control,control-01,false), Span(18,19,List(6),and,and,false), Span(17,18,List(7),test,test-01,false), Span(16,17,List(9, 8),Titov,(name :op "Titov"),false), Span(15,16,List(12, 11, 10),Russian,(country :name (name :op "Russia")),false), Span(14,15,List(13),secret,secret,false), Span(12,13,List(14),top,top,false), Span(10,11,List(15),visit,visit-01,false), Span(8,9,List(17, 16),leader,(person :ARG0-of lead-02),false), Span(7,8,List(20, 19, 18),Western,(world-region :name (name :op "West")),false), Span(4,5,List(21),became,become-01,false), Span(2,4,List(25, 24, 23, 22),Jacques Chirac,(person :name (name :op "Chirac" :op "Jacques")),false), Span(1,2,List(27, 26),President,(have-org-role-91 :ARG2 president),false), Span(0,1,List(30, 29, 28),French,(country :name (name :op "France")),false)),Map(30 -> "France", 2 -> "Krasnoznamernsk", 5 -> control-01, 27 -> president, 12 -> "Russia", 8 -> name, 15 -> visit-01, 21 -> become-01, 18 -> world-region, 24 -> "Chirac", 7 -> test-01, 1 -> name, 17 -> lead-02, 23 -> name, 26 -> have-org-role-91, 4 -> space, 11 -> name, 14 -> top, 29 -> name, 20 -> "West", 28 -> country, 6 -> and, 9 -> "Titov", 0 -> city, 22 -> person, 16 -> person, 19 -> name, 10 -> country, 3 -> center, 25 -> "Jacques", 13 -> secret),Map(w -> world-region, n -> name, h -> have-org-role-91, s2 -> secret, b -> become-01, t -> test-01, p2 -> person, n4 -> name, c4 -> country, s -> space, v -> visit-01, p -> person, c3 -> control-01, a -> and, n3 -> name, n6 -> name, t2 -> top, c -> city, l -> lead-02, p3 -> president, c2 -> center, n2 -> name, c5 -> country, n5 -> name))),[Ljava.lang.String;@7dbe2ebf,Annotation([Ljava.lang.String;@4adc663e,[Ljava.lang.String;@885e7ff,[Ljava.lang.String;@8bd86c8),Annotation([Ljava.lang.String;@4fa9ab6,[Ljava.lang.String;@2d3ef181,[Ledu.cmu.lti.nlp.amr.Dependency;@a2341c6),Annotation([Ljava.lang.String;@6e4c0d8c,[Ljava.lang.String;@3e3315d9,[Ljava.lang.String;@64db4967),Annotation([Ljava.lang.String;@74e6094b,[Ljava.lang.String;@7a485a36,[Ledu.cmu.lti.nlp.amr.Entity;@5cf3157b))
AMR:
(a / and, op, c2 / center)
(b / become-01, ARG1, p2 / person)
(b / become-01, ARG2, p / person)
(c / city, name, n / name)
(c2 / center, location, c / city)
(c2 / center, mod, c3 / control-01)
(c2 / center, mod, c4 / country)
(c2 / center, mod, s / space)
(c2 / center, mod, t / test-01)
(c2 / center, name, n2 / name)
(c4 / country, name, n3 / name)
(c5 / country, name, n6 / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c5 / country)
(h / have-org-role-91, ARG2, p3 / president)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, w / world-region)
(n / name, op, "Krasnoznamernsk")
(n2 / name, op, "Titov")
(n3 / name, op, "Russia")
(n4 / name, op, "West")
(n5 / name, op, "Chirac")
(n5 / name, op, "Jacques")
(n6 / name, op, "France")
(p2 / person, name, n5 / name)
(s2 / secret, degree, t2 / top)
(t / test-01, ARG1, s2 / secret)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, a / and)
(w / world-region, name, n4 / name)

Decoded in 1,895,097 microseconds
Sentence: On 040403 visiting French President Jacques Chirac became the first Western leader to visit the top-secret Russian Titov test and control space center.

mkDayMonthYear(040403,03,04,2004)
mkDayMonthYear(040403,03,04,04)
NER Entity: (thing :name (name :op "French"))
NER Entity: (person :name (name :op "Jacques" :op "Chirac"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (thing :name (name :op "Western"))
NER Entity: (thing :name (name :op "French"))
mkDayMonthYear(040403,03,04,2004)
mkDayMonthYear(040403,03,04,04)
Spans:
Span 1-2:  040403 => (date-entity :day 3 :month 4 :year 2004)
Span 21-22:  and => and
Span 7-8:  became => become-01
Span 24-25:  center => center
Span 22-23:  control => control-01
Span 3-4:  French => (country :name (name :op "France"))
Span 5-7:  Jacques Chirac => (person :name (name :op "Chirac" :op "Jacques"))
Span 11-12:  leader => (person :ARG0-of lead-02)
Span 4-5:  President => (have-org-role-91 :ARG2 president)
Span 18-19:  Russian => (country :name (name :op "Russia"))
Span 17-18:  secret => secret
Span 23-24:  space => space
Span 20-21:  test => test-01
Span 19-20:  Titov => (name :op "Titov")
Span 15-16:  top => top
Span 13-14:  visit => visit-01
Span 2-3:  visiting => visit-01
Span 10-11:  Western => (world-region :name (name :op "West"))

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),center,center,false), Span(23,24,List(1),space,space,false), Span(22,23,List(2),control,control-01,false), Span(21,22,List(3),and,and,false), Span(20,21,List(4),test,test-01,false), Span(19,20,List(6, 5),Titov,(name :op "Titov"),false), Span(18,19,List(9, 8, 7),Russian,(country :name (name :op "Russia")),false), Span(17,18,List(10),secret,secret,false), Span(15,16,List(11),top,top,false), Span(13,14,List(12),visit,visit-01,false), Span(11,12,List(14, 13),leader,(person :ARG0-of lead-02),false), Span(10,11,List(17, 16, 15),Western,(world-region :name (name :op "West")),false), Span(7,8,List(18),became,become-01,false), Span(5,7,List(22, 21, 20, 19),Jacques Chirac,(person :name (name :op "Chirac" :op "Jacques")),false), Span(4,5,List(24, 23),President,(have-org-role-91 :ARG2 president),false), Span(3,4,List(27, 26, 25),French,(country :name (name :op "France")),false), Span(2,3,List(28),visiting,visit-01,false), Span(1,2,List(32, 31, 30, 29),040403,(date-entity :day 3 :month 4 :year 2004),false)),Map(30 -> 3, 2 -> control-01, 5 -> name, 27 -> "France", 12 -> visit-01, 8 -> name, 15 -> world-region, 21 -> "Chirac", 18 -> become-01, 24 -> president, 7 -> country, 1 -> space, 17 -> "West", 23 -> have-org-role-91, 26 -> name, 4 -> test-01, 11 -> top, 32 -> 2004, 14 -> lead-02, 29 -> date-entity, 20 -> name, 28 -> visit-01, 6 -> "Titov", 9 -> "Russia", 0 -> center, 22 -> "Jacques", 16 -> name, 19 -> person, 10 -> secret, 3 -> and, 31 -> 4, 25 -> country, 13 -> person),Map(n -> name, w -> world-region, v2 -> visit-01, h -> have-org-role-91, 2 -> 2004, s2 -> secret, t -> test-01, b -> become-01, p2 -> person, n4 -> name, c4 -> country, s -> space, v -> visit-01, d -> date-entity, p -> person, c3 -> country, a -> and, n3 -> name, 4 -> 4, t2 -> top, c -> center, l -> lead-02, p3 -> president, 3 -> 3, n2 -> name, c2 -> control-01, n5 -> name))),[Ljava.lang.String;@625dfff3,Annotation([Ljava.lang.String;@26350ea2,[Ljava.lang.String;@1e9469b8,[Ljava.lang.String;@5a08efdc),Annotation([Ljava.lang.String;@57272109,[Ljava.lang.String;@59696551,[Ledu.cmu.lti.nlp.amr.Dependency;@648d0e6d),Annotation([Ljava.lang.String;@79e66b2f,[Ljava.lang.String;@17273273,[Ljava.lang.String;@5f69e2b),Annotation([Ljava.lang.String;@984169e,[Ljava.lang.String;@43f1bb92,[Ledu.cmu.lti.nlp.amr.Entity;@6d6bbd35))
AMR:
(b / become-01, ARG1, p2 / person)
(b / become-01, ARG2, p / person)
(b / become-01, time, d / date-entity)
(c / center, mod, c2 / control-01)
(c / center, mod, c3 / country)
(c / center, mod, s / space)
(c / center, mod, t / test-01)
(c / center, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n5 / name)
(d / date-entity, day, 3 / 3)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, p3 / president)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, w / world-region)
(n / name, op, "Titov")
(n2 / name, op, "Russia")
(n3 / name, op, "West")
(n4 / name, op, "Chirac")
(n4 / name, op, "Jacques")
(n5 / name, op, "France")
(p2 / person, name, n4 / name)
(s2 / secret, degree, t2 / top)
(t / test-01, ARG1, s2 / secret)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, a / and)
(v2 / visit-01, ARG0, p2 / person)
(v2 / visit-01, ARG1, c / center)
(w / world-region, name, n3 / name)

Decoded in 2,916,883 microseconds
Sentence: Chirac flew into Krasnoznamernsk for a meeting with Russian President Vladimir Putin at the space center.

NER Entity: (person :name (name :op "Chirac"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Vladimir" :op "Putin"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (person :name (name :op "Chirac"))
Spans:
Span 15-16:  center => center
Span 0-1:  Chirac => (person :name (name :op "Chirac"))
Span 1-2:  flew => fly-01
Span 3-4:  Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Span 6-7:  meeting => meet-03
Span 9-10:  President => (have-org-role-91 :ARG2 president)
Span 8-9:  Russian => (country :name (name :op "Russia"))
Span 14-15:  space => space
Span 10-12:  Vladimir Putin => (person :name (name :op "Vladimir" :op "Putin"))

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),center,center,false), Span(14,15,List(1),space,space,false), Span(10,12,List(5, 4, 3, 2),Vladimir Putin,(person :name (name :op "Vladimir" :op "Putin")),false), Span(9,10,List(7, 6),President,(have-org-role-91 :ARG2 president),false), Span(8,9,List(10, 9, 8),Russian,(country :name (name :op "Russia")),false), Span(6,7,List(11),meeting,meet-03,false), Span(3,4,List(14, 13, 12),Krasnoznamernsk,(city :name (name :op "Krasnoznamernsk")),false), Span(1,2,List(15),flew,fly-01,false), Span(0,1,List(18, 17, 16),Chirac,(person :name (name :op "Chirac")),false)),Map(2 -> person, 5 -> "Putin", 12 -> city, 15 -> fly-01, 8 -> country, 18 -> "Chirac", 7 -> president, 17 -> name, 1 -> space, 4 -> "Vladimir", 11 -> meet-03, 14 -> "Krasnoznamernsk", 6 -> have-org-role-91, 0 -> center, 9 -> name, 16 -> person, 3 -> name, 10 -> "Russia", 13 -> name),Map(n -> name, h -> have-org-role-91, p2 -> president, n4 -> name, s -> space, m -> meet-03, p -> person, c3 -> city, n3 -> name, c -> center, f -> fly-01, p3 -> person, c2 -> country, n2 -> name))),[Ljava.lang.String;@5c5d6175,Annotation([Ljava.lang.String;@7544ac86,[Ljava.lang.String;@3b27b497,[Ljava.lang.String;@b1534d3),Annotation([Ljava.lang.String;@3c74aa0d,[Ljava.lang.String;@6c841199,[Ledu.cmu.lti.nlp.amr.Dependency;@6a818392),Annotation([Ljava.lang.String;@489091bd,[Ljava.lang.String;@512d6e60,[Ljava.lang.String;@1de9b505),Annotation([Ljava.lang.String;@7b122839,[Ljava.lang.String;@3743539f,[Ledu.cmu.lti.nlp.amr.Entity;@d277579))
AMR:
(c / center, mod, s / space)
(c2 / country, name, n2 / name)
(c3 / city, name, n3 / name)
(f / fly-01, ARG1, p3 / person)
(f / fly-01, destination, c3 / city)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, p2 / president)
(m / meet-03, ARG0, p3 / person)
(m / meet-03, ARG1, p / person)
(m / meet-03, location, c / center)
(n / name, op, "Putin")
(n / name, op, "Vladimir")
(n2 / name, op, "Russia")
(n3 / name, op, "Krasnoznamernsk")
(n4 / name, op, "Chirac")
(p / person, name, n / name)
(p3 / person, name, n4 / name)

Decoded in 238,866 microseconds
Sentence: Putin and Russian Defense Minister Sergei Ivanov greeted Chirac at the space center some 40 km southwest of Moscow in Krasnoznamernsk.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Sergei" :op "Ivanov"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (country :name (name :op "Krasnoznamernsk"))
NER Entity: (country :name (name :op "Moscow"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 14-15:  40 => 40
Span 1-2:  and => and
Span 12-13:  center => center
Span 8-9:  Chirac => (person :name (name :op "Chirac"))
Span 3-4:  Defense => defense
Span 7-8:  greeted => greet-01
Span 20-21:  Krasnoznamernsk => (city :name (name :op "Krasnoznamernsk"))
Span 4-5:  Minister => (have-org-role-91 :ARG2 minister)
Span 18-19:  Moscow => (city :name (name :op "Moscow"))
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 2-3:  Russian => (country :name (name :op "Russia"))
Span 5-7:  Sergei Ivanov => (person :name (name :op "Sergei" :op "Ivanov"))
Span 13-14:  some => some
Span 16-17:  southwest => southwest
Span 11-12:  space => space

Langrangian relaxation converged after 12 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(2, 1, 0),Krasnoznamernsk,(city :name (name :op "Krasnoznamernsk")),false), Span(18,19,List(5, 4, 3),Moscow,(city :name (name :op "Moscow")),false), Span(16,17,List(6),southwest,southwest,false), Span(14,15,List(7),40,40,false), Span(13,14,List(8),some,some,false), Span(12,13,List(9),center,center,false), Span(11,12,List(10),space,space,false), Span(8,9,List(13, 12, 11),Chirac,(person :name (name :op "Chirac")),false), Span(7,8,List(14),greeted,greet-01,false), Span(5,7,List(18, 17, 16, 15),Sergei Ivanov,(person :name (name :op "Sergei" :op "Ivanov")),false), Span(4,5,List(20, 19),Minister,(have-org-role-91 :ARG2 minister),false), Span(3,4,List(21),Defense,defense,false), Span(2,3,List(24, 23, 22),Russian,(country :name (name :op "Russia")),false), Span(1,2,List(25),and,and,false), Span(0,1,List(28, 27, 26),Putin,(person :name (name :op "Putin")),false)),Map(2 -> "Krasnoznamernsk", 5 -> "Moscow", 27 -> name, 12 -> name, 8 -> some, 15 -> person, 21 -> defense, 18 -> "Ivanov", 24 -> "Russia", 7 -> 40, 1 -> name, 17 -> "Sergei", 23 -> name, 26 -> person, 4 -> name, 11 -> person, 14 -> greet-01, 20 -> minister, 28 -> "Putin", 6 -> southwest, 9 -> center, 0 -> city, 22 -> country, 16 -> name, 19 -> have-org-role-91, 10 -> space, 3 -> city, 25 -> and, 13 -> "Chirac"),Map(n -> name, h -> have-org-role-91, s2 -> some, p2 -> person, c4 -> country, n4 -> name, s -> southwest, d -> defense, m -> minister, p -> person, g -> greet-01, a -> and, 4 -> 40, c3 -> center, n3 -> name, n6 -> name, c -> city, s3 -> space, p3 -> person, c2 -> city, n2 -> name, n5 -> name))),[Ljava.lang.String;@5db6b845,Annotation([Ljava.lang.String;@378f002a,[Ljava.lang.String;@1afd72ef,[Ljava.lang.String;@2cc75074),Annotation([Ljava.lang.String;@445bb139,[Ljava.lang.String;@b9a77c8,[Ledu.cmu.lti.nlp.amr.Dependency;@7a81065e),Annotation([Ljava.lang.String;@6cd3ad8a,[Ljava.lang.String;@75181b50,[Ljava.lang.String;@2d64160c),Annotation([Ljava.lang.String;@5f254608,[Ljava.lang.String;@2eeb0f9b,[Ledu.cmu.lti.nlp.amr.Entity;@1b1c538d))
AMR:
(a / and, mod, 4 / 40)
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(c / city, location, s2 / some)
(c / city, name, n / name)
(c2 / city, name, n2 / name)
(c2 / city, part, s / southwest)
(c2 / city, quant, s2 / some)
(c3 / center, location, c / city)
(c3 / center, mod, s3 / space)
(c4 / country, name, n5 / name)
(g / greet-01, ARG0, a / and)
(g / greet-01, ARG1, p / person)
(g / greet-01, location, c3 / center)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, d / defense)
(n / name, op, "Krasnoznamernsk")
(n2 / name, op, "Moscow")
(n3 / name, op, "Chirac")
(n4 / name, op, "Ivanov")
(n4 / name, op, "Sergei")
(n5 / name, op, "Russia")
(n6 / name, op, "Putin")
(p / person, name, n3 / name)
(p2 / person, name, n4 / name)
(p3 / person, name, n6 / name)

Decoded in 589,497 microseconds
Sentence: The closed Soviet-era military facility was founded in 570000 and collects and analyzes all information gathered from Russia's military spy satellites.

NER Entity: (thing :name (name :op "Soviet" :op "-" :op "era"))
mkDayMonthYear(570000,00,00,57)
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
mkDayMonthYear(570000,00,00,57)
NER Entity: (thing :name (name :op "Soviet" :op "-" :op "era"))
Spans:
Span 10-11:  570000 => (date-entity :day 0 :month 0 :year 57)
Span 15-16:  all => all
Span 14-15:  analyzes => analyze-01
Span 13-14:  and => and
Span 11-12:  and => and
Span 1-2:  closed => close
Span 12-13:  collects => collect-01
Span 4-5:  era => era
Span 6-7:  facility => facility
Span 8-9:  founded => found-01
Span 17-18:  gathered => gather-01
Span 16-17:  information => information
Span 21-22:  military => military
Span 5-6:  military => military
Span 19-20:  Russia => (country :name (name :op "Russia"))
Span 23-24:  satellites => satellite
Span 2-3:  Soviet => "Soviet"
Span 22-23:  spy => spy-01

Langrangian relaxation converged after 58 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),satellites,satellite,false), Span(22,23,List(1),spy,spy-01,false), Span(21,22,List(2),military,military,false), Span(19,20,List(5, 4, 3),Russia,(country :name (name :op "Russia")),false), Span(17,18,List(6),gathered,gather-01,false), Span(16,17,List(7),information,information,false), Span(15,16,List(8),all,all,false), Span(14,15,List(9),analyzes,analyze-01,false), Span(13,14,List(10),and,and,false), Span(12,13,List(11),collects,collect-01,false), Span(11,12,List(12),and,and,false), Span(10,11,List(16, 15, 14, 13),570000,(date-entity :day 0 :month 0 :year 57),false), Span(8,9,List(17),founded,found-01,false), Span(6,7,List(18),facility,facility,false), Span(5,6,List(19),military,military,false), Span(4,5,List(20),era,era,false), Span(2,3,List(21),Soviet,"Soviet",false), Span(1,2,List(22),closed,close,false)),Map(2 -> military, 5 -> "Russia", 12 -> and, 15 -> 0, 8 -> all, 21 -> "Soviet", 18 -> facility, 7 -> information, 17 -> found-01, 1 -> spy-01, 4 -> name, 11 -> collect-01, 14 -> 0, 20 -> era, 6 -> gather-01, 22 -> close, 0 -> satellite, 9 -> analyze-01, 16 -> 57, 19 -> military, 3 -> country, 10 -> and, 13 -> date-entity),Map(S -> "Soviet", e -> era, n -> name, 5 -> 57, s2 -> spy-01, m2 -> military, a3 -> and, s -> satellite, m -> military, d -> date-entity, g -> gather-01, c3 -> close, a -> all, 02 -> 0, i -> information, a2 -> analyze-01, c -> country, f2 -> facility, f -> found-01, 0 -> 0, c2 -> collect-01, a4 -> and))),[Ljava.lang.String;@1645f294,Annotation([Ljava.lang.String;@6325f352,[Ljava.lang.String;@15c4af7a,[Ljava.lang.String;@6cbd0674),Annotation([Ljava.lang.String;@55d58825,[Ljava.lang.String;@19a64eae,[Ledu.cmu.lti.nlp.amr.Dependency;@29a98d9f),Annotation([Ljava.lang.String;@2da3b078,[Ljava.lang.String;@544e8149,[Ljava.lang.String;@7fb66650),Annotation([Ljava.lang.String;@1a96d94c,[Ljava.lang.String;@2a869a16,[Ledu.cmu.lti.nlp.amr.Entity;@ae202c6))
AMR:
(a2 / analyze-01, ARG0, f2 / facility)
(a2 / analyze-01, ARG1, i / information)
(a3 / and, op, a2 / analyze-01)
(a4 / and, op, a2 / analyze-01)
(a4 / and, op, c2 / collect-01)
(a4 / and, op, f / found-01)
(c / country, name, n / name)
(c2 / collect-01, ARG0, f2 / facility)
(c2 / collect-01, ARG1, i / information)
(d / date-entity, day, 0 / 0)
(d / date-entity, month, 02 / 0)
(d / date-entity, year, 5 / 57)
(f / found-01, ARG1, f2 / facility)
(f / found-01, time, d / date-entity)
(f2 / facility, mod, c3 / close)
(f2 / facility, mod, m / military)
(f2 / facility, time, e / era)
(g / gather-01, ARG1, i / information)
(g / gather-01, source, s / satellite)
(i / information, quant, a / all)
(n / name, op, "Russia")
(s / satellite, mod, c / country)
(s / satellite, mod, m2 / military)
(s / satellite, mod, s2 / spy-01)
(s2 / spy-01, ARG1, S / "Soviet")

Decoded in 1,968,851 microseconds
Sentence: The space center is also involved in launches of intercontinental ballistic missiles and is working on a plan to develop defensive early warning systems.

Spans:
Span 4-5:  also => also
Span 12-13:  and => and
Span 10-11:  ballistic => ballistic
Span 2-3:  center => center
Span 20-21:  defensive => defend-01
Span 19-20:  develop => develop-02
Span 21-22:  early => early
Span 9-10:  intercontinental => intercontinental
Span 5-6:  involved => involve-01
Span 7-8:  launches => launch-01
Span 11-12:  missiles => missile
Span 17-18:  plan => plan-01
Span 1-2:  space => space
Span 23-24:  systems => system
Span 22-23:  warning => warn-01
Span 14-15:  working => work-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),systems,system,false), Span(22,23,List(1),warning,warn-01,false), Span(21,22,List(2),early,early,false), Span(20,21,List(3),defensive,defend-01,false), Span(19,20,List(4),develop,develop-02,false), Span(17,18,List(5),plan,plan-01,false), Span(14,15,List(6),working,work-01,false), Span(12,13,List(7),and,and,false), Span(11,12,List(8),missiles,missile,false), Span(10,11,List(9),ballistic,ballistic,false), Span(9,10,List(10),intercontinental,intercontinental,false), Span(7,8,List(11),launches,launch-01,false), Span(5,6,List(12),involved,involve-01,false), Span(4,5,List(13),also,also,false), Span(2,3,List(14),center,center,false), Span(1,2,List(15),space,space,false)),Map(2 -> early, 5 -> plan-01, 12 -> involve-01, 15 -> space, 8 -> missile, 7 -> and, 1 -> warn-01, 4 -> develop-02, 11 -> launch-01, 14 -> center, 6 -> work-01, 0 -> system, 9 -> ballistic, 3 -> defend-01, 10 -> intercontinental, 13 -> also),Map(e -> early, w -> warn-01, s2 -> space, b -> ballistic, s -> system, d -> defend-01, m -> missile, p -> plan-01, a -> and, d2 -> develop-02, i2 -> involve-01, w2 -> work-01, a2 -> also, i -> intercontinental, c -> center, l -> launch-01))),[Ljava.lang.String;@46aa712c,Annotation([Ljava.lang.String;@6ada9c0c,[Ljava.lang.String;@7412ed6b,[Ljava.lang.String;@6e7c351d),Annotation([Ljava.lang.String;@7b4a0aef,[Ljava.lang.String;@45cec376,[Ledu.cmu.lti.nlp.amr.Dependency;@26d41711),Annotation([Ljava.lang.String;@298f0a0b,[Ljava.lang.String;@2b960a7,[Ljava.lang.String;@31dfc6f5),Annotation([Ljava.lang.String;@37b52340,[Ljava.lang.String;@663bb8ef,[Ledu.cmu.lti.nlp.amr.Entity;@2f4e40d7))
AMR:
(a / and, op, i2 / involve-01)
(a / and, op, w2 / work-01)
(c / center, mod, s2 / space)
(d / defend-01, ARG0, s / system)
(d / defend-01, ARG1, b / ballistic)
(d2 / develop-02, ARG0, c / center)
(d2 / develop-02, ARG1, s / system)
(i2 / involve-01, ARG1, c / center)
(i2 / involve-01, ARG2, l / launch-01)
(i2 / involve-01, mod, a2 / also)
(l / launch-01, ARG1, m / missile)
(p / plan-01, ARG1, i / intercontinental)
(w / warn-01, ARG0, s / system)
(w / warn-01, time, e / early)
(w2 / work-01, ARG0, c / center)
(w2 / work-01, ARG1, p / plan-01)
(w2 / work-01, purpose, d2 / develop-02)

Decoded in 393,484 microseconds
Sentence: Putin held two-hour meeting with Chirac.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 7-8:  Chirac => (person :name (name :op "Chirac"))
Span 1-2:  held => hold-04
Span 4-5:  hour => (temporal-quantity :unit hour)
Span 5-6:  meeting => meet-03
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 2-3:  two => 2

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(2, 1, 0),Chirac,(person :name (name :op "Chirac")),false), Span(5,6,List(3),meeting,meet-03,false), Span(4,5,List(5, 4),hour,(temporal-quantity :unit hour),false), Span(2,3,List(6),two,2,false), Span(1,2,List(7),held,hold-04,false), Span(0,1,List(10, 9, 8),Putin,(person :name (name :op "Putin")),false)),Map(2 -> "Chirac", 5 -> hour, 8 -> person, 7 -> hold-04, 1 -> name, 4 -> temporal-quantity, 6 -> 2, 9 -> name, 0 -> person, 10 -> "Putin", 3 -> meet-03),Map(n -> name, 2 -> 2, h -> hour, h2 -> hold-04, t -> temporal-quantity, p2 -> person, m -> meet-03, p -> person, n2 -> name))),[Ljava.lang.String;@60e9c3a5,Annotation([Ljava.lang.String;@7e5843db,[Ljava.lang.String;@459f703f,[Ljava.lang.String;@188ac8a3),Annotation([Ljava.lang.String;@3650d4fc,[Ljava.lang.String;@aaa0f76,[Ledu.cmu.lti.nlp.amr.Dependency;@340a8894),Annotation([Ljava.lang.String;@7a8b9166,[Ljava.lang.String;@4acc5dff,[Ljava.lang.String;@10c72a6f),Annotation([Ljava.lang.String;@70e94ecb,[Ljava.lang.String;@56cfe111,[Ledu.cmu.lti.nlp.amr.Entity;@7e446d92))
AMR:
(h2 / hold-04, ARG1, m / meet-03)
(h2 / hold-04, duration, t / temporal-quantity)
(m / meet-03, ARG0, p2 / person)
(m / meet-03, ARG1, p / person)
(n / name, op, "Chirac")
(n2 / name, op, "Putin")
(p / person, name, n / name)
(p2 / person, name, n2 / name)
(t / temporal-quantity, quant, 2 / 2)
(t / temporal-quantity, unit, h / hour)

Decoded in 183,003 microseconds
Sentence: Russian Space Forces Commander Lt. Gen. Vladimir Popovkin reported to Chirac and Putin and said it is one of Russia's priorities to expand space cooperation with France.

NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Gen."))
NER Entity: (person :name (name :op "Vladimir" :op "Popovkin"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (person :name (name :op "Putin"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "France"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (person :name (name :op "Putin"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (thing :name (name :op "Russian"))
Spans:
Span 13-14:  and => and
Span 11-12:  and => and
Span 10-11:  Chirac => (person :name (name :op "Chirac"))
Span 3-4:  Commander => (have-org-role-91 :ARG2 commander)
Span 25-26:  cooperation => cooperate-01
Span 23-24:  expand => expand-01
Span 27-28:  France => (country :name (name :op "France"))
Span 15-16:  it => it
Span 17-18:  one => 1
Span 21-22:  priorities => priority
Span 12-13:  Putin => (person :name (name :op "Putin"))
Span 8-9:  reported => report-01
Span 19-20:  Russia => (country :name (name :op "Russia"))
Span 0-1:  Russian => (country :name (name :op "Russia"))
Span 14-15:  said => say-01
Span 24-25:  space => space
Span 1-3:  Space Forces => (have-org-role-91 :ARG1 (military :name (name :op "Forces" :op "Space")))
Span 6-8:  Vladimir Popovkin => (person :name (name :op "Vladimir" :op "Popovkin"))

Langrangian relaxation converged after 106 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(2, 1, 0),France,(country :name (name :op "France")),false), Span(25,26,List(3),cooperation,cooperate-01,false), Span(24,25,List(4),space,space,false), Span(23,24,List(5),expand,expand-01,false), Span(21,22,List(6),priorities,priority,false), Span(19,20,List(9, 8, 7),Russia,(country :name (name :op "Russia")),false), Span(17,18,List(10),one,1,false), Span(15,16,List(11),it,it,false), Span(14,15,List(12),said,say-01,false), Span(13,14,List(13),and,and,false), Span(12,13,List(16, 15, 14),Putin,(person :name (name :op "Putin")),false), Span(11,12,List(17),and,and,false), Span(10,11,List(20, 19, 18),Chirac,(person :name (name :op "Chirac")),false), Span(8,9,List(21),reported,report-01,false), Span(6,8,List(25, 24, 23, 22),Vladimir Popovkin,(person :name (name :op "Vladimir" :op "Popovkin")),false), Span(3,4,List(27, 26),Commander,(have-org-role-91 :ARG2 commander),false), Span(1,3,List(32, 31, 30, 29, 28),Space Forces,(have-org-role-91 :ARG1 (military :name (name :op "Forces" :op "Space"))),false), Span(0,1,List(35, 34, 33),Russian,(country :name (name :op "Russia")),false)),Map(30 -> name, 2 -> "France", 5 -> expand-01, 33 -> country, 27 -> commander, 12 -> say-01, 8 -> name, 15 -> name, 21 -> report-01, 18 -> person, 24 -> "Vladimir", 35 -> "Russia", 7 -> country, 1 -> name, 17 -> and, 23 -> name, 26 -> have-org-role-91, 4 -> space, 11 -> it, 32 -> "Space", 14 -> person, 29 -> military, 20 -> "Chirac", 34 -> name, 28 -> have-org-role-91, 6 -> priority, 9 -> "Russia", 0 -> country, 22 -> person, 16 -> "Putin", 19 -> name, 10 -> 1, 3 -> cooperate-01, 31 -> "Forces", 25 -> "Popovkin", 13 -> and),Map(e -> expand-01, n -> name, h -> have-org-role-91, s2 -> say-01, h2 -> have-org-role-91, n7 -> name, p2 -> person, n4 -> name, c4 -> commander, s -> space, m -> military, 1 -> 1, p -> priority, a -> and, c3 -> country, n3 -> name, p4 -> person, n6 -> name, i -> it, a2 -> and, r -> report-01, c -> country, p3 -> person, n2 -> name, c2 -> cooperate-01, c5 -> country, n5 -> name))),[Ljava.lang.String;@57f9b467,Annotation([Ljava.lang.String;@6d5c2745,[Ljava.lang.String;@44b29496,[Ljava.lang.String;@1947596f),Annotation([Ljava.lang.String;@3078cac,[Ljava.lang.String;@f6de586,[Ledu.cmu.lti.nlp.amr.Dependency;@5f2bd6d9),Annotation([Ljava.lang.String;@7c847072,[Ljava.lang.String;@43d9f1a2,[Ljava.lang.String;@23f86d8a),Annotation([Ljava.lang.String;@2264ea32,[Ljava.lang.String;@7d3c09ec,[Ledu.cmu.lti.nlp.amr.Entity;@71e4b308))
AMR:
(a / and, op, p2 / person)
(a / and, op, p3 / person)
(a / and, op, s2 / say-01)
(a2 / and, op, r / report-01)
(a2 / and, op, s2 / say-01)
(c / country, name, n / name)
(c2 / cooperate-01, ARG0, c3 / country)
(c2 / cooperate-01, ARG1, c / country)
(c2 / cooperate-01, ARG2, s / space)
(c3 / country, name, n2 / name)
(c5 / country, name, n7 / name)
(e / expand-01, ARG0, c5 / country)
(e / expand-01, ARG1, c2 / cooperate-01)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c5 / country)
(h / have-org-role-91, ARG2, c4 / commander)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, m / military)
(m / military, name, n6 / name)
(n / name, op, "France")
(n2 / name, op, "Russia")
(n3 / name, op, "Putin")
(n4 / name, op, "Chirac")
(n5 / name, op, "Popovkin")
(n5 / name, op, "Vladimir")
(n6 / name, op, "Forces")
(n6 / name, op, "Space")
(n7 / name, op, "Russia")
(p / priority, poss, c3 / country)
(p2 / person, name, n3 / name)
(p3 / person, name, n4 / name)
(p4 / person, name, n5 / name)
(r / report-01, ARG0, p4 / person)
(r / report-01, ARG1, 1 / 1)
(r / report-01, ARG2, a / and)
(s2 / say-01, ARG0, p4 / person)
(s2 / say-01, ARG1, i / it)

Decoded in 5,408,199 microseconds
Sentence: France is a leader in the European Space Agency.

NER Entity: (country :name (name :op "France"))
NER Entity: (organization :name (name :op "European" :op "Space" :op "Agency"))
NER Entity: (country :name (name :op "France"))
Spans:
Span 6-9:  European Space Agency => (organization :name (name :op "European" :op "Space" :op "Agency"))
Span 0-1:  France => (country :name (name :op "France"))
Span 3-4:  leader => (person :ARG0-of lead-02)

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,9,List(4, 3, 2, 1, 0),European Space Agency,(organization :name (name :op "European" :op "Space" :op "Agency")),false), Span(3,4,List(6, 5),leader,(person :ARG0-of lead-02),false), Span(0,1,List(9, 8, 7),France,(country :name (name :op "France")),false)),Map(2 -> "European", 5 -> person, 8 -> name, 7 -> country, 1 -> name, 4 -> "Agency", 6 -> lead-02, 9 -> "France", 0 -> organization, 3 -> "Space"),Map(n -> name, p -> person, c -> country, l -> lead-02, o -> organization, n2 -> name))),[Ljava.lang.String;@11900483,Annotation([Ljava.lang.String;@14a049f9,[Ljava.lang.String;@94e51e8,[Ljava.lang.String;@5de6cf3a),Annotation([Ljava.lang.String;@4cc36c19,[Ljava.lang.String;@5a3a1bf9,[Ledu.cmu.lti.nlp.amr.Dependency;@2100d047),Annotation([Ljava.lang.String;@4af45442,[Ljava.lang.String;@1d805aa1,[Ljava.lang.String;@176f7f3b),Annotation([Ljava.lang.String;@30ca0779,[Ljava.lang.String;@58740366,[Ledu.cmu.lti.nlp.amr.Entity;@47be0f9b))
AMR:
(c / country, name, n2 / name)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, o / organization)
(n / name, op, "Agency")
(n / name, op, "European")
(n / name, op, "Space")
(n2 / name, op, "France")
(o / organization, name, n / name)
(p / person, domain, c / country)

Decoded in 73,100 microseconds
Sentence: Chirac's visit has come while the Russian Government has displayed uneasiness about NATO's latest expansion to the Russian borders and the European Union's imminent enlargement within the former Soviet sphere of influence in Eastern Europe.

NER Entity: (person :name (name :op "Chirac"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "European" :op "Union"))
NER Entity: (thing :name (name :op "Soviet"))
NER Entity: (country :name (name :op "Eastern" :op "Europe"))
NER Entity: (thing :name (name :op "Soviet"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (organization :name (name :op "NATO"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Chirac"))
Spans:
Span 12-13:  about => about
Span 21-22:  and => and
Span 20-21:  borders => border
Span 0-1:  Chirac => (person :name (name :op "Chirac"))
Span 4-5:  come => come-01
Span 10-11:  displayed => display-01
Span 36-38:  Eastern Europe => (country :name (name :op "Eastern" :op "Europe"))
Span 27-28:  enlargement => enlarge-01
Span 23-25:  European Union => (organization :name (name :op "European" :op "Union"))
Span 16-17:  expansion => expand-01
Span 30-31:  former => former
Span 8-9:  Government => (government-organization :ARG0-of govern-01)
Span 26-27:  imminent => imminent
Span 34-35:  influence => influence-01
Span 15-16:  latest => (late :degree most)
Span 13-14:  NATO => (military :name (name :op "NATO"))
Span 19-20:  Russian => (country :name (name :op "Russia"))
Span 7-8:  Russian => (country :name (name :op "Russia"))
Span 31-32:  Soviet => "Soviet"
Span 32-33:  sphere => sphere
Span 11-12:  uneasiness => uneasy-41
Span 2-3:  visit => visit-01
Span 28-29:  within => within

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,38,List(3, 2, 1, 0),Eastern Europe,(country :name (name :op "Eastern" :op "Europe")),false), Span(34,35,List(4),influence,influence-01,false), Span(32,33,List(5),sphere,sphere,false), Span(31,32,List(6),Soviet,"Soviet",false), Span(30,31,List(7),former,former,false), Span(28,29,List(8),within,within,false), Span(27,28,List(9),enlargement,enlarge-01,false), Span(26,27,List(10),imminent,imminent,false), Span(23,25,List(14, 13, 12, 11),European Union,(organization :name (name :op "European" :op "Union")),false), Span(21,22,List(15),and,and,false), Span(20,21,List(16),borders,border,false), Span(19,20,List(19, 18, 17),Russian,(country :name (name :op "Russia")),false), Span(16,17,List(20),expansion,expand-01,false), Span(15,16,List(22, 21),latest,(late :degree most),false), Span(13,14,List(25, 24, 23),NATO,(military :name (name :op "NATO")),false), Span(12,13,List(26),about,about,false), Span(11,12,List(27),uneasiness,uneasy-41,false), Span(10,11,List(28),displayed,display-01,false), Span(8,9,List(30, 29),Government,(government-organization :ARG0-of govern-01),false), Span(7,8,List(33, 32, 31),Russian,(country :name (name :op "Russia")),false), Span(4,5,List(34),come,come-01,false), Span(2,3,List(35),visit,visit-01,false), Span(0,1,List(38, 37, 36),Chirac,(person :name (name :op "Chirac")),false)),Map(30 -> govern-01, 2 -> "Eastern", 5 -> sphere, 33 -> "Russia", 27 -> uneasy-41, 12 -> name, 8 -> within, 15 -> and, 36 -> person, 21 -> late, 18 -> name, 24 -> name, 35 -> visit-01, 7 -> former, 1 -> name, 17 -> country, 23 -> military, 38 -> "Chirac", 26 -> about, 4 -> influence-01, 11 -> organization, 32 -> name, 14 -> "Union", 29 -> government-organization, 20 -> expand-01, 34 -> come-01, 28 -> display-01, 6 -> "Soviet", 9 -> enlarge-01, 0 -> country, 22 -> most, 16 -> border, 37 -> name, 19 -> "Russia", 10 -> imminent, 3 -> "Europe", 31 -> country, 25 -> "NATO", 13 -> "European"),Map(S -> "Soviet", e -> enlarge-01, w -> within, n -> name, b -> border, m2 -> military, e2 -> expand-01, c4 -> come-01, n4 -> name, s -> sphere, v -> visit-01, m -> most, d -> display-01, g2 -> govern-01, p -> person, g -> government-organization, a -> and, n3 -> name, c3 -> country, n6 -> name, i2 -> imminent, i -> influence-01, a2 -> about, c -> country, l -> late, u -> uneasy-41, f -> former, o -> organization, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@2bc426f0,Annotation([Ljava.lang.String;@4bd51d3e,[Ljava.lang.String;@33425811,[Ljava.lang.String;@4b74b35),Annotation([Ljava.lang.String;@e4e1ef5,[Ljava.lang.String;@6d11ceef,[Ledu.cmu.lti.nlp.amr.Dependency;@4cb2918c),Annotation([Ljava.lang.String;@72e295cc,[Ljava.lang.String;@c2584d3,[Ljava.lang.String;@6fa0450e),Annotation([Ljava.lang.String;@37468787,[Ljava.lang.String;@51ec2856,[Ledu.cmu.lti.nlp.amr.Entity;@714f3da4))
AMR:
(S / "Soviet", op, v / visit-01)
(a / and, op, e / enlarge-01)
(a / and, op, e2 / expand-01)
(a2 / about, op, e2 / expand-01)
(b / border, direction, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n5 / name)
(c4 / come-01, ARG1, v / visit-01)
(d / display-01, ARG0, g / government-organization)
(d / display-01, ARG1, u / uneasy-41)
(e / enlarge-01, ARG1, o / organization)
(e / enlarge-01, ARG2, w / within)
(e / enlarge-01, mod, i2 / imminent)
(e2 / expand-01, ARG1, m2 / military)
(e2 / expand-01, ARG2, b / border)
(e2 / expand-01, time, l / late)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(i / influence-01, ARG1, s / sphere)
(l / late, degree, m / most)
(m2 / military, name, n4 / name)
(n / name, op, "Eastern")
(n / name, op, "Europe")
(n2 / name, op, "European")
(n2 / name, op, "Union")
(n3 / name, op, "Russia")
(n4 / name, op, "NATO")
(n5 / name, op, "Russia")
(n6 / name, op, "Chirac")
(o / organization, name, n2 / name)
(p / person, name, n6 / name)
(s / sphere, location, c / country)
(u / uneasy-41, ARG1, g / government-organization)
(u / uneasy-41, ARG2, a / and)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, f / former)
(v / visit-01, time, d / display-01)
(w / within, op, s / sphere)

Decoded in 3,146,008 microseconds
Sentence: At the press conference following the meeting Putin said that Russia's activities in defending national security are non-aggressive and not targeted against anyone.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 12-13:  activities => activity
Span 20-21:  aggressive => aggressive
Span 21-22:  and => and
Span 25-26:  anyone => anyone
Span 3-4:  conference => conference
Span 14-15:  defending => defend-01
Span 4-5:  following => follow-01
Span 6-7:  meeting => meet-03
Span 15-16:  national => nation
Span 2-3:  press => press
Span 7-8:  Putin => (person :name (name :op "Putin"))
Span 10-11:  Russia => (country :name (name :op "Russia"))
Span 8-9:  said => say-01
Span 16-17:  security => security
Span 23-24:  targeted => target-01

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),anyone,anyone,false), Span(23,24,List(1),targeted,target-01,false), Span(21,22,List(2),and,and,false), Span(20,21,List(3),aggressive,aggressive,false), Span(16,17,List(4),security,security,false), Span(15,16,List(5),national,nation,false), Span(14,15,List(6),defending,defend-01,false), Span(12,13,List(7),activities,activity,false), Span(10,11,List(10, 9, 8),Russia,(country :name (name :op "Russia")),false), Span(8,9,List(11),said,say-01,false), Span(7,8,List(14, 13, 12),Putin,(person :name (name :op "Putin")),false), Span(6,7,List(15),meeting,meet-03,false), Span(4,5,List(16),following,follow-01,false), Span(3,4,List(17),conference,conference,false), Span(2,3,List(18),press,press,false)),Map(2 -> and, 5 -> nation, 12 -> person, 15 -> meet-03, 8 -> country, 18 -> press, 7 -> activity, 17 -> conference, 1 -> target-01, 4 -> security, 11 -> say-01, 14 -> "Putin", 6 -> defend-01, 0 -> anyone, 9 -> name, 16 -> follow-01, 3 -> aggressive, 10 -> "Russia", 13 -> name),Map(n -> nation, s2 -> say-01, t -> target-01, p2 -> press, a3 -> aggressive, s -> security, m -> meet-03, d -> defend-01, p -> person, a -> anyone, n3 -> name, a2 -> and, c -> country, f -> follow-01, c2 -> conference, n2 -> name, a4 -> activity))),[Ljava.lang.String;@1caa9eb6,Annotation([Ljava.lang.String;@1f53481b,[Ljava.lang.String;@2fcd7d3f,[Ljava.lang.String;@27e7c77f),Annotation([Ljava.lang.String;@6f70a21b,[Ljava.lang.String;@6ae62c7e,[Ledu.cmu.lti.nlp.amr.Dependency;@2e869098),Annotation([Ljava.lang.String;@37c36608,[Ljava.lang.String;@5d497a91,[Ljava.lang.String;@617389a),Annotation([Ljava.lang.String;@1c8f6a90,[Ljava.lang.String;@3050ac2f,[Ledu.cmu.lti.nlp.amr.Entity;@265bd546))
AMR:
(a2 / and, domain, a4 / activity)
(a2 / and, op, a3 / aggressive)
(a2 / and, op, t / target-01)
(a4 / activity, poss, c / country)
(a4 / activity, purpose, d / defend-01)
(c / country, name, n2 / name)
(c2 / conference, mod, p2 / press)
(d / defend-01, ARG1, s / security)
(f / follow-01, ARG1, c2 / conference)
(f / follow-01, ARG2, m / meet-03)
(n2 / name, op, "Russia")
(n3 / name, op, "Putin")
(p / person, name, n3 / name)
(s / security, mod, n / nation)
(s2 / say-01, ARG0, p / person)
(s2 / say-01, ARG1, a2 / and)
(s2 / say-01, time, c2 / conference)
(t / target-01, prep-against, a / anyone)

Decoded in 255,589 microseconds
Sentence: The Titov space center is a military facility and is run by Russian space forces and operates under tight security.

NER Entity: (person :name (name :op "Titov"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Titov"))
Spans:
Span 15-16:  and => and
Span 8-9:  and => and
Span 3-4:  center => center
Span 7-8:  facility => facility
Span 6-7:  military => military
Span 16-17:  operates => operate-01
Span 10-11:  run => run-01
Span 12-15:  Russian space forces => (organization :name (name :op "Forces" :op "Space" :op "Russian"))
Span 19-20:  security => security
Span 2-3:  space => space
Span 18-19:  tight => tight
Span 1-2:  Titov => (name :op "Titov")

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),security,security,false), Span(18,19,List(1),tight,tight,false), Span(16,17,List(2),operates,operate-01,false), Span(15,16,List(3),and,and,false), Span(12,15,List(8, 7, 6, 5, 4),Russian space forces,(organization :name (name :op "Forces" :op "Space" :op "Russian")),false), Span(10,11,List(9),run,run-01,false), Span(8,9,List(10),and,and,false), Span(7,8,List(11),facility,facility,false), Span(6,7,List(12),military,military,false), Span(3,4,List(13),center,center,false), Span(2,3,List(14),space,space,false), Span(1,2,List(16, 15),Titov,(name :op "Titov"),false)),Map(2 -> operate-01, 5 -> name, 12 -> military, 15 -> name, 8 -> "Russian", 7 -> "Space", 1 -> tight, 4 -> organization, 11 -> facility, 14 -> space, 6 -> "Forces", 0 -> security, 9 -> run-01, 16 -> "Titov", 3 -> and, 10 -> and, 13 -> center),Map(n -> name, s2 -> space, t -> tight, s -> security, m -> military, a -> and, o2 -> organization, r -> run-01, a2 -> and, c -> center, f -> facility, o -> operate-01, n2 -> name))),[Ljava.lang.String;@1937eaff,Annotation([Ljava.lang.String;@7e0bc8a3,[Ljava.lang.String;@4b0f2299,[Ljava.lang.String;@33063f5b),Annotation([Ljava.lang.String;@15405bd6,[Ljava.lang.String;@352ed70d,[Ledu.cmu.lti.nlp.amr.Dependency;@70730db),Annotation([Ljava.lang.String;@5793b87,[Ljava.lang.String;@12704e15,[Ljava.lang.String;@512575e9),Annotation([Ljava.lang.String;@6f1a16fe,[Ljava.lang.String;@2373ad99,[Ledu.cmu.lti.nlp.amr.Entity;@33634f04))
AMR:
(a / and, op, o / operate-01)
(a2 / and, op, o / operate-01)
(a2 / and, op, r / run-01)
(c / center, mod, s2 / space)
(c / center, name, n2 / name)
(f / facility, domain, c / center)
(f / facility, mod, m / military)
(n / name, op, "Forces")
(n / name, op, "Russian")
(n / name, op, "Space")
(n2 / name, op, "Titov")
(o / operate-01, ARG1, c / center)
(o / operate-01, manner, s / security)
(o2 / organization, name, n / name)
(r / run-01, ARG0, o2 / organization)
(r / run-01, ARG1, c / center)
(s / security, mod, t / tight)

Decoded in 383,344 microseconds
Sentence: Putin said Chirac's visit there indicated that Russia is developing the most advanced systems of weapons but finds it possible to acquaint its French partners with these projects.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (person :name (name :op "Chirac"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 22-23:  acquaint => acquaint-01
Span 13-14:  advanced => advance-01
Span 17-18:  but => contrast-01
Span 2-3:  Chirac => (person :name (name :op "Chirac"))
Span 10-11:  developing => develop-02
Span 18-19:  finds => find-02
Span 24-25:  French => (country :name (name :op "France"))
Span 6-7:  indicated => indicate-01
Span 19-20:  it => it
Span 12-13:  most => most
Span 25-26:  partners => partner-01
Span 20-21:  possible => possible
Span 28-29:  projects => project
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 8-9:  Russia => (country :name (name :op "Russia"))
Span 1-2:  said => say-01
Span 14-15:  systems => system
Span 4-5:  visit => visit-01
Span 16-17:  weapons => weapon

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),projects,project,false), Span(25,26,List(1),partners,partner-01,false), Span(24,25,List(4, 3, 2),French,(country :name (name :op "France")),false), Span(22,23,List(5),acquaint,acquaint-01,false), Span(20,21,List(6),possible,possible,false), Span(19,20,List(7),it,it,false), Span(18,19,List(8),finds,find-02,false), Span(17,18,List(9),but,contrast-01,false), Span(16,17,List(10),weapons,weapon,false), Span(14,15,List(11),systems,system,false), Span(13,14,List(12),advanced,advance-01,false), Span(12,13,List(13),most,most,false), Span(10,11,List(14),developing,develop-02,false), Span(8,9,List(17, 16, 15),Russia,(country :name (name :op "Russia")),false), Span(6,7,List(18),indicated,indicate-01,false), Span(4,5,List(19),visit,visit-01,false), Span(2,3,List(22, 21, 20),Chirac,(person :name (name :op "Chirac")),false), Span(1,2,List(23),said,say-01,false), Span(0,1,List(26, 25, 24),Putin,(person :name (name :op "Putin")),false)),Map(2 -> country, 5 -> acquaint-01, 12 -> advance-01, 8 -> find-02, 15 -> country, 21 -> name, 18 -> indicate-01, 24 -> person, 7 -> it, 1 -> partner-01, 17 -> "Russia", 23 -> say-01, 26 -> "Putin", 4 -> "France", 11 -> system, 14 -> develop-02, 20 -> person, 6 -> possible, 9 -> contrast-01, 0 -> project, 22 -> "Chirac", 16 -> name, 19 -> visit-01, 10 -> weapon, 3 -> name, 25 -> name, 13 -> most),Map(n -> name, w -> weapon, p5 -> person, s2 -> say-01, p2 -> partner-01, n4 -> name, s -> system, v -> visit-01, d -> develop-02, m -> most, p -> project, n3 -> name, c3 -> country, a -> acquaint-01, p4 -> person, i2 -> indicate-01, i -> it, a2 -> advance-01, c -> country, f -> find-02, p3 -> possible, n2 -> name, c2 -> contrast-01))),[Ljava.lang.String;@4993febc,Annotation([Ljava.lang.String;@7601bc96,[Ljava.lang.String;@48a0c8aa,[Ljava.lang.String;@6192a5d5),Annotation([Ljava.lang.String;@3722c145,[Ljava.lang.String;@4cbc2e3b,[Ledu.cmu.lti.nlp.amr.Dependency;@2975a9e),Annotation([Ljava.lang.String;@765ffb14,[Ljava.lang.String;@57562473,[Ljava.lang.String;@7a360554),Annotation([Ljava.lang.String;@424de326,[Ljava.lang.String;@4bc33720,[Ledu.cmu.lti.nlp.amr.Entity;@2dd0f797))
AMR:
(a / acquaint-01, ARG1, p2 / partner-01)
(a / acquaint-01, ARG2, p / project)
(a2 / advance-01, ARG1, w / weapon)
(a2 / advance-01, degree, m / most)
(c / country, name, n / name)
(c2 / contrast-01, ARG1, d / develop-02)
(c2 / contrast-01, ARG2, f / find-02)
(c3 / country, name, n2 / name)
(d / develop-02, ARG0, c3 / country)
(d / develop-02, ARG1, s / system)
(f / find-02, ARG0, c3 / country)
(f / find-02, ARG1, p3 / possible)
(i2 / indicate-01, ARG0, v / visit-01)
(i2 / indicate-01, ARG1, c2 / contrast-01)
(n / name, op, "France")
(n2 / name, op, "Russia")
(n3 / name, op, "Chirac")
(n4 / name, op, "Putin")
(p2 / partner-01, ARG1, c / country)
(p3 / possible, domain, a / acquaint-01)
(p3 / possible, domain, i / it)
(p4 / person, name, n3 / name)
(p5 / person, name, n4 / name)
(s / system, mod, w / weapon)
(s2 / say-01, ARG0, p5 / person)
(s2 / say-01, ARG1, v / visit-01)
(v / visit-01, ARG0, p4 / person)

Decoded in 1,030,683 microseconds
Sentence: Putin stressed that this points to Russia's transparency and openness in security matters.

NER Entity: (person :name (name :op "Putin"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (country :name (name :op "Russia"))
NER Entity: (person :name (name :op "Putin"))
Spans:
Span 9-10:  and => and
Span 13-14:  matters => matter
Span 10-11:  openness => open-01
Span 4-5:  points => point
Span 0-1:  Putin => (person :name (name :op "Putin"))
Span 6-7:  Russia => (country :name (name :op "Russia"))
Span 12-13:  security => security
Span 1-2:  stressed => stress-01
Span 3-4:  this => this
Span 8-9:  transparency => transparent

Langrangian relaxation converged after 11 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,14,List(0),matters,matter,false), Span(12,13,List(1),security,security,false), Span(10,11,List(2),openness,open-01,false), Span(9,10,List(3),and,and,false), Span(8,9,List(4),transparency,transparent,false), Span(6,7,List(7, 6, 5),Russia,(country :name (name :op "Russia")),false), Span(4,5,List(8),points,point,false), Span(3,4,List(9),this,this,false), Span(1,2,List(10),stressed,stress-01,false), Span(0,1,List(13, 12, 11),Putin,(person :name (name :op "Putin")),false)),Map(2 -> open-01, 5 -> country, 12 -> name, 8 -> point, 7 -> "Russia", 1 -> security, 4 -> transparent, 11 -> person, 6 -> name, 0 -> matter, 9 -> this, 3 -> and, 10 -> stress-01, 13 -> "Putin"),Map(n -> name, s2 -> stress-01, t -> transparent, p2 -> person, s -> security, m -> matter, p -> point, a -> and, t2 -> this, c -> country, o -> open-01, n2 -> name))),[Ljava.lang.String;@67064bdc,Annotation([Ljava.lang.String;@4a7fd0c9,[Ljava.lang.String;@18578491,[Ljava.lang.String;@3291b443),Annotation([Ljava.lang.String;@671c4166,[Ljava.lang.String;@53d13cd4,[Ledu.cmu.lti.nlp.amr.Dependency;@77865933),Annotation([Ljava.lang.String;@480ad82c,[Ljava.lang.String;@4d18b73a,[Ljava.lang.String;@177515d1),Annotation([Ljava.lang.String;@52ff99cd,[Ljava.lang.String;@4c2af006,[Ledu.cmu.lti.nlp.amr.Entity;@44032fde))
AMR:
(a / and, op, o / open-01)
(a / and, op, t / transparent)
(c / country, name, n / name)
(m / matter, mod, s / security)
(n / name, op, "Russia")
(n2 / name, op, "Putin")
(o / open-01, ARG1, m / matter)
(p / point, mod, t2 / this)
(p / point, prep-to, a / and)
(p2 / person, name, n2 / name)
(s2 / stress-01, ARG0, p2 / person)
(s2 / stress-01, ARG1, p / point)
(t / transparent, poss, c / country)

Decoded in 177,463 microseconds
Sentence: 2004-04-07

mkDayMonthYear(2004-04-07,07,04,2004)
mkDayMonthYear(2004-04-07,07,04,2004)
Spans:
Span 0-1:  2004-04-07 => (date-entity :day 7 :month 4 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-04-07,(date-entity :day 7 :month 4 :year 2004),false)),Map(2 -> 4, 1 -> 7, 0 -> date-entity, 3 -> 2004),Map(2 -> 2004, 7 -> 7, d -> date-entity, 4 -> 4))),[Ljava.lang.String;@7b676112,Annotation([Ljava.lang.String;@5578be42,[Ljava.lang.String;@4e49ce2b,[Ljava.lang.String;@136965e3),Annotation([Ljava.lang.String;@53c6f96d,[Ljava.lang.String;@435cc7f9,[Ledu.cmu.lti.nlp.amr.Dependency;@4364712f),Annotation([Ljava.lang.String;@1b7a52dd,[Ljava.lang.String;@7f93dd4e,[Ljava.lang.String;@5ad5be4a),Annotation([Ljava.lang.String;@3ad85136,[Ljava.lang.String;@737d100a,[Ledu.cmu.lti.nlp.amr.Entity;@12e5da86))
AMR:
(d / date-entity, day, 7 / 7)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)

Decoded in 6,883 microseconds
Sentence: Philippines (PH)

NER Entity: (country :name (name :op "Philippines"))
NER Entity: (country :name (name :op "Philippines"))
Spans:
Span 0-1:  Philippines => (country :name (name :op "Philippines"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(2, 1, 0),Philippines,(country :name (name :op "Philippines")),false)),Map(2 -> "Philippines", 1 -> name, 0 -> country),Map(n -> name, c -> country))),[Ljava.lang.String;@6535117e,Annotation([Ljava.lang.String;@1d1cbd0f,[Ljava.lang.String;@6fa13e6,[Ljava.lang.String;@3af7d855),Annotation([Ljava.lang.String;@77049094,[Ljava.lang.String;@f88bfbe,[Ledu.cmu.lti.nlp.amr.Dependency;@59bbe88a),Annotation([Ljava.lang.String;@5d8ab698,[Ljava.lang.String;@ed91d8d,[Ljava.lang.String;@446626a7),Annotation([Ljava.lang.String;@429f7919,[Ljava.lang.String;@4a2929a4,[Ledu.cmu.lti.nlp.amr.Entity;@cda6019))
AMR:
(c / country, name, n / name)
(n / name, op, "Philippines")

Decoded in 4,842 microseconds
Sentence: International; terrorism; media

Spans:
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 0-1:  International => international
Span 4-5:  media => media
Span 2-3:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(4,5,List(0),media,media,false), Span(3,4,List(1),;,and,false), Span(2,3,List(2),terrorism,terrorism,false), Span(1,2,List(3),;,and,false), Span(0,1,List(4),International,international,false)),Map(2 -> terrorism, 1 -> and, 4 -> international, 0 -> media, 3 -> and),Map(t -> terrorism, m -> media, a -> and, i -> international, a2 -> and))),[Ljava.lang.String;@797c3c3b,Annotation([Ljava.lang.String;@4012d5bc,[Ljava.lang.String;@4375b013,[Ljava.lang.String;@1cf0cacc),Annotation([Ljava.lang.String;@4f5b08d,[Ljava.lang.String;@529c2a9a,[Ledu.cmu.lti.nlp.amr.Dependency;@3c87fdf2),Annotation([Ljava.lang.String;@26bbe604,[Ljava.lang.String;@fe34b86,[Ljava.lang.String;@3c98781a),Annotation([Ljava.lang.String;@3f736a16,[Ljava.lang.String;@4601203a,[Ledu.cmu.lti.nlp.amr.Entity;@53abfc07))
AMR:
(a / and, op, t / terrorism)
(a2 / and, op, a / and)
(a2 / and, op, i / international)
(a2 / and, op, m / media)

Decoded in 12,418 microseconds
Sentence: Philippine Immigrations Bureau's record showed that two high-profiled terrorist suspects had most likely been staying in the Philippines.

NER Entity: (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
NER Entity: (country :name (name :op "Philippines"))
Spans:
Span 8-9:  high => high
Span 15-16:  likely => likely
Span 14-15:  most => most
Span 0-3:  Philippine Immigrations Bureau => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Span 20-21:  Philippines => (country :name (name :op "Philippines"))
Span 10-11:  profiled => profile
Span 4-5:  record => record
Span 5-6:  showed => show-01
Span 17-18:  staying => stay-01
Span 12-13:  suspects => (person :ARG2-of suspect-01)
Span 11-12:  terrorist => terrorist
Span 7-8:  two => 2

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(2, 1, 0),Philippines,(country :name (name :op "Philippines")),false), Span(17,18,List(3),staying,stay-01,false), Span(15,16,List(4),likely,likely,false), Span(14,15,List(5),most,most,false), Span(12,13,List(7, 6),suspects,(person :ARG2-of suspect-01),false), Span(11,12,List(8),terrorist,terrorist,false), Span(10,11,List(9),profiled,profile,false), Span(8,9,List(10),high,high,false), Span(7,8,List(11),two,2,false), Span(5,6,List(12),showed,show-01,false), Span(4,5,List(13),record,record,false), Span(0,3,List(18, 17, 16, 15, 14),Philippine Immigrations Bureau,(organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau")),false)),Map(2 -> "Philippines", 5 -> most, 12 -> show-01, 15 -> name, 8 -> terrorist, 18 -> "Bureau", 7 -> suspect-01, 17 -> "Immigrations", 1 -> name, 4 -> likely, 11 -> 2, 14 -> organization, 6 -> person, 0 -> country, 9 -> profile, 16 -> "Philippine", 3 -> stay-01, 10 -> high, 13 -> record),Map(n -> name, h -> high, 2 -> 2, s2 -> suspect-01, t -> terrorist, p2 -> profile, s -> stay-01, m -> most, p -> person, r -> record, c -> country, s3 -> show-01, l -> likely, o -> organization, n2 -> name))),[Ljava.lang.String;@2c8c16c0,Annotation([Ljava.lang.String;@80bfa9d,[Ljava.lang.String;@47c40b56,[Ljava.lang.String;@4b039c6d),Annotation([Ljava.lang.String;@7f5b9db,[Ljava.lang.String;@507d64aa,[Ledu.cmu.lti.nlp.amr.Dependency;@37045b48),Annotation([Ljava.lang.String;@60b34931,[Ljava.lang.String;@4aa21f9d,[Ljava.lang.String;@71c17a57),Annotation([Ljava.lang.String;@640ab13c,[Ljava.lang.String;@1e0a864d,[Ledu.cmu.lti.nlp.amr.Entity;@440e3ce6))
AMR:
(c / country, name, n / name)
(l / likely, degree, m / most)
(l / likely, domain, s / stay-01)
(n / name, op, "Philippines")
(n2 / name, op, "Bureau")
(n2 / name, op, "Immigrations")
(n2 / name, op, "Philippine")
(o / organization, mod, c / country)
(o / organization, name, n2 / name)
(p / person, quant, 2 / 2)
(p2 / profile, mod, h / high)
(r / record, source, o / organization)
(s / stay-01, ARG1, p / person)
(s2 / suspect-01, ARG1, t / terrorist)
(s2 / suspect-01, ARG2, p / person)
(s3 / show-01, ARG0, r / record)
(s3 / show-01, ARG1, l / likely)
(t / terrorist, mod, p2 / profile)

Decoded in 121,858 microseconds
Sentence: ABS-CBN news channel reported on April 7, 2004 that the Philippine Immigrations Bureau's record showed that at least 2 high-profiled terrorist suspects had most likely been staying in the country.

NER Entity: (organization :name (name :op "ABS" :op "-" :op "CBN"))
mkDayMonthYear(April	7	,	2004,7,April,2004)
NER Entity: (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Spans:
Span 22-23:  2 => 2
Span 0-3:  ABS - CBN => (name :op "ABS-CBN")
Span 7-11:  April 7 , 2004 => (date-entity :day 7 :month 4 :year 2004)
Span 4-5:  channel => channel
Span 35-36:  country => country
Span 23-24:  high => high
Span 14-16:  Immigrations Bureau => (organization :name (name :op "Bureau" :op "Immigrations"))
Span 30-31:  likely => likely
Span 29-30:  most => most
Span 3-4:  news => news
Span 25-26:  profiled => profile
Span 17-18:  record => record
Span 5-6:  reported => report-01
Span 18-19:  showed => show-01
Span 32-33:  staying => stay-01
Span 27-28:  suspects => (person :ARG2-of suspect-01)
Span 26-27:  terrorist => terrorist
Span 11-14:  that the Philippine => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),country,country,false), Span(32,33,List(1),staying,stay-01,false), Span(30,31,List(2),likely,likely,false), Span(29,30,List(3),most,most,false), Span(27,28,List(5, 4),suspects,(person :ARG2-of suspect-01),false), Span(26,27,List(6),terrorist,terrorist,false), Span(25,26,List(7),profiled,profile,false), Span(23,24,List(8),high,high,false), Span(22,23,List(9),2,2,false), Span(18,19,List(10),showed,show-01,false), Span(17,18,List(11),record,record,false), Span(14,16,List(15, 14, 13, 12),Immigrations Bureau,(organization :name (name :op "Bureau" :op "Immigrations")),false), Span(11,14,List(20, 19, 18, 17, 16),that the Philippine,(organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau")),false), Span(7,11,List(24, 23, 22, 21),April 7 , 2004,(date-entity :day 7 :month 4 :year 2004),false), Span(5,6,List(25),reported,report-01,false), Span(4,5,List(26),channel,channel,false), Span(3,4,List(27),news,news,false), Span(0,3,List(29, 28),ABS - CBN,(name :op "ABS-CBN"),false)),Map(2 -> likely, 5 -> suspect-01, 27 -> news, 12 -> organization, 8 -> high, 15 -> "Immigrations", 21 -> date-entity, 18 -> "Philippine", 24 -> 2004, 7 -> profile, 1 -> stay-01, 17 -> name, 23 -> 4, 26 -> channel, 4 -> person, 11 -> record, 14 -> "Bureau", 29 -> "ABS-CBN", 20 -> "Bureau", 28 -> name, 6 -> terrorist, 9 -> 2, 0 -> country, 22 -> 7, 16 -> organization, 19 -> "Immigrations", 10 -> show-01, 3 -> most, 25 -> report-01, 13 -> name),Map(n -> name, h -> high, 2 -> 2, s2 -> suspect-01, t -> terrorist, p2 -> profile, n4 -> name, s -> stay-01, 7 -> 7, d -> date-entity, m -> most, r2 -> report-01, p -> person, n3 -> news, 4 -> 4, o2 -> organization, r -> record, c -> country, s3 -> show-01, l -> likely, 22 -> 2004, o -> organization, c2 -> channel, n2 -> name))),[Ljava.lang.String;@3e67f5f2,Annotation([Ljava.lang.String;@fd53053,[Ljava.lang.String;@4527f70a,[Ljava.lang.String;@707b1a44),Annotation([Ljava.lang.String;@7132a9dc,[Ljava.lang.String;@57435801,[Ledu.cmu.lti.nlp.amr.Dependency;@2da66a44),Annotation([Ljava.lang.String;@527fc8e,[Ljava.lang.String;@61bfc9bf,[Ljava.lang.String;@2c7106d9),Annotation([Ljava.lang.String;@329bad59,[Ljava.lang.String;@862f408,[Ledu.cmu.lti.nlp.amr.Entity;@178f268a))
AMR:
(2 / 2, mod, n3 / news)
(c2 / channel, mod, n3 / news)
(c2 / channel, name, n4 / name)
(d / date-entity, day, 7 / 7)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 22 / 2004)
(l / likely, degree, m / most)
(l / likely, domain, s / stay-01)
(n / name, op, "Bureau")
(n / name, op, "Immigrations")
(n2 / name, op, "Bureau")
(n2 / name, op, "Immigrations")
(n2 / name, op, "Philippine")
(n4 / name, op, "ABS-CBN")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(o2 / organization, op, s3 / show-01)
(p2 / profile, mod, h / high)
(r / record, source, o / organization)
(r2 / report-01, ARG0, c2 / channel)
(r2 / report-01, ARG1, s3 / show-01)
(r2 / report-01, time, d / date-entity)
(s / stay-01, ARG1, p / person)
(s / stay-01, location, c / country)
(s2 / suspect-01, ARG1, t / terrorist)
(s2 / suspect-01, ARG2, p / person)
(s2 / suspect-01, mod, p2 / profile)
(s3 / show-01, ARG0, r / record)
(s3 / show-01, ARG1, l / likely)

Decoded in 1,684,252 microseconds
Sentence: ABS-CBN News Channel stated that one of the two suspects was identified as Isamudin Raduan Hambali.

NER Entity: (organization :name (name :op "ABS" :op "-" :op "CBN" :op "News" :op "Channel"))
NER Entity: (person :name (name :op "Isamudin" :op "Raduan" :op "Hambali"))
NER Entity: (person :name (name :op "Isamudin" :op "Raduan" :op "Hambali"))
Spans:
Span 0-3:  ABS - CBN => (name :op "ABS-CBN")
Span 4-5:  Channel => channel
Span 13-14:  identified => identify-01
Span 15-18:  Isamudin Raduan Hambali => (person :name (name :op "Hambali" :op "Raduan" :op "Isamudin"))
Span 3-4:  News => news
Span 7-8:  one => 1
Span 5-6:  stated => state-01
Span 11-12:  suspects => (person :ARG2-of suspect-01)
Span 10-11:  two => 2

Langrangian relaxation converged after 42 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,18,List(4, 3, 2, 1, 0),Isamudin Raduan Hambali,(person :name (name :op "Hambali" :op "Raduan" :op "Isamudin")),false), Span(13,14,List(5),identified,identify-01,false), Span(11,12,List(7, 6),suspects,(person :ARG2-of suspect-01),false), Span(10,11,List(8),two,2,false), Span(7,8,List(9),one,1,false), Span(5,6,List(10),stated,state-01,false), Span(4,5,List(11),Channel,channel,false), Span(3,4,List(12),News,news,false), Span(0,3,List(14, 13),ABS - CBN,(name :op "ABS-CBN"),false)),Map(2 -> "Hambali", 5 -> identify-01, 12 -> news, 8 -> 2, 7 -> suspect-01, 1 -> name, 4 -> "Isamudin", 11 -> channel, 14 -> "ABS-CBN", 6 -> person, 0 -> person, 9 -> 1, 3 -> "Raduan", 10 -> state-01, 13 -> name),Map(n -> name, 2 -> 2, s2 -> state-01, p2 -> person, s -> suspect-01, 1 -> 1, p -> person, n3 -> name, i -> identify-01, c -> channel, n2 -> news))),[Ljava.lang.String;@33ecbd6c,Annotation([Ljava.lang.String;@5c723f2d,[Ljava.lang.String;@432f521f,[Ljava.lang.String;@2d7a9786),Annotation([Ljava.lang.String;@7bab5898,[Ljava.lang.String;@366d8b97,[Ledu.cmu.lti.nlp.amr.Dependency;@feb98ef),Annotation([Ljava.lang.String;@7654f833,[Ljava.lang.String;@571a01f9,[Ljava.lang.String;@d7109be),Annotation([Ljava.lang.String;@5e0ec41f,[Ljava.lang.String;@f4a3a8d,[Ledu.cmu.lti.nlp.amr.Entity;@8d8f754))
AMR:
(c / channel, mod, n2 / news)
(c / channel, name, n3 / name)
(i / identify-01, ARG1, p / person)
(n / name, op, "Hambali")
(n / name, op, "Isamudin")
(n / name, op, "Raduan")
(n3 / name, op, "ABS-CBN")
(p / person, name, n / name)
(p / person, quant, 1 / 1)
(p2 / person, quant, 1 / 1)
(p2 / person, quant, 2 / 2)
(s / suspect-01, ARG2, p2 / person)
(s2 / state-01, ARG0, c / channel)
(s2 / state-01, ARG1, i / identify-01)

Decoded in 483,632 microseconds
Sentence: Hambali was allegedly the mastermind of the Bali bombings in 2002.

NER Entity: (person :name (name :op "Hambali"))
NER Entity: (country :name (name :op "Bali"))
NER Entity: (country :name (name :op "Bali"))
NER Entity: (person :name (name :op "Hambali"))
Spans:
Span 10-11:  2002 => (date-entity :year 2002)
Span 2-3:  allegedly => allege-01
Span 7-8:  Bali => (island :name (name :op "Bali"))
Span 8-9:  bombings => bomb-01
Span 0-1:  Hambali => (person :name (name :op "Hambali"))
Span 4-5:  mastermind => mastermind-01

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),2002,(date-entity :year 2002),false), Span(8,9,List(2),bombings,bomb-01,false), Span(7,8,List(5, 4, 3),Bali,(island :name (name :op "Bali")),false), Span(4,5,List(6),mastermind,mastermind-01,false), Span(2,3,List(7),allegedly,allege-01,false), Span(0,1,List(10, 9, 8),Hambali,(person :name (name :op "Hambali")),false)),Map(2 -> bomb-01, 5 -> "Bali", 8 -> person, 7 -> allege-01, 1 -> 2002, 4 -> name, 6 -> mastermind-01, 9 -> name, 0 -> date-entity, 10 -> "Hambali", 3 -> island),Map(n -> name, 2 -> 2002, b -> bomb-01, m -> mastermind-01, d -> date-entity, p -> person, a -> allege-01, i -> island, n2 -> name))),[Ljava.lang.String;@d613308,Annotation([Ljava.lang.String;@25673087,[Ljava.lang.String;@7b27e8f4,[Ljava.lang.String;@348ad293),Annotation([Ljava.lang.String;@30f74e79,[Ljava.lang.String;@2c88a3e8,[Ledu.cmu.lti.nlp.amr.Dependency;@68ac9ec5),Annotation([Ljava.lang.String;@a50d709,[Ljava.lang.String;@5ed4bc,[Ljava.lang.String;@6920b0bc),Annotation([Ljava.lang.String;@65f651eb,[Ljava.lang.String;@69923ac3,[Ledu.cmu.lti.nlp.amr.Entity;@1f1ff879))
AMR:
(a / allege-01, ARG1, m / mastermind-01)
(b / bomb-01, ARG1, i / island)
(b / bomb-01, time, d / date-entity)
(d / date-entity, year, 2 / 2002)
(i / island, name, n / name)
(m / mastermind-01, ARG0, p / person)
(m / mastermind-01, ARG1, b / bomb-01)
(n / name, op, "Bali")
(n2 / name, op, "Hambali")
(p / person, name, n2 / name)

Decoded in 84,986 microseconds
Sentence: The Philippine Immigrations Bureau record showed Hambali was allowed to enter and leave the Philippines in 2001.

NER Entity: (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
NER Entity: (person :name (name :op "Hambali"))
NER Entity: (country :name (name :op "Philippines"))
NER Entity: (country :name (name :op "Philippines"))
NER Entity: (person :name (name :op "Hambali"))
Spans:
Span 16-17:  2001 => (date-entity :year 2001)
Span 8-9:  allowed => allow-01
Span 11-12:  and => and
Span 10-11:  enter => enter-01
Span 6-7:  Hambali => (person :name (name :op "Hambali"))
Span 12-13:  leave => leave-01
Span 1-4:  Philippine Immigrations Bureau => (organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau"))
Span 14-15:  Philippines => (country :name (name :op "Philippines"))
Span 4-5:  record => record
Span 5-6:  showed => show-01

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(1, 0),2001,(date-entity :year 2001),false), Span(14,15,List(4, 3, 2),Philippines,(country :name (name :op "Philippines")),false), Span(12,13,List(5),leave,leave-01,false), Span(11,12,List(6),and,and,false), Span(10,11,List(7),enter,enter-01,false), Span(8,9,List(8),allowed,allow-01,false), Span(6,7,List(11, 10, 9),Hambali,(person :name (name :op "Hambali")),false), Span(5,6,List(12),showed,show-01,false), Span(4,5,List(13),record,record,false), Span(1,4,List(18, 17, 16, 15, 14),Philippine Immigrations Bureau,(organization :name (name :op "Philippine" :op "Immigrations" :op "Bureau")),false)),Map(2 -> country, 5 -> leave-01, 12 -> show-01, 15 -> name, 8 -> allow-01, 18 -> "Bureau", 7 -> enter-01, 17 -> "Immigrations", 1 -> 2001, 4 -> "Philippines", 11 -> "Hambali", 14 -> organization, 6 -> and, 0 -> date-entity, 9 -> person, 16 -> "Philippine", 3 -> name, 10 -> name, 13 -> record),Map(e -> enter-01, n -> name, 2 -> 2001, s -> show-01, d -> date-entity, p -> person, n3 -> name, a -> and, a2 -> allow-01, r -> record, c -> country, l -> leave-01, o -> organization, n2 -> name))),[Ljava.lang.String;@73d60e76,Annotation([Ljava.lang.String;@24f870ee,[Ljava.lang.String;@5c441290,[Ljava.lang.String;@3c78e551),Annotation([Ljava.lang.String;@7f1ef916,[Ljava.lang.String;@1886991b,[Ledu.cmu.lti.nlp.amr.Dependency;@64aad809),Annotation([Ljava.lang.String;@1f03fba0,[Ljava.lang.String;@17dd671f,[Ljava.lang.String;@3bbf6abe),Annotation([Ljava.lang.String;@9679750,[Ljava.lang.String;@9b9a327,[Ledu.cmu.lti.nlp.amr.Entity;@75a0c890))
AMR:
(a / and, op, e / enter-01)
(a / and, time, d / date-entity)
(a2 / allow-01, ARG1, a / and)
(c / country, name, n / name)
(d / date-entity, year, 2 / 2001)
(e / enter-01, ARG0, p / person)
(e / enter-01, ARG1, c / country)
(l / leave-01, ARG0, p / person)
(l / leave-01, ARG1, c / country)
(n / name, op, "Philippines")
(n2 / name, op, "Hambali")
(n3 / name, op, "Bureau")
(n3 / name, op, "Immigrations")
(n3 / name, op, "Philippine")
(o / organization, name, n3 / name)
(p / person, name, n2 / name)
(r / record, mod, o / organization)
(s / show-01, ARG0, r / record)
(s / show-01, ARG1, a2 / allow-01)

Decoded in 665,007 microseconds
Sentence: Hambali was blacklisted as the most wanted terrorist in Asia.

NER Entity: (person :name (name :op "Hambali"))
NER Entity: (country :name (name :op "Asia"))
NER Entity: (country :name (name :op "Asia"))
NER Entity: (person :name (name :op "Hambali"))
Spans:
Span 9-10:  Asia => (continent :name (name :op "Asia"))
Span 2-3:  blacklisted => blacklist-01
Span 0-1:  Hambali => (person :name (name :op "Hambali"))
Span 5-6:  most => most
Span 7-8:  terrorist => terrorist
Span 6-7:  wanted => want-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(2, 1, 0),Asia,(continent :name (name :op "Asia")),false), Span(7,8,List(3),terrorist,terrorist,false), Span(6,7,List(4),wanted,want-01,false), Span(5,6,List(5),most,most,false), Span(2,3,List(6),blacklisted,blacklist-01,false), Span(0,1,List(9, 8, 7),Hambali,(person :name (name :op "Hambali")),false)),Map(2 -> "Asia", 5 -> most, 8 -> name, 7 -> person, 1 -> name, 4 -> want-01, 6 -> blacklist-01, 9 -> "Hambali", 0 -> continent, 3 -> terrorist),Map(w -> want-01, n -> name, b -> blacklist-01, t -> terrorist, m -> most, p -> person, c -> continent, n2 -> name))),[Ljava.lang.String;@358ab600,Annotation([Ljava.lang.String;@e26af6,[Ljava.lang.String;@44065156,[Ljava.lang.String;@3791f50e),Annotation([Ljava.lang.String;@574b7f4a,[Ljava.lang.String;@44ed0a8f,[Ledu.cmu.lti.nlp.amr.Dependency;@32177fa5),Annotation([Ljava.lang.String;@a96d56c,[Ljava.lang.String;@6ab4a5b,[Ljava.lang.String;@2abe9173),Annotation([Ljava.lang.String;@235d29d6,[Ljava.lang.String;@1fdca564,[Ledu.cmu.lti.nlp.amr.Entity;@43f9dd56))
AMR:
(b / blacklist-01, ARG1, p / person)
(b / blacklist-01, prep-as, t / terrorist)
(c / continent, name, n / name)
(n / name, op, "Asia")
(n2 / name, op, "Hambali")
(p / person, name, n2 / name)
(w / want-01, ARG1, t / terrorist)
(w / want-01, ARG4, c / continent)
(w / want-01, degree, m / most)

Decoded in 104,491 microseconds
Sentence: Hambali was arrested in Thailand in February 2004 and in 2007.

NER Entity: (person :name (name :op "Hambali"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (person :name (name :op "Hambali"))
Spans:
Span 10-11:  2007 => (date-entity :year 2007)
Span 8-9:  and => and
Span 2-3:  arrested => arrest-01
Span 6-8:  February 2004 => (date-entity :month 2 :year 2004)
Span 0-1:  Hambali => (person :name (name :op "Hambali"))
Span 4-5:  Thailand => (country :name (name :op "Thailand"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(1, 0),2007,(date-entity :year 2007),false), Span(8,9,List(2),and,and,false), Span(6,8,List(5, 4, 3),February 2004,(date-entity :month 2 :year 2004),false), Span(4,5,List(8, 7, 6),Thailand,(country :name (name :op "Thailand")),false), Span(2,3,List(9),arrested,arrest-01,false), Span(0,1,List(12, 11, 10),Hambali,(person :name (name :op "Hambali")),false)),Map(2 -> and, 5 -> 2004, 12 -> "Hambali", 8 -> "Thailand", 7 -> name, 1 -> 2007, 4 -> 2, 11 -> name, 6 -> country, 0 -> date-entity, 9 -> arrest-01, 3 -> date-entity, 10 -> person),Map(n -> name, 2 -> 2007, d -> date-entity, p -> person, 23 -> 2004, a -> and, d2 -> date-entity, a2 -> arrest-01, c -> country, 22 -> 2, n2 -> name))),[Ljava.lang.String;@1d12e953,Annotation([Ljava.lang.String;@57cb70be,[Ljava.lang.String;@2d4608a6,[Ljava.lang.String;@20d87335),Annotation([Ljava.lang.String;@2a8a4e0c,[Ljava.lang.String;@26c89563,[Ledu.cmu.lti.nlp.amr.Dependency;@3bd6ba24),Annotation([Ljava.lang.String;@58f437b0,[Ljava.lang.String;@20f6f88c,[Ljava.lang.String;@4277127c),Annotation([Ljava.lang.String;@4c7e978c,[Ljava.lang.String;@354e7004,[Ledu.cmu.lti.nlp.amr.Entity;@22ebccb9))
AMR:
(a / and, op, d / date-entity)
(a / and, op, d2 / date-entity)
(a2 / arrest-01, ARG1, p / person)
(a2 / arrest-01, location, c / country)
(a2 / arrest-01, time, a / and)
(c / country, name, n / name)
(d / date-entity, year, 2 / 2007)
(d2 / date-entity, month, 22 / 2)
(d2 / date-entity, year, 23 / 2004)
(n / name, op, "Thailand")
(n2 / name, op, "Hambali")
(p / person, name, n2 / name)

Decoded in 56,464 microseconds
Sentence: The Immigrations Bureau stated that they only recently received intelligence reports on Hambali's record in the country.

NER Entity: (organization :name (name :op "Immigrations" :op "Bureau"))
NER Entity: (person :name (name :op "Hambali"))
NER Entity: (person :name (name :op "Hambali"))
Spans:
Span 17-18:  country => country
Span 12-13:  Hambali => (person :name (name :op "Hambali"))
Span 1-3:  Immigrations Bureau => (organization :name (name :op "Bureau" :op "Immigrations"))
Span 9-10:  intelligence => intelligence
Span 6-7:  only => only
Span 8-9:  received => receive-01
Span 7-8:  recently => recent
Span 14-15:  record => record
Span 10-11:  reports => report-01
Span 3-4:  stated => state-01
Span 5-6:  they => they

Langrangian relaxation converged after 62 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),country,country,false), Span(14,15,List(1),record,record,false), Span(12,13,List(4, 3, 2),Hambali,(person :name (name :op "Hambali")),false), Span(10,11,List(5),reports,report-01,false), Span(9,10,List(6),intelligence,intelligence,false), Span(8,9,List(7),received,receive-01,false), Span(7,8,List(8),recently,recent,false), Span(6,7,List(9),only,only,false), Span(5,6,List(10),they,they,false), Span(3,4,List(11),stated,state-01,false), Span(1,3,List(15, 14, 13, 12),Immigrations Bureau,(organization :name (name :op "Bureau" :op "Immigrations")),false)),Map(2 -> person, 5 -> report-01, 12 -> organization, 15 -> "Immigrations", 8 -> recent, 7 -> receive-01, 1 -> record, 4 -> "Hambali", 11 -> state-01, 14 -> "Bureau", 6 -> intelligence, 0 -> country, 9 -> only, 3 -> name, 10 -> they, 13 -> name),Map(n -> name, r3 -> receive-01, t -> they, s -> state-01, p -> person, r2 -> report-01, o2 -> organization, r -> record, i -> intelligence, r4 -> recent, c -> country, o -> only, n2 -> name))),[Ljava.lang.String;@5875de6a,Annotation([Ljava.lang.String;@608fe01f,[Ljava.lang.String;@2687725a,[Ljava.lang.String;@5a75ec37),Annotation([Ljava.lang.String;@2c05ff9d,[Ljava.lang.String;@33956d1a,[Ledu.cmu.lti.nlp.amr.Dependency;@2e1ddc90),Annotation([Ljava.lang.String;@5b7c8930,[Ljava.lang.String;@58867cd5,[Ljava.lang.String;@40e32762),Annotation([Ljava.lang.String;@5a8ab2,[Ljava.lang.String;@3f50b680,[Ledu.cmu.lti.nlp.amr.Entity;@54db056b))
AMR:
(n / name, op, "Hambali")
(n2 / name, op, "Bureau")
(n2 / name, op, "Immigrations")
(o2 / organization, name, n2 / name)
(p / person, name, n / name)
(r / record, source, p / person)
(r2 / report-01, ARG1, r / record)
(r2 / report-01, ARG2, o2 / organization)
(r2 / report-01, location, c / country)
(r2 / report-01, mod, i / intelligence)
(r3 / receive-01, ARG1, r2 / report-01)
(r3 / receive-01, ARG6, t / they)
(r3 / receive-01, time, r4 / recent)
(r4 / recent, mod, o / only)
(s / state-01, ARG0, o2 / organization)
(s / state-01, ARG1, r3 / receive-01)

Decoded in 908,297 microseconds
Sentence: According to the records Osama bin Laden's brother Sheik Mohammed Khalid has been able to travel in and out of the country a number of times.

NER Entity: (person :name (name :op "Osama" :op "bin" :op "Laden"))
NER Entity: (person :name (name :op "Mohammed" :op "Khalid"))
Spans:
Span 14-15:  able => possible
Span 18-19:  and => and
Span 8-9:  brother => brother
Span 22-23:  country => country
Span 24-25:  number => number
Span 4-7:  Osama bin Laden => (person :name (name :op "Laden" :op "bin" :op "Osama"))
Span 19-20:  out => out
Span 3-4:  records => (thing :ARG1-of record-01)
Span 9-12:  Sheik Mohammed Khalid => (person :name (name :op "Khalid" :op "Mohammed" :op "Sheik"))
Span 16-17:  travel => travel-01

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),number,number,false), Span(22,23,List(1),country,country,false), Span(19,20,List(2),out,out,false), Span(18,19,List(3),and,and,false), Span(16,17,List(4),travel,travel-01,false), Span(14,15,List(5),able,possible,false), Span(9,12,List(10, 9, 8, 7, 6),Sheik Mohammed Khalid,(person :name (name :op "Khalid" :op "Mohammed" :op "Sheik")),false), Span(8,9,List(11),brother,brother,false), Span(4,7,List(16, 15, 14, 13, 12),Osama bin Laden,(person :name (name :op "Laden" :op "bin" :op "Osama")),false), Span(3,4,List(18, 17),records,(thing :ARG1-of record-01),false)),Map(2 -> out, 5 -> possible, 12 -> person, 15 -> "bin", 8 -> "Khalid", 18 -> record-01, 7 -> name, 17 -> thing, 1 -> country, 4 -> travel-01, 11 -> brother, 14 -> "Laden", 6 -> person, 0 -> number, 9 -> "Mohammed", 16 -> "Osama", 3 -> and, 10 -> "Sheik", 13 -> name),Map(n -> number, t -> travel-01, b -> brother, p2 -> person, p -> possible, a -> and, n3 -> name, t2 -> thing, r -> record-01, c -> country, o -> out, p3 -> person, n2 -> name))),[Ljava.lang.String;@d5af0a5,Annotation([Ljava.lang.String;@5981f4a6,[Ljava.lang.String;@63dfada0,[Ljava.lang.String;@6f231ced),Annotation([Ljava.lang.String;@35a60674,[Ljava.lang.String;@63d4f0a2,[Ledu.cmu.lti.nlp.amr.Dependency;@7d78f3d5),Annotation([Ljava.lang.String;@a4b5ce3,[Ljava.lang.String;@f5b6e78,[Ljava.lang.String;@4b4eced1),Annotation([Ljava.lang.String;@71926a36,[Ljava.lang.String;@216e9ca3,[Ledu.cmu.lti.nlp.amr.Entity;@75120e58))
AMR:
(a / and, op, c / country)
(b / brother, poss, p3 / person)
(c / country, direction, o / out)
(n2 / name, op, "Khalid")
(n2 / name, op, "Mohammed")
(n2 / name, op, "Sheik")
(n3 / name, op, "Laden")
(n3 / name, op, "Osama")
(n3 / name, op, "bin")
(p / possible, domain, t / travel-01)
(p2 / person, mod, b / brother)
(p2 / person, name, n2 / name)
(p3 / person, mod, t2 / thing)
(p3 / person, name, n3 / name)
(r / record-01, ARG1, t2 / thing)
(t / travel-01, ARG0, p2 / person)
(t / travel-01, ARG1, a / and)
(t / travel-01, frequency, n / number)

Decoded in 344,461 microseconds
Sentence: Sheik Mohammed Khalid is allegedly funding terrorist networks in the Philippines.

NER Entity: (person :name (name :op "Mohammed" :op "Khalid"))
NER Entity: (country :name (name :op "Philippines"))
NER Entity: (country :name (name :op "Philippines"))
Spans:
Span 4-5:  allegedly => allege-01
Span 5-6:  funding => fund-01
Span 7-8:  networks => network
Span 10-11:  Philippines => (country :name (name :op "Philippines"))
Span 0-3:  Sheik Mohammed Khalid => (person :name (name :op "Khalid" :op "Mohammed" :op "Sheik"))
Span 6-7:  terrorist => terrorist

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(10,11,List(2, 1, 0),Philippines,(country :name (name :op "Philippines")),false), Span(7,8,List(3),networks,network,false), Span(6,7,List(4),terrorist,terrorist,false), Span(5,6,List(5),funding,fund-01,false), Span(4,5,List(6),allegedly,allege-01,false), Span(0,3,List(11, 10, 9, 8, 7),Sheik Mohammed Khalid,(person :name (name :op "Khalid" :op "Mohammed" :op "Sheik")),false)),Map(2 -> "Philippines", 5 -> fund-01, 8 -> name, 7 -> person, 1 -> name, 11 -> "Sheik", 4 -> terrorist, 6 -> allege-01, 9 -> "Khalid", 0 -> country, 10 -> "Mohammed", 3 -> network),Map(n -> name, t -> terrorist, p -> person, n3 -> name, a -> allege-01, c -> country, f -> fund-01, n2 -> network))),[Ljava.lang.String;@48976e6d,Annotation([Ljava.lang.String;@2a367e93,[Ljava.lang.String;@7f6874f2,[Ljava.lang.String;@1a6dc589),Annotation([Ljava.lang.String;@697a34af,[Ljava.lang.String;@70211df5,[Ledu.cmu.lti.nlp.amr.Dependency;@4c5228e7),Annotation([Ljava.lang.String;@38e7ed69,[Ljava.lang.String;@806996,[Ljava.lang.String;@78b612c6),Annotation([Ljava.lang.String;@257e0827,[Ljava.lang.String;@22752544,[Ledu.cmu.lti.nlp.amr.Entity;@21ba2445))
AMR:
(a / allege-01, ARG1, f / fund-01)
(c / country, name, n / name)
(f / fund-01, ARG0, p / person)
(f / fund-01, ARG1, n2 / network)
(n / name, op, "Philippines")
(n2 / network, location, c / country)
(n2 / network, mod, t / terrorist)
(n3 / name, op, "Khalid")
(n3 / name, op, "Mohammed")
(n3 / name, op, "Sheik")
(p / person, name, n3 / name)

Decoded in 38,243 microseconds
Sentence: The military and police have been placed on high alert for the holy week starting April 5, 2004.

mkDayMonthYear(April	5	,	2004,5,April,2004)
Spans:
Span 9-10:  alert => alert-01
Span 2-3:  and => and
Span 15-19:  April 5 , 2004 => (date-entity :day 5 :month 4 :year 2004)
Span 8-9:  high => high
Span 12-13:  holy => holy
Span 1-2:  military => military
Span 6-7:  placed => place-01
Span 3-4:  police => police
Span 14-15:  starting => start-01
Span 13-14:  week => week

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,19,List(3, 2, 1, 0),April 5 , 2004,(date-entity :day 5 :month 4 :year 2004),false), Span(14,15,List(4),starting,start-01,false), Span(13,14,List(5),week,week,false), Span(12,13,List(6),holy,holy,false), Span(9,10,List(7),alert,alert-01,false), Span(8,9,List(8),high,high,false), Span(6,7,List(9),placed,place-01,false), Span(3,4,List(10),police,police,false), Span(2,3,List(11),and,and,false), Span(1,2,List(12),military,military,false)),Map(2 -> 4, 5 -> week, 12 -> military, 8 -> high, 7 -> alert-01, 1 -> 5, 4 -> start-01, 11 -> and, 6 -> holy, 0 -> date-entity, 9 -> place-01, 3 -> 2004, 10 -> police),Map(w -> week, h -> holy, 2 -> 2004, 5 -> 5, h2 -> high, p2 -> police, s -> start-01, d -> date-entity, m -> military, p -> place-01, 4 -> 4, a -> alert-01, a2 -> and))),[Ljava.lang.String;@69d23296,Annotation([Ljava.lang.String;@3c3820bb,[Ljava.lang.String;@376c7d7d,[Ljava.lang.String;@4784efd9),Annotation([Ljava.lang.String;@3fba233d,[Ljava.lang.String;@427ae189,[Ledu.cmu.lti.nlp.amr.Dependency;@16a9eb2e),Annotation([Ljava.lang.String;@76332405,[Ljava.lang.String;@187e5235,[Ljava.lang.String;@d1d8e1a),Annotation([Ljava.lang.String;@5434e40c,[Ljava.lang.String;@3b48e183,[Ledu.cmu.lti.nlp.amr.Entity;@514de325))
AMR:
(a / alert-01, ARG1, a2 / and)
(a / alert-01, mod, h2 / high)
(a / alert-01, time, w / week)
(a2 / and, op, m / military)
(a2 / and, op, p2 / police)
(d / date-entity, day, 5 / 5)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)
(p / place-01, ARG1, a / alert-01)
(s / start-01, ARG1, w / week)
(s / start-01, time, d / date-entity)
(w / week, mod, h / holy)

Decoded in 353,636 microseconds
Sentence: 6 Abu Sayyaf suspects were captured last week in separate raids in Metro Manila.

NER Entity: (organization :name (name :op "Abu" :op "Sayyaf"))
NER Entity: (country :name (name :op "Metro" :op "Manila"))
Spans:
Span 0-1:  6 => 6
Span 1-3:  Abu Sayyaf => (criminal-organization :name (name :op "Sayyaf" :op "Abu"))
Span 5-6:  captured => capture-01
Span 6-7:  last => last
Span 12-14:  Metro Manila => (country-region :name (name :op "Manila" :op "Metro"))
Span 10-11:  raids => raid-01
Span 9-10:  separate => separate
Span 3-4:  suspects => (person :ARG2-of suspect-01)
Span 7-8:  week => week

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,14,List(3, 2, 1, 0),Metro Manila,(country-region :name (name :op "Manila" :op "Metro")),false), Span(10,11,List(4),raids,raid-01,false), Span(9,10,List(5),separate,separate,false), Span(7,8,List(6),week,week,false), Span(6,7,List(7),last,last,false), Span(5,6,List(8),captured,capture-01,false), Span(3,4,List(10, 9),suspects,(person :ARG2-of suspect-01),false), Span(1,3,List(14, 13, 12, 11),Abu Sayyaf,(criminal-organization :name (name :op "Sayyaf" :op "Abu")),false), Span(0,1,List(15),6,6,false)),Map(2 -> "Manila", 5 -> separate, 12 -> name, 15 -> 6, 8 -> capture-01, 7 -> last, 1 -> name, 4 -> raid-01, 11 -> criminal-organization, 14 -> "Abu", 6 -> week, 0 -> country-region, 9 -> person, 3 -> "Metro", 10 -> suspect-01, 13 -> "Sayyaf"),Map(w -> week, n -> name, s2 -> suspect-01, s -> separate, p -> person, c3 -> criminal-organization, r -> raid-01, 6 -> 6, l -> last, c -> country-region, n2 -> name, c2 -> capture-01))),[Ljava.lang.String;@30c1da48,Annotation([Ljava.lang.String;@43a65cd8,[Ljava.lang.String;@3f1ef9d6,[Ljava.lang.String;@17461db),Annotation([Ljava.lang.String;@3fd9e827,[Ljava.lang.String;@4e682398,[Ledu.cmu.lti.nlp.amr.Dependency;@670b3ca),Annotation([Ljava.lang.String;@24a86066,[Ljava.lang.String;@54402c04,[Ljava.lang.String;@5b3bb1f7),Annotation([Ljava.lang.String;@58d6b7b9,[Ljava.lang.String;@3f1a4795,[Ledu.cmu.lti.nlp.amr.Entity;@6a6f6c7e))
AMR:
(c / country-region, name, n / name)
(c2 / capture-01, ARG1, p / person)
(c2 / capture-01, location, c / country-region)
(c2 / capture-01, time, w / week)
(c3 / criminal-organization, name, n2 / name)
(n / name, op, "Manila")
(n / name, op, "Metro")
(n2 / name, op, "Abu")
(n2 / name, op, "Sayyaf")
(p / person, quant, 6 / 6)
(r / raid-01, ARG1, p / person)
(r / raid-01, mod, s / separate)
(s2 / suspect-01, ARG1, c3 / criminal-organization)
(s2 / suspect-01, ARG2, p / person)
(w / week, mod, l / last)

Decoded in 70,707 microseconds
Sentence: The suspects' plot to launch terrorist attacks allegedly as devastating as the Madrid bombings in Spain was foiled.

NER Entity: (country :name (name :op "Madrid"))
NER Entity: (country :name (name :op "Spain"))
Spans:
Span 8-9:  allegedly => allege-01
Span 7-8:  attacks => attack-01
Span 14-15:  bombings => bomb-01
Span 10-11:  devastating => devastate-01
Span 18-19:  foiled => foil-01
Span 5-6:  launch => launch-01
Span 13-14:  Madrid => (city :name (name :op "Madrid"))
Span 3-4:  plot => plot-01
Span 16-17:  Spain => (country :name (name :op "Spain"))
Span 1-2:  suspects => (person :ARG2-of suspect-01)
Span 6-7:  terrorist => terrorist

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),foiled,foil-01,false), Span(16,17,List(3, 2, 1),Spain,(country :name (name :op "Spain")),false), Span(14,15,List(4),bombings,bomb-01,false), Span(13,14,List(7, 6, 5),Madrid,(city :name (name :op "Madrid")),false), Span(10,11,List(8),devastating,devastate-01,false), Span(8,9,List(9),allegedly,allege-01,false), Span(7,8,List(10),attacks,attack-01,false), Span(6,7,List(11),terrorist,terrorist,false), Span(5,6,List(12),launch,launch-01,false), Span(3,4,List(13),plot,plot-01,false), Span(1,2,List(15, 14),suspects,(person :ARG2-of suspect-01),false)),Map(2 -> name, 5 -> city, 12 -> launch-01, 15 -> suspect-01, 8 -> devastate-01, 7 -> "Madrid", 1 -> country, 4 -> bomb-01, 11 -> terrorist, 14 -> person, 6 -> name, 0 -> foil-01, 9 -> allege-01, 3 -> "Spain", 10 -> attack-01, 13 -> plot-01),Map(n -> name, b -> bomb-01, t -> terrorist, p2 -> person, s -> suspect-01, d -> devastate-01, p -> plot-01, a -> allege-01, a2 -> attack-01, c -> country, l -> launch-01, f -> foil-01, c2 -> city, n2 -> name))),[Ljava.lang.String;@6c5ddccd,Annotation([Ljava.lang.String;@1dbd580,[Ljava.lang.String;@6c101cc1,[Ljava.lang.String;@7d0d91a1),Annotation([Ljava.lang.String;@7fb48179,[Ljava.lang.String;@201c3cda,[Ledu.cmu.lti.nlp.amr.Dependency;@4c86da0c),Annotation([Ljava.lang.String;@5d97caa4,[Ljava.lang.String;@6732726,[Ljava.lang.String;@474821de),Annotation([Ljava.lang.String;@3d64c581,[Ljava.lang.String;@5ec5ea63,[Ledu.cmu.lti.nlp.amr.Entity;@4190bc8a))
AMR:
(a2 / attack-01, ARG0, t / terrorist)
(a2 / attack-01, prep-as, d / devastate-01)
(b / bomb-01, ARG1, c2 / city)
(c / country, name, n / name)
(c2 / city, location, c / country)
(c2 / city, name, n2 / name)
(d / devastate-01, ARG1, a / allege-01)
(d / devastate-01, compared-to, b / bomb-01)
(f / foil-01, ARG2, p / plot-01)
(l / launch-01, ARG1, a2 / attack-01)
(n / name, op, "Spain")
(n2 / name, op, "Madrid")
(p / plot-01, ARG0, p2 / person)
(p / plot-01, ARG1, l / launch-01)
(s / suspect-01, ARG2, p2 / person)

Decoded in 101,834 microseconds
Sentence: President Gloria Macapagal-Arroyo said in a statement on April 7, 2004 that the government is closely watching foreigners in the country who may have taught the local rebels and terrorists to make bombs or have laundered money from the al-Qaeda terrorist group.

NER Entity: (person :name (name :op "Gloria" :op "Macapagal" :op "-" :op "Arroyo"))
mkDayMonthYear(April	7	,	2004,7,April,2004)
NER Entity: (organization :name (name :op "al-Qaeda"))
Spans:
Span 42-43:  al-Qaeda => (criminal-organization :name (name :op "al-Qaeda"))
Span 31-32:  and => and
Span 10-14:  April 7 , 2004 => (date-entity :day 7 :month 4 :year 2004)
Span 35-36:  bombs => bomb
Span 18-19:  closely => close
Span 23-24:  country => country
Span 20-21:  foreigners => foreigner
Span 1-5:  Gloria Macapagal - Arroyo => (person :name (name :op "Macapagal-Arroyo" :op "Gloria"))
Span 16-17:  government => (government-organization :ARG0-of govern-01)
Span 44-45:  group => group
Span 38-39:  laundered => launder-01
Span 29-30:  local => local
Span 34-35:  make => make-01
Span 25-26:  may => possible
Span 39-40:  money => money
Span 36-37:  or => or
Span 0-1:  President => (have-org-role-91 :ARG2 president)
Span 30-31:  rebels => (person :ARG0-of rebel-01)
Span 5-6:  said => say-01
Span 8-9:  statement => state-01
Span 27-28:  taught => teach-01
Span 43-44:  terrorist => terrorist
Span 32-33:  terrorists => terrorist
Span 19-20:  watching => watch-01

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),group,group,false), Span(43,44,List(1),terrorist,terrorist,false), Span(42,43,List(4, 3, 2),al-Qaeda,(criminal-organization :name (name :op "al-Qaeda")),false), Span(39,40,List(5),money,money,false), Span(38,39,List(6),laundered,launder-01,false), Span(36,37,List(7),or,or,false), Span(35,36,List(8),bombs,bomb,false), Span(34,35,List(9),make,make-01,false), Span(32,33,List(10),terrorists,terrorist,false), Span(31,32,List(11),and,and,false), Span(30,31,List(13, 12),rebels,(person :ARG0-of rebel-01),false), Span(29,30,List(14),local,local,false), Span(27,28,List(15),taught,teach-01,false), Span(25,26,List(16),may,possible,false), Span(23,24,List(17),country,country,false), Span(20,21,List(18),foreigners,foreigner,false), Span(19,20,List(19),watching,watch-01,false), Span(18,19,List(20),closely,close,false), Span(16,17,List(22, 21),government,(government-organization :ARG0-of govern-01),false), Span(10,14,List(26, 25, 24, 23),April 7 , 2004,(date-entity :day 7 :month 4 :year 2004),false), Span(8,9,List(27),statement,state-01,false), Span(5,6,List(28),said,say-01,false), Span(1,5,List(32, 31, 30, 29),Gloria Macapagal - Arroyo,(person :name (name :op "Macapagal-Arroyo" :op "Gloria")),false), Span(0,1,List(34, 33),President,(have-org-role-91 :ARG2 president),false)),Map(30 -> name, 2 -> criminal-organization, 5 -> money, 33 -> have-org-role-91, 27 -> state-01, 12 -> person, 8 -> bomb, 15 -> teach-01, 21 -> government-organization, 18 -> foreigner, 24 -> 7, 7 -> or, 1 -> terrorist, 17 -> country, 23 -> date-entity, 26 -> 2004, 4 -> "al-Qaeda", 11 -> and, 32 -> "Gloria", 14 -> local, 29 -> person, 20 -> close, 34 -> president, 28 -> say-01, 6 -> launder-01, 9 -> make-01, 0 -> group, 22 -> govern-01, 16 -> possible, 19 -> watch-01, 10 -> terrorist, 3 -> name, 31 -> "Macapagal-Arroyo", 25 -> 4, 13 -> rebel-01),Map(n -> name, w -> watch-01, h -> have-org-role-91, g3 -> govern-01, 2 -> 2004, s2 -> say-01, t -> terrorist, b -> bomb, m2 -> make-01, p2 -> possible, s -> state-01, m -> money, d -> date-entity, 7 -> 7, t3 -> teach-01, g2 -> government-organization, p -> person, g -> group, a -> and, c3 -> close, 4 -> 4, p4 -> president, t2 -> terrorist, l2 -> local, r -> rebel-01, c -> criminal-organization, l -> launder-01, f -> foreigner, o -> or, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@47d023b7,Annotation([Ljava.lang.String;@5c83ae01,[Ljava.lang.String;@2d64c100,[Ljava.lang.String;@69d45cca),Annotation([Ljava.lang.String;@2fdf17dc,[Ljava.lang.String;@6e6d4780,[Ledu.cmu.lti.nlp.amr.Dependency;@650ae78c),Annotation([Ljava.lang.String;@2e73d5eb,[Ljava.lang.String;@79c5460e,[Ljava.lang.String;@7d904ff1),Annotation([Ljava.lang.String;@4f94e148,[Ljava.lang.String;@7ff8a9dc,[Ledu.cmu.lti.nlp.amr.Entity;@2cde651b))
AMR:
(a / and, op, t / terrorist)
(c / criminal-organization, name, n / name)
(d / date-entity, day, 7 / 7)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)
(g / group, mod, t2 / terrorist)
(g3 / govern-01, ARG0, g2 / government-organization)
(g3 / govern-01, ARG1, c2 / country)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, c / criminal-organization)
(h / have-org-role-91, ARG2, p4 / president)
(l / launder-01, ARG0, f / foreigner)
(l / launder-01, ARG1, m / money)
(l / launder-01, source, g / group)
(m2 / make-01, ARG1, b / bomb)
(m2 / make-01, ARG2, a / and)
(n / name, op, "al-Qaeda")
(n2 / name, op, "Gloria")
(n2 / name, op, "Macapagal-Arroyo")
(o / or, op, w / watch-01)
(p / person, mod, l2 / local)
(p3 / person, name, n2 / name)
(r / rebel-01, ARG0, p / person)
(s / state-01, ARG0, p3 / person)
(s2 / say-01, ARG0, p3 / person)
(s2 / say-01, ARG1, w / watch-01)
(s2 / say-01, time, d / date-entity)
(t3 / teach-01, ARG0, f / foreigner)
(t3 / teach-01, ARG1, p / person)
(t3 / teach-01, ARG2, a / and)
(t3 / teach-01, mod, p2 / possible)
(w / watch-01, ARG0, g2 / government-organization)
(w / watch-01, ARG1, f / foreigner)
(w / watch-01, manner, c3 / close)

Decoded in 2,662,782 microseconds
Sentence: ABS-CBN news channel is a local television station in Manila.

NER Entity: (organization :name (name :op "ABS" :op "-" :op "CBN"))
NER Entity: (country :name (name :op "Manila"))
NER Entity: (country :name (name :op "Manila"))
Spans:
Span 0-3:  ABS - CBN => (name :op "ABS-CBN")
Span 4-5:  channel => channel
Span 7-8:  local => local
Span 11-12:  Manila => (city :name (name :op "Manila"))
Span 3-4:  news => news
Span 9-10:  station => station
Span 8-9:  television => television

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,12,List(2, 1, 0),Manila,(city :name (name :op "Manila")),false), Span(9,10,List(3),station,station,false), Span(8,9,List(4),television,television,false), Span(7,8,List(5),local,local,false), Span(4,5,List(6),channel,channel,false), Span(3,4,List(7),news,news,false), Span(0,3,List(9, 8),ABS - CBN,(name :op "ABS-CBN"),false)),Map(2 -> "Manila", 5 -> local, 8 -> name, 7 -> news, 1 -> name, 4 -> television, 6 -> channel, 9 -> "ABS-CBN", 0 -> city, 3 -> station),Map(n -> name, t -> television, s -> station, n3 -> name, l -> local, c -> city, n2 -> news, c2 -> channel))),[Ljava.lang.String;@534e58b6,Annotation([Ljava.lang.String;@3bb87d36,[Ljava.lang.String;@1b495d4,[Ljava.lang.String;@5e1dde44),Annotation([Ljava.lang.String;@7f37b6d9,[Ljava.lang.String;@71e35c4,[Ledu.cmu.lti.nlp.amr.Dependency;@22a10ac6),Annotation([Ljava.lang.String;@12fe1f28,[Ljava.lang.String;@503df2d0,[Ljava.lang.String;@26fb4d06),Annotation([Ljava.lang.String;@c269425,[Ljava.lang.String;@6e43ddd6,[Ledu.cmu.lti.nlp.amr.Entity;@51d719bc))
AMR:
(c / city, name, n / name)
(c2 / channel, mod, n2 / news)
(c2 / channel, name, n3 / name)
(n / name, op, "Manila")
(n3 / name, op, "ABS-CBN")
(s / station, domain, c2 / channel)
(s / station, location, c / city)
(s / station, mod, t / television)
(t / television, mod, l / local)

Decoded in 34,802 microseconds
Sentence: 2004-04-29

mkDayMonthYear(2004-04-29,29,04,2004)
mkDayMonthYear(2004-04-29,29,04,2004)
Spans:
Span 0-1:  2004-04-29 => (date-entity :year 2004 :month 4 :day 29)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-04-29,(date-entity :year 2004 :month 4 :day 29),false)),Map(2 -> 4, 1 -> 2004, 0 -> date-entity, 3 -> 29),Map(2 -> 2004, d -> date-entity, 4 -> 4, 22 -> 29))),[Ljava.lang.String;@2d38edfd,Annotation([Ljava.lang.String;@1507c3c3,[Ljava.lang.String;@655a01d8,[Ljava.lang.String;@c29fe36),Annotation([Ljava.lang.String;@6614bd4b,[Ljava.lang.String;@4d266391,[Ledu.cmu.lti.nlp.amr.Dependency;@7847ef2c),Annotation([Ljava.lang.String;@3b5c665c,[Ljava.lang.String;@78e17a99,[Ljava.lang.String;@625a4ff),Annotation([Ljava.lang.String;@41dc0598,[Ljava.lang.String;@196ae579,[Ledu.cmu.lti.nlp.amr.Entity;@6a2c717f))
AMR:
(d / date-entity, day, 22 / 29)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 2 / 2004)

Decoded in 6,798 microseconds
Sentence: China (CN); Germany (DE)

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "DE"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 4-5:  ; => and
Span 0-1:  China => (country :name (name :op "China"))
Span 5-6:  Germany => (country :name (name :op "Germany"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(2, 1, 0),Germany,(country :name (name :op "Germany")),false), Span(4,5,List(3),;,and,false), Span(0,1,List(6, 5, 4),China,(country :name (name :op "China")),false)),Map(2 -> "Germany", 5 -> name, 1 -> name, 4 -> country, 6 -> "China", 0 -> country, 3 -> and),Map(n -> name, a -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@41853299,Annotation([Ljava.lang.String;@60d40ff4,[Ljava.lang.String;@2e5b7fba,[Ljava.lang.String;@27755487),Annotation([Ljava.lang.String;@4f0cab0a,[Ljava.lang.String;@fe7b6b0,[Ledu.cmu.lti.nlp.amr.Dependency;@7ab4ae59),Annotation([Ljava.lang.String;@77681ce4,[Ljava.lang.String;@5d96bdf8,[Ljava.lang.String;@6f76c2cc),Annotation([Ljava.lang.String;@306f6f1d,[Ljava.lang.String;@7d7cac8,[Ledu.cmu.lti.nlp.amr.Entity;@6fc6deb7))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Germany")
(n2 / name, op, "China")

Decoded in 16,933 microseconds
Sentence: International; Government; technology; politics; economy

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 8-9:  economy => economy
Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 6-7:  politics => politics
Span 4-5:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),economy,economy,false), Span(7,8,List(1),;,and,false), Span(6,7,List(2),politics,politics,false), Span(5,6,List(3),;,and,false), Span(4,5,List(4),technology,technology,false), Span(3,4,List(5),;,and,false), Span(2,3,List(7, 6),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(8),;,and,false), Span(0,1,List(9),International,international,false)),Map(2 -> politics, 5 -> and, 8 -> and, 7 -> govern-01, 1 -> and, 4 -> technology, 6 -> government-organization, 9 -> international, 0 -> economy, 3 -> and),Map(e -> economy, t -> technology, a3 -> and, g2 -> govern-01, g -> government-organization, p -> politics, a -> and, i -> international, a2 -> and, a4 -> and))),[Ljava.lang.String;@367f0121,Annotation([Ljava.lang.String;@7da39774,[Ljava.lang.String;@441b8382,[Ljava.lang.String;@1df1ced0),Annotation([Ljava.lang.String;@5349b246,[Ljava.lang.String;@32b0876c,[Ledu.cmu.lti.nlp.amr.Dependency;@2aaf152b),Annotation([Ljava.lang.String;@39bbd9e0,[Ljava.lang.String;@27fe9713,[Ljava.lang.String;@11c3ff67),Annotation([Ljava.lang.String;@4397a639,[Ljava.lang.String;@24841372,[Ledu.cmu.lti.nlp.amr.Entity;@77114efe))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, t / technology)
(a3 / and, op, p / politics)
(a3 / and, op, t / technology)
(a4 / and, op, a3 / and)
(a4 / and, op, e / economy)
(a4 / and, op, g / government-organization)
(a4 / and, op, i / international)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 43,562 microseconds
Sentence: Chinese premier discusses plans for broad cooperation with important trade partner Germany ahead of European visit.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 12-13:  ahead => ahead
Span 5-6:  broad => broad
Span 0-1:  Chinese => (country :name (name :op "China"))
Span 6-7:  cooperation => cooperate-01
Span 2-3:  discusses => discuss-01
Span 14-15:  European => (continent :name (name :op "Europe"))
Span 11-12:  Germany => (country :name (name :op "Germany"))
Span 8-9:  important => important
Span 10-11:  partner => partner-01
Span 3-4:  plans => plan-01
Span 1-2:  premier => premier
Span 9-10:  trade => trade-01
Span 15-16:  visit => visit-01

Langrangian relaxation converged after 4 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),visit,visit-01,false), Span(14,15,List(3, 2, 1),European,(continent :name (name :op "Europe")),false), Span(12,13,List(4),ahead,ahead,false), Span(11,12,List(7, 6, 5),Germany,(country :name (name :op "Germany")),false), Span(10,11,List(8),partner,partner-01,false), Span(9,10,List(9),trade,trade-01,false), Span(8,9,List(10),important,important,false), Span(6,7,List(11),cooperation,cooperate-01,false), Span(5,6,List(12),broad,broad,false), Span(3,4,List(13),plans,plan-01,false), Span(2,3,List(14),discusses,discuss-01,false), Span(1,2,List(15),premier,premier,false), Span(0,1,List(18, 17, 16),Chinese,(country :name (name :op "China")),false)),Map(2 -> name, 5 -> country, 12 -> broad, 15 -> premier, 8 -> partner-01, 18 -> "China", 7 -> "Germany", 17 -> name, 1 -> continent, 4 -> ahead, 11 -> cooperate-01, 14 -> discuss-01, 6 -> name, 0 -> visit-01, 9 -> trade-01, 16 -> country, 3 -> "Europe", 10 -> important, 13 -> plan-01),Map(n -> name, t -> trade-01, b -> broad, p2 -> plan-01, c4 -> country, v -> visit-01, d -> discuss-01, p -> partner-01, n3 -> name, a -> ahead, c3 -> cooperate-01, i -> important, c -> continent, p3 -> premier, c2 -> country, n2 -> name))),[Ljava.lang.String;@79a7bfbc,Annotation([Ljava.lang.String;@77f68df,[Ljava.lang.String;@3e4e4c1,[Ljava.lang.String;@7e7f3cfd),Annotation([Ljava.lang.String;@3ae126d1,[Ljava.lang.String;@46a488c2,[Ledu.cmu.lti.nlp.amr.Dependency;@6242ae3b),Annotation([Ljava.lang.String;@65ddee5a,[Ljava.lang.String;@56399b9e,[Ljava.lang.String;@34b9eb03),Annotation([Ljava.lang.String;@43fda8d9,[Ljava.lang.String;@49d831c2,[Ledu.cmu.lti.nlp.amr.Entity;@53a7a60c))
AMR:
(a / ahead, op, v / visit-01)
(c / continent, name, n / name)
(c2 / country, mod, p / partner-01)
(c2 / country, name, n2 / name)
(c3 / cooperate-01, ARG1, c2 / country)
(c3 / cooperate-01, mod, b / broad)
(c4 / country, name, n3 / name)
(d / discuss-01, ARG1, p2 / plan-01)
(d / discuss-01, time, a / ahead)
(n / name, op, "Europe")
(n2 / name, op, "Germany")
(n3 / name, op, "China")
(p / partner-01, ARG1, t / trade-01)
(p2 / plan-01, ARG1, c3 / cooperate-01)
(p3 / premier, mod, c4 / country)
(t / trade-01, ARG1, i / important)
(v / visit-01, ARG1, p3 / premier)
(v / visit-01, location, c / continent)

Decoded in 171,758 microseconds
Sentence: Wen states that the main purpose of the Germany visit is to advance trade, economic and technological exchanges.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 12-13:  advance => advance-01
Span 16-17:  and => and
Span 15-16:  economic => economy
Span 18-19:  exchanges => exchange-01
Span 8-9:  Germany => (country :name (name :op "Germany"))
Span 4-5:  main => main
Span 5-6:  purpose => purpose-01
Span 1-2:  states => state-01
Span 17-18:  technological => technology
Span 13-14:  trade => trade-01
Span 9-10:  visit => visit-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),exchanges,exchange-01,false), Span(17,18,List(1),technological,technology,false), Span(16,17,List(2),and,and,false), Span(15,16,List(3),economic,economy,false), Span(13,14,List(4),trade,trade-01,false), Span(12,13,List(5),advance,advance-01,false), Span(9,10,List(6),visit,visit-01,false), Span(8,9,List(9, 8, 7),Germany,(country :name (name :op "Germany")),false), Span(5,6,List(10),purpose,purpose-01,false), Span(4,5,List(11),main,main,false), Span(1,2,List(12),states,state-01,false), Span(0,1,List(15, 14, 13),Wen,(person :name (name :op "Wen")),false)),Map(2 -> and, 5 -> advance-01, 12 -> state-01, 15 -> "Wen", 8 -> name, 7 -> country, 1 -> technology, 4 -> trade-01, 11 -> main, 14 -> name, 6 -> visit-01, 0 -> exchange-01, 9 -> "Germany", 3 -> economy, 10 -> purpose-01, 13 -> person),Map(e -> exchange-01, n -> name, t -> technology, e2 -> economy, p2 -> person, s -> state-01, v -> visit-01, m -> main, p -> purpose-01, a -> and, t2 -> trade-01, a2 -> advance-01, c -> country, n2 -> name))),[Ljava.lang.String;@28bdbe88,Annotation([Ljava.lang.String;@6a87026,[Ljava.lang.String;@ef60710,[Ljava.lang.String;@600f5704),Annotation([Ljava.lang.String;@2503ec73,[Ljava.lang.String;@606f81b5,[Ledu.cmu.lti.nlp.amr.Dependency;@5e1fc42f),Annotation([Ljava.lang.String;@44b21f9f,[Ljava.lang.String;@7ee8130e,[Ljava.lang.String;@6296474f),Annotation([Ljava.lang.String;@4288d98e,[Ljava.lang.String;@169268a7,[Ledu.cmu.lti.nlp.amr.Entity;@285c6918))
AMR:
(a / and, op, e / exchange-01)
(a2 / advance-01, ARG0, v / visit-01)
(a2 / advance-01, ARG1, a / and)
(c / country, name, n / name)
(e / exchange-01, ARG1, m / main)
(e / exchange-01, mod, t / technology)
(n / name, op, "Germany")
(n2 / name, op, "Wen")
(p / purpose-01, ARG1, a2 / advance-01)
(p2 / person, name, n2 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, p / purpose-01)
(s / state-01, ARG2, e2 / economy)
(t2 / trade-01, ARG1, m / main)
(v / visit-01, ARG1, c / country)

Decoded in 681,726 microseconds
Sentence: In an interview with Dieter stolte on 29 April 2004 Chinese Premier Wen Jiabao stated that the governments of China and Germany should establish solid cooperation, enhance consultations on major international issues and further strengthen trade and technological exchanges.

NER Entity: (person :name (name :op "Dieter"))
mkDayMonthYear(29	April	2004,29,April,2004)
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen" :op "Jiabao"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 7-10:  29 April 2004 => (date-entity :day 29 :month 4 :year 2004)
Span 37-38:  and => and
Span 33-34:  and => and
Span 20-21:  and => and
Span 19-20:  China => (country :name (name :op "China"))
Span 10-11:  Chinese => (country :name (name :op "China"))
Span 28-29:  consultations => consult-01
Span 25-26:  cooperation => cooperate-01
Span 4-6:  Dieter stolte => (person :name (name :op "stolte" :op "Dieter"))
Span 27-28:  enhance => enhance-01
Span 23-24:  establish => establish-01
Span 39-40:  exchanges => exchange-01
Span 34-35:  further => further
Span 21-22:  Germany => (country :name (name :op "Germany"))
Span 17-18:  governments => (government-organization :ARG0-of govern-01)
Span 31-32:  international => international
Span 2-3:  interview => interview-01
Span 32-33:  issues => issue
Span 30-31:  major => major
Span 11-12:  Premier => (have-org-role-91 :ARG2 premier)
Span 22-23:  should => recommend-01
Span 24-25:  solid => solid
Span 14-15:  stated => state-01
Span 35-36:  strengthen => strengthen-01
Span 38-39:  technological => technology
Span 36-37:  trade => trade-01
Span 12-14:  Wen Jiabao => (person :name (name :op "Wen" :op "Jiabao"))

Langrangian relaxation converged after 61 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),exchanges,exchange-01,false), Span(38,39,List(1),technological,technology,false), Span(37,38,List(2),and,and,false), Span(36,37,List(3),trade,trade-01,false), Span(35,36,List(4),strengthen,strengthen-01,false), Span(34,35,List(5),further,further,false), Span(33,34,List(6),and,and,false), Span(32,33,List(7),issues,issue,false), Span(31,32,List(8),international,international,false), Span(30,31,List(9),major,major,false), Span(28,29,List(10),consultations,consult-01,false), Span(27,28,List(11),enhance,enhance-01,false), Span(25,26,List(12),cooperation,cooperate-01,false), Span(24,25,List(13),solid,solid,false), Span(23,24,List(14),establish,establish-01,false), Span(22,23,List(15),should,recommend-01,false), Span(21,22,List(18, 17, 16),Germany,(country :name (name :op "Germany")),false), Span(20,21,List(19),and,and,false), Span(19,20,List(22, 21, 20),China,(country :name (name :op "China")),false), Span(17,18,List(24, 23),governments,(government-organization :ARG0-of govern-01),false), Span(14,15,List(25),stated,state-01,false), Span(12,14,List(29, 28, 27, 26),Wen Jiabao,(person :name (name :op "Wen" :op "Jiabao")),false), Span(11,12,List(31, 30),Premier,(have-org-role-91 :ARG2 premier),false), Span(10,11,List(34, 33, 32),Chinese,(country :name (name :op "China")),false), Span(7,10,List(38, 37, 36, 35),29 April 2004,(date-entity :day 29 :month 4 :year 2004),false), Span(4,6,List(42, 41, 40, 39),Dieter stolte,(person :name (name :op "stolte" :op "Dieter")),false), Span(2,3,List(43),interview,interview-01,false)),Map(39 -> person, 30 -> have-org-role-91, 2 -> and, 5 -> further, 33 -> name, 27 -> name, 12 -> cooperate-01, 8 -> international, 15 -> recommend-01, 42 -> "Dieter", 36 -> 29, 21 -> name, 18 -> "Germany", 24 -> govern-01, 41 -> "stolte", 35 -> date-entity, 7 -> issue, 1 -> technology, 17 -> name, 23 -> government-organization, 38 -> 2004, 26 -> person, 4 -> strengthen-01, 11 -> enhance-01, 32 -> country, 14 -> establish-01, 29 -> "Jiabao", 20 -> country, 34 -> "China", 28 -> "Wen", 6 -> and, 40 -> name, 43 -> interview-01, 9 -> major, 0 -> exchange-01, 22 -> "China", 16 -> country, 37 -> 4, 19 -> and, 10 -> consult-01, 3 -> trade-01, 31 -> premier, 25 -> state-01, 13 -> solid),Map(e -> exchange-01, n -> name, h -> have-org-role-91, 2 -> 29, s2 -> solid, t -> technology, p2 -> premier, e2 -> enhance-01, n4 -> name, a3 -> and, c4 -> country, s -> strengthen-01, d -> date-entity, m -> major, g2 -> govern-01, i3 -> interview-01, g -> government-organization, p -> person, n3 -> name, a -> and, c3 -> country, 4 -> 4, i2 -> international, t2 -> trade-01, i -> issue, a2 -> and, r -> recommend-01, c -> consult-01, s3 -> state-01, 22 -> 2004, f -> further, p3 -> person, e3 -> establish-01, c2 -> cooperate-01, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@78a0ff63,Annotation([Ljava.lang.String;@7c601d50,[Ljava.lang.String;@79b2852b,[Ljava.lang.String;@326d27ac),Annotation([Ljava.lang.String;@4d499d65,[Ljava.lang.String;@313f8301,[Ledu.cmu.lti.nlp.amr.Dependency;@5cc9d3d0),Annotation([Ljava.lang.String;@7c2dfa2,[Ljava.lang.String;@661d88a,[Ljava.lang.String;@4b0b64cc),Annotation([Ljava.lang.String;@59ce792e,[Ljava.lang.String;@4860827a,[Ledu.cmu.lti.nlp.amr.Entity;@404db674))
AMR:
(a / and, op, g / government-organization)
(a2 / and, op, t / technology)
(a2 / and, op, t2 / trade-01)
(a3 / and, op, e2 / enhance-01)
(a3 / and, op, s / strengthen-01)
(c / consult-01, ARG1, c4 / country)
(c / consult-01, ARG2, i / issue)
(c2 / cooperate-01, ARG1, s2 / solid)
(c3 / country, name, n / name)
(c4 / country, name, n2 / name)
(c5 / country, name, n4 / name)
(d / date-entity, day, 2 / 29)
(d / date-entity, month, 4 / 4)
(d / date-entity, year, 22 / 2004)
(e / exchange-01, ARG1, a2 / and)
(e2 / enhance-01, ARG1, c / consult-01)
(e3 / establish-01, ARG0, a / and)
(e3 / establish-01, ARG1, c2 / cooperate-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c5 / country)
(h / have-org-role-91, ARG2, p2 / premier)
(i / issue, mod, i2 / international)
(i / issue, mod, m / major)
(i3 / interview-01, ARG0, p3 / person)
(i3 / interview-01, ARG1, p / person)
(n / name, op, "Germany")
(n2 / name, op, "China")
(n3 / name, op, "Jiabao")
(n3 / name, op, "Wen")
(n4 / name, op, "China")
(n5 / name, op, "Dieter")
(n5 / name, op, "stolte")
(p / person, name, n3 / name)
(p3 / person, name, n5 / name)
(r / recommend-01, ARG1, a3 / and)
(s / strengthen-01, ARG0, a / and)
(s / strengthen-01, ARG1, e / exchange-01)
(s / strengthen-01, manner, f / further)
(s3 / state-01, ARG0, p / person)
(s3 / state-01, ARG1, r / recommend-01)
(s3 / state-01, medium, i3 / interview-01)
(s3 / state-01, time, d / date-entity)

Decoded in 5,535,085 microseconds
Sentence: Wen was interviewed before his imminent visit to Europe by the publisher of Die Welt.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (organization :name (name :op "Die" :op "Welt"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 3-4:  before => before
Span 13-15:  Die Welt => (publication :name (name :op "Welt" :op "Die"))
Span 8-9:  Europe => (continent :name (name :op "Europe"))
Span 5-6:  imminent => imminent
Span 2-3:  interviewed => interview-01
Span 11-12:  publisher => publish-01
Span 6-7:  visit => visit-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 23 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,15,List(3, 2, 1, 0),Die Welt,(publication :name (name :op "Welt" :op "Die")),false), Span(11,12,List(4),publisher,publish-01,false), Span(8,9,List(7, 6, 5),Europe,(continent :name (name :op "Europe")),false), Span(6,7,List(8),visit,visit-01,false), Span(5,6,List(9),imminent,imminent,false), Span(3,4,List(10),before,before,false), Span(2,3,List(11),interviewed,interview-01,false), Span(0,1,List(14, 13, 12),Wen,(person :name (name :op "Wen")),false)),Map(2 -> "Welt", 5 -> continent, 12 -> person, 8 -> visit-01, 7 -> "Europe", 1 -> name, 4 -> publish-01, 11 -> interview-01, 14 -> "Wen", 6 -> name, 0 -> publication, 9 -> imminent, 3 -> "Die", 10 -> before, 13 -> name),Map(n -> name, b -> before, p2 -> publish-01, v -> visit-01, p -> publication, n3 -> name, i2 -> interview-01, i -> imminent, c -> continent, p3 -> person, n2 -> name))),[Ljava.lang.String;@50f097b5,Annotation([Ljava.lang.String;@7add838c,[Ljava.lang.String;@3662bdff,[Ljava.lang.String;@1bb15351),Annotation([Ljava.lang.String;@4fa822ad,[Ljava.lang.String;@597f0937,[Ledu.cmu.lti.nlp.amr.Dependency;@7ad1caa2),Annotation([Ljava.lang.String;@6b6b3572,[Ljava.lang.String;@65d8dff8,[Ljava.lang.String;@444f44c5),Annotation([Ljava.lang.String;@303f1234,[Ljava.lang.String;@24d61e4,[Ledu.cmu.lti.nlp.amr.Entity;@2149594a))
AMR:
(b / before, op, v / visit-01)
(c / continent, name, n2 / name)
(i2 / interview-01, ARG0, p2 / publish-01)
(i2 / interview-01, ARG1, p3 / person)
(i2 / interview-01, time, b / before)
(n / name, op, "Die")
(n / name, op, "Welt")
(n2 / name, op, "Europe")
(n3 / name, op, "Wen")
(p / publication, name, n / name)
(p2 / publish-01, ARG1, p / publication)
(p3 / person, name, n3 / name)
(v / visit-01, ARG0, p3 / person)
(v / visit-01, destination, c / continent)
(v / visit-01, mod, i / imminent)

Decoded in 311,128 microseconds
Sentence: Wen is scheduled to visit 5 European nations including Germany starting 2 May 2004.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "Germany"))
mkDayMonthYear(2	May	2004,2,May,2004)
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 11-14:  2 May 2004 => (date-entity :year 2004 :month 5 :day 2)
Span 5-6:  5 => 5
Span 6-7:  European => (continent :name (name :op "Europe"))
Span 9-10:  Germany => (country :name (name :op "Germany"))
Span 8-9:  including => include-91
Span 7-8:  nations => nation
Span 2-3:  scheduled => schedule-01
Span 10-11:  starting => start-01
Span 4-5:  visit => visit-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(11,14,List(3, 2, 1, 0),2 May 2004,(date-entity :year 2004 :month 5 :day 2),false), Span(10,11,List(4),starting,start-01,false), Span(9,10,List(7, 6, 5),Germany,(country :name (name :op "Germany")),false), Span(8,9,List(8),including,include-91,false), Span(7,8,List(9),nations,nation,false), Span(6,7,List(12, 11, 10),European,(continent :name (name :op "Europe")),false), Span(5,6,List(13),5,5,false), Span(4,5,List(14),visit,visit-01,false), Span(2,3,List(15),scheduled,schedule-01,false), Span(0,1,List(18, 17, 16),Wen,(person :name (name :op "Wen")),false)),Map(2 -> 5, 5 -> country, 12 -> "Europe", 15 -> schedule-01, 8 -> include-91, 18 -> "Wen", 7 -> "Germany", 17 -> name, 1 -> 2004, 4 -> start-01, 11 -> name, 14 -> visit-01, 6 -> name, 0 -> date-entity, 9 -> nation, 16 -> person, 3 -> 2, 10 -> continent, 13 -> 5),Map(n -> name, 2 -> 2004, s2 -> schedule-01, 5 -> 5, n4 -> name, s -> start-01, v -> visit-01, d -> date-entity, p -> person, n3 -> name, i -> include-91, 52 -> 5, c -> country, 22 -> 2, n2 -> nation, c2 -> continent))),[Ljava.lang.String;@1f1e58ca,Annotation([Ljava.lang.String;@57f847af,[Ljava.lang.String;@3ed34ef5,[Ljava.lang.String;@553bc36c),Annotation([Ljava.lang.String;@380e1909,[Ljava.lang.String;@2d5ef498,[Ledu.cmu.lti.nlp.amr.Dependency;@95eb320),Annotation([Ljava.lang.String;@2f521c4,[Ljava.lang.String;@4afbb6c2,[Ljava.lang.String;@10db6131),Annotation([Ljava.lang.String;@6c6017b9,[Ljava.lang.String;@4730e0f0,[Ledu.cmu.lti.nlp.amr.Entity;@506a1372))
AMR:
(c / country, name, n / name)
(c2 / continent, name, n3 / name)
(d / date-entity, day, 22 / 2)
(d / date-entity, month, 5 / 5)
(d / date-entity, year, 2 / 2004)
(i / include-91, ARG1, c / country)
(i / include-91, ARG2, n2 / nation)
(n / name, op, "Germany")
(n2 / nation, mod, c2 / continent)
(n2 / nation, quant, 52 / 5)
(n3 / name, op, "Europe")
(n4 / name, op, "Wen")
(p / person, name, n4 / name)
(s / start-01, ARG1, s2 / schedule-01)
(s / start-01, time, d / date-entity)
(s2 / schedule-01, ARG1, v / visit-01)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, n2 / nation)

Decoded in 556,327 microseconds
Sentence: Wen stated that the Chinese people are familiar with Germany particularly due to the profound influence of Karl Marx on China's revolution and economic construction.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (person :name (name :op "Karl" :op "Marx"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 23-24:  and => and
Span 20-21:  China => (country :name (name :op "China"))
Span 4-5:  Chinese => (country :name (name :op "China"))
Span 25-26:  construction => construct-01
Span 24-25:  economic => economy
Span 7-8:  familiar => familiarize-01
Span 9-10:  Germany => (country :name (name :op "Germany"))
Span 15-16:  influence => influence-01
Span 17-19:  Karl Marx => (person :name (name :op "Marx" :op "Karl"))
Span 10-11:  particularly => particular
Span 5-6:  people => people
Span 14-15:  profound => profound
Span 22-23:  revolution => revolution
Span 1-2:  stated => state-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),construction,construct-01,false), Span(24,25,List(1),economic,economy,false), Span(23,24,List(2),and,and,false), Span(22,23,List(3),revolution,revolution,false), Span(20,21,List(6, 5, 4),China,(country :name (name :op "China")),false), Span(17,19,List(10, 9, 8, 7),Karl Marx,(person :name (name :op "Marx" :op "Karl")),false), Span(15,16,List(11),influence,influence-01,false), Span(14,15,List(12),profound,profound,false), Span(10,11,List(13),particularly,particular,false), Span(9,10,List(16, 15, 14),Germany,(country :name (name :op "Germany")),false), Span(7,8,List(17),familiar,familiarize-01,false), Span(5,6,List(18),people,people,false), Span(4,5,List(21, 20, 19),Chinese,(country :name (name :op "China")),false), Span(1,2,List(22),stated,state-01,false), Span(0,1,List(25, 24, 23),Wen,(person :name (name :op "Wen")),false)),Map(2 -> and, 5 -> name, 12 -> profound, 8 -> name, 15 -> name, 21 -> "China", 18 -> people, 24 -> name, 7 -> person, 1 -> economy, 17 -> familiarize-01, 23 -> person, 4 -> country, 11 -> influence-01, 14 -> country, 20 -> name, 6 -> "China", 9 -> "Marx", 0 -> construct-01, 22 -> state-01, 16 -> "Germany", 19 -> country, 10 -> "Karl", 3 -> revolution, 25 -> "Wen", 13 -> particular),Map(e -> economy, n -> name, p5 -> person, p2 -> profound, n4 -> name, c4 -> country, s -> state-01, p -> person, a -> and, c3 -> country, n3 -> name, p4 -> people, r -> revolution, i -> influence-01, c -> construct-01, f -> familiarize-01, p3 -> particular, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@1b7332a7,Annotation([Ljava.lang.String;@77c233af,[Ljava.lang.String;@37b56ac7,[Ljava.lang.String;@37c41ec0),Annotation([Ljava.lang.String;@35a0e495,[Ljava.lang.String;@5399f6c5,[Ledu.cmu.lti.nlp.amr.Dependency;@4fe64d23),Annotation([Ljava.lang.String;@58437801,[Ljava.lang.String;@6af5bbd0,[Ljava.lang.String;@76464795),Annotation([Ljava.lang.String;@b34832b,[Ljava.lang.String;@48f4713c,[Ledu.cmu.lti.nlp.amr.Entity;@f1868c9))
AMR:
(a / and, op, c / construct-01)
(c / construct-01, ARG0, c2 / country)
(c / construct-01, ARG1, e / economy)
(c2 / country, mod, p3 / particular)
(c2 / country, name, n / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(f / familiarize-01, ARG1, p4 / people)
(f / familiarize-01, ARG2, c3 / country)
(i / influence-01, ARG0, p / person)
(i / influence-01, ARG1, a / and)
(i / influence-01, mod, p2 / profound)
(n / name, op, "China")
(n2 / name, op, "Karl")
(n2 / name, op, "Marx")
(n3 / name, op, "Germany")
(n4 / name, op, "China")
(n5 / name, op, "Wen")
(p / person, name, n2 / name)
(p4 / people, mod, c2 / country)
(p4 / people, mod, c4 / country)
(p5 / person, name, n5 / name)
(r / revolution, poss, c2 / country)
(s / state-01, ARG0, p5 / person)
(s / state-01, ARG1, f / familiarize-01)

Decoded in 1,309,291 microseconds
Sentence: Wen stated that many world-renowned thinkers, writers, philosophers and artists are German.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 12-13:  and => and
Span 13-14:  artists => artist
Span 15-16:  German => (country :name (name :op "Germany"))
Span 3-4:  many => many
Span 11-12:  philosophers => philosopher
Span 6-7:  renowned => renowned
Span 1-2:  stated => state-01
Span 7-8:  thinkers => thinker
Span 0-1:  Wen => (person :name (name :op "Wen"))
Span 4-5:  world => world
Span 9-10:  writers => (person :ARG0-of write-01)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(2, 1, 0),German,(country :name (name :op "Germany")),false), Span(13,14,List(3),artists,artist,false), Span(12,13,List(4),and,and,false), Span(11,12,List(5),philosophers,philosopher,false), Span(9,10,List(7, 6),writers,(person :ARG0-of write-01),false), Span(7,8,List(8),thinkers,thinker,false), Span(6,7,List(9),renowned,renowned,false), Span(4,5,List(10),world,world,false), Span(3,4,List(11),many,many,false), Span(1,2,List(12),stated,state-01,false), Span(0,1,List(15, 14, 13),Wen,(person :name (name :op "Wen")),false)),Map(2 -> "Germany", 5 -> philosopher, 12 -> state-01, 15 -> "Wen", 8 -> thinker, 7 -> write-01, 1 -> name, 4 -> and, 11 -> many, 14 -> name, 6 -> person, 0 -> country, 9 -> renowned, 3 -> artist, 10 -> world, 13 -> person),Map(n -> name, w -> write-01, t -> thinker, p2 -> person, s -> state-01, m -> many, p -> philosopher, a -> artist, w2 -> world, a2 -> and, r -> renowned, c -> country, p3 -> person, n2 -> name))),[Ljava.lang.String;@4ba6ec50,Annotation([Ljava.lang.String;@642413d4,[Ljava.lang.String;@fb2e3fd,[Ljava.lang.String;@43a09ce2),Annotation([Ljava.lang.String;@3f183caa,[Ljava.lang.String;@7b66322e,[Ledu.cmu.lti.nlp.amr.Dependency;@63538bb4),Annotation([Ljava.lang.String;@24534cb0,[Ljava.lang.String;@5a50d9fc,[Ljava.lang.String;@106d77da),Annotation([Ljava.lang.String;@6f9c5048,[Ljava.lang.String;@5114b7c7,[Ledu.cmu.lti.nlp.amr.Entity;@dd71b20))
AMR:
(a2 / and, op, a / artist)
(a2 / and, op, p / philosopher)
(a2 / and, op, p2 / person)
(a2 / and, op, t / thinker)
(c / country, domain, a2 / and)
(c / country, name, n / name)
(n / name, op, "Germany")
(n2 / name, op, "Wen")
(p3 / person, name, n2 / name)
(r / renowned, location, w2 / world)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, c / country)
(t / thinker, mod, r / renowned)
(t / thinker, quant, m / many)
(w / write-01, ARG0, p2 / person)

Decoded in 92,242 microseconds
Sentence: Wen stated that forerunner of German classic philosophy Gottfried leibnitz called China's Confucian thought an influence on the Enlightenment movement in 18th century Germany.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Gottfried" :op "leibnitz"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "Confucian"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "Confucian"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 23-24:  century => (temporal-quantity :unit century)
Span 11-12:  China => (country :name (name :op "China"))
Span 6-7:  classic => classic
Span 13-14:  Confucian => confucian
Span 19-20:  Enlightenment => enlighten-01
Span 3-4:  forerunner => forerun-00
Span 5-6:  German => (country :name (name :op "Germany"))
Span 24-25:  Germany => (country :name (name :op "Germany"))
Span 8-10:  Gottfried leibnitz => (person :name (name :op "Leibnitz" :op "Gottfried"))
Span 16-17:  influence => influence-01
Span 20-21:  movement => movement
Span 7-8:  philosophy => philosophy
Span 1-2:  stated => state-01
Span 14-15:  thought => think-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(2, 1, 0),Germany,(country :name (name :op "Germany")),false), Span(23,24,List(4, 3),century,(temporal-quantity :unit century),false), Span(20,21,List(5),movement,movement,false), Span(19,20,List(6),Enlightenment,enlighten-01,false), Span(16,17,List(7),influence,influence-01,false), Span(14,15,List(8),thought,think-01,false), Span(13,14,List(9),Confucian,confucian,false), Span(11,12,List(12, 11, 10),China,(country :name (name :op "China")),false), Span(8,10,List(16, 15, 14, 13),Gottfried leibnitz,(person :name (name :op "Leibnitz" :op "Gottfried")),false), Span(7,8,List(17),philosophy,philosophy,false), Span(6,7,List(18),classic,classic,false), Span(5,6,List(21, 20, 19),German,(country :name (name :op "Germany")),false), Span(3,4,List(22),forerunner,forerun-00,false), Span(1,2,List(23),stated,state-01,false), Span(0,1,List(26, 25, 24),Wen,(person :name (name :op "Wen")),false)),Map(2 -> "Germany", 5 -> movement, 12 -> "China", 8 -> think-01, 15 -> "Leibnitz", 21 -> "Germany", 18 -> classic, 24 -> person, 7 -> influence-01, 1 -> name, 17 -> philosophy, 23 -> state-01, 26 -> "Wen", 4 -> century, 11 -> name, 14 -> name, 20 -> name, 6 -> enlighten-01, 9 -> confucian, 0 -> country, 22 -> forerun-00, 16 -> "Gottfried", 19 -> country, 10 -> country, 3 -> temporal-quantity, 25 -> name, 13 -> person),Map(e -> enlighten-01, n -> name, t -> temporal-quantity, p2 -> philosophy, n4 -> name, c4 -> country, s -> state-01, m -> movement, p -> person, c3 -> confucian, n3 -> name, c6 -> country, t2 -> think-01, i -> influence-01, c -> country, f -> forerun-00, p3 -> person, c2 -> century, n2 -> name, n5 -> name, c5 -> classic))),[Ljava.lang.String;@767f6ee7,Annotation([Ljava.lang.String;@7b6c6e70,[Ljava.lang.String;@f324455,[Ljava.lang.String;@3a894088),Annotation([Ljava.lang.String;@370c1968,[Ljava.lang.String;@2f0bfe17,[Ledu.cmu.lti.nlp.amr.Dependency;@3206174f),Annotation([Ljava.lang.String;@42fb8c87,[Ljava.lang.String;@15eb0ae9,[Ljava.lang.String;@65e0b505),Annotation([Ljava.lang.String;@67de7a99,[Ljava.lang.String;@795f5d51,[Ledu.cmu.lti.nlp.amr.Entity;@34aeacd1))
AMR:
(c / country, name, n / name)
(c4 / country, name, n2 / name)
(c6 / country, name, n4 / name)
(f / forerun-00, ARG0, p / person)
(f / forerun-00, ARG1, p2 / philosophy)
(i / influence-01, ARG0, t2 / think-01)
(i / influence-01, ARG1, m / movement)
(i / influence-01, location, c / country)
(m / movement, topic, e / enlighten-01)
(n / name, op, "Germany")
(n2 / name, op, "China")
(n3 / name, op, "Gottfried")
(n3 / name, op, "Leibnitz")
(n4 / name, op, "Germany")
(n5 / name, op, "Wen")
(p / person, name, n3 / name)
(p2 / philosophy, mod, c / country)
(p2 / philosophy, mod, c5 / classic)
(p2 / philosophy, mod, c6 / country)
(p2 / philosophy, mod, t / temporal-quantity)
(p3 / person, name, n5 / name)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, f / forerun-00)
(t / temporal-quantity, unit, c2 / century)
(t2 / think-01, ARG1, c3 / confucian)
(t2 / think-01, mod, c4 / country)

Decoded in 374,037 microseconds
Sentence: Wen stated that the purpose of his visit to Germany is to advance trade, economic and technological exchanges.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 12-13:  advance => advance-01
Span 16-17:  and => and
Span 15-16:  economic => economy
Span 18-19:  exchanges => exchange-01
Span 9-10:  Germany => (country :name (name :op "Germany"))
Span 4-5:  purpose => purpose-01
Span 1-2:  stated => state-01
Span 17-18:  technological => technology
Span 13-14:  trade => trade-01
Span 7-8:  visit => visit-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 44 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(0),exchanges,exchange-01,false), Span(17,18,List(1),technological,technology,false), Span(16,17,List(2),and,and,false), Span(15,16,List(3),economic,economy,false), Span(13,14,List(4),trade,trade-01,false), Span(12,13,List(5),advance,advance-01,false), Span(9,10,List(8, 7, 6),Germany,(country :name (name :op "Germany")),false), Span(7,8,List(9),visit,visit-01,false), Span(4,5,List(10),purpose,purpose-01,false), Span(1,2,List(11),stated,state-01,false), Span(0,1,List(14, 13, 12),Wen,(person :name (name :op "Wen")),false)),Map(2 -> and, 5 -> advance-01, 12 -> person, 8 -> "Germany", 7 -> name, 1 -> technology, 4 -> trade-01, 11 -> state-01, 14 -> "Wen", 6 -> country, 0 -> exchange-01, 9 -> visit-01, 3 -> economy, 10 -> purpose-01, 13 -> name),Map(e -> exchange-01, n -> name, t -> technology, e2 -> economy, p2 -> person, s -> state-01, v -> visit-01, p -> purpose-01, a -> and, t2 -> trade-01, a2 -> advance-01, c -> country, n2 -> name))),[Ljava.lang.String;@54067fdc,Annotation([Ljava.lang.String;@4098dd77,[Ljava.lang.String;@43aeb5e0,[Ljava.lang.String;@2274160),Annotation([Ljava.lang.String;@65383667,[Ljava.lang.String;@63cd2cd2,[Ledu.cmu.lti.nlp.amr.Dependency;@557a84fe),Annotation([Ljava.lang.String;@6deee370,[Ljava.lang.String;@49c17ba4,[Ljava.lang.String;@43e065f2),Annotation([Ljava.lang.String;@423c5404,[Ljava.lang.String;@5853ca50,[Ledu.cmu.lti.nlp.amr.Entity;@1a0d96a5))
AMR:
(a / and, op, e / exchange-01)
(a2 / advance-01, ARG1, a / and)
(c / country, name, n / name)
(e / exchange-01, mod, t / technology)
(n / name, op, "Germany")
(n2 / name, op, "Wen")
(p / purpose-01, ARG0, v / visit-01)
(p / purpose-01, ARG1, a2 / advance-01)
(p2 / person, name, n2 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, v / visit-01)
(t2 / trade-01, ARG1, v / visit-01)
(v / visit-01, ARG0, e2 / economy)
(v / visit-01, ARG1, c / country)

Decoded in 622,935 microseconds
Sentence: The governments of China and Germany are expected to further increase cooperation in this regard.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 4-5:  and => and
Span 3-4:  China => (country :name (name :op "China"))
Span 11-12:  cooperation => cooperate-01
Span 7-8:  expected => expect-01
Span 9-10:  further => further
Span 5-6:  Germany => (country :name (name :op "Germany"))
Span 1-2:  governments => (government-organization :ARG0-of govern-01)
Span 10-11:  increase => increase-01
Span 14-15:  regard => regard-01
Span 13-14:  this => this

Langrangian relaxation converged after 60 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(14,15,List(0),regard,regard-01,false), Span(13,14,List(1),this,this,false), Span(11,12,List(2),cooperation,cooperate-01,false), Span(10,11,List(3),increase,increase-01,false), Span(9,10,List(4),further,further,false), Span(7,8,List(5),expected,expect-01,false), Span(5,6,List(8, 7, 6),Germany,(country :name (name :op "Germany")),false), Span(4,5,List(9),and,and,false), Span(3,4,List(12, 11, 10),China,(country :name (name :op "China")),false), Span(1,2,List(14, 13),governments,(government-organization :ARG0-of govern-01),false)),Map(2 -> cooperate-01, 5 -> expect-01, 12 -> "China", 8 -> "Germany", 7 -> name, 1 -> this, 4 -> further, 11 -> name, 14 -> govern-01, 6 -> country, 0 -> regard-01, 9 -> and, 3 -> increase-01, 10 -> country, 13 -> government-organization),Map(e -> expect-01, n -> name, t -> this, g2 -> govern-01, g -> government-organization, a -> and, c3 -> country, r -> regard-01, i -> increase-01, c -> cooperate-01, f -> further, c2 -> country, n2 -> name))),[Ljava.lang.String;@5a02bfe3,Annotation([Ljava.lang.String;@7a3e5cd3,[Ljava.lang.String;@3c79088e,[Ljava.lang.String;@4a37191a),Annotation([Ljava.lang.String;@5854a18,[Ljava.lang.String;@d5556bf,[Ledu.cmu.lti.nlp.amr.Dependency;@791c12e3),Annotation([Ljava.lang.String;@b112b13,[Ljava.lang.String;@24eb65e3,[Ljava.lang.String;@3ac3f6f),Annotation([Ljava.lang.String;@1abebef3,[Ljava.lang.String;@18f55704,[Ledu.cmu.lti.nlp.amr.Entity;@67cefd84))
AMR:
(a / and, op, c3 / country)
(a / and, op, g / government-organization)
(c / cooperate-01, ARG1, r / regard-01)
(c / cooperate-01, mod, f / further)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(e / expect-01, ARG1, i / increase-01)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(i / increase-01, ARG0, a / and)
(i / increase-01, ARG1, c / cooperate-01)
(n / name, op, "Germany")
(n2 / name, op, "China")
(r / regard-01, mod, t / this)

Decoded in 813,723 microseconds
Sentence: Wen spoke of his brief visit to Frankfurt during a tour of Nordic nations in 1988 and stated that the friendship between China and Germany is sincere, active and fruitful.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Frankfurt"))
NER Entity: (thing :name (name :op "Nordic"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Frankfurt"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 15-16:  1988 => (date-entity :year 1988)
Span 28-29:  active => active
Span 29-30:  and => and
Span 23-24:  and => and
Span 16-17:  and => and
Span 21-22:  between => between
Span 4-5:  brief => brief
Span 22-23:  China => (country :name (name :op "China"))
Span 8-9:  during => during
Span 7-8:  Frankfurt => (city :name (name :op "Frankfurt"))
Span 20-21:  friendship => friendship
Span 30-31:  fruitful => fruitful
Span 24-25:  Germany => (country :name (name :op "Germany"))
Span 13-14:  nations => nation
Span 26-27:  sincere => sincere
Span 1-2:  spoke => speak-01
Span 17-18:  stated => state-01
Span 10-11:  tour => tour-01
Span 5-6:  visit => visit-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(30,31,List(0),fruitful,fruitful,false), Span(29,30,List(1),and,and,false), Span(28,29,List(2),active,active,false), Span(26,27,List(3),sincere,sincere,false), Span(24,25,List(6, 5, 4),Germany,(country :name (name :op "Germany")),false), Span(23,24,List(7),and,and,false), Span(22,23,List(10, 9, 8),China,(country :name (name :op "China")),false), Span(21,22,List(11),between,between,false), Span(20,21,List(12),friendship,friendship,false), Span(17,18,List(13),stated,state-01,false), Span(16,17,List(14),and,and,false), Span(15,16,List(16, 15),1988,(date-entity :year 1988),false), Span(13,14,List(17),nations,nation,false), Span(10,11,List(18),tour,tour-01,false), Span(8,9,List(19),during,during,false), Span(7,8,List(22, 21, 20),Frankfurt,(city :name (name :op "Frankfurt")),false), Span(5,6,List(23),visit,visit-01,false), Span(4,5,List(24),brief,brief,false), Span(1,2,List(25),spoke,speak-01,false), Span(0,1,List(28, 27, 26),Wen,(person :name (name :op "Wen")),false)),Map(2 -> active, 5 -> name, 27 -> name, 12 -> friendship, 8 -> country, 15 -> date-entity, 21 -> name, 18 -> tour-01, 24 -> brief, 7 -> and, 1 -> and, 17 -> nation, 23 -> visit-01, 26 -> person, 4 -> country, 11 -> between, 14 -> and, 20 -> city, 28 -> "Wen", 6 -> "Germany", 9 -> name, 0 -> fruitful, 22 -> "Frankfurt", 16 -> 1988, 19 -> during, 10 -> "China", 3 -> sincere, 25 -> speak-01, 13 -> state-01),Map(n -> name, s2 -> state-01, t -> tour-01, b -> between, b2 -> brief, a3 -> and, n4 -> name, s -> sincere, v -> visit-01, d -> date-entity, 1 -> 1988, p -> person, a -> and, n3 -> nation, c3 -> city, d2 -> during, a2 -> active, c -> country, s3 -> speak-01, f2 -> friendship, f -> fruitful, n2 -> name, c2 -> country, a4 -> and, n5 -> name))),[Ljava.lang.String;@5fbe155,Annotation([Ljava.lang.String;@6add8e3f,[Ljava.lang.String;@58a2b917,[Ljava.lang.String;@48904d5a),Annotation([Ljava.lang.String;@12bbfc54,[Ljava.lang.String;@1491344a,[Ledu.cmu.lti.nlp.amr.Dependency;@59b65dce),Annotation([Ljava.lang.String;@1386313f,[Ljava.lang.String;@5e922647,[Ljava.lang.String;@433c6abb),Annotation([Ljava.lang.String;@288f173f,[Ljava.lang.String;@a22c4d8,[Ledu.cmu.lti.nlp.amr.Entity;@45cd7bc5))
AMR:
(a3 / and, domain, f2 / friendship)
(a3 / and, op, a2 / active)
(a3 / and, op, f / fruitful)
(a3 / and, op, s / sincere)
(a4 / and, op, s2 / state-01)
(a4 / and, op, s3 / speak-01)
(b / between, op, c / country)
(b / between, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / city, name, n4 / name)
(d / date-entity, year, 1 / 1988)
(d2 / during, op, t / tour-01)
(f2 / friendship, mod, b / between)
(n / name, op, "Germany")
(n2 / name, op, "China")
(n4 / name, op, "Frankfurt")
(n5 / name, op, "Wen")
(p / person, name, n5 / name)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, a / and)
(s3 / speak-01, ARG0, p / person)
(s3 / speak-01, ARG1, v / visit-01)
(t / tour-01, ARG0, p / person)
(t / tour-01, ARG1, n3 / nation)
(t / tour-01, time, d / date-entity)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, s / sincere)
(v / visit-01, destination, c3 / city)
(v / visit-01, mod, b2 / brief)
(v / visit-01, time, t / tour-01)

Decoded in 1,812,636 microseconds
Sentence: Wen pledged to establish a development goal for Sino-German relations stating that mutual trust constitutes the foundation of bilateral relations.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (organization :name (name :op "Sino" :op "-" :op "German"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 20-21:  bilateral => bilateral
Span 16-17:  constitutes => constitute-01
Span 5-6:  development => develop-02
Span 3-4:  establish => establish-01
Span 18-19:  foundation => foundation
Span 10-11:  German => (country :name (name :op "Germany"))
Span 6-7:  goal => goal
Span 14-15:  mutual => mutual
Span 1-2:  pledged => pledge-01
Span 21-22:  relations => relation
Span 11-12:  relations => relation
Span 12-13:  stating => state-01
Span 15-16:  trust => trust-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),relations,relation,false), Span(20,21,List(1),bilateral,bilateral,false), Span(18,19,List(2),foundation,foundation,false), Span(16,17,List(3),constitutes,constitute-01,false), Span(15,16,List(4),trust,trust-01,false), Span(14,15,List(5),mutual,mutual,false), Span(12,13,List(6),stating,state-01,false), Span(11,12,List(7),relations,relation,false), Span(10,11,List(10, 9, 8),German,(country :name (name :op "Germany")),false), Span(6,7,List(11),goal,goal,false), Span(5,6,List(12),development,develop-02,false), Span(3,4,List(13),establish,establish-01,false), Span(1,2,List(14),pledged,pledge-01,false), Span(0,1,List(17, 16, 15),Wen,(person :name (name :op "Wen")),false)),Map(2 -> foundation, 5 -> mutual, 12 -> develop-02, 15 -> person, 8 -> country, 7 -> relation, 17 -> "Wen", 1 -> bilateral, 4 -> trust-01, 11 -> goal, 14 -> pledge-01, 6 -> state-01, 0 -> relation, 9 -> name, 16 -> name, 3 -> constitute-01, 10 -> "Germany", 13 -> establish-01),Map(e -> establish-01, n -> name, b -> bilateral, t -> trust-01, p2 -> person, s -> state-01, m -> mutual, d -> develop-02, p -> pledge-01, r2 -> relation, g -> goal, r -> relation, c -> constitute-01, f -> foundation, n2 -> name, c2 -> country))),[Ljava.lang.String;@6504a875,Annotation([Ljava.lang.String;@35e26d05,[Ljava.lang.String;@29fa6b65,[Ljava.lang.String;@7c72ecc),Annotation([Ljava.lang.String;@47406941,[Ljava.lang.String;@61ecbee9,[Ledu.cmu.lti.nlp.amr.Dependency;@1bb740f2),Annotation([Ljava.lang.String;@2538bc06,[Ljava.lang.String;@61f6d381,[Ljava.lang.String;@656922a0),Annotation([Ljava.lang.String;@44784e2f,[Ljava.lang.String;@2440022a,[Ledu.cmu.lti.nlp.amr.Entity;@737db7f8))
AMR:
(c / constitute-01, ARG0, t / trust-01)
(c / constitute-01, ARG1, f / foundation)
(c2 / country, name, n / name)
(d / develop-02, ARG1, b / bilateral)
(e / establish-01, ARG0, p2 / person)
(e / establish-01, ARG1, g / goal)
(f / foundation, mod, r / relation)
(g / goal, beneficiary, r2 / relation)
(g / goal, topic, d / develop-02)
(n / name, op, "Germany")
(n2 / name, op, "Wen")
(p / pledge-01, ARG0, p2 / person)
(p / pledge-01, ARG2, e / establish-01)
(p2 / person, name, n2 / name)
(r2 / relation, mod, c2 / country)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, c / constitute-01)
(t / trust-01, mod, m / mutual)

Decoded in 555,175 microseconds
Sentence: Wen stated that trade between China and Germany has amounted to 41.8 billion U.S. dollars totaling one-third of China-Europe trade volume.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (thing :name (name :op "China" :op "-" :op "Europe"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 9-10:  amounted => amount-01
Span 6-7:  and => and
Span 4-5:  between => between
Span 20-21:  China => (country :name (name :op "China"))
Span 5-6:  China => (country :name (name :op "China"))
Span 14-15:  dollars => (monetary-quantity :unit dollar)
Span 22-23:  Europe => (continent :name (name :op "Europe"))
Span 7-8:  Germany => (country :name (name :op "Germany"))
Span 16-17:  one => 1
Span 1-2:  stated => state-01
Span 15-16:  totaling => total-01
Span 23-24:  trade => trade-01
Span 3-4:  trade => trade-01
Span 13-14:  U.S. => (country :name (name :op "U.S."))
Span 24-25:  volume => volume
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),volume,volume,false), Span(23,24,List(1),trade,trade-01,false), Span(22,23,List(4, 3, 2),Europe,(continent :name (name :op "Europe")),false), Span(20,21,List(7, 6, 5),China,(country :name (name :op "China")),false), Span(16,17,List(8),one,1,false), Span(15,16,List(9),totaling,total-01,false), Span(14,15,List(11, 10),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(14, 13, 12),U.S.,(country :name (name :op "U.S.")),false), Span(9,10,List(15),amounted,amount-01,false), Span(7,8,List(18, 17, 16),Germany,(country :name (name :op "Germany")),false), Span(6,7,List(19),and,and,false), Span(5,6,List(22, 21, 20),China,(country :name (name :op "China")),false), Span(4,5,List(23),between,between,false), Span(3,4,List(24),trade,trade-01,false), Span(1,2,List(25),stated,state-01,false), Span(0,1,List(28, 27, 26),Wen,(person :name (name :op "Wen")),false)),Map(2 -> continent, 5 -> country, 27 -> name, 12 -> country, 8 -> 1, 15 -> amount-01, 21 -> name, 18 -> "Germany", 24 -> trade-01, 7 -> "China", 1 -> trade-01, 17 -> name, 23 -> between, 26 -> person, 4 -> "Europe", 11 -> dollar, 14 -> "U.S.", 20 -> country, 28 -> "Wen", 6 -> name, 9 -> total-01, 0 -> volume, 22 -> "China", 16 -> country, 19 -> and, 10 -> monetary-quantity, 3 -> name, 25 -> state-01, 13 -> name),Map(n -> name, b -> between, t -> trade-01, n4 -> name, c4 -> country, s -> state-01, v -> volume, m -> monetary-quantity, d -> dollar, t3 -> trade-01, 1 -> 1, p -> person, c3 -> country, n3 -> name, a -> amount-01, n6 -> name, t2 -> total-01, a2 -> and, c -> continent, c2 -> country, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@5f2de715,Annotation([Ljava.lang.String;@5922d3e9,[Ljava.lang.String;@7d57dbb5,[Ljava.lang.String;@630b6190),Annotation([Ljava.lang.String;@532e27ab,[Ljava.lang.String;@1cdc1bbc,[Ledu.cmu.lti.nlp.amr.Dependency;@5f95f1e1),Annotation([Ljava.lang.String;@672a1c62,[Ljava.lang.String;@459b6c53,[Ljava.lang.String;@39e69ea7),Annotation([Ljava.lang.String;@490c7a83,[Ljava.lang.String;@7e72a6cc,[Ledu.cmu.lti.nlp.amr.Entity;@6015a4a5))
AMR:
(a / amount-01, ARG1, t / trade-01)
(a / amount-01, ARG2, m / monetary-quantity)
(a2 / and, op, a / amount-01)
(a2 / and, op, t2 / total-01)
(b / between, op, c4 / country)
(b / between, op, c5 / country)
(c / continent, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(d / dollar, mod, c3 / country)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Europe")
(n2 / name, op, "China")
(n3 / name, op, "U.S.")
(n4 / name, op, "Germany")
(n5 / name, op, "China")
(n6 / name, op, "Wen")
(p / person, name, n6 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a2 / and)
(t / trade-01, ARG2, c4 / country)
(t2 / total-01, ARG1, 1 / 1)
(t2 / total-01, ARG2, v / volume)
(t3 / trade-01, ARG1, c / continent)
(t3 / trade-01, ARG2, c2 / country)
(t3 / trade-01, location, b / between)

Decoded in 1,808,496 microseconds
Sentence: Wen stated that both China-German and China-Europe trade are expected to double by 2010.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "China" :op "-" :op "Europe"))
NER Entity: (thing :name (name :op "China" :op "-" :op "Europe"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 17-18:  2010 => (date-entity :year 2010)
Span 7-8:  and => and
Span 3-4:  both => both
Span 8-9:  China => (country :name (name :op "China"))
Span 4-5:  China => (country :name (name :op "China"))
Span 15-16:  double => double-01
Span 10-11:  Europe => (continent :name (name :op "Europe"))
Span 13-14:  expected => expect-01
Span 6-7:  German => (country :name (name :op "Germany"))
Span 1-2:  stated => state-01
Span 11-12:  trade => trade-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(1, 0),2010,(date-entity :year 2010),false), Span(15,16,List(2),double,double-01,false), Span(13,14,List(3),expected,expect-01,false), Span(11,12,List(4),trade,trade-01,false), Span(10,11,List(7, 6, 5),Europe,(continent :name (name :op "Europe")),false), Span(8,9,List(10, 9, 8),China,(country :name (name :op "China")),false), Span(7,8,List(11),and,and,false), Span(6,7,List(14, 13, 12),German,(country :name (name :op "Germany")),false), Span(4,5,List(17, 16, 15),China,(country :name (name :op "China")),false), Span(3,4,List(18),both,both,false), Span(1,2,List(19),stated,state-01,false), Span(0,1,List(22, 21, 20),Wen,(person :name (name :op "Wen")),false)),Map(2 -> double-01, 5 -> continent, 12 -> country, 15 -> country, 8 -> country, 21 -> name, 18 -> both, 7 -> "Europe", 17 -> "China", 1 -> 2010, 4 -> trade-01, 11 -> and, 14 -> "Germany", 20 -> person, 6 -> name, 22 -> "Wen", 0 -> date-entity, 9 -> name, 16 -> name, 19 -> state-01, 3 -> expect-01, 10 -> "China", 13 -> name),Map(e -> expect-01, n -> name, 2 -> 2010, b -> both, t -> trade-01, n4 -> name, c4 -> country, s -> state-01, d -> date-entity, p -> person, a -> and, c3 -> country, n3 -> name, d2 -> double-01, c -> continent, c2 -> country, n2 -> name, n5 -> name))),[Ljava.lang.String;@6d0b0da6,Annotation([Ljava.lang.String;@4779aae6,[Ljava.lang.String;@2cd62003,[Ljava.lang.String;@61ab89b0),Annotation([Ljava.lang.String;@5478ce1e,[Ljava.lang.String;@5edc70ed,[Ledu.cmu.lti.nlp.amr.Dependency;@4317850d),Annotation([Ljava.lang.String;@7e4c72d6,[Ljava.lang.String;@6cd64b3f,[Ljava.lang.String;@51b01550),Annotation([Ljava.lang.String;@2ef0dd86,[Ljava.lang.String;@3337d04c,[Ledu.cmu.lti.nlp.amr.Entity;@6de6faa6))
AMR:
(a / and, op, c / continent)
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(b / both, op, c2 / country)
(c / continent, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(d / date-entity, year, 2 / 2010)
(d2 / double-01, ARG1, t / trade-01)
(d2 / double-01, time, d / date-entity)
(e / expect-01, ARG1, d2 / double-01)
(n / name, op, "Europe")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(n4 / name, op, "China")
(n5 / name, op, "Wen")
(p / person, name, n5 / name)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, e / expect-01)
(t / trade-01, ARG2, a / and)
(t / trade-01, mod, b / both)

Decoded in 870,242 microseconds
Sentence: Wen stated that the governments of China and Germany plan close cooperation in high-tech research and development and among medium and small-sized enterprises.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 22-23:  and => and
Span 19-20:  and => and
Span 17-18:  and => and
Span 7-8:  and => and
Span 6-7:  China => (country :name (name :op "China"))
Span 11-12:  cooperation => cooperate-01
Span 18-19:  development => develop-02
Span 26-27:  enterprises => enterprise
Span 8-9:  Germany => (country :name (name :op "Germany"))
Span 4-5:  governments => (government-organization :ARG0-of govern-01)
Span 13-14:  high => high
Span 21-22:  medium => medium
Span 9-10:  plan => plan-01
Span 16-17:  research => research-01
Span 25-26:  sized => size-01
Span 23-24:  small => small
Span 1-2:  stated => state-01
Span 15-16:  tech => technology
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),enterprises,enterprise,false), Span(25,26,List(1),sized,size-01,false), Span(23,24,List(2),small,small,false), Span(22,23,List(3),and,and,false), Span(21,22,List(4),medium,medium,false), Span(19,20,List(5),and,and,false), Span(18,19,List(6),development,develop-02,false), Span(17,18,List(7),and,and,false), Span(16,17,List(8),research,research-01,false), Span(15,16,List(9),tech,technology,false), Span(13,14,List(10),high,high,false), Span(11,12,List(11),cooperation,cooperate-01,false), Span(9,10,List(12),plan,plan-01,false), Span(8,9,List(15, 14, 13),Germany,(country :name (name :op "Germany")),false), Span(7,8,List(16),and,and,false), Span(6,7,List(19, 18, 17),China,(country :name (name :op "China")),false), Span(4,5,List(21, 20),governments,(government-organization :ARG0-of govern-01),false), Span(1,2,List(22),stated,state-01,false), Span(0,1,List(25, 24, 23),Wen,(person :name (name :op "Wen")),false)),Map(2 -> small, 5 -> and, 12 -> plan-01, 8 -> research-01, 15 -> "Germany", 21 -> govern-01, 18 -> name, 24 -> name, 7 -> and, 1 -> size-01, 17 -> country, 23 -> person, 4 -> medium, 11 -> cooperate-01, 14 -> name, 20 -> government-organization, 6 -> develop-02, 9 -> technology, 0 -> enterprise, 22 -> state-01, 16 -> and, 19 -> "China", 10 -> high, 3 -> and, 25 -> "Wen", 13 -> country),Map(e -> enterprise, n -> name, h -> high, s2 -> small, t -> technology, p2 -> person, a3 -> and, s -> size-01, m -> medium, d -> develop-02, g2 -> govern-01, g -> government-organization, p -> plan-01, n3 -> name, c3 -> country, a -> and, a2 -> and, r -> research-01, s3 -> state-01, c -> cooperate-01, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@3cad68df,Annotation([Ljava.lang.String;@14998e21,[Ljava.lang.String;@1921994e,[Ljava.lang.String;@43c87306),Annotation([Ljava.lang.String;@14f40030,[Ljava.lang.String;@4c447c09,[Ledu.cmu.lti.nlp.amr.Dependency;@593a6726),Annotation([Ljava.lang.String;@596a7f44,[Ljava.lang.String;@6dab01d9,[Ljava.lang.String;@2e09c51),Annotation([Ljava.lang.String;@869d87c,[Ljava.lang.String;@2f3166a,[Ledu.cmu.lti.nlp.amr.Entity;@37637a24))
AMR:
(a / and, op, g / government-organization)
(a2 / and, op, d / develop-02)
(a2 / and, op, r / research-01)
(a3 / and, op, e / enterprise)
(a4 / and, op, a2 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, c3 / country)
(c / cooperate-01, ARG1, g / government-organization)
(c / cooperate-01, ARG2, a4 / and)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d / develop-02, ARG1, t / technology)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "Germany")
(n2 / name, op, "China")
(n3 / name, op, "Wen")
(p / plan-01, ARG1, c / cooperate-01)
(p2 / person, name, n3 / name)
(r / research-01, ARG1, m / medium)
(s / size-01, ARG1, e / enterprise)
(s / size-01, ARG2, s2 / small)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, p / plan-01)
(t / technology, mod, h / high)

Decoded in 2,000,621 microseconds
Sentence: Wen stated that it is important to create channels for settling trade disputes between the 2 countries and that China and Germany should address each other's concerns.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 15-16:  2 => 2
Span 23-24:  address => address-02
Span 20-21:  and => and
Span 17-18:  and => and
Span 13-14:  between => between
Span 8-9:  channels => channel
Span 19-20:  China => (country :name (name :op "China"))
Span 27-28:  concerns => concern-01
Span 16-17:  countries => country
Span 7-8:  create => create-01
Span 12-13:  disputes => dispute-01
Span 24-25:  each => each
Span 21-22:  Germany => (country :name (name :op "Germany"))
Span 5-6:  important => important
Span 3-4:  it => it
Span 25-26:  other => other
Span 10-11:  settling => settle-02
Span 22-23:  should => recommend-01
Span 1-2:  stated => state-01
Span 11-12:  trade => trade-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),concerns,concern-01,false), Span(25,26,List(1),other,other,false), Span(24,25,List(2),each,each,false), Span(23,24,List(3),address,address-02,false), Span(22,23,List(4),should,recommend-01,false), Span(21,22,List(7, 6, 5),Germany,(country :name (name :op "Germany")),false), Span(20,21,List(8),and,and,false), Span(19,20,List(11, 10, 9),China,(country :name (name :op "China")),false), Span(17,18,List(12),and,and,false), Span(16,17,List(13),countries,country,false), Span(15,16,List(14),2,2,false), Span(13,14,List(15),between,between,false), Span(12,13,List(16),disputes,dispute-01,false), Span(11,12,List(17),trade,trade-01,false), Span(10,11,List(18),settling,settle-02,false), Span(8,9,List(19),channels,channel,false), Span(7,8,List(20),create,create-01,false), Span(5,6,List(21),important,important,false), Span(3,4,List(22),it,it,false), Span(1,2,List(23),stated,state-01,false), Span(0,1,List(26, 25, 24),Wen,(person :name (name :op "Wen")),false)),Map(2 -> each, 5 -> country, 12 -> and, 8 -> and, 15 -> between, 21 -> important, 18 -> settle-02, 24 -> person, 7 -> "Germany", 1 -> other, 17 -> trade-01, 23 -> state-01, 26 -> "Wen", 4 -> recommend-01, 11 -> "China", 14 -> 2, 20 -> create-01, 6 -> name, 9 -> country, 0 -> concern-01, 22 -> it, 16 -> dispute-01, 19 -> channel, 10 -> name, 3 -> address-02, 25 -> name, 13 -> country),Map(e -> each, n -> name, 2 -> 2, s2 -> state-01, t -> trade-01, b -> between, a3 -> and, c4 -> country, s -> settle-02, d -> dispute-01, p -> person, n3 -> name, a -> address-02, c3 -> country, c6 -> create-01, i2 -> it, i -> important, r -> recommend-01, a2 -> and, c -> concern-01, o -> other, c2 -> country, n2 -> name, c5 -> channel))),[Ljava.lang.String;@31e76a8d,Annotation([Ljava.lang.String;@770beef5,[Ljava.lang.String;@6dd1f638,[Ljava.lang.String;@414f13fc),Annotation([Ljava.lang.String;@4b76aa5a,[Ljava.lang.String;@63a28987,[Ledu.cmu.lti.nlp.amr.Dependency;@120d3fd),Annotation([Ljava.lang.String;@38c9e0d6,[Ljava.lang.String;@4693a9ef,[Ljava.lang.String;@310aee0b),Annotation([Ljava.lang.String;@36327cec,[Ljava.lang.String;@410ae5ac,[Ledu.cmu.lti.nlp.amr.Entity;@1a8df0b3))
AMR:
(a / address-02, ARG0, c3 / country)
(a / address-02, ARG1, c / concern-01)
(a3 / and, op, i / important)
(a3 / and, op, r / recommend-01)
(b / between, op, c4 / country)
(c / concern-01, ARG0, a2 / and)
(c / concern-01, ARG1, e / each)
(c / concern-01, poss, o / other)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, quant, 2 / 2)
(c6 / create-01, ARG1, c5 / channel)
(c6 / create-01, purpose, s / settle-02)
(d / dispute-01, ARG0, c4 / country)
(d / dispute-01, ARG1, c2 / country)
(d / dispute-01, mod, t / trade-01)
(i / important, domain, c6 / create-01)
(i / important, domain, i2 / it)
(n / name, op, "Germany")
(n2 / name, op, "China")
(n3 / name, op, "Wen")
(p / person, name, n3 / name)
(r / recommend-01, ARG1, a2 / and)
(s / settle-02, ARG1, d / dispute-01)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, a3 / and)

Decoded in 1,615,532 microseconds
Sentence: China considers Germany the most important trade partner of Europe.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 0-1:  China => (country :name (name :op "China"))
Span 1-2:  considers => consider-01
Span 9-10:  Europe => (continent :name (name :op "Europe"))
Span 2-3:  Germany => (country :name (name :op "Germany"))
Span 5-6:  important => important
Span 4-5:  most => most
Span 7-8:  partner => partner-01
Span 6-7:  trade => trade-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(9,10,List(2, 1, 0),Europe,(continent :name (name :op "Europe")),false), Span(7,8,List(3),partner,partner-01,false), Span(6,7,List(4),trade,trade-01,false), Span(5,6,List(5),important,important,false), Span(4,5,List(6),most,most,false), Span(2,3,List(9, 8, 7),Germany,(country :name (name :op "Germany")),false), Span(1,2,List(10),considers,consider-01,false), Span(0,1,List(13, 12, 11),China,(country :name (name :op "China")),false)),Map(2 -> "Europe", 5 -> important, 12 -> name, 8 -> name, 7 -> country, 1 -> name, 4 -> trade-01, 11 -> country, 6 -> most, 0 -> continent, 9 -> "Germany", 3 -> partner-01, 10 -> consider-01, 13 -> "China"),Map(n -> name, t -> trade-01, c4 -> country, m -> most, p -> partner-01, n3 -> name, c3 -> consider-01, i -> important, c -> continent, n2 -> name, c2 -> country))),[Ljava.lang.String;@7c112f5f,Annotation([Ljava.lang.String;@5961e92d,[Ljava.lang.String;@4fd05028,[Ljava.lang.String;@3a2d3909),Annotation([Ljava.lang.String;@4fb392c4,[Ljava.lang.String;@194d329e,[Ledu.cmu.lti.nlp.amr.Dependency;@54d1608f),Annotation([Ljava.lang.String;@7e7fe6d,[Ljava.lang.String;@541179e7,[Ljava.lang.String;@24386839),Annotation([Ljava.lang.String;@7b32b129,[Ljava.lang.String;@439e3cb4,[Ledu.cmu.lti.nlp.amr.Entity;@1c9fbb61))
AMR:
(c / continent, name, n / name)
(c2 / country, name, n2 / name)
(c3 / consider-01, ARG0, c4 / country)
(c3 / consider-01, ARG1, p / partner-01)
(c4 / country, name, n3 / name)
(i / important, degree, m / most)
(n / name, op, "Europe")
(n2 / name, op, "Germany")
(n3 / name, op, "China")
(p / partner-01, ARG1, c2 / country)
(p / partner-01, location, c / continent)
(p / partner-01, mod, i / important)
(t / trade-01, ARG1, c3 / consider-01)

Decoded in 193,604 microseconds
Sentence: To support this statement Wen cited that 600 of the 7000 Chinese enterprises that invest internationally are in Germany.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 7-8:  600 => 600
Span 10-11:  7000 => 7000
Span 11-12:  Chinese => (country :name (name :op "China"))
Span 5-6:  cited => cite-01
Span 12-13:  enterprises => enterprise
Span 18-19:  Germany => (country :name (name :op "Germany"))
Span 15-16:  internationally => international
Span 14-15:  invest => invest-01
Span 3-4:  statement => state-01
Span 1-2:  support => support-01
Span 2-3:  this => this
Span 4-5:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(2, 1, 0),Germany,(country :name (name :op "Germany")),false), Span(15,16,List(3),internationally,international,false), Span(14,15,List(4),invest,invest-01,false), Span(12,13,List(5),enterprises,enterprise,false), Span(11,12,List(8, 7, 6),Chinese,(country :name (name :op "China")),false), Span(10,11,List(9),7000,7000,false), Span(7,8,List(10),600,600,false), Span(5,6,List(11),cited,cite-01,false), Span(4,5,List(14, 13, 12),Wen,(person :name (name :op "Wen")),false), Span(3,4,List(15),statement,state-01,false), Span(2,3,List(16),this,this,false), Span(1,2,List(17),support,support-01,false)),Map(2 -> "Germany", 5 -> enterprise, 12 -> person, 15 -> state-01, 8 -> "China", 7 -> name, 17 -> support-01, 1 -> name, 4 -> invest-01, 11 -> cite-01, 14 -> "Wen", 6 -> country, 0 -> country, 9 -> 7000, 16 -> this, 3 -> international, 10 -> 600, 13 -> name),Map(e -> enterprise, n -> name, s2 -> support-01, t -> this, s -> state-01, 7 -> 7000, p -> person, c3 -> cite-01, n3 -> name, i2 -> invest-01, i -> international, c -> country, 6 -> 600, c2 -> country, n2 -> name))),[Ljava.lang.String;@7b81616b,Annotation([Ljava.lang.String;@15d42ccb,[Ljava.lang.String;@279dd959,[Ljava.lang.String;@46383a78),Annotation([Ljava.lang.String;@36c281ed,[Ljava.lang.String;@244418a,[Ledu.cmu.lti.nlp.amr.Dependency;@4b5a078a),Annotation([Ljava.lang.String;@4c361f63,[Ljava.lang.String;@6ed922e1,[Ljava.lang.String;@4eb166a1),Annotation([Ljava.lang.String;@554c4eaa,[Ljava.lang.String;@29fd8e67,[Ledu.cmu.lti.nlp.amr.Entity;@e146f93))
AMR:
(7 / 7000, op, i2 / invest-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / cite-01, ARG0, p / person)
(c3 / cite-01, ARG1, e / enterprise)
(c3 / cite-01, location, c / country)
(c3 / cite-01, purpose, s2 / support-01)
(e / enterprise, quant, 6 / 600)
(i2 / invest-01, ARG1, c3 / cite-01)
(i2 / invest-01, manner, i / international)
(n / name, op, "Germany")
(n2 / name, op, "China")
(n3 / name, op, "Wen")
(p / person, name, n3 / name)
(s / state-01, ARG1, c2 / country)
(s / state-01, mod, t / this)
(s2 / support-01, ARG0, p / person)
(s2 / support-01, ARG1, s / state-01)

Decoded in 454,025 microseconds
Sentence: Wen stated that the Government of China will support enterprises which invest in Germany with loans, insurance, foreign exchange, finance and investment.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 23-24:  and => and
Span 6-7:  China => (country :name (name :op "China"))
Span 9-10:  enterprises => enterprise
Span 20-21:  exchange => exchange-01
Span 22-23:  finance => finance-01
Span 19-20:  foreign => foreign
Span 13-14:  Germany => (country :name (name :op "Germany"))
Span 4-5:  Government => (government-organization :ARG0-of govern-01)
Span 17-18:  insurance => insure-01
Span 11-12:  invest => invest-01
Span 24-25:  investment => invest-01
Span 15-16:  loans => loan-01
Span 1-2:  stated => state-01
Span 8-9:  support => support-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),investment,invest-01,false), Span(23,24,List(1),and,and,false), Span(22,23,List(2),finance,finance-01,false), Span(20,21,List(3),exchange,exchange-01,false), Span(19,20,List(4),foreign,foreign,false), Span(17,18,List(5),insurance,insure-01,false), Span(15,16,List(6),loans,loan-01,false), Span(13,14,List(9, 8, 7),Germany,(country :name (name :op "Germany")),false), Span(11,12,List(10),invest,invest-01,false), Span(9,10,List(11),enterprises,enterprise,false), Span(8,9,List(12),support,support-01,false), Span(6,7,List(15, 14, 13),China,(country :name (name :op "China")),false), Span(4,5,List(17, 16),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(18),stated,state-01,false), Span(0,1,List(21, 20, 19),Wen,(person :name (name :op "Wen")),false)),Map(2 -> finance-01, 5 -> insure-01, 12 -> support-01, 15 -> "China", 8 -> name, 21 -> "Wen", 18 -> state-01, 7 -> country, 17 -> govern-01, 1 -> and, 4 -> foreign, 11 -> enterprise, 14 -> name, 20 -> name, 6 -> loan-01, 0 -> invest-01, 9 -> "Germany", 16 -> government-organization, 19 -> person, 3 -> exchange-01, 10 -> invest-01, 13 -> country),Map(e -> exchange-01, n -> name, s2 -> state-01, e2 -> enterprise, s -> support-01, g2 -> govern-01, i3 -> invest-01, p -> person, g -> government-organization, n3 -> name, a -> and, i2 -> insure-01, i -> invest-01, c -> country, f2 -> foreign, l -> loan-01, f -> finance-01, n2 -> name, c2 -> country))),[Ljava.lang.String;@4bd5849e,Annotation([Ljava.lang.String;@7cdbaa50,[Ljava.lang.String;@39909d1a,[Ljava.lang.String;@1455154c),Annotation([Ljava.lang.String;@7343922c,[Ljava.lang.String;@526b2f3e,[Ledu.cmu.lti.nlp.amr.Dependency;@6f2e1024),Annotation([Ljava.lang.String;@536d97f8,[Ljava.lang.String;@3c50ad4b,[Ljava.lang.String;@37496720),Annotation([Ljava.lang.String;@28f9fedd,[Ljava.lang.String;@17947e6d,[Ledu.cmu.lti.nlp.amr.Entity;@2e17a321))
AMR:
(a / and, op, e / exchange-01)
(a / and, op, f / finance-01)
(a / and, op, i2 / insure-01)
(a / and, op, i3 / invest-01)
(a / and, op, l / loan-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e / exchange-01, mod, f2 / foreign)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(i / invest-01, ARG0, e2 / enterprise)
(i / invest-01, ARG2, c / country)
(n / name, op, "Germany")
(n2 / name, op, "China")
(n3 / name, op, "Wen")
(p / person, name, n3 / name)
(s / support-01, ARG0, g / government-organization)
(s / support-01, ARG1, e2 / enterprise)
(s / support-01, instrument, a / and)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, s / support-01)

Decoded in 234,490 microseconds
Sentence: Chinese investment in Germany is much less than German investment in China since China has only recently started investing in this respect.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 13-14:  China => (country :name (name :op "China"))
Span 11-12:  China => (country :name (name :op "China"))
Span 0-1:  Chinese => (country :name (name :op "China"))
Span 8-9:  German => (country :name (name :op "Germany"))
Span 3-4:  Germany => (country :name (name :op "Germany"))
Span 18-19:  investing => invest-01
Span 9-10:  investment => invest-01
Span 1-2:  investment => invest-01
Span 6-7:  less => less
Span 5-6:  much => much
Span 15-16:  only => only
Span 16-17:  recently => recent
Span 21-22:  respect => respect-01
Span 12-13:  since => since
Span 17-18:  started => start-01
Span 20-21:  this => this

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(21,22,List(0),respect,respect-01,false), Span(20,21,List(1),this,this,false), Span(18,19,List(2),investing,invest-01,false), Span(17,18,List(3),started,start-01,false), Span(16,17,List(4),recently,recent,false), Span(15,16,List(5),only,only,false), Span(13,14,List(8, 7, 6),China,(country :name (name :op "China")),false), Span(12,13,List(9),since,since,false), Span(11,12,List(12, 11, 10),China,(country :name (name :op "China")),false), Span(9,10,List(13),investment,invest-01,false), Span(8,9,List(16, 15, 14),German,(country :name (name :op "Germany")),false), Span(6,7,List(17),less,less,false), Span(5,6,List(18),much,much,false), Span(3,4,List(21, 20, 19),Germany,(country :name (name :op "Germany")),false), Span(1,2,List(22),investment,invest-01,false), Span(0,1,List(25, 24, 23),Chinese,(country :name (name :op "China")),false)),Map(2 -> invest-01, 5 -> only, 12 -> "China", 8 -> "China", 15 -> name, 21 -> "Germany", 18 -> much, 24 -> name, 7 -> name, 1 -> this, 17 -> less, 23 -> country, 4 -> recent, 11 -> name, 14 -> country, 20 -> name, 6 -> country, 9 -> since, 0 -> respect-01, 22 -> invest-01, 16 -> "Germany", 19 -> country, 10 -> country, 3 -> start-01, 25 -> "China", 13 -> invest-01),Map(n -> name, s2 -> since, t -> this, n4 -> name, c4 -> country, s -> start-01, m -> much, i3 -> invest-01, r2 -> recent, n3 -> name, c3 -> country, i2 -> invest-01, r -> respect-01, i -> invest-01, c -> country, l -> less, o -> only, c2 -> country, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@521bb1a4,Annotation([Ljava.lang.String;@35f3a22c,[Ljava.lang.String;@1a0c5e9,[Ljava.lang.String;@123d7057),Annotation([Ljava.lang.String;@1d247525,[Ljava.lang.String;@35ee466f,[Ledu.cmu.lti.nlp.amr.Dependency;@32e652b6),Annotation([Ljava.lang.String;@4ba02375,[Ljava.lang.String;@7593ea79,[Ljava.lang.String;@3289079a),Annotation([Ljava.lang.String;@32fa809f,[Ljava.lang.String;@788ba63e,[Ledu.cmu.lti.nlp.amr.Entity;@12a14b74))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(i / invest-01, ARG1, r / respect-01)
(i / invest-01, ARG2, c4 / country)
(i / invest-01, mod, l / less)
(i2 / invest-01, ARG0, c3 / country)
(i2 / invest-01, ARG2, c4 / country)
(i3 / invest-01, ARG2, c2 / country)
(l / less, compared-to, i3 / invest-01)
(l / less, degree, m / much)
(n / name, op, "China")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(n4 / name, op, "Germany")
(n5 / name, op, "China")
(r / respect-01, ARG1, c5 / country)
(r / respect-01, mod, t / this)
(s / start-01, ARG0, c / country)
(s / start-01, ARG1, i2 / invest-01)
(s / start-01, mod, o / only)
(s / start-01, time, r2 / recent)
(s2 / since, op, s / start-01)

Decoded in 2,071,112 microseconds
Sentence: Wen stated that German investment projects in China have exceeded 3500 with total investment near 10 billion U.S. dollars.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "U.S."))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 15-16:  10 => 10
Span 10-11:  3500 => 3500
Span 7-8:  China => (country :name (name :op "China"))
Span 18-19:  dollars => (monetary-quantity :unit dollar)
Span 9-10:  exceeded => exceed-01
Span 3-4:  German => (country :name (name :op "Germany"))
Span 13-14:  investment => invest-01
Span 4-5:  investment => invest-01
Span 14-15:  near => near
Span 5-6:  projects => project
Span 1-2:  stated => state-01
Span 12-13:  total => total
Span 17-18:  U.S. => (country :name (name :op "U.S."))
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 2 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(17,18,List(4, 3, 2),U.S.,(country :name (name :op "U.S.")),false), Span(15,16,List(5),10,10,false), Span(14,15,List(6),near,near,false), Span(13,14,List(7),investment,invest-01,false), Span(12,13,List(8),total,total,false), Span(10,11,List(9),3500,3500,false), Span(9,10,List(10),exceeded,exceed-01,false), Span(7,8,List(13, 12, 11),China,(country :name (name :op "China")),false), Span(5,6,List(14),projects,project,false), Span(4,5,List(15),investment,invest-01,false), Span(3,4,List(18, 17, 16),German,(country :name (name :op "Germany")),false), Span(1,2,List(19),stated,state-01,false), Span(0,1,List(22, 21, 20),Wen,(person :name (name :op "Wen")),false)),Map(2 -> country, 5 -> 10, 12 -> name, 15 -> invest-01, 8 -> total, 21 -> name, 18 -> "Germany", 7 -> invest-01, 17 -> name, 1 -> dollar, 4 -> "U.S.", 11 -> country, 14 -> project, 20 -> person, 6 -> near, 22 -> "Wen", 0 -> monetary-quantity, 9 -> 3500, 16 -> country, 19 -> state-01, 3 -> name, 10 -> exceed-01, 13 -> "China"),Map(e -> exceed-01, n -> name, t -> total, p2 -> person, n4 -> name, s -> state-01, m -> monetary-quantity, d -> dollar, 1 -> 10, p -> project, c3 -> country, n3 -> name, i2 -> invest-01, i -> invest-01, c -> country, 3 -> 3500, n2 -> near, c2 -> country, n5 -> name))),[Ljava.lang.String;@68ee3b6d,Annotation([Ljava.lang.String;@e76b097,[Ljava.lang.String;@2be95d31,[Ljava.lang.String;@338b49d3),Annotation([Ljava.lang.String;@2aa7399c,[Ljava.lang.String;@11eed657,[Ledu.cmu.lti.nlp.amr.Dependency;@708f018e),Annotation([Ljava.lang.String;@19a31b9d,[Ljava.lang.String;@a5bbaec,[Ljava.lang.String;@6d60899e),Annotation([Ljava.lang.String;@65eb76cd,[Ljava.lang.String;@6415f61e,[Ledu.cmu.lti.nlp.amr.Entity;@334ebcaa))
AMR:
(c / country, name, n / name)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(d / dollar, mod, c / country)
(e / exceed-01, ARG0, p / project)
(e / exceed-01, ARG1, n2 / near)
(e / exceed-01, ARG2, 3 / 3500)
(i / invest-01, ARG1, m / monetary-quantity)
(i / invest-01, mod, t / total)
(i2 / invest-01, ARG0, c3 / country)
(i2 / invest-01, ARG1, 1 / 10)
(i2 / invest-01, location, c2 / country)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "U.S.")
(n2 / near, op, m / monetary-quantity)
(n3 / name, op, "China")
(n4 / name, op, "Germany")
(n5 / name, op, "Wen")
(p / project, mod, i2 / invest-01)
(p2 / person, name, n5 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, e / exceed-01)

Decoded in 191,552 microseconds
Sentence: Some German firms such as Volkswagen, Siemens and Daimler-Chrysler have a reputation for high quality and efficiency.

NER Entity: (thing :name (name :op "German"))
NER Entity: (organization :name (name :op "Volkswagen"))
NER Entity: (organization :name (name :op "Siemens"))
NER Entity: (organization :name (name :op "Daimler" :op "-" :op "Chrysler"))
NER Entity: (organization :name (name :op "Siemens"))
NER Entity: (organization :name (name :op "Volkswagen"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 18-19:  and => and
Span 8-9:  and => and
Span 9-12:  Daimler - Chrysler => (company :name (name :op "Daimler-Chrysler"))
Span 19-20:  efficiency => efficiency
Span 2-3:  firms => firm
Span 1-2:  German => (country :name (name :op "Germany"))
Span 16-17:  high => high
Span 17-18:  quality => quality
Span 14-15:  reputation => repute-01
Span 7-8:  Siemens => (company :name (name :op "Siemens"))
Span 0-1:  Some => some
Span 3-4:  such => such
Span 5-6:  Volkswagen => (company :name (name :op "Volkswagen"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),efficiency,efficiency,false), Span(18,19,List(1),and,and,false), Span(17,18,List(2),quality,quality,false), Span(16,17,List(3),high,high,false), Span(14,15,List(4),reputation,repute-01,false), Span(9,12,List(7, 6, 5),Daimler - Chrysler,(company :name (name :op "Daimler-Chrysler")),false), Span(8,9,List(8),and,and,false), Span(7,8,List(11, 10, 9),Siemens,(company :name (name :op "Siemens")),false), Span(5,6,List(14, 13, 12),Volkswagen,(company :name (name :op "Volkswagen")),false), Span(3,4,List(15),such,such,false), Span(2,3,List(16),firms,firm,false), Span(1,2,List(19, 18, 17),German,(country :name (name :op "Germany")),false), Span(0,1,List(20),Some,some,false)),Map(2 -> quality, 5 -> company, 12 -> company, 15 -> such, 8 -> and, 18 -> name, 7 -> "Daimler-Chrysler", 17 -> country, 1 -> and, 4 -> repute-01, 11 -> "Siemens", 14 -> "Volkswagen", 20 -> some, 6 -> name, 0 -> efficiency, 9 -> company, 16 -> firm, 19 -> "Germany", 3 -> high, 10 -> name, 13 -> name),Map(e -> efficiency, n -> name, h -> high, q -> quality, s2 -> some, n4 -> name, c4 -> country, s -> such, a -> and, c3 -> company, n3 -> name, r -> repute-01, a2 -> and, c -> company, f -> firm, c2 -> company, n2 -> name))),[Ljava.lang.String;@5a0bef24,Annotation([Ljava.lang.String;@6468a7b6,[Ljava.lang.String;@2f860823,[Ljava.lang.String;@696b4a95),Annotation([Ljava.lang.String;@6c1cfa53,[Ljava.lang.String;@4d68b571,[Ledu.cmu.lti.nlp.amr.Dependency;@52b06bef),Annotation([Ljava.lang.String;@61bcbcce,[Ljava.lang.String;@6af91cc8,[Ljava.lang.String;@6232ffdb),Annotation([Ljava.lang.String;@330c1f61,[Ljava.lang.String;@37d28f02,[Ledu.cmu.lti.nlp.amr.Entity;@15efda6c))
AMR:
(a / and, op, e / efficiency)
(a / and, op, q / quality)
(a2 / and, op, c / company)
(a2 / and, op, c2 / company)
(a2 / and, op, c3 / company)
(c / company, name, n / name)
(c2 / company, name, n2 / name)
(c3 / company, name, n3 / name)
(c4 / country, name, n4 / name)
(f / firm, example, a2 / and)
(f / firm, mod, c4 / country)
(f / firm, mod, s2 / some)
(n / name, op, "Daimler-Chrysler")
(n2 / name, op, "Siemens")
(n3 / name, op, "Volkswagen")
(n4 / name, op, "Germany")
(q / quality, mod, h / high)
(r / repute-01, ARG1, f / firm)
(r / repute-01, topic, a / and)
(s / such, location, a2 / and)

Decoded in 374,118 microseconds
Sentence: Wen stated that Chinese enterprises can make progress and learn modern management by cooperating with German partners.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 8-9:  and => and
Span 5-6:  can => possible
Span 3-4:  Chinese => (country :name (name :op "China"))
Span 13-14:  cooperating => cooperate-01
Span 4-5:  enterprises => enterprise
Span 15-16:  German => (country :name (name :op "Germany"))
Span 9-10:  learn => learn-01
Span 6-7:  make => make-01
Span 11-12:  management => manage-01
Span 10-11:  modern => modern
Span 16-17:  partners => partner-01
Span 7-8:  progress => progress-01
Span 1-2:  stated => state-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),partners,partner-01,false), Span(15,16,List(3, 2, 1),German,(country :name (name :op "Germany")),false), Span(13,14,List(4),cooperating,cooperate-01,false), Span(11,12,List(5),management,manage-01,false), Span(10,11,List(6),modern,modern,false), Span(9,10,List(7),learn,learn-01,false), Span(8,9,List(8),and,and,false), Span(7,8,List(9),progress,progress-01,false), Span(6,7,List(10),make,make-01,false), Span(5,6,List(11),can,possible,false), Span(4,5,List(12),enterprises,enterprise,false), Span(3,4,List(15, 14, 13),Chinese,(country :name (name :op "China")),false), Span(1,2,List(16),stated,state-01,false), Span(0,1,List(19, 18, 17),Wen,(person :name (name :op "Wen")),false)),Map(2 -> name, 5 -> manage-01, 12 -> enterprise, 15 -> "China", 8 -> and, 18 -> name, 7 -> learn-01, 17 -> person, 1 -> country, 4 -> cooperate-01, 11 -> possible, 14 -> name, 6 -> modern, 0 -> partner-01, 9 -> progress-01, 16 -> state-01, 19 -> "Wen", 3 -> "Germany", 10 -> make-01, 13 -> country),Map(m3 -> make-01, e -> enterprise, n -> name, m2 -> modern, p2 -> progress-01, s -> state-01, m -> manage-01, p -> partner-01, n3 -> name, a -> and, c3 -> country, p4 -> person, c -> country, l -> learn-01, p3 -> possible, n2 -> name, c2 -> cooperate-01))),[Ljava.lang.String;@6056232d,Annotation([Ljava.lang.String;@33f2df51,[Ljava.lang.String;@107bfcb2,[Ljava.lang.String;@7bac686b),Annotation([Ljava.lang.String;@2ab26378,[Ljava.lang.String;@f9f3928,[Ledu.cmu.lti.nlp.amr.Dependency;@404eca05),Annotation([Ljava.lang.String;@58b91d57,[Ljava.lang.String;@61a91c9b,[Ljava.lang.String;@17092fff),Annotation([Ljava.lang.String;@2121d1f9,[Ljava.lang.String;@31e2232f,[Ledu.cmu.lti.nlp.amr.Entity;@1806bc4c))
AMR:
(a / and, op, l / learn-01)
(c / country, name, n / name)
(c2 / cooperate-01, ARG0, e / enterprise)
(c2 / cooperate-01, ARG1, p / partner-01)
(c3 / country, name, n2 / name)
(e / enterprise, mod, c3 / country)
(l / learn-01, ARG0, e / enterprise)
(l / learn-01, ARG1, m / manage-01)
(l / learn-01, manner, c2 / cooperate-01)
(m / manage-01, mod, m2 / modern)
(m3 / make-01, ARG1, p2 / progress-01)
(n / name, op, "Germany")
(n2 / name, op, "China")
(n3 / name, op, "Wen")
(p / partner-01, ARG1, c / country)
(p2 / progress-01, ARG1, e / enterprise)
(p3 / possible, domain, a / and)
(p4 / person, name, n3 / name)
(s / state-01, ARG0, p4 / person)
(s / state-01, ARG1, p3 / possible)

Decoded in 272,421 microseconds
Sentence: Wen stated that Germany is China's closest European partner in technology transfer.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (thing :name (name :op "European"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 5-6:  China => (country :name (name :op "China"))
Span 7-8:  closest => (close :degree most)
Span 8-9:  European => (continent :name (name :op "Europe"))
Span 3-4:  Germany => (country :name (name :op "Germany"))
Span 9-10:  partner => partner-01
Span 1-2:  stated => state-01
Span 11-12:  technology => technology
Span 12-13:  transfer => transfer-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),transfer,transfer-01,false), Span(11,12,List(1),technology,technology,false), Span(9,10,List(2),partner,partner-01,false), Span(8,9,List(5, 4, 3),European,(continent :name (name :op "Europe")),false), Span(7,8,List(7, 6),closest,(close :degree most),false), Span(5,6,List(10, 9, 8),China,(country :name (name :op "China")),false), Span(3,4,List(13, 12, 11),Germany,(country :name (name :op "Germany")),false), Span(1,2,List(14),stated,state-01,false), Span(0,1,List(17, 16, 15),Wen,(person :name (name :op "Wen")),false)),Map(2 -> partner-01, 5 -> "Europe", 12 -> name, 15 -> person, 8 -> country, 7 -> most, 17 -> "Wen", 1 -> technology, 4 -> name, 11 -> country, 14 -> state-01, 6 -> close, 0 -> transfer-01, 9 -> name, 16 -> name, 3 -> continent, 10 -> "China", 13 -> "Germany"),Map(n -> name, t -> transfer-01, p2 -> person, n4 -> name, c4 -> country, s -> state-01, m -> most, p -> partner-01, c3 -> country, n3 -> name, t2 -> technology, c -> continent, c2 -> close, n2 -> name))),[Ljava.lang.String;@462e1e64,Annotation([Ljava.lang.String;@69afa141,[Ljava.lang.String;@49f40c00,[Ljava.lang.String;@643d2dae),Annotation([Ljava.lang.String;@52d6d273,[Ljava.lang.String;@4667c4c1,[Ledu.cmu.lti.nlp.amr.Dependency;@2f9a4401),Annotation([Ljava.lang.String;@22c75c01,[Ljava.lang.String;@46e64760,[Ljava.lang.String;@3e5fd2b1),Annotation([Ljava.lang.String;@43982337,[Ljava.lang.String;@5b275811,[Ledu.cmu.lti.nlp.amr.Entity;@2f0ed952))
AMR:
(c / continent, name, n / name)
(c2 / close, degree, m / most)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(n / name, op, "Europe")
(n2 / name, op, "China")
(n3 / name, op, "Germany")
(n4 / name, op, "Wen")
(p / partner-01, ARG0, c4 / country)
(p / partner-01, ARG1, c3 / country)
(p / partner-01, location, c / continent)
(p / partner-01, mod, c2 / close)
(p / partner-01, mod, t / transfer-01)
(p2 / person, name, n4 / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, p / partner-01)
(t / transfer-01, ARG1, t2 / technology)

Decoded in 446,474 microseconds
Sentence: Wen stated that China considers Sino-EU relations a crucial part of China's diplomatic strategy and that China and Europe developed a comprehensive strategic partnership in 2003.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (thing :name (name :op "Sino" :op "-" :op "EU"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 28-29:  2003 => (date-entity :year 2003)
Span 20-21:  and => and
Span 17-18:  and => and
Span 19-20:  China => (country :name (name :op "China"))
Span 13-14:  China => (country :name (name :op "China"))
Span 3-4:  China => (country :name (name :op "China"))
Span 24-25:  comprehensive => comprehensive
Span 4-5:  considers => consider-01
Span 10-11:  crucial => crucial
Span 22-23:  developed => develop-02
Span 15-16:  diplomatic => diplomacy
Span 7-8:  EU => (organization :name (name :op "EU"))
Span 21-22:  Europe => (continent :name (name :op "Europe"))
Span 26-27:  partnership => partner-01
Span 8-9:  relations => relation
Span 1-2:  stated => state-01
Span 25-26:  strategic => strategy
Span 16-17:  strategy => strategy
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(1, 0),2003,(date-entity :year 2003),false), Span(26,27,List(2),partnership,partner-01,false), Span(25,26,List(3),strategic,strategy,false), Span(24,25,List(4),comprehensive,comprehensive,false), Span(22,23,List(5),developed,develop-02,false), Span(21,22,List(8, 7, 6),Europe,(continent :name (name :op "Europe")),false), Span(20,21,List(9),and,and,false), Span(19,20,List(12, 11, 10),China,(country :name (name :op "China")),false), Span(17,18,List(13),and,and,false), Span(16,17,List(14),strategy,strategy,false), Span(15,16,List(15),diplomatic,diplomacy,false), Span(13,14,List(18, 17, 16),China,(country :name (name :op "China")),false), Span(10,11,List(19),crucial,crucial,false), Span(8,9,List(20),relations,relation,false), Span(7,8,List(23, 22, 21),EU,(organization :name (name :op "EU")),false), Span(4,5,List(24),considers,consider-01,false), Span(3,4,List(27, 26, 25),China,(country :name (name :op "China")),false), Span(1,2,List(28),stated,state-01,false), Span(0,1,List(31, 30, 29),Wen,(person :name (name :op "Wen")),false)),Map(30 -> name, 2 -> partner-01, 5 -> develop-02, 27 -> "China", 12 -> "China", 8 -> "Europe", 15 -> diplomacy, 21 -> organization, 18 -> "China", 24 -> consider-01, 7 -> name, 1 -> 2003, 17 -> name, 23 -> "EU", 26 -> name, 4 -> comprehensive, 11 -> name, 14 -> strategy, 29 -> person, 20 -> relation, 28 -> state-01, 6 -> continent, 9 -> and, 0 -> date-entity, 22 -> name, 16 -> country, 19 -> crucial, 10 -> country, 3 -> strategy, 31 -> "Wen", 25 -> country, 13 -> and),Map(n -> name, 2 -> 2003, s2 -> strategy, d3 -> diplomacy, c7 -> country, p2 -> person, c4 -> country, n4 -> name, s -> strategy, d -> date-entity, p -> partner-01, c3 -> country, a -> and, n3 -> name, n6 -> name, d2 -> develop-02, c6 -> consider-01, a2 -> and, r -> relation, c -> comprehensive, s3 -> state-01, o -> organization, n2 -> name, c2 -> continent, c5 -> crucial, n5 -> name))),[Ljava.lang.String;@6f044c58,Annotation([Ljava.lang.String;@6d074b14,[Ljava.lang.String;@c017175,[Ljava.lang.String;@559cedee),Annotation([Ljava.lang.String;@18371d89,[Ljava.lang.String;@4f3faa70,[Ledu.cmu.lti.nlp.amr.Dependency;@4832f03b),Annotation([Ljava.lang.String;@7af3874e,[Ljava.lang.String;@5a8816cc,[Ljava.lang.String;@68565bc7),Annotation([Ljava.lang.String;@37baddde,[Ljava.lang.String;@5115f590,[Ledu.cmu.lti.nlp.amr.Entity;@4b31a708))
AMR:
(a / and, op, c2 / continent)
(a / and, op, c7 / country)
(a2 / and, op, c6 / consider-01)
(a2 / and, op, d2 / develop-02)
(c2 / continent, name, n / name)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(c6 / consider-01, ARG0, c7 / country)
(c6 / consider-01, ARG1, r / relation)
(c7 / country, name, n5 / name)
(d / date-entity, year, 2 / 2003)
(d2 / develop-02, ARG0, c5 / crucial)
(d2 / develop-02, ARG1, p / partner-01)
(d2 / develop-02, time, d / date-entity)
(n / name, op, "Europe")
(n2 / name, op, "China")
(n3 / name, op, "China")
(n4 / name, op, "EU")
(n5 / name, op, "China")
(n6 / name, op, "Wen")
(o / organization, name, n4 / name)
(p / partner-01, ARG1, c3 / country)
(p / partner-01, mod, c / comprehensive)
(p / partner-01, mod, s / strategy)
(p2 / person, name, n6 / name)
(r / relation, mod, o / organization)
(s2 / strategy, mod, d3 / diplomacy)
(s2 / strategy, poss, c4 / country)
(s2 / strategy, poss, c7 / country)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, a2 / and)

Decoded in 1,998,498 microseconds
Sentence: Wen stated that he was optimistic that the EU would lift the arms embargo on China soon and would give China market economy status.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (organization :name (name :op "EU"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "EU"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 17-18:  and => and
Span 12-13:  arms => arm
Span 20-21:  China => (country :name (name :op "China"))
Span 15-16:  China => (country :name (name :op "China"))
Span 22-23:  economy => economy
Span 13-14:  embargo => embargo-01
Span 8-9:  EU => (organization :name (name :op "EU"))
Span 19-20:  give => give-01
Span 10-11:  lift => lift-02
Span 21-22:  market => market
Span 5-6:  optimistic => optimism
Span 16-17:  soon => soon
Span 1-2:  stated => state-01
Span 23-24:  status => status
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),status,status,false), Span(22,23,List(1),economy,economy,false), Span(21,22,List(2),market,market,false), Span(20,21,List(5, 4, 3),China,(country :name (name :op "China")),false), Span(19,20,List(6),give,give-01,false), Span(17,18,List(7),and,and,false), Span(16,17,List(8),soon,soon,false), Span(15,16,List(11, 10, 9),China,(country :name (name :op "China")),false), Span(13,14,List(12),embargo,embargo-01,false), Span(12,13,List(13),arms,arm,false), Span(10,11,List(14),lift,lift-02,false), Span(8,9,List(17, 16, 15),EU,(organization :name (name :op "EU")),false), Span(5,6,List(18),optimistic,optimism,false), Span(1,2,List(19),stated,state-01,false), Span(0,1,List(22, 21, 20),Wen,(person :name (name :op "Wen")),false)),Map(2 -> market, 5 -> "China", 12 -> embargo-01, 15 -> organization, 8 -> soon, 21 -> name, 18 -> optimism, 7 -> and, 17 -> "EU", 1 -> economy, 4 -> name, 11 -> "China", 14 -> lift-02, 20 -> person, 6 -> give-01, 22 -> "Wen", 0 -> status, 9 -> country, 16 -> name, 19 -> state-01, 3 -> country, 10 -> name, 13 -> arm),Map(e -> economy, n -> name, s2 -> soon, e2 -> embargo-01, n4 -> name, s -> status, m -> market, p -> person, g -> give-01, n3 -> name, a -> and, o2 -> optimism, a2 -> arm, s3 -> state-01, c -> country, l -> lift-02, o -> organization, c2 -> country, n2 -> name))),[Ljava.lang.String;@11e355ca,Annotation([Ljava.lang.String;@70d63e05,[Ljava.lang.String;@e11ecfa,[Ljava.lang.String;@485e13d7),Annotation([Ljava.lang.String;@43984213,[Ljava.lang.String;@2ff7a73,[Ledu.cmu.lti.nlp.amr.Dependency;@38830ea),Annotation([Ljava.lang.String;@3b705be7,[Ljava.lang.String;@3a790e40,[Ljava.lang.String;@43acd79e),Annotation([Ljava.lang.String;@1e1b061,[Ljava.lang.String;@38f77cd9,[Ledu.cmu.lti.nlp.amr.Entity;@4a8e6e89))
AMR:
(a / and, op, g / give-01)
(a / and, op, l / lift-02)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(e2 / embargo-01, ARG1, a2 / arm)
(g / give-01, ARG0, o / organization)
(g / give-01, ARG1, s / status)
(g / give-01, ARG2, c2 / country)
(l / lift-02, ARG0, o / organization)
(l / lift-02, ARG1, e2 / embargo-01)
(l / lift-02, time, s2 / soon)
(m / market, mod, c / country)
(n / name, op, "China")
(n2 / name, op, "China")
(n3 / name, op, "EU")
(n4 / name, op, "Wen")
(o / organization, name, n3 / name)
(o2 / optimism, topic, a / and)
(p / person, name, n4 / name)
(s / status, mod, e / economy)
(s / status, mod, m / market)
(s3 / state-01, ARG0, p / person)
(s3 / state-01, ARG1, o2 / optimism)

Decoded in 849,066 microseconds
Sentence: Wen stated that the arms embargo is an outdated result of the cold war.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 4-5:  arms => arm
Span 12-14:  cold war => (war :name (name :op "War" :op "Cold"))
Span 5-6:  embargo => embargo-01
Span 8-9:  outdated => outdated
Span 9-10:  result => result-01
Span 1-2:  stated => state-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,14,List(3, 2, 1, 0),cold war,(war :name (name :op "War" :op "Cold")),false), Span(9,10,List(4),result,result-01,false), Span(8,9,List(5),outdated,outdated,false), Span(5,6,List(6),embargo,embargo-01,false), Span(4,5,List(7),arms,arm,false), Span(1,2,List(8),stated,state-01,false), Span(0,1,List(11, 10, 9),Wen,(person :name (name :op "Wen")),false)),Map(2 -> "War", 5 -> outdated, 8 -> state-01, 7 -> arm, 1 -> name, 11 -> "Wen", 4 -> result-01, 6 -> embargo-01, 9 -> person, 0 -> war, 10 -> name, 3 -> "Cold"),Map(e -> embargo-01, n -> name, w -> war, s -> state-01, p -> person, a -> arm, r -> result-01, o -> outdated, n2 -> name))),[Ljava.lang.String;@6fbb4061,Annotation([Ljava.lang.String;@63d5874f,[Ljava.lang.String;@60c73e58,[Ljava.lang.String;@5984feef),Annotation([Ljava.lang.String;@6c0905f6,[Ljava.lang.String;@23a918c7,[Ledu.cmu.lti.nlp.amr.Dependency;@7a45d714),Annotation([Ljava.lang.String;@4483d35,[Ljava.lang.String;@204abeff,[Ljava.lang.String;@4b4ee511),Annotation([Ljava.lang.String;@1f67761b,[Ljava.lang.String;@5a034157,[Ledu.cmu.lti.nlp.amr.Entity;@2f4ba1ae))
AMR:
(e / embargo-01, ARG1, a / arm)
(n / name, op, "Cold")
(n / name, op, "War")
(n2 / name, op, "Wen")
(p / person, name, n2 / name)
(r / result-01, ARG1, w / war)
(r / result-01, ARG2, e / embargo-01)
(r / result-01, mod, o / outdated)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, r / result-01)
(w / war, name, n / name)

Decoded in 114,711 microseconds
Sentence: Wen stated that China is deeply concerned with the current situation in Iraq and is sympathetic to the Iraqi people.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (thing :name (name :op "Iraqi"))
NER Entity: (thing :name (name :op "Iraqi"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 13-14:  and => and
Span 3-4:  China => (country :name (name :op "China"))
Span 6-7:  concerned => concern-01
Span 9-10:  current => current
Span 5-6:  deeply => deep
Span 12-13:  Iraq => (country :name (name :op "Iraq"))
Span 18-19:  Iraqi => (country :name (name :op "Iraq"))
Span 19-20:  people => people
Span 10-11:  situation => situation
Span 1-2:  stated => state-01
Span 15-16:  sympathetic => sympathize-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 3 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(0),people,people,false), Span(18,19,List(3, 2, 1),Iraqi,(country :name (name :op "Iraq")),false), Span(15,16,List(4),sympathetic,sympathize-01,false), Span(13,14,List(5),and,and,false), Span(12,13,List(8, 7, 6),Iraq,(country :name (name :op "Iraq")),false), Span(10,11,List(9),situation,situation,false), Span(9,10,List(10),current,current,false), Span(6,7,List(11),concerned,concern-01,false), Span(5,6,List(12),deeply,deep,false), Span(3,4,List(15, 14, 13),China,(country :name (name :op "China")),false), Span(1,2,List(16),stated,state-01,false), Span(0,1,List(19, 18, 17),Wen,(person :name (name :op "Wen")),false)),Map(2 -> name, 5 -> and, 12 -> deep, 15 -> "China", 8 -> "Iraq", 18 -> name, 7 -> name, 17 -> person, 1 -> country, 4 -> sympathize-01, 11 -> concern-01, 14 -> name, 6 -> country, 0 -> people, 9 -> situation, 16 -> state-01, 19 -> "Wen", 3 -> "Iraq", 10 -> current, 13 -> country),Map(n -> name, s2 -> situation, p2 -> person, n4 -> name, c4 -> concern-01, s -> sympathize-01, d -> deep, p -> people, a -> and, c3 -> current, n3 -> name, s3 -> state-01, c -> country, c2 -> country, n2 -> name, c5 -> country))),[Ljava.lang.String;@1391af3b,Annotation([Ljava.lang.String;@3762c4fc,[Ljava.lang.String;@77ab22be,[Ljava.lang.String;@59fbb34),Annotation([Ljava.lang.String;@1b6924cb,[Ljava.lang.String;@3a8d467e,[Ledu.cmu.lti.nlp.amr.Dependency;@141d3d43),Annotation([Ljava.lang.String;@6ca372ef,[Ljava.lang.String;@3ebe4ccc,[Ljava.lang.String;@6ed043d3),Annotation([Ljava.lang.String;@135a8c6f,[Ljava.lang.String;@6419a0e1,[Ledu.cmu.lti.nlp.amr.Entity;@280d4882))
AMR:
(a / and, op, c4 / concern-01)
(a / and, op, s / sympathize-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c4 / concern-01, ARG0, s2 / situation)
(c4 / concern-01, ARG1, c5 / country)
(c4 / concern-01, manner, d / deep)
(c5 / country, name, n3 / name)
(n / name, op, "Iraq")
(n2 / name, op, "Iraq")
(n3 / name, op, "China")
(n4 / name, op, "Wen")
(p / people, mod, c / country)
(p / people, mod, c2 / country)
(p2 / person, name, n4 / name)
(s / sympathize-01, ARG0, c5 / country)
(s / sympathize-01, ARG1, p / people)
(s2 / situation, mod, c3 / current)
(s3 / state-01, ARG0, p2 / person)
(s3 / state-01, ARG1, a / and)

Decoded in 168,955 microseconds
Sentence: Wen stated that China and Europe have similar positions on the issue of Iraq's reconstruction.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Europe"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 4-5:  and => and
Span 3-4:  China => (country :name (name :op "China"))
Span 5-6:  Europe => (continent :name (name :op "Europe"))
Span 13-14:  Iraq => (country :name (name :op "Iraq"))
Span 11-12:  issue => issue
Span 8-9:  positions => position
Span 15-16:  reconstruction => reconstruct-01
Span 1-2:  stated => state-01
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,16,List(0),reconstruction,reconstruct-01,false), Span(13,14,List(3, 2, 1),Iraq,(country :name (name :op "Iraq")),false), Span(11,12,List(4),issue,issue,false), Span(8,9,List(5),positions,position,false), Span(5,6,List(8, 7, 6),Europe,(continent :name (name :op "Europe")),false), Span(4,5,List(9),and,and,false), Span(3,4,List(12, 11, 10),China,(country :name (name :op "China")),false), Span(1,2,List(13),stated,state-01,false), Span(0,1,List(16, 15, 14),Wen,(person :name (name :op "Wen")),false)),Map(2 -> name, 5 -> position, 12 -> "China", 15 -> name, 8 -> "Europe", 7 -> name, 1 -> country, 4 -> issue, 11 -> name, 14 -> person, 6 -> continent, 0 -> reconstruct-01, 9 -> and, 16 -> "Wen", 3 -> "Iraq", 10 -> country, 13 -> state-01),Map(n -> name, p2 -> person, n4 -> name, s -> state-01, p -> position, a -> and, c3 -> country, n3 -> name, r -> reconstruct-01, i -> issue, c -> country, c2 -> continent, n2 -> name))),[Ljava.lang.String;@44af588b,Annotation([Ljava.lang.String;@3d19d85,[Ljava.lang.String;@2ae62bb6,[Ljava.lang.String;@68ed3f30),Annotation([Ljava.lang.String;@56b859a6,[Ljava.lang.String;@590adb41,[Ledu.cmu.lti.nlp.amr.Dependency;@42aae04d),Annotation([Ljava.lang.String;@43bf5397,[Ljava.lang.String;@575e572f,[Ljava.lang.String;@58015e56),Annotation([Ljava.lang.String;@4d3c6593,[Ljava.lang.String;@7426a448,[Ledu.cmu.lti.nlp.amr.Entity;@516462cc))
AMR:
(a / and, op, c2 / continent)
(a / and, op, p / position)
(a / and, op, p2 / person)
(c / country, name, n / name)
(c2 / continent, name, n2 / name)
(c3 / country, name, n3 / name)
(i / issue, mod, r / reconstruct-01)
(n / name, op, "Iraq")
(n2 / name, op, "Europe")
(n3 / name, op, "China")
(n4 / name, op, "Wen")
(p / position, topic, i / issue)
(p2 / person, name, n4 / name)
(r / reconstruct-01, ARG1, c / country)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, c3 / country)

Decoded in 372,600 microseconds
Sentence: Wen stated that the United Nations should play a dominant role in the process of Iraq's reconstruction and that every country should participate.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 18-19:  and => and
Span 21-22:  country => country
Span 9-10:  dominant => dominate-01
Span 20-21:  every => every
Span 15-16:  Iraq => (country :name (name :op "Iraq"))
Span 23-24:  participate => participate-01
Span 7-8:  play => play-08
Span 13-14:  process => process
Span 17-18:  reconstruction => reconstruct-01
Span 10-11:  role => role
Span 22-23:  should => recommend-01
Span 6-7:  should => recommend-01
Span 1-2:  stated => state-01
Span 4-6:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(23,24,List(0),participate,participate-01,false), Span(22,23,List(1),should,recommend-01,false), Span(21,22,List(2),country,country,false), Span(20,21,List(3),every,every,false), Span(18,19,List(4),and,and,false), Span(17,18,List(5),reconstruction,reconstruct-01,false), Span(15,16,List(8, 7, 6),Iraq,(country :name (name :op "Iraq")),false), Span(13,14,List(9),process,process,false), Span(10,11,List(10),role,role,false), Span(9,10,List(11),dominant,dominate-01,false), Span(7,8,List(12),play,play-08,false), Span(6,7,List(13),should,recommend-01,false), Span(4,6,List(17, 16, 15, 14),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(1,2,List(18),stated,state-01,false), Span(0,1,List(21, 20, 19),Wen,(person :name (name :op "Wen")),false)),Map(2 -> country, 5 -> reconstruct-01, 12 -> play-08, 15 -> name, 8 -> "Iraq", 21 -> "Wen", 18 -> state-01, 7 -> name, 17 -> "Nations", 1 -> recommend-01, 4 -> and, 11 -> dominate-01, 14 -> organization, 20 -> name, 6 -> country, 0 -> participate-01, 9 -> process, 16 -> "United", 19 -> person, 3 -> every, 10 -> role, 13 -> recommend-01),Map(e -> every, n -> name, r3 -> role, p2 -> process, s -> state-01, d -> dominate-01, p -> participate-01, r2 -> reconstruct-01, n3 -> name, a -> and, p4 -> person, r -> recommend-01, r4 -> recommend-01, c -> country, o -> organization, p3 -> play-08, n2 -> name, c2 -> country))),[Ljava.lang.String;@3456558,Annotation([Ljava.lang.String;@2dfb885e,[Ljava.lang.String;@6cbe7d4d,[Ljava.lang.String;@1e3e1014),Annotation([Ljava.lang.String;@3679d92e,[Ljava.lang.String;@47b11ec7,[Ledu.cmu.lti.nlp.amr.Dependency;@58fa5769),Annotation([Ljava.lang.String;@36aa52d2,[Ljava.lang.String;@4ee25d80,[Ljava.lang.String;@16a35bd),Annotation([Ljava.lang.String;@ba17be6,[Ljava.lang.String;@6f798482,[Ledu.cmu.lti.nlp.amr.Entity;@332bcab0))
AMR:
(a / and, op, r / recommend-01)
(a / and, op, r4 / recommend-01)
(c / country, mod, e / every)
(c2 / country, name, n / name)
(d / dominate-01, ARG1, r3 / role)
(n / name, op, "Iraq")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(n3 / name, op, "Wen")
(o / organization, name, n2 / name)
(p / participate-01, ARG0, c / country)
(p2 / process, mod, r2 / reconstruct-01)
(p3 / play-08, ARG0, o / organization)
(p3 / play-08, ARG1, r3 / role)
(p3 / play-08, ARG2, p2 / process)
(p4 / person, name, n3 / name)
(r / recommend-01, ARG1, p3 / play-08)
(r2 / reconstruct-01, ARG1, c2 / country)
(r4 / recommend-01, ARG1, p / participate-01)
(s / state-01, ARG0, p4 / person)
(s / state-01, ARG1, a / and)

Decoded in 1,067,967 microseconds
Sentence: Wen stated that China is willing to participate in Iraq's reconstruction process.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "Iraq"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 3-4:  China => (country :name (name :op "China"))
Span 9-10:  Iraq => (country :name (name :op "Iraq"))
Span 7-8:  participate => participate-01
Span 12-13:  process => process
Span 11-12:  reconstruction => reconstruct-01
Span 1-2:  stated => state-01
Span 0-1:  Wen => (person :name (name :op "Wen"))
Span 5-6:  willing => will-02

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(0),process,process,false), Span(11,12,List(1),reconstruction,reconstruct-01,false), Span(9,10,List(4, 3, 2),Iraq,(country :name (name :op "Iraq")),false), Span(7,8,List(5),participate,participate-01,false), Span(5,6,List(6),willing,will-02,false), Span(3,4,List(9, 8, 7),China,(country :name (name :op "China")),false), Span(1,2,List(10),stated,state-01,false), Span(0,1,List(13, 12, 11),Wen,(person :name (name :op "Wen")),false)),Map(2 -> country, 5 -> participate-01, 12 -> name, 8 -> name, 7 -> country, 1 -> reconstruct-01, 4 -> "Iraq", 11 -> person, 6 -> will-02, 0 -> process, 9 -> "China", 3 -> name, 10 -> state-01, 13 -> "Wen"),Map(w -> will-02, n -> name, p2 -> participate-01, s -> state-01, p -> process, n3 -> name, r -> reconstruct-01, c -> country, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@633cc6b5,Annotation([Ljava.lang.String;@6342ff7f,[Ljava.lang.String;@403c3a01,[Ljava.lang.String;@2daf06fc),Annotation([Ljava.lang.String;@28237492,[Ljava.lang.String;@5ceecfee,[Ledu.cmu.lti.nlp.amr.Dependency;@7da31a40),Annotation([Ljava.lang.String;@28ee7bee,[Ljava.lang.String;@1b5a1d85,[Ljava.lang.String;@31e130bf),Annotation([Ljava.lang.String;@54755dd9,[Ljava.lang.String;@f1f7db2,[Ledu.cmu.lti.nlp.amr.Entity;@4462efe1))
AMR:
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Iraq")
(n2 / name, op, "China")
(n3 / name, op, "Wen")
(p / process, mod, r / reconstruct-01)
(p2 / participate-01, ARG0, c2 / country)
(p2 / participate-01, ARG1, p / process)
(p3 / person, name, n3 / name)
(r / reconstruct-01, ARG1, c / country)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, w / will-02)
(w / will-02, ARG0, c2 / country)
(w / will-02, ARG1, p2 / participate-01)

Decoded in 60,621 microseconds
Sentence: Wen stated that it is easy to win a war but much more difficult to win peace.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 10-11:  but => contrast-01
Span 13-14:  difficult => difficult
Span 5-6:  easy => easy
Span 3-4:  it => it
Span 12-13:  more => more
Span 11-12:  much => much
Span 16-17:  peace => peace
Span 1-2:  stated => state-01
Span 9-10:  war => war
Span 0-1:  Wen => (person :name (name :op "Wen"))
Span 15-16:  win => win-01
Span 7-8:  win => win-01

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),peace,peace,false), Span(15,16,List(1),win,win-01,false), Span(13,14,List(2),difficult,difficult,false), Span(12,13,List(3),more,more,false), Span(11,12,List(4),much,much,false), Span(10,11,List(5),but,contrast-01,false), Span(9,10,List(6),war,war,false), Span(7,8,List(7),win,win-01,false), Span(5,6,List(8),easy,easy,false), Span(3,4,List(9),it,it,false), Span(1,2,List(10),stated,state-01,false), Span(0,1,List(13, 12, 11),Wen,(person :name (name :op "Wen")),false)),Map(2 -> difficult, 5 -> contrast-01, 12 -> name, 8 -> easy, 7 -> win-01, 1 -> win-01, 4 -> much, 11 -> person, 6 -> war, 0 -> peace, 9 -> it, 3 -> more, 10 -> state-01, 13 -> "Wen"),Map(e -> easy, w -> win-01, n -> name, m2 -> much, p2 -> person, w3 -> win-01, s -> state-01, d -> difficult, m -> more, p -> peace, w2 -> war, i -> it, c -> contrast-01))),[Ljava.lang.String;@7c3e4b1a,Annotation([Ljava.lang.String;@2db4ad1,[Ljava.lang.String;@765d55d5,[Ljava.lang.String;@2513a118),Annotation([Ljava.lang.String;@2bfb583b,[Ljava.lang.String;@73ae0257,[Ledu.cmu.lti.nlp.amr.Dependency;@6fc1020a),Annotation([Ljava.lang.String;@5762658b,[Ljava.lang.String;@2629d5dc,[Ljava.lang.String;@2596d7f4),Annotation([Ljava.lang.String;@42a0501e,[Ljava.lang.String;@6aa3bfc,[Ledu.cmu.lti.nlp.amr.Entity;@6e4599c0))
AMR:
(c / contrast-01, ARG1, w / win-01)
(c / contrast-01, op, w3 / win-01)
(d / difficult, degree, m / more)
(e / easy, domain, i / it)
(m / more, degree, m2 / much)
(n / name, op, "Wen")
(p2 / person, name, n / name)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, c / contrast-01)
(w / win-01, ARG1, p / peace)
(w / win-01, manner, d / difficult)
(w3 / win-01, ARG1, w2 / war)
(w3 / win-01, manner, e / easy)

Decoded in 398,554 microseconds
Sentence: Wen stated that he is deeply worried about the increasing tension between Palestine and Israel and that the Chinese government hopes the disputes between the 2 countries can be resolved through political negotiation so that the countries can peacefully share land.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Palestine"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Palestine"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 25-26:  2 => 2
Span 7-8:  about => about
Span 15-16:  and => and
Span 13-14:  and => and
Span 23-24:  between => between
Span 11-12:  between => between
Span 37-38:  can => possible
Span 27-28:  can => possible
Span 18-19:  Chinese => (country :name (name :op "China"))
Span 36-37:  countries => country
Span 26-27:  countries => country
Span 5-6:  deeply => deep
Span 22-23:  disputes => dispute-01
Span 19-20:  government => (government-organization :ARG0-of govern-01)
Span 20-21:  hopes => hope-01
Span 9-10:  increasing => increase-01
Span 14-15:  Israel => (country :name (name :op "Israel"))
Span 40-41:  land => land
Span 32-33:  negotiation => negotiate-01
Span 12-13:  Palestine => (country :name (name :op "Palestine"))
Span 38-39:  peacefully => peace
Span 31-32:  political => politics
Span 29-30:  resolved => resolve-01
Span 39-40:  share => share-01
Span 33-34:  so => so
Span 1-2:  stated => state-01
Span 10-11:  tension => tension
Span 30-31:  through => through
Span 0-1:  Wen => (person :name (name :op "Wen"))
Span 6-7:  worried => worry-02

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),land,land,false), Span(39,40,List(1),share,share-01,false), Span(38,39,List(2),peacefully,peace,false), Span(37,38,List(3),can,possible,false), Span(36,37,List(4),countries,country,false), Span(33,34,List(5),so,so,false), Span(32,33,List(6),negotiation,negotiate-01,false), Span(31,32,List(7),political,politics,false), Span(30,31,List(8),through,through,false), Span(29,30,List(9),resolved,resolve-01,false), Span(27,28,List(10),can,possible,false), Span(26,27,List(11),countries,country,false), Span(25,26,List(12),2,2,false), Span(23,24,List(13),between,between,false), Span(22,23,List(14),disputes,dispute-01,false), Span(20,21,List(15),hopes,hope-01,false), Span(19,20,List(17, 16),government,(government-organization :ARG0-of govern-01),false), Span(18,19,List(20, 19, 18),Chinese,(country :name (name :op "China")),false), Span(15,16,List(21),and,and,false), Span(14,15,List(24, 23, 22),Israel,(country :name (name :op "Israel")),false), Span(13,14,List(25),and,and,false), Span(12,13,List(28, 27, 26),Palestine,(country :name (name :op "Palestine")),false), Span(11,12,List(29),between,between,false), Span(10,11,List(30),tension,tension,false), Span(9,10,List(31),increasing,increase-01,false), Span(7,8,List(32),about,about,false), Span(6,7,List(33),worried,worry-02,false), Span(5,6,List(34),deeply,deep,false), Span(1,2,List(35),stated,state-01,false), Span(0,1,List(38, 37, 36),Wen,(person :name (name :op "Wen")),false)),Map(30 -> tension, 2 -> peace, 5 -> so, 33 -> worry-02, 27 -> name, 12 -> 2, 8 -> through, 15 -> hope-01, 36 -> person, 21 -> and, 18 -> country, 24 -> "Israel", 35 -> state-01, 7 -> politics, 1 -> share-01, 17 -> govern-01, 23 -> name, 38 -> "Wen", 26 -> country, 4 -> country, 11 -> country, 32 -> about, 14 -> dispute-01, 29 -> between, 20 -> "China", 34 -> deep, 28 -> "Palestine", 6 -> negotiate-01, 9 -> resolve-01, 0 -> land, 22 -> country, 16 -> government-organization, 37 -> name, 19 -> name, 10 -> possible, 3 -> possible, 31 -> increase-01, 25 -> and, 13 -> between),Map(w -> worry-02, n -> negotiate-01, h -> hope-01, 2 -> 2, p5 -> person, s2 -> so, t -> through, b -> between, b2 -> between, p2 -> possible, a3 -> about, n4 -> name, c4 -> country, s -> share-01, d -> dispute-01, g2 -> govern-01, p -> peace, g -> government-organization, c3 -> country, a -> and, n3 -> name, p4 -> possible, d2 -> deep, t2 -> tension, i -> increase-01, r -> resolve-01, a2 -> and, c -> country, s3 -> state-01, l -> land, p3 -> politics, c2 -> country, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@7dffda8b,Annotation([Ljava.lang.String;@3d1f558a,[Ljava.lang.String;@6abdec0e,[Ljava.lang.String;@28f4f300),Annotation([Ljava.lang.String;@2b5c4f17,[Ljava.lang.String;@6ca8fcf3,[Ledu.cmu.lti.nlp.amr.Dependency;@69f0b0f4),Annotation([Ljava.lang.String;@66933239,[Ljava.lang.String;@2f7efd0b,[Ljava.lang.String;@41ad373),Annotation([Ljava.lang.String;@6801b414,[Ljava.lang.String;@177c41d7,[Ledu.cmu.lti.nlp.amr.Entity;@4f327096))
AMR:
(a2 / and, op, w / worry-02)
(b / between, op, c2 / country)
(b2 / between, op, c4 / country)
(b2 / between, op, c5 / country)
(c2 / country, quant, 2 / 2)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(c5 / country, name, n4 / name)
(d / dispute-01, ARG1, c / country)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(h / hope-01, ARG0, g / government-organization)
(h / hope-01, ARG1, p4 / possible)
(i / increase-01, ARG0, b2 / between)
(i / increase-01, ARG1, t2 / tension)
(n / negotiate-01, ARG1, c3 / country)
(n / negotiate-01, mod, p3 / politics)
(n2 / name, op, "China")
(n3 / name, op, "Israel")
(n4 / name, op, "Palestine")
(n5 / name, op, "Wen")
(p2 / possible, domain, s / share-01)
(p4 / possible, domain, r / resolve-01)
(p5 / person, name, n5 / name)
(r / resolve-01, ARG1, d / dispute-01)
(r / resolve-01, ARG2, t / through)
(r / resolve-01, instrument, n / negotiate-01)
(r / resolve-01, purpose, p2 / possible)
(s / share-01, ARG0, b2 / between)
(s / share-01, ARG1, l / land)
(s / share-01, ARG6, s2 / so)
(s / share-01, manner, p / peace)
(s3 / state-01, ARG0, p5 / person)
(s3 / state-01, ARG1, a / and)
(w / worry-02, ARG0, p5 / person)
(w / worry-02, ARG1, t2 / tension)
(w / worry-02, ARG2, a3 / about)
(w / worry-02, manner, d2 / deep)

Decoded in 3,861,183 microseconds
Sentence: With regard to the situation in Palestine and Israel Wen stated that relevant UN resolutions must be implemented.

NER Entity: (country :name (name :op "Palestine"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (organization :name (name :op "UN"))
NER Entity: (organization :name (name :op "UN"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "Israel"))
NER Entity: (country :name (name :op "Palestine"))
Spans:
Span 7-8:  and => and
Span 17-18:  implemented => implement-01
Span 8-9:  Israel => (country :name (name :op "Israel"))
Span 6-7:  Palestine => (country :name (name :op "Palestine"))
Span 1-2:  regard => regard-01
Span 12-13:  relevant => relevance
Span 14-15:  resolutions => resolution
Span 4-5:  situation => situation
Span 10-11:  stated => state-01
Span 13-14:  UN => (organization :name (name :op "UN"))
Span 9-10:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(0),implemented,implement-01,false), Span(14,15,List(1),resolutions,resolution,false), Span(13,14,List(4, 3, 2),UN,(organization :name (name :op "UN")),false), Span(12,13,List(5),relevant,relevance,false), Span(10,11,List(6),stated,state-01,false), Span(9,10,List(9, 8, 7),Wen,(person :name (name :op "Wen")),false), Span(8,9,List(12, 11, 10),Israel,(country :name (name :op "Israel")),false), Span(7,8,List(13),and,and,false), Span(6,7,List(16, 15, 14),Palestine,(country :name (name :op "Palestine")),false), Span(4,5,List(17),situation,situation,false), Span(1,2,List(18),regard,regard-01,false)),Map(2 -> organization, 5 -> relevance, 12 -> "Israel", 15 -> name, 8 -> name, 18 -> regard-01, 7 -> person, 17 -> situation, 1 -> resolution, 4 -> "UN", 11 -> name, 14 -> country, 6 -> state-01, 0 -> implement-01, 9 -> "Wen", 16 -> "Palestine", 3 -> name, 10 -> country, 13 -> and),Map(n -> name, r3 -> regard-01, s2 -> situation, n4 -> name, s -> state-01, r2 -> relevance, p -> person, n3 -> name, a -> and, i -> implement-01, r -> resolution, c -> country, o -> organization, n2 -> name, c2 -> country))),[Ljava.lang.String;@1d61a348,Annotation([Ljava.lang.String;@78a515e4,[Ljava.lang.String;@d2291de,[Ljava.lang.String;@51c8f62c),Annotation([Ljava.lang.String;@41a374be,[Ljava.lang.String;@11f9535b,[Ledu.cmu.lti.nlp.amr.Dependency;@8cc8cdb),Annotation([Ljava.lang.String;@1e236278,[Ljava.lang.String;@44fff386,[Ljava.lang.String;@1fc713c9),Annotation([Ljava.lang.String;@7301eebe,[Ljava.lang.String;@76b47204,[Ledu.cmu.lti.nlp.amr.Entity;@4d6ccc97))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n3 / name)
(c2 / country, name, n4 / name)
(i / implement-01, ARG1, r / resolution)
(n / name, op, "UN")
(n2 / name, op, "Wen")
(n3 / name, op, "Israel")
(n4 / name, op, "Palestine")
(o / organization, name, n / name)
(p / person, name, n2 / name)
(r / resolution, mod, c / country)
(r / resolution, mod, o / organization)
(r / resolution, mod, r2 / relevance)
(r3 / regard-01, ARG0, p / person)
(r3 / regard-01, ARG1, s2 / situation)
(s / state-01, ARG0, p / person)
(s / state-01, ARG1, a / and)
(s / state-01, manner, r3 / regard-01)

Decoded in 878,164 microseconds
Sentence: Wen stated that the Chinese government supports plans for peace in the Middle East and remains firmly opposed to violent retaliation.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (country :name (name :op "Middle" :op "East"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 14-15:  and => and
Span 4-5:  Chinese => (country :name (name :op "China"))
Span 16-17:  firmly => firm
Span 5-6:  government => (government-organization :ARG0-of govern-01)
Span 12-14:  Middle East => (country :name (name :op "Middle" :op "East"))
Span 17-18:  opposed => oppose-01
Span 9-10:  peace => peace
Span 7-8:  plans => plan-01
Span 15-16:  remains => remain-01
Span 20-21:  retaliation => retaliate-01
Span 1-2:  stated => state-01
Span 6-7:  supports => support-01
Span 19-20:  violent => violence
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),retaliation,retaliate-01,false), Span(19,20,List(1),violent,violence,false), Span(17,18,List(2),opposed,oppose-01,false), Span(16,17,List(3),firmly,firm,false), Span(15,16,List(4),remains,remain-01,false), Span(14,15,List(5),and,and,false), Span(12,14,List(9, 8, 7, 6),Middle East,(country :name (name :op "Middle" :op "East")),false), Span(9,10,List(10),peace,peace,false), Span(7,8,List(11),plans,plan-01,false), Span(6,7,List(12),supports,support-01,false), Span(5,6,List(14, 13),government,(government-organization :ARG0-of govern-01),false), Span(4,5,List(17, 16, 15),Chinese,(country :name (name :op "China")),false), Span(1,2,List(18),stated,state-01,false), Span(0,1,List(21, 20, 19),Wen,(person :name (name :op "Wen")),false)),Map(2 -> oppose-01, 5 -> and, 12 -> support-01, 15 -> country, 8 -> "Middle", 21 -> "Wen", 18 -> state-01, 7 -> name, 17 -> "China", 1 -> violence, 4 -> remain-01, 11 -> plan-01, 14 -> govern-01, 20 -> name, 6 -> country, 0 -> retaliate-01, 9 -> "East", 16 -> name, 19 -> person, 3 -> firm, 10 -> peace, 13 -> government-organization),Map(n -> name, s2 -> state-01, p2 -> plan-01, s -> support-01, v -> violence, g2 -> govern-01, r2 -> remain-01, p -> peace, g -> government-organization, n3 -> name, a -> and, r -> retaliate-01, c -> country, f -> firm, o -> oppose-01, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@6a12c7a8,Annotation([Ljava.lang.String;@161aa04a,[Ljava.lang.String;@436bd4df,[Ljava.lang.String;@6848a051),Annotation([Ljava.lang.String;@149b0577,[Ljava.lang.String;@5740ff5e,[Ledu.cmu.lti.nlp.amr.Dependency;@4a901445),Annotation([Ljava.lang.String;@67f77f6e,[Ljava.lang.String;@2b0b7e5a,[Ljava.lang.String;@7be1ce6a),Annotation([Ljava.lang.String;@3119cf6f,[Ljava.lang.String;@6dc9da2d,[Ledu.cmu.lti.nlp.amr.Entity;@1d408060))
AMR:
(a / and, op, r2 / remain-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(n / name, op, "East")
(n / name, op, "Middle")
(n2 / name, op, "China")
(n3 / name, op, "Wen")
(o / oppose-01, ARG1, r / retaliate-01)
(o / oppose-01, manner, f / firm)
(p2 / plan-01, ARG1, p / peace)
(p3 / person, name, n3 / name)
(r / retaliate-01, ARG1, s / support-01)
(r / retaliate-01, mod, v / violence)
(r2 / remain-01, ARG0, g / government-organization)
(r2 / remain-01, ARG1, c / country)
(s / support-01, ARG0, g / government-organization)
(s / support-01, ARG1, p2 / plan-01)
(s2 / state-01, ARG0, p3 / person)
(s2 / state-01, ARG1, a / and)

Decoded in 1,044,991 microseconds
Sentence: When asked to comment on how to temper China's rapidly growing economy and how to realize balanced growth Wen stated that the Chinese economy is very healthy in general with fast growth, increasing corporate profits, improving agricultural production, expanding foreign trade volume and rapidly growing fiscal revenue and individual incomes.

NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 39-40:  agricultural => agriculture
Span 51-52:  and => and
Span 46-47:  and => and
Span 13-14:  and => and
Span 1-2:  asked => ask-02
Span 17-18:  balanced => balance-01
Span 8-9:  China => (country :name (name :op "China"))
Span 23-24:  Chinese => (country :name (name :op "China"))
Span 3-4:  comment => comment-01
Span 35-36:  corporate => corporation
Span 24-25:  economy => economy
Span 12-13:  economy => economy
Span 42-43:  expanding => expand-01
Span 31-32:  fast => fast
Span 49-50:  fiscal => fiscal
Span 43-44:  foreign => foreign
Span 29-30:  general => general
Span 48-49:  growing => grow-01
Span 11-12:  growing => grow-01
Span 32-33:  growth => grow-01
Span 18-19:  growth => grow-01
Span 27-28:  healthy => healthy
Span 38-39:  improving => improve-01
Span 53-54:  incomes => income
Span 34-35:  increasing => increase-01
Span 52-53:  individual => individual
Span 40-41:  production => produce-01
Span 36-37:  profits => profit-01
Span 47-48:  rapidly => rapid
Span 10-11:  rapidly => rapid
Span 16-17:  realize => realize-02
Span 50-51:  revenue => revenue
Span 20-21:  stated => state-01
Span 7-8:  temper => temper-01
Span 44-45:  trade => trade-01
Span 26-27:  very => very
Span 45-46:  volume => volume
Span 19-20:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(0),incomes,income,false), Span(52,53,List(1),individual,individual,false), Span(51,52,List(2),and,and,false), Span(50,51,List(3),revenue,revenue,false), Span(49,50,List(4),fiscal,fiscal,false), Span(48,49,List(5),growing,grow-01,false), Span(47,48,List(6),rapidly,rapid,false), Span(46,47,List(7),and,and,false), Span(45,46,List(8),volume,volume,false), Span(44,45,List(9),trade,trade-01,false), Span(43,44,List(10),foreign,foreign,false), Span(42,43,List(11),expanding,expand-01,false), Span(40,41,List(12),production,produce-01,false), Span(39,40,List(13),agricultural,agriculture,false), Span(38,39,List(14),improving,improve-01,false), Span(36,37,List(15),profits,profit-01,false), Span(35,36,List(16),corporate,corporation,false), Span(34,35,List(17),increasing,increase-01,false), Span(32,33,List(18),growth,grow-01,false), Span(31,32,List(19),fast,fast,false), Span(29,30,List(20),general,general,false), Span(27,28,List(21),healthy,healthy,false), Span(26,27,List(22),very,very,false), Span(24,25,List(23),economy,economy,false), Span(23,24,List(26, 25, 24),Chinese,(country :name (name :op "China")),false), Span(20,21,List(27),stated,state-01,false), Span(19,20,List(30, 29, 28),Wen,(person :name (name :op "Wen")),false), Span(18,19,List(31),growth,grow-01,false), Span(17,18,List(32),balanced,balance-01,false), Span(16,17,List(33),realize,realize-02,false), Span(13,14,List(34),and,and,false), Span(12,13,List(35),economy,economy,false), Span(11,12,List(36),growing,grow-01,false), Span(10,11,List(37),rapidly,rapid,false), Span(8,9,List(40, 39, 38),China,(country :name (name :op "China")),false), Span(7,8,List(41),temper,temper-01,false), Span(3,4,List(42),comment,comment-01,false), Span(1,2,List(43),asked,ask-02,false)),Map(39 -> name, 30 -> "Wen", 2 -> and, 5 -> grow-01, 33 -> realize-02, 27 -> state-01, 12 -> produce-01, 8 -> volume, 15 -> profit-01, 42 -> comment-01, 36 -> grow-01, 21 -> healthy, 18 -> grow-01, 24 -> country, 41 -> temper-01, 35 -> economy, 7 -> and, 1 -> individual, 17 -> increase-01, 23 -> economy, 38 -> country, 26 -> "China", 4 -> fiscal, 11 -> expand-01, 32 -> balance-01, 14 -> improve-01, 29 -> name, 20 -> general, 34 -> and, 28 -> person, 6 -> rapid, 40 -> "China", 43 -> ask-02, 9 -> trade-01, 0 -> income, 22 -> very, 16 -> corporation, 37 -> rapid, 19 -> fast, 10 -> foreign, 3 -> revenue, 31 -> grow-01, 25 -> name, 13 -> agriculture),Map(e -> expand-01, n -> name, v2 -> very, r3 -> realize-02, g3 -> general, h -> healthy, i4 -> increase-01, t -> trade-01, b -> balance-01, p2 -> profit-01, e2 -> economy, c4 -> comment-01, a3 -> agriculture, s -> state-01, v -> volume, g2 -> grow-01, i3 -> improve-01, r2 -> rapid, p -> produce-01, g -> grow-01, n3 -> name, c3 -> country, a -> and, g5 -> grow-01, a5 -> ask-02, f3 -> fast, t2 -> temper-01, i2 -> individual, a2 -> and, r -> revenue, i -> income, r4 -> rapid, c -> corporation, f2 -> foreign, f -> fiscal, e3 -> economy, p3 -> person, g4 -> grow-01, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@68a78f3c,Annotation([Ljava.lang.String;@17ba57f0,[Ljava.lang.String;@3481ff98,[Ljava.lang.String;@2ddb3ae8),Annotation([Ljava.lang.String;@79518e00,[Ljava.lang.String;@3c91530d,[Ledu.cmu.lti.nlp.amr.Dependency;@7d70638),Annotation([Ljava.lang.String;@732f6050,[Ljava.lang.String;@6fbc1bb,[Ljava.lang.String;@30c4e352),Annotation([Ljava.lang.String;@f1dd5b4,[Ljava.lang.String;@73809e7,[Ledu.cmu.lti.nlp.amr.Entity;@5f96f6a2))
AMR:
(a / and, op, i / income)
(a2 / and, op, e / expand-01)
(a2 / and, op, g2 / grow-01)
(a2 / and, op, g4 / grow-01)
(a2 / and, op, h / healthy)
(a2 / and, op, i3 / improve-01)
(a2 / and, op, i4 / increase-01)
(a4 / and, op, r3 / realize-02)
(a5 / ask-02, ARG1, c4 / comment-01)
(a5 / ask-02, ARG2, p3 / person)
(b / balance-01, ARG1, c2 / country)
(c2 / country, name, n / name)
(c3 / country, name, n3 / name)
(c4 / comment-01, ARG0, p3 / person)
(c4 / comment-01, ARG1, a4 / and)
(e / expand-01, ARG1, v / volume)
(e2 / economy, mod, c3 / country)
(e3 / economy, mod, g / grow-01)
(e3 / economy, poss, c3 / country)
(g / grow-01, ARG1, r / revenue)
(g / grow-01, manner, r4 / rapid)
(g2 / grow-01, ARG1, e2 / economy)
(g4 / grow-01, ARG1, a / and)
(g4 / grow-01, manner, r2 / rapid)
(g5 / grow-01, ARG1, b / balance-01)
(h / healthy, degree, v2 / very)
(h / healthy, manner, g3 / general)
(i / income, mod, i2 / individual)
(i3 / improve-01, ARG1, p / produce-01)
(i4 / increase-01, ARG1, p2 / profit-01)
(n / name, op, "China")
(n2 / name, op, "Wen")
(n3 / name, op, "China")
(p / produce-01, ARG1, a3 / agriculture)
(p2 / profit-01, ARG1, c / corporation)
(p3 / person, name, n2 / name)
(r / revenue, mod, f / fiscal)
(r3 / realize-02, ARG1, g5 / grow-01)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, a2 / and)
(s / state-01, time, a5 / ask-02)
(t / trade-01, ARG1, f3 / fast)
(t / trade-01, mod, f2 / foreign)
(t2 / temper-01, ARG1, e3 / economy)
(v / volume, mod, t / trade-01)

Decoded in 4,534,713 microseconds
Sentence: In order to restrict the excessive fixed asset construction that caused a rise in capital good prices and strained the supply of coal, electricity, oil and transportation, the Chinese government will increase its macro economic control and employ all necessary administrative methods.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 43-44:  administrative => administrate-01
Span 41-42:  all => all
Span 39-40:  and => and
Span 27-28:  and => and
Span 17-18:  and => and
Span 7-8:  asset => asset
Span 14-15:  capital => capital
Span 10-11:  caused => cause-01
Span 31-32:  Chinese => (country :name (name :op "China"))
Span 22-23:  coal => coal
Span 8-9:  construction => construct-01
Span 38-39:  control => control-01
Span 37-38:  economic => economy
Span 24-25:  electricity => electricity
Span 40-41:  employ => employ-02
Span 5-6:  excessive => excessive
Span 6-7:  fixed => fix-03
Span 15-16:  good => good-41
Span 32-33:  government => (government-organization :ARG0-of govern-01)
Span 34-35:  increase => increase-01
Span 36-37:  macro => macro
Span 44-45:  methods => method
Span 26-27:  oil => oil
Span 16-17:  prices => price-01
Span 3-4:  restrict => restrict-01
Span 12-13:  rise => rise-01
Span 18-19:  strained => strain-01
Span 20-21:  supply => supply-01
Span 28-29:  transportation => transportation

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(44,45,List(0),methods,method,false), Span(43,44,List(1),administrative,administrate-01,false), Span(41,42,List(2),all,all,false), Span(40,41,List(3),employ,employ-02,false), Span(39,40,List(4),and,and,false), Span(38,39,List(5),control,control-01,false), Span(37,38,List(6),economic,economy,false), Span(36,37,List(7),macro,macro,false), Span(34,35,List(8),increase,increase-01,false), Span(32,33,List(10, 9),government,(government-organization :ARG0-of govern-01),false), Span(31,32,List(13, 12, 11),Chinese,(country :name (name :op "China")),false), Span(28,29,List(14),transportation,transportation,false), Span(27,28,List(15),and,and,false), Span(26,27,List(16),oil,oil,false), Span(24,25,List(17),electricity,electricity,false), Span(22,23,List(18),coal,coal,false), Span(20,21,List(19),supply,supply-01,false), Span(18,19,List(20),strained,strain-01,false), Span(17,18,List(21),and,and,false), Span(16,17,List(22),prices,price-01,false), Span(15,16,List(23),good,good-41,false), Span(14,15,List(24),capital,capital,false), Span(12,13,List(25),rise,rise-01,false), Span(10,11,List(26),caused,cause-01,false), Span(8,9,List(27),construction,construct-01,false), Span(7,8,List(28),asset,asset,false), Span(6,7,List(29),fixed,fix-03,false), Span(5,6,List(30),excessive,excessive,false), Span(3,4,List(31),restrict,restrict-01,false)),Map(30 -> excessive, 2 -> all, 5 -> control-01, 27 -> construct-01, 12 -> name, 8 -> increase-01, 15 -> and, 21 -> and, 18 -> coal, 24 -> capital, 7 -> macro, 1 -> administrate-01, 17 -> electricity, 23 -> good-41, 26 -> cause-01, 4 -> and, 11 -> country, 14 -> transportation, 29 -> fix-03, 20 -> strain-01, 28 -> asset, 6 -> economy, 9 -> government-organization, 0 -> method, 22 -> price-01, 16 -> oil, 19 -> supply-01, 10 -> govern-01, 3 -> employ-02, 31 -> restrict-01, 25 -> rise-01, 13 -> "China"),Map(e -> employ-02, n -> name, g3 -> good-41, s2 -> strain-01, t -> transportation, m2 -> macro, e2 -> economy, a3 -> and, c4 -> capital, s -> supply-01, a6 -> asset, m -> method, g2 -> govern-01, r2 -> restrict-01, g -> government-organization, p -> price-01, a -> administrate-01, c3 -> coal, e4 -> excessive, a5 -> and, c6 -> construct-01, i -> increase-01, a2 -> all, r -> rise-01, c -> control-01, f -> fix-03, o -> oil, e3 -> electricity, c2 -> country, a4 -> and, c5 -> cause-01))),[Ljava.lang.String;@48df4071,Annotation([Ljava.lang.String;@290e8cab,[Ljava.lang.String;@6e3ecf5c,[Ljava.lang.String;@67507df),Annotation([Ljava.lang.String;@341b13a8,[Ljava.lang.String;@692dba54,[Ledu.cmu.lti.nlp.amr.Dependency;@71f1cc02),Annotation([Ljava.lang.String;@5f14761c,[Ljava.lang.String;@33feb805,[Ljava.lang.String;@37854b34),Annotation([Ljava.lang.String;@48eb001a,[Ljava.lang.String;@34332b8d,[Ledu.cmu.lti.nlp.amr.Entity;@724b939e))
AMR:
(a3 / and, op, e / employ-02)
(a3 / and, op, i / increase-01)
(a4 / and, op, c3 / coal)
(a4 / and, op, e3 / electricity)
(a4 / and, op, o / oil)
(a5 / and, op, i / increase-01)
(a5 / and, purpose, r2 / restrict-01)
(c / control-01, ARG0, g / government-organization)
(c / control-01, ARG1, c4 / capital)
(c / control-01, ARG2, e2 / economy)
(c / control-01, mod, m2 / macro)
(c2 / country, name, n / name)
(c5 / cause-01, ARG0, c6 / construct-01)
(c5 / cause-01, ARG1, r / rise-01)
(c6 / construct-01, ARG1, a6 / asset)
(c6 / construct-01, mod, e4 / excessive)
(e / employ-02, ARG0, g / government-organization)
(e / employ-02, ARG1, m / method)
(f / fix-03, ARG1, a6 / asset)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(g3 / good-41, ARG1, p / price-01)
(i / increase-01, ARG0, g / government-organization)
(i / increase-01, ARG1, c / control-01)
(m / method, mod, a / administrate-01)
(m / method, mod, a2 / all)
(n / name, op, "China")
(p / price-01, ARG1, t / transportation)
(r / rise-01, ARG1, p / price-01)
(r2 / restrict-01, ARG0, g / government-organization)
(r2 / restrict-01, ARG1, c6 / construct-01)
(s / supply-01, ARG1, a4 / and)
(s2 / strain-01, ARG0, c6 / construct-01)
(s2 / strain-01, ARG1, s / supply-01)

Decoded in 2,993,198 microseconds
Sentence: Wen stated that the Chinese government will control the loan and land supply and will advance reform in the structural and systematic causes of current economic problems.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 15-16:  advance => advance-01
Span 20-21:  and => and
Span 13-14:  and => and
Span 10-11:  and => and
Span 22-23:  causes => cause-01
Span 4-5:  Chinese => (country :name (name :op "China"))
Span 7-8:  control => control-01
Span 24-25:  current => current
Span 25-26:  economic => economy
Span 5-6:  government => (government-organization :ARG0-of govern-01)
Span 11-12:  land => land
Span 9-10:  loan => loan-01
Span 26-27:  problems => problem
Span 16-17:  reform => reform-01
Span 1-2:  stated => state-01
Span 19-20:  structural => structure
Span 12-13:  supply => supply-01
Span 21-22:  systematic => systematic
Span 0-1:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(26,27,List(0),problems,problem,false), Span(25,26,List(1),economic,economy,false), Span(24,25,List(2),current,current,false), Span(22,23,List(3),causes,cause-01,false), Span(21,22,List(4),systematic,systematic,false), Span(20,21,List(5),and,and,false), Span(19,20,List(6),structural,structure,false), Span(16,17,List(7),reform,reform-01,false), Span(15,16,List(8),advance,advance-01,false), Span(13,14,List(9),and,and,false), Span(12,13,List(10),supply,supply-01,false), Span(11,12,List(11),land,land,false), Span(10,11,List(12),and,and,false), Span(9,10,List(13),loan,loan-01,false), Span(7,8,List(14),control,control-01,false), Span(5,6,List(16, 15),government,(government-organization :ARG0-of govern-01),false), Span(4,5,List(19, 18, 17),Chinese,(country :name (name :op "China")),false), Span(1,2,List(20),stated,state-01,false), Span(0,1,List(23, 22, 21),Wen,(person :name (name :op "Wen")),false)),Map(2 -> current, 5 -> and, 12 -> and, 15 -> government-organization, 8 -> advance-01, 21 -> person, 18 -> name, 7 -> reform-01, 17 -> country, 1 -> economy, 23 -> "Wen", 4 -> systematic, 11 -> land, 14 -> control-01, 20 -> state-01, 6 -> structure, 22 -> name, 0 -> problem, 9 -> and, 16 -> govern-01, 19 -> "China", 3 -> cause-01, 10 -> supply-01, 13 -> loan-01),Map(e -> economy, n -> name, s2 -> structure, p2 -> person, c4 -> country, a3 -> and, s -> systematic, s4 -> state-01, g2 -> govern-01, g -> government-organization, p -> problem, c3 -> control-01, a -> and, l2 -> loan-01, r -> reform-01, a2 -> advance-01, c -> current, s3 -> supply-01, l -> land, n2 -> name, c2 -> cause-01, a4 -> and))),[Ljava.lang.String;@6f8aba08,Annotation([Ljava.lang.String;@7ff19c33,[Ljava.lang.String;@52b3bf03,[Ljava.lang.String;@7cca01a8),Annotation([Ljava.lang.String;@462abec3,[Ljava.lang.String;@35c9a231,[Ledu.cmu.lti.nlp.amr.Dependency;@7a4d582c),Annotation([Ljava.lang.String;@5626d18c,[Ljava.lang.String;@45e9b12d,[Ljava.lang.String;@3dc95b8b),Annotation([Ljava.lang.String;@2d55e826,[Ljava.lang.String;@4d1ff6b1,[Ledu.cmu.lti.nlp.amr.Entity;@45f756e6))
AMR:
(a / and, op, c2 / cause-01)
(a2 / advance-01, ARG0, g / government-organization)
(a2 / advance-01, ARG1, r / reform-01)
(a3 / and, op, l2 / loan-01)
(a3 / and, op, s3 / supply-01)
(a4 / and, op, c3 / control-01)
(c2 / cause-01, ARG1, p / problem)
(c2 / cause-01, mod, s / systematic)
(c2 / cause-01, mod, s2 / structure)
(c3 / control-01, ARG0, g / government-organization)
(c3 / control-01, ARG1, a3 / and)
(c4 / country, name, n / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c4 / country)
(n / name, op, "China")
(n2 / name, op, "Wen")
(p / problem, mod, c / current)
(p / problem, topic, e / economy)
(p2 / person, name, n2 / name)
(r / reform-01, ARG1, c2 / cause-01)
(s3 / supply-01, ARG1, l / land)
(s4 / state-01, ARG0, p2 / person)
(s4 / state-01, ARG1, a4 / and)

Decoded in 1,280,213 microseconds
Sentence: With regard to the issue of social balance Wen stated that China's new leadership has begun to resolve problems of coordination between urban and rural development and between different regions and has focused on balancing economic growth with social progress, domestic construction with external works, and development with respect for nature.

NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
Spans:
Span 48-49:  and => and
Span 31-32:  and => and
Span 27-28:  and => and
Span 24-25:  and => and
Span 7-8:  balance => balance-01
Span 35-36:  balancing => balance-01
Span 16-17:  begun => begin-01
Span 28-29:  between => between
Span 22-23:  between => between
Span 11-12:  China => (country :name (name :op "China"))
Span 43-44:  construction => construct-01
Span 21-22:  coordination => coordinate-01
Span 49-50:  development => develop-02
Span 26-27:  development => develop-02
Span 29-30:  different => differ-02
Span 42-43:  domestic => domestic
Span 36-37:  economic => economy
Span 45-46:  external => external
Span 33-34:  focused => focus-01
Span 37-38:  growth => grow-01
Span 4-5:  issue => issue
Span 14-15:  leadership => (person :ARG0-of lead-02)
Span 53-54:  nature => nature
Span 13-14:  new => new
Span 19-20:  problems => problem
Span 40-41:  progress => progress-01
Span 1-2:  regard => regard-01
Span 30-31:  regions => region
Span 18-19:  resolve => resolve-01
Span 51-52:  respect => respect-01
Span 25-26:  rural => rural
Span 39-40:  social => society
Span 6-7:  social => society
Span 9-10:  stated => state-01
Span 8-9:  Wen => (person :name (name :op "Wen"))
Span 46-47:  works => work-01

Langrangian relaxation converged after 105 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(53,54,List(0),nature,nature,false), Span(51,52,List(1),respect,respect-01,false), Span(49,50,List(2),development,develop-02,false), Span(48,49,List(3),and,and,false), Span(46,47,List(4),works,work-01,false), Span(45,46,List(5),external,external,false), Span(43,44,List(6),construction,construct-01,false), Span(42,43,List(7),domestic,domestic,false), Span(40,41,List(8),progress,progress-01,false), Span(39,40,List(9),social,society,false), Span(37,38,List(10),growth,grow-01,false), Span(36,37,List(11),economic,economy,false), Span(35,36,List(12),balancing,balance-01,false), Span(33,34,List(13),focused,focus-01,false), Span(31,32,List(14),and,and,false), Span(30,31,List(15),regions,region,false), Span(29,30,List(16),different,differ-02,false), Span(28,29,List(17),between,between,false), Span(27,28,List(18),and,and,false), Span(26,27,List(19),development,develop-02,false), Span(25,26,List(20),rural,rural,false), Span(24,25,List(21),and,and,false), Span(22,23,List(22),between,between,false), Span(21,22,List(23),coordination,coordinate-01,false), Span(19,20,List(24),problems,problem,false), Span(18,19,List(25),resolve,resolve-01,false), Span(16,17,List(26),begun,begin-01,false), Span(14,15,List(28, 27),leadership,(person :ARG0-of lead-02),false), Span(13,14,List(29),new,new,false), Span(11,12,List(32, 31, 30),China,(country :name (name :op "China")),false), Span(9,10,List(33),stated,state-01,false), Span(8,9,List(36, 35, 34),Wen,(person :name (name :op "Wen")),false), Span(7,8,List(37),balance,balance-01,false), Span(6,7,List(38),social,society,false), Span(4,5,List(39),issue,issue,false), Span(1,2,List(40),regard,regard-01,false)),Map(39 -> issue, 30 -> country, 2 -> develop-02, 5 -> external, 33 -> state-01, 27 -> person, 12 -> balance-01, 8 -> progress-01, 15 -> region, 36 -> "Wen", 21 -> and, 18 -> and, 24 -> problem, 35 -> name, 7 -> domestic, 1 -> respect-01, 17 -> between, 23 -> coordinate-01, 38 -> society, 26 -> begin-01, 4 -> work-01, 11 -> economy, 32 -> "China", 14 -> and, 29 -> new, 20 -> rural, 34 -> person, 28 -> lead-02, 6 -> construct-01, 40 -> regard-01, 9 -> society, 0 -> nature, 22 -> between, 16 -> differ-02, 37 -> balance-01, 19 -> develop-02, 10 -> grow-01, 3 -> and, 31 -> name, 25 -> resolve-01, 13 -> focus-01),Map(e -> external, w -> work-01, n -> nature, b3 -> between, r3 -> rural, s2 -> state-01, b -> balance-01, b2 -> between, d3 -> differ-02, b5 -> balance-01, e2 -> economy, p2 -> problem, n4 -> name, a3 -> and, s -> society, d -> develop-02, r2 -> region, g -> grow-01, p -> progress-01, n3 -> name, c3 -> country, a -> and, p4 -> person, r5 -> regard-01, d2 -> domestic, b4 -> begin-01, i -> issue, r -> respect-01, a2 -> and, r4 -> resolve-01, c -> construct-01, s3 -> society, l -> lead-02, d4 -> develop-02, f -> focus-01, p3 -> person, n2 -> new, c2 -> coordinate-01, a4 -> and))),[Ljava.lang.String;@329548d0,Annotation([Ljava.lang.String;@3003827c,[Ljava.lang.String;@29b40b3,[Ljava.lang.String;@7d247660),Annotation([Ljava.lang.String;@656f62dc,[Ljava.lang.String;@49d30c6f,[Ledu.cmu.lti.nlp.amr.Dependency;@1115433e),Annotation([Ljava.lang.String;@4fdca00a,[Ljava.lang.String;@513b52af,[Ljava.lang.String;@5a8c93),Annotation([Ljava.lang.String;@3bed3315,[Ljava.lang.String;@119b0892,[Ledu.cmu.lti.nlp.amr.Entity;@1a3e8e24))
AMR:
(a / and, op, c / construct-01)
(a / and, op, w / work-01)
(a2 / and, op, d4 / develop-02)
(a2 / and, op, f / focus-01)
(a2 / and, op, r / respect-01)
(a3 / and, op, a2 / and)
(a4 / and, op, b4 / begin-01)
(b3 / between, op, r2 / region)
(b4 / begin-01, ARG0, p3 / person)
(b4 / begin-01, ARG1, r4 / resolve-01)
(b5 / balance-01, ARG1, s3 / society)
(c / construct-01, ARG1, s / society)
(c / construct-01, mod, d2 / domestic)
(c2 / coordinate-01, ARG1, b3 / between)
(c3 / country, name, n3 / name)
(d / develop-02, ARG1, r / respect-01)
(d / develop-02, mod, b2 / between)
(d3 / differ-02, ARG1, r2 / region)
(d4 / develop-02, ARG1, r3 / rural)
(f / focus-01, ARG0, p3 / person)
(f / focus-01, ARG1, b / balance-01)
(g / grow-01, ARG1, e2 / economy)
(g / grow-01, ARG2, r2 / region)
(i / issue, domain, b5 / balance-01)
(l / lead-02, ARG0, p3 / person)
(l / lead-02, ARG1, c3 / country)
(n3 / name, op, "China")
(n4 / name, op, "Wen")
(p / progress-01, ARG1, s / society)
(p2 / problem, mod, c2 / coordinate-01)
(p3 / person, mod, n2 / new)
(p4 / person, name, n4 / name)
(r / respect-01, ARG1, n / nature)
(r4 / resolve-01, ARG0, p3 / person)
(r4 / resolve-01, ARG1, p2 / problem)
(r5 / regard-01, ARG0, p4 / person)
(r5 / regard-01, ARG1, i / issue)
(s2 / state-01, ARG0, p4 / person)
(s2 / state-01, ARG1, b4 / begin-01)
(s2 / state-01, manner, r5 / regard-01)
(w / work-01, ARG1, r / respect-01)
(w / work-01, mod, e / external)

Decoded in 9,874,230 microseconds
Sentence: When asked to comment on German Federal Chancellor Gerhard Schroeder's promise to support sale of nuclear fuel from Hanau to China Wen stated that cooperation between China and Germany in this field is exclusively for peaceful utilization of nuclear energy with equality and mutual benefits.

NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Gerhard" :op "Schroeder"))
NER Entity: (country :name (name :op "Hanau"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Wen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Hanau"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 43-44:  and => and
Span 28-29:  and => and
Span 1-2:  asked => ask-02
Span 45-46:  benefits => benefit-01
Span 26-27:  between => between
Span 7-8:  Chancellor => chancellor
Span 27-28:  China => (country :name (name :op "China"))
Span 21-22:  China => (country :name (name :op "China"))
Span 3-4:  comment => comment-01
Span 25-26:  cooperation => cooperate-01
Span 40-41:  energy => energy
Span 42-43:  equality => equality
Span 34-35:  exclusively => exclusive
Span 6-7:  Federal => federal
Span 32-33:  field => field
Span 17-18:  fuel => fuel
Span 8-10:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Span 5-6:  German => (country :name (name :op "Germany"))
Span 29-30:  Germany => (country :name (name :op "Germany"))
Span 19-20:  Hanau => (city :name (name :op "Hanau"))
Span 44-45:  mutual => mutual
Span 39-40:  nuclear => nucleus
Span 16-17:  nuclear => nucleus
Span 36-37:  peaceful => peaceful
Span 11-12:  promise => promise-01
Span 23-24:  stated => state-01
Span 13-14:  support => support-01
Span 31-32:  this => this
Span 37-38:  utilization => utilize-01
Span 22-23:  Wen => (person :name (name :op "Wen"))

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(45,46,List(0),benefits,benefit-01,false), Span(44,45,List(1),mutual,mutual,false), Span(43,44,List(2),and,and,false), Span(42,43,List(3),equality,equality,false), Span(40,41,List(4),energy,energy,false), Span(39,40,List(5),nuclear,nucleus,false), Span(37,38,List(6),utilization,utilize-01,false), Span(36,37,List(7),peaceful,peaceful,false), Span(34,35,List(8),exclusively,exclusive,false), Span(32,33,List(9),field,field,false), Span(31,32,List(10),this,this,false), Span(29,30,List(13, 12, 11),Germany,(country :name (name :op "Germany")),false), Span(28,29,List(14),and,and,false), Span(27,28,List(17, 16, 15),China,(country :name (name :op "China")),false), Span(26,27,List(18),between,between,false), Span(25,26,List(19),cooperation,cooperate-01,false), Span(23,24,List(20),stated,state-01,false), Span(22,23,List(23, 22, 21),Wen,(person :name (name :op "Wen")),false), Span(21,22,List(26, 25, 24),China,(country :name (name :op "China")),false), Span(19,20,List(29, 28, 27),Hanau,(city :name (name :op "Hanau")),false), Span(17,18,List(30),fuel,fuel,false), Span(16,17,List(31),nuclear,nucleus,false), Span(13,14,List(32),support,support-01,false), Span(11,12,List(33),promise,promise-01,false), Span(8,10,List(37, 36, 35, 34),Gerhard Schroeder,(person :name (name :op "Schroeder" :op "Gerhard")),false), Span(7,8,List(38),Chancellor,chancellor,false), Span(6,7,List(39),Federal,federal,false), Span(5,6,List(42, 41, 40),German,(country :name (name :op "Germany")),false), Span(3,4,List(43),comment,comment-01,false), Span(1,2,List(44),asked,ask-02,false)),Map(39 -> federal, 30 -> fuel, 2 -> and, 5 -> nucleus, 33 -> promise-01, 27 -> city, 12 -> name, 8 -> exclusive, 15 -> country, 42 -> "Germany", 36 -> "Schroeder", 21 -> person, 18 -> between, 24 -> country, 41 -> name, 35 -> name, 7 -> peaceful, 1 -> mutual, 17 -> "China", 44 -> ask-02, 23 -> "Wen", 38 -> chancellor, 26 -> "China", 4 -> energy, 11 -> country, 32 -> support-01, 14 -> and, 29 -> "Hanau", 20 -> state-01, 34 -> person, 28 -> name, 6 -> utilize-01, 40 -> country, 43 -> comment-01, 9 -> field, 0 -> benefit-01, 22 -> name, 16 -> name, 37 -> "Gerhard", 19 -> cooperate-01, 10 -> this, 3 -> equality, 31 -> nucleus, 25 -> name, 13 -> "Germany"),Map(e -> equality, n -> nucleus, c8 -> comment-01, s2 -> support-01, t -> this, b -> benefit-01, b2 -> between, c7 -> country, n7 -> nucleus, e2 -> energy, p2 -> person, a3 -> ask-02, n4 -> name, c4 -> country, s -> state-01, m -> mutual, p -> peaceful, a -> and, n3 -> name, c3 -> cooperate-01, p4 -> person, n6 -> name, f3 -> federal, c6 -> chancellor, n9 -> name, a2 -> and, c -> country, f2 -> fuel, u -> utilize-01, n8 -> name, f -> field, p3 -> promise-01, e3 -> exclusive, n2 -> name, c2 -> country, n5 -> name, c5 -> city))),[Ljava.lang.String;@4ed4a7e4,Annotation([Ljava.lang.String;@1c7350b0,[Ljava.lang.String;@55651434,[Ljava.lang.String;@3bc4ef12),Annotation([Ljava.lang.String;@50448409,[Ljava.lang.String;@5634a861,[Ledu.cmu.lti.nlp.amr.Dependency;@2b0dc227),Annotation([Ljava.lang.String;@37ad042b,[Ljava.lang.String;@43bdaa1b,[Ljava.lang.String;@30b975ad),Annotation([Ljava.lang.String;@75e09567,[Ljava.lang.String;@2a334bac,[Ledu.cmu.lti.nlp.amr.Entity;@470d183))
AMR:
(a2 / and, op, b / benefit-01)
(a2 / and, op, e / equality)
(a3 / ask-02, ARG1, c8 / comment-01)
(a3 / ask-02, ARG2, c5 / city)
(b / benefit-01, ARG1, a / and)
(b / benefit-01, mod, m / mutual)
(b2 / between, op, c / country)
(b2 / between, op, c2 / country)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(c3 / cooperate-01, ARG0, c4 / country)
(c3 / cooperate-01, ARG1, c / country)
(c3 / cooperate-01, purpose, u / utilize-01)
(c3 / cooperate-01, topic, f / field)
(c4 / country, name, n5 / name)
(c5 / city, name, n6 / name)
(c6 / chancellor, mod, c7 / country)
(c7 / country, name, n9 / name)
(c8 / comment-01, ARG0, p2 / person)
(c8 / comment-01, ARG1, p3 / promise-01)
(e2 / energy, mod, n / nucleus)
(f / field, mod, t / this)
(f2 / fuel, mod, n7 / nucleus)
(f3 / federal, mod, c7 / country)
(n2 / name, op, "Germany")
(n3 / name, op, "China")
(n4 / name, op, "Wen")
(n5 / name, op, "China")
(n6 / name, op, "Hanau")
(n8 / name, op, "Gerhard")
(n8 / name, op, "Schroeder")
(n9 / name, op, "Germany")
(p2 / person, name, n4 / name)
(p3 / promise-01, ARG0, p4 / person)
(p3 / promise-01, ARG1, n7 / nucleus)
(p3 / promise-01, ARG2, s2 / support-01)
(p4 / person, name, n8 / name)
(s / state-01, ARG1, c3 / cooperate-01)
(s / state-01, time, a3 / ask-02)
(s2 / support-01, ARG0, c6 / chancellor)
(u / utilize-01, ARG1, e2 / energy)
(u / utilize-01, manner, e3 / exclusive)
(u / utilize-01, mod, p / peaceful)
(u / utilize-01, prep-with, a2 / and)

Decoded in 3,567,470 microseconds
Sentence: 2004-09-22

mkDayMonthYear(2004-09-22,22,09,2004)
mkDayMonthYear(2004-09-22,22,09,2004)
Spans:
Span 0-1:  2004-09-22 => (date-entity :day 22 :month 9 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-09-22,(date-entity :day 22 :month 9 :year 2004),false)),Map(2 -> 9, 1 -> 22, 0 -> date-entity, 3 -> 2004),Map(2 -> 22, d -> date-entity, 22 -> 2004, 9 -> 9))),[Ljava.lang.String;@7f9fc8bd,Annotation([Ljava.lang.String;@ea52184,[Ljava.lang.String;@3e7b65d7,[Ljava.lang.String;@3c854752),Annotation([Ljava.lang.String;@3ddeaa5f,[Ljava.lang.String;@1a500561,[Ledu.cmu.lti.nlp.amr.Dependency;@7f608e21),Annotation([Ljava.lang.String;@6949e948,[Ljava.lang.String;@210d2a6c,[Ljava.lang.String;@3bec5821),Annotation([Ljava.lang.String;@4086d8fb,[Ljava.lang.String;@66236a0a,[Ledu.cmu.lti.nlp.amr.Entity;@2e3572e8))
AMR:
(d / date-entity, day, 2 / 22)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 22 / 2004)

Decoded in 7,085 microseconds
Sentence: China (CN); Kyrgyzstan (KG)

NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "CN"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 4-5:  ; => and
Span 0-1:  China => (country :name (name :op "China"))
Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(5,6,List(2, 1, 0),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(4,5,List(3),;,and,false), Span(0,1,List(6, 5, 4),China,(country :name (name :op "China")),false)),Map(2 -> "Kyrgyzstan", 5 -> name, 1 -> name, 4 -> country, 6 -> "China", 0 -> country, 3 -> and),Map(n -> name, a -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@77c10a5f,Annotation([Ljava.lang.String;@176555c,[Ljava.lang.String;@7c781c42,[Ljava.lang.String;@795f8317),Annotation([Ljava.lang.String;@633fd91,[Ljava.lang.String;@355c94be,[Ledu.cmu.lti.nlp.amr.Dependency;@97a145b),Annotation([Ljava.lang.String;@c386958,[Ljava.lang.String;@157ec23b,[Ljava.lang.String;@44d64d4e),Annotation([Ljava.lang.String;@1dd74143,[Ljava.lang.String;@526a9908,[Ledu.cmu.lti.nlp.amr.Entity;@3166f664))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Kyrgyzstan")
(n2 / name, op, "China")

Decoded in 17,197 microseconds
Sentence: International; Government; crime; dissent; terrorism

Spans:
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 4-5:  crime => crime
Span 6-7:  dissent => dissent-01
Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 8-9:  terrorism => terrorism

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(8,9,List(0),terrorism,terrorism,false), Span(7,8,List(1),;,and,false), Span(6,7,List(2),dissent,dissent-01,false), Span(5,6,List(3),;,and,false), Span(4,5,List(4),crime,crime,false), Span(3,4,List(5),;,and,false), Span(2,3,List(7, 6),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(8),;,and,false), Span(0,1,List(9),International,international,false)),Map(2 -> dissent-01, 5 -> and, 8 -> and, 7 -> govern-01, 1 -> and, 4 -> crime, 6 -> government-organization, 9 -> international, 0 -> terrorism, 3 -> and),Map(t -> terrorism, a3 -> and, d -> dissent-01, g2 -> govern-01, g -> government-organization, a -> and, i -> international, a2 -> and, c -> crime, a4 -> and))),[Ljava.lang.String;@47ac613b,Annotation([Ljava.lang.String;@60d6fdd4,[Ljava.lang.String;@66f28a1f,[Ljava.lang.String;@60a19573),Annotation([Ljava.lang.String;@44a085e5,[Ljava.lang.String;@134ff8f8,[Ledu.cmu.lti.nlp.amr.Dependency;@619f2afc),Annotation([Ljava.lang.String;@df921b1,[Ljava.lang.String;@4db60246,[Ljava.lang.String;@2152ab30),Annotation([Ljava.lang.String;@3902bd2c,[Ljava.lang.String;@7d32e714,[Ledu.cmu.lti.nlp.amr.Entity;@eb6ec6))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, t / terrorism)
(a3 / and, op, d / dissent-01)
(a4 / and, op, a3 / and)
(a4 / and, op, c / crime)
(a4 / and, op, g / government-organization)
(a4 / and, op, i / international)
(a4 / and, op, t / terrorism)
(g2 / govern-01, ARG0, g / government-organization)

Decoded in 43,184 microseconds
Sentence: China and Kyrgyzstan pledge to make joint efforts to crack down on terrorism and other threats to regional and global security.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 18-19:  and => and
Span 13-14:  and => and
Span 1-2:  and => and
Span 0-1:  China => (country :name (name :op "China"))
Span 9-10:  crack => crack-06
Span 10-11:  down => down
Span 7-8:  efforts => effort
Span 19-20:  global => globe
Span 6-7:  joint => joint
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 5-6:  make => make-01
Span 14-15:  other => other
Span 3-4:  pledge => pledge-01
Span 17-18:  regional => region
Span 20-21:  security => security
Span 12-13:  terrorism => terrorism
Span 15-16:  threats => threaten-01

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),security,security,false), Span(19,20,List(1),global,globe,false), Span(18,19,List(2),and,and,false), Span(17,18,List(3),regional,region,false), Span(15,16,List(4),threats,threaten-01,false), Span(14,15,List(5),other,other,false), Span(13,14,List(6),and,and,false), Span(12,13,List(7),terrorism,terrorism,false), Span(10,11,List(8),down,down,false), Span(9,10,List(9),crack,crack-06,false), Span(7,8,List(10),efforts,effort,false), Span(6,7,List(11),joint,joint,false), Span(5,6,List(12),make,make-01,false), Span(3,4,List(13),pledge,pledge-01,false), Span(2,3,List(16, 15, 14),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(1,2,List(17),and,and,false), Span(0,1,List(20, 19, 18),China,(country :name (name :op "China")),false)),Map(2 -> and, 5 -> other, 12 -> make-01, 15 -> name, 8 -> down, 18 -> country, 7 -> terrorism, 17 -> and, 1 -> globe, 4 -> threaten-01, 11 -> joint, 14 -> country, 20 -> "China", 6 -> and, 0 -> security, 9 -> crack-06, 16 -> "Kyrgyzstan", 19 -> name, 3 -> region, 10 -> effort, 13 -> pledge-01),Map(e -> effort, n -> name, t -> threaten-01, a3 -> and, j -> joint, s -> security, d -> down, m -> make-01, p -> pledge-01, g -> globe, c3 -> country, a -> and, t2 -> terrorism, r -> region, a2 -> and, c -> crack-06, o -> other, n2 -> name, c2 -> country))),[Ljava.lang.String;@34d45ec0,Annotation([Ljava.lang.String;@18137eab,[Ljava.lang.String;@727320fa,[Ljava.lang.String;@2935fd2c),Annotation([Ljava.lang.String;@3f018494,[Ljava.lang.String;@3ce443f9,[Ledu.cmu.lti.nlp.amr.Dependency;@57fbc06f),Annotation([Ljava.lang.String;@51a18b21,[Ljava.lang.String;@62b790a5,[Ljava.lang.String;@7c52fc81),Annotation([Ljava.lang.String;@7523a3dc,[Ljava.lang.String;@2806d6da,[Ledu.cmu.lti.nlp.amr.Entity;@766a49c7))
AMR:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a2 / and, op, s / security)
(a3 / and, op, t / threaten-01)
(a3 / and, op, t2 / terrorism)
(c / crack-06, ARG1, e / effort)
(c / crack-06, ARG6, d / down)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(e / effort, mod, j / joint)
(m / make-01, ARG0, a3 / and)
(m / make-01, ARG1, e / effort)
(n / name, op, "Kyrgyzstan")
(n2 / name, op, "China")
(p / pledge-01, ARG0, a / and)
(p / pledge-01, ARG1, m / make-01)
(s / security, mod, g / globe)
(t / threaten-01, ARG1, r / region)
(t / threaten-01, ARG2, a2 / and)
(t / threaten-01, mod, o / other)

Decoded in 1,035,663 microseconds
Sentence: China and Kyrgyzstan agreed in a joint communique that terrorism, separatism and extremism still pose major threats to regional security and stability.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 3-4:  agreed => agree-01
Span 21-22:  and => and
Span 12-13:  and => and
Span 1-2:  and => and
Span 0-1:  China => (country :name (name :op "China"))
Span 7-8:  communique => communique
Span 13-14:  extremism => extremism
Span 6-7:  joint => joint
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 16-17:  major => major
Span 15-16:  pose => pose-02
Span 19-20:  regional => region
Span 20-21:  security => security
Span 11-12:  separatism => separatism
Span 22-23:  stability => stability
Span 14-15:  still => still
Span 9-10:  terrorism => terrorism
Span 17-18:  threats => threaten-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(22,23,List(0),stability,stability,false), Span(21,22,List(1),and,and,false), Span(20,21,List(2),security,security,false), Span(19,20,List(3),regional,region,false), Span(17,18,List(4),threats,threaten-01,false), Span(16,17,List(5),major,major,false), Span(15,16,List(6),pose,pose-02,false), Span(14,15,List(7),still,still,false), Span(13,14,List(8),extremism,extremism,false), Span(12,13,List(9),and,and,false), Span(11,12,List(10),separatism,separatism,false), Span(9,10,List(11),terrorism,terrorism,false), Span(7,8,List(12),communique,communique,false), Span(6,7,List(13),joint,joint,false), Span(3,4,List(14),agreed,agree-01,false), Span(2,3,List(17, 16, 15),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(1,2,List(18),and,and,false), Span(0,1,List(21, 20, 19),China,(country :name (name :op "China")),false)),Map(2 -> security, 5 -> major, 12 -> communique, 15 -> country, 8 -> extremism, 21 -> "China", 18 -> and, 7 -> still, 17 -> "Kyrgyzstan", 1 -> and, 4 -> threaten-01, 11 -> terrorism, 14 -> agree-01, 20 -> name, 6 -> pose-02, 0 -> stability, 9 -> and, 16 -> name, 19 -> country, 3 -> region, 10 -> separatism, 13 -> joint),Map(e -> extremism, n -> name, s2 -> security, t -> threaten-01, a3 -> agree-01, j -> joint, s -> stability, s4 -> separatism, m -> major, p -> pose-02, c3 -> country, a -> and, t2 -> terrorism, r -> region, a2 -> and, s3 -> still, c -> communique, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@1db7157f,Annotation([Ljava.lang.String;@75e27856,[Ljava.lang.String;@6bccd036,[Ljava.lang.String;@4f4c88f9),Annotation([Ljava.lang.String;@6a756082,[Ljava.lang.String;@cb39552,[Ledu.cmu.lti.nlp.amr.Dependency;@1f3b992),Annotation([Ljava.lang.String;@2a53f215,[Ljava.lang.String;@6b63e6ad,[Ljava.lang.String;@7beae796),Annotation([Ljava.lang.String;@6749fe50,[Ljava.lang.String;@52bf7bf6,[Ledu.cmu.lti.nlp.amr.Entity;@261db982))
AMR:
(a / and, op, c2 / country)
(a / and, op, c3 / country)
(a2 / and, op, s / stability)
(a2 / and, op, s2 / security)
(a3 / agree-01, ARG0, a / and)
(a3 / agree-01, ARG1, t / threaten-01)
(a3 / agree-01, instrument, c / communique)
(a4 / and, op, e / extremism)
(a4 / and, op, s4 / separatism)
(a4 / and, op, t2 / terrorism)
(c / communique, mod, j / joint)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(n / name, op, "Kyrgyzstan")
(n2 / name, op, "China")
(p / pose-02, ARG1, t / threaten-01)
(p / pose-02, mod, s3 / still)
(s / stability, mod, r / region)
(t / threaten-01, ARG0, a4 / and)
(t / threaten-01, ARG2, a2 / and)
(t / threaten-01, degree, m / major)

Decoded in 368,226 microseconds
Sentence: The communique was signed by visiting Chinese Premier Wen Jiabao and his Kyrgyz counterpart Nikolai Tanayev on 040922.

NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Wen" :op "Jiabao"))
NER Entity: (thing :name (name :op "Kyrgyz"))
NER Entity: (person :name (name :op "Nikolai" :op "Tanayev"))
mkDayMonthYear(040922,22,09,2004)
mkDayMonthYear(040922,22,09,04)
mkDayMonthYear(040922,22,09,2004)
mkDayMonthYear(040922,22,09,04)
NER Entity: (thing :name (name :op "Kyrgyz"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 17-18:  040922 => (date-entity :day 22 :month 9 :year 2004)
Span 10-11:  and => and
Span 6-7:  Chinese => (country :name (name :op "China"))
Span 1-2:  communique => communique
Span 13-14:  counterpart => counterpart
Span 12-13:  Kyrgyz => (country :name (name :op "Kyrgyzstan"))
Span 14-16:  Nikolai Tanayev => (name :op "Tanayev" :op "Nikolai")
Span 7-8:  Premier => (have-org-role-91 :ARG2 premier)
Span 3-4:  signed => sign-02
Span 5-6:  visiting => visit-01
Span 8-10:  Wen Jiabao => (person :name (name :op "Wen" :op "Jiabao"))

Langrangian relaxation converged after 68 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(17,18,List(3, 2, 1, 0),040922,(date-entity :day 22 :month 9 :year 2004),false), Span(14,16,List(6, 5, 4),Nikolai Tanayev,(name :op "Tanayev" :op "Nikolai"),false), Span(13,14,List(7),counterpart,counterpart,false), Span(12,13,List(10, 9, 8),Kyrgyz,(country :name (name :op "Kyrgyzstan")),false), Span(10,11,List(11),and,and,false), Span(8,10,List(15, 14, 13, 12),Wen Jiabao,(person :name (name :op "Wen" :op "Jiabao")),false), Span(7,8,List(17, 16),Premier,(have-org-role-91 :ARG2 premier),false), Span(6,7,List(20, 19, 18),Chinese,(country :name (name :op "China")),false), Span(5,6,List(21),visiting,visit-01,false), Span(3,4,List(22),signed,sign-02,false), Span(1,2,List(23),communique,communique,false)),Map(2 -> 9, 5 -> "Tanayev", 12 -> person, 15 -> "Jiabao", 8 -> country, 21 -> visit-01, 18 -> country, 7 -> counterpart, 17 -> premier, 1 -> 22, 23 -> communique, 4 -> name, 11 -> and, 14 -> "Wen", 20 -> "China", 6 -> "Nikolai", 22 -> sign-02, 0 -> date-entity, 9 -> name, 16 -> have-org-role-91, 19 -> name, 3 -> 2004, 10 -> "Kyrgyzstan", 13 -> name),Map(n -> name, h -> have-org-role-91, 2 -> 22, p2 -> premier, c4 -> communique, n4 -> name, s -> sign-02, v -> visit-01, d -> date-entity, p -> person, c3 -> country, a -> and, n3 -> name, c -> counterpart, 9 -> 9, 22 -> 2004, c2 -> country, n2 -> name))),[Ljava.lang.String;@ae73c80,Annotation([Ljava.lang.String;@22f4f8f2,[Ljava.lang.String;@bbd4791,[Ljava.lang.String;@40a72ecd),Annotation([Ljava.lang.String;@73971965,[Ljava.lang.String;@76a14c8d,[Ledu.cmu.lti.nlp.amr.Dependency;@17410c07),Annotation([Ljava.lang.String;@6ee99964,[Ljava.lang.String;@257ef9ed,[Ljava.lang.String;@59c70ceb),Annotation([Ljava.lang.String;@46f902e0,[Ljava.lang.String;@64f981e2,[Ledu.cmu.lti.nlp.amr.Entity;@361abd01))
AMR:
(a / and, op, c / counterpart)
(c / counterpart, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n4 / name)
(d / date-entity, day, 2 / 22)
(d / date-entity, month, 9 / 9)
(d / date-entity, year, 22 / 2004)
(h / have-org-role-91, ARG0, c / counterpart)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, p2 / premier)
(h / have-org-role-91, ARG6, c2 / country)
(n / name, op, "Nikolai")
(n / name, op, "Tanayev")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Jiabao")
(n3 / name, op, "Wen")
(n4 / name, op, "China")
(p / person, name, n3 / name)
(s / sign-02, ARG0, a / and)
(s / sign-02, ARG1, c4 / communique)
(s / sign-02, time, d / date-entity)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, c4 / communique)

Decoded in 1,723,778 microseconds
Sentence: The communique said China and Kyrgyzstan will strengthen coordination and cooperation among the relevant authorities in accordance with the Shanghai Convention on Combating Terrorism, separatism and extremism and the China-Kyrgyzstan Agreement on cooperation in combating terrorism, separatism and extremism.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Convention"))
NER Entity: (organization :name (name :op "Combating" :op "Terrorism"))
NER Entity: (organization :name (name :op "China" :op "-" :op "Kyrgyzstan" :op "Agreement"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 33-34:  Agreement => agreement
Span 41-42:  and => and
Span 28-29:  and => and
Span 26-27:  and => and
Span 9-10:  and => and
Span 4-5:  and => and
Span 14-15:  authorities => authority
Span 3-4:  China => (country :name (name :op "China"))
Span 30-32:  China - => (organization :name (name :op "China" :op "-" :op "Kyrgyzstan" :op "Agreement"))
Span 37-38:  combating => combat-01
Span 22-24:  Combating Terrorism => (organization :name (name :op "Combating" :op "Terrorism"))
Span 1-2:  communique => communique
Span 35-36:  cooperation => cooperate-01
Span 10-11:  cooperation => cooperate-01
Span 8-9:  coordination => coordinate-01
Span 42-43:  extremism => extremism
Span 27-28:  extremism => extremism
Span 32-33:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 13-14:  relevant => relevance
Span 2-3:  said => say-01
Span 40-41:  separatism => separatism
Span 25-26:  separatism => separatism
Span 19-21:  Shanghai Convention => (organization :name (name :op "Shanghai" :op "Convention"))
Span 7-8:  strengthen => strengthen-01
Span 38-39:  terrorism => terrorism

Langrangian relaxation converged after 75 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(42,43,List(0),extremism,extremism,false), Span(41,42,List(1),and,and,false), Span(40,41,List(2),separatism,separatism,false), Span(38,39,List(3),terrorism,terrorism,false), Span(37,38,List(4),combating,combat-01,false), Span(35,36,List(5),cooperation,cooperate-01,false), Span(33,34,List(6),Agreement,agreement,false), Span(32,33,List(9, 8, 7),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(30,32,List(15, 14, 13, 12, 11, 10),China -,(organization :name (name :op "China" :op "-" :op "Kyrgyzstan" :op "Agreement")),false), Span(28,29,List(16),and,and,false), Span(27,28,List(17),extremism,extremism,false), Span(26,27,List(18),and,and,false), Span(25,26,List(19),separatism,separatism,false), Span(22,24,List(23, 22, 21, 20),Combating Terrorism,(organization :name (name :op "Combating" :op "Terrorism")),false), Span(19,21,List(27, 26, 25, 24),Shanghai Convention,(organization :name (name :op "Shanghai" :op "Convention")),false), Span(14,15,List(28),authorities,authority,false), Span(13,14,List(29),relevant,relevance,false), Span(10,11,List(30),cooperation,cooperate-01,false), Span(9,10,List(31),and,and,false), Span(8,9,List(32),coordination,coordinate-01,false), Span(7,8,List(33),strengthen,strengthen-01,false), Span(5,6,List(36, 35, 34),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(4,5,List(37),and,and,false), Span(3,4,List(40, 39, 38),China,(country :name (name :op "China")),false), Span(2,3,List(41),said,say-01,false), Span(1,2,List(42),communique,communique,false)),Map(39 -> name, 30 -> cooperate-01, 2 -> separatism, 5 -> cooperate-01, 33 -> strengthen-01, 27 -> "Convention", 12 -> "China", 8 -> name, 15 -> "Agreement", 42 -> communique, 36 -> "Kyrgyzstan", 21 -> name, 18 -> and, 24 -> organization, 41 -> say-01, 35 -> name, 7 -> country, 1 -> and, 17 -> extremism, 23 -> "Terrorism", 38 -> country, 26 -> "Shanghai", 4 -> combat-01, 11 -> name, 32 -> coordinate-01, 14 -> "Kyrgyzstan", 29 -> relevance, 20 -> organization, 34 -> country, 28 -> authority, 6 -> agreement, 40 -> "China", 9 -> "Kyrgyzstan", 0 -> extremism, 22 -> "Combating", 16 -> and, 37 -> and, 19 -> separatism, 10 -> organization, 3 -> terrorism, 31 -> and, 25 -> name, 13 -> "-"),Map(a7 -> and, e -> extremism, n -> name, c8 -> communique, s2 -> separatism, t -> terrorism, o3 -> organization, c7 -> country, e2 -> extremism, a3 -> and, n4 -> name, c4 -> cooperate-01, s -> separatism, s4 -> say-01, a6 -> and, c3 -> country, a -> and, n3 -> name, n6 -> name, o2 -> organization, a5 -> authority, c6 -> country, a2 -> agreement, r -> relevance, c -> combat-01, s3 -> strengthen-01, o -> organization, n2 -> name, c2 -> cooperate-01, a4 -> and, n5 -> name, c5 -> coordinate-01))),[Ljava.lang.String;@575b5f7d,Annotation([Ljava.lang.String;@59bbb974,[Ljava.lang.String;@7165d530,[Ljava.lang.String;@12f49ca8),Annotation([Ljava.lang.String;@1fd9893c,[Ljava.lang.String;@1b2df3aa,[Ledu.cmu.lti.nlp.amr.Dependency;@44be69aa),Annotation([Ljava.lang.String;@7219ac49,[Ljava.lang.String;@21da4b5f,[Ljava.lang.String;@551e4c6d),Annotation([Ljava.lang.String;@625a9c5d,[Ljava.lang.String;@5d1e0fbb,[Ledu.cmu.lti.nlp.amr.Entity;@2eed37f4))
AMR:
(a / and, op, c6 / country)
(a / and, op, c7 / country)
(a2 / agreement, mod, c3 / country)
(a2 / agreement, mod, o / organization)
(a3 / and, op, a2 / agreement)
(a3 / and, op, c5 / coordinate-01)
(a3 / and, op, e2 / extremism)
(a4 / and, op, c7 / country)
(a4 / and, op, s2 / separatism)
(a5 / authority, mod, r / relevance)
(a6 / and, op, e / extremism)
(a6 / and, op, s / separatism)
(a6 / and, op, t / terrorism)
(a7 / and, op, c4 / cooperate-01)
(c / combat-01, ARG1, a6 / and)
(c2 / cooperate-01, ARG0, a5 / authority)
(c2 / cooperate-01, ARG1, o2 / organization)
(c3 / country, name, n / name)
(c4 / cooperate-01, ARG0, a / and)
(c4 / cooperate-01, ARG1, o3 / organization)
(c4 / cooperate-01, ARG2, c / combat-01)
(c5 / coordinate-01, ARG1, a5 / authority)
(c6 / country, name, n5 / name)
(c7 / country, name, n6 / name)
(n / name, op, "Kyrgyzstan")
(n2 / name, op, "-")
(n2 / name, op, "Agreement")
(n2 / name, op, "China")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "Combating")
(n3 / name, op, "Terrorism")
(n4 / name, op, "Convention")
(n4 / name, op, "Shanghai")
(n5 / name, op, "Kyrgyzstan")
(n6 / name, op, "China")
(o / organization, name, n2 / name)
(o2 / organization, name, n3 / name)
(o3 / organization, name, n4 / name)
(s3 / strengthen-01, ARG0, a / and)
(s3 / strengthen-01, ARG1, a3 / and)
(s4 / say-01, ARG0, c8 / communique)
(s4 / say-01, ARG1, s3 / strengthen-01)

Decoded in 5,238,546 microseconds
Sentence: The communique added that China and Kyrgyzstan will continue to adopt strong measures within the framework of the Shanghai Cooperation Organization (SCO) in jointly fighting all forms of terrorism in order to maintain peace and tranquillity in China and Kyrgyzstan and in the region as a whole.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 2-3:  added => add-01
Span 10-11:  adopt => adopt-01
Span 27-28:  all => all
Span 42-43:  and => and
Span 40-41:  and => and
Span 36-37:  and => and
Span 5-6:  and => and
Span 39-40:  China => (country :name (name :op "China"))
Span 4-5:  China => (country :name (name :op "China"))
Span 1-2:  communique => communique
Span 8-9:  continue => continue-01
Span 26-27:  fighting => fight-01
Span 28-29:  forms => form
Span 15-16:  framework => framework
Span 25-26:  jointly => joint
Span 41-42:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 6-7:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 34-35:  maintain => maintain-01
Span 12-13:  measures => measure
Span 35-36:  peace => peace
Span 45-46:  region => region
Span 22-23:  SCO => (organization :name (name :op "SCO"))
Span 18-21:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 11-12:  strong => strong
Span 30-31:  terrorism => terrorism
Span 37-38:  tranquillity => tranquillity
Span 48-49:  whole => whole
Span 13-14:  within => within

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),whole,whole,false), Span(45,46,List(1),region,region,false), Span(42,43,List(2),and,and,false), Span(41,42,List(5, 4, 3),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(40,41,List(6),and,and,false), Span(39,40,List(9, 8, 7),China,(country :name (name :op "China")),false), Span(37,38,List(10),tranquillity,tranquillity,false), Span(36,37,List(11),and,and,false), Span(35,36,List(12),peace,peace,false), Span(34,35,List(13),maintain,maintain-01,false), Span(30,31,List(14),terrorism,terrorism,false), Span(28,29,List(15),forms,form,false), Span(27,28,List(16),all,all,false), Span(26,27,List(17),fighting,fight-01,false), Span(25,26,List(18),jointly,joint,false), Span(22,23,List(21, 20, 19),SCO,(organization :name (name :op "SCO")),false), Span(18,21,List(26, 25, 24, 23, 22),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(15,16,List(27),framework,framework,false), Span(13,14,List(28),within,within,false), Span(12,13,List(29),measures,measure,false), Span(11,12,List(30),strong,strong,false), Span(10,11,List(31),adopt,adopt-01,false), Span(8,9,List(32),continue,continue-01,false), Span(6,7,List(35, 34, 33),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(5,6,List(36),and,and,false), Span(4,5,List(39, 38, 37),China,(country :name (name :op "China")),false), Span(2,3,List(40),added,add-01,false), Span(1,2,List(41),communique,communique,false)),Map(39 -> "China", 30 -> strong, 2 -> and, 5 -> "Kyrgyzstan", 33 -> country, 27 -> framework, 12 -> peace, 8 -> name, 15 -> form, 36 -> and, 21 -> "SCO", 18 -> joint, 24 -> "Shanghai", 41 -> communique, 35 -> "Kyrgyzstan", 7 -> country, 1 -> region, 17 -> fight-01, 23 -> name, 38 -> name, 26 -> "Organization", 4 -> name, 11 -> and, 32 -> continue-01, 14 -> terrorism, 29 -> measure, 20 -> name, 34 -> name, 28 -> within, 6 -> and, 40 -> add-01, 9 -> "China", 0 -> whole, 22 -> organization, 16 -> all, 37 -> country, 19 -> organization, 10 -> tranquillity, 3 -> country, 31 -> adopt-01, 25 -> "Cooperation", 13 -> maintain-01),Map(a7 -> add-01, n -> name, w -> whole, t -> tranquillity, m2 -> measure, c4 -> country, a3 -> and, j -> joint, n4 -> name, s -> strong, a6 -> and, m -> maintain-01, p -> peace, c3 -> continue-01, a -> and, n3 -> name, n6 -> name, a5 -> adopt-01, o2 -> organization, c6 -> communique, f3 -> framework, t2 -> terrorism, w2 -> within, a2 -> and, r -> region, c -> country, f2 -> fight-01, f -> form, o -> organization, n2 -> name, c2 -> country, a4 -> all, c5 -> country, n5 -> name))),[Ljava.lang.String;@9b76b60,Annotation([Ljava.lang.String;@3fb9a67f,[Ljava.lang.String;@127705e4,[Ljava.lang.String;@5562c2c9),Annotation([Ljava.lang.String;@673c4f6e,[Ljava.lang.String;@15c487a8,[Ledu.cmu.lti.nlp.amr.Dependency;@3f36e8d1),Annotation([Ljava.lang.String;@7c011174,[Ljava.lang.String;@794366a5,[Ljava.lang.String;@480b57e2),Annotation([Ljava.lang.String;@40f35e52,[Ljava.lang.String;@340d6d89,[Ledu.cmu.lti.nlp.amr.Entity;@561953e3))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(a2 / and, op, c4 / country)
(a2 / and, op, c5 / country)
(a3 / and, op, p / peace)
(a3 / and, op, t / tranquillity)
(a5 / adopt-01, ARG0, a / and)
(a5 / adopt-01, ARG1, m2 / measure)
(a5 / adopt-01, ARG2, f2 / fight-01)
(a5 / adopt-01, time, w2 / within)
(a6 / and, op, r / region)
(a7 / add-01, ARG0, c6 / communique)
(a7 / add-01, ARG1, c3 / continue-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / continue-01, ARG0, a2 / and)
(c3 / continue-01, ARG1, a5 / adopt-01)
(c4 / country, name, n5 / name)
(c5 / country, name, n6 / name)
(f / form, mod, a4 / all)
(f / form, mod, t2 / terrorism)
(f / form, purpose, m / maintain-01)
(f2 / fight-01, ARG1, f / form)
(f2 / fight-01, manner, j / joint)
(f3 / framework, poss, o2 / organization)
(m / maintain-01, ARG0, o / organization)
(m / maintain-01, ARG1, a3 / and)
(m / maintain-01, ARG2, a6 / and)
(m2 / measure, mod, s / strong)
(n / name, op, "Kyrgyzstan")
(n2 / name, op, "China")
(n3 / name, op, "SCO")
(n4 / name, op, "Cooperation")
(n4 / name, op, "Organization")
(n4 / name, op, "Shanghai")
(n5 / name, op, "Kyrgyzstan")
(n6 / name, op, "China")
(o / organization, name, n3 / name)
(o2 / organization, name, n4 / name)
(r / region, mod, w / whole)
(w2 / within, op, f3 / framework)

Decoded in 3,013,293 microseconds
Sentence: China and Kyrgyzstan agree that the crackdown on the terrorist force of Eastern Turkistan is a major part of the international anti-terrorism campaign.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Eastern" :op "Turkistan"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 3-4:  agree => agree-01
Span 1-2:  and => and
Span 24-25:  campaign => campaign-01
Span 0-1:  China => (country :name (name :op "China"))
Span 6-7:  crackdown => crack-06
Span 12-14:  Eastern Turkistan => (name :op "Turkistan" :op "Eastern")
Span 10-11:  force => force
Span 20-21:  international => international
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 16-17:  major => major
Span 23-24:  terrorism => terrorism
Span 9-10:  terrorist => terrorist

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),campaign,campaign-01,false), Span(23,24,List(1),terrorism,terrorism,false), Span(20,21,List(2),international,international,false), Span(16,17,List(3),major,major,false), Span(12,14,List(6, 5, 4),Eastern Turkistan,(name :op "Turkistan" :op "Eastern"),false), Span(10,11,List(7),force,force,false), Span(9,10,List(8),terrorist,terrorist,false), Span(6,7,List(9),crackdown,crack-06,false), Span(3,4,List(10),agree,agree-01,false), Span(2,3,List(13, 12, 11),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(1,2,List(14),and,and,false), Span(0,1,List(17, 16, 15),China,(country :name (name :op "China")),false)),Map(2 -> international, 5 -> "Turkistan", 12 -> name, 15 -> country, 8 -> terrorist, 7 -> force, 17 -> "China", 1 -> terrorism, 4 -> name, 11 -> country, 14 -> and, 6 -> "Eastern", 0 -> campaign-01, 9 -> crack-06, 16 -> name, 3 -> major, 10 -> agree-01, 13 -> "Kyrgyzstan"),Map(n -> name, t -> terrorism, c4 -> country, m -> major, n3 -> name, a -> agree-01, c3 -> country, t2 -> terrorist, i -> international, a2 -> and, c -> campaign-01, f -> force, c2 -> crack-06, n2 -> name))),[Ljava.lang.String;@443faa85,Annotation([Ljava.lang.String;@1ee47d9e,[Ljava.lang.String;@41da3aee,[Ljava.lang.String;@5dc0ff7d),Annotation([Ljava.lang.String;@64920dc2,[Ljava.lang.String;@59a79443,[Ledu.cmu.lti.nlp.amr.Dependency;@493ac8d3),Annotation([Ljava.lang.String;@13dbed9e,[Ljava.lang.String;@67531e3a,[Ljava.lang.String;@2b38b1f),Annotation([Ljava.lang.String;@1d50a7ca,[Ljava.lang.String;@51ab1ee3,[Ledu.cmu.lti.nlp.amr.Entity;@2e766822))
AMR:
(a / agree-01, ARG1, a2 / and)
(a2 / and, op, c / campaign-01)
(a2 / and, op, c3 / country)
(a2 / and, op, c4 / country)
(c / campaign-01, ARG0, n / name)
(c / campaign-01, ARG1, t / terrorism)
(c / campaign-01, mod, i / international)
(c2 / crack-06, ARG1, f / force)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(f / force, mod, n / name)
(f / force, mod, t2 / terrorist)
(m / major, op, t2 / terrorist)
(n / name, op, "Eastern")
(n / name, op, "Turkistan")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "China")

Decoded in 517,797 microseconds
Sentence: The so-called Eastern Turkistan terrorist group comprises a number of secession-minded terrorist cells.

NER Entity: (organization :name (name :op "Eastern" :op "Turkistan"))
Spans:
Span 2-4:  - called => (organization :name (name :op "Eastern" :op "Turkistan"))
Span 16-17:  cells => cell
Span 8-9:  comprises => comprise-01
Span 4-6:  Eastern Turkistan => (name :op "Turkistan" :op "Eastern")
Span 7-8:  group => group
Span 14-15:  minded => mind-02
Span 10-11:  number => number
Span 12-13:  secession => secede-01
Span 1-2:  so => so
Span 15-16:  terrorist => terrorist
Span 6-7:  terrorist => terrorist

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),cells,cell,false), Span(15,16,List(1),terrorist,terrorist,false), Span(14,15,List(2),minded,mind-02,false), Span(12,13,List(3),secession,secede-01,false), Span(10,11,List(4),number,number,false), Span(8,9,List(5),comprises,comprise-01,false), Span(7,8,List(6),group,group,false), Span(6,7,List(7),terrorist,terrorist,false), Span(4,6,List(10, 9, 8),Eastern Turkistan,(name :op "Turkistan" :op "Eastern"),false), Span(2,4,List(14, 13, 12, 11),- called,(organization :name (name :op "Eastern" :op "Turkistan")),false), Span(1,2,List(15),so,so,false)),Map(2 -> mind-02, 5 -> comprise-01, 12 -> name, 15 -> so, 8 -> name, 7 -> terrorist, 1 -> terrorist, 4 -> number, 11 -> organization, 14 -> "Turkistan", 6 -> group, 0 -> cell, 9 -> "Turkistan", 3 -> secede-01, 10 -> "Eastern", 13 -> "Eastern"),Map(n -> number, s2 -> so, t -> terrorist, s -> secede-01, m -> mind-02, g -> group, n3 -> name, t2 -> terrorist, c -> cell, o -> organization, n2 -> name, c2 -> comprise-01))),[Ljava.lang.String;@3003e580,Annotation([Ljava.lang.String;@28757abd,[Ljava.lang.String;@21a02556,[Ljava.lang.String;@3c8a7e38),Annotation([Ljava.lang.String;@138aa3cc,[Ljava.lang.String;@10a98392,[Ledu.cmu.lti.nlp.amr.Dependency;@30839e44),Annotation([Ljava.lang.String;@5f174dd2,[Ljava.lang.String;@1945113f,[Ljava.lang.String;@45aca496),Annotation([Ljava.lang.String;@697173d9,[Ljava.lang.String;@ceddaf8,[Ledu.cmu.lti.nlp.amr.Entity;@3d90eeb3))
AMR:
(c / cell, mod, t2 / terrorist)
(c / cell, quant, n / number)
(c2 / comprise-01, ARG1, g / group)
(c2 / comprise-01, ARG2, c / cell)
(g / group, mod, t / terrorist)
(g / group, name, n2 / name)
(m / mind-02, ARG0, c / cell)
(m / mind-02, ARG1, s / secede-01)
(n2 / name, op, "Eastern")
(n2 / name, op, "Turkistan")
(n3 / name, op, "Eastern")
(n3 / name, op, "Turkistan")
(o / organization, mod, s2 / so)
(o / organization, name, n3 / name)
(s / secede-01, ARG1, o / organization)

Decoded in 324,906 microseconds
Sentence: The communique said that China and Kyrgyzstan agree to promote consultations and cooperation on issues of common concern within the framework of the United Nations and other international organizations.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 7-8:  agree => agree-01
Span 25-26:  and => and
Span 11-12:  and => and
Span 5-6:  and => and
Span 4-5:  China => (country :name (name :op "China"))
Span 16-17:  common => common
Span 1-2:  communique => communique
Span 17-18:  concern => concern-01
Span 10-11:  consultations => consult-01
Span 12-13:  cooperation => cooperate-01
Span 20-21:  framework => framework
Span 27-28:  international => international
Span 14-15:  issues => issue
Span 6-7:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 28-29:  organizations => organization
Span 26-27:  other => other
Span 9-10:  promote => promote-02
Span 2-3:  said => say-01
Span 23-25:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 18-19:  within => within

Langrangian relaxation converged after 54 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(28,29,List(0),organizations,organization,false), Span(27,28,List(1),international,international,false), Span(26,27,List(2),other,other,false), Span(25,26,List(3),and,and,false), Span(23,25,List(7, 6, 5, 4),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(20,21,List(8),framework,framework,false), Span(18,19,List(9),within,within,false), Span(17,18,List(10),concern,concern-01,false), Span(16,17,List(11),common,common,false), Span(14,15,List(12),issues,issue,false), Span(12,13,List(13),cooperation,cooperate-01,false), Span(11,12,List(14),and,and,false), Span(10,11,List(15),consultations,consult-01,false), Span(9,10,List(16),promote,promote-02,false), Span(7,8,List(17),agree,agree-01,false), Span(6,7,List(20, 19, 18),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(5,6,List(21),and,and,false), Span(4,5,List(24, 23, 22),China,(country :name (name :op "China")),false), Span(2,3,List(25),said,say-01,false), Span(1,2,List(26),communique,communique,false)),Map(2 -> other, 5 -> name, 12 -> issue, 8 -> framework, 15 -> consult-01, 21 -> and, 18 -> country, 24 -> "China", 7 -> "Nations", 1 -> international, 17 -> agree-01, 23 -> name, 26 -> communique, 4 -> organization, 11 -> common, 14 -> and, 20 -> "Kyrgyzstan", 6 -> "United", 9 -> within, 0 -> organization, 22 -> country, 16 -> promote-02, 19 -> name, 10 -> concern-01, 3 -> and, 25 -> say-01, 13 -> cooperate-01),Map(n -> name, w -> within, o3 -> organization, c7 -> communique, a3 -> agree-01, c4 -> consult-01, s -> say-01, p -> promote-02, n3 -> name, a -> and, c3 -> cooperate-01, o2 -> other, c6 -> country, i2 -> issue, i -> international, a2 -> and, c -> concern-01, f -> framework, o -> organization, n2 -> name, c2 -> common, a4 -> and, c5 -> country))),[Ljava.lang.String;@1db87583,Annotation([Ljava.lang.String;@7fb53256,[Ljava.lang.String;@1d6d1d42,[Ljava.lang.String;@27329d2a),Annotation([Ljava.lang.String;@7978e022,[Ljava.lang.String;@2f894ad9,[Ledu.cmu.lti.nlp.amr.Dependency;@5afbd567),Annotation([Ljava.lang.String;@6993c8df,[Ljava.lang.String;@57545c3f,[Ljava.lang.String;@326e0b8e),Annotation([Ljava.lang.String;@36baa049,[Ljava.lang.String;@41184371,[Ledu.cmu.lti.nlp.amr.Entity;@34585ac9))
AMR:
(a / and, op, c5 / country)
(a / and, op, c6 / country)
(a2 / and, op, c4 / consult-01)
(a3 / agree-01, ARG0, a / and)
(a3 / agree-01, ARG1, p / promote-02)
(a4 / and, op, o / organization)
(a4 / and, op, o3 / organization)
(c / concern-01, ARG2, i2 / issue)
(c / concern-01, mod, c2 / common)
(c3 / cooperate-01, ARG2, i2 / issue)
(c4 / consult-01, ARG2, i2 / issue)
(c5 / country, name, n2 / name)
(c6 / country, name, n3 / name)
(f / framework, poss, a4 / and)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "China")
(o / organization, mod, i / international)
(o / organization, mod, o2 / other)
(o3 / organization, name, n / name)
(p / promote-02, ARG1, a2 / and)
(p / promote-02, prep-within, f / framework)
(s / say-01, ARG0, c7 / communique)
(s / say-01, ARG1, a3 / agree-01)
(w / within, op, f / framework)

Decoded in 2,052,610 microseconds
Sentence: China and Kyrgyzstan said in the communique that peace, stability and a just and rational world political and economic order should be established on the basis of the UN Charter and norms and principles of international law.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "UN" :op "Charter"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 33-34:  and => and
Span 31-32:  and => and
Span 18-19:  and => and
Span 14-15:  and => and
Span 11-12:  and => and
Span 1-2:  and => and
Span 0-1:  China => (country :name (name :op "China"))
Span 6-7:  communique => communique
Span 19-20:  economic => economy
Span 23-24:  established => establish-01
Span 36-37:  international => international
Span 13-14:  just => just
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 37-38:  law => law
Span 32-33:  norms => norm
Span 8-9:  peace => peace
Span 17-18:  political => politics
Span 34-35:  principles => principle
Span 15-16:  rational => rational
Span 3-4:  said => say-01
Span 21-22:  should => recommend-01
Span 10-11:  stability => stability
Span 29-31:  UN Charter => (organization :name (name :op "UN" :op "Charter"))
Span 16-17:  world => world

Langrangian relaxation converged after 62 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(37,38,List(0),law,law,false), Span(36,37,List(1),international,international,false), Span(34,35,List(2),principles,principle,false), Span(33,34,List(3),and,and,false), Span(32,33,List(4),norms,norm,false), Span(31,32,List(5),and,and,false), Span(29,31,List(9, 8, 7, 6),UN Charter,(organization :name (name :op "UN" :op "Charter")),false), Span(23,24,List(10),established,establish-01,false), Span(21,22,List(11),should,recommend-01,false), Span(19,20,List(12),economic,economy,false), Span(18,19,List(13),and,and,false), Span(17,18,List(14),political,politics,false), Span(16,17,List(15),world,world,false), Span(15,16,List(16),rational,rational,false), Span(14,15,List(17),and,and,false), Span(13,14,List(18),just,just,false), Span(11,12,List(19),and,and,false), Span(10,11,List(20),stability,stability,false), Span(8,9,List(21),peace,peace,false), Span(6,7,List(22),communique,communique,false), Span(3,4,List(23),said,say-01,false), Span(2,3,List(26, 25, 24),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(1,2,List(27),and,and,false), Span(0,1,List(30, 29, 28),China,(country :name (name :op "China")),false)),Map(30 -> "China", 2 -> principle, 5 -> and, 27 -> and, 12 -> economy, 8 -> "UN", 15 -> world, 21 -> peace, 18 -> just, 24 -> country, 7 -> name, 1 -> international, 17 -> and, 23 -> say-01, 26 -> "Kyrgyzstan", 4 -> norm, 11 -> recommend-01, 14 -> politics, 29 -> name, 20 -> stability, 28 -> country, 6 -> organization, 9 -> "Charter", 0 -> law, 22 -> communique, 16 -> rational, 19 -> and, 10 -> establish-01, 3 -> and, 25 -> name, 13 -> and),Map(e -> establish-01, n -> norm, w -> world, s2 -> say-01, p2 -> politics, e2 -> economy, n4 -> name, a3 -> and, j -> just, s -> stability, a6 -> and, r2 -> rational, p -> principle, c3 -> country, a -> and, n3 -> name, a5 -> and, r -> recommend-01, a2 -> and, i -> international, c -> communique, l -> law, o -> organization, p3 -> peace, n2 -> name, c2 -> country, a4 -> and))),[Ljava.lang.String;@76a805b7,Annotation([Ljava.lang.String;@15f35bc3,[Ljava.lang.String;@167381c7,[Ljava.lang.String;@608b1fd2),Annotation([Ljava.lang.String;@56382bc9,[Ljava.lang.String;@591a4f8e,[Ledu.cmu.lti.nlp.amr.Dependency;@53ed80d3),Annotation([Ljava.lang.String;@6ba060f3,[Ljava.lang.String;@7c51782d,[Ljava.lang.String;@77bc2e16),Annotation([Ljava.lang.String;@48e8c32a,[Ljava.lang.String;@20a7953c,[Ledu.cmu.lti.nlp.amr.Entity;@57c00115))
AMR:
(a / and, op, p / principle)
(a / and, op, p3 / peace)
(a2 / and, op, p / principle)
(a3 / and, op, c2 / country)
(a3 / and, op, c3 / country)
(a4 / and, mod, w / world)
(a5 / and, op, a4 / and)
(a5 / and, op, s / stability)
(a6 / and, op, o / organization)
(a6 / and, op, p / principle)
(c2 / country, name, n3 / name)
(c3 / country, name, n4 / name)
(e / establish-01, ARG0, a2 / and)
(e / establish-01, ARG1, a5 / and)
(e2 / economy, mod, c3 / country)
(l / law, mod, i / international)
(n / norm, poss, l / law)
(n2 / name, op, "Charter")
(n2 / name, op, "UN")
(n3 / name, op, "Kyrgyzstan")
(n4 / name, op, "China")
(o / organization, name, n2 / name)
(p / principle, poss, l / law)
(r / recommend-01, ARG1, e / establish-01)
(s2 / say-01, ARG0, a3 / and)
(s2 / say-01, ARG1, r / recommend-01)
(s2 / say-01, instrument, c / communique)
(w / world, calendar, p2 / politics)
(w / world, mod, j / just)
(w / world, mod, r2 / rational)

Decoded in 3,109,153 microseconds
Sentence: China and Kyrgyzstan also agree that international disputes should be solved by peaceful means and the United Nations should play a leading role in safeguarding peace and security in the world and efforts should be made to diversify modes of development.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 4-5:  agree => agree-01
Span 3-4:  also => also
Span 31-32:  and => and
Span 26-27:  and => and
Span 14-15:  and => and
Span 1-2:  and => and
Span 0-1:  China => (country :name (name :op "China"))
Span 40-41:  development => develop-02
Span 7-8:  disputes => dispute-01
Span 37-38:  diversify => diversify-01
Span 32-33:  efforts => effort
Span 6-7:  international => international
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 21-22:  leading => lead-02
Span 13-14:  means => mean-01
Span 38-39:  modes => mode
Span 25-26:  peace => peace
Span 12-13:  peaceful => peaceful
Span 19-20:  play => play-08
Span 22-23:  role => role
Span 24-25:  safeguarding => safeguard-01
Span 27-28:  security => security
Span 33-34:  should => recommend-01
Span 18-19:  should => recommend-01
Span 8-9:  should => recommend-01
Span 10-11:  solved => solve-01
Span 16-18:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 30-31:  world => world

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),development,develop-02,false), Span(38,39,List(1),modes,mode,false), Span(37,38,List(2),diversify,diversify-01,false), Span(33,34,List(3),should,recommend-01,false), Span(32,33,List(4),efforts,effort,false), Span(31,32,List(5),and,and,false), Span(30,31,List(6),world,world,false), Span(27,28,List(7),security,security,false), Span(26,27,List(8),and,and,false), Span(25,26,List(9),peace,peace,false), Span(24,25,List(10),safeguarding,safeguard-01,false), Span(22,23,List(11),role,role,false), Span(21,22,List(12),leading,lead-02,false), Span(19,20,List(13),play,play-08,false), Span(18,19,List(14),should,recommend-01,false), Span(16,18,List(18, 17, 16, 15),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(14,15,List(19),and,and,false), Span(13,14,List(20),means,mean-01,false), Span(12,13,List(21),peaceful,peaceful,false), Span(10,11,List(22),solved,solve-01,false), Span(8,9,List(23),should,recommend-01,false), Span(7,8,List(24),disputes,dispute-01,false), Span(6,7,List(25),international,international,false), Span(4,5,List(26),agree,agree-01,false), Span(3,4,List(27),also,also,false), Span(2,3,List(30, 29, 28),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(1,2,List(31),and,and,false), Span(0,1,List(34, 33, 32),China,(country :name (name :op "China")),false)),Map(30 -> "Kyrgyzstan", 2 -> diversify-01, 5 -> and, 33 -> name, 27 -> also, 12 -> lead-02, 8 -> and, 15 -> organization, 21 -> peaceful, 18 -> "Nations", 24 -> dispute-01, 7 -> security, 1 -> mode, 17 -> "United", 23 -> recommend-01, 26 -> agree-01, 4 -> effort, 11 -> role, 32 -> country, 14 -> recommend-01, 29 -> name, 20 -> mean-01, 34 -> "China", 28 -> country, 6 -> world, 9 -> peace, 0 -> develop-02, 22 -> solve-01, 16 -> name, 19 -> and, 10 -> safeguard-01, 3 -> recommend-01, 31 -> and, 25 -> international, 13 -> play-08),Map(e -> effort, w -> world, n -> name, r3 -> recommend-01, s2 -> safeguard-01, m2 -> mean-01, d3 -> dispute-01, p2 -> play-08, a3 -> and, s -> security, a6 -> and, m -> mode, d -> develop-02, r2 -> role, p -> peace, n3 -> name, a -> and, a5 -> also, d2 -> diversify-01, a2 -> and, r -> recommend-01, i -> international, r4 -> recommend-01, c -> country, s3 -> solve-01, l -> lead-02, o -> organization, p3 -> peaceful, c2 -> country, n2 -> name, a4 -> agree-01))),[Ljava.lang.String;@411a5965,Annotation([Ljava.lang.String;@4fe533ff,[Ljava.lang.String;@5377414a,[Ljava.lang.String;@4e83a98),Annotation([Ljava.lang.String;@17aa8a11,[Ljava.lang.String;@71b639d0,[Ledu.cmu.lti.nlp.amr.Dependency;@18a25bbd),Annotation([Ljava.lang.String;@5d5b9ecb,[Ljava.lang.String;@1ee27d73,[Ljava.lang.String;@5e5aafc6),Annotation([Ljava.lang.String;@542f6803,[Ljava.lang.String;@5583098b,[Ledu.cmu.lti.nlp.amr.Entity;@5807efad))
AMR:
(a / and, op, m2 / mean-01)
(a / and, op, r / recommend-01)
(a2 / and, op, c / country)
(a2 / and, op, c2 / country)
(a3 / and, op, p / peace)
(a3 / and, op, s / security)
(a4 / agree-01, ARG0, a2 / and)
(a4 / agree-01, ARG1, a6 / and)
(a4 / agree-01, mod, a5 / also)
(a6 / and, op, r / recommend-01)
(a6 / and, op, r3 / recommend-01)
(a6 / and, op, r4 / recommend-01)
(c / country, name, n2 / name)
(c2 / country, name, n3 / name)
(d2 / diversify-01, ARG0, m / mode)
(d2 / diversify-01, ARG1, a / and)
(d3 / dispute-01, mod, i / international)
(l / lead-02, ARG0, e / effort)
(l / lead-02, purpose, s2 / safeguard-01)
(m / mode, mod, d / develop-02)
(m2 / mean-01, ARG1, p3 / peaceful)
(n / name, op, "Nations")
(n / name, op, "United")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "China")
(o / organization, name, n / name)
(p2 / play-08, ARG0, o / organization)
(p2 / play-08, ARG1, r2 / role)
(r / recommend-01, ARG1, s3 / solve-01)
(r3 / recommend-01, ARG1, p2 / play-08)
(r4 / recommend-01, ARG1, a3 / and)
(s2 / safeguard-01, ARG1, a3 / and)
(s2 / safeguard-01, location, w / world)
(s3 / solve-01, ARG1, d3 / dispute-01)

Decoded in 3,277,488 microseconds
Sentence: China and Kyrgyzstan further agree in the communique that the Shanghai Cooperation Organization's purposes and principles conform to reality and the development trend and the SCO's activities are conducive to regional peace and stability.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 28-29:  activities => activity
Span 4-5:  agree => agree-01
Span 34-35:  and => and
Span 24-25:  and => and
Span 20-21:  and => and
Span 15-16:  and => and
Span 1-2:  and => and
Span 0-1:  China => (country :name (name :op "China"))
Span 7-8:  communique => communique
Span 30-31:  conducive => conducive
Span 17-18:  conform => conform-01
Span 22-23:  development => develop-02
Span 3-4:  further => further
Span 2-3:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 33-34:  peace => peace
Span 16-17:  principles => principle
Span 14-15:  purposes => purpose
Span 19-20:  reality => reality
Span 32-33:  regional => region
Span 26-27:  SCO => (organization :name (name :op "SCO"))
Span 10-13:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 35-36:  stability => stability
Span 23-24:  trend => trend

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),stability,stability,false), Span(34,35,List(1),and,and,false), Span(33,34,List(2),peace,peace,false), Span(32,33,List(3),regional,region,false), Span(30,31,List(4),conducive,conducive,false), Span(28,29,List(5),activities,activity,false), Span(26,27,List(8, 7, 6),SCO,(organization :name (name :op "SCO")),false), Span(24,25,List(9),and,and,false), Span(23,24,List(10),trend,trend,false), Span(22,23,List(11),development,develop-02,false), Span(20,21,List(12),and,and,false), Span(19,20,List(13),reality,reality,false), Span(17,18,List(14),conform,conform-01,false), Span(16,17,List(15),principles,principle,false), Span(15,16,List(16),and,and,false), Span(14,15,List(17),purposes,purpose,false), Span(10,13,List(22, 21, 20, 19, 18),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(7,8,List(23),communique,communique,false), Span(4,5,List(24),agree,agree-01,false), Span(3,4,List(25),further,further,false), Span(2,3,List(28, 27, 26),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(1,2,List(29),and,and,false), Span(0,1,List(32, 31, 30),China,(country :name (name :op "China")),false)),Map(30 -> country, 2 -> peace, 5 -> activity, 27 -> name, 12 -> and, 8 -> "SCO", 15 -> principle, 21 -> "Cooperation", 18 -> organization, 24 -> agree-01, 7 -> name, 1 -> and, 17 -> purpose, 23 -> communique, 26 -> country, 4 -> conducive, 11 -> develop-02, 32 -> "China", 14 -> conform-01, 29 -> and, 20 -> "Shanghai", 28 -> "Kyrgyzstan", 6 -> organization, 9 -> and, 0 -> stability, 22 -> "Organization", 16 -> and, 19 -> name, 10 -> trend, 3 -> region, 31 -> name, 25 -> further, 13 -> reality),Map(a7 -> and, n -> name, t -> trend, p2 -> principle, n4 -> name, a3 -> and, c4 -> country, s -> stability, a6 -> agree-01, d -> develop-02, r2 -> reality, p -> peace, a -> and, c3 -> communique, n3 -> name, a5 -> and, o2 -> organization, a2 -> activity, r -> region, c -> conducive, f -> further, o -> organization, p3 -> purpose, c2 -> conform-01, n2 -> name, a4 -> and, c5 -> country))),[Ljava.lang.String;@53a84ff4,Annotation([Ljava.lang.String;@7ce85af2,[Ljava.lang.String;@316acbb5,[Ljava.lang.String;@56f730b2),Annotation([Ljava.lang.String;@47311277,[Ljava.lang.String;@7930ffa9,[Ledu.cmu.lti.nlp.amr.Dependency;@1e60b459),Annotation([Ljava.lang.String;@717d7587,[Ljava.lang.String;@3e906375,[Ljava.lang.String;@40230eb9),Annotation([Ljava.lang.String;@5b7aa898,[Ljava.lang.String;@41b13f3d,[Ledu.cmu.lti.nlp.amr.Entity;@7c0777b5))
AMR:
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(a2 / activity, poss, o / organization)
(a2 / activity, poss, o2 / organization)
(a3 / and, op, p2 / principle)
(a3 / and, op, p3 / purpose)
(a4 / and, op, t / trend)
(a5 / and, op, p / peace)
(a5 / and, op, s / stability)
(a6 / agree-01, ARG0, a / and)
(a6 / agree-01, ARG1, a7 / and)
(a6 / agree-01, instrument, c3 / communique)
(a6 / agree-01, mod, f / further)
(a7 / and, op, c / conducive)
(a7 / and, op, c2 / conform-01)
(c / conducive, domain, a4 / and)
(c / conducive, purpose, a5 / and)
(c2 / conform-01, ARG1, a3 / and)
(c2 / conform-01, ARG2, r2 / reality)
(c4 / country, name, n3 / name)
(c5 / country, name, n4 / name)
(n / name, op, "SCO")
(n2 / name, op, "Cooperation")
(n2 / name, op, "Organization")
(n2 / name, op, "Shanghai")
(n3 / name, op, "Kyrgyzstan")
(n4 / name, op, "China")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(p2 / principle, poss, o2 / organization)
(s / stability, mod, r / region)
(t / trend, mod, d / develop-02)

Decoded in 1,219,723 microseconds
Sentence: The communique said China and Kyrgyzstan are willing to work together with other members of the Shanghai Cooperation Organization and take effective measures in fighting terrorism, separatism, extremism, drug trafficking, illegal immigration and cross-border crimes.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 36-37:  and => and
Span 19-20:  and => and
Span 4-5:  and => and
Span 39-40:  border => border-01
Span 3-4:  China => (country :name (name :op "China"))
Span 1-2:  communique => communique
Span 40-41:  crimes => crime
Span 37-38:  cross => cross-02
Span 31-32:  drug => drug
Span 21-22:  effective => effective
Span 29-30:  extremism => extremism
Span 24-25:  fighting => fight-01
Span 34-35:  illegal => (law :polarity -)
Span 35-36:  immigration => immigrate-01
Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 22-23:  measures => measure
Span 13-14:  members => (have-org-role-91 :ARG2 member)
Span 12-13:  other => other
Span 2-3:  said => say-01
Span 27-28:  separatism => separatism
Span 16-19:  Shanghai Cooperation Organization => (organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization"))
Span 20-21:  take => take-01
Span 25-26:  terrorism => terrorism
Span 10-11:  together => together
Span 32-33:  trafficking => traffic-00
Span 7-8:  willing => will-02
Span 9-10:  work => work-01

Langrangian relaxation converged after 49 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(40,41,List(0),crimes,crime,false), Span(39,40,List(1),border,border-01,false), Span(37,38,List(2),cross,cross-02,false), Span(36,37,List(3),and,and,false), Span(35,36,List(4),immigration,immigrate-01,false), Span(34,35,List(6, 5),illegal,(law :polarity -),false), Span(32,33,List(7),trafficking,traffic-00,false), Span(31,32,List(8),drug,drug,false), Span(29,30,List(9),extremism,extremism,false), Span(27,28,List(10),separatism,separatism,false), Span(25,26,List(11),terrorism,terrorism,false), Span(24,25,List(12),fighting,fight-01,false), Span(22,23,List(13),measures,measure,false), Span(21,22,List(14),effective,effective,false), Span(20,21,List(15),take,take-01,false), Span(19,20,List(16),and,and,false), Span(16,19,List(21, 20, 19, 18, 17),Shanghai Cooperation Organization,(organization :name (name :op "Shanghai" :op "Cooperation" :op "Organization")),false), Span(13,14,List(23, 22),members,(have-org-role-91 :ARG2 member),false), Span(12,13,List(24),other,other,false), Span(10,11,List(25),together,together,false), Span(9,10,List(26),work,work-01,false), Span(7,8,List(27),willing,will-02,false), Span(5,6,List(30, 29, 28),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(4,5,List(31),and,and,false), Span(3,4,List(34, 33, 32),China,(country :name (name :op "China")),false), Span(2,3,List(35),said,say-01,false), Span(1,2,List(36),communique,communique,false)),Map(30 -> "Kyrgyzstan", 2 -> cross-02, 5 -> law, 33 -> name, 27 -> will-02, 12 -> fight-01, 8 -> drug, 15 -> take-01, 36 -> communique, 21 -> "Organization", 18 -> name, 24 -> other, 35 -> say-01, 7 -> traffic-00, 1 -> border-01, 17 -> organization, 23 -> member, 26 -> work-01, 4 -> immigrate-01, 11 -> terrorism, 32 -> country, 14 -> effective, 29 -> name, 20 -> "Cooperation", 34 -> "China", 28 -> country, 6 -> -, 9 -> extremism, 0 -> crime, 22 -> have-org-role-91, 16 -> and, 19 -> "Shanghai", 10 -> separatism, 3 -> and, 31 -> and, 25 -> together, 13 -> measure),Map(e -> extremism, n -> name, w -> work-01, h -> have-org-role-91, t4 -> together, s2 -> say-01, t -> traffic-00, b -> border-01, m2 -> member, e2 -> effective, c4 -> country, a3 -> and, s -> separatism, m -> measure, d -> drug, t3 -> take-01, n3 -> name, a -> and, c3 -> country, o2 -> other, t2 -> terrorism, w2 -> will-02, i -> immigrate-01, a2 -> and, c -> crime, l -> law, f -> fight-01, o -> organization, n2 -> name, c2 -> cross-02, c5 -> communique))),[Ljava.lang.String;@2489e84a,Annotation([Ljava.lang.String;@2a39aa2b,[Ljava.lang.String;@62b93086,[Ljava.lang.String;@254449bb),Annotation([Ljava.lang.String;@4e642ee1,[Ljava.lang.String;@29ebbdf4,[Ledu.cmu.lti.nlp.amr.Dependency;@2fd954f),Annotation([Ljava.lang.String;@5731d3a,[Ljava.lang.String;@6a0f2853,[Ljava.lang.String;@1eff3cfb),Annotation([Ljava.lang.String;@70c69586,[Ljava.lang.String;@6dc1dc69,[Ledu.cmu.lti.nlp.amr.Entity;@7e9f2c32))
AMR:
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a2 / and, op, c / crime)
(a2 / and, op, e / extremism)
(a2 / and, op, i / immigrate-01)
(a2 / and, op, s / separatism)
(a2 / and, op, t / traffic-00)
(a2 / and, op, t2 / terrorism)
(a3 / and, op, w / work-01)
(b / border-01, ARG1, o / organization)
(c2 / cross-02, ARG0, c / crime)
(c2 / cross-02, ARG1, o2 / other)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(f / fight-01, ARG1, a2 / and)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, m2 / member)
(i / immigrate-01, ARG1, o / organization)
(i / immigrate-01, mod, l / law)
(l / law, polarity, -)
(m / measure, mod, e2 / effective)
(n / name, op, "Cooperation")
(n / name, op, "Organization")
(n / name, op, "Shanghai")
(n2 / name, op, "Kyrgyzstan")
(n3 / name, op, "China")
(o / organization, name, n / name)
(s2 / say-01, ARG0, c5 / communique)
(s2 / say-01, ARG1, w2 / will-02)
(t / traffic-00, ARG1, d / drug)
(t3 / take-01, ARG0, a / and)
(t3 / take-01, ARG1, m / measure)
(t3 / take-01, purpose, f / fight-01)
(w / work-01, ARG0, a / and)
(w / work-01, manner, t4 / together)
(w2 / will-02, ARG1, a3 / and)

Decoded in 3,257,594 microseconds
Sentence: The communique said China and Kyrgyzstan are also ready to expand cooperation in economy and other fields with other SCO members, promote the relations between the SCO and other countries and international organizations, and strengthen the SCO's role in maintaining regional and global peace and development.

NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (organization :name (name :op "SCO"))
NER Entity: (country :name (name :op "Kyrgyzstan"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 7-8:  also => also
Span 47-48:  and => and
Span 44-45:  and => and
Span 35-36:  and => and
Span 31-32:  and => and
Span 28-29:  and => and
Span 14-15:  and => and
Span 4-5:  and => and
Span 25-26:  between => between
Span 3-4:  China => (country :name (name :op "China"))
Span 1-2:  communique => communique
Span 11-12:  cooperation => cooperate-01
Span 30-31:  countries => country
Span 48-49:  development => develop-02
Span 13-14:  economy => economy
Span 10-11:  expand => expand-01
Span 16-17:  fields => field
Span 45-46:  global => globe
Span 32-33:  international => international
Span 5-6:  Kyrgyzstan => (country :name (name :op "Kyrgyzstan"))
Span 42-43:  maintaining => maintain-01
Span 20-21:  members => (have-org-role-91 :ARG2 member)
Span 33-34:  organizations => organization
Span 29-30:  other => other
Span 18-19:  other => other
Span 15-16:  other => other
Span 46-47:  peace => peace
Span 22-23:  promote => promote-02
Span 8-9:  ready => ready-01
Span 43-44:  regional => region
Span 24-25:  relations => relation
Span 40-41:  role => role
Span 2-3:  said => say-01
Span 38-39:  SCO => (organization :name (name :op "SCO"))
Span 27-28:  SCO => (organization :name (name :op "SCO"))
Span 19-20:  SCO => (organization :name (name :op "SCO"))
Span 36-37:  strengthen => strengthen-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(48,49,List(0),development,develop-02,false), Span(47,48,List(1),and,and,false), Span(46,47,List(2),peace,peace,false), Span(45,46,List(3),global,globe,false), Span(44,45,List(4),and,and,false), Span(43,44,List(5),regional,region,false), Span(42,43,List(6),maintaining,maintain-01,false), Span(40,41,List(7),role,role,false), Span(38,39,List(10, 9, 8),SCO,(organization :name (name :op "SCO")),false), Span(36,37,List(11),strengthen,strengthen-01,false), Span(35,36,List(12),and,and,false), Span(33,34,List(13),organizations,organization,false), Span(32,33,List(14),international,international,false), Span(31,32,List(15),and,and,false), Span(30,31,List(16),countries,country,false), Span(29,30,List(17),other,other,false), Span(28,29,List(18),and,and,false), Span(27,28,List(21, 20, 19),SCO,(organization :name (name :op "SCO")),false), Span(25,26,List(22),between,between,false), Span(24,25,List(23),relations,relation,false), Span(22,23,List(24),promote,promote-02,false), Span(20,21,List(26, 25),members,(have-org-role-91 :ARG2 member),false), Span(19,20,List(29, 28, 27),SCO,(organization :name (name :op "SCO")),false), Span(18,19,List(30),other,other,false), Span(16,17,List(31),fields,field,false), Span(15,16,List(32),other,other,false), Span(14,15,List(33),and,and,false), Span(13,14,List(34),economy,economy,false), Span(11,12,List(35),cooperation,cooperate-01,false), Span(10,11,List(36),expand,expand-01,false), Span(8,9,List(37),ready,ready-01,false), Span(7,8,List(38),also,also,false), Span(5,6,List(41, 40, 39),Kyrgyzstan,(country :name (name :op "Kyrgyzstan")),false), Span(4,5,List(42),and,and,false), Span(3,4,List(45, 44, 43),China,(country :name (name :op "China")),false), Span(2,3,List(46),said,say-01,false), Span(1,2,List(47),communique,communique,false)),Map(45 -> "China", 39 -> country, 30 -> other, 2 -> peace, 5 -> region, 33 -> and, 27 -> organization, 12 -> and, 8 -> organization, 15 -> and, 42 -> and, 36 -> expand-01, 21 -> "SCO", 18 -> and, 24 -> promote-02, 41 -> "Kyrgyzstan", 35 -> cooperate-01, 7 -> role, 1 -> and, 17 -> other, 44 -> name, 23 -> relation, 38 -> also, 47 -> communique, 26 -> member, 4 -> and, 11 -> strengthen-01, 32 -> other, 14 -> international, 29 -> "SCO", 20 -> name, 46 -> say-01, 34 -> economy, 28 -> name, 6 -> maintain-01, 40 -> name, 43 -> country, 9 -> name, 0 -> develop-02, 22 -> between, 16 -> country, 37 -> ready-01, 19 -> organization, 10 -> "SCO", 3 -> globe, 31 -> field, 25 -> have-org-role-91, 13 -> organization),Map(a7 -> also, e -> economy, n -> name, r3 -> relation, h -> have-org-role-91, s2 -> say-01, b -> between, m2 -> member, o3 -> other, o6 -> other, e2 -> expand-01, p2 -> promote-02, c4 -> country, n4 -> name, a3 -> and, s -> strengthen-01, a6 -> and, m -> maintain-01, d -> develop-02, o5 -> organization, r2 -> role, g -> globe, p -> peace, c3 -> country, n3 -> name, a -> and, o2 -> organization, a5 -> and, a8 -> and, r -> region, a2 -> and, i -> international, r4 -> ready-01, c -> country, f -> field, o -> organization, o4 -> organization, o7 -> other, c2 -> cooperate-01, n2 -> name, a4 -> and, c5 -> communique, n5 -> name))),[Ljava.lang.String;@19e0dffe,Annotation([Ljava.lang.String;@5d4e13e1,[Ljava.lang.String;@3e0fbeb5,[Ljava.lang.String;@3976ebfa),Annotation([Ljava.lang.String;@2676dc05,[Ljava.lang.String;@b0a1231,[Ledu.cmu.lti.nlp.amr.Dependency;@4833eff3),Annotation([Ljava.lang.String;@4694f434,[Ljava.lang.String;@56928e17,[Ljava.lang.String;@dd2856e),Annotation([Ljava.lang.String;@5a49af50,[Ljava.lang.String;@3b1dc579,[Ledu.cmu.lti.nlp.amr.Entity;@793d163b))
AMR:
(a / and, op, c3 / country)
(a / and, op, c4 / country)
(a2 / and, op, e / economy)
(a2 / and, op, f / field)
(a3 / and, op, c / country)
(a3 / and, op, o2 / organization)
(a4 / and, op, p / peace)
(a5 / and, op, d / develop-02)
(a6 / and, op, a4 / and)
(a6 / and, op, a5 / and)
(a8 / and, op, e2 / expand-01)
(a8 / and, op, p2 / promote-02)
(a8 / and, op, s / strengthen-01)
(b / between, op, a3 / and)
(b / between, op, o4 / organization)
(b / between, op, o5 / organization)
(c / country, mod, o7 / other)
(c2 / cooperate-01, ARG1, r / region)
(c2 / cooperate-01, ARG2, a2 / and)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(d / develop-02, ARG1, o6 / other)
(d / develop-02, mod, g / globe)
(e2 / expand-01, ARG1, c2 / cooperate-01)
(f / field, mod, o3 / other)
(h / have-org-role-91, ARG1, o5 / organization)
(h / have-org-role-91, ARG2, m2 / member)
(m / maintain-01, ARG1, a6 / and)
(n / name, op, "SCO")
(n2 / name, op, "SCO")
(n3 / name, op, "SCO")
(n4 / name, op, "Kyrgyzstan")
(n5 / name, op, "China")
(o / organization, name, n / name)
(o2 / organization, mod, i / international)
(o4 / organization, name, n2 / name)
(o5 / organization, name, n3 / name)
(p2 / promote-02, ARG1, r3 / relation)
(r2 / role, poss, o / organization)
(r2 / role, purpose, m / maintain-01)
(r3 / relation, mod, b / between)
(r4 / ready-01, ARG1, a8 / and)
(r4 / ready-01, ARG6, a7 / also)
(s / strengthen-01, ARG0, a / and)
(s / strengthen-01, ARG1, r2 / role)
(s2 / say-01, ARG0, c5 / communique)
(s2 / say-01, ARG1, r4 / ready-01)

Decoded in 3,954,298 microseconds
Sentence: 2004-10-09

mkDayMonthYear(2004-10-09,09,10,2004)
mkDayMonthYear(2004-10-09,09,10,2004)
Spans:
Span 0-1:  2004-10-09 => (date-entity :day 9 :month 10 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-10-09,(date-entity :day 9 :month 10 :year 2004),false)),Map(2 -> 10, 1 -> 9, 0 -> date-entity, 3 -> 2004),Map(2 -> 2004, d -> date-entity, 1 -> 10, 9 -> 9))),[Ljava.lang.String;@60dd0587,Annotation([Ljava.lang.String;@77f905e3,[Ljava.lang.String;@221a2068,[Ljava.lang.String;@338766de),Annotation([Ljava.lang.String;@3b7eac14,[Ljava.lang.String;@4976085,[Ledu.cmu.lti.nlp.amr.Dependency;@777d191f),Annotation([Ljava.lang.String;@7fc420b8,[Ljava.lang.String;@31142d58,[Ljava.lang.String;@e38f0b7),Annotation([Ljava.lang.String;@1192b58e,[Ljava.lang.String;@4f8d86e4,[Ledu.cmu.lti.nlp.amr.Entity;@5f631ca0))
AMR:
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2004)

Decoded in 7,136 microseconds
Sentence: Viet Nam (VN); Germany (DE)

NER Entity: (person :name (name :op "Viet" :op "Nam"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "DE"))
NER Entity: (country :name (name :op "Germany"))
Spans:
Span 5-6:  ; => and
Span 6-7:  Germany => (country :name (name :op "Germany"))
Span 0-2:  Viet Nam => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(2, 1, 0),Germany,(country :name (name :op "Germany")),false), Span(5,6,List(3),;,and,false), Span(0,2,List(6, 5, 4),Viet Nam,(country :name (name :op "Vietnam")),false)),Map(2 -> "Germany", 5 -> name, 1 -> name, 4 -> country, 6 -> "Vietnam", 0 -> country, 3 -> and),Map(n -> name, a -> and, c -> country, n2 -> name, c2 -> country))),[Ljava.lang.String;@1697f2b3,Annotation([Ljava.lang.String;@12ad1b2a,[Ljava.lang.String;@3134153d,[Ljava.lang.String;@767599a7),Annotation([Ljava.lang.String;@5f5effb0,[Ljava.lang.String;@25d0cb3a,[Ledu.cmu.lti.nlp.amr.Dependency;@345cbf40),Annotation([Ljava.lang.String;@6e3eb0cd,[Ljava.lang.String;@463561c5,[Ljava.lang.String;@659feb22),Annotation([Ljava.lang.String;@3468ee6e,[Ljava.lang.String;@2f4b98f6,[Ledu.cmu.lti.nlp.amr.Entity;@421def93))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / country)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(n / name, op, "Germany")
(n2 / name, op, "Vietnam")

Decoded in 18,285 microseconds
Sentence: International; Government; technology; politics; economy; money; leader

Spans:
Span 11-12:  ; => and
Span 9-10:  ; => and
Span 7-8:  ; => and
Span 5-6:  ; => and
Span 3-4:  ; => and
Span 1-2:  ; => and
Span 8-9:  economy => economy
Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Span 0-1:  International => international
Span 12-13:  leader => (person :ARG0-of lead-02)
Span 10-11:  money => money
Span 6-7:  politics => politics
Span 4-5:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(12,13,List(1, 0),leader,(person :ARG0-of lead-02),false), Span(11,12,List(2),;,and,false), Span(10,11,List(3),money,money,false), Span(9,10,List(4),;,and,false), Span(8,9,List(5),economy,economy,false), Span(7,8,List(6),;,and,false), Span(6,7,List(7),politics,politics,false), Span(5,6,List(8),;,and,false), Span(4,5,List(9),technology,technology,false), Span(3,4,List(10),;,and,false), Span(2,3,List(12, 11),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(13),;,and,false), Span(0,1,List(14),International,international,false)),Map(2 -> and, 5 -> economy, 12 -> govern-01, 8 -> and, 7 -> politics, 1 -> lead-02, 4 -> and, 11 -> government-organization, 14 -> international, 6 -> and, 0 -> person, 9 -> technology, 3 -> money, 10 -> and, 13 -> and),Map(e -> economy, t -> technology, p2 -> politics, a3 -> and, a6 -> and, m -> money, g2 -> govern-01, p -> person, g -> government-organization, a -> and, a5 -> and, i -> international, a2 -> and, l -> lead-02, a4 -> and))),[Ljava.lang.String;@58c1da09,Annotation([Ljava.lang.String;@2b2954e1,[Ljava.lang.String;@58d6e55a,[Ljava.lang.String;@751ae8a4),Annotation([Ljava.lang.String;@235d659c,[Ljava.lang.String;@4232b34a,[Ledu.cmu.lti.nlp.amr.Dependency;@2da16263),Annotation([Ljava.lang.String;@f5ce0bb,[Ljava.lang.String;@47e51549,[Ljava.lang.String;@101a461c),Annotation([Ljava.lang.String;@360e9c06,[Ljava.lang.String;@5ebffb44,[Ledu.cmu.lti.nlp.amr.Entity;@311ff287))
AMR:
(a2 / and, op, a / and)
(a2 / and, op, a3 / and)
(a4 / and, op, a3 / and)
(a4 / and, op, m / money)
(a4 / and, op, t / technology)
(a5 / and, op, p / person)
(a5 / and, op, p2 / politics)
(a5 / and, op, t / technology)
(a6 / and, op, a5 / and)
(a6 / and, op, e / economy)
(a6 / and, op, g / government-organization)
(a6 / and, op, i / international)
(g2 / govern-01, ARG0, g / government-organization)
(l / lead-02, ARG0, p / person)

Decoded in 97,176 microseconds
Sentence: German Chancellor Gerhard Schroeder attended meetings with Vietnamese government leaders after the 5th Asia-Europe Meeting summit in Hanoi.

NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Gerhard" :op "Schroeder"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting"))
NER Entity: (country :name (name :op "Hanoi"))
NER Entity: (country :name (name :op "Hanoi"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 10-11:  after => after
Span 13-17:  Asia - Europe Meeting => (organization :name (name :op "Meeting" :op "Asia-Europe"))
Span 4-5:  attended => attend-01
Span 1-2:  Chancellor => chancellor
Span 2-4:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Span 0-1:  German => (country :name (name :op "Germany"))
Span 8-9:  government => (government-organization :ARG0-of govern-01)
Span 19-20:  Hanoi => (city :name (name :op "Hanoi"))
Span 9-10:  leaders => (person :ARG0-of lead-02)
Span 5-6:  meetings => meet-03
Span 17-18:  summit => summit
Span 7-8:  Vietnamese => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(2, 1, 0),Hanoi,(city :name (name :op "Hanoi")),false), Span(17,18,List(3),summit,summit,false), Span(13,17,List(7, 6, 5, 4),Asia - Europe Meeting,(organization :name (name :op "Meeting" :op "Asia-Europe")),false), Span(10,11,List(8),after,after,false), Span(9,10,List(10, 9),leaders,(person :ARG0-of lead-02),false), Span(8,9,List(12, 11),government,(government-organization :ARG0-of govern-01),false), Span(7,8,List(15, 14, 13),Vietnamese,(country :name (name :op "Vietnam")),false), Span(5,6,List(16),meetings,meet-03,false), Span(4,5,List(17),attended,attend-01,false), Span(2,4,List(21, 20, 19, 18),Gerhard Schroeder,(person :name (name :op "Schroeder" :op "Gerhard")),false), Span(1,2,List(22),Chancellor,chancellor,false), Span(0,1,List(25, 24, 23),German,(country :name (name :op "Germany")),false)),Map(2 -> "Hanoi", 5 -> name, 12 -> govern-01, 8 -> after, 15 -> "Vietnam", 21 -> "Gerhard", 18 -> person, 24 -> name, 7 -> "Asia-Europe", 1 -> name, 17 -> attend-01, 23 -> country, 4 -> organization, 11 -> government-organization, 14 -> name, 20 -> "Schroeder", 6 -> "Meeting", 9 -> person, 0 -> city, 22 -> chancellor, 16 -> meet-03, 19 -> name, 10 -> lead-02, 3 -> summit, 25 -> "Germany", 13 -> country),Map(n -> name, p2 -> person, c4 -> country, n4 -> name, s -> summit, m -> meet-03, g2 -> govern-01, p -> person, g -> government-organization, c3 -> chancellor, a -> after, n3 -> name, a2 -> attend-01, c -> city, l -> lead-02, o -> organization, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@7377781e,Annotation([Ljava.lang.String;@31db34da,[Ljava.lang.String;@109f8c7e,[Ljava.lang.String;@5edacf20),Annotation([Ljava.lang.String;@16a5eb6d,[Ljava.lang.String;@7e307087,[Ledu.cmu.lti.nlp.amr.Dependency;@1220ef43),Annotation([Ljava.lang.String;@1a8b81e8,[Ljava.lang.String;@234cff57,[Ljava.lang.String;@5e8507f1),Annotation([Ljava.lang.String;@4bcaa195,[Ljava.lang.String;@d08edc5,[Ledu.cmu.lti.nlp.amr.Entity;@49fa1d74))
AMR:
(a / after, op, s / summit)
(a2 / attend-01, ARG0, c3 / chancellor)
(a2 / attend-01, ARG1, m / meet-03)
(a2 / attend-01, time, a / after)
(c / city, name, n / name)
(c2 / country, name, n3 / name)
(c3 / chancellor, mod, c4 / country)
(c4 / country, name, n5 / name)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c2 / country)
(l / lead-02, ARG0, p / person)
(l / lead-02, ARG1, g / government-organization)
(m / meet-03, ARG0, p2 / person)
(m / meet-03, ARG1, p / person)
(n / name, op, "Hanoi")
(n2 / name, op, "Asia-Europe")
(n2 / name, op, "Meeting")
(n3 / name, op, "Vietnam")
(n4 / name, op, "Gerhard")
(n4 / name, op, "Schroeder")
(n5 / name, op, "Germany")
(o / organization, name, n2 / name)
(p2 / person, name, n4 / name)
(s / summit, location, c / city)
(s / summit, mod, o / organization)

Decoded in 1,167,381 microseconds
Sentence: German and Vietnamese officials signed 5 documents on financial, technical and business cooperation totaling over 260 million dollars.

NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 5-6:  5 => 5
Span 11-12:  and => and
Span 1-2:  and => and
Span 12-13:  business => business
Span 13-14:  cooperation => cooperate-01
Span 6-7:  documents => document
Span 18-19:  dollars => (monetary-quantity :unit dollar)
Span 8-9:  financial => finance
Span 0-1:  German => (country :name (name :op "Germany"))
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 15-16:  over => over
Span 4-5:  signed => sign-02
Span 10-11:  technical => technique
Span 14-15:  totaling => total-01
Span 2-3:  Vietnamese => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 70 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(18,19,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(15,16,List(2),over,over,false), Span(14,15,List(3),totaling,total-01,false), Span(13,14,List(4),cooperation,cooperate-01,false), Span(12,13,List(5),business,business,false), Span(11,12,List(6),and,and,false), Span(10,11,List(7),technical,technique,false), Span(8,9,List(8),financial,finance,false), Span(6,7,List(9),documents,document,false), Span(5,6,List(10),5,5,false), Span(4,5,List(11),signed,sign-02,false), Span(3,4,List(13, 12),officials,(have-org-role-91 :ARG2 official),false), Span(2,3,List(16, 15, 14),Vietnamese,(country :name (name :op "Vietnam")),false), Span(1,2,List(17),and,and,false), Span(0,1,List(20, 19, 18),German,(country :name (name :op "Germany")),false)),Map(2 -> over, 5 -> business, 12 -> have-org-role-91, 15 -> name, 8 -> finance, 18 -> country, 7 -> technique, 17 -> and, 1 -> dollar, 4 -> cooperate-01, 11 -> sign-02, 14 -> country, 20 -> "Germany", 6 -> and, 0 -> monetary-quantity, 9 -> document, 16 -> "Vietnam", 19 -> name, 3 -> total-01, 10 -> 5, 13 -> official),Map(n -> name, h -> have-org-role-91, 5 -> 5, t -> total-01, b -> business, s -> sign-02, m -> monetary-quantity, d -> dollar, c3 -> country, a -> and, o2 -> official, d2 -> document, t2 -> technique, a2 -> and, c -> cooperate-01, f -> finance, o -> over, n2 -> name, c2 -> country))),[Ljava.lang.String;@3f362135,Annotation([Ljava.lang.String;@21eee94f,[Ljava.lang.String;@6bc24e72,[Ljava.lang.String;@724aefc3),Annotation([Ljava.lang.String;@7cfb4736,[Ljava.lang.String;@2a097d77,[Ledu.cmu.lti.nlp.amr.Dependency;@53c1179a),Annotation([Ljava.lang.String;@7650ded6,[Ljava.lang.String;@5034f5dd,[Ljava.lang.String;@31b7d869),Annotation([Ljava.lang.String;@6a916402,[Ljava.lang.String;@1a47a1e8,[Ledu.cmu.lti.nlp.amr.Entity;@6d2a2560))
AMR:
(a / and, op, c3 / country)
(a2 / and, op, b / business)
(a2 / and, op, f / finance)
(a2 / and, op, t2 / technique)
(c / cooperate-01, ARG1, h / have-org-role-91)
(c / cooperate-01, ARG2, a2 / and)
(c2 / country, name, n / name)
(c3 / country, name, n2 / name)
(d2 / document, quant, 5 / 5)
(d2 / document, topic, c / cooperate-01)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o2 / official)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(o / over, op, m / monetary-quantity)
(s / sign-02, ARG0, a / and)
(s / sign-02, ARG1, d2 / document)
(t / total-01, ARG1, d2 / document)
(t / total-01, ARG2, o / over)

Decoded in 1,812,022 microseconds
Sentence: Media reports stated on 10 October 2004 that Vietnamese and German officials have pledged to further Vietnamese and German relations in such fields as investment, trade and technology and to support each other in the United Nations (UN).

mkDayMonthYear(10	October	2004,10,October,2004)
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (organization :name (name :op "United" :op "Nations"))
NER Entity: (organization :name (name :op "UN"))
NER Entity: (organization :name (name :op "UN"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
Spans:
Span 4-7:  10 October 2004 => (date-entity :day 10 :month 10 :year 2004)
Span 29-30:  and => and
Span 27-28:  and => and
Span 17-18:  and => and
Span 9-10:  and => and
Span 32-33:  each => each
Span 22-23:  fields => field
Span 15-16:  further => further
Span 18-19:  German => (country :name (name :op "Germany"))
Span 10-11:  German => (country :name (name :op "Germany"))
Span 24-25:  investment => invest-01
Span 0-1:  Media => media
Span 11-12:  officials => (have-org-role-91 :ARG2 official)
Span 33-34:  other => other
Span 13-14:  pledged => pledge-01
Span 19-20:  relations => relation
Span 1-2:  reports => report-01
Span 2-3:  stated => state-01
Span 21-22:  such => such
Span 31-32:  support => support-01
Span 28-29:  technology => technology
Span 26-27:  trade => trade-01
Span 39-40:  UN => (organization :name (name :op "UN"))
Span 36-38:  United Nations => (organization :name (name :op "United" :op "Nations"))
Span 16-17:  Vietnamese => (country :name (name :op "Vietnam"))
Span 8-9:  Vietnamese => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(2, 1, 0),UN,(organization :name (name :op "UN")),false), Span(36,38,List(6, 5, 4, 3),United Nations,(organization :name (name :op "United" :op "Nations")),false), Span(33,34,List(7),other,other,false), Span(32,33,List(8),each,each,false), Span(31,32,List(9),support,support-01,false), Span(29,30,List(10),and,and,false), Span(28,29,List(11),technology,technology,false), Span(27,28,List(12),and,and,false), Span(26,27,List(13),trade,trade-01,false), Span(24,25,List(14),investment,invest-01,false), Span(22,23,List(15),fields,field,false), Span(21,22,List(16),such,such,false), Span(19,20,List(17),relations,relation,false), Span(18,19,List(20, 19, 18),German,(country :name (name :op "Germany")),false), Span(17,18,List(21),and,and,false), Span(16,17,List(24, 23, 22),Vietnamese,(country :name (name :op "Vietnam")),false), Span(15,16,List(25),further,further,false), Span(13,14,List(26),pledged,pledge-01,false), Span(11,12,List(28, 27),officials,(have-org-role-91 :ARG2 official),false), Span(10,11,List(31, 30, 29),German,(country :name (name :op "Germany")),false), Span(9,10,List(32),and,and,false), Span(8,9,List(35, 34, 33),Vietnamese,(country :name (name :op "Vietnam")),false), Span(4,7,List(39, 38, 37, 36),10 October 2004,(date-entity :day 10 :month 10 :year 2004),false), Span(2,3,List(40),stated,state-01,false), Span(1,2,List(41),reports,report-01,false), Span(0,1,List(42),Media,media,false)),Map(39 -> 2004, 30 -> name, 2 -> "UN", 5 -> "United", 33 -> country, 27 -> have-org-role-91, 12 -> and, 8 -> each, 15 -> field, 42 -> media, 36 -> date-entity, 21 -> and, 18 -> country, 24 -> "Vietnam", 41 -> report-01, 35 -> "Vietnam", 7 -> other, 1 -> name, 17 -> relation, 23 -> name, 38 -> 10, 26 -> pledge-01, 4 -> name, 11 -> technology, 32 -> and, 14 -> invest-01, 29 -> country, 20 -> "Germany", 34 -> name, 28 -> official, 6 -> "Nations", 40 -> state-01, 9 -> support-01, 0 -> organization, 22 -> country, 16 -> such, 37 -> 10, 19 -> name, 10 -> and, 3 -> organization, 31 -> "Germany", 25 -> further, 13 -> trade-01),Map(e -> each, n -> name, h -> have-org-role-91, 2 -> 2004, s2 -> such, 12 -> 10, t -> technology, o3 -> other, c4 -> country, a3 -> and, n4 -> name, s -> support-01, m -> media, d -> date-entity, 1 -> 10, r2 -> report-01, p -> pledge-01, a -> and, n3 -> name, c3 -> country, n6 -> name, o2 -> organization, t2 -> trade-01, i -> invest-01, a2 -> and, r -> relation, c -> country, s3 -> state-01, f2 -> further, f -> field, o -> organization, o4 -> official, n2 -> name, c2 -> country, a4 -> and, n5 -> name))),[Ljava.lang.String;@62d1dc3c,Annotation([Ljava.lang.String;@3811510,[Ljava.lang.String;@24eeac69,[Ljava.lang.String;@18539cb1),Annotation([Ljava.lang.String;@748f93bb,[Ljava.lang.String;@7f2d31af,[Ledu.cmu.lti.nlp.amr.Dependency;@2e7157c7),Annotation([Ljava.lang.String;@2a43e0ac,[Ljava.lang.String;@22d9bc14,[Ljava.lang.String;@346f41a9),Annotation([Ljava.lang.String;@1084f78c,[Ljava.lang.String;@25f723b0,[Ledu.cmu.lti.nlp.amr.Entity;@4aa11206))
AMR:
(a2 / and, op, c2 / country)
(a2 / and, op, c3 / country)
(a2 / and, op, c4 / country)
(a3 / and, op, i / invest-01)
(a3 / and, op, t / technology)
(a3 / and, op, t2 / trade-01)
(a4 / and, op, r / relation)
(a4 / and, op, s / support-01)
(c / country, name, n3 / name)
(c2 / country, name, n4 / name)
(c3 / country, name, n5 / name)
(c4 / country, name, n6 / name)
(d / date-entity, day, 1 / 10)
(d / date-entity, month, 12 / 10)
(d / date-entity, year, 2 / 2004)
(f / field, example, a3 / and)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, o4 / official)
(n / name, op, "UN")
(n2 / name, op, "Nations")
(n2 / name, op, "United")
(n3 / name, op, "Germany")
(n4 / name, op, "Vietnam")
(n5 / name, op, "Germany")
(n6 / name, op, "Vietnam")
(o / organization, name, n / name)
(o2 / organization, name, n2 / name)
(p / pledge-01, ARG0, a / and)
(p / pledge-01, ARG1, a4 / and)
(r / relation, mod, c / country)
(r / relation, mod, f / field)
(r / relation, poss, a2 / and)
(r / relation, time, f2 / further)
(r2 / report-01, ARG0, m / media)
(r2 / report-01, ARG1, s2 / such)
(s / support-01, ARG0, e / each)
(s / support-01, ARG1, o3 / other)
(s / support-01, location, o2 / organization)
(s3 / state-01, ARG0, r2 / report-01)
(s3 / state-01, ARG1, p / pledge-01)
(s3 / state-01, time, d / date-entity)
(t2 / trade-01, ARG1, o / organization)

Decoded in 2,383,134 microseconds
Sentence: German Chancellor Gerhard Schroeder attended the 5th Asia-Europe Meeting summit in Hanoi on 8 October 2004 and 9 October 2004.

NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Gerhard" :op "Schroeder"))
NER Entity: (organization :name (name :op "Asia" :op "-" :op "Europe" :op "Meeting"))
NER Entity: (country :name (name :op "Hanoi"))
mkDayMonthYear(8	October	2004,8,October,2004)
mkDayMonthYear(9	October	2004,9,October,2004)
NER Entity: (country :name (name :op "Hanoi"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 15-18:  8 October 2004 => (date-entity :day 8 :month 10 :year 2004)
Span 19-22:  9 October 2004 => (date-entity :day 9 :month 10 :year 2004)
Span 18-19:  and => and
Span 7-11:  Asia - Europe Meeting => (organization :name (name :op "Meeting" :op "Asia-Europe"))
Span 4-5:  attended => attend-01
Span 1-2:  Chancellor => chancellor
Span 2-4:  Gerhard Schroeder => (person :name (name :op "Schroeder" :op "Gerhard"))
Span 0-1:  German => (country :name (name :op "Germany"))
Span 13-14:  Hanoi => (city :name (name :op "Hanoi"))
Span 11-12:  summit => summit

Langrangian relaxation converged after 50 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,22,List(3, 2, 1, 0),9 October 2004,(date-entity :day 9 :month 10 :year 2004),false), Span(18,19,List(4),and,and,false), Span(15,18,List(8, 7, 6, 5),8 October 2004,(date-entity :day 8 :month 10 :year 2004),false), Span(13,14,List(11, 10, 9),Hanoi,(city :name (name :op "Hanoi")),false), Span(11,12,List(12),summit,summit,false), Span(7,11,List(16, 15, 14, 13),Asia - Europe Meeting,(organization :name (name :op "Meeting" :op "Asia-Europe")),false), Span(4,5,List(17),attended,attend-01,false), Span(2,4,List(21, 20, 19, 18),Gerhard Schroeder,(person :name (name :op "Schroeder" :op "Gerhard")),false), Span(1,2,List(22),Chancellor,chancellor,false), Span(0,1,List(25, 24, 23),German,(country :name (name :op "Germany")),false)),Map(2 -> 10, 5 -> date-entity, 12 -> summit, 8 -> 2004, 15 -> "Meeting", 21 -> "Gerhard", 18 -> person, 24 -> name, 7 -> 10, 1 -> 9, 17 -> attend-01, 23 -> country, 4 -> and, 11 -> "Hanoi", 14 -> name, 20 -> "Schroeder", 6 -> 8, 9 -> city, 0 -> date-entity, 22 -> chancellor, 16 -> "Asia-Europe", 19 -> name, 10 -> name, 3 -> 2004, 25 -> "Germany", 13 -> organization),Map(n -> name, 2 -> 2004, 12 -> 10, 8 -> 8, n4 -> name, s -> summit, d -> date-entity, 1 -> 10, p -> person, c3 -> country, n3 -> name, a -> and, d2 -> date-entity, a2 -> attend-01, c -> city, 9 -> 9, 22 -> 2004, o -> organization, c2 -> chancellor, n2 -> name))),[Ljava.lang.String;@40d60f2,Annotation([Ljava.lang.String;@3382cf68,[Ljava.lang.String;@2f74900b,[Ljava.lang.String;@6d8796c1),Annotation([Ljava.lang.String;@2e26173,[Ljava.lang.String;@27be17c8,[Ledu.cmu.lti.nlp.amr.Dependency;@2c413ffc),Annotation([Ljava.lang.String;@7d21852b,[Ljava.lang.String;@6cd98a05,[Ljava.lang.String;@3b8ec001),Annotation([Ljava.lang.String;@1e95b653,[Ljava.lang.String;@6f6c6077,[Ledu.cmu.lti.nlp.amr.Entity;@4fc5563d))
AMR:
(a / and, op, d / date-entity)
(a / and, op, d2 / date-entity)
(a2 / attend-01, ARG0, p / person)
(a2 / attend-01, ARG1, s / summit)
(a2 / attend-01, ARG6, c2 / chancellor)
(c / city, name, n / name)
(c2 / chancellor, mod, c3 / country)
(c3 / country, name, n4 / name)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2004)
(d2 / date-entity, day, 8 / 8)
(d2 / date-entity, month, 12 / 10)
(d2 / date-entity, year, 22 / 2004)
(n / name, op, "Hanoi")
(n2 / name, op, "Asia-Europe")
(n2 / name, op, "Meeting")
(n3 / name, op, "Gerhard")
(n3 / name, op, "Schroeder")
(n4 / name, op, "Germany")
(o / organization, name, n2 / name)
(p / person, name, n3 / name)
(s / summit, location, c / city)
(s / summit, mod, o / organization)
(s / summit, time, a / and)

Decoded in 1,585,301 microseconds
Sentence: During separate talks and meetings with Schroeder held on 9 October 2004 Vietnamese leaders stated that the Vietnamese government supports the German government's bid for a permanent seat in the UN Security Council and wants to strengthen Vietnamese relations with Germany.

NER Entity: (person :name (name :op "Schroeder"))
mkDayMonthYear(9	October	2004,9,October,2004)
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (organization :name (name :op "UN" :op "Security" :op "Council"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (person :name (name :op "Schroeder"))
Spans:
Span 9-12:  9 October 2004 => (date-entity :day 9 :month 10 :year 2004)
Span 34-35:  and => and
Span 3-4:  and => and
Span 24-25:  bid => bid-01
Span 21-22:  German => (country :name (name :op "Germany"))
Span 41-42:  Germany => (country :name (name :op "Germany"))
Span 22-23:  government => (government-organization :ARG0-of govern-01)
Span 18-19:  government => (government-organization :ARG0-of govern-01)
Span 7-8:  held => hold-04
Span 13-14:  leaders => (person :ARG0-of lead-02)
Span 4-5:  meetings => meet-03
Span 27-28:  permanent => permanent
Span 39-40:  relations => relation
Span 6-7:  Schroeder => (person :name (name :op "Schroeder"))
Span 28-29:  seat => seat-01
Span 1-2:  separate => separate
Span 14-15:  stated => state-01
Span 37-38:  strengthen => strengthen-01
Span 19-20:  supports => support-01
Span 2-3:  talks => talk-01
Span 31-34:  UN Security Council => (organization :name (name :op "Council" :op "Security" :op "UN"))
Span 38-39:  Vietnamese => (country :name (name :op "Vietnam"))
Span 17-18:  Vietnamese => (country :name (name :op "Vietnam"))
Span 12-13:  Vietnamese => (country :name (name :op "Vietnam"))
Span 35-36:  wants => want-01

Langrangian relaxation converged after 88 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(41,42,List(2, 1, 0),Germany,(country :name (name :op "Germany")),false), Span(39,40,List(3),relations,relation,false), Span(38,39,List(6, 5, 4),Vietnamese,(country :name (name :op "Vietnam")),false), Span(37,38,List(7),strengthen,strengthen-01,false), Span(35,36,List(8),wants,want-01,false), Span(34,35,List(9),and,and,false), Span(31,34,List(14, 13, 12, 11, 10),UN Security Council,(organization :name (name :op "Council" :op "Security" :op "UN")),false), Span(28,29,List(15),seat,seat-01,false), Span(27,28,List(16),permanent,permanent,false), Span(24,25,List(17),bid,bid-01,false), Span(22,23,List(19, 18),government,(government-organization :ARG0-of govern-01),false), Span(21,22,List(22, 21, 20),German,(country :name (name :op "Germany")),false), Span(19,20,List(23),supports,support-01,false), Span(18,19,List(25, 24),government,(government-organization :ARG0-of govern-01),false), Span(17,18,List(28, 27, 26),Vietnamese,(country :name (name :op "Vietnam")),false), Span(14,15,List(29),stated,state-01,false), Span(13,14,List(31, 30),leaders,(person :ARG0-of lead-02),false), Span(12,13,List(34, 33, 32),Vietnamese,(country :name (name :op "Vietnam")),false), Span(9,12,List(38, 37, 36, 35),9 October 2004,(date-entity :day 9 :month 10 :year 2004),false), Span(7,8,List(39),held,hold-04,false), Span(6,7,List(42, 41, 40),Schroeder,(person :name (name :op "Schroeder")),false), Span(4,5,List(43),meetings,meet-03,false), Span(3,4,List(44),and,and,false), Span(2,3,List(45),talks,talk-01,false), Span(1,2,List(46),separate,separate,false)),Map(45 -> talk-01, 39 -> hold-04, 30 -> person, 2 -> "Germany", 5 -> name, 33 -> name, 27 -> name, 12 -> "Council", 8 -> want-01, 15 -> seat-01, 42 -> "Schroeder", 36 -> 9, 21 -> name, 18 -> government-organization, 24 -> government-organization, 41 -> name, 35 -> date-entity, 7 -> strengthen-01, 1 -> name, 17 -> bid-01, 44 -> and, 23 -> support-01, 38 -> 2004, 26 -> country, 4 -> country, 11 -> name, 32 -> country, 14 -> "UN", 29 -> state-01, 20 -> country, 46 -> separate, 34 -> "Vietnam", 28 -> "Vietnam", 6 -> "Vietnam", 40 -> person, 43 -> meet-03, 9 -> and, 0 -> country, 22 -> "Germany", 16 -> permanent, 37 -> 10, 19 -> govern-01, 10 -> organization, 3 -> relation, 31 -> lead-02, 25 -> govern-01, 13 -> "Security"),Map(s5 -> separate, w -> want-01, n -> name, h -> hold-04, g3 -> government-organization, 2 -> 2004, s2 -> seat-01, t -> talk-01, b -> bid-01, n7 -> name, p2 -> person, n4 -> name, c4 -> country, s -> strengthen-01, s4 -> state-01, m -> meet-03, d -> date-entity, 1 -> 10, g2 -> govern-01, p -> permanent, g -> government-organization, n3 -> name, a -> and, c3 -> country, n6 -> name, a2 -> and, r -> relation, c -> country, s3 -> support-01, l -> lead-02, 9 -> 9, o -> organization, p3 -> person, n2 -> name, c2 -> country, g4 -> govern-01, c5 -> country, n5 -> name))),[Ljava.lang.String;@286090c,Annotation([Ljava.lang.String;@31120021,[Ljava.lang.String;@3df1a1ac,[Ljava.lang.String;@58606c91),Annotation([Ljava.lang.String;@6a9cd0f8,[Ljava.lang.String;@4baed682,[Ledu.cmu.lti.nlp.amr.Dependency;@7be2f29a),Annotation([Ljava.lang.String;@203d1d93,[Ljava.lang.String;@2c2a027c,[Ljava.lang.String;@118dcbbd),Annotation([Ljava.lang.String;@7d979d34,[Ljava.lang.String;@350ec690,[Ledu.cmu.lti.nlp.amr.Entity;@49cb1baf))
AMR:
(a / and, op, s3 / support-01)
(a / and, op, w / want-01)
(b / bid-01, ARG0, g3 / government-organization)
(b / bid-01, ARG1, s2 / seat-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(c5 / country, name, n6 / name)
(d / date-entity, day, 9 / 9)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2004)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c4 / country)
(h / hold-04, ARG1, a2 / and)
(h / hold-04, time, d / date-entity)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, c5 / country)
(m / meet-03, ARG0, p2 / person)
(m / meet-03, ARG1, p3 / person)
(m / meet-03, manner, s5 / separate)
(n / name, op, "Germany")
(n2 / name, op, "Vietnam")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(n3 / name, op, "UN")
(n4 / name, op, "Germany")
(n5 / name, op, "Vietnam")
(n6 / name, op, "Vietnam")
(n7 / name, op, "Schroeder")
(o / organization, name, n3 / name)
(p3 / person, name, n7 / name)
(r / relation, mod, c2 / country)
(r / relation, prep-with, c / country)
(s / strengthen-01, ARG1, r / relation)
(s2 / seat-01, ARG1, c3 / country)
(s2 / seat-01, ARG2, o / organization)
(s2 / seat-01, mod, p / permanent)
(s3 / support-01, ARG1, b / bid-01)
(s4 / state-01, ARG0, p2 / person)
(s4 / state-01, ARG1, a / and)
(s4 / state-01, time, a2 / and)
(t / talk-01, ARG1, p3 / person)
(w / want-01, ARG1, s / strengthen-01)

Decoded in 8,256,241 microseconds
Sentence: Vietnamese Prime Minister Phan Van Khai stated that the visit by Schroeder is important to the Vietnam-German relationship and the closer cooperation between the 2 continents.

NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (person :name (name :op "Phan" :op "Van" :op "Khai"))
NER Entity: (person :name (name :op "Schroeder"))
NER Entity: (thing :name (name :op "Vietnam" :op "-" :op "German"))
NER Entity: (thing :name (name :op "Vietnam" :op "-" :op "German"))
NER Entity: (person :name (name :op "Schroeder"))
NER Entity: (thing :name (name :op "Vietnamese"))
Spans:
Span 26-27:  2 => 2
Span 20-21:  and => and
Span 24-25:  between => between
Span 22-23:  closer => close
Span 27-28:  continents => continent
Span 23-24:  cooperation => cooperate-01
Span 18-19:  German => (country :name (name :op "Germany"))
Span 13-14:  important => important
Span 2-3:  Minister => (have-org-role-91 :ARG2 minister)
Span 3-6:  Phan Van Khai => (person :name (name :op "Khai" :op "Van" :op "Phan"))
Span 1-2:  Prime => prime
Span 19-20:  relationship => relationship
Span 11-12:  Schroeder => (person :name (name :op "Schroeder"))
Span 6-7:  stated => state-01
Span 16-17:  Vietnam => (country :name (name :op "Vietnam"))
Span 0-1:  Vietnamese => (country :name (name :op "Vietnam"))
Span 9-10:  visit => visit-01

Langrangian relaxation converged after 18 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(27,28,List(0),continents,continent,false), Span(26,27,List(1),2,2,false), Span(24,25,List(2),between,between,false), Span(23,24,List(3),cooperation,cooperate-01,false), Span(22,23,List(4),closer,close,false), Span(20,21,List(5),and,and,false), Span(19,20,List(6),relationship,relationship,false), Span(18,19,List(9, 8, 7),German,(country :name (name :op "Germany")),false), Span(16,17,List(12, 11, 10),Vietnam,(country :name (name :op "Vietnam")),false), Span(13,14,List(13),important,important,false), Span(11,12,List(16, 15, 14),Schroeder,(person :name (name :op "Schroeder")),false), Span(9,10,List(17),visit,visit-01,false), Span(6,7,List(18),stated,state-01,false), Span(3,6,List(23, 22, 21, 20, 19),Phan Van Khai,(person :name (name :op "Khai" :op "Van" :op "Phan")),false), Span(2,3,List(25, 24),Minister,(have-org-role-91 :ARG2 minister),false), Span(1,2,List(26),Prime,prime,false), Span(0,1,List(29, 28, 27),Vietnamese,(country :name (name :op "Vietnam")),false)),Map(2 -> between, 5 -> and, 27 -> country, 12 -> "Vietnam", 8 -> name, 15 -> name, 21 -> "Khai", 18 -> state-01, 24 -> have-org-role-91, 7 -> country, 1 -> 2, 17 -> visit-01, 23 -> "Phan", 26 -> prime, 4 -> close, 11 -> name, 14 -> person, 29 -> "Vietnam", 20 -> name, 28 -> name, 6 -> relationship, 9 -> "Germany", 0 -> continent, 22 -> "Van", 16 -> "Schroeder", 19 -> person, 10 -> country, 3 -> cooperate-01, 25 -> minister, 13 -> important),Map(n -> name, h -> have-org-role-91, 2 -> 2, b -> between, p2 -> person, n4 -> name, c4 -> country, s -> state-01, v -> visit-01, m -> minister, p -> person, n3 -> name, c3 -> close, a -> and, c6 -> country, r -> relationship, i -> important, c -> continent, p3 -> prime, c2 -> cooperate-01, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@3664f108,Annotation([Ljava.lang.String;@77dba4cd,[Ljava.lang.String;@34a2d6e0,[Ljava.lang.String;@2525a5b8),Annotation([Ljava.lang.String;@3458eca5,[Ljava.lang.String;@1e0fdb2f,[Ledu.cmu.lti.nlp.amr.Dependency;@3c380bd8),Annotation([Ljava.lang.String;@34b87182,[Ljava.lang.String;@47768e74,[Ljava.lang.String;@2740e316),Annotation([Ljava.lang.String;@5b5a4aed,[Ljava.lang.String;@2c991465,[Ledu.cmu.lti.nlp.amr.Entity;@5fef2aac))
AMR:
(a / and, op, c2 / cooperate-01)
(a / and, op, r / relationship)
(b / between, op, 2 / 2)
(b / between, op, c / continent)
(c2 / cooperate-01, ARG0, c / continent)
(c2 / cooperate-01, manner, c3 / close)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(c6 / country, name, n5 / name)
(h / have-org-role-91, ARG0, p2 / person)
(h / have-org-role-91, ARG1, c6 / country)
(h / have-org-role-91, ARG2, m / minister)
(i / important, domain, v / visit-01)
(i / important, purpose, a / and)
(m / minister, mod, p3 / prime)
(n / name, op, "Germany")
(n2 / name, op, "Vietnam")
(n3 / name, op, "Schroeder")
(n4 / name, op, "Khai")
(n4 / name, op, "Phan")
(n4 / name, op, "Van")
(n5 / name, op, "Vietnam")
(p / person, name, n3 / name)
(p2 / person, name, n4 / name)
(r / relationship, mod, c4 / country)
(r / relationship, mod, c5 / country)
(s / state-01, ARG0, p2 / person)
(s / state-01, ARG1, i / important)
(v / visit-01, ARG1, p / person)

Decoded in 870,143 microseconds
Sentence: Vietnamese and German officials signed 5 documents on financial, technical and business cooperation totaling over 260 million US dollars.

NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "US"))
NER Entity: (country :name (name :op "US"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
Spans:
Span 5-6:  5 => 5
Span 11-12:  and => and
Span 1-2:  and => and
Span 12-13:  business => business
Span 13-14:  cooperation => cooperate-01
Span 6-7:  documents => document
Span 19-20:  dollars => (monetary-quantity :unit dollar)
Span 8-9:  financial => finance
Span 2-3:  German => (country :name (name :op "Germany"))
Span 3-4:  officials => (have-org-role-91 :ARG2 official)
Span 15-16:  over => over
Span 4-5:  signed => sign-02
Span 10-11:  technical => technique
Span 14-15:  totaling => total-01
Span 18-19:  US => (country :name (name :op "US"))
Span 0-1:  Vietnamese => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 82 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(19,20,List(1, 0),dollars,(monetary-quantity :unit dollar),false), Span(18,19,List(4, 3, 2),US,(country :name (name :op "US")),false), Span(15,16,List(5),over,over,false), Span(14,15,List(6),totaling,total-01,false), Span(13,14,List(7),cooperation,cooperate-01,false), Span(12,13,List(8),business,business,false), Span(11,12,List(9),and,and,false), Span(10,11,List(10),technical,technique,false), Span(8,9,List(11),financial,finance,false), Span(6,7,List(12),documents,document,false), Span(5,6,List(13),5,5,false), Span(4,5,List(14),signed,sign-02,false), Span(3,4,List(16, 15),officials,(have-org-role-91 :ARG2 official),false), Span(2,3,List(19, 18, 17),German,(country :name (name :op "Germany")),false), Span(1,2,List(20),and,and,false), Span(0,1,List(23, 22, 21),Vietnamese,(country :name (name :op "Vietnam")),false)),Map(2 -> country, 5 -> over, 12 -> document, 15 -> have-org-role-91, 8 -> business, 21 -> country, 18 -> name, 7 -> cooperate-01, 17 -> country, 1 -> dollar, 23 -> "Vietnam", 4 -> "US", 11 -> finance, 14 -> sign-02, 20 -> and, 6 -> total-01, 22 -> name, 0 -> monetary-quantity, 9 -> and, 16 -> official, 19 -> "Germany", 3 -> name, 10 -> technique, 13 -> 5),Map(n -> name, h -> have-org-role-91, 5 -> 5, t -> total-01, b -> business, c4 -> country, s -> sign-02, m -> monetary-quantity, d -> dollar, n3 -> name, c3 -> country, a -> and, o2 -> official, d2 -> document, t2 -> technique, a2 -> and, c -> country, f -> finance, o -> over, n2 -> name, c2 -> cooperate-01))),[Ljava.lang.String;@7f973a14,Annotation([Ljava.lang.String;@76130a29,[Ljava.lang.String;@124d02b2,[Ljava.lang.String;@3451f01d),Annotation([Ljava.lang.String;@72503b19,[Ljava.lang.String;@1cfc2538,[Ledu.cmu.lti.nlp.amr.Dependency;@66deec87),Annotation([Ljava.lang.String;@5d342959,[Ljava.lang.String;@2ecf5915,[Ljava.lang.String;@53e76c11),Annotation([Ljava.lang.String;@42cc183e,[Ljava.lang.String;@3e4e8fdf,[Ledu.cmu.lti.nlp.amr.Entity;@6a1d6ef2))
AMR:
(a / and, op, c4 / country)
(a2 / and, op, b / business)
(a2 / and, op, f / finance)
(a2 / and, op, t2 / technique)
(c / country, name, n / name)
(c2 / cooperate-01, ARG1, h / have-org-role-91)
(c2 / cooperate-01, ARG2, a2 / and)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(d / dollar, mod, c / country)
(d2 / document, quant, 5 / 5)
(d2 / document, topic, c2 / cooperate-01)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, o2 / official)
(m / monetary-quantity, unit, d / dollar)
(n / name, op, "US")
(n2 / name, op, "Germany")
(n3 / name, op, "Vietnam")
(o / over, op, m / monetary-quantity)
(s / sign-02, ARG0, a / and)
(s / sign-02, ARG1, d2 / document)
(t / total-01, ARG1, d2 / document)
(t / total-01, ARG2, o / over)

Decoded in 2,498,805 microseconds
Sentence: The documents cover financial cooperation for 2 stages in the 2003-2005 period and the purchase of 16 locomotives for the Vietnam Railway Corporation and equipment for a local cement plant.

mkDayMonthYear(2003-2005,05,20,2003)
NER Entity: (organization :name (name :op "Vietnam" :op "Railway" :op "Corporation"))
mkDayMonthYear(2003-2005,05,20,2003)
Spans:
Span 16-17:  16 => 16
Span 6-7:  2 => 2
Span 10-11:  2003-2005 => 2003
Span 23-24:  and => and
Span 12-13:  and => and
Span 28-29:  cement => cement
Span 4-5:  cooperation => cooperate-01
Span 2-3:  cover => cover-04
Span 1-2:  documents => document
Span 24-25:  equipment => equipment
Span 3-4:  financial => finance
Span 27-28:  local => local
Span 17-18:  locomotives => locomotive
Span 11-12:  period => period
Span 29-30:  plant => plant
Span 14-15:  purchase => purchase-01
Span 7-8:  stages => stage
Span 20-23:  Vietnam Railway Corporation => (organization :name (name :op "Vietnam" :op "Railway" :op "Corporation"))

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),plant,plant,false), Span(28,29,List(1),cement,cement,false), Span(27,28,List(2),local,local,false), Span(24,25,List(3),equipment,equipment,false), Span(23,24,List(4),and,and,false), Span(20,23,List(9, 8, 7, 6, 5),Vietnam Railway Corporation,(organization :name (name :op "Vietnam" :op "Railway" :op "Corporation")),false), Span(17,18,List(10),locomotives,locomotive,false), Span(16,17,List(11),16,16,false), Span(14,15,List(12),purchase,purchase-01,false), Span(12,13,List(13),and,and,false), Span(11,12,List(14),period,period,false), Span(10,11,List(15),2003-2005,2003,false), Span(7,8,List(16),stages,stage,false), Span(6,7,List(17),2,2,false), Span(4,5,List(18),cooperation,cooperate-01,false), Span(3,4,List(19),financial,finance,false), Span(2,3,List(20),cover,cover-04,false), Span(1,2,List(21),documents,document,false)),Map(2 -> local, 5 -> organization, 12 -> purchase-01, 15 -> 2003, 8 -> "Railway", 21 -> document, 18 -> cooperate-01, 7 -> "Vietnam", 17 -> 2, 1 -> cement, 4 -> and, 11 -> 16, 14 -> period, 20 -> cover-04, 6 -> name, 0 -> plant, 9 -> "Corporation", 16 -> stage, 19 -> finance, 3 -> equipment, 10 -> locomotive, 13 -> and),Map(e -> equipment, n -> name, 2 -> 2003, p2 -> purchase-01, s -> stage, d -> document, 1 -> 16, p -> plant, c3 -> cover-04, a -> and, l2 -> locomotive, a2 -> and, c -> cement, l -> local, f -> finance, 22 -> 2, o -> organization, p3 -> period, c2 -> cooperate-01))),[Ljava.lang.String;@2721044,Annotation([Ljava.lang.String;@205df5dc,[Ljava.lang.String;@6aa7b67f,[Ljava.lang.String;@6bcc3f27),Annotation([Ljava.lang.String;@79aee22a,[Ljava.lang.String;@36920bd6,[Ledu.cmu.lti.nlp.amr.Dependency;@61514735),Annotation([Ljava.lang.String;@6bee793f,[Ljava.lang.String;@655f69da,[Ljava.lang.String;@43b5021c),Annotation([Ljava.lang.String;@28369db0,[Ljava.lang.String;@30893e08,[Ledu.cmu.lti.nlp.amr.Entity;@2e86807a))
AMR:
(a / and, op, e / equipment)
(a2 / and, op, e / equipment)
(a2 / and, op, f / finance)
(a2 / and, op, p2 / purchase-01)
(c2 / cooperate-01, ARG1, p3 / period)
(c2 / cooperate-01, ARG2, f / finance)
(c3 / cover-04, ARG0, d / document)
(c3 / cover-04, ARG1, c2 / cooperate-01)
(e / equipment, beneficiary, p / plant)
(f / finance, duration, s / stage)
(l2 / locomotive, quant, 1 / 16)
(n / name, op, "Corporation")
(n / name, op, "Railway")
(n / name, op, "Vietnam")
(o / organization, name, n / name)
(p / plant, mod, c / cement)
(p / plant, mod, l / local)
(p2 / purchase-01, ARG1, l2 / locomotive)
(p2 / purchase-01, ARG4, o / organization)
(p3 / period, quant, 2 / 2003)
(s / stage, quant, 22 / 2)

Decoded in 696,556 microseconds
Sentence: Vietnamese State President Tran Duc Luong stated in a meeting with Schroeder that the Vietnamese Government would like to receive more technology transfer and experience from Germany and that Vietnam is developing under the industrialization process.

NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (person :name (name :op "Tran" :op "Duc" :op "Luong"))
NER Entity: (person :name (name :op "Schroeder"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (country :name (name :op "Vietnam"))
NER Entity: (country :name (name :op "Vietnam"))
NER Entity: (country :name (name :op "Germany"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (person :name (name :op "Schroeder"))
NER Entity: (thing :name (name :op "Vietnamese"))
Spans:
Span 27-28:  and => and
Span 23-24:  and => and
Span 31-32:  developing => develop-02
Span 24-25:  experience => experience-01
Span 26-27:  Germany => (country :name (name :op "Germany"))
Span 15-16:  Government => (government-organization :ARG0-of govern-01)
Span 34-35:  industrialization => industrialize-01
Span 9-10:  meeting => meet-03
Span 20-21:  more => more
Span 2-3:  President => (have-org-role-91 :ARG2 president)
Span 35-36:  process => process
Span 19-20:  receive => receive-01
Span 11-12:  Schroeder => (person :name (name :op "Schroeder"))
Span 6-7:  stated => state-01
Span 21-22:  technology => technology
Span 3-6:  Tran Duc Luong => (person :name (name :op "Tran" :op "Duc" :op "Luong"))
Span 22-23:  transfer => transfer-01
Span 29-30:  Vietnam => (country :name (name :op "Vietnam"))
Span 14-15:  Vietnamese => (country :name (name :op "Vietnam"))
Span 0-1:  Vietnamese => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 63 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,36,List(0),process,process,false), Span(34,35,List(1),industrialization,industrialize-01,false), Span(31,32,List(2),developing,develop-02,false), Span(29,30,List(5, 4, 3),Vietnam,(country :name (name :op "Vietnam")),false), Span(27,28,List(6),and,and,false), Span(26,27,List(9, 8, 7),Germany,(country :name (name :op "Germany")),false), Span(24,25,List(10),experience,experience-01,false), Span(23,24,List(11),and,and,false), Span(22,23,List(12),transfer,transfer-01,false), Span(21,22,List(13),technology,technology,false), Span(20,21,List(14),more,more,false), Span(19,20,List(15),receive,receive-01,false), Span(15,16,List(17, 16),Government,(government-organization :ARG0-of govern-01),false), Span(14,15,List(20, 19, 18),Vietnamese,(country :name (name :op "Vietnam")),false), Span(11,12,List(23, 22, 21),Schroeder,(person :name (name :op "Schroeder")),false), Span(9,10,List(24),meeting,meet-03,false), Span(6,7,List(25),stated,state-01,false), Span(3,6,List(30, 29, 28, 27, 26),Tran Duc Luong,(person :name (name :op "Tran" :op "Duc" :op "Luong")),false), Span(2,3,List(32, 31),President,(have-org-role-91 :ARG2 president),false), Span(0,1,List(35, 34, 33),Vietnamese,(country :name (name :op "Vietnam")),false)),Map(30 -> "Luong", 2 -> develop-02, 5 -> "Vietnam", 33 -> country, 27 -> name, 12 -> transfer-01, 8 -> name, 15 -> receive-01, 21 -> person, 18 -> country, 24 -> meet-03, 35 -> "Vietnam", 7 -> country, 1 -> industrialize-01, 17 -> govern-01, 23 -> "Schroeder", 26 -> person, 4 -> name, 11 -> and, 32 -> president, 14 -> more, 29 -> "Duc", 20 -> "Vietnam", 34 -> name, 28 -> "Tran", 6 -> and, 9 -> "Germany", 0 -> process, 22 -> name, 16 -> government-organization, 19 -> name, 10 -> experience-01, 3 -> country, 31 -> have-org-role-91, 25 -> state-01, 13 -> technology),Map(e -> experience-01, n -> name, h -> have-org-role-91, t -> transfer-01, m2 -> meet-03, p2 -> person, c4 -> country, n4 -> name, s -> state-01, m -> more, d -> develop-02, g2 -> govern-01, p -> process, g -> government-organization, a -> and, c3 -> country, n3 -> name, p4 -> president, n6 -> name, t2 -> technology, a2 -> and, i -> industrialize-01, r -> receive-01, c -> country, p3 -> person, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@4548d254,Annotation([Ljava.lang.String;@590f0c50,[Ljava.lang.String;@208f0007,[Ljava.lang.String;@3a90c13c),Annotation([Ljava.lang.String;@39c96e48,[Ljava.lang.String;@188598ad,[Ledu.cmu.lti.nlp.amr.Dependency;@40d23c82),Annotation([Ljava.lang.String;@7cf78c85,[Ljava.lang.String;@ebe067d,[Ljava.lang.String;@3a4ab7f7),Annotation([Ljava.lang.String;@6badba10,[Ljava.lang.String;@2b7e8044,[Ledu.cmu.lti.nlp.amr.Entity;@550de6b8))
AMR:
(a / and, op, e / experience-01)
(a / and, op, t / transfer-01)
(a2 / and, op, d / develop-02)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, name, n3 / name)
(c4 / country, name, n6 / name)
(d / develop-02, ARG1, c / country)
(d / develop-02, prep-under, p / process)
(e / experience-01, ARG1, c4 / country)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p4 / president)
(i / industrialize-01, ARG1, c3 / country)
(m2 / meet-03, ARG0, p3 / person)
(m2 / meet-03, ARG1, p2 / person)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(n3 / name, op, "Vietnam")
(n4 / name, op, "Schroeder")
(n5 / name, op, "Duc")
(n5 / name, op, "Luong")
(n5 / name, op, "Tran")
(n6 / name, op, "Vietnam")
(p / process, mod, i / industrialize-01)
(p2 / person, name, n4 / name)
(p3 / person, name, n5 / name)
(r / receive-01, ARG0, g / government-organization)
(r / receive-01, ARG1, a / and)
(r / receive-01, ARG2, c2 / country)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, a / and)
(t / transfer-01, ARG1, t2 / technology)
(t2 / technology, quant, m / more)

Decoded in 3,541,835 microseconds
Sentence: Schroeder stated that German officials attach great importance to Vietnam in an attempt to strengthen bilateral ties.

NER Entity: (person :name (name :op "Schroeder"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "Vietnam"))
NER Entity: (country :name (name :op "Vietnam"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (person :name (name :op "Schroeder"))
Spans:
Span 5-6:  attach => attach-01
Span 12-13:  attempt => attempt-01
Span 15-16:  bilateral => bilateral
Span 3-4:  German => (country :name (name :op "Germany"))
Span 6-7:  great => great
Span 7-8:  importance => importance
Span 4-5:  officials => (have-org-role-91 :ARG2 official)
Span 0-1:  Schroeder => (person :name (name :op "Schroeder"))
Span 1-2:  stated => state-01
Span 14-15:  strengthen => strengthen-01
Span 16-17:  ties => tie-01
Span 9-10:  Vietnam => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(0),ties,tie-01,false), Span(15,16,List(1),bilateral,bilateral,false), Span(14,15,List(2),strengthen,strengthen-01,false), Span(12,13,List(3),attempt,attempt-01,false), Span(9,10,List(6, 5, 4),Vietnam,(country :name (name :op "Vietnam")),false), Span(7,8,List(7),importance,importance,false), Span(6,7,List(8),great,great,false), Span(5,6,List(9),attach,attach-01,false), Span(4,5,List(11, 10),officials,(have-org-role-91 :ARG2 official),false), Span(3,4,List(14, 13, 12),German,(country :name (name :op "Germany")),false), Span(1,2,List(15),stated,state-01,false), Span(0,1,List(18, 17, 16),Schroeder,(person :name (name :op "Schroeder")),false)),Map(2 -> strengthen-01, 5 -> name, 12 -> country, 15 -> state-01, 8 -> great, 18 -> "Schroeder", 7 -> importance, 17 -> name, 1 -> bilateral, 4 -> country, 11 -> official, 14 -> "Germany", 6 -> "Vietnam", 0 -> tie-01, 9 -> attach-01, 16 -> person, 3 -> attempt-01, 10 -> have-org-role-91, 13 -> name),Map(n -> name, h -> have-org-role-91, s2 -> state-01, t -> tie-01, b -> bilateral, s -> strengthen-01, p -> person, g -> great, n3 -> name, a -> attempt-01, i -> importance, a2 -> attach-01, c -> country, o -> official, c2 -> country, n2 -> name))),[Ljava.lang.String;@3a1706e1,Annotation([Ljava.lang.String;@3c6c4689,[Ljava.lang.String;@63cf9de0,[Ljava.lang.String;@594d9f07),Annotation([Ljava.lang.String;@5befbac1,[Ljava.lang.String;@5e9f73b,[Ledu.cmu.lti.nlp.amr.Dependency;@1a565afb),Annotation([Ljava.lang.String;@2fd64b11,[Ljava.lang.String;@949c598,[Ljava.lang.String;@43d3aba5),Annotation([Ljava.lang.String;@6bfaa0a6,[Ljava.lang.String;@76e9f00b,[Ledu.cmu.lti.nlp.amr.Entity;@314b9e4b))
AMR:
(a / attempt-01, ARG1, s / strengthen-01)
(a2 / attach-01, ARG1, i / importance)
(a2 / attach-01, prep-to, c / country)
(a2 / attach-01, purpose, a / attempt-01)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(h / have-org-role-91, ARG1, c2 / country)
(h / have-org-role-91, ARG2, o / official)
(h / have-org-role-91, ARG6, s / strengthen-01)
(i / importance, mod, g / great)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(n3 / name, op, "Schroeder")
(p / person, name, n3 / name)
(s / strengthen-01, ARG1, t / tie-01)
(s2 / state-01, ARG0, p / person)
(s2 / state-01, ARG1, a2 / attach-01)
(t / tie-01, mod, b / bilateral)

Decoded in 1,056,053 microseconds
Sentence: The German Government supports the Vietnamese government's bid for a non-permanent membership of the UN Security Council in the 2008-2009 term and encourages small- and medium-sized German enterprises to do business with Vietnam.

NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (organization :name (name :op "UN" :op "Security" :op "Council"))
mkDayMonthYear(2008-2009,09,20,2008)
NER Entity: (thing :name (name :op "German"))
NER Entity: (country :name (name :op "Vietnam"))
NER Entity: (country :name (name :op "Vietnam"))
mkDayMonthYear(2008-2009,09,20,2008)
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 22-23:  2008-2009 => 2008
Span 28-29:  and => and
Span 24-25:  and => and
Span 8-9:  bid => bid-01
Span 36-37:  business => business
Span 35-36:  do => do-02
Span 25-26:  encourages => encourage-02
Span 33-34:  enterprises => enterprise
Span 32-33:  German => (country :name (name :op "Germany"))
Span 1-2:  German => (country :name (name :op "Germany"))
Span 6-7:  government => (government-organization :ARG0-of govern-01)
Span 2-3:  Government => (government-organization :ARG0-of govern-01)
Span 29-30:  medium => medium
Span 14-15:  membership => membership
Span 13-14:  permanent => permanent
Span 31-32:  sized => size-01
Span 26-27:  small => small
Span 3-4:  supports => support-01
Span 23-24:  term => term
Span 17-20:  UN Security Council => (organization :name (name :op "Council" :op "Security" :op "UN"))
Span 38-39:  Vietnam => (country :name (name :op "Vietnam"))
Span 5-6:  Vietnamese => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 130 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(2, 1, 0),Vietnam,(country :name (name :op "Vietnam")),false), Span(36,37,List(3),business,business,false), Span(35,36,List(4),do,do-02,false), Span(33,34,List(5),enterprises,enterprise,false), Span(32,33,List(8, 7, 6),German,(country :name (name :op "Germany")),false), Span(31,32,List(9),sized,size-01,false), Span(29,30,List(10),medium,medium,false), Span(28,29,List(11),and,and,false), Span(26,27,List(12),small,small,false), Span(25,26,List(13),encourages,encourage-02,false), Span(24,25,List(14),and,and,false), Span(23,24,List(15),term,term,false), Span(22,23,List(16),2008-2009,2008,false), Span(17,20,List(21, 20, 19, 18, 17),UN Security Council,(organization :name (name :op "Council" :op "Security" :op "UN")),false), Span(14,15,List(22),membership,membership,false), Span(13,14,List(23),permanent,permanent,false), Span(8,9,List(24),bid,bid-01,false), Span(6,7,List(26, 25),government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(29, 28, 27),Vietnamese,(country :name (name :op "Vietnam")),false), Span(3,4,List(30),supports,support-01,false), Span(2,3,List(32, 31),Government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(35, 34, 33),German,(country :name (name :op "Germany")),false)),Map(30 -> support-01, 2 -> "Vietnam", 5 -> enterprise, 33 -> country, 27 -> country, 12 -> small, 8 -> "Germany", 15 -> term, 21 -> "UN", 18 -> name, 24 -> bid-01, 35 -> "Germany", 7 -> name, 1 -> name, 17 -> organization, 23 -> permanent, 26 -> govern-01, 4 -> do-02, 11 -> and, 32 -> govern-01, 14 -> and, 29 -> "Vietnam", 20 -> "Security", 34 -> name, 28 -> name, 6 -> country, 9 -> size-01, 0 -> country, 22 -> membership, 16 -> 2008, 19 -> "Council", 10 -> medium, 3 -> business, 31 -> government-organization, 25 -> government-organization, 13 -> encourage-02),Map(e -> enterprise, n -> name, g3 -> government-organization, 2 -> 2008, s2 -> small, t -> term, b -> business, m2 -> membership, b2 -> bid-01, e2 -> encourage-02, c4 -> country, n4 -> name, s -> size-01, m -> medium, d -> do-02, g2 -> govern-01, p -> permanent, g -> government-organization, a -> and, n3 -> name, c3 -> country, a2 -> and, c -> country, s3 -> support-01, o -> organization, g4 -> govern-01, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@6f1b8544,Annotation([Ljava.lang.String;@51dae791,[Ljava.lang.String;@688a2c09,[Ljava.lang.String;@5de5e95),Annotation([Ljava.lang.String;@365cdacf,[Ljava.lang.String;@303c55fa,[Ledu.cmu.lti.nlp.amr.Dependency;@9efcd90),Annotation([Ljava.lang.String;@7eb200ce,[Ljava.lang.String;@2ee83775,[Ljava.lang.String;@7c2924d7),Annotation([Ljava.lang.String;@b5de58f,[Ljava.lang.String;@6587305a,[Ledu.cmu.lti.nlp.amr.Entity;@abbe000))
AMR:
(a / and, op, e / enterprise)
(a2 / and, op, e2 / encourage-02)
(a2 / and, op, s3 / support-01)
(b2 / bid-01, ARG0, g / government-organization)
(b2 / bid-01, ARG1, m2 / membership)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(c3 / country, mod, s2 / small)
(c3 / country, name, n4 / name)
(c4 / country, mod, 2 / 2008)
(c4 / country, name, n5 / name)
(d / do-02, ARG0, a / and)
(d / do-02, ARG1, b / business)
(d / do-02, ARG4, c / country)
(e / enterprise, mod, c4 / country)
(e2 / encourage-02, ARG1, a / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c3 / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c2 / country)
(m2 / membership, mod, p / permanent)
(m2 / membership, poss, o / organization)
(m2 / membership, time, t / term)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(n3 / name, op, "Council")
(n3 / name, op, "Security")
(n3 / name, op, "UN")
(n4 / name, op, "Vietnam")
(n5 / name, op, "Germany")
(o / organization, name, n3 / name)
(s / size-01, ARG1, e / enterprise)
(s / size-01, ARG2, m / medium)
(s3 / support-01, ARG0, g3 / government-organization)
(s3 / support-01, ARG1, b2 / bid-01)

Decoded in 7,096,984 microseconds
Sentence: The German government offered the Vietnamese government official development assistance worth more than 480 million dollars in the 1990-2003 period primarily for poverty reduction, agriculture development, healthcare and economic reforms.

NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Vietnamese"))
mkDayMonthYear(1990-2003,03,20,1990)
mkDayMonthYear(1990-2003,03,20,1990)
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 18-19:  1990-2003 => 1990
Span 13-14:  480 => 480
Span 25-26:  agriculture => agriculture
Span 29-30:  and => and
Span 9-10:  assistance => assist-01
Span 26-27:  development => develop-02
Span 8-9:  development => develop-02
Span 15-16:  dollars => (monetary-quantity :unit dollar)
Span 30-31:  economic => economy
Span 1-2:  German => (country :name (name :op "Germany"))
Span 6-7:  government => (government-organization :ARG0-of govern-01)
Span 2-3:  government => (government-organization :ARG0-of govern-01)
Span 28-29:  healthcare => healthcare
Span 11-12:  more => more
Span 3-4:  offered => offer-01
Span 7-8:  official => (have-org-role-91 :ARG2 official)
Span 19-20:  period => period
Span 22-23:  poverty => poverty
Span 20-21:  primarily => primary
Span 23-24:  reduction => reduce-01
Span 31-32:  reforms => reform-01
Span 5-6:  Vietnamese => (country :name (name :op "Vietnam"))

Langrangian relaxation converged after 43 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(31,32,List(0),reforms,reform-01,false), Span(30,31,List(1),economic,economy,false), Span(29,30,List(2),and,and,false), Span(28,29,List(3),healthcare,healthcare,false), Span(26,27,List(4),development,develop-02,false), Span(25,26,List(5),agriculture,agriculture,false), Span(23,24,List(6),reduction,reduce-01,false), Span(22,23,List(7),poverty,poverty,false), Span(20,21,List(8),primarily,primary,false), Span(19,20,List(9),period,period,false), Span(18,19,List(10),1990-2003,1990,false), Span(15,16,List(12, 11),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(13),480,480,false), Span(11,12,List(14),more,more,false), Span(9,10,List(15),assistance,assist-01,false), Span(8,9,List(16),development,develop-02,false), Span(7,8,List(18, 17),official,(have-org-role-91 :ARG2 official),false), Span(6,7,List(20, 19),government,(government-organization :ARG0-of govern-01),false), Span(5,6,List(23, 22, 21),Vietnamese,(country :name (name :op "Vietnam")),false), Span(3,4,List(24),offered,offer-01,false), Span(2,3,List(26, 25),government,(government-organization :ARG0-of govern-01),false), Span(1,2,List(29, 28, 27),German,(country :name (name :op "Germany")),false)),Map(2 -> and, 5 -> agriculture, 27 -> country, 12 -> dollar, 8 -> primary, 15 -> assist-01, 21 -> country, 18 -> official, 24 -> offer-01, 7 -> poverty, 1 -> economy, 17 -> have-org-role-91, 23 -> "Vietnam", 26 -> govern-01, 4 -> develop-02, 11 -> monetary-quantity, 14 -> more, 29 -> "Germany", 20 -> govern-01, 28 -> name, 6 -> reduce-01, 9 -> period, 0 -> reform-01, 22 -> name, 16 -> develop-02, 19 -> government-organization, 10 -> 1990, 3 -> healthcare, 25 -> government-organization, 13 -> 480),Map(e -> economy, n -> name, h -> healthcare, g3 -> government-organization, h2 -> have-org-role-91, m2 -> more, d3 -> develop-02, p2 -> primary, a3 -> assist-01, m -> monetary-quantity, d -> develop-02, 1 -> 1990, g2 -> govern-01, r2 -> reduce-01, p -> poverty, g -> government-organization, a -> and, 4 -> 480, d2 -> dollar, o2 -> offer-01, a2 -> agriculture, r -> reform-01, c -> country, o -> official, p3 -> period, n2 -> name, c2 -> country, g4 -> govern-01))),[Ljava.lang.String;@3f81621c,Annotation([Ljava.lang.String;@5b9499fe,[Ljava.lang.String;@74d6736,[Ljava.lang.String;@52a33c3f),Annotation([Ljava.lang.String;@668625f5,[Ljava.lang.String;@19a20bb2,[Ledu.cmu.lti.nlp.amr.Dependency;@75babb67),Annotation([Ljava.lang.String;@3eb3232b,[Ljava.lang.String;@69cd1085,[Ljava.lang.String;@60bb7995),Annotation([Ljava.lang.String;@40fa8766,[Ljava.lang.String;@67774e29,[Ledu.cmu.lti.nlp.amr.Entity;@663f237a))
AMR:
(a / and, mod, p2 / primary)
(a / and, op, d3 / develop-02)
(a / and, op, h / healthcare)
(a / and, op, r / reform-01)
(a / and, op, r2 / reduce-01)
(a3 / assist-01, ARG0, g / government-organization)
(a3 / assist-01, ARG1, g3 / government-organization)
(a3 / assist-01, ARG2, d / develop-02)
(a3 / assist-01, purpose, a / and)
(c / country, name, n / name)
(c2 / country, name, n2 / name)
(d / develop-02, ARG1, p3 / period)
(d3 / develop-02, ARG1, a2 / agriculture)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c / country)
(g4 / govern-01, ARG0, g3 / government-organization)
(g4 / govern-01, ARG1, c2 / country)
(h2 / have-org-role-91, ARG1, g / government-organization)
(h2 / have-org-role-91, ARG2, o / official)
(m / monetary-quantity, quant, 4 / 480)
(m / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(o2 / offer-01, ARG1, a3 / assist-01)
(p3 / period, quant, 1 / 1990)
(r / reform-01, ARG0, m2 / more)
(r / reform-01, ARG1, e / economy)
(r2 / reduce-01, ARG0, m / monetary-quantity)
(r2 / reduce-01, ARG1, p / poverty)

Decoded in 2,381,626 microseconds
Sentence: The Vietnam-Germany trade volume rose 7.7 percent in 2003 to reach 1.4 billion dollars, of which 815.4 million dollars came from Vietnamese exports.

NER Entity: (thing :name (name :op "Vietnam" :op "-" :op "Germany"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "Vietnamese"))
NER Entity: (thing :name (name :op "Vietnam" :op "-" :op "Germany"))
Spans:
Span 13-14:  1.4 => 1.4
Span 10-11:  2003 => (date-entity :year 2003)
Span 7-8:  7.7 => 7.7
Span 22-23:  came => come-01
Span 21-22:  dollars => (monetary-quantity :unit dollar)
Span 15-16:  dollars => (monetary-quantity :unit dollar)
Span 25-26:  exports => export-01
Span 3-4:  Germany => (country :name (name :op "Germany"))
Span 8-9:  percent => percentage-entity
Span 12-13:  reach => reach-01
Span 6-7:  rose => rise-01
Span 4-5:  trade => trade-01
Span 1-2:  Vietnam => (country :name (name :op "Vietnam"))
Span 24-25:  Vietnamese => (country :name (name :op "Vietnam"))
Span 5-6:  volume => volume

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),exports,export-01,false), Span(24,25,List(3, 2, 1),Vietnamese,(country :name (name :op "Vietnam")),false), Span(22,23,List(4),came,come-01,false), Span(21,22,List(6, 5),dollars,(monetary-quantity :unit dollar),false), Span(15,16,List(8, 7),dollars,(monetary-quantity :unit dollar),false), Span(13,14,List(9),1.4,1.4,false), Span(12,13,List(10),reach,reach-01,false), Span(10,11,List(12, 11),2003,(date-entity :year 2003),false), Span(8,9,List(13),percent,percentage-entity,false), Span(7,8,List(14),7.7,7.7,false), Span(6,7,List(15),rose,rise-01,false), Span(5,6,List(16),volume,volume,false), Span(4,5,List(17),trade,trade-01,false), Span(3,4,List(20, 19, 18),Germany,(country :name (name :op "Germany")),false), Span(1,2,List(23, 22, 21),Vietnam,(country :name (name :op "Vietnam")),false)),Map(2 -> name, 5 -> monetary-quantity, 12 -> 2003, 15 -> rise-01, 8 -> dollar, 21 -> country, 18 -> country, 7 -> monetary-quantity, 17 -> trade-01, 1 -> country, 23 -> "Vietnam", 4 -> come-01, 11 -> date-entity, 14 -> 7.7, 20 -> "Germany", 6 -> dollar, 22 -> name, 0 -> export-01, 9 -> 1.4, 16 -> volume, 19 -> name, 3 -> "Vietnam", 10 -> reach-01, 13 -> percentage-entity),Map(e -> export-01, n -> name, 2 -> 2003, t -> trade-01, m2 -> monetary-quantity, d3 -> date-entity, c4 -> country, v -> volume, 7 -> 7.7, m -> monetary-quantity, d -> dollar, 1 -> 1.4, r2 -> rise-01, p -> percentage-entity, n3 -> name, c3 -> country, d2 -> dollar, r -> reach-01, c -> country, n2 -> name, c2 -> come-01))),[Ljava.lang.String;@5d7399f9,Annotation([Ljava.lang.String;@49a6f486,[Ljava.lang.String;@14fded9d,[Ljava.lang.String;@bc6288b),Annotation([Ljava.lang.String;@4a3bd45b,[Ljava.lang.String;@34c70b5e,[Ledu.cmu.lti.nlp.amr.Dependency;@4f2d995e),Annotation([Ljava.lang.String;@75156240,[Ljava.lang.String;@6198e9b5,[Ljava.lang.String;@6d099323),Annotation([Ljava.lang.String;@4ecd00b5,[Ljava.lang.String;@10947c4e,[Ledu.cmu.lti.nlp.amr.Entity;@3667faa8))
AMR:
(c / country, name, n / name)
(c2 / come-01, ARG1, m / monetary-quantity)
(c2 / come-01, ARG2, e / export-01)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(d3 / date-entity, year, 2 / 2003)
(e / export-01, ARG0, c3 / country)
(e / export-01, ARG1, c / country)
(m / monetary-quantity, unit, d / dollar)
(m2 / monetary-quantity, unit, d2 / dollar)
(n / name, op, "Vietnam")
(n2 / name, op, "Germany")
(n3 / name, op, "Vietnam")
(p / percentage-entity, value, 7 / 7.7)
(r / reach-01, ARG0, v / volume)
(r / reach-01, ARG1, m2 / monetary-quantity)
(r2 / rise-01, ARG1, v / volume)
(r2 / rise-01, ARG2, p / percentage-entity)
(r2 / rise-01, time, d3 / date-entity)
(t / trade-01, ARG0, c4 / country)
(t / trade-01, ARG1, 1 / 1.4)
(t / trade-01, ARG2, c3 / country)
(v / volume, mod, t / trade-01)

Decoded in 967,990 microseconds
Sentence: 2004-12-19

mkDayMonthYear(2004-12-19,19,12,2004)
mkDayMonthYear(2004-12-19,19,12,2004)
Spans:
Span 0-1:  2004-12-19 => (date-entity :day 19 :month 12 :year 2004)

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(0,1,List(3, 2, 1, 0),2004-12-19,(date-entity :day 19 :month 12 :year 2004),false)),Map(2 -> 12, 1 -> 19, 0 -> date-entity, 3 -> 2004),Map(2 -> 2004, 12 -> 12, d -> date-entity, 1 -> 19))),[Ljava.lang.String;@1756f7cc,Annotation([Ljava.lang.String;@3138953b,[Ljava.lang.String;@27df95e,[Ljava.lang.String;@b46e103),Annotation([Ljava.lang.String;@2b0e9f30,[Ljava.lang.String;@5eea5627,[Ledu.cmu.lti.nlp.amr.Dependency;@3330f3ad),Annotation([Ljava.lang.String;@f425231,[Ljava.lang.String;@506aabf6,[Ljava.lang.String;@5cbd94b2),Annotation([Ljava.lang.String;@6824b913,[Ljava.lang.String;@756aadfc,[Ledu.cmu.lti.nlp.amr.Entity;@705a8dbc))
AMR:
(d / date-entity, day, 1 / 19)
(d / date-entity, month, 12 / 12)
(d / date-entity, year, 2 / 2004)

Decoded in 6,869 microseconds
Sentence: Hong Kong (HK); China (CN)

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "HK"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "CN"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 5-6:  ; => and
Span 6-7:  China => (country :name (name :op "China"))
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(6,7,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(5,6,List(3),;,and,false), Span(0,2,List(7, 6, 5, 4),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> "China", 5 -> name, 7 -> "Hong", 1 -> name, 4 -> city, 6 -> "Kong", 0 -> country, 3 -> and),Map(n -> name, a -> and, c -> country, n2 -> name, c2 -> city))),[Ljava.lang.String;@40729f01,Annotation([Ljava.lang.String;@d535a3d,[Ljava.lang.String;@2d760326,[Ljava.lang.String;@9e54c59),Annotation([Ljava.lang.String;@5dbb50f3,[Ljava.lang.String;@4a2e7bcb,[Ledu.cmu.lti.nlp.amr.Dependency;@575c3e9b),Annotation([Ljava.lang.String;@74f827ad,[Ljava.lang.String;@73c3cd09,[Ljava.lang.String;@4a8a0099),Annotation([Ljava.lang.String;@7c1447b5,[Ljava.lang.String;@49e4c2d5,[Ledu.cmu.lti.nlp.amr.Entity;@24a2e565))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / city)
(c / country, name, n / name)
(c2 / city, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")

Decoded in 18,185 microseconds
Sentence: technology; international

Spans:
Span 1-2:  ; => and
Span 2-3:  international => international
Span 0-1:  technology => technology

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(2,3,List(0),international,international,false), Span(1,2,List(1),;,and,false), Span(0,1,List(2),technology,technology,false)),Map(2 -> technology, 1 -> and, 0 -> international),Map(t -> technology, a -> and, i -> international))),[Ljava.lang.String;@3e36b7a0,Annotation([Ljava.lang.String;@60c1663c,[Ljava.lang.String;@f5cf29b,[Ljava.lang.String;@3c66b7d8),Annotation([Ljava.lang.String;@37e69c43,[Ljava.lang.String;@5c7dfc05,[Ledu.cmu.lti.nlp.amr.Dependency;@345d053b),Annotation([Ljava.lang.String;@3d0cac1f,[Ljava.lang.String;@3e8b3b79,[Ljava.lang.String;@d257579),Annotation([Ljava.lang.String;@518ddd3b,[Ljava.lang.String;@939ff41,[Ledu.cmu.lti.nlp.amr.Entity;@6e0e5dec))
AMR:
(a / and, op, i / international)
(a / and, op, t / technology)

Decoded in 5,264 microseconds
Sentence: Hong Kong universities collaborate with universities, businesses and government sectors of mainland China to coordinate training programs and research centers to promote high-tech research, commercialization, and technology transfer.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 30-31:  and => and
Span 18-19:  and => and
Span 8-9:  and => and
Span 7-8:  businesses => business
Span 20-21:  centers => center
Span 13-14:  China => (country :name (name :op "China"))
Span 3-4:  collaborate => collaborate-01
Span 28-29:  commercialization => commercialize-01
Span 15-16:  coordinate => coordinate-01
Span 9-10:  government => (government-organization :ARG0-of govern-01)
Span 23-24:  high => high
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 12-13:  mainland => mainland
Span 17-18:  programs => program
Span 22-23:  promote => promote-02
Span 26-27:  research => research-01
Span 19-20:  research => research-01
Span 10-11:  sectors => sector
Span 25-26:  tech => technology
Span 31-32:  technology => technology
Span 16-17:  training => train-01
Span 32-33:  transfer => transfer-01
Span 5-6:  universities => university
Span 2-3:  universities => university

Langrangian relaxation converged after 78 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(0),transfer,transfer-01,false), Span(31,32,List(1),technology,technology,false), Span(30,31,List(2),and,and,false), Span(28,29,List(3),commercialization,commercialize-01,false), Span(26,27,List(4),research,research-01,false), Span(25,26,List(5),tech,technology,false), Span(23,24,List(6),high,high,false), Span(22,23,List(7),promote,promote-02,false), Span(20,21,List(8),centers,center,false), Span(19,20,List(9),research,research-01,false), Span(18,19,List(10),and,and,false), Span(17,18,List(11),programs,program,false), Span(16,17,List(12),training,train-01,false), Span(15,16,List(13),coordinate,coordinate-01,false), Span(13,14,List(16, 15, 14),China,(country :name (name :op "China")),false), Span(12,13,List(17),mainland,mainland,false), Span(10,11,List(18),sectors,sector,false), Span(9,10,List(20, 19),government,(government-organization :ARG0-of govern-01),false), Span(8,9,List(21),and,and,false), Span(7,8,List(22),businesses,business,false), Span(5,6,List(23),universities,university,false), Span(3,4,List(24),collaborate,collaborate-01,false), Span(2,3,List(25),universities,university,false), Span(0,2,List(29, 28, 27, 26),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> and, 5 -> technology, 27 -> name, 12 -> train-01, 8 -> center, 15 -> name, 21 -> and, 18 -> sector, 24 -> collaborate-01, 7 -> promote-02, 1 -> technology, 17 -> mainland, 23 -> university, 26 -> city, 4 -> research-01, 11 -> program, 14 -> country, 29 -> "Hong", 20 -> govern-01, 28 -> "Kong", 6 -> high, 9 -> research-01, 0 -> transfer-01, 22 -> business, 16 -> "China", 19 -> government-organization, 10 -> and, 3 -> commercialize-01, 25 -> university, 13 -> coordinate-01),Map(n -> name, h -> high, t4 -> train-01, t -> transfer-01, b -> business, p2 -> program, c4 -> country, a3 -> and, u2 -> university, s -> sector, m -> mainland, t3 -> technology, g2 -> govern-01, r2 -> research-01, p -> promote-02, g -> government-organization, a -> and, c3 -> coordinate-01, c6 -> city, t2 -> technology, a2 -> and, r -> research-01, c -> commercialize-01, u -> university, n2 -> name, c2 -> center, c5 -> collaborate-01))),[Ljava.lang.String;@48a663e9,Annotation([Ljava.lang.String;@777d0bc3,[Ljava.lang.String;@3178219a,[Ljava.lang.String;@2d85fb64),Annotation([Ljava.lang.String;@56476c16,[Ljava.lang.String;@497b560e,[Ledu.cmu.lti.nlp.amr.Dependency;@39ffda4a),Annotation([Ljava.lang.String;@3ba348ca,[Ljava.lang.String;@56e9a474,[Ljava.lang.String;@45b15381),Annotation([Ljava.lang.String;@2dbfcf7,[Ljava.lang.String;@239f017e,[Ledu.cmu.lti.nlp.amr.Entity;@38cedb7d))
AMR:
(a / and, op, b / business)
(a / and, op, r / research-01)
(a / and, op, s / sector)
(a / and, op, u2 / university)
(a2 / and, op, c2 / center)
(a2 / and, op, p2 / program)
(a3 / and, op, c / commercialize-01)
(a3 / and, op, t / transfer-01)
(c / commercialize-01, ARG1, r2 / research-01)
(c3 / coordinate-01, ARG1, a2 / and)
(c4 / country, mod, m / mainland)
(c4 / country, name, n / name)
(c5 / collaborate-01, ARG0, u / university)
(c5 / collaborate-01, ARG1, u2 / university)
(c5 / collaborate-01, ARG2, c3 / coordinate-01)
(c6 / city, name, n2 / name)
(g2 / govern-01, ARG0, g / government-organization)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p / promote-02, ARG0, a2 / and)
(p / promote-02, ARG1, a3 / and)
(p2 / program, mod, t4 / train-01)
(r / research-01, ARG1, t3 / technology)
(s / sector, mod, g / government-organization)
(t / transfer-01, ARG1, t2 / technology)
(t3 / technology, mod, h / high)
(u2 / university, mod, c4 / country)
(u2 / university, mod, c6 / city)

Decoded in 3,688,556 microseconds
Sentence: In 2004 Hong Kong tertiary institutes actively contributed to improved relations between Hong Kong and mainland China in the research and development of high technology.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 1-2:  2004 => (date-entity :year 2004)
Span 6-7:  actively => active
Span 20-21:  and => and
Span 14-15:  and => and
Span 11-12:  between => between
Span 16-17:  China => (country :name (name :op "China"))
Span 7-8:  contributed => contribute-01
Span 21-22:  development => develop-02
Span 23-24:  high => high
Span 12-14:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 2-4:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 9-10:  improved => improve-01
Span 5-6:  institutes => institute
Span 15-16:  mainland => mainland
Span 10-11:  relations => relation
Span 19-20:  research => research-01
Span 24-25:  technology => technology
Span 4-5:  tertiary => tertiary

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(24,25,List(0),technology,technology,false), Span(23,24,List(1),high,high,false), Span(21,22,List(2),development,develop-02,false), Span(20,21,List(3),and,and,false), Span(19,20,List(4),research,research-01,false), Span(16,17,List(7, 6, 5),China,(country :name (name :op "China")),false), Span(15,16,List(8),mainland,mainland,false), Span(14,15,List(9),and,and,false), Span(12,14,List(13, 12, 11, 10),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(11,12,List(14),between,between,false), Span(10,11,List(15),relations,relation,false), Span(9,10,List(16),improved,improve-01,false), Span(7,8,List(17),contributed,contribute-01,false), Span(6,7,List(18),actively,active,false), Span(5,6,List(19),institutes,institute,false), Span(4,5,List(20),tertiary,tertiary,false), Span(2,4,List(24, 23, 22, 21),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(1,2,List(26, 25),2004,(date-entity :year 2004),false)),Map(2 -> develop-02, 5 -> country, 12 -> "Kong", 8 -> mainland, 15 -> relation, 21 -> city, 18 -> active, 24 -> "Hong", 7 -> "China", 1 -> high, 17 -> contribute-01, 23 -> "Kong", 26 -> 2004, 4 -> research-01, 11 -> name, 14 -> between, 20 -> tertiary, 6 -> name, 9 -> and, 0 -> technology, 22 -> name, 16 -> improve-01, 19 -> institute, 10 -> city, 3 -> and, 25 -> date-entity, 13 -> "Hong"),Map(n -> name, h -> high, 2 -> 2004, t -> technology, b -> between, c4 -> city, a3 -> active, d -> develop-02, m -> mainland, r2 -> relation, n3 -> name, c3 -> contribute-01, a -> and, d2 -> date-entity, t2 -> tertiary, i2 -> institute, i -> improve-01, r -> research-01, a2 -> and, c -> country, c2 -> city, n2 -> name))),[Ljava.lang.String;@772caabe,Annotation([Ljava.lang.String;@2acdcce8,[Ljava.lang.String;@7102ac3e,[Ljava.lang.String;@3f598450),Annotation([Ljava.lang.String;@2db2a05f,[Ljava.lang.String;@695c938d,[Ledu.cmu.lti.nlp.amr.Dependency;@d5bb1c4),Annotation([Ljava.lang.String;@7ed3df3b,[Ljava.lang.String;@465b38e6,[Ljava.lang.String;@4b960b5b),Annotation([Ljava.lang.String;@1b13467c,[Ljava.lang.String;@7bd96822,[Ledu.cmu.lti.nlp.amr.Entity;@64dae3b7))
AMR:
(a / and, op, d / develop-02)
(a2 / and, op, c2 / city)
(a2 / and, op, d / develop-02)
(b / between, op, c / country)
(b / between, op, c2 / city)
(b / between, op, c4 / city)
(c / country, mod, m / mainland)
(c / country, name, n / name)
(c2 / city, name, n2 / name)
(c3 / contribute-01, ARG0, i2 / institute)
(c3 / contribute-01, ARG1, a3 / active)
(c3 / contribute-01, ARG2, i / improve-01)
(c3 / contribute-01, time, d2 / date-entity)
(c4 / city, name, n3 / name)
(d / develop-02, ARG1, t / technology)
(d2 / date-entity, year, 2 / 2004)
(i / improve-01, ARG1, r2 / relation)
(i2 / institute, mod, t2 / tertiary)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(r / research-01, ARG1, t / technology)
(r2 / relation, mod, b / between)
(t / technology, mod, h / high)

Decoded in 414,032 microseconds
Sentence: Hong Kong universities have collaborated with tertiary education, business and government sectors of mainland China to direct training programs and research centers to promote research commercialization and technology transfer.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 27-28:  and => and
Span 20-21:  and => and
Span 10-11:  and => and
Span 9-10:  business => business
Span 22-23:  centers => center
Span 15-16:  China => (country :name (name :op "China"))
Span 4-5:  collaborated => collaborate-01
Span 26-27:  commercialization => commercialize-01
Span 17-18:  direct => direct-01
Span 7-8:  education => education
Span 11-12:  government => (government-organization :ARG0-of govern-01)
Span 0-2:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 14-15:  mainland => mainland
Span 19-20:  programs => program
Span 24-25:  promote => promote-02
Span 25-26:  research => research-01
Span 21-22:  research => research-01
Span 12-13:  sectors => sector
Span 28-29:  technology => technology
Span 6-7:  tertiary => tertiary
Span 18-19:  training => train-01
Span 29-30:  transfer => transfer-01
Span 2-3:  universities => university

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),transfer,transfer-01,false), Span(28,29,List(1),technology,technology,false), Span(27,28,List(2),and,and,false), Span(26,27,List(3),commercialization,commercialize-01,false), Span(25,26,List(4),research,research-01,false), Span(24,25,List(5),promote,promote-02,false), Span(22,23,List(6),centers,center,false), Span(21,22,List(7),research,research-01,false), Span(20,21,List(8),and,and,false), Span(19,20,List(9),programs,program,false), Span(18,19,List(10),training,train-01,false), Span(17,18,List(11),direct,direct-01,false), Span(15,16,List(14, 13, 12),China,(country :name (name :op "China")),false), Span(14,15,List(15),mainland,mainland,false), Span(12,13,List(16),sectors,sector,false), Span(11,12,List(18, 17),government,(government-organization :ARG0-of govern-01),false), Span(10,11,List(19),and,and,false), Span(9,10,List(20),business,business,false), Span(7,8,List(21),education,education,false), Span(6,7,List(22),tertiary,tertiary,false), Span(4,5,List(23),collaborated,collaborate-01,false), Span(2,3,List(24),universities,university,false), Span(0,2,List(28, 27, 26, 25),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(2 -> and, 5 -> promote-02, 27 -> "Kong", 12 -> country, 8 -> and, 15 -> mainland, 21 -> education, 18 -> govern-01, 24 -> university, 7 -> research-01, 1 -> technology, 17 -> government-organization, 23 -> collaborate-01, 26 -> name, 4 -> research-01, 11 -> direct-01, 14 -> "China", 20 -> business, 28 -> "Hong", 6 -> center, 9 -> program, 0 -> transfer-01, 22 -> tertiary, 16 -> sector, 19 -> and, 10 -> train-01, 3 -> commercialize-01, 25 -> city, 13 -> name),Map(e -> education, n -> name, t4 -> tertiary, t -> transfer-01, b -> business, p2 -> program, a3 -> and, c4 -> collaborate-01, s -> sector, d -> direct-01, m -> mainland, t3 -> train-01, g2 -> govern-01, r2 -> research-01, p -> promote-02, g -> government-organization, c3 -> country, a -> and, t2 -> technology, a2 -> and, r -> research-01, c -> commercialize-01, u -> university, n2 -> name, c2 -> center, c5 -> city))),[Ljava.lang.String;@1fedf0a4,Annotation([Ljava.lang.String;@1e4c6583,[Ljava.lang.String;@2ee48610,[Ljava.lang.String;@1d901f20),Annotation([Ljava.lang.String;@6d08b4e6,[Ljava.lang.String;@1015a4b9,[Ledu.cmu.lti.nlp.amr.Dependency;@1acb74ad),Annotation([Ljava.lang.String;@7bf01cb,[Ljava.lang.String;@2f382a5e,[Ljava.lang.String;@12b5736c),Annotation([Ljava.lang.String;@539a138b,[Ljava.lang.String;@2cd4e16a,[Ledu.cmu.lti.nlp.amr.Entity;@42505474))
AMR:
(a / and, mod, c3 / country)
(a / and, op, s / sector)
(a2 / and, op, c2 / center)
(a2 / and, op, p2 / program)
(a3 / and, op, c / commercialize-01)
(a3 / and, op, t / transfer-01)
(c / commercialize-01, ARG1, r2 / research-01)
(c3 / country, mod, m / mainland)
(c3 / country, name, n / name)
(c4 / collaborate-01, ARG0, u / university)
(c4 / collaborate-01, ARG1, a / and)
(c4 / collaborate-01, ARG2, d / direct-01)
(c5 / city, name, n2 / name)
(d / direct-01, ARG1, b / business)
(d / direct-01, ARG2, p / promote-02)
(g2 / govern-01, ARG0, g / government-organization)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(p / promote-02, ARG0, a2 / and)
(p / promote-02, ARG1, a3 / and)
(p2 / program, mod, t3 / train-01)
(r / research-01, ARG1, a / and)
(r2 / research-01, ARG1, e / education)
(s / sector, mod, g / government-organization)
(t / transfer-01, ARG1, t2 / technology)
(t3 / train-01, ARG1, t4 / tertiary)
(u / university, mod, c5 / city)

Decoded in 1,851,605 microseconds
Sentence: In June 2004 Hong Kong Polytechnic University (PolyU) joined national university science and technology park of the Virtual University Park in Shenzhen, China becoming the first tertiary institution of Hong Kong to establish research centers and training facilities in mainland China.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "Polytechnic" :op "University"))
NER Entity: (organization :name (name :op "PolyU"))
NER Entity: (organization :name (name :op "Virtual" :op "University" :op "Park"))
NER Entity: (country :name (name :op "Shenzhen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Shenzhen"))
NER Entity: (organization :name (name :op "PolyU"))
Spans:
Span 38-39:  and => and
Span 14-15:  and => and
Span 26-27:  becoming => become-01
Span 37-38:  centers => center
Span 43-44:  China => (country :name (name :op "China"))
Span 25-26:  China => (country :name (name :op "China"))
Span 35-36:  establish => establish-01
Span 40-41:  facilities => facility
Span 32-34:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 3-5:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 30-31:  institution => institution
Span 10-11:  joined => join-01
Span 1-3:  June 2004 => (date-entity :month 6 :year 2004)
Span 42-43:  mainland => mainland
Span 11-12:  national => nation
Span 16-17:  park => park
Span 5-7:  Polytechnic University => (organization :name (name :op "Polytechnic" :op "University"))
Span 8-9:  PolyU => (university :name (name :op "PolyU"))
Span 36-37:  research => research-01
Span 13-14:  science => science
Span 23-24:  Shenzhen => (city :name (name :op "Shenzhen"))
Span 15-16:  technology => technology
Span 29-30:  tertiary => tertiary
Span 39-40:  training => train-01
Span 12-13:  university => university
Span 19-22:  Virtual University Park => (event :name (name :op "Park" :op "University" :op "Virtual"))

Langrangian relaxation converged after 75 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(43,44,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(42,43,List(3),mainland,mainland,false), Span(40,41,List(4),facilities,facility,false), Span(39,40,List(5),training,train-01,false), Span(38,39,List(6),and,and,false), Span(37,38,List(7),centers,center,false), Span(36,37,List(8),research,research-01,false), Span(35,36,List(9),establish,establish-01,false), Span(32,34,List(13, 12, 11, 10),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(30,31,List(14),institution,institution,false), Span(29,30,List(15),tertiary,tertiary,false), Span(26,27,List(16),becoming,become-01,false), Span(25,26,List(19, 18, 17),China,(country :name (name :op "China")),false), Span(23,24,List(22, 21, 20),Shenzhen,(city :name (name :op "Shenzhen")),false), Span(19,22,List(27, 26, 25, 24, 23),Virtual University Park,(event :name (name :op "Park" :op "University" :op "Virtual")),false), Span(16,17,List(28),park,park,false), Span(15,16,List(29),technology,technology,false), Span(14,15,List(30),and,and,false), Span(13,14,List(31),science,science,false), Span(12,13,List(32),university,university,false), Span(11,12,List(33),national,nation,false), Span(10,11,List(34),joined,join-01,false), Span(8,9,List(37, 36, 35),PolyU,(university :name (name :op "PolyU")),false), Span(5,7,List(41, 40, 39, 38),Polytechnic University,(organization :name (name :op "Polytechnic" :op "University")),false), Span(3,5,List(45, 44, 43, 42),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(1,3,List(48, 47, 46),June 2004,(date-entity :month 6 :year 2004),false)),Map(30 -> and, 39 -> name, 45 -> "Hong", 2 -> "China", 5 -> train-01, 48 -> 2004, 33 -> nation, 27 -> "Virtual", 12 -> "Kong", 8 -> research-01, 15 -> tertiary, 42 -> city, 36 -> name, 21 -> name, 18 -> name, 24 -> name, 35 -> university, 41 -> "University", 7 -> center, 17 -> country, 1 -> name, 44 -> "Kong", 23 -> event, 38 -> organization, 47 -> 6, 4 -> facility, 26 -> "University", 11 -> name, 32 -> university, 14 -> institution, 20 -> city, 29 -> technology, 46 -> date-entity, 34 -> join-01, 6 -> and, 28 -> park, 40 -> "Polytechnic", 0 -> country, 9 -> establish-01, 43 -> name, 22 -> "Shenzhen", 16 -> become-01, 37 -> "PolyU", 19 -> "China", 3 -> mainland, 10 -> city, 25 -> "Park", 31 -> science, 13 -> "Hong"),Map(e -> establish-01, n -> name, 2 -> 2004, t -> train-01, b -> become-01, n7 -> name, e2 -> event, j -> join-01, c4 -> country, n4 -> name, u2 -> university, s -> science, d -> date-entity, m -> mainland, t3 -> technology, p -> park, c3 -> city, a -> and, n3 -> name, n6 -> nation, c6 -> city, n9 -> name, t2 -> tertiary, i -> institution, r -> research-01, a2 -> and, 6 -> 6, c -> country, u -> university, n8 -> name, f -> facility, o -> organization, n2 -> name, c2 -> center, c5 -> city, n5 -> name))),[Ljava.lang.String;@7b477141,Annotation([Ljava.lang.String;@784223e9,[Ljava.lang.String;@7316523a,[Ljava.lang.String;@33a55bd8),Annotation([Ljava.lang.String;@73a8e994,[Ljava.lang.String;@1a1cc163,[Ledu.cmu.lti.nlp.amr.Dependency;@5b5ac798),Annotation([Ljava.lang.String;@42383cb0,[Ljava.lang.String;@7668892a,[Ljava.lang.String;@a83495d),Annotation([Ljava.lang.String;@7e83992,[Ljava.lang.String;@4364863,[Ledu.cmu.lti.nlp.amr.Entity;@3625a016))
AMR:
(a / and, op, f / facility)
(a2 / and, op, c2 / center)
(b / become-01, ARG1, o / organization)
(b / become-01, ARG2, i / institution)
(c / country, mod, m / mainland)
(c / country, name, n / name)
(c2 / center, mod, r / research-01)
(c3 / city, name, n2 / name)
(c4 / country, name, n3 / name)
(c4 / country, part, m / mainland)
(c5 / city, location, c4 / country)
(c5 / city, name, n4 / name)
(c6 / city, name, n9 / name)
(d / date-entity, month, 6 / 6)
(d / date-entity, year, 2 / 2004)
(e / establish-01, ARG0, c3 / city)
(e / establish-01, ARG1, a2 / and)
(e / establish-01, ARG2, a / and)
(e / establish-01, location, m / mainland)
(e2 / event, name, n5 / name)
(f / facility, mod, t / train-01)
(i / institution, mod, t2 / tertiary)
(j / join-01, ARG0, a2 / and)
(j / join-01, ARG1, p / park)
(j / join-01, ARG6, u2 / university)
(j / join-01, mod, b / become-01)
(j / join-01, time, d / date-entity)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "China")
(n4 / name, op, "Shenzhen")
(n5 / name, op, "Park")
(n5 / name, op, "University")
(n5 / name, op, "Virtual")
(n7 / name, op, "PolyU")
(n8 / name, op, "Polytechnic")
(n8 / name, op, "University")
(n9 / name, op, "Hong")
(n9 / name, op, "Kong")
(o / organization, location, c6 / city)
(o / organization, name, n8 / name)
(p / park, mod, n6 / nation)
(p / park, mod, s / science)
(p / park, mod, t3 / technology)
(p / park, mod, u / university)
(p / park, poss, e2 / event)
(u2 / university, name, n7 / name)

Decoded in 6,566,653 microseconds
Sentence: President of PolyU Poon Chung-kwong stated that both public and private sectors in Hong Kong are strengthening connections with mainland China in various areas.

NER Entity: (organization :name (name :op "PolyU"))
NER Entity: (person :name (name :op "Poon" :op "Chung" :op "-" :op "kwong"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "PolyU"))
Spans:
Span 11-12:  and => and
Span 25-26:  areas => area
Span 9-10:  both => both
Span 22-23:  China => (country :name (name :op "China"))
Span 19-20:  connections => connection
Span 15-17:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 21-22:  mainland => mainland
Span 2-3:  PolyU => (university :name (name :op "PolyU"))
Span 3-7:  Poon Chung - kwong => (person :name (name :op "Chung-kwong" :op "Poon"))
Span 0-1:  President => (have-org-role-91 :ARG2 president)
Span 12-13:  private => private
Span 10-11:  public => public
Span 13-15:  sectors in => (country :name (name :op "Hong" :op "Kong"))
Span 7-8:  stated => state-01
Span 18-19:  strengthening => strengthen-01
Span 24-25:  various => various

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(25,26,List(0),areas,area,false), Span(24,25,List(1),various,various,false), Span(22,23,List(4, 3, 2),China,(country :name (name :op "China")),false), Span(21,22,List(5),mainland,mainland,false), Span(19,20,List(6),connections,connection,false), Span(18,19,List(7),strengthening,strengthen-01,false), Span(15,17,List(11, 10, 9, 8),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(13,15,List(15, 14, 13, 12),sectors in,(country :name (name :op "Hong" :op "Kong")),false), Span(12,13,List(16),private,private,false), Span(11,12,List(17),and,and,false), Span(10,11,List(18),public,public,false), Span(9,10,List(19),both,both,false), Span(7,8,List(20),stated,state-01,false), Span(3,7,List(24, 23, 22, 21),Poon Chung - kwong,(person :name (name :op "Chung-kwong" :op "Poon")),false), Span(2,3,List(27, 26, 25),PolyU,(university :name (name :op "PolyU")),false), Span(0,1,List(29, 28),President,(have-org-role-91 :ARG2 president),false)),Map(2 -> country, 5 -> mainland, 27 -> "PolyU", 12 -> country, 8 -> city, 15 -> "Kong", 21 -> person, 18 -> public, 24 -> "Poon", 7 -> strengthen-01, 1 -> various, 17 -> and, 23 -> "Chung-kwong", 26 -> name, 4 -> "China", 11 -> "Hong", 14 -> "Hong", 29 -> president, 20 -> state-01, 28 -> have-org-role-91, 6 -> connection, 9 -> name, 0 -> area, 22 -> name, 16 -> private, 19 -> both, 10 -> "Kong", 3 -> name, 25 -> university, 13 -> name),Map(n -> name, h -> have-org-role-91, s2 -> state-01, b -> both, p2 -> public, n4 -> name, c4 -> country, s -> strengthen-01, v -> various, m -> mainland, p -> private, a -> area, c3 -> city, n3 -> name, p4 -> president, a2 -> and, c -> country, u -> university, p3 -> person, c2 -> connection, n2 -> name, n5 -> name))),[Ljava.lang.String;@267cde2e,Annotation([Ljava.lang.String;@609e57da,[Ljava.lang.String;@56dd6efa,[Ljava.lang.String;@4d634127),Annotation([Ljava.lang.String;@d2e6b0b,[Ljava.lang.String;@1f1cddf3,[Ledu.cmu.lti.nlp.amr.Dependency;@228bda54),Annotation([Ljava.lang.String;@75b6dd5b,[Ljava.lang.String;@b3e86d5,[Ljava.lang.String;@72b43104),Annotation([Ljava.lang.String;@e111c7c,[Ljava.lang.String;@4d0e54e0,[Ledu.cmu.lti.nlp.amr.Entity;@32f96bba))
AMR:
(a / area, mod, v / various)
(a2 / and, op, c3 / city)
(a2 / and, op, c4 / country)
(b / both, op, p / private)
(b / both, op, p2 / public)
(c / country, mod, m / mainland)
(c / country, name, n / name)
(c2 / connection, prep-with, c / country)
(c2 / connection, topic, a / area)
(c3 / city, name, n2 / name)
(c4 / country, mod, b / both)
(c4 / country, name, n3 / name)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, u / university)
(h / have-org-role-91, ARG2, p4 / president)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "Hong")
(n3 / name, op, "Kong")
(n4 / name, op, "Chung-kwong")
(n4 / name, op, "Poon")
(n5 / name, op, "PolyU")
(p3 / person, name, n4 / name)
(s / strengthen-01, ARG0, c4 / country)
(s / strengthen-01, ARG1, c2 / connection)
(s2 / state-01, ARG0, p3 / person)
(s2 / state-01, ARG1, s / strengthen-01)
(u / university, name, n5 / name)

Decoded in 830,440 microseconds
Sentence: Poon stated that cooperation between Hong Kong and mainland China will facilitate universities to more effectively promote technology transfer and human resources development in the mainland creating positive results for both Hong Kong and China.

NER Entity: (person :name (name :op "Poon"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Poon"))
Spans:
Span 33-34:  and => and
Span 19-20:  and => and
Span 7-8:  and => and
Span 4-5:  between => between
Span 30-31:  both => both
Span 34-35:  China => (country :name (name :op "China"))
Span 9-10:  China => (country :name (name :op "China"))
Span 3-4:  cooperation => cooperate-01
Span 26-27:  creating => create-01
Span 22-23:  development => develop-02
Span 15-16:  effectively => effective
Span 11-12:  facilitate => facilitate-01
Span 31-33:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 5-7:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 20-21:  human => human
Span 25-26:  mainland => mainland
Span 8-9:  mainland => mainland
Span 14-15:  more => more
Span 0-1:  Poon => (person :name (name :op "Poon"))
Span 27-28:  positive => positive
Span 16-17:  promote => promote-02
Span 21-22:  resources => resource
Span 28-29:  results => result
Span 1-2:  stated => state-01
Span 17-18:  technology => technology
Span 18-19:  transfer => transfer-01
Span 12-13:  universities => university

Langrangian relaxation converged after 67 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(34,35,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(33,34,List(3),and,and,false), Span(31,33,List(7, 6, 5, 4),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(30,31,List(8),both,both,false), Span(28,29,List(9),results,result,false), Span(27,28,List(10),positive,positive,false), Span(26,27,List(11),creating,create-01,false), Span(25,26,List(12),mainland,mainland,false), Span(22,23,List(13),development,develop-02,false), Span(21,22,List(14),resources,resource,false), Span(20,21,List(15),human,human,false), Span(19,20,List(16),and,and,false), Span(18,19,List(17),transfer,transfer-01,false), Span(17,18,List(18),technology,technology,false), Span(16,17,List(19),promote,promote-02,false), Span(15,16,List(20),effectively,effective,false), Span(14,15,List(21),more,more,false), Span(12,13,List(22),universities,university,false), Span(11,12,List(23),facilitate,facilitate-01,false), Span(9,10,List(26, 25, 24),China,(country :name (name :op "China")),false), Span(8,9,List(27),mainland,mainland,false), Span(7,8,List(28),and,and,false), Span(5,7,List(32, 31, 30, 29),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(4,5,List(33),between,between,false), Span(3,4,List(34),cooperation,cooperate-01,false), Span(1,2,List(35),stated,state-01,false), Span(0,1,List(38, 37, 36),Poon,(person :name (name :op "Poon")),false)),Map(30 -> name, 2 -> "China", 5 -> name, 33 -> between, 27 -> mainland, 12 -> mainland, 8 -> both, 15 -> human, 36 -> person, 21 -> more, 18 -> technology, 24 -> country, 35 -> state-01, 7 -> "Hong", 1 -> name, 17 -> transfer-01, 23 -> facilitate-01, 38 -> "Poon", 26 -> "China", 4 -> city, 11 -> create-01, 32 -> "Hong", 14 -> resource, 29 -> city, 20 -> effective, 34 -> cooperate-01, 28 -> and, 6 -> "Kong", 9 -> result, 0 -> country, 22 -> university, 16 -> and, 37 -> name, 19 -> promote-02, 10 -> positive, 3 -> and, 31 -> "Kong", 25 -> name, 13 -> develop-02),Map(e -> effective, m3 -> mainland, n -> name, h -> human, t -> transfer-01, b -> both, b2 -> between, m2 -> more, p2 -> promote-02, n4 -> name, c4 -> country, a3 -> and, s -> state-01, d -> develop-02, m -> mainland, r2 -> resource, p -> positive, c3 -> create-01, a -> and, n3 -> name, c6 -> cooperate-01, t2 -> technology, r -> result, a2 -> and, c -> country, u -> university, f -> facilitate-01, p3 -> person, n2 -> name, c2 -> city, n5 -> name, c5 -> city))),[Ljava.lang.String;@611640f0,Annotation([Ljava.lang.String;@67e25252,[Ljava.lang.String;@58f4b31a,[Ljava.lang.String;@21a9a705),Annotation([Ljava.lang.String;@72eb6200,[Ljava.lang.String;@76ececd,[Ledu.cmu.lti.nlp.amr.Dependency;@7affc159),Annotation([Ljava.lang.String;@1682c08c,[Ljava.lang.String;@3fd05b3e,[Ljava.lang.String;@4eb9f2af),Annotation([Ljava.lang.String;@4a481728,[Ljava.lang.String;@4ace284d,[Ledu.cmu.lti.nlp.amr.Entity;@77fa9381))
AMR:
(a / and, op, c / country)
(a / and, op, c2 / city)
(a2 / and, op, t / transfer-01)
(b2 / between, op, c4 / country)
(b2 / between, op, c5 / city)
(c / country, name, n / name)
(c2 / city, mod, b / both)
(c2 / city, name, n2 / name)
(c3 / create-01, ARG0, m / mainland)
(c3 / create-01, ARG1, r / result)
(c3 / create-01, ARG2, a / and)
(c3 / create-01, ARG3, a3 / and)
(c4 / country, name, n3 / name)
(c5 / city, name, n4 / name)
(c6 / cooperate-01, ARG1, c4 / country)
(d / develop-02, ARG1, r2 / resource)
(d / develop-02, location, m3 / mainland)
(e / effective, degree, m2 / more)
(f / facilitate-01, ARG0, c6 / cooperate-01)
(f / facilitate-01, ARG1, p2 / promote-02)
(n / name, op, "China")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "China")
(n4 / name, op, "Hong")
(n4 / name, op, "Kong")
(n5 / name, op, "Poon")
(p2 / promote-02, ARG0, u / university)
(p2 / promote-02, ARG1, a2 / and)
(p2 / promote-02, manner, e / effective)
(p2 / promote-02, mod, c3 / create-01)
(p3 / person, name, n5 / name)
(r / result, mod, p / positive)
(r2 / resource, mod, h / human)
(s / state-01, ARG0, p3 / person)
(s / state-01, ARG1, f / facilitate-01)
(t / transfer-01, ARG1, t2 / technology)
(t / transfer-01, location, m3 / mainland)

Decoded in 5,253,689 microseconds
Sentence: City University of Hong Kong (CityU) and the University of Science and Technology of China (USTC) in Anhui province signed an agreement in June to jointly establish a high level joint research center in Suzhou.

NER Entity: (organization :name (name :op "City" :op "University" :op "of" :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "CityU"))
NER Entity: (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))
NER Entity: (organization :name (name :op "USTC"))
NER Entity: (country :name (name :op "Anhui"))
NER Entity: (country :name (name :op "Suzhou"))
NER Entity: (country :name (name :op "Suzhou"))
NER Entity: (country :name (name :op "Anhui"))
NER Entity: (organization :name (name :op "CityU"))
Spans:
Span 25-26:  agreement => agree-01
Span 8-9:  and => and
Span 21-22:  Anhui => (name :op "Anhui")
Span 36-37:  center => center
Span 0-5:  City University of Hong Kong => (university :name (name :op "Kong" :op "Hong" :op "of" :op "University" :op "City"))
Span 6-7:  CityU => city
Span 30-31:  establish => establish-01
Span 32-33:  high => high
Span 34-35:  joint => joint
Span 29-30:  jointly => joint
Span 27-28:  June => (date-entity :month 6)
Span 33-34:  level => level
Span 22-23:  province => province
Span 35-36:  research => research-01
Span 23-24:  signed => sign-02
Span 38-39:  Suzhou => (name :op "Suzhou")
Span 10-17:  University of Science and Technology of China => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(38,39,List(1, 0),Suzhou,(name :op "Suzhou"),false), Span(36,37,List(2),center,center,false), Span(35,36,List(3),research,research-01,false), Span(34,35,List(4),joint,joint,false), Span(33,34,List(5),level,level,false), Span(32,33,List(6),high,high,false), Span(30,31,List(7),establish,establish-01,false), Span(29,30,List(8),jointly,joint,false), Span(27,28,List(10, 9),June,(date-entity :month 6),false), Span(25,26,List(11),agreement,agree-01,false), Span(23,24,List(12),signed,sign-02,false), Span(22,23,List(13),province,province,false), Span(21,22,List(15, 14),Anhui,(name :op "Anhui"),false), Span(10,17,List(24, 23, 22, 21, 20, 19, 18, 17, 16),University of Science and Technology of China,(organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China")),false), Span(8,9,List(25),and,and,false), Span(6,7,List(26),CityU,city,false), Span(0,5,List(33, 32, 31, 30, 29, 28, 27),City University of Hong Kong,(university :name (name :op "Kong" :op "Hong" :op "of" :op "University" :op "City")),false)),Map(30 -> "Hong", 2 -> center, 5 -> level, 33 -> "City", 27 -> university, 12 -> sign-02, 8 -> joint, 15 -> "Anhui", 21 -> "and", 18 -> "University", 24 -> "China", 7 -> establish-01, 1 -> "Suzhou", 17 -> name, 23 -> "of", 26 -> city, 4 -> joint, 11 -> agree-01, 32 -> "University", 14 -> name, 29 -> "Kong", 20 -> "Science", 28 -> name, 6 -> high, 9 -> date-entity, 0 -> name, 22 -> "Technology", 16 -> organization, 19 -> "of", 10 -> 6, 3 -> research-01, 31 -> "of", 25 -> and, 13 -> province),Map(e -> establish-01, n -> name, h -> high, n4 -> name, j -> joint, j2 -> joint, s -> sign-02, d -> date-entity, p -> province, n3 -> name, a -> agree-01, a2 -> and, r -> research-01, c -> center, 6 -> 6, u -> university, l -> level, o -> organization, c2 -> city, n2 -> name))),[Ljava.lang.String;@76d72b5b,Annotation([Ljava.lang.String;@7cac93fe,[Ljava.lang.String;@479b5066,[Ljava.lang.String;@64deb58f),Annotation([Ljava.lang.String;@2b1cd7bc,[Ljava.lang.String;@33379242,[Ledu.cmu.lti.nlp.amr.Dependency;@2e32fc22),Annotation([Ljava.lang.String;@3f5156a6,[Ljava.lang.String;@72bdd7c7,[Ljava.lang.String;@7d17ee50),Annotation([Ljava.lang.String;@44fdce3c,[Ljava.lang.String;@712c5463,[Ledu.cmu.lti.nlp.amr.Entity;@6d33a66e))
AMR:
(a / agree-01, ARG1, e / establish-01)
(a2 / and, op, u / university)
(c / center, mod, r / research-01)
(c2 / city, name, n / name)
(d / date-entity, month, 6 / 6)
(e / establish-01, ARG1, c / center)
(e / establish-01, location, c2 / city)
(e / establish-01, manner, j / joint)
(l / level, mod, h / high)
(n / name, op, "Suzhou")
(n2 / name, op, "Anhui")
(n3 / name, op, "China")
(n3 / name, op, "Science")
(n3 / name, op, "Technology")
(n3 / name, op, "University")
(n3 / name, op, "and")
(n3 / name, op, "of")
(n3 / name, op, "of")
(n4 / name, op, "City")
(n4 / name, op, "Hong")
(n4 / name, op, "Kong")
(n4 / name, op, "University")
(n4 / name, op, "of")
(o / organization, location, p / province)
(o / organization, name, n3 / name)
(p / province, name, n2 / name)
(r / research-01, ARG1, l / level)
(r / research-01, mod, j2 / joint)
(s / sign-02, ARG0, u / university)
(s / sign-02, ARG1, a / agree-01)
(s / sign-02, ARG2, o / organization)
(s / sign-02, time, d / date-entity)
(u / university, name, n4 / name)

Decoded in 766,215 microseconds
Sentence: The University of Science and Technology of China is a university established by the Chinese Academy of Sciences (CAS).

NER Entity: (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (organization :name (name :op "Academy" :op "of" :op "Sciences"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 15-18:  Academy of Sciences => (organization :name (name :op "Academy" :op "of" :op "Sciences"))
Span 14-15:  Chinese => (country :name (name :op "China"))
Span 11-12:  established => establish-01
Span 10-11:  university => university
Span 1-8:  University of Science and Technology of China => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China"))

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(15,18,List(4, 3, 2, 1, 0),Academy of Sciences,(organization :name (name :op "Academy" :op "of" :op "Sciences")),false), Span(14,15,List(7, 6, 5),Chinese,(country :name (name :op "China")),false), Span(11,12,List(8),established,establish-01,false), Span(10,11,List(9),university,university,false), Span(1,8,List(18, 17, 16, 15, 14, 13, 12, 11, 10),University of Science and Technology of China,(organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology" :op "of" :op "China")),false)),Map(2 -> "Academy", 5 -> country, 12 -> "University", 15 -> "and", 8 -> establish-01, 18 -> "China", 7 -> "China", 17 -> "of", 1 -> name, 4 -> "Sciences", 11 -> name, 14 -> "Science", 6 -> name, 0 -> organization, 9 -> university, 16 -> "Technology", 3 -> "of", 10 -> organization, 13 -> "of"),Map(e -> establish-01, n -> name, n3 -> name, o2 -> organization, u -> university, c -> country, o -> organization, n2 -> name))),[Ljava.lang.String;@2f14b0f6,Annotation([Ljava.lang.String;@5b20706,[Ljava.lang.String;@16aed49f,[Ljava.lang.String;@66de00f2),Annotation([Ljava.lang.String;@6c479fdf,[Ljava.lang.String;@79d82f66,[Ledu.cmu.lti.nlp.amr.Dependency;@19b206ee),Annotation([Ljava.lang.String;@ffd4cba,[Ljava.lang.String;@5f1483fd,[Ljava.lang.String;@670f2466),Annotation([Ljava.lang.String;@6e03db1f,[Ljava.lang.String;@bfec2f9,[Ledu.cmu.lti.nlp.amr.Entity;@708eb310))
AMR:
(c / country, name, n2 / name)
(e / establish-01, ARG0, o / organization)
(e / establish-01, ARG1, u / university)
(n / name, op, "Academy")
(n / name, op, "Sciences")
(n / name, op, "of")
(n2 / name, op, "China")
(n3 / name, op, "China")
(n3 / name, op, "Science")
(n3 / name, op, "Technology")
(n3 / name, op, "University")
(n3 / name, op, "and")
(n3 / name, op, "of")
(n3 / name, op, "of")
(o / organization, name, n / name)
(o / organization, part, c / country)
(o2 / organization, name, n3 / name)
(u / university, domain, o2 / organization)

Decoded in 297,783 microseconds
Sentence: The agreement is based on the principle of mutually beneficial collaboration in which both universities complement each other's strengths in working together on joint research projects, supervision and teaching of research students and in administering professional training opportunities.

Spans:
Span 36-37:  administering => administer-01
Span 1-2:  agreement => agree-01
Span 34-35:  and => and
Span 29-30:  and => and
Span 3-4:  based => base-01
Span 9-10:  beneficial => benefit-01
Span 13-14:  both => both
Span 10-11:  collaboration => collaborate-01
Span 15-16:  complement => complement-01
Span 16-17:  each => each
Span 24-25:  joint => joint
Span 8-9:  mutually => mutual
Span 39-40:  opportunities => opportunity
Span 17-18:  other => other
Span 6-7:  principle => principle
Span 37-38:  professional => professional
Span 26-27:  projects => project
Span 32-33:  research => research-01
Span 25-26:  research => research-01
Span 19-20:  strengths => strength
Span 33-34:  students => (person :ARG0-of study-01)
Span 28-29:  supervision => supervise-01
Span 30-31:  teaching => teach-01
Span 22-23:  together => together
Span 38-39:  training => train-01
Span 14-15:  universities => university
Span 21-22:  working => work-01

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(39,40,List(0),opportunities,opportunity,false), Span(38,39,List(1),training,train-01,false), Span(37,38,List(2),professional,professional,false), Span(36,37,List(3),administering,administer-01,false), Span(34,35,List(4),and,and,false), Span(33,34,List(6, 5),students,(person :ARG0-of study-01),false), Span(32,33,List(7),research,research-01,false), Span(30,31,List(8),teaching,teach-01,false), Span(29,30,List(9),and,and,false), Span(28,29,List(10),supervision,supervise-01,false), Span(26,27,List(11),projects,project,false), Span(25,26,List(12),research,research-01,false), Span(24,25,List(13),joint,joint,false), Span(22,23,List(14),together,together,false), Span(21,22,List(15),working,work-01,false), Span(19,20,List(16),strengths,strength,false), Span(17,18,List(17),other,other,false), Span(16,17,List(18),each,each,false), Span(15,16,List(19),complement,complement-01,false), Span(14,15,List(20),universities,university,false), Span(13,14,List(21),both,both,false), Span(10,11,List(22),collaboration,collaborate-01,false), Span(9,10,List(23),beneficial,benefit-01,false), Span(8,9,List(24),mutually,mutual,false), Span(6,7,List(25),principle,principle,false), Span(3,4,List(26),based,base-01,false), Span(1,2,List(27),agreement,agree-01,false)),Map(2 -> professional, 5 -> person, 27 -> agree-01, 12 -> research-01, 8 -> teach-01, 15 -> work-01, 21 -> both, 18 -> each, 24 -> mutual, 7 -> research-01, 1 -> train-01, 17 -> other, 23 -> benefit-01, 26 -> base-01, 4 -> and, 11 -> project, 14 -> together, 20 -> university, 6 -> study-01, 9 -> and, 0 -> opportunity, 22 -> collaborate-01, 16 -> strength, 19 -> complement-01, 10 -> supervise-01, 3 -> administer-01, 25 -> principle, 13 -> joint),Map(e -> each, b3 -> base-01, w -> work-01, s2 -> supervise-01, t -> train-01, b -> both, b2 -> benefit-01, p2 -> person, a3 -> and, j -> joint, s -> study-01, m -> mutual, t3 -> together, r2 -> research-01, p -> professional, a -> administer-01, p4 -> principle, o2 -> other, t2 -> teach-01, r -> research-01, a2 -> and, c -> complement-01, s3 -> strength, u -> university, o -> opportunity, p3 -> project, c2 -> collaborate-01, a4 -> agree-01))),[Ljava.lang.String;@6ebc9573,Annotation([Ljava.lang.String;@1e977098,[Ljava.lang.String;@630390b9,[Ljava.lang.String;@6690b9fa),Annotation([Ljava.lang.String;@6c8dbf56,[Ljava.lang.String;@493b01ef,[Ledu.cmu.lti.nlp.amr.Dependency;@36c2d629),Annotation([Ljava.lang.String;@55fee662,[Ljava.lang.String;@54089484,[Ljava.lang.String;@45adc393),Annotation([Ljava.lang.String;@65fe2691,[Ljava.lang.String;@479111ba,[Ledu.cmu.lti.nlp.amr.Entity;@57ad1178))
AMR:
(a / administer-01, ARG1, o / opportunity)
(a2 / and, op, s2 / supervise-01)
(a3 / and, op, p3 / project)
(a3 / and, op, s2 / supervise-01)
(b2 / benefit-01, ARG1, m / mutual)
(b3 / base-01, ARG1, a4 / agree-01)
(b3 / base-01, ARG2, p4 / principle)
(c / complement-01, ARG1, u / university)
(c / complement-01, ARG2, s3 / strength)
(c / complement-01, purpose, w / work-01)
(c2 / collaborate-01, ARG1, a2 / and)
(c2 / collaborate-01, mod, b2 / benefit-01)
(o / opportunity, mod, t / train-01)
(p2 / person, mod, r2 / research-01)
(p3 / project, mod, r / research-01)
(p4 / principle, mod, c2 / collaborate-01)
(r / research-01, mod, j / joint)
(s / study-01, ARG0, p2 / person)
(s / study-01, ARG1, p / professional)
(s2 / supervise-01, ARG1, p2 / person)
(s3 / strength, poss, o2 / other)
(t / train-01, ARG1, o2 / other)
(t2 / teach-01, ARG2, p2 / person)
(u / university, mod, b / both)
(u / university, mod, e / each)
(w / work-01, ARG1, a3 / and)
(w / work-01, mod, t3 / together)

Decoded in 1,665,451 microseconds
Sentence: In addition to partnering with education institutes Hong Kong universities have also joined large-scale high technology exchange programs in mainland China in order to enhance communication between the mainland and Hong Kong in the discipline.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Hong" :op "Kong"))
Spans:
Span 11-12:  also => also
Span 28-29:  between => between
Span 22-23:  China => (country :name (name :op "China"))
Span 27-28:  communication => communicate-01
Span 36-37:  discipline => discipline
Span 5-6:  education => education
Span 26-27:  enhance => enhance-01
Span 18-19:  exchange => exchange-01
Span 16-17:  high => high
Span 32-34:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 7-9:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 6-7:  institutes => institute
Span 12-13:  joined => join-01
Span 13-14:  large => large
Span 21-22:  mainland => mainland
Span 30-32:  mainland and => (country :name (name :op "Hong" :op "Kong"))
Span 3-4:  partnering => partner-01
Span 19-20:  programs => program
Span 15-16:  scale => scale
Span 17-18:  technology => technology
Span 9-10:  universities => university

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(36,37,List(0),discipline,discipline,false), Span(32,34,List(4, 3, 2, 1),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(30,32,List(8, 7, 6, 5),mainland and,(country :name (name :op "Hong" :op "Kong")),false), Span(28,29,List(9),between,between,false), Span(27,28,List(10),communication,communicate-01,false), Span(26,27,List(11),enhance,enhance-01,false), Span(22,23,List(14, 13, 12),China,(country :name (name :op "China")),false), Span(21,22,List(15),mainland,mainland,false), Span(19,20,List(16),programs,program,false), Span(18,19,List(17),exchange,exchange-01,false), Span(17,18,List(18),technology,technology,false), Span(16,17,List(19),high,high,false), Span(15,16,List(20),scale,scale,false), Span(13,14,List(21),large,large,false), Span(12,13,List(22),joined,join-01,false), Span(11,12,List(23),also,also,false), Span(9,10,List(24),universities,university,false), Span(7,9,List(28, 27, 26, 25),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false), Span(6,7,List(29),institutes,institute,false), Span(5,6,List(30),education,education,false), Span(3,4,List(31),partnering,partner-01,false)),Map(30 -> education, 2 -> name, 5 -> country, 27 -> "Kong", 12 -> country, 8 -> "Kong", 15 -> mainland, 21 -> large, 18 -> technology, 24 -> university, 7 -> "Hong", 1 -> city, 17 -> exchange-01, 23 -> also, 26 -> name, 4 -> "Hong", 11 -> enhance-01, 14 -> "China", 29 -> institute, 20 -> scale, 28 -> "Hong", 6 -> name, 9 -> between, 0 -> discipline, 22 -> join-01, 16 -> program, 19 -> high, 10 -> communicate-01, 3 -> "Kong", 31 -> partner-01, 25 -> city, 13 -> name),Map(e -> enhance-01, n -> name, h -> high, t -> technology, b -> between, e2 -> exchange-01, p2 -> partner-01, c4 -> country, j -> join-01, n4 -> name, s -> scale, m -> mainland, d -> discipline, p -> program, n3 -> name, c3 -> communicate-01, a -> also, i -> institute, c -> city, l -> large, u -> university, e3 -> education, n2 -> name, c2 -> country, c5 -> city))),[Ljava.lang.String;@7c37f145,Annotation([Ljava.lang.String;@68699afc,[Ljava.lang.String;@273a5a8a,[Ljava.lang.String;@1823b9c4),Annotation([Ljava.lang.String;@5b5dce5c,[Ljava.lang.String;@7f4701b1,[Ledu.cmu.lti.nlp.amr.Dependency;@adcfad9),Annotation([Ljava.lang.String;@fb49fdf,[Ljava.lang.String;@3a2e9f5b,[Ljava.lang.String;@7da34b26),Annotation([Ljava.lang.String;@10c47c79,[Ljava.lang.String;@3b2553d9,[Ledu.cmu.lti.nlp.amr.Entity;@753fd7a1))
AMR:
(b / between, op, c / city)
(b / between, op, c2 / country)
(b / between, op, c5 / city)
(b / between, op, m / mainland)
(c / city, name, n / name)
(c2 / country, name, n2 / name)
(c3 / communicate-01, ARG1, c2 / country)
(c3 / communicate-01, topic, d / discipline)
(c4 / country, name, n3 / name)
(c5 / city, name, n4 / name)
(e / enhance-01, ARG1, c3 / communicate-01)
(e2 / exchange-01, ARG1, t / technology)
(i / institute, mod, e3 / education)
(j / join-01, ARG0, u / university)
(j / join-01, ARG1, p / program)
(j / join-01, ARG2, p2 / partner-01)
(j / join-01, mod, a / also)
(j / join-01, purpose, e / enhance-01)
(n / name, op, "Hong")
(n / name, op, "Kong")
(n2 / name, op, "Hong")
(n2 / name, op, "Kong")
(n3 / name, op, "China")
(n4 / name, op, "Hong")
(n4 / name, op, "Kong")
(p / program, location, c4 / country)
(p / program, mod, s / scale)
(p / program, topic, e2 / exchange-01)
(p2 / partner-01, ARG1, i / institute)
(s / scale, mod, l / large)
(t / technology, mod, h / high)

Decoded in 1,375,442 microseconds
Sentence: The Hong Kong University of Science and Technology (HKUST) demonstrated its latest achievements in research and development at the 6th annual China Hi-Tech Fair (CHTF) held in Shenzhen in October 2004.

NER Entity: (country :name (name :op "Hong" :op "Kong"))
NER Entity: (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology"))
NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Shenzhen"))
NER Entity: (country :name (name :op "Shenzhen"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 14-15:  achievements => (thing :ARG1-of achieve-01)
Span 17-18:  and => and
Span 23-24:  China => (country :name (name :op "China"))
Span 11-12:  demonstrated => demonstrate-01
Span 18-19:  development => develop-02
Span 31-32:  held => hold-04
Span 24-25:  Hi => (thing :name (name :op "Hi"))
Span 9-10:  HKUST => (university :name (name :op "HKUST"))
Span 1-3:  Hong Kong => (city :name (name :op "Kong" :op "Hong"))
Span 13-14:  latest => (late :degree most)
Span 35-37:  October 2004 => (date-entity :month 10 :year 2004)
Span 16-17:  research => research-01
Span 33-34:  Shenzhen => (city :name (name :op "Shenzhen"))
Span 3-8:  University of Science and Technology => (organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology"))

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(35,37,List(2, 1, 0),October 2004,(date-entity :month 10 :year 2004),false), Span(33,34,List(5, 4, 3),Shenzhen,(city :name (name :op "Shenzhen")),false), Span(31,32,List(6),held,hold-04,false), Span(24,25,List(9, 8, 7),Hi,(thing :name (name :op "Hi")),false), Span(23,24,List(12, 11, 10),China,(country :name (name :op "China")),false), Span(18,19,List(13),development,develop-02,false), Span(17,18,List(14),and,and,false), Span(16,17,List(15),research,research-01,false), Span(14,15,List(17, 16),achievements,(thing :ARG1-of achieve-01),false), Span(13,14,List(19, 18),latest,(late :degree most),false), Span(11,12,List(20),demonstrated,demonstrate-01,false), Span(9,10,List(23, 22, 21),HKUST,(university :name (name :op "HKUST")),false), Span(3,8,List(30, 29, 28, 27, 26, 25, 24),University of Science and Technology,(organization :name (name :op "University" :op "of" :op "Science" :op "and" :op "Technology")),false), Span(1,3,List(34, 33, 32, 31),Hong Kong,(city :name (name :op "Kong" :op "Hong")),false)),Map(30 -> "Technology", 2 -> 2004, 5 -> "Shenzhen", 33 -> "Kong", 27 -> "of", 12 -> "China", 8 -> name, 15 -> research-01, 21 -> university, 18 -> late, 24 -> organization, 7 -> thing, 1 -> 10, 17 -> achieve-01, 23 -> "HKUST", 26 -> "University", 4 -> name, 11 -> name, 32 -> name, 14 -> and, 29 -> "and", 20 -> demonstrate-01, 34 -> "Hong", 28 -> "Science", 6 -> hold-04, 9 -> "Hi", 0 -> date-entity, 22 -> name, 16 -> thing, 19 -> most, 10 -> country, 3 -> city, 31 -> city, 25 -> name, 13 -> develop-02),Map(n -> name, h -> hold-04, 2 -> 2004, t -> thing, d3 -> demonstrate-01, n4 -> name, m -> most, d -> date-entity, 1 -> 10, c3 -> city, n3 -> name, a -> and, n6 -> name, d2 -> develop-02, t2 -> thing, a2 -> achieve-01, r -> research-01, c -> city, u -> university, l -> late, o -> organization, n2 -> name, c2 -> country, n5 -> name))),[Ljava.lang.String;@12a2585b,Annotation([Ljava.lang.String;@21b6c9c2,[Ljava.lang.String;@309cedb6,[Ljava.lang.String;@3b95a6db),Annotation([Ljava.lang.String;@3bf54172,[Ljava.lang.String;@2c9a6717,[Ledu.cmu.lti.nlp.amr.Dependency;@7b3cde6f),Annotation([Ljava.lang.String;@6d091cad,[Ljava.lang.String;@7c663eaf,[Ljava.lang.String;@3bb5ceb),Annotation([Ljava.lang.String;@1e692555,[Ljava.lang.String;@3ba0ae41,[Ledu.cmu.lti.nlp.amr.Entity;@76fe6cdc))
AMR:
(a / and, op, d2 / develop-02)
(a2 / achieve-01, ARG0, o / organization)
(a2 / achieve-01, ARG1, t2 / thing)
(a2 / achieve-01, topic, a / and)
(c / city, name, n / name)
(c2 / country, name, n3 / name)
(c3 / city, name, n6 / name)
(d / date-entity, month, 1 / 10)
(d / date-entity, year, 2 / 2004)
(d2 / develop-02, ARG0, t / thing)
(d3 / demonstrate-01, ARG0, o / organization)
(d3 / demonstrate-01, ARG1, t2 / thing)
(d3 / demonstrate-01, ARG6, u / university)
(h / hold-04, ARG1, d3 / demonstrate-01)
(h / hold-04, location, c / city)
(h / hold-04, time, d / date-entity)
(l / late, degree, m / most)
(n / name, op, "Shenzhen")
(n2 / name, op, "Hi")
(n3 / name, op, "China")
(n4 / name, op, "HKUST")
(n5 / name, op, "Science")
(n5 / name, op, "Technology")
(n5 / name, op, "University")
(n5 / name, op, "and")
(n5 / name, op, "of")
(n6 / name, op, "Hong")
(n6 / name, op, "Kong")
(o / organization, location, c3 / city)
(o / organization, name, n5 / name)
(r / research-01, ARG1, o / organization)
(t / thing, mod, c2 / country)
(t / thing, name, n2 / name)
(t2 / thing, mod, l / late)
(u / university, name, n4 / name)

Decoded in 1,869,407 microseconds
Sentence: HKUST demonstrated more than 30 new technologies and products covering a wide range of technologies including nanotechnology, multimedia, logistics and RFID technology, advanced manufacturing, and biotechnology.

NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 4-5:  30 => 30
Span 25-26:  advanced => advance-01
Span 28-29:  and => and
Span 21-22:  and => and
Span 7-8:  and => and
Span 29-30:  biotechnology => biotechnology
Span 9-10:  covering => cover-01
Span 1-2:  demonstrated => demonstrate-01
Span 0-1:  HKUST => (university :name (name :op "HKUST"))
Span 15-16:  including => include-91
Span 20-21:  logistics => logistics
Span 26-27:  manufacturing => manufacture-01
Span 2-3:  more => more
Span 18-19:  multimedia => multimedia
Span 16-17:  nanotechnology => nanotechnology
Span 5-6:  new => new
Span 8-9:  products => product
Span 12-13:  range => range
Span 22-23:  RFID => (name :op "RFID")
Span 14-15:  technologies => technology
Span 6-7:  technologies => technology
Span 23-24:  technology => technology
Span 11-12:  wide => wide

Langrangian relaxation converged after 62 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(29,30,List(0),biotechnology,biotechnology,false), Span(28,29,List(1),and,and,false), Span(26,27,List(2),manufacturing,manufacture-01,false), Span(25,26,List(3),advanced,advance-01,false), Span(23,24,List(4),technology,technology,false), Span(22,23,List(6, 5),RFID,(name :op "RFID"),false), Span(21,22,List(7),and,and,false), Span(20,21,List(8),logistics,logistics,false), Span(18,19,List(9),multimedia,multimedia,false), Span(16,17,List(10),nanotechnology,nanotechnology,false), Span(15,16,List(11),including,include-91,false), Span(14,15,List(12),technologies,technology,false), Span(12,13,List(13),range,range,false), Span(11,12,List(14),wide,wide,false), Span(9,10,List(15),covering,cover-01,false), Span(8,9,List(16),products,product,false), Span(7,8,List(17),and,and,false), Span(6,7,List(18),technologies,technology,false), Span(5,6,List(19),new,new,false), Span(4,5,List(20),30,30,false), Span(2,3,List(21),more,more,false), Span(1,2,List(22),demonstrated,demonstrate-01,false), Span(0,1,List(25, 24, 23),HKUST,(university :name (name :op "HKUST")),false)),Map(2 -> manufacture-01, 5 -> name, 12 -> technology, 8 -> logistics, 15 -> cover-01, 21 -> more, 18 -> technology, 24 -> name, 7 -> and, 1 -> and, 17 -> and, 23 -> university, 4 -> technology, 11 -> include-91, 14 -> wide, 20 -> 30, 6 -> "RFID", 9 -> multimedia, 0 -> biotechnology, 22 -> demonstrate-01, 16 -> product, 19 -> new, 10 -> nanotechnology, 3 -> advance-01, 25 -> "HKUST", 13 -> range),Map(m3 -> more, w -> wide, n -> name, b -> biotechnology, t -> technology, m2 -> multimedia, n4 -> name, a3 -> and, d -> demonstrate-01, m -> manufacture-01, t3 -> technology, p -> product, n3 -> new, a -> and, t2 -> technology, a2 -> advance-01, i -> include-91, r -> range, c -> cover-01, u -> university, l -> logistics, 3 -> 30, n2 -> nanotechnology, a4 -> and))),[Ljava.lang.String;@2ffb3aec,Annotation([Ljava.lang.String;@786ff1cb,[Ljava.lang.String;@46039a21,[Ljava.lang.String;@431e86b1),Annotation([Ljava.lang.String;@35c4e864,[Ljava.lang.String;@32a2a6be,[Ledu.cmu.lti.nlp.amr.Dependency;@682af059),Annotation([Ljava.lang.String;@5f36c8e3,[Ljava.lang.String;@4da39ca9,[Ljava.lang.String;@6a9344f5),Annotation([Ljava.lang.String;@5584d9c6,[Ljava.lang.String;@3c9c6245,[Ledu.cmu.lti.nlp.amr.Entity;@6d0be7ab))
AMR:
(a / and, op, m / manufacture-01)
(a / and, op, t / technology)
(a2 / advance-01, ARG1, m / manufacture-01)
(a3 / and, op, b / biotechnology)
(a3 / and, op, l / logistics)
(a3 / and, op, m / manufacture-01)
(a3 / and, op, m2 / multimedia)
(a3 / and, op, n2 / nanotechnology)
(a3 / and, op, t3 / technology)
(a4 / and, op, t / technology)
(a4 / and, quant, m3 / more)
(c / cover-01, ARG0, a4 / and)
(c / cover-01, ARG1, r / range)
(d / demonstrate-01, ARG0, u / university)
(d / demonstrate-01, ARG1, a4 / and)
(i / include-91, ARG1, a3 / and)
(i / include-91, ARG2, t2 / technology)
(m / manufacture-01, ARG1, 3 / 30)
(n / name, op, "RFID")
(n4 / name, op, "HKUST")
(p / product, mod, n3 / new)
(r / range, mod, w / wide)
(t / technology, mod, n3 / new)
(t3 / technology, name, n / name)
(u / university, name, n4 / name)

Decoded in 2,424,963 microseconds
Sentence: HKUST also collaborated with a prominent mainland manufacturer on the development of a nanomaterial-based high-capacity lithium battery.

NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 1-2:  also => also
Span 15-16:  based => base-01
Span 20-21:  battery => battery
Span 18-19:  capacity => capable-41
Span 2-3:  collaborated => collaborate-01
Span 10-11:  development => develop-02
Span 16-17:  high => high
Span 0-1:  HKUST => (university :name (name :op "HKUST"))
Span 19-20:  lithium => lithium
Span 6-7:  mainland => mainland
Span 7-8:  manufacturer => manufacture-01
Span 13-14:  nanomaterial => nanomaterial
Span 5-6:  prominent => prominent

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(20,21,List(0),battery,battery,false), Span(19,20,List(1),lithium,lithium,false), Span(18,19,List(2),capacity,capable-41,false), Span(16,17,List(3),high,high,false), Span(15,16,List(4),based,base-01,false), Span(13,14,List(5),nanomaterial,nanomaterial,false), Span(10,11,List(6),development,develop-02,false), Span(7,8,List(7),manufacturer,manufacture-01,false), Span(6,7,List(8),mainland,mainland,false), Span(5,6,List(9),prominent,prominent,false), Span(2,3,List(10),collaborated,collaborate-01,false), Span(1,2,List(11),also,also,false), Span(0,1,List(14, 13, 12),HKUST,(university :name (name :op "HKUST")),false)),Map(2 -> capable-41, 5 -> nanomaterial, 12 -> university, 8 -> mainland, 7 -> manufacture-01, 1 -> lithium, 4 -> base-01, 11 -> also, 14 -> "HKUST", 6 -> develop-02, 0 -> battery, 9 -> prominent, 3 -> high, 10 -> collaborate-01, 13 -> name),Map(n -> nanomaterial, h -> high, b -> battery, b2 -> base-01, m2 -> mainland, d -> develop-02, m -> manufacture-01, p -> prominent, a -> also, c -> capable-41, l -> lithium, u -> university, n2 -> name, c2 -> collaborate-01))),[Ljava.lang.String;@1d4fb213,Annotation([Ljava.lang.String;@6ef60295,[Ljava.lang.String;@3127cb44,[Ljava.lang.String;@3234474),Annotation([Ljava.lang.String;@631cb129,[Ljava.lang.String;@3d20e575,[Ledu.cmu.lti.nlp.amr.Dependency;@3252747e),Annotation([Ljava.lang.String;@2b4b96a4,[Ljava.lang.String;@2dd8ff1d,[Ljava.lang.String;@17e9bc9e),Annotation([Ljava.lang.String;@36b9cb99,[Ljava.lang.String;@4130955c,[Ledu.cmu.lti.nlp.amr.Entity;@2bfaba70))
AMR:
(b2 / base-01, ARG0, p / prominent)
(b2 / base-01, ARG1, b / battery)
(b2 / base-01, ARG2, n / nanomaterial)
(c / capable-41, ARG1, b / battery)
(c / capable-41, ARG2, h / high)
(c2 / collaborate-01, ARG0, u / university)
(c2 / collaborate-01, ARG2, d / develop-02)
(c2 / collaborate-01, mod, a / also)
(d / develop-02, ARG1, b / battery)
(l / lithium, consist, b / battery)
(m / manufacture-01, ARG1, l / lithium)
(m / manufacture-01, ARG2, m2 / mainland)
(n2 / name, op, "HKUST")
(u / university, name, n2 / name)

Decoded in 634,990 microseconds
Sentence: This collaboration is the most recent in a series of successful technology transfer agreements reached by HKUST.

NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 13-14:  agreements => agree-01
Span 1-2:  collaboration => collaborate-01
Span 16-17:  HKUST => (university :name (name :op "HKUST"))
Span 4-5:  most => most
Span 14-15:  reached => reach-01
Span 5-6:  recent => recent
Span 8-9:  series => series
Span 10-11:  successful => succeed-01
Span 11-12:  technology => technology
Span 0-1:  This => this
Span 12-13:  transfer => transfer-01

Langrangian relaxation converged after 21 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(16,17,List(2, 1, 0),HKUST,(university :name (name :op "HKUST")),false), Span(14,15,List(3),reached,reach-01,false), Span(13,14,List(4),agreements,agree-01,false), Span(12,13,List(5),transfer,transfer-01,false), Span(11,12,List(6),technology,technology,false), Span(10,11,List(7),successful,succeed-01,false), Span(8,9,List(8),series,series,false), Span(5,6,List(9),recent,recent,false), Span(4,5,List(10),most,most,false), Span(1,2,List(11),collaboration,collaborate-01,false), Span(0,1,List(12),This,this,false)),Map(2 -> "HKUST", 5 -> transfer-01, 12 -> this, 8 -> series, 7 -> succeed-01, 1 -> name, 4 -> agree-01, 11 -> collaborate-01, 6 -> technology, 0 -> university, 9 -> recent, 3 -> reach-01, 10 -> most),Map(n -> name, s2 -> series, t -> transfer-01, s -> succeed-01, m -> most, t3 -> this, r2 -> recent, a -> agree-01, t2 -> technology, r -> reach-01, c -> collaborate-01, u -> university))),[Ljava.lang.String;@71adfedd,Annotation([Ljava.lang.String;@9301672,[Ljava.lang.String;@4ceff87d,[Ljava.lang.String;@3238e2aa),Annotation([Ljava.lang.String;@2c7db926,[Ljava.lang.String;@2577a95d,[Ledu.cmu.lti.nlp.amr.Dependency;@1668919e),Annotation([Ljava.lang.String;@63300c4b,[Ljava.lang.String;@22c53d82,[Ljava.lang.String;@3a6045c6),Annotation([Ljava.lang.String;@68d6d775,[Ljava.lang.String;@b67cc70,[Ledu.cmu.lti.nlp.amr.Entity;@45c9b3))
AMR:
(a / agree-01, ARG1, t / transfer-01)
(c / collaborate-01, ARG1, m / most)
(c / collaborate-01, mod, t3 / this)
(c / collaborate-01, time, r2 / recent)
(n / name, op, "HKUST")
(r / reach-01, ARG0, u / university)
(r / reach-01, ARG1, a / agree-01)
(r2 / recent, condition, t2 / technology)
(s / succeed-01, ARG1, a / agree-01)
(s2 / series, mod, a / agree-01)
(t / transfer-01, ARG1, t2 / technology)
(u / university, name, n / name)

Decoded in 293,566 microseconds
Sentence: HKUST President Paul Ching-Wu Chu stated --

NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (person :name (name :op "Paul" :op "Ching" :op "-" :op "Wu" :op "Chu"))
NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 0-1:  HKUST => (university :name (name :op "HKUST"))
Span 2-7:  Paul Ching - Wu Chu => (person :name (name :op "Chu" :op "Ching-Wu" :op "Paul"))
Span 1-2:  President => (have-org-role-91 :ARG2 president)
Span 7-8:  stated => state-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(7,8,List(0),stated,state-01,false), Span(2,7,List(5, 4, 3, 2, 1),Paul Ching - Wu Chu,(person :name (name :op "Chu" :op "Ching-Wu" :op "Paul")),false), Span(1,2,List(7, 6),President,(have-org-role-91 :ARG2 president),false), Span(0,1,List(10, 9, 8),HKUST,(university :name (name :op "HKUST")),false)),Map(2 -> name, 5 -> "Paul", 8 -> university, 7 -> president, 1 -> person, 4 -> "Ching-Wu", 6 -> have-org-role-91, 9 -> name, 0 -> state-01, 10 -> "HKUST", 3 -> "Chu"),Map(n -> name, h -> have-org-role-91, p2 -> president, s -> state-01, p -> person, u -> university, n2 -> name))),[Ljava.lang.String;@38b3f208,Annotation([Ljava.lang.String;@6680f714,[Ljava.lang.String;@53b1a3f8,[Ljava.lang.String;@7d97e06c),Annotation([Ljava.lang.String;@5a936e64,[Ljava.lang.String;@3b4a1a75,[Ledu.cmu.lti.nlp.amr.Dependency;@65bad087),Annotation([Ljava.lang.String;@276cc8dc,[Ljava.lang.String;@66cd621b,[Ljava.lang.String;@d3f4505),Annotation([Ljava.lang.String;@3eb292cd,[Ljava.lang.String;@7fd987ef,[Ledu.cmu.lti.nlp.amr.Entity;@7209ffb5))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, u / university)
(h / have-org-role-91, ARG2, p2 / president)
(n / name, op, "Ching-Wu")
(n / name, op, "Chu")
(n / name, op, "Paul")
(n2 / name, op, "HKUST")
(p / person, name, n / name)
(s / state-01, ARG0, p / person)
(u / university, name, n2 / name)

Decoded in 27,152 microseconds
Sentence: HKUST is increasing funding to research new technologies required by industry in the Pearl River Delta.

NER Entity: (organization :name (name :op "HKUST"))
NER Entity: (country :name (name :op "Pearl" :op "River" :op "Delta"))
NER Entity: (organization :name (name :op "HKUST"))
Spans:
Span 3-4:  funding => fund-01
Span 0-1:  HKUST => (university :name (name :op "HKUST"))
Span 2-3:  increasing => increase-01
Span 10-11:  industry => industry
Span 6-7:  new => new
Span 13-16:  Pearl River Delta => (country-region :name (name :op "Delta" :op "River" :op "Pearl"))
Span 8-9:  required => require-01
Span 5-6:  research => research-01
Span 7-8:  technologies => technology

Langrangian relaxation converged after 7 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(13,16,List(4, 3, 2, 1, 0),Pearl River Delta,(country-region :name (name :op "Delta" :op "River" :op "Pearl")),false), Span(10,11,List(5),industry,industry,false), Span(8,9,List(6),required,require-01,false), Span(7,8,List(7),technologies,technology,false), Span(6,7,List(8),new,new,false), Span(5,6,List(9),research,research-01,false), Span(3,4,List(10),funding,fund-01,false), Span(2,3,List(11),increasing,increase-01,false), Span(0,1,List(14, 13, 12),HKUST,(university :name (name :op "HKUST")),false)),Map(2 -> "Delta", 5 -> industry, 12 -> university, 8 -> new, 7 -> technology, 1 -> name, 4 -> "Pearl", 11 -> increase-01, 14 -> "HKUST", 6 -> require-01, 0 -> country-region, 9 -> research-01, 3 -> "River", 10 -> fund-01, 13 -> name),Map(n -> name, t -> technology, r2 -> research-01, n3 -> name, i2 -> increase-01, r -> require-01, i -> industry, u -> university, c -> country-region, f -> fund-01, n2 -> new))),[Ljava.lang.String;@5e99b9c,Annotation([Ljava.lang.String;@2fe74516,[Ljava.lang.String;@1c3259fa,[Ljava.lang.String;@217bf99e),Annotation([Ljava.lang.String;@6807a356,[Ljava.lang.String;@7ddd84b5,[Ledu.cmu.lti.nlp.amr.Dependency;@73aeef7d),Annotation([Ljava.lang.String;@d675f9f,[Ljava.lang.String;@58af5076,[Ljava.lang.String;@49469ffa),Annotation([Ljava.lang.String;@4d9754a8,[Ljava.lang.String;@7a3b7122,[Ledu.cmu.lti.nlp.amr.Entity;@58b5a2f3))
AMR:
(c / country-region, name, n / name)
(f / fund-01, ARG1, r2 / research-01)
(i / industry, location, c / country-region)
(i2 / increase-01, ARG0, u / university)
(i2 / increase-01, ARG1, f / fund-01)
(n / name, op, "Delta")
(n / name, op, "Pearl")
(n / name, op, "River")
(n3 / name, op, "HKUST")
(r / require-01, ARG0, i / industry)
(r / require-01, ARG1, t / technology)
(r2 / research-01, ARG1, t / technology)
(t / technology, mod, n2 / new)
(u / university, name, n3 / name)

Decoded in 133,679 microseconds
Sentence: The University will continue to leverage its extensive relationships with international research institutions and multi-national corporations to enhance the development of advanced technologies which can find immediate practical application in China.

NER Entity: (organization :name (name :op "University"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "China"))
NER Entity: (organization :name (name :op "University"))
Spans:
Span 23-24:  advanced => advance-01
Span 13-14:  and => and
Span 30-31:  application => apply-01
Span 26-27:  can => possible
Span 32-33:  China => (country :name (name :op "China"))
Span 3-4:  continue => continue-01
Span 17-18:  corporations => corporation
Span 21-22:  development => develop-02
Span 19-20:  enhance => enhance-01
Span 7-8:  extensive => extensive
Span 27-28:  find => find-01
Span 28-29:  immediate => immediate
Span 12-13:  institutions => institution
Span 10-11:  international => international
Span 5-6:  leverage => leverage-01
Span 16-17:  national => nation
Span 29-30:  practical => practical
Span 8-9:  relationships => relationship
Span 11-12:  research => research-01
Span 24-25:  technologies => technology
Span 1-2:  University => university

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Input(Some(Graph(null,ArrayBuffer(Span(32,33,List(2, 1, 0),China,(country :name (name :op "China")),false), Span(30,31,List(3),application,apply-01,false), Span(29,30,List(4),practical,practical,false), Span(28,29,List(5),immediate,immediate,false), Span(27,28,List(6),find,find-01,false), Span(26,27,List(7),can,possible,false), Span(24,25,List(8),technologies,technology,false), Span(23,24,List(9),advanced,advance-01,false), Span(21,22,List(10),development,develop-02,false), Span(19,20,List(11),enhance,enhance-01,false), Span(17,18,List(12),corporations,corporation,false), Span(16,17,List(13),national,nation,false), Span(13,14,List(14),and,and,false), Span(12,13,List(15),institutions,institution,false), Span(11,12,List(16),research,research-01,false), Span(10,11,List(17),international,international,false), Span(8,9,List(18),relationships,relationship,false), Span(7,8,List(19),extensive,extensive,false), Span(5,6,List(20),leverage,leverage-01,false), Span(3,4,List(21),continue,continue-01,false), Span(1,2,List(22),University,university,false)),Map(2 -> "China", 5 -> immediate, 12 -> corporation, 15 -> institution, 8 -> technology, 21 -> continue-01, 18 -> relationship, 7 -> possible, 17 -> international, 1 -> name, 4 -> practical, 11 -> enhance-01, 14 -> and, 20 -> leverage-01, 6 -> find-01, 22 -> university, 0 -> country, 9 -> advance-01, 16 -> research-01, 19 -> extensive, 3 -> apply-01, 10 -> develop-02, 13 -> nation),Map(e -> enhance-01, n -> name, t -> technology, e2 -> extensive, p2 -> possible, a3 -> and, d -> develop-02, i3 -> international, r2 -> relationship, p -> practical, c3 -> continue-01, a -> apply-01, i2 -> institution, r -> research-01, i -> immediate, a2 -> advance-01, c -> country, u -> university, l -> leverage-01, f -> find-01, c2 -> corporation, n2 -> nation))),[Ljava.lang.String;@25f15f50,Annotation([Ljava.lang.String;@52b46d52,[Ljava.lang.String;@7327a447,[Ljava.lang.String;@67022ea),Annotation([Ljava.lang.String;@2954f6ab,[Ljava.lang.String;@58fbd02e,[Ledu.cmu.lti.nlp.amr.Dependency;@163042ea),Annotation([Ljava.lang.String;@11d045b4,[Ljava.lang.String;@1fbf088b,[Ljava.lang.String;@1943c1f2),Annotation([Ljava.lang.String;@d70f722,[Ljava.lang.String;@1e1eeedd,[Ledu.cmu.lti.nlp.amr.Entity;@798256c5))
AMR:
(a / apply-01, ARG1, c / country)
(a / apply-01, mod, i / immediate)
(a / apply-01, mod, p / practical)
(a2 / advance-01, ARG1, t / technology)
(a3 / and, op, c2 / corporation)
(a3 / and, op, i2 / institution)
(c / country, name, n / name)
(c2 / corporation, mod, n2 / nation)
(c3 / continue-01, ARG0, u / university)
(c3 / continue-01, ARG1, l / leverage-01)
(d / develop-02, ARG1, t / technology)
(e / enhance-01, ARG0, u / university)
(e / enhance-01, ARG1, d / develop-02)
(f / find-01, ARG1, a / apply-01)
(i2 / institution, mod, i3 / international)
(l / leverage-01, ARG0, u / university)
(l / leverage-01, ARG1, r2 / relationship)
(n / name, op, "China")
(p2 / possible, domain, f / find-01)
(r / research-01, ARG1, a3 / and)
(r2 / relationship, mod, e2 / extensive)
(r2 / relationship, poss, u / university)
(r2 / relationship, prep-with, a3 / and)
(t / technology, mod, p2 / possible)

Decoded in 1,320,191 microseconds
--- Stage1 evaluation ---
Precision: NaN
Recall: NaN
F1: NaN
