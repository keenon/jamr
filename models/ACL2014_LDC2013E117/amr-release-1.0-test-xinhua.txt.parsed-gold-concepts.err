Stage1 features = List(bias, length, fromNERTagger, conceptGivenPhrase)
features = List(rootConcept, rootDependencyPathv1, bias, typeBias, self, fragHead, edgeCount, distance, logDistance, posPathv3, dependencyPathv4, conceptBigram)
connected = true
Reading weights
done
Sentence: Xinhua News Agency , Beijing , September 1st , by reporter Guojun Yang

Oracle Span 1:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 2:  Guojun Yang => (person :name (name :op "Yang" :op "Guojun"))
Oracle Span 3:  reporter => report-01
Oracle Span 4:  September => 9
Oracle Span 5:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Guojun" :op "Yang"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Span 11-13:  Guojun Yang => (person :name (name :op "Yang" :op "Guojun"))
Span 10-11:  reporter => report-01
Span 6-7:  September => 9
Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 11-13:  Guojun Yang => (person :name (name :op "Yang" :op "Guojun"))
Oracle Span 10-11:  reporter => report-01
Oracle Span 6-7:  September => 9
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Beijing	_	NNP	NNP	_	7	nn	_	_
6	,	_	,	,	_	7	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporter	_	NN	NN	_	13	nn	_	_
12	Guojun	_	NNP	NNP	_	13	nn	_	_
13	Yang	_	NNP	NNP	_	10	pobj	_	_

Oracle:
(c2 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Guojun")
(n2 / name, op, "Yang")
(n3 / name, op, "Beijing")
(p / person, name, n2 / name)
(p2 / publication, name, n / name)
(r / report-01, ARG0, p / person)

Input(Some(Graph((byline-91 :ARG0 (publication :name (name :op "Agency" :op "News" :op "Xinhua")) :ARG1 (person :ARG0-of report-01 :name (name :op "Yang" :op "Guojun")) :location (city :name (name :op "Beijing")) :time (date-entity :month 9 :day 1)),ArrayBuffer(Span(0,3,List(0, 1, 2, 3, 4),Xinhua News Agency,(publication :name (name :op "Agency" :op "News" :op "Xinhua")),false), Span(11,13,List(5, 6, 7, 8),Guojun Yang,(person :name (name :op "Yang" :op "Guojun")),false), Span(4,5,List(9, 10, 11),Beijing,(city :name (name :op "Beijing")),false), Span(10,11,List(12),reporter,report-01,false), Span(6,7,List(13),September,9,false)),Map(2 -> "Agency", 5 -> person, 12 -> report-01, 8 -> "Guojun", 7 -> "Yang", 1 -> name, 4 -> "Xinhua", 11 -> "Beijing", 6 -> name, 9 -> city, 0 -> publication, 10 -> name, 3 -> "News", 13 -> 9),Map(n -> name, p2 -> publication, p -> person, n3 -> name, r -> report-01, 9 -> 9, c2 -> city, n2 -> name))),[Ljava.lang.String;@7334aada,Annotation([Ljava.lang.String;@1d9b7cce,[Ljava.lang.String;@4d9e68d0,[Ljava.lang.String;@42e99e4a),Annotation([Ljava.lang.String;@14dd9eb7,[Ljava.lang.String;@52e6fdee,[Ledu.cmu.lti.nlp.amr.Dependency;@6c80d78a),Annotation([Ljava.lang.String;@62150f9e,[Ljava.lang.String;@1a451d4d,[Ljava.lang.String;@7fa98a66),Annotation([Ljava.lang.String;@15ff3e9e,[Ljava.lang.String;@5fdcaa40,[Ledu.cmu.lti.nlp.amr.Entity;@6dc17b83))
AMR:
(c2 / city, location, 9 / 9)
(c2 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Guojun")
(n2 / name, op, "Yang")
(n3 / name, op, "Beijing")
(p / person, name, n2 / name)
(p2 / publication, name, n / name)
(p2 / publication, poss, p / person)
(r / report-01, ARG0, p / person)
(r / report-01, ARG1, 9 / 9)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.3.0
Decoded in 636,413 microseconds
Sentence: When meeting with Chavalit Yoncayu , vice-premier and concurrent Minister of Domestic Affairs of Thailand , at the Diaoyutai State Guesthouse today , Huaqing Liu , vice-chairman of the Central Military Commission said that China placed a great deal of importance in developing friendship with the government , people and Armed Forces of Thailand , especially the economic and trade cooperation between the two countries .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  Armed Forces => (military :name (name :op "Forces" :op "Armed"))
Oracle Span 5:  Central Military Commission => (government-organization :name (name :op "Commission" :op "Military" :op "Central"))
Oracle Span 6:  chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 7:  Chavalit Yoncayu => (person :name (name :op "Yoncayu" :op "Chavalit"))
Oracle Span 8:  China => (country :name (name :op "China"))
Oracle Span 9:  concurrent => concurrent
Oracle Span 10:  cooperation => cooperate-01
Oracle Span 11:  countries => country
Oracle Span 12:  deal => deal
Oracle Span 13:  developing => develop-02
Oracle Span 14:  Diaoyutai State Guesthouse => (hotel :name (name :op "Guesthouse" :op "State" :op "Diaoyutai"))
Oracle Span 15:  Domestic Affairs => (name :op "Affairs" :op "Domestic")
Oracle Span 16:  economic => economy
Oracle Span 17:  especially => especially
Oracle Span 18:  friendship => friendship
Oracle Span 19:  government => government-organization
Oracle Span 20:  great => great
Oracle Span 21:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 22:  importance => importance
Oracle Span 23:  meeting => meet-03
Oracle Span 24:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 25:  placed => place-01
Oracle Span 26:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 27:  said => say-01
Oracle Span 28:  Thailand => (name :op "Thailand")
Oracle Span 29:  today => today
Oracle Span 30:  trade => trade-01
Oracle Span 31:  vice => vice
Oracle Span 32:  vice => vice
NER Entity: (person :name (name :op "Chavalit" :op "Yoncayu"))
NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (organization :name (name :op "Domestic" :op "Affairs" :op "of" :op "Thailand"))
NER Entity: (organization :name (name :op "Armed" :op "Forces" :op "of" :op "Thailand"))
Spans:
Span 9-10:  and => and
Span 53-54:  and => and
Span 62-63:  and => and
Span 54-56:  Armed Forces => (military :name (name :op "Forces" :op "Armed"))
Span 33-36:  Central Military Commission => (government-organization :name (name :op "Commission" :op "Military" :op "Central"))
Span 30-31:  chairman => (have-org-role-91 :ARG2 chairman)
Span 3-5:  Chavalit Yoncayu => (person :name (name :op "Yoncayu" :op "Chavalit"))
Span 38-39:  China => (country :name (name :op "China"))
Span 10-11:  concurrent => concurrent
Span 64-65:  cooperation => cooperate-01
Span 68-69:  countries => country
Span 42-43:  deal => deal
Span 46-47:  developing => develop-02
Span 20-23:  Diaoyutai State Guesthouse => (hotel :name (name :op "Guesthouse" :op "State" :op "Diaoyutai"))
Span 13-15:  Domestic Affairs => (name :op "Affairs" :op "Domestic")
Span 61-62:  economic => economy
Span 59-60:  especially => especially
Span 47-48:  friendship => friendship
Span 50-51:  government => government-organization
Span 41-42:  great => great
Span 25-27:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Span 44-45:  importance => importance
Span 1-2:  meeting => meet-03
Span 11-12:  Minister => (have-org-role-91 :ARG2 minister)
Span 39-40:  placed => place-01
Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Span 36-37:  said => say-01
Span 16-17:  Thailand => (name :op "Thailand")
Span 23-24:  today => today
Span 63-64:  trade => trade-01
Span 6-7:  vice => vice
Span 28-29:  vice => vice

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 9-10:  and => and
Oracle Span 53-54:  and => and
Oracle Span 62-63:  and => and
Oracle Span 54-56:  Armed Forces => (military :name (name :op "Forces" :op "Armed"))
Oracle Span 33-36:  Central Military Commission => (government-organization :name (name :op "Commission" :op "Military" :op "Central"))
Oracle Span 30-31:  chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 3-5:  Chavalit Yoncayu => (person :name (name :op "Yoncayu" :op "Chavalit"))
Oracle Span 38-39:  China => (country :name (name :op "China"))
Oracle Span 10-11:  concurrent => concurrent
Oracle Span 64-65:  cooperation => cooperate-01
Oracle Span 68-69:  countries => country
Oracle Span 42-43:  deal => deal
Oracle Span 46-47:  developing => develop-02
Oracle Span 20-23:  Diaoyutai State Guesthouse => (hotel :name (name :op "Guesthouse" :op "State" :op "Diaoyutai"))
Oracle Span 13-15:  Domestic Affairs => (name :op "Affairs" :op "Domestic")
Oracle Span 61-62:  economic => economy
Oracle Span 59-60:  especially => especially
Oracle Span 47-48:  friendship => friendship
Oracle Span 50-51:  government => government-organization
Oracle Span 41-42:  great => great
Oracle Span 25-27:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 44-45:  importance => importance
Oracle Span 1-2:  meeting => meet-03
Oracle Span 11-12:  Minister => (have-org-role-91 :ARG2 minister)
Oracle Span 39-40:  placed => place-01
Oracle Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 36-37:  said => say-01
Oracle Span 16-17:  Thailand => (name :op "Thailand")
Oracle Span 23-24:  today => today
Oracle Span 63-64:  trade => trade-01
Oracle Span 6-7:  vice => vice
Oracle Span 28-29:  vice => vice

Dependencies:
1	When	_	WRB	WRB	_	2	advmod	_	_
2	meeting	_	VBG	VBG	_	33	advcl	_	_
3	with	_	IN	IN	_	2	prep	_	_
4	Chavalit	_	NNP	NNP	_	5	nn	_	_
5	Yoncayu	_	NNP	NNP	_	3	pobj	_	_
6	,	_	,	,	_	5	punct	_	_
7	vice-premier	_	JJ	JJ	_	10	amod	_	_
8	and	_	CC	CC	_	7	cc	_	_
9	concurrent	_	JJ	JJ	_	7	conj	_	_
10	Minister	_	NNP	NNP	_	5	appos	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	Domestic	_	JJ	JJ	_	13	amod	_	_
13	Affairs	_	NNPS	NNPS	_	11	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	Thailand	_	NNP	NNP	_	14	pobj	_	_
16	,	_	,	,	_	5	punct	_	_
17	at	_	IN	IN	_	5	prep	_	_
18	the	_	DT	DT	_	21	det	_	_
19	Diaoyutai	_	NNP	NNP	_	21	nn	_	_
20	State	_	NNP	NNP	_	21	nn	_	_
21	Guesthouse	_	NNP	NNP	_	17	pobj	_	_
22	today	_	NN	NN	_	2	tmod	_	_
23	,	_	,	,	_	33	punct	_	_
24	Huaqing	_	NNP	NNP	_	25	nn	_	_
25	Liu	_	NNP	NNP	_	33	nsubj	_	_
26	,	_	,	,	_	25	punct	_	_
27	vice-chairman	_	NN	NN	_	25	appos	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	32	det	_	_
30	Central	_	NNP	NNP	_	32	nn	_	_
31	Military	_	NNP	NNP	_	32	nn	_	_
32	Commission	_	NNP	NNP	_	28	pobj	_	_
33	said	_	VBD	VBD	_	0	root	_	_
34	that	_	IN	IN	_	36	mark	_	_
35	China	_	NNP	NNP	_	36	nsubj	_	_
36	placed	_	VBD	VBD	_	33	ccomp	_	_
37	a	_	DT	DT	_	39	det	_	_
38	great	_	JJ	JJ	_	39	amod	_	_
39	deal	_	NN	NN	_	36	dobj	_	_
40	of	_	IN	IN	_	39	prep	_	_
41	importance	_	NN	NN	_	40	pobj	_	_
42	in	_	IN	IN	_	36	prep	_	_
43	developing	_	VBG	VBG	_	44	amod	_	_
44	friendship	_	NN	NN	_	42	pobj	_	_
45	with	_	IN	IN	_	44	prep	_	_
46	the	_	DT	DT	_	47	det	_	_
47	government	_	NN	NN	_	45	pobj	_	_
48	,	_	,	,	_	47	punct	_	_
49	people	_	NNS	NNS	_	47	conj	_	_
50	and	_	CC	CC	_	47	cc	_	_
51	Armed	_	NNP	NNP	_	52	nn	_	_
52	Forces	_	NNP	NNP	_	47	conj	_	_
53	of	_	IN	IN	_	44	prep	_	_
54	Thailand	_	NNP	NNP	_	53	pobj	_	_
55	,	_	,	,	_	44	punct	_	_
56	especially	_	RB	RB	_	58	advmod	_	_
57	the	_	DT	DT	_	58	det	_	_
58	economic	_	JJ	JJ	_	44	conj	_	_
59	and	_	CC	CC	_	44	cc	_	_
60	trade	_	NN	NN	_	61	nn	_	_
61	cooperation	_	NN	NN	_	44	conj	_	_
62	between	_	IN	IN	_	61	prep	_	_
63	the	_	DT	DT	_	65	det	_	_
64	two	_	CD	CD	_	65	num	_	_
65	countries	_	NNS	NNS	_	62	pobj	_	_
66	.	_	.	.	_	33	punct	_	_

Oracle:
(a / and, op, c9 / cooperate-01)
(a / and, op, f2 / friendship)
(a2 / and, op, m / military)
(a3 / and, op, e / economy)
(a3 / and, op, t2 / trade-01)
(c / chairman, mod, v / vice)
(c7 / country, name, n3 / name)
(c8 / country, name, n4 / name)
(c9 / cooperate-01, ARG0, c7 / country)
(c9 / cooperate-01, ARG1, c8 / country)
(c9 / cooperate-01, ARG2, a3 / and)
(c9 / cooperate-01, mod, e2 / especially)
(d3 / deal, mod, g2 / great)
(d4 / develop-02, ARG0, c7 / country)
(d4 / develop-02, ARG1, a / and)
(f2 / friendship, prep-with, a2 / and)
(g / government-organization, name, n2 / name)
(g5 / government-organization, name, n7 / name)
(g5 / government-organization, poss, c8 / country)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, c / chairman)
(h2 / hotel, name, n8 / name)
(h3 / have-org-role-91, ARG0, p6 / person)
(h3 / have-org-role-91, ARG2, p7 / premier)
(h4 / have-org-role-91, ARG0, p6 / person)
(h4 / have-org-role-91, ARG1, g5 / government-organization)
(h4 / have-org-role-91, ARG2, m3 / minister)
(i / importance, quant, d3 / deal)
(m / military, mod, c8 / country)
(m / military, name, n5 / name)
(m2 / meet-03, ARG0, p3 / person)
(m2 / meet-03, ARG1, p6 / person)
(m2 / meet-03, location, h2 / hotel)
(m2 / meet-03, time, t4 / today)
(m3 / minister, mod, c2 / concurrent)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "Central")
(n2 / name, op, "Commission")
(n2 / name, op, "Military")
(n3 / name, op, "China")
(n4 / name, op, "Thailand")
(n5 / name, op, "Armed")
(n5 / name, op, "Forces")
(n6 / name, op, "Chavalit")
(n6 / name, op, "Yoncayu")
(n7 / name, op, "Affairs")
(n7 / name, op, "Domestic")
(n8 / name, op, "Diaoyutai")
(n8 / name, op, "Guesthouse")
(n8 / name, op, "State")
(p3 / person, name, n / name)
(p4 / place-01, ARG0, c7 / country)
(p4 / place-01, ARG1, i / importance)
(p4 / place-01, ARG2, d4 / develop-02)
(p6 / person, name, n6 / name)
(p7 / premier, mod, v2 / vice)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, p4 / place-01)
(s / say-01, time, m2 / meet-03)

Input(Some(Graph((say-01 :time (meet-03 :time today :location (hotel :name (name :op "Guesthouse" :op "State" :op "Diaoyutai")) :ARG1 (person :ARG0-of (have-org-role-91 :ARG2 (minister :mod concurrent) :ARG1 (government-organization :name (name :op "Affairs" :op "Domestic") :poss country)) :ARG0-of (have-org-role-91 :ARG2 (premier :mod vice)) :name (name :op "Yoncayu" :op "Chavalit")) :ARG0 person) :ARG1 (place-01 :ARG2 (develop-02 :ARG1 (and :op (cooperate-01 :mod especially :ARG2 (and :op trade-01 :op economy) :ARG0 country :ARG1 country) :op (friendship :prep-with (and :op (military :name (name :op "Forces" :op "Armed") :mod country) :op (person :mod country) :op (government-organization :ARG0-of (govern-01 :ARG1 (country :name (name :op "Thailand"))))))) :ARG0 country) :ARG1 (importance :quant (deal :mod great)) :ARG0 (country :name (name :op "China"))) :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 (chairman :mod vice) :ARG1 (government-organization :name (name :op "Commission" :op "Military" :op "Central"))) :name (name :op "Liu" :op "Huaqing"))),ArrayBuffer(Span(25,27,List(0, 1, 2, 3),Huaqing Liu,(person :name (name :op "Liu" :op "Huaqing")),false), Span(33,36,List(4, 5, 6, 7, 8),Central Military Commission,(government-organization :name (name :op "Commission" :op "Military" :op "Central")),false), Span(38,39,List(9, 10, 11),China,(country :name (name :op "China")),false), Span(16,17,List(12, 13),Thailand,(name :op "Thailand"),false), Span(54,56,List(14, 15, 16, 17),Armed Forces,(military :name (name :op "Forces" :op "Armed")),false), Span(3,5,List(18, 19, 20, 21),Chavalit Yoncayu,(person :name (name :op "Yoncayu" :op "Chavalit")),false), Span(13,15,List(22, 23, 24),Domestic Affairs,(name :op "Affairs" :op "Domestic"),false), Span(20,23,List(25, 26, 27, 28, 29),Diaoyutai State Guesthouse,(hotel :name (name :op "Guesthouse" :op "State" :op "Diaoyutai")),false), Span(36,37,List(30),said,say-01,false), Span(1,2,List(31),meeting,meet-03,false), Span(23,24,List(32),today,today,false), Span(8,9,List(33, 34),premier,(have-org-role-91 :ARG2 premier),false), Span(6,7,List(35),vice,vice,false), Span(11,12,List(36, 37),Minister,(have-org-role-91 :ARG2 minister),false), Span(10,11,List(38),concurrent,concurrent,false), Span(39,40,List(39),placed,place-01,false), Span(46,47,List(40),developing,develop-02,false), Span(9,10,List(41),and,and,false), Span(53,54,List(42),and,and,false), Span(63,64,List(43),trade,trade-01,false), Span(59,60,List(44),especially,especially,false), Span(47,48,List(45),friendship,friendship,false), Span(62,63,List(46),and,and,false), Span(68,69,List(47),countries,country,false), Span(44,45,List(48),importance,importance,false), Span(42,43,List(49),deal,deal,false), Span(41,42,List(50),great,great,false), Span(30,31,List(51, 52),chairman,(have-org-role-91 :ARG2 chairman),false), Span(28,29,List(53),vice,vice,false), Span(50,51,List(54),government,government-organization,false), Span(64,65,List(55),cooperation,cooperate-01,false), Span(61,62,List(56),economic,economy,false)),Map(45 -> friendship, 39 -> place-01, 30 -> say-01, 51 -> have-org-role-91, 2 -> "Liu", 5 -> name, 48 -> importance, 33 -> have-org-role-91, 27 -> "Guesthouse", 54 -> government-organization, 12 -> name, 8 -> "Central", 15 -> name, 42 -> and, 36 -> have-org-role-91, 21 -> "Chavalit", 18 -> person, 24 -> "Domestic", 53 -> vice, 41 -> and, 35 -> vice, 56 -> economy, 7 -> "Military", 17 -> "Armed", 1 -> name, 50 -> great, 44 -> especially, 23 -> "Affairs", 38 -> concurrent, 47 -> country, 26 -> name, 4 -> government-organization, 11 -> "China", 32 -> today, 14 -> military, 29 -> "Diaoyutai", 20 -> "Yoncayu", 46 -> and, 52 -> chairman, 34 -> premier, 28 -> "State", 6 -> "Commission", 55 -> cooperate-01, 40 -> develop-02, 49 -> deal, 43 -> trade-01, 9 -> country, 0 -> person, 22 -> name, 16 -> "Forces", 37 -> minister, 19 -> name, 3 -> "Huaqing", 10 -> name, 31 -> meet-03, 25 -> hotel, 13 -> "Thailand"),Map(e -> economy, m3 -> minister, n -> name, c8 -> country, v2 -> vice, h -> have-org-role-91, t4 -> today, h2 -> hotel, m2 -> meet-03, d3 -> deal, n7 -> name, c7 -> country, e2 -> especially, a3 -> and, n4 -> name, s -> say-01, h4 -> have-org-role-91, v -> vice, m -> military, g2 -> great, g -> government-organization, a -> and, n3 -> name, p4 -> place-01, g5 -> government-organization, n6 -> name, p7 -> premier, c9 -> cooperate-01, t2 -> trade-01, i -> importance, a2 -> and, c -> chairman, h3 -> have-org-role-91, f2 -> friendship, p6 -> person, d4 -> develop-02, n8 -> name, p3 -> person, c2 -> concurrent, n2 -> name, n5 -> name))),[Ljava.lang.String;@8f4ea7c,Annotation([Ljava.lang.String;@436813f3,[Ljava.lang.String;@74fe5c40,[Ljava.lang.String;@3febb011),Annotation([Ljava.lang.String;@10e31a9a,[Ljava.lang.String;@131774fe,[Ledu.cmu.lti.nlp.amr.Dependency;@158d2680),Annotation([Ljava.lang.String;@77847718,[Ljava.lang.String;@7f3b84b8,[Ljava.lang.String;@57a3af25),Annotation([Ljava.lang.String;@2b662a77,[Ljava.lang.String;@7f0eb4b4,[Ledu.cmu.lti.nlp.amr.Entity;@5c33f1a9))
AMR:
(a / and, op, n4 / name)
(a2 / and, op, c9 / cooperate-01)
(a3 / and, domain, f2 / friendship)
(a3 / and, op, g5 / government-organization)
(a3 / and, op, m / military)
(c7 / country, name, n3 / name)
(c9 / cooperate-01, ARG0, c8 / country)
(c9 / cooperate-01, ARG1, a3 / and)
(c9 / cooperate-01, ARG2, t2 / trade-01)
(d3 / deal, mod, g2 / great)
(d4 / develop-02, ARG1, f2 / friendship)
(e / economy, degree, e2 / especially)
(g / government-organization, name, n2 / name)
(h / have-org-role-91, ARG0, v / vice)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, c / chairman)
(h2 / hotel, name, n8 / name)
(h3 / have-org-role-91, ARG0, v2 / vice)
(h3 / have-org-role-91, ARG1, g / government-organization)
(h3 / have-org-role-91, ARG2, p7 / premier)
(h4 / have-org-role-91, ARG1, g / government-organization)
(h4 / have-org-role-91, ARG2, m3 / minister)
(h4 / have-org-role-91, ARG6, c2 / concurrent)
(i / importance, poss, c7 / country)
(m / military, name, n5 / name)
(m2 / meet-03, ARG0, p3 / person)
(m2 / meet-03, ARG1, p6 / person)
(m2 / meet-03, location, h2 / hotel)
(m3 / minister, name, n7 / name)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "Central")
(n2 / name, op, "Commission")
(n2 / name, op, "Military")
(n3 / name, op, "China")
(n4 / name, op, "Thailand")
(n5 / name, op, "Armed")
(n5 / name, op, "Forces")
(n6 / name, op, "Chavalit")
(n6 / name, op, "Yoncayu")
(n7 / name, op, "Affairs")
(n7 / name, op, "Domestic")
(n8 / name, op, "Diaoyutai")
(n8 / name, op, "Guesthouse")
(n8 / name, op, "State")
(p3 / person, name, n / name)
(p4 / place-01, ARG0, c7 / country)
(p4 / place-01, ARG1, d3 / deal)
(p4 / place-01, ARG2, a2 / and)
(p6 / person, mod, a / and)
(p6 / person, name, n6 / name)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, p4 / place-01)
(s / say-01, ARG6, h / have-org-role-91)
(t2 / trade-01, ARG1, e2 / especially)
(t4 / today, mod, h2 / hotel)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.2
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.2
WARNING: makeIds can't find span Id: 0.2.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0.2
WARNING: makeIds can't find span Id: 0.2.0.2.1
WARNING: makeIds can't find span Id: 0.2.0.2.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.0
WARNING: makeIds can't find span Id: 0.1.2.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.1.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.2.0.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.1.0.0
Decoded in 5,534,256 microseconds
Sentence: Huaqing Liu said that , the people of China and Thailand have traditional friendship and the relationship between the two countries was also very friendly too .

Oracle Span 1:  also => also
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  between => between
Oracle Span 5:  China => (person :mod (country :name (name :op "China")))
Oracle Span 6:  countries => (person :mod country)
Oracle Span 7:  friendly => friendly-41
Oracle Span 8:  friendship => friendship
Oracle Span 9:  have => have-03
Oracle Span 10:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 11:  relationship => relationship
Oracle Span 12:  said => say-01
Oracle Span 13:  Thailand => (name :op "Thailand")
Oracle Span 14:  too => too
Oracle Span 15:  traditional => tradition
Oracle Span 16:  very => very
NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Thailand"))
Spans:
Span 22-23:  also => also
Span 9-10:  and => and
Span 14-15:  and => and
Span 17-18:  between => between
Span 8-9:  China => (person :mod (country :name (name :op "China")))
Span 20-21:  countries => (person :mod country)
Span 24-25:  friendly => friendly-41
Span 13-14:  friendship => friendship
Span 11-12:  have => have-03
Span 0-2:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Span 16-17:  relationship => relationship
Span 2-3:  said => say-01
Span 10-11:  Thailand => (name :op "Thailand")
Span 25-26:  too => too
Span 12-13:  traditional => tradition
Span 23-24:  very => very

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 22-23:  also => also
Oracle Span 9-10:  and => and
Oracle Span 14-15:  and => and
Oracle Span 17-18:  between => between
Oracle Span 8-9:  China => (person :mod (country :name (name :op "China")))
Oracle Span 20-21:  countries => (person :mod country)
Oracle Span 24-25:  friendly => friendly-41
Oracle Span 13-14:  friendship => friendship
Oracle Span 11-12:  have => have-03
Oracle Span 0-2:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 16-17:  relationship => relationship
Oracle Span 2-3:  said => say-01
Oracle Span 10-11:  Thailand => (name :op "Thailand")
Oracle Span 25-26:  too => too
Oracle Span 12-13:  traditional => tradition
Oracle Span 23-24:  very => very

Dependencies:
1	Huaqing	_	NNP	NNP	_	2	nn	_	_
2	Liu	_	NNP	NNP	_	3	nsubj	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	12	mark	_	_
5	,	_	,	,	_	12	punct	_	_
6	the	_	DT	DT	_	7	det	_	_
7	people	_	NNS	NNS	_	12	nsubj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	China	_	NNP	NNP	_	8	pobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	Thailand	_	NNP	NNP	_	9	conj	_	_
12	have	_	VBP	VBP	_	3	ccomp	_	_
13	traditional	_	JJ	JJ	_	14	amod	_	_
14	friendship	_	NN	NN	_	12	dobj	_	_
15	and	_	CC	CC	_	12	cc	_	_
16	the	_	DT	DT	_	17	det	_	_
17	relationship	_	NN	NN	_	25	nsubj	_	_
18	between	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	21	det	_	_
20	two	_	CD	CD	_	21	num	_	_
21	countries	_	NNS	NNS	_	18	pobj	_	_
22	was	_	VBD	VBD	_	25	cop	_	_
23	also	_	RB	RB	_	25	advmod	_	_
24	very	_	RB	RB	_	25	advmod	_	_
25	friendly	_	JJ	JJ	_	12	conj	_	_
26	too	_	RB	RB	_	25	advmod	_	_
27	.	_	.	.	_	3	punct	_	_

Oracle:
(a / and, op, f2 / friendly-41)
(a / and, op, h2 / have-03)
(a4 / and, op, p / person)
(a4 / and, op, p3 / person)
(b / between, op, c4 / country)
(b / between, op, c5 / country)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(f / friendship, mod, t2 / tradition)
(f2 / friendly-41, ARG1, r / relationship)
(f2 / friendly-41, degree, v / very)
(f2 / friendly-41, mod, a2 / also)
(f2 / friendly-41, mod, t / too)
(h2 / have-03, ARG0, a4 / and)
(h2 / have-03, ARG1, f / friendship)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "China")
(n3 / name, op, "Thailand")
(p / person, mod, c5 / country)
(p2 / person, name, n / name)
(p3 / person, mod, c4 / country)
(r / relationship, mod, b / between)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, a / and)

Input(Some(Graph((say-01 :ARG1 (and :op (friendly-41 :mod also :degree very :mod too :ARG1 (relationship :mod (between :op country :op country))) :op (have-03 :ARG1 (friendship :mod tradition) :ARG0 (and :op (person :mod (country :name (name :op "Thailand"))) :op (person :mod (country :name (name :op "China")))))) :ARG0 (person :name (name :op "Liu" :op "Huaqing"))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Huaqing Liu,(person :name (name :op "Liu" :op "Huaqing")),false), Span(8,9,List(4, 5, 6, 7),China,(person :mod (country :name (name :op "China"))),false), Span(10,11,List(8, 9),Thailand,(name :op "Thailand"),false), Span(2,3,List(10),said,say-01,false), Span(9,10,List(11),and,and,false), Span(24,25,List(12),friendly,friendly-41,false), Span(22,23,List(13),also,also,false), Span(23,24,List(14),very,very,false), Span(25,26,List(15),too,too,false), Span(16,17,List(16),relationship,relationship,false), Span(17,18,List(17),between,between,false), Span(11,12,List(18),have,have-03,false), Span(13,14,List(19),friendship,friendship,false), Span(14,15,List(20),and,and,false), Span(20,21,List(21, 22),countries,(person :mod country),false), Span(12,13,List(23),traditional,tradition,false)),Map(2 -> "Liu", 5 -> country, 12 -> friendly-41, 15 -> too, 8 -> name, 21 -> person, 18 -> have-03, 7 -> "China", 17 -> between, 1 -> name, 23 -> tradition, 4 -> person, 11 -> and, 14 -> very, 20 -> and, 6 -> name, 22 -> country, 9 -> "Thailand", 0 -> person, 16 -> relationship, 19 -> friendship, 10 -> say-01, 3 -> "Huaqing", 13 -> also),Map(n -> name, h2 -> have-03, b -> between, t -> too, p2 -> person, c4 -> country, s -> say-01, v -> very, p -> person, a -> and, n3 -> name, t2 -> tradition, r -> relationship, a2 -> also, f2 -> friendly-41, f -> friendship, p3 -> person, n2 -> name, a4 -> and, c5 -> country))),[Ljava.lang.String;@1623b78d,Annotation([Ljava.lang.String;@c8c12ac,[Ljava.lang.String;@6adbc9d,[Ljava.lang.String;@4550bb58),Annotation([Ljava.lang.String;@4ec4f3a0,[Ljava.lang.String;@223191a6,[Ledu.cmu.lti.nlp.amr.Dependency;@49139829),Annotation([Ljava.lang.String;@9597028,[Ljava.lang.String;@6069db50,[Ljava.lang.String;@4efbca5a),Annotation([Ljava.lang.String;@1b7cc17c,[Ljava.lang.String;@59662a0b,[Ledu.cmu.lti.nlp.amr.Entity;@77fbd92c))
AMR:
(a / and, mod, t2 / tradition)
(a / and, op, p3 / person)
(a4 / and, op, f2 / friendly-41)
(a4 / and, op, h2 / have-03)
(b / between, op, p / person)
(c4 / country, name, n2 / name)
(f / friendship, mod, n3 / name)
(f2 / friendly-41, ARG0, r / relationship)
(f2 / friendly-41, ARG1, a2 / also)
(f2 / friendly-41, ARG6, t / too)
(f2 / friendly-41, degree, v / very)
(h2 / have-03, ARG0, a / and)
(h2 / have-03, ARG1, f / friendship)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "China")
(n3 / name, op, "Thailand")
(p / person, mod, c5 / country)
(p2 / person, name, n / name)
(p3 / person, mod, c4 / country)
(r / relationship, mod, b / between)
(s / say-01, ARG0, p2 / person)
(s / say-01, ARG1, a4 / and)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.3
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
Decoded in 1,016,027 microseconds
Sentence: He said that this visit by vice-premier Chavalit and mutual visits by other high - level leaders of China and Thailand were beneficial in promoting further development of relationships and the efficient cooperation in all fields between the two countries .

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  beneficial => benefit-01
Oracle Span 6:  Chavalit => (person :name (name :op "Chavalit"))
Oracle Span 7:  China => (country :name (name :op "China"))
Oracle Span 8:  cooperation => cooperate-01
Oracle Span 9:  countries => country
Oracle Span 10:  development => develop-02
Oracle Span 11:  efficient => efficient-41
Oracle Span 12:  fields => field
Oracle Span 13:  further => further
Oracle Span 14:  He => he
Oracle Span 15:  high => high
Oracle Span 16:  leaders => (person :ARG0-of lead-02)
Oracle Span 17:  level => level
Oracle Span 18:  mutual => mutual
Oracle Span 19:  other => other
Oracle Span 20:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 21:  promoting => promote-02
Oracle Span 22:  relationships => relationship
Oracle Span 23:  said => say-01
Oracle Span 24:  Thailand => (name :op "Thailand")
Oracle Span 25:  this => this
Oracle Span 26:  vice => vice
Oracle Span 27:  visit => visit-01
Oracle Span 28:  visits => visit-01
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 36-37:  all => all
Span 10-11:  and => and
Span 21-22:  and => and
Span 31-32:  and => and
Span 24-25:  beneficial => benefit-01
Span 9-10:  Chavalit => (person :name (name :op "Chavalit"))
Span 20-21:  China => (country :name (name :op "China"))
Span 34-35:  cooperation => cooperate-01
Span 41-42:  countries => country
Span 28-29:  development => develop-02
Span 33-34:  efficient => efficient-41
Span 37-38:  fields => field
Span 27-28:  further => further
Span 0-1:  He => he
Span 15-16:  high => high
Span 18-19:  leaders => (person :ARG0-of lead-02)
Span 17-18:  level => level
Span 11-12:  mutual => mutual
Span 14-15:  other => other
Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Span 26-27:  promoting => promote-02
Span 30-31:  relationships => relationship
Span 1-2:  said => say-01
Span 22-23:  Thailand => (name :op "Thailand")
Span 3-4:  this => this
Span 6-7:  vice => vice
Span 4-5:  visit => visit-01
Span 12-13:  visits => visit-01

Langrangian relaxation converged after 60 iterations. Delta = 0.0
Oracle Span 36-37:  all => all
Oracle Span 10-11:  and => and
Oracle Span 21-22:  and => and
Oracle Span 31-32:  and => and
Oracle Span 24-25:  beneficial => benefit-01
Oracle Span 9-10:  Chavalit => (person :name (name :op "Chavalit"))
Oracle Span 20-21:  China => (country :name (name :op "China"))
Oracle Span 34-35:  cooperation => cooperate-01
Oracle Span 41-42:  countries => country
Oracle Span 28-29:  development => develop-02
Oracle Span 33-34:  efficient => efficient-41
Oracle Span 37-38:  fields => field
Oracle Span 27-28:  further => further
Oracle Span 0-1:  He => he
Oracle Span 15-16:  high => high
Oracle Span 18-19:  leaders => (person :ARG0-of lead-02)
Oracle Span 17-18:  level => level
Oracle Span 11-12:  mutual => mutual
Oracle Span 14-15:  other => other
Oracle Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 26-27:  promoting => promote-02
Oracle Span 30-31:  relationships => relationship
Oracle Span 1-2:  said => say-01
Oracle Span 22-23:  Thailand => (name :op "Thailand")
Oracle Span 3-4:  this => this
Oracle Span 6-7:  vice => vice
Oracle Span 4-5:  visit => visit-01
Oracle Span 12-13:  visits => visit-01

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	this	_	DT	DT	_	5	nsubj	_	_
5	visit	_	VBP	VBP	_	2	ccomp	_	_
6	by	_	IN	IN	_	5	prep	_	_
7	vice-premier	_	NNP	NNP	_	8	nn	_	_
8	Chavalit	_	NNP	NNP	_	6	pobj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	mutual	_	JJ	JJ	_	11	amod	_	_
11	visits	_	NNS	NNS	_	8	conj	_	_
12	by	_	IN	IN	_	5	prep	_	_
13	other	_	JJ	JJ	_	14	amod	_	_
14	high	_	NN	NN	_	12	pobj	_	_
15	-	_	:	:	_	2	punct	_	_
16	level	_	NN	NN	_	17	nn	_	_
17	leaders	_	NNS	NNS	_	23	nsubj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	China	_	NNP	NNP	_	18	pobj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	Thailand	_	NNP	NNP	_	19	conj	_	_
22	were	_	VBD	VBD	_	23	cop	_	_
23	beneficial	_	JJ	JJ	_	2	parataxis	_	_
24	in	_	IN	IN	_	23	prep	_	_
25	promoting	_	VBG	VBG	_	24	pcomp	_	_
26	further	_	JJ	JJ	_	27	amod	_	_
27	development	_	NN	NN	_	25	dobj	_	_
28	of	_	IN	IN	_	27	prep	_	_
29	relationships	_	NNS	NNS	_	28	pobj	_	_
30	and	_	CC	CC	_	29	cc	_	_
31	the	_	DT	DT	_	33	det	_	_
32	efficient	_	JJ	JJ	_	33	amod	_	_
33	cooperation	_	NN	NN	_	29	conj	_	_
34	in	_	IN	IN	_	25	prep	_	_
35	all	_	DT	DT	_	36	det	_	_
36	fields	_	NNS	NNS	_	34	pobj	_	_
37	between	_	IN	IN	_	36	prep	_	_
38	the	_	DT	DT	_	40	det	_	_
39	two	_	CD	CD	_	40	num	_	_
40	countries	_	NNS	NNS	_	37	pobj	_	_
41	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, v / visit-01)
(a / and, op, v3 / visit-01)
(a2 / and, mod, l2 / level)
(a2 / and, mod, o / other)
(a2 / and, op, p5 / person)
(a3 / and, op, c7 / cooperate-01)
(a3 / and, op, d / develop-02)
(b / benefit-01, ARG0, a / and)
(b / benefit-01, ARG1, p4 / promote-02)
(c5 / country, name, n2 / name)
(c6 / country, name, n3 / name)
(c7 / cooperate-01, ARG0, c5 / country)
(c7 / cooperate-01, ARG1, c6 / country)
(c7 / cooperate-01, ARG2, f2 / field)
(d / develop-02, ARG1, r / relationship)
(d / develop-02, degree, f / further)
(e / efficient-41, ARG1, c7 / cooperate-01)
(f2 / field, mod, a4 / all)
(h3 / have-org-role-91, ARG0, p / person)
(h3 / have-org-role-91, ARG2, p2 / premier)
(l2 / level, mod, h2 / high)
(l3 / lead-02, ARG0, p5 / person)
(l3 / lead-02, ARG1, c6 / country)
(n / name, op, "Chavalit")
(n2 / name, op, "China")
(n3 / name, op, "Thailand")
(p / person, name, n / name)
(p2 / premier, mod, v2 / vice)
(p4 / promote-02, ARG0, a / and)
(p4 / promote-02, ARG1, a3 / and)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, b / benefit-01)
(v / visit-01, ARG0, p / person)
(v / visit-01, mod, t2 / this)
(v3 / visit-01, ARG0, a2 / and)
(v3 / visit-01, mod, m / mutual)

Input(Some(Graph((say-01 :ARG1 (benefit-01 :ARG1 (promote-02 :ARG1 (and :op (cooperate-01 :ARG1-of efficient-41 :ARG2 (field :mod all) :ARG0 country :ARG1 country) :op (develop-02 :degree further :ARG1 relationship)) :ARG0 and) :ARG0 (and :op (visit-01 :mod mutual :ARG0 (and :mod (level :mod high) :mod other :op (person :ARG0-of (lead-02 :ARG1 (country :name (name :op "Thailand")))) :op (person :ARG0-of (lead-02 :ARG1 (country :name (name :op "China")))))) :op (visit-01 :mod this :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 (premier :mod vice)) :name (name :op "Chavalit"))))) :ARG0 he),ArrayBuffer(Span(9,10,List(0, 1, 2),Chavalit,(person :name (name :op "Chavalit")),false), Span(20,21,List(3, 4, 5),China,(country :name (name :op "China")),false), Span(22,23,List(6, 7),Thailand,(name :op "Thailand"),false), Span(1,2,List(8),said,say-01,false), Span(10,11,List(9),and,and,false), Span(4,5,List(10),visit,visit-01,false), Span(11,12,List(11),mutual,mutual,false), Span(21,22,List(12),and,and,false), Span(17,18,List(13),level,level,false), Span(15,16,List(14),high,high,false), Span(14,15,List(15),other,other,false), Span(18,19,List(16, 17),leaders,(person :ARG0-of lead-02),false), Span(41,42,List(18),countries,country,false), Span(12,13,List(19),visits,visit-01,false), Span(3,4,List(20),this,this,false), Span(8,9,List(21, 22),premier,(have-org-role-91 :ARG2 premier),false), Span(6,7,List(23),vice,vice,false), Span(26,27,List(24),promoting,promote-02,false), Span(31,32,List(25),and,and,false), Span(37,38,List(26),fields,field,false), Span(36,37,List(27),all,all,false), Span(33,34,List(28),efficient,efficient-41,false), Span(30,31,List(29),relationships,relationship,false), Span(27,28,List(30),further,further,false), Span(0,1,List(31),He,he,false), Span(24,25,List(32),beneficial,benefit-01,false), Span(34,35,List(33),cooperation,cooperate-01,false), Span(28,29,List(34),development,develop-02,false)),Map(30 -> further, 2 -> "Chavalit", 5 -> "China", 33 -> cooperate-01, 27 -> all, 12 -> and, 15 -> other, 8 -> say-01, 21 -> have-org-role-91, 18 -> country, 24 -> promote-02, 7 -> "Thailand", 17 -> lead-02, 1 -> name, 23 -> vice, 26 -> field, 4 -> name, 11 -> mutual, 32 -> benefit-01, 14 -> high, 29 -> relationship, 20 -> this, 34 -> develop-02, 28 -> efficient-41, 6 -> name, 9 -> and, 0 -> person, 22 -> premier, 16 -> person, 19 -> visit-01, 10 -> visit-01, 3 -> country, 31 -> he, 25 -> and, 13 -> level),Map(e -> efficient-41, n -> name, v2 -> vice, h -> he, p5 -> person, h2 -> high, b -> benefit-01, c7 -> cooperate-01, p2 -> premier, a3 -> and, l3 -> lead-02, s -> say-01, v -> visit-01, d -> develop-02, m -> mutual, p -> person, a -> and, n3 -> name, p4 -> promote-02, c6 -> country, v3 -> visit-01, t2 -> this, l2 -> level, r -> relationship, a2 -> and, h3 -> have-org-role-91, f2 -> field, f -> further, o -> other, n2 -> name, a4 -> all, c5 -> country))),[Ljava.lang.String;@67c27493,Annotation([Ljava.lang.String;@1a482e36,[Ljava.lang.String;@72967906,[Ljava.lang.String;@5b8dfcc1),Annotation([Ljava.lang.String;@2f9f7dcf,[Ljava.lang.String;@747ddf94,[Ledu.cmu.lti.nlp.amr.Dependency;@35e2d654),Annotation([Ljava.lang.String;@1bd4fdd,[Ljava.lang.String;@55183b20,[Ljava.lang.String;@4f83df68),Annotation([Ljava.lang.String;@6cf0e0ba,[Ljava.lang.String;@7d8995e,[Ledu.cmu.lti.nlp.amr.Entity;@130d63be))
AMR:
(a / and, op, p / person)
(a / and, op, v / visit-01)
(a3 / and, op, c7 / cooperate-01)
(a3 / and, op, p5 / person)
(a3 / and, op, r / relationship)
(b / benefit-01, ARG1, a2 / and)
(b / benefit-01, ARG2, p4 / promote-02)
(c5 / country, name, n2 / name)
(c7 / cooperate-01, ARG1, c6 / country)
(d / develop-02, ARG1, r / relationship)
(d / develop-02, degree, f / further)
(e / efficient-41, ARG1, c7 / cooperate-01)
(f2 / field, location, c6 / country)
(f2 / field, quant, a4 / all)
(h2 / high, example, a / and)
(h2 / high, mod, o / other)
(h3 / have-org-role-91, ARG0, p / person)
(h3 / have-org-role-91, ARG1, c5 / country)
(h3 / have-org-role-91, ARG2, p2 / premier)
(h3 / have-org-role-91, ARG6, v2 / vice)
(l3 / lead-02, ARG0, p5 / person)
(l3 / lead-02, ARG1, c5 / country)
(n / name, op, "Chavalit")
(n2 / name, op, "China")
(n3 / name, op, "Thailand")
(p / person, name, n / name)
(p4 / promote-02, ARG0, n3 / name)
(p4 / promote-02, ARG1, d / develop-02)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, v3 / visit-01)
(v / visit-01, ARG1, l2 / level)
(v / visit-01, mod, m / mutual)
(v3 / visit-01, ARG0, p / person)
(v3 / visit-01, ARG1, t2 / this)

WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.1.0.3.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
Decoded in 3,804,756 microseconds
Sentence: Chavalit said that he was extremely happy to meet vice-chairman Liu .

Oracle Span 1:  chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 2:  Chavalit => (person :name (name :op "Chavalit"))
Oracle Span 3:  extremely => extreme
Oracle Span 4:  Liu => (person :name (name :op "Liu"))
Oracle Span 5:  meet => meet-02
Oracle Span 6:  said => say-01
Oracle Span 7:  vice => vice
NER Entity: (person :name (name :op "Chavalit"))
Spans:
Span 11-12:  chairman => (have-org-role-91 :ARG2 chairman)
Span 0-1:  Chavalit => (person :name (name :op "Chavalit"))
Span 5-6:  extremely => extreme
Span 12-13:  Liu => (person :name (name :op "Liu"))
Span 8-9:  meet => meet-02
Span 1-2:  said => say-01
Span 9-10:  vice => vice

Langrangian relaxation converged after 32 iterations. Delta = 0.0
Oracle Span 11-12:  chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 0-1:  Chavalit => (person :name (name :op "Chavalit"))
Oracle Span 5-6:  extremely => extreme
Oracle Span 12-13:  Liu => (person :name (name :op "Liu"))
Oracle Span 8-9:  meet => meet-02
Oracle Span 1-2:  said => say-01
Oracle Span 9-10:  vice => vice

Dependencies:
1	Chavalit	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	he	_	PRP	PRP	_	7	nsubj	_	_
5	was	_	VBD	VBD	_	7	cop	_	_
6	extremely	_	RB	RB	_	7	advmod	_	_
7	happy	_	JJ	JJ	_	2	ccomp	_	_
8	to	_	TO	TO	_	9	aux	_	_
9	meet	_	VB	VB	_	7	xcomp	_	_
10	vice-chairman	_	JJ	JJ	_	11	amod	_	_
11	Liu	_	NNP	NNP	_	9	dobj	_	_
12	.	_	.	.	_	2	punct	_	_

Oracle:
(c / chairman, mod, v / vice)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, c / chairman)
(m / meet-02, ARG0, p3 / person)
(m / meet-02, ARG1, p / person)
(n / name, op, "Chavalit")
(n2 / name, op, "Liu")
(p / person, name, n2 / name)
(p3 / person, name, n / name)
(s / say-01, ARG0, p3 / person)

Input(Some(Graph((say-01 :ARG1 (content-01 :ARG0 (meet-02 :ARG1 (person :ARG0-of (have-org-role-91 :ARG2 (chairman :mod vice)) :name (name :op "Liu")) :ARG0 person) :degree extreme :ARG1 person) :ARG0 (person :name (name :op "Chavalit"))),ArrayBuffer(Span(0,1,List(0, 1, 2),Chavalit,(person :name (name :op "Chavalit")),false), Span(12,13,List(3, 4, 5),Liu,(person :name (name :op "Liu")),false), Span(1,2,List(6),said,say-01,false), Span(8,9,List(7),meet,meet-02,false), Span(11,12,List(8, 9),chairman,(have-org-role-91 :ARG2 chairman),false), Span(9,10,List(10),vice,vice,false), Span(5,6,List(11),extremely,extreme,false)),Map(2 -> "Chavalit", 5 -> "Liu", 8 -> have-org-role-91, 7 -> meet-02, 1 -> name, 4 -> name, 11 -> extreme, 6 -> say-01, 9 -> chairman, 0 -> person, 10 -> vice, 3 -> person),Map(e -> extreme, n -> name, h -> have-org-role-91, s -> say-01, v -> vice, m -> meet-02, p -> person, c -> chairman, n2 -> name, p3 -> person))),[Ljava.lang.String;@42a48628,Annotation([Ljava.lang.String;@293a5bf6,[Ljava.lang.String;@6aeb35e6,[Ljava.lang.String;@1283bb96),Annotation([Ljava.lang.String;@74f0ea28,[Ljava.lang.String;@f6efaab,[Ledu.cmu.lti.nlp.amr.Dependency;@3c19aaa5),Annotation([Ljava.lang.String;@3349e9bb,[Ljava.lang.String;@409bf450,[Ljava.lang.String;@38d8f54a),Annotation([Ljava.lang.String;@49e53c76,[Ljava.lang.String;@351d00c0,[Ledu.cmu.lti.nlp.amr.Entity;@2a3b5b47))
AMR:
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, v / vice)
(h / have-org-role-91, ARG2, c / chairman)
(m / meet-02, ARG1, p / person)
(m / meet-02, ARG6, s / say-01)
(n / name, op, "Chavalit")
(n2 / name, op, "Liu")
(p / person, name, n2 / name)
(p3 / person, name, n / name)
(s / say-01, ARG0, p3 / person)
(s / say-01, ARG1, e / extreme)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 314,282 microseconds
Sentence: He said that in recent years , the development of China 's economy has accelerated , and the government and the people of Thailand feel extremely happy .

Oracle Span 1:  accelerated => accelerate-01
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  China => (country :name (name :op "China"))
Oracle Span 5:  development => develop-02
Oracle Span 6:  economy => economy
Oracle Span 7:  extremely => extreme
Oracle Span 8:  feel => feel-01
Oracle Span 9:  government => (government-organization :ARG0-of govern-01)
Oracle Span 10:  He => he
Oracle Span 11:  recent => recent
Oracle Span 12:  said => say-01
Oracle Span 13:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 14:  years => year
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Thailand"))
Spans:
Span 14-15:  accelerated => accelerate-01
Span 16-17:  and => and
Span 19-20:  and => and
Span 10-11:  China => (country :name (name :op "China"))
Span 8-9:  development => develop-02
Span 12-13:  economy => economy
Span 25-26:  extremely => extreme
Span 24-25:  feel => feel-01
Span 18-19:  government => (government-organization :ARG0-of govern-01)
Span 0-1:  He => he
Span 4-5:  recent => recent
Span 1-2:  said => say-01
Span 23-24:  Thailand => (country :name (name :op "Thailand"))
Span 5-6:  years => year

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 14-15:  accelerated => accelerate-01
Oracle Span 16-17:  and => and
Oracle Span 19-20:  and => and
Oracle Span 10-11:  China => (country :name (name :op "China"))
Oracle Span 8-9:  development => develop-02
Oracle Span 12-13:  economy => economy
Oracle Span 25-26:  extremely => extreme
Oracle Span 24-25:  feel => feel-01
Oracle Span 18-19:  government => (government-organization :ARG0-of govern-01)
Oracle Span 0-1:  He => he
Oracle Span 4-5:  recent => recent
Oracle Span 1-2:  said => say-01
Oracle Span 23-24:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 5-6:  years => year

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	15	mark	_	_
4	in	_	IN	IN	_	15	prep	_	_
5	recent	_	JJ	JJ	_	6	amod	_	_
6	years	_	NNS	NNS	_	4	pobj	_	_
7	,	_	,	,	_	15	punct	_	_
8	the	_	DT	DT	_	9	det	_	_
9	development	_	NN	NN	_	15	nsubj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	China	_	NNP	NNP	_	13	poss	_	_
12	's	_	POS	POS	_	11	possessive	_	_
13	economy	_	NN	NN	_	10	pobj	_	_
14	has	_	VBZ	VBZ	_	15	aux	_	_
15	accelerated	_	VBN	VBN	_	2	ccomp	_	_
16	,	_	,	,	_	2	punct	_	_
17	and	_	CC	CC	_	2	cc	_	_
18	the	_	DT	DT	_	19	det	_	_
19	government	_	NN	NN	_	25	nsubj	_	_
20	and	_	CC	CC	_	19	cc	_	_
21	the	_	DT	DT	_	22	det	_	_
22	people	_	NNS	NNS	_	19	conj	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	Thailand	_	NNP	NNP	_	23	pobj	_	_
25	feel	_	VBP	VBP	_	2	conj	_	_
26	extremely	_	RB	RB	_	27	advmod	_	_
27	happy	_	JJ	JJ	_	25	acomp	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / accelerate-01)
(a / and, op, f / feel-01)
(a / and, time, y / year)
(a2 / accelerate-01, ARG1, d / develop-02)
(a3 / and, op, g / government-organization)
(c4 / country, name, n / name)
(c6 / country, name, n2 / name)
(d / develop-02, ARG1, e / economy)
(e / economy, poss, c4 / country)
(f / feel-01, ARG0, a3 / and)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c6 / country)
(n / name, op, "China")
(n2 / name, op, "Thailand")
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a / and)
(y / year, mod, r / recent)

Input(Some(Graph((say-01 :ARG1 (and :time (year :mod recent) :op (feel-01 :ARG1 (content-01 :degree extreme :ARG1 and) :ARG0 (and :op (person :mod country) :op (government-organization :ARG0-of (govern-01 :ARG1 (country :name (name :op "Thailand")))))) :op (accelerate-01 :ARG1 (develop-02 :ARG1 (economy :poss (country :name (name :op "China")))))) :ARG0 he),ArrayBuffer(Span(10,11,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(23,24,List(3, 4, 5),Thailand,(country :name (name :op "Thailand")),false), Span(1,2,List(6),said,say-01,false), Span(16,17,List(7),and,and,false), Span(5,6,List(8),years,year,false), Span(4,5,List(9),recent,recent,false), Span(24,25,List(10),feel,feel-01,false), Span(19,20,List(11),and,and,false), Span(14,15,List(12),accelerated,accelerate-01,false), Span(12,13,List(13),economy,economy,false), Span(0,1,List(14),He,he,false), Span(25,26,List(15),extremely,extreme,false), Span(18,19,List(16, 17),government,(government-organization :ARG0-of govern-01),false), Span(8,9,List(18),development,develop-02,false)),Map(2 -> "China", 5 -> "Thailand", 12 -> accelerate-01, 15 -> extreme, 8 -> year, 18 -> develop-02, 7 -> and, 17 -> govern-01, 1 -> name, 4 -> name, 11 -> and, 14 -> he, 6 -> say-01, 9 -> recent, 0 -> country, 16 -> government-organization, 10 -> feel-01, 3 -> country, 13 -> economy),Map(e -> economy, n -> name, h -> he, e2 -> extreme, a3 -> and, c4 -> country, s -> say-01, d -> develop-02, g2 -> govern-01, g -> government-organization, y -> year, a -> and, c6 -> country, a2 -> accelerate-01, r -> recent, f -> feel-01, n2 -> name))),[Ljava.lang.String;@55b699ef,Annotation([Ljava.lang.String;@35d019a3,[Ljava.lang.String;@689604d9,[Ljava.lang.String;@18078bef),Annotation([Ljava.lang.String;@799f10e1,[Ljava.lang.String;@4c371370,[Ledu.cmu.lti.nlp.amr.Dependency;@145f66e3),Annotation([Ljava.lang.String;@3023df74,[Ljava.lang.String;@313ac989,[Ljava.lang.String;@4562e04d),Annotation([Ljava.lang.String;@2a65fe7c,[Ljava.lang.String;@4135c3b,[Ledu.cmu.lti.nlp.amr.Entity;@6302bbb1))
AMR:
(a / and, op, a2 / accelerate-01)
(a / and, op, f / feel-01)
(a2 / accelerate-01, ARG0, d / develop-02)
(a2 / accelerate-01, ARG1, y / year)
(c4 / country, name, n / name)
(c6 / country, name, n2 / name)
(d / develop-02, ARG1, e / economy)
(e / economy, poss, c4 / country)
(f / feel-01, ARG0, g / government-organization)
(f / feel-01, ARG1, a3 / and)
(f / feel-01, ARG6, e2 / extreme)
(g2 / govern-01, ARG0, g / government-organization)
(g2 / govern-01, ARG1, c6 / country)
(n / name, op, "China")
(n2 / name, op, "Thailand")
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a / and)
(y / year, mod, r / recent)

WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 930,350 microseconds
Sentence: He said that he agreed with Huaqing Liu 's opinion that Thailand and China should further develop various forms of economic and trade cooperation .

Oracle Span 1:  agreed => agree-01
Oracle Span 2:  and => and
Oracle Span 3:  and => and
Oracle Span 4:  China => (country :name (name :op "China"))
Oracle Span 5:  cooperation => cooperate-01
Oracle Span 6:  develop => develop-02
Oracle Span 7:  economic => economy
Oracle Span 8:  forms => form
Oracle Span 9:  further => further
Oracle Span 10:  He => he
Oracle Span 11:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 12:  opinion => opine-01
Oracle Span 13:  said => say-01
Oracle Span 14:  should => recommend-01
Oracle Span 15:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 16:  trade => trade-01
Oracle Span 17:  various => various
NER Entity: (person :name (name :op "Huaqing" :op "Liu"))
NER Entity: (country :name (name :op "Thailand"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 4-5:  agreed => agree-01
Span 12-13:  and => and
Span 21-22:  and => and
Span 13-14:  China => (country :name (name :op "China"))
Span 23-24:  cooperation => cooperate-01
Span 16-17:  develop => develop-02
Span 20-21:  economic => economy
Span 18-19:  forms => form
Span 15-16:  further => further
Span 0-1:  He => he
Span 6-8:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Span 9-10:  opinion => opine-01
Span 1-2:  said => say-01
Span 14-15:  should => recommend-01
Span 11-12:  Thailand => (country :name (name :op "Thailand"))
Span 22-23:  trade => trade-01
Span 17-18:  various => various

Langrangian relaxation converged after 98 iterations. Delta = 0.0
Oracle Span 4-5:  agreed => agree-01
Oracle Span 12-13:  and => and
Oracle Span 21-22:  and => and
Oracle Span 13-14:  China => (country :name (name :op "China"))
Oracle Span 23-24:  cooperation => cooperate-01
Oracle Span 16-17:  develop => develop-02
Oracle Span 20-21:  economic => economy
Oracle Span 18-19:  forms => form
Oracle Span 15-16:  further => further
Oracle Span 0-1:  He => he
Oracle Span 6-8:  Huaqing Liu => (person :name (name :op "Liu" :op "Huaqing"))
Oracle Span 9-10:  opinion => opine-01
Oracle Span 1-2:  said => say-01
Oracle Span 14-15:  should => recommend-01
Oracle Span 11-12:  Thailand => (country :name (name :op "Thailand"))
Oracle Span 22-23:  trade => trade-01
Oracle Span 17-18:  various => various

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	5	mark	_	_
4	he	_	PRP	PRP	_	5	nsubj	_	_
5	agreed	_	VBD	VBD	_	2	ccomp	_	_
6	with	_	IN	IN	_	5	prep	_	_
7	Huaqing	_	NNP	NNP	_	8	nn	_	_
8	Liu	_	NNP	NNP	_	10	poss	_	_
9	's	_	POS	POS	_	8	possessive	_	_
10	opinion	_	NN	NN	_	6	pobj	_	_
11	that	_	IN	IN	_	17	mark	_	_
12	Thailand	_	NNP	NNP	_	17	nsubj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	China	_	NNP	NNP	_	12	conj	_	_
15	should	_	MD	MD	_	17	aux	_	_
16	further	_	RBR	RBR	_	17	advmod	_	_
17	develop	_	VB	VB	_	5	ccomp	_	_
18	various	_	JJ	JJ	_	19	amod	_	_
19	forms	_	NNS	NNS	_	17	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	economic	_	JJ	JJ	_	20	pobj	_	_
22	and	_	CC	CC	_	21	cc	_	_
23	trade	_	NN	NN	_	24	nn	_	_
24	cooperation	_	NN	NN	_	21	conj	_	_
25	.	_	.	.	_	2	punct	_	_

Oracle:
(a / agree-01, ARG0, h2 / he)
(a / agree-01, ARG1, o / opine-01)
(a2 / and, op, c4 / country)
(a2 / and, op, c5 / country)
(a3 / and, op, c7 / cooperate-01)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c7 / cooperate-01, ARG2, t2 / trade-01)
(c7 / cooperate-01, mod, f / form)
(d / develop-02, ARG0, a2 / and)
(d / develop-02, ARG1, a3 / and)
(d / develop-02, degree, f2 / further)
(f / form, mod, v / various)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "Thailand")
(n3 / name, op, "China")
(o / opine-01, ARG0, p2 / person)
(o / opine-01, ARG1, r / recommend-01)
(p2 / person, name, n / name)
(r / recommend-01, ARG1, d / develop-02)
(s / say-01, ARG0, h2 / he)
(s / say-01, ARG1, a / agree-01)

Input(Some(Graph((say-01 :ARG1 (agree-01 :ARG1 (opine-01 :ARG1 (recommend-01 :ARG1 (develop-02 :degree further :ARG1 (and :op (cooperate-01 :ARG2 trade-01 :mod form) :op (cooperate-01 :ARG2 economy :mod (form :mod various))) :ARG0 (and :op (country :name (name :op "China")) :op (country :name (name :op "Thailand"))))) :ARG0 (person :name (name :op "Liu" :op "Huaqing"))) :ARG0 he) :ARG0 he),ArrayBuffer(Span(6,8,List(0, 1, 2, 3),Huaqing Liu,(person :name (name :op "Liu" :op "Huaqing")),false), Span(11,12,List(4, 5, 6),Thailand,(country :name (name :op "Thailand")),false), Span(13,14,List(7, 8, 9),China,(country :name (name :op "China")),false), Span(1,2,List(10),said,say-01,false), Span(4,5,List(11),agreed,agree-01,false), Span(14,15,List(12),should,recommend-01,false), Span(16,17,List(13),develop,develop-02,false), Span(15,16,List(14),further,further,false), Span(12,13,List(15),and,and,false), Span(22,23,List(16),trade,trade-01,false), Span(18,19,List(17),forms,form,false), Span(17,18,List(18),various,various,false), Span(21,22,List(19),and,and,false), Span(0,1,List(20),He,he,false), Span(9,10,List(21),opinion,opine-01,false), Span(23,24,List(22),cooperation,cooperate-01,false), Span(20,21,List(23),economic,economy,false)),Map(2 -> "Liu", 5 -> name, 12 -> recommend-01, 15 -> and, 8 -> name, 21 -> opine-01, 18 -> various, 7 -> country, 17 -> form, 1 -> name, 23 -> economy, 4 -> country, 11 -> agree-01, 14 -> further, 20 -> he, 6 -> "Thailand", 9 -> "China", 0 -> person, 22 -> cooperate-01, 16 -> trade-01, 19 -> and, 10 -> say-01, 3 -> "Huaqing", 13 -> develop-02),Map(e -> economy, n -> name, h2 -> he, c7 -> cooperate-01, p2 -> person, a3 -> and, c4 -> country, s -> say-01, v -> various, d -> develop-02, a -> agree-01, n3 -> name, t2 -> trade-01, a2 -> and, r -> recommend-01, f2 -> further, f -> form, o -> opine-01, n2 -> name, c5 -> country))),[Ljava.lang.String;@31304f14,Annotation([Ljava.lang.String;@34a3d150,[Ljava.lang.String;@2a4fb17b,[Ljava.lang.String;@5c6648b0),Annotation([Ljava.lang.String;@6f1de4c7,[Ljava.lang.String;@459e9125,[Ledu.cmu.lti.nlp.amr.Dependency;@128d2484),Annotation([Ljava.lang.String;@7cc0cdad,[Ljava.lang.String;@7c7b252e,[Ljava.lang.String;@4d5d943d),Annotation([Ljava.lang.String;@368f2016,[Ljava.lang.String;@4c583ecf,[Ledu.cmu.lti.nlp.amr.Entity;@692f203f))
AMR:
(a / agree-01, ARG1, r / recommend-01)
(a2 / and, op, e / economy)
(a2 / and, op, t2 / trade-01)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(c7 / cooperate-01, ARG1, c5 / country)
(c7 / cooperate-01, ARG2, a2 / and)
(d / develop-02, ARG0, c4 / country)
(d / develop-02, ARG1, f / form)
(d / develop-02, ARG2, c7 / cooperate-01)
(d / develop-02, degree, f2 / further)
(n / name, op, "Huaqing")
(n / name, op, "Liu")
(n2 / name, op, "Thailand")
(n3 / name, op, "China")
(o / opine-01, ARG0, p2 / person)
(o / opine-01, ARG1, a3 / and)
(p2 / person, name, n / name)
(r / recommend-01, ARG1, d / develop-02)
(r / recommend-01, ARG6, a3 / and)
(s / say-01, ARG0, h2 / he)
(s / say-01, ARG1, a / agree-01)
(t2 / trade-01, ARG1, v / various)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.1.0.0
Decoded in 2,492,841 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 1-2:  End => end-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(end-01,ArrayBuffer(Span(1,2,List(0),End,end-01,false)),Map(0 -> end-01),Map(e -> end-01))),[Ljava.lang.String;@48f2bd5b,Annotation([Ljava.lang.String;@7b2bbc3,[Ljava.lang.String;@a1153bc,[Ljava.lang.String;@1aafa419),Annotation([Ljava.lang.String;@47eaca72,[Ljava.lang.String;@55141def,[Ledu.cmu.lti.nlp.amr.Dependency;@55182842),Annotation([Ljava.lang.String;@3270d194,[Ljava.lang.String;@235834f2,[Ljava.lang.String;@5656be13),Annotation([Ljava.lang.String;@4218d6a3,[Ljava.lang.String;@76505305,[Ledu.cmu.lti.nlp.amr.Entity;@14cd1699))
AMR:


Decoded in 4,233 microseconds
Sentence: Xinhua News Agency , Beijing , September 1st

Oracle Span 1:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 2:  September => 9
Oracle Span 3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Span 6-7:  September => 9
Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 6-7:  September => 9
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Beijing	_	NNP	NNP	_	7	nn	_	_
6	,	_	,	,	_	7	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_

Oracle:
(c2 / city, name, n2 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Beijing")
(p / publication, name, n / name)

Input(Some(Graph((byline-91 :ARG0 (publication :name (name :op "Agency" :op "News" :op "Xinhua")) :location (city :name (name :op "Beijing")) :time (date-entity :month 9 :day 1)),ArrayBuffer(Span(0,3,List(0, 1, 2, 3, 4),Xinhua News Agency,(publication :name (name :op "Agency" :op "News" :op "Xinhua")),false), Span(4,5,List(5, 6, 7),Beijing,(city :name (name :op "Beijing")),false), Span(6,7,List(8),September,9,false)),Map(2 -> "Agency", 5 -> city, 8 -> 9, 7 -> "Beijing", 1 -> name, 4 -> "Xinhua", 6 -> name, 0 -> publication, 3 -> "News"),Map(n -> name, p -> publication, 9 -> 9, n2 -> name, c2 -> city))),[Ljava.lang.String;@77888435,Annotation([Ljava.lang.String;@73a1e9a9,[Ljava.lang.String;@71d44a3,[Ljava.lang.String;@7b98f307),Annotation([Ljava.lang.String;@4802796d,[Ljava.lang.String;@34123d65,[Ledu.cmu.lti.nlp.amr.Dependency;@59474f18),Annotation([Ljava.lang.String;@65fb9ffc,[Ljava.lang.String;@3e694b3f,[Ljava.lang.String;@1bb5a082),Annotation([Ljava.lang.String;@78691363,[Ljava.lang.String;@41d477ed,[Ledu.cmu.lti.nlp.amr.Entity;@3590fc5b))
AMR:
(c2 / city, location, 9 / 9)
(c2 / city, name, n2 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Beijing")
(p / publication, calendar, c2 / city)
(p / publication, name, n / name)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 24,821 microseconds
Sentence: Guofang Shen , The foreign ministry spokesperson , announced at a news conference held this afternoon that President Gentzs Aerpade of the Hungary Republic , would pay a State visit to China from September 14th to the 17th at the invitation of president Zemin Jiang .

Oracle Span 1:  afternoon => afternoon
Oracle Span 2:  announced => announce-01
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  conference => conference
Oracle Span 5:  foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Oracle Span 6:  Gentzs Aerpade => (person :name (name :op "Aerpade" :op "Gentzs"))
Oracle Span 7:  Guofang Shen => (person :name (name :op "Shen" :op "Guofang"))
Oracle Span 8:  held => hold-04
Oracle Span 9:  Hungary Republic => (country :name (name :op "Republic" :op "Hungary"))
Oracle Span 10:  invitation => invite-01
Oracle Span 11:  news => news
Oracle Span 12:  President => (have-org-role-91 :ARG2 president)
Oracle Span 13:  president => (have-org-role-91 :ARG2 president)
Oracle Span 14:  September => 9
Oracle Span 15:  spokesperson => (have-org-role-91 :ARG2 spokesperson)
Oracle Span 16:  State => state
Oracle Span 17:  this => this
Oracle Span 18:  visit => visit-01
Oracle Span 19:  Zemin Jiang => (person :name (name :op "Jiang" :op "Zemin"))
NER Entity: (person :name (name :op "Guofang" :op "Shen"))
NER Entity: (person :name (name :op "Gentzs" :op "Aerpade"))
NER Entity: (country :name (name :op "Hungary"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Zemin" :op "Jiang"))
Spans:
Span 15-16:  afternoon => afternoon
Span 8-9:  announced => announce-01
Span 31-32:  China => (country :name (name :op "China"))
Span 12-13:  conference => conference
Span 4-6:  foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Span 18-20:  Gentzs Aerpade => (person :name (name :op "Aerpade" :op "Gentzs"))
Span 0-2:  Guofang Shen => (person :name (name :op "Shen" :op "Guofang"))
Span 13-14:  held => hold-04
Span 22-24:  Hungary Republic => (country :name (name :op "Republic" :op "Hungary"))
Span 40-41:  invitation => invite-01
Span 11-12:  news => news
Span 17-18:  President => (have-org-role-91 :ARG2 president)
Span 42-43:  president => (have-org-role-91 :ARG2 president)
Span 33-34:  September => 9
Span 6-7:  spokesperson => (have-org-role-91 :ARG2 spokesperson)
Span 28-29:  State => state
Span 14-15:  this => this
Span 29-30:  visit => visit-01
Span 43-45:  Zemin Jiang => (person :name (name :op "Jiang" :op "Zemin"))

Langrangian relaxation converged after 65 iterations. Delta = 0.0
Oracle Span 15-16:  afternoon => afternoon
Oracle Span 8-9:  announced => announce-01
Oracle Span 31-32:  China => (country :name (name :op "China"))
Oracle Span 12-13:  conference => conference
Oracle Span 4-6:  foreign ministry => (government-organization :name (name :op "Ministry" :op "Foreign"))
Oracle Span 18-20:  Gentzs Aerpade => (person :name (name :op "Aerpade" :op "Gentzs"))
Oracle Span 0-2:  Guofang Shen => (person :name (name :op "Shen" :op "Guofang"))
Oracle Span 13-14:  held => hold-04
Oracle Span 22-24:  Hungary Republic => (country :name (name :op "Republic" :op "Hungary"))
Oracle Span 40-41:  invitation => invite-01
Oracle Span 11-12:  news => news
Oracle Span 17-18:  President => (have-org-role-91 :ARG2 president)
Oracle Span 42-43:  president => (have-org-role-91 :ARG2 president)
Oracle Span 33-34:  September => 9
Oracle Span 6-7:  spokesperson => (have-org-role-91 :ARG2 spokesperson)
Oracle Span 28-29:  State => state
Oracle Span 14-15:  this => this
Oracle Span 29-30:  visit => visit-01
Oracle Span 43-45:  Zemin Jiang => (person :name (name :op "Jiang" :op "Zemin"))

Dependencies:
1	Guofang	_	NNP	NNP	_	2	nn	_	_
2	Shen	_	NNP	NNP	_	9	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	The	_	DT	DT	_	7	det	_	_
5	foreign	_	JJ	JJ	_	7	amod	_	_
6	ministry	_	NN	NN	_	7	nn	_	_
7	spokesperson	_	NN	NN	_	2	appos	_	_
8	,	_	,	,	_	2	punct	_	_
9	announced	_	VBD	VBD	_	0	root	_	_
10	at	_	IN	IN	_	9	prep	_	_
11	a	_	DT	DT	_	13	det	_	_
12	news	_	NN	NN	_	13	nn	_	_
13	conference	_	NN	NN	_	10	pobj	_	_
14	held	_	VBN	VBN	_	13	vmod	_	_
15	this	_	DT	DT	_	16	det	_	_
16	afternoon	_	NN	NN	_	14	tmod	_	_
17	that	_	IN	IN	_	27	mark	_	_
18	President	_	NNP	NNP	_	20	nn	_	_
19	Gentzs	_	NNPS	NNPS	_	20	nn	_	_
20	Aerpade	_	NNP	NNP	_	27	nsubj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	24	det	_	_
23	Hungary	_	NNP	NNP	_	24	nn	_	_
24	Republic	_	NNP	NNP	_	21	pobj	_	_
25	,	_	,	,	_	27	punct	_	_
26	would	_	MD	MD	_	27	aux	_	_
27	pay	_	VB	VB	_	14	ccomp	_	_
28	a	_	DT	DT	_	30	det	_	_
29	State	_	NNP	NNP	_	30	nn	_	_
30	visit	_	NN	NN	_	27	dobj	_	_
31	to	_	TO	TO	_	27	prep	_	_
32	China	_	NNP	NNP	_	31	pobj	_	_
33	from	_	IN	IN	_	9	prep	_	_
34	September	_	NNP	NNP	_	35	nn	_	_
35	14th	_	NNP	NNP	_	33	pobj	_	_
36	to	_	TO	TO	_	9	prep	_	_
37	the	_	DT	DT	_	38	det	_	_
38	17th	_	JJ	JJ	_	36	pobj	_	_
39	at	_	IN	IN	_	9	prep	_	_
40	the	_	DT	DT	_	41	det	_	_
41	invitation	_	NN	NN	_	39	pobj	_	_
42	of	_	IN	IN	_	41	prep	_	_
43	president	_	NN	NN	_	45	nn	_	_
44	Zemin	_	NNP	NNP	_	45	nn	_	_
45	Jiang	_	NNP	NNP	_	42	pobj	_	_
46	.	_	.	.	_	9	punct	_	_

Oracle:
(a / announce-01, ARG0, p / person)
(a / announce-01, ARG1, v / visit-01)
(a / announce-01, time, c6 / conference)
(a2 / afternoon, mod, t / this)
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(c6 / conference, mod, n7 / news)
(g4 / government-organization, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, g4 / government-organization)
(h / have-org-role-91, ARG2, s / spokesperson)
(h2 / hold-04, ARG1, c6 / conference)
(h2 / hold-04, time, a2 / afternoon)
(h3 / have-org-role-91, ARG0, p2 / person)
(h3 / have-org-role-91, ARG1, c3 / country)
(h3 / have-org-role-91, ARG2, p3 / president)
(h4 / have-org-role-91, ARG0, p4 / person)
(h4 / have-org-role-91, ARG2, p5 / president)
(i / invite-01, ARG0, p4 / person)
(i / invite-01, ARG2, v / visit-01)
(n / name, op, "Guofang")
(n / name, op, "Shen")
(n2 / name, op, "Foreign")
(n2 / name, op, "Ministry")
(n3 / name, op, "Aerpade")
(n3 / name, op, "Gentzs")
(n4 / name, op, "Hungary")
(n4 / name, op, "Republic")
(n5 / name, op, "China")
(n6 / name, op, "Jiang")
(n6 / name, op, "Zemin")
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p4 / person, name, n6 / name)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, c4 / country)
(v / visit-01, mod, s2 / state)

Input(Some(Graph((announce-01 :time (conference :ARG1-of (hold-04 :time (afternoon :mod this)) :mod news) :ARG1 (visit-01 :ARG2-of (invite-01 :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 president) :name (name :op "Jiang" :op "Zemin"))) :duration (date-interval :op (date-entity :month 9 :day 14) :op (date-entity :month 9 :day 17)) :mod state :ARG1 (country :name (name :op "China")) :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 president :ARG1 (country :name (name :op "Republic" :op "Hungary"))) :name (name :op "Aerpade" :op "Gentzs"))) :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 spokesperson :ARG1 (government-organization :name (name :op "Ministry" :op "Foreign"))) :name (name :op "Shen" :op "Guofang"))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Guofang Shen,(person :name (name :op "Shen" :op "Guofang")),false), Span(4,6,List(4, 5, 6, 7),foreign ministry,(government-organization :name (name :op "Ministry" :op "Foreign")),false), Span(18,20,List(8, 9, 10, 11),Gentzs Aerpade,(person :name (name :op "Aerpade" :op "Gentzs")),false), Span(22,24,List(12, 13, 14, 15),Hungary Republic,(country :name (name :op "Republic" :op "Hungary")),false), Span(31,32,List(16, 17, 18),China,(country :name (name :op "China")),false), Span(43,45,List(19, 20, 21, 22),Zemin Jiang,(person :name (name :op "Jiang" :op "Zemin")),false), Span(8,9,List(23),announced,announce-01,false), Span(12,13,List(24),conference,conference,false), Span(13,14,List(25),held,hold-04,false), Span(15,16,List(26),afternoon,afternoon,false), Span(14,15,List(27),this,this,false), Span(11,12,List(28),news,news,false), Span(29,30,List(29),visit,visit-01,false), Span(17,18,List(30, 31),President,(have-org-role-91 :ARG2 president),false), Span(33,34,List(32),September,9,false), Span(28,29,List(33),State,state,false), Span(42,43,List(34, 35),president,(have-org-role-91 :ARG2 president),false), Span(6,7,List(36, 37),spokesperson,(have-org-role-91 :ARG2 spokesperson),false), Span(40,41,List(38),invitation,invite-01,false)),Map(30 -> have-org-role-91, 2 -> "Shen", 5 -> name, 33 -> state, 27 -> this, 12 -> country, 15 -> "Hungary", 8 -> person, 36 -> have-org-role-91, 21 -> "Jiang", 18 -> "China", 24 -> conference, 35 -> president, 7 -> "Foreign", 17 -> name, 1 -> name, 23 -> announce-01, 38 -> invite-01, 26 -> afternoon, 4 -> government-organization, 11 -> "Gentzs", 32 -> 9, 14 -> "Republic", 29 -> visit-01, 20 -> name, 34 -> have-org-role-91, 28 -> news, 6 -> "Ministry", 9 -> name, 0 -> person, 22 -> "Zemin", 16 -> country, 37 -> spokesperson, 19 -> person, 10 -> "Aerpade", 3 -> "Guofang", 31 -> president, 25 -> hold-04, 13 -> name),Map(n -> name, h -> have-org-role-91, s2 -> state, p5 -> president, h2 -> hold-04, t -> this, n7 -> news, p2 -> person, c4 -> country, n4 -> name, s -> spokesperson, h4 -> have-org-role-91, v -> visit-01, p -> person, a -> announce-01, c3 -> country, n3 -> name, p4 -> person, n6 -> name, c6 -> conference, i -> invite-01, a2 -> afternoon, h3 -> have-org-role-91, 9 -> 9, p3 -> president, n2 -> name, g4 -> government-organization, n5 -> name))),[Ljava.lang.String;@397fbdb,Annotation([Ljava.lang.String;@33d512c1,[Ljava.lang.String;@515c6049,[Ljava.lang.String;@639c2c1d),Annotation([Ljava.lang.String;@5fe94a96,[Ljava.lang.String;@443118b0,[Ledu.cmu.lti.nlp.amr.Dependency;@765d7657),Annotation([Ljava.lang.String;@74235045,[Ljava.lang.String;@618b19ad,[Ljava.lang.String;@2d3379b4),Annotation([Ljava.lang.String;@30c15d8b,[Ljava.lang.String;@5e0e82ae,[Ledu.cmu.lti.nlp.amr.Entity;@6771beb3))
AMR:
(a / announce-01, ARG0, p / person)
(a / announce-01, ARG1, c6 / conference)
(a2 / afternoon, mod, t / this)
(c3 / country, name, n4 / name)
(c4 / country, location, 9 / 9)
(c4 / country, name, n5 / name)
(c6 / conference, mod, n7 / news)
(g4 / government-organization, calendar, p / person)
(g4 / government-organization, name, n2 / name)
(h / have-org-role-91, ARG1, c4 / country)
(h / have-org-role-91, ARG2, s / spokesperson)
(h2 / hold-04, ARG1, v / visit-01)
(h2 / hold-04, time, a2 / afternoon)
(h3 / have-org-role-91, ARG0, p4 / person)
(h3 / have-org-role-91, ARG1, c3 / country)
(h3 / have-org-role-91, ARG2, p3 / president)
(h4 / have-org-role-91, ARG0, p2 / person)
(h4 / have-org-role-91, ARG1, c3 / country)
(h4 / have-org-role-91, ARG2, p5 / president)
(i / invite-01, ARG0, p4 / person)
(i / invite-01, ARG1, p / person)
(n / name, op, "Guofang")
(n / name, op, "Shen")
(n2 / name, op, "Foreign")
(n2 / name, op, "Ministry")
(n3 / name, op, "Aerpade")
(n3 / name, op, "Gentzs")
(n4 / name, op, "Hungary")
(n4 / name, op, "Republic")
(n5 / name, op, "China")
(n6 / name, op, "Jiang")
(n6 / name, op, "Zemin")
(p / person, name, n / name)
(p2 / person, name, n3 / name)
(p4 / person, name, n6 / name)
(v / visit-01, ARG0, p2 / person)
(v / visit-01, ARG1, c4 / country)
(v / visit-01, mod, s2 / state)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.4.0
WARNING: makeIds can't find span Id: 0.1.4.0.0
WARNING: makeIds can't find span Id: 0.1.4.0.0.1
WARNING: makeIds can't find span Id: 0.1.4.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.4.0.1
WARNING: makeIds can't find span Id: 0.1.4.0.1.0
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.1.4
Decoded in 3,591,152 microseconds
Sentence: He also announced that Casymier Auye Muba , premier of the Gabon Republic , would pay a formal , friendly visit to China from September 6th to the 11th at the invitation of Peng Li , premier of the State Council .

Oracle Span 1:  also => also
Oracle Span 2:  announced => announce-01
Oracle Span 3:  Casymier Auye Muba => (person :name (name :op "Muba" :op "Auye" :op "Casymier"))
Oracle Span 4:  China => (country :name (name :op "China"))
Oracle Span 5:  formal => formal
Oracle Span 6:  friendly => friendly-41
Oracle Span 7:  Gabon Republic => (country :name (name :op "Republic" :op "Gabon"))
Oracle Span 8:  He => he
Oracle Span 9:  invitation => invite-01
Oracle Span 10:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 11:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 12:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 13:  September => 9
Oracle Span 14:  State Council => (government-organization :name (name :op "Council" :op "State"))
Oracle Span 15:  visit => visit-01
NER Entity: (country :name (name :op "Gabon"))
NER Entity: (country :name (name :op "China"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (organization :name (name :op "State" :op "Council"))
Spans:
Span 1-2:  also => also
Span 2-3:  announced => announce-01
Span 4-7:  Casymier Auye Muba => (person :name (name :op "Muba" :op "Auye" :op "Casymier"))
Span 22-23:  China => (country :name (name :op "China"))
Span 17-18:  formal => formal
Span 19-20:  friendly => friendly-41
Span 11-13:  Gabon Republic => (country :name (name :op "Republic" :op "Gabon"))
Span 0-1:  He => he
Span 31-32:  invitation => invite-01
Span 33-35:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Span 36-37:  premier => (have-org-role-91 :ARG2 premier)
Span 24-25:  September => 9
Span 39-41:  State Council => (government-organization :name (name :op "Council" :op "State"))
Span 20-21:  visit => visit-01

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 1-2:  also => also
Oracle Span 2-3:  announced => announce-01
Oracle Span 4-7:  Casymier Auye Muba => (person :name (name :op "Muba" :op "Auye" :op "Casymier"))
Oracle Span 22-23:  China => (country :name (name :op "China"))
Oracle Span 17-18:  formal => formal
Oracle Span 19-20:  friendly => friendly-41
Oracle Span 11-13:  Gabon Republic => (country :name (name :op "Republic" :op "Gabon"))
Oracle Span 0-1:  He => he
Oracle Span 31-32:  invitation => invite-01
Oracle Span 33-35:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 8-9:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 36-37:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 24-25:  September => 9
Oracle Span 39-41:  State Council => (government-organization :name (name :op "Council" :op "State"))
Oracle Span 20-21:  visit => visit-01

Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	also	_	RB	RB	_	3	advmod	_	_
3	announced	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	16	mark	_	_
5	Casymier	_	NNP	NNP	_	7	nn	_	_
6	Auye	_	NNP	NNP	_	7	nn	_	_
7	Muba	_	NNP	NNP	_	16	nsubj	_	_
8	,	_	,	,	_	7	punct	_	_
9	premier	_	NN	NN	_	7	appos	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	the	_	DT	DT	_	13	det	_	_
12	Gabon	_	NNP	NNP	_	13	nn	_	_
13	Republic	_	NNP	NNP	_	10	pobj	_	_
14	,	_	,	,	_	7	punct	_	_
15	would	_	MD	MD	_	16	aux	_	_
16	pay	_	VB	VB	_	3	ccomp	_	_
17	a	_	DT	DT	_	21	det	_	_
18	formal	_	JJ	JJ	_	21	amod	_	_
19	,	_	,	,	_	21	punct	_	_
20	friendly	_	JJ	JJ	_	21	amod	_	_
21	visit	_	NN	NN	_	16	dobj	_	_
22	to	_	TO	TO	_	16	prep	_	_
23	China	_	NNP	NNP	_	22	pobj	_	_
24	from	_	IN	IN	_	16	prep	_	_
25	September	_	NNP	NNP	_	26	nn	_	_
26	6th	_	NNP	NNP	_	24	pobj	_	_
27	to	_	TO	TO	_	26	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	11th	_	NN	NN	_	27	pobj	_	_
30	at	_	IN	IN	_	29	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	invitation	_	NN	NN	_	30	pobj	_	_
33	of	_	IN	IN	_	32	prep	_	_
34	Peng	_	NNP	NNP	_	35	nn	_	_
35	Li	_	NNP	NNP	_	33	pobj	_	_
36	,	_	,	,	_	35	punct	_	_
37	premier	_	NN	NN	_	35	appos	_	_
38	of	_	IN	IN	_	37	prep	_	_
39	the	_	DT	DT	_	41	det	_	_
40	State	_	NNP	NNP	_	41	nn	_	_
41	Council	_	NNP	NNP	_	38	pobj	_	_
42	.	_	.	.	_	3	punct	_	_

Oracle:
(a / announce-01, ARG0, h / he)
(a / announce-01, ARG1, v / visit-01)
(a / announce-01, mod, a2 / also)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(f2 / friendly-41, ARG1, v / visit-01)
(g3 / government-organization, name, n5 / name)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, c4 / country)
(h2 / have-org-role-91, ARG2, p2 / premier)
(h3 / have-org-role-91, ARG0, p3 / person)
(h3 / have-org-role-91, ARG1, g3 / government-organization)
(h3 / have-org-role-91, ARG2, p4 / premier)
(i / invite-01, ARG0, p3 / person)
(i / invite-01, ARG2, v / visit-01)
(n / name, op, "Auye")
(n / name, op, "Casymier")
(n / name, op, "Muba")
(n2 / name, op, "Gabon")
(n2 / name, op, "Republic")
(n3 / name, op, "China")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(n5 / name, op, "Council")
(n5 / name, op, "State")
(p / person, name, n / name)
(p3 / person, name, n4 / name)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, c5 / country)
(v / visit-01, mod, f / formal)

Input(Some(Graph((announce-01 :mod also :ARG1 (visit-01 :ARG2-of (invite-01 :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 premier :ARG1 (government-organization :name (name :op "Council" :op "State"))) :name (name :op "Li" :op "Peng"))) :duration (date-interval :op (date-entity :month 9 :day 6) :op (date-entity :month 9 :day 11)) :ARG1-of friendly-41 :mod formal :ARG1 (country :name (name :op "China")) :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 premier :ARG1 (country :name (name :op "Republic" :op "Gabon"))) :name (name :op "Muba" :op "Auye" :op "Casymier"))) :ARG0 he),ArrayBuffer(Span(4,7,List(0, 1, 2, 3, 4),Casymier Auye Muba,(person :name (name :op "Muba" :op "Auye" :op "Casymier")),false), Span(11,13,List(5, 6, 7, 8),Gabon Republic,(country :name (name :op "Republic" :op "Gabon")),false), Span(22,23,List(9, 10, 11),China,(country :name (name :op "China")),false), Span(33,35,List(12, 13, 14, 15),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(39,41,List(16, 17, 18, 19),State Council,(government-organization :name (name :op "Council" :op "State")),false), Span(2,3,List(20),announced,announce-01,false), Span(1,2,List(21),also,also,false), Span(20,21,List(22),visit,visit-01,false), Span(8,9,List(23, 24),premier,(have-org-role-91 :ARG2 premier),false), Span(24,25,List(25),September,9,false), Span(19,20,List(26),friendly,friendly-41,false), Span(17,18,List(27),formal,formal,false), Span(36,37,List(28, 29),premier,(have-org-role-91 :ARG2 premier),false), Span(0,1,List(30),He,he,false), Span(31,32,List(31),invitation,invite-01,false)),Map(30 -> he, 2 -> "Muba", 5 -> country, 27 -> formal, 12 -> person, 15 -> "Peng", 8 -> "Gabon", 21 -> also, 18 -> "Council", 24 -> premier, 7 -> "Republic", 17 -> name, 1 -> name, 23 -> have-org-role-91, 26 -> friendly-41, 4 -> "Casymier", 11 -> "China", 14 -> "Li", 29 -> premier, 20 -> announce-01, 28 -> have-org-role-91, 6 -> name, 9 -> country, 0 -> person, 22 -> visit-01, 16 -> government-organization, 19 -> "State", 10 -> name, 3 -> "Auye", 31 -> invite-01, 25 -> 9, 13 -> name),Map(n -> name, h -> he, g3 -> government-organization, h2 -> have-org-role-91, p2 -> premier, n4 -> name, c4 -> country, v -> visit-01, p -> person, a -> announce-01, n3 -> name, p4 -> premier, i -> invite-01, a2 -> also, h3 -> have-org-role-91, f2 -> friendly-41, 9 -> 9, f -> formal, p3 -> person, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@51399530,Annotation([Ljava.lang.String;@6b2ea799,[Ljava.lang.String;@411f53a0,[Ljava.lang.String;@2b71e916),Annotation([Ljava.lang.String;@36fc695d,[Ljava.lang.String;@28701274,[Ledu.cmu.lti.nlp.amr.Dependency;@13c9d689),Annotation([Ljava.lang.String;@3754a4bf,[Ljava.lang.String;@62379589,[Ljava.lang.String;@4afcd809),Annotation([Ljava.lang.String;@175c2241,[Ljava.lang.String;@5bf0d49,[Ledu.cmu.lti.nlp.amr.Entity;@5b7a5baa))
AMR:
(a / announce-01, ARG0, h / he)
(a / announce-01, ARG1, v / visit-01)
(a / announce-01, mod, a2 / also)
(c4 / country, name, n2 / name)
(c5 / country, location, 9 / 9)
(c5 / country, name, n3 / name)
(f2 / friendly-41, ARG1, v / visit-01)
(g3 / government-organization, name, n5 / name)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, g3 / government-organization)
(h2 / have-org-role-91, ARG2, p2 / premier)
(h3 / have-org-role-91, ARG0, p3 / person)
(h3 / have-org-role-91, ARG1, c4 / country)
(h3 / have-org-role-91, ARG2, p4 / premier)
(i / invite-01, ARG0, p3 / person)
(i / invite-01, ARG1, p / person)
(n / name, op, "Auye")
(n / name, op, "Casymier")
(n / name, op, "Muba")
(n2 / name, op, "Gabon")
(n2 / name, op, "Republic")
(n3 / name, op, "China")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(n5 / name, op, "Council")
(n5 / name, op, "State")
(p / person, name, n / name)
(p3 / person, name, n4 / name)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, c5 / country)
(v / visit-01, mod, f / formal)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.5.0
WARNING: makeIds can't find span Id: 0.1.5.0.0
WARNING: makeIds can't find span Id: 0.1.5.0.0.1
WARNING: makeIds can't find span Id: 0.1.5.0.0.0
WARNING: makeIds can't find span Id: 0.1.5.0.1.0
WARNING: makeIds can't find span Id: 0.1.5.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.5.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.5.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.5.0.1
WARNING: makeIds can't find span Id: 0.1.5.0.1.1
WARNING: makeIds can't find span Id: 0.1.4.0.0
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.5
Decoded in 1,680,187 microseconds
Sentence: At the invitation of Peng Li , premier of the State Council , premier and first vice-president of the Tanzania United Republic , John Malsela will pay an official visit to China from September 9th to the 13th .

Oracle Span 1:  and => (have-org-role-91 :ARG2 and)
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  invitation => invite-01
Oracle Span 4:  John Malsela => (person :name (name :op "Malsela" :op "John"))
Oracle Span 5:  official => official
Oracle Span 6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 8:  premier => premier
Oracle Span 9:  president => president
Oracle Span 10:  September => 9
Oracle Span 11:  State Council => (government-organization :name (name :op "Council" :op "State"))
Oracle Span 12:  Tanzania United Republic => (country :name (name :op "Republic" :op "United" :op "Tanzania"))
Oracle Span 13:  vice => vice
Oracle Span 14:  visit => visit-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (organization :name (name :op "State" :op "Council"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 14-15:  and => (have-org-role-91 :ARG2 and)
Span 33-34:  China => (country :name (name :op "China"))
Span 2-3:  invitation => invite-01
Span 25-27:  John Malsela => (person :name (name :op "Malsela" :op "John"))
Span 30-31:  official => official
Span 4-6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 7-8:  premier => (have-org-role-91 :ARG2 premier)
Span 13-14:  premier => premier
Span 18-19:  president => president
Span 35-36:  September => 9
Span 10-12:  State Council => (government-organization :name (name :op "Council" :op "State"))
Span 21-24:  Tanzania United Republic => (country :name (name :op "Republic" :op "United" :op "Tanzania"))
Span 16-17:  vice => vice
Span 31-32:  visit => visit-01

Langrangian relaxation converged after 31 iterations. Delta = 0.0
Oracle Span 14-15:  and => (have-org-role-91 :ARG2 and)
Oracle Span 33-34:  China => (country :name (name :op "China"))
Oracle Span 2-3:  invitation => invite-01
Oracle Span 25-27:  John Malsela => (person :name (name :op "Malsela" :op "John"))
Oracle Span 30-31:  official => official
Oracle Span 4-6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7-8:  premier => (have-org-role-91 :ARG2 premier)
Oracle Span 13-14:  premier => premier
Oracle Span 18-19:  president => president
Oracle Span 35-36:  September => 9
Oracle Span 10-12:  State Council => (government-organization :name (name :op "Council" :op "State"))
Oracle Span 21-24:  Tanzania United Republic => (country :name (name :op "Republic" :op "United" :op "Tanzania"))
Oracle Span 16-17:  vice => vice
Oracle Span 31-32:  visit => visit-01

Dependencies:
1	At	_	IN	IN	_	27	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	invitation	_	NN	NN	_	1	pobj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	Peng	_	NNP	NNP	_	6	nn	_	_
6	Li	_	NNP	NNP	_	4	pobj	_	_
7	,	_	,	,	_	3	punct	_	_
8	premier	_	NN	NN	_	3	conj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	State	_	NNP	NNP	_	12	nn	_	_
12	Council	_	NNP	NNP	_	9	pobj	_	_
13	,	_	,	,	_	12	punct	_	_
14	premier	_	NN	NN	_	12	appos	_	_
15	and	_	CC	CC	_	3	cc	_	_
16	first	_	JJ	JJ	_	17	amod	_	_
17	vice-president	_	NN	NN	_	3	conj	_	_
18	of	_	IN	IN	_	17	prep	_	_
19	the	_	DT	DT	_	22	det	_	_
20	Tanzania	_	NNP	NNP	_	22	nn	_	_
21	United	_	NNP	NNP	_	22	nn	_	_
22	Republic	_	NNP	NNP	_	18	pobj	_	_
23	,	_	,	,	_	27	punct	_	_
24	John	_	NNP	NNP	_	25	nn	_	_
25	Malsela	_	NNP	NNP	_	27	nsubj	_	_
26	will	_	MD	MD	_	27	aux	_	_
27	pay	_	VB	VB	_	0	root	_	_
28	an	_	DT	DT	_	30	det	_	_
29	official	_	JJ	JJ	_	30	amod	_	_
30	visit	_	NN	NN	_	27	dobj	_	_
31	to	_	TO	TO	_	27	prep	_	_
32	China	_	NNP	NNP	_	31	pobj	_	_
33	from	_	IN	IN	_	27	prep	_	_
34	September	_	NNP	NNP	_	35	nn	_	_
35	9th	_	NNP	NNP	_	33	pobj	_	_
36	to	_	TO	TO	_	35	prep	_	_
37	the	_	DT	DT	_	38	det	_	_
38	13th	_	NN	NN	_	36	pobj	_	_
39	.	_	.	.	_	27	punct	_	_

Oracle:
(a / and, op, p5 / premier)
(a / and, op, p6 / president)
(c3 / country, name, n2 / name)
(c4 / country, name, n3 / name)
(g2 / government-organization, name, n5 / name)
(h / have-org-role-91, ARG0, p4 / person)
(h / have-org-role-91, ARG1, c3 / country)
(h / have-org-role-91, ARG2, a / and)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, g2 / government-organization)
(h2 / have-org-role-91, ARG2, p2 / premier)
(i / invite-01, ARG0, p / person)
(i / invite-01, ARG2, v / visit-01)
(n / name, op, "John")
(n / name, op, "Malsela")
(n2 / name, op, "Republic")
(n2 / name, op, "Tanzania")
(n2 / name, op, "United")
(n3 / name, op, "China")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(n5 / name, op, "Council")
(n5 / name, op, "State")
(p / person, name, n4 / name)
(p4 / person, name, n / name)
(p6 / president, mod, v2 / vice)
(v / visit-01, ARG0, p4 / person)
(v / visit-01, ARG1, c4 / country)
(v / visit-01, mod, o2 / official)

Input(Some(Graph((visit-01 :ARG2-of (invite-01 :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 premier :ARG1 (government-organization :name (name :op "Council" :op "State"))) :name (name :op "Li" :op "Peng"))) :mod official :duration (date-interval :op (date-entity :month 9 :day 9) :op (date-entity :month 9 :day 13)) :ARG1 (country :name (name :op "China")) :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 (and :op (president :ord (ordinal-entity :value 1) :mod vice) :op premier) :ARG1 (country :name (name :op "Republic" :op "United" :op "Tanzania"))) :name (name :op "Malsela" :op "John"))),ArrayBuffer(Span(25,27,List(0, 1, 2, 3),John Malsela,(person :name (name :op "Malsela" :op "John")),false), Span(21,24,List(4, 5, 6, 7, 8),Tanzania United Republic,(country :name (name :op "Republic" :op "United" :op "Tanzania")),false), Span(33,34,List(9, 10, 11),China,(country :name (name :op "China")),false), Span(4,6,List(12, 13, 14, 15),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(10,12,List(16, 17, 18, 19),State Council,(government-organization :name (name :op "Council" :op "State")),false), Span(31,32,List(20),visit,visit-01,false), Span(7,8,List(21, 22),premier,(have-org-role-91 :ARG2 premier),false), Span(30,31,List(23),official,official,false), Span(35,36,List(24),September,9,false), Span(14,15,List(25, 26),and,(have-org-role-91 :ARG2 and),false), Span(18,19,List(27),president,president,false), Span(16,17,List(28),vice,vice,false), Span(13,14,List(29),premier,premier,false), Span(2,3,List(30),invitation,invite-01,false)),Map(30 -> invite-01, 2 -> "Malsela", 5 -> name, 27 -> president, 12 -> person, 15 -> "Peng", 8 -> "Tanzania", 21 -> have-org-role-91, 18 -> "Council", 24 -> 9, 7 -> "United", 17 -> name, 1 -> name, 23 -> official, 26 -> and, 4 -> country, 11 -> "China", 14 -> "Li", 29 -> premier, 20 -> visit-01, 28 -> vice, 6 -> "Republic", 9 -> country, 0 -> person, 22 -> premier, 16 -> government-organization, 19 -> "State", 10 -> name, 3 -> "John", 25 -> have-org-role-91, 13 -> name),Map(v2 -> vice, n -> name, h -> have-org-role-91, p5 -> premier, h2 -> have-org-role-91, p2 -> premier, n4 -> name, c4 -> country, v -> visit-01, g2 -> government-organization, p -> person, a -> and, n3 -> name, c3 -> country, p4 -> person, o2 -> official, i -> invite-01, p6 -> president, 9 -> 9, n2 -> name, n5 -> name))),[Ljava.lang.String;@776aec5c,Annotation([Ljava.lang.String;@1d296da,[Ljava.lang.String;@7c7a06ec,[Ljava.lang.String;@75d4a5c2),Annotation([Ljava.lang.String;@557caf28,[Ljava.lang.String;@408d971b,[Ledu.cmu.lti.nlp.amr.Dependency;@6c6cb480),Annotation([Ljava.lang.String;@3c46e67a,[Ljava.lang.String;@c730b35,[Ljava.lang.String;@206a70ef),Annotation([Ljava.lang.String;@292b08d6,[Ljava.lang.String;@22555ebf,[Ledu.cmu.lti.nlp.amr.Entity;@36ebc363))
AMR:
(a / and, op, p6 / president)
(c3 / country, name, n2 / name)
(c4 / country, location, 9 / 9)
(c4 / country, name, n3 / name)
(g2 / government-organization, location, p5 / premier)
(g2 / government-organization, name, n5 / name)
(h / have-org-role-91, ARG1, g2 / government-organization)
(h / have-org-role-91, ARG2, a / and)
(h2 / have-org-role-91, ARG0, p4 / person)
(h2 / have-org-role-91, ARG1, g2 / government-organization)
(h2 / have-org-role-91, ARG2, p2 / premier)
(i / invite-01, ARG0, p / person)
(i / invite-01, ARG1, p4 / person)
(n / name, op, "John")
(n / name, op, "Malsela")
(n2 / name, op, "Republic")
(n2 / name, op, "Tanzania")
(n2 / name, op, "United")
(n3 / name, op, "China")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(n5 / name, op, "Council")
(n5 / name, op, "State")
(p / person, name, n4 / name)
(p4 / person, name, n / name)
(p6 / president, mod, v2 / vice)
(p6 / president, poss, c3 / country)
(v / visit-01, ARG0, p4 / person)
(v / visit-01, ARG1, c4 / country)
(v / visit-01, mod, o2 / official)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.4.0.0
WARNING: makeIds can't find span Id: 0.4.0.0.1
WARNING: makeIds can't find span Id: 0.4.0.0.0
WARNING: makeIds can't find span Id: 0.4.0.1.0
WARNING: makeIds can't find span Id: 0.4.0.1.0.0
WARNING: makeIds can't find span Id: 0.4.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.4.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.4.0.1
WARNING: makeIds can't find span Id: 0.4.0.1.1
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.4
Decoded in 1,250,284 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 1-2:  End => end-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(end-01,ArrayBuffer(Span(1,2,List(0),End,end-01,false)),Map(0 -> end-01),Map(e -> end-01))),[Ljava.lang.String;@45752059,Annotation([Ljava.lang.String;@34e9fd99,[Ljava.lang.String;@3c41ed1d,[Ljava.lang.String;@54d9d12d),Annotation([Ljava.lang.String;@38425407,[Ljava.lang.String;@43bc63a3,[Ledu.cmu.lti.nlp.amr.Dependency;@702657cc),Annotation([Ljava.lang.String;@6a6cb05c,[Ljava.lang.String;@40a4337a,[Ljava.lang.String;@6025e1b6),Annotation([Ljava.lang.String;@22ff4249,[Ljava.lang.String;@2d1ef81a,[Ledu.cmu.lti.nlp.amr.Entity;@4c402120))
AMR:


Decoded in 3,863 microseconds
Sentence: Xinhua News Agency , Bishket , April 23rd , by reporters Menjun Ju and Xiaoguang Hu

Oracle Span 1:  and => and
Oracle Span 2:  April => 4
Oracle Span 3:  Bishket => (city :name (name :op "Bishket"))
Oracle Span 4:  Menjun Ju => (person :name (name :op "Ju" :op "Menjun"))
Oracle Span 5:  reporters => report-01
Oracle Span 6:  Xiaoguang Hu => (person :name (name :op "Hu" :op "Xiaoguang"))
Oracle Span 7:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Menjun" :op "Ju"))
NER Entity: (person :name (name :op "Xiaoguang" :op "Hu"))
Spans:
Span 13-14:  and => and
Span 6-7:  April => 4
Span 4-5:  Bishket => (city :name (name :op "Bishket"))
Span 11-13:  Menjun Ju => (person :name (name :op "Ju" :op "Menjun"))
Span 10-11:  reporters => report-01
Span 14-16:  Xiaoguang Hu => (person :name (name :op "Hu" :op "Xiaoguang"))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Langrangian relaxation converged after 17 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 6-7:  April => 4
Oracle Span 4-5:  Bishket => (city :name (name :op "Bishket"))
Oracle Span 11-13:  Menjun Ju => (person :name (name :op "Ju" :op "Menjun"))
Oracle Span 10-11:  reporters => report-01
Oracle Span 14-16:  Xiaoguang Hu => (person :name (name :op "Hu" :op "Xiaoguang"))
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Bishket	_	NNP	NNP	_	3	appos	_	_
6	,	_	,	,	_	3	punct	_	_
7	April	_	NNP	NNP	_	8	nn	_	_
8	23rd	_	NNP	NNP	_	3	appos	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporters	_	NNS	NNS	_	10	pobj	_	_
12	Menjun	_	NNP	NNP	_	13	nn	_	_
13	Ju	_	NNP	NNP	_	3	dep	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	Xiaoguang	_	NNP	NNP	_	16	nn	_	_
16	Hu	_	NNP	NNP	_	13	conj	_	_

Oracle:
(a / and, op, p / person)
(a / and, op, p2 / person)
(c2 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Ju")
(n2 / name, op, "Menjun")
(n3 / name, op, "Hu")
(n3 / name, op, "Xiaoguang")
(n4 / name, op, "Bishket")
(p / person, name, n2 / name)
(p2 / person, name, n3 / name)
(p3 / publication, name, n / name)
(r / report-01, ARG0, p / person)
(r / report-01, ARG0, p2 / person)

Input(Some(Graph((byline-91 :ARG0 (publication :name (name :op "Agency" :op "News" :op "Xinhua")) :ARG1 (and :op (person :name (name :op "Hu" :op "Xiaoguang") :ARG0-of report-01) :op (person :ARG0-of report-01 :name (name :op "Ju" :op "Menjun"))) :location (city :name (name :op "Bishket")) :time (date-entity :month 4 :day 23)),ArrayBuffer(Span(0,3,List(0, 1, 2, 3, 4),Xinhua News Agency,(publication :name (name :op "Agency" :op "News" :op "Xinhua")),false), Span(11,13,List(5, 6, 7, 8),Menjun Ju,(person :name (name :op "Ju" :op "Menjun")),false), Span(14,16,List(9, 10, 11, 12),Xiaoguang Hu,(person :name (name :op "Hu" :op "Xiaoguang")),false), Span(4,5,List(13, 14, 15),Bishket,(city :name (name :op "Bishket")),false), Span(13,14,List(16),and,and,false), Span(10,11,List(17),reporters,report-01,false), Span(6,7,List(18),April,4,false)),Map(2 -> "Agency", 5 -> person, 12 -> "Xiaoguang", 15 -> "Bishket", 8 -> "Menjun", 18 -> 4, 7 -> "Ju", 17 -> report-01, 1 -> name, 4 -> "Xinhua", 11 -> "Hu", 14 -> name, 6 -> name, 9 -> person, 0 -> publication, 16 -> and, 10 -> name, 3 -> "News", 13 -> city),Map(n -> name, p2 -> person, n4 -> name, p -> person, 4 -> 4, a -> and, n3 -> name, r -> report-01, c2 -> city, n2 -> name, p3 -> publication))),[Ljava.lang.String;@327514f,Annotation([Ljava.lang.String;@5b12b668,[Ljava.lang.String;@1165b38,[Ljava.lang.String;@4c12331b),Annotation([Ljava.lang.String;@7586beff,[Ljava.lang.String;@3b69e7d1,[Ledu.cmu.lti.nlp.amr.Dependency;@815b41f),Annotation([Ljava.lang.String;@5542c4ed,[Ljava.lang.String;@1573f9fc,[Ljava.lang.String;@6150c3ec),Annotation([Ljava.lang.String;@44c03695,[Ljava.lang.String;@7e6f74c,[Ledu.cmu.lti.nlp.amr.Entity;@dd05255))
AMR:
(a / and, op, c2 / city)
(a / and, op, p / person)
(a / and, op, p2 / person)
(c2 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Ju")
(n2 / name, op, "Menjun")
(n3 / name, op, "Hu")
(n3 / name, op, "Xiaoguang")
(n4 / name, op, "Bishket")
(p / person, name, n2 / name)
(p2 / person, name, n3 / name)
(p3 / publication, location, c2 / city)
(p3 / publication, name, n / name)
(r / report-01, ARG0, 4 / 4)
(r / report-01, ARG1, a / and)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.3.0
Decoded in 275,932 microseconds
Sentence: Principles of parties concerned from China and Kirghizia signed six documents here today .

Oracle Span 1:  and => and
Oracle Span 2:  China => (country :name (name :op "China"))
Oracle Span 3:  concerned => concern-01
Oracle Span 4:  documents => document
Oracle Span 5:  here => here
Oracle Span 6:  Kirghizia => (country :name (name :op "Kirghizia"))
Oracle Span 7:  parties => party
Oracle Span 8:  Principles => principle
Oracle Span 9:  signed => sign-01
Oracle Span 10:  six => 6
Oracle Span 11:  today => today
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kirghizia"))
Spans:
Span 6-7:  and => and
Span 5-6:  China => (country :name (name :op "China"))
Span 3-4:  concerned => concern-01
Span 10-11:  documents => document
Span 11-12:  here => here
Span 7-8:  Kirghizia => (country :name (name :op "Kirghizia"))
Span 2-3:  parties => party
Span 0-1:  Principles => principle
Span 8-9:  signed => sign-01
Span 9-10:  six => 6
Span 12-13:  today => today

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 6-7:  and => and
Oracle Span 5-6:  China => (country :name (name :op "China"))
Oracle Span 3-4:  concerned => concern-01
Oracle Span 10-11:  documents => document
Oracle Span 11-12:  here => here
Oracle Span 7-8:  Kirghizia => (country :name (name :op "Kirghizia"))
Oracle Span 2-3:  parties => party
Oracle Span 0-1:  Principles => principle
Oracle Span 8-9:  signed => sign-01
Oracle Span 9-10:  six => 6
Oracle Span 12-13:  today => today

Dependencies:
1	Principles	_	NNS	NNS	_	9	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	parties	_	NNS	NNS	_	2	pobj	_	_
4	concerned	_	VBN	VBN	_	3	vmod	_	_
5	from	_	IN	IN	_	4	prep	_	_
6	China	_	NNP	NNP	_	5	pobj	_	_
7	and	_	CC	CC	_	6	cc	_	_
8	Kirghizia	_	NNP	NNP	_	6	conj	_	_
9	signed	_	VBD	VBD	_	0	root	_	_
10	six	_	CD	CD	_	11	num	_	_
11	documents	_	NNS	NNS	_	12	npadvmod	_	_
12	here	_	RB	RB	_	9	advmod	_	_
13	today	_	NN	NN	_	9	tmod	_	_
14	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, c4 / country)
(a / and, op, c5 / country)
(c3 / concern-01, ARG1, p2 / party)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(d / document, quant, 6 / 6)
(n / name, op, "China")
(n2 / name, op, "Kirghizia")
(p / principle, poss, p2 / party)
(p2 / party, source, a / and)
(s / sign-01, ARG0, p / principle)
(s / sign-01, ARG1, d / document)
(s / sign-01, location, h / here)
(s / sign-01, time, t / today)

Input(Some(Graph((sign-01 :location here :time today :ARG1 (document :quant 6) :ARG0 (principle :poss (party :source (and :op (country :name (name :op "Kirghizia")) :op (country :name (name :op "China"))) :ARG1-of concern-01))),ArrayBuffer(Span(5,6,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(7,8,List(3, 4, 5),Kirghizia,(country :name (name :op "Kirghizia")),false), Span(8,9,List(6),signed,sign-01,false), Span(11,12,List(7),here,here,false), Span(12,13,List(8),today,today,false), Span(10,11,List(9),documents,document,false), Span(9,10,List(10),six,6,false), Span(0,1,List(11),Principles,principle,false), Span(2,3,List(12),parties,party,false), Span(6,7,List(13),and,and,false), Span(3,4,List(14),concerned,concern-01,false)),Map(2 -> "China", 5 -> "Kirghizia", 12 -> party, 8 -> today, 7 -> here, 1 -> name, 4 -> name, 11 -> principle, 14 -> concern-01, 6 -> sign-01, 9 -> document, 0 -> country, 10 -> 6, 3 -> country, 13 -> and),Map(n -> name, h -> here, t -> today, p2 -> party, c4 -> country, s -> sign-01, d -> document, p -> principle, a -> and, c3 -> concern-01, 6 -> 6, n2 -> name, c5 -> country))),[Ljava.lang.String;@6a78afa0,Annotation([Ljava.lang.String;@2f4948e4,[Ljava.lang.String;@1f2586d6,[Ljava.lang.String;@10683d9d),Annotation([Ljava.lang.String;@3fc2959f,[Ljava.lang.String;@5aa9e4eb,[Ledu.cmu.lti.nlp.amr.Dependency;@6989da5e),Annotation([Ljava.lang.String;@385c9627,[Ljava.lang.String;@139982de,[Ljava.lang.String;@682b2fa),Annotation([Ljava.lang.String;@217ed35e,[Ljava.lang.String;@7dcf94f8,[Ledu.cmu.lti.nlp.amr.Entity;@229f66ed))
AMR:
(a / and, op, c5 / country)
(a / and, op, d / document)
(a / and, op, p / principle)
(c3 / concern-01, ARG0, c4 / country)
(c3 / concern-01, ARG1, p2 / party)
(c3 / concern-01, ARG2, a / and)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(d / document, quant, 6 / 6)
(n / name, op, "China")
(n2 / name, op, "Kirghizia")
(p / principle, location, h / here)
(s / sign-01, ARG0, a / and)
(s / sign-01, ARG1, t / today)

WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 248,034 microseconds
Sentence: Premier Peng Li and Kirghizian President Akayev attended the signing ceremony .

Oracle Span 1:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 2:  and => and
Oracle Span 3:  attended => attend-01
Oracle Span 4:  ceremony => ceremony
Oracle Span 5:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 8:  President => (have-org-role-91 :ARG2 president)
Oracle Span 9:  signing => sign-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (person :name (name :op "Akayev"))
Spans:
Span 6-7:  Akayev => (person :name (name :op "Akayev"))
Span 3-4:  and => and
Span 7-8:  attended => attend-01
Span 10-11:  ceremony => ceremony
Span 4-5:  Kirghizian => (country :name (name :op "Kirghizia"))
Span 1-3:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 0-1:  Premier => (have-org-role-91 :ARG2 premier)
Span 5-6:  President => (have-org-role-91 :ARG2 president)
Span 9-10:  signing => sign-01

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 6-7:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 3-4:  and => and
Oracle Span 7-8:  attended => attend-01
Oracle Span 10-11:  ceremony => ceremony
Oracle Span 4-5:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 1-3:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 0-1:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 5-6:  President => (have-org-role-91 :ARG2 president)
Oracle Span 9-10:  signing => sign-01

Dependencies:
1	Premier	_	NNP	NNP	_	3	nn	_	_
2	Peng	_	NNP	NNP	_	3	nn	_	_
3	Li	_	NNP	NNP	_	8	nsubj	_	_
4	and	_	CC	CC	_	3	cc	_	_
5	Kirghizian	_	NNP	NNP	_	7	nn	_	_
6	President	_	NNP	NNP	_	7	nn	_	_
7	Akayev	_	NNP	NNP	_	3	conj	_	_
8	attended	_	VBD	VBD	_	0	root	_	_
9	the	_	DT	DT	_	11	det	_	_
10	signing	_	NN	NN	_	11	nn	_	_
11	ceremony	_	NN	NN	_	8	dobj	_	_
12	.	_	.	.	_	8	punct	_	_

Oracle:
(a2 / attend-01, ARG0, a3 / and)
(a2 / attend-01, ARG1, c2 / ceremony)
(a3 / and, op, p / person)
(a3 / and, op, p3 / person)
(c / country, name, n4 / name)
(c2 / ceremony, mod, s / sign-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / premier)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, p4 / president)
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(n3 / name, op, "Akayev")
(n4 / name, op, "Kirghizia")
(p / person, name, n2 / name)
(p3 / person, name, n3 / name)

Input(Some(Graph((attend-01 :ARG1 (ceremony :mod sign-01) :ARG0 (and :op (person :ARG0-of (have-org-role-91 :ARG2 president :ARG1 (country :name (name :op "Kirghizia"))) :name (name :op "Akayev")) :op (person :ARG0-of (have-org-role-91 :ARG2 premier) :name (name :op "Li" :op "Peng")))),ArrayBuffer(Span(1,3,List(0, 1, 2, 3),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(6,7,List(4, 5, 6),Akayev,(person :name (name :op "Akayev")),false), Span(4,5,List(7, 8, 9),Kirghizian,(country :name (name :op "Kirghizia")),false), Span(7,8,List(10),attended,attend-01,false), Span(10,11,List(11),ceremony,ceremony,false), Span(9,10,List(12),signing,sign-01,false), Span(3,4,List(13),and,and,false), Span(5,6,List(14, 15),President,(have-org-role-91 :ARG2 president),false), Span(0,1,List(16, 17),Premier,(have-org-role-91 :ARG2 premier),false)),Map(2 -> "Li", 5 -> name, 12 -> sign-01, 15 -> president, 8 -> name, 7 -> country, 17 -> premier, 1 -> name, 4 -> person, 11 -> ceremony, 14 -> have-org-role-91, 6 -> "Akayev", 9 -> "Kirghizia", 0 -> person, 16 -> have-org-role-91, 10 -> attend-01, 3 -> "Peng", 13 -> and),Map(h -> have-org-role-91, h2 -> have-org-role-91, p2 -> premier, a3 -> and, n4 -> name, s -> sign-01, p -> person, n3 -> name, p4 -> president, a2 -> attend-01, c -> country, p3 -> person, c2 -> ceremony, n2 -> name))),[Ljava.lang.String;@31190526,Annotation([Ljava.lang.String;@662ac478,[Ljava.lang.String;@6743e411,[Ljava.lang.String;@3eb25e1a),Annotation([Ljava.lang.String;@477b4cdf,[Ljava.lang.String;@77c2494c,[Ledu.cmu.lti.nlp.amr.Dependency;@f5958c9),Annotation([Ljava.lang.String;@233795b6,[Ljava.lang.String;@3eb738bb,[Ljava.lang.String;@5bda8e08),Annotation([Ljava.lang.String;@1e800aaa,[Ljava.lang.String;@185a6e9,[Ledu.cmu.lti.nlp.amr.Entity;@6f03482))
AMR:
(a2 / attend-01, ARG0, a3 / and)
(a2 / attend-01, ARG1, c2 / ceremony)
(a3 / and, op, p / person)
(c / country, name, n4 / name)
(c2 / ceremony, mod, s / sign-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / premier)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, p4 / president)
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(n3 / name, op, "Akayev")
(n4 / name, op, "Kirghizia")
(p / person, name, n2 / name)
(p3 / person, name, n3 / name)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
Decoded in 195,813 microseconds
Sentence: The six documents are : an agreement on Chinese providing a loan to the Kirghizia government , an agreement on forming a combined Economy and Trade Committee between the Sino - Kirghizian governments , an note exchange on the presenting of materials to Kirghizia by China , a cultural cooperation agreement between the two countries of China and Kirghizia , ratification letters on exchanging consular treaties between the two countries , an agreement on cooperating on the China Trade Promotion Council and the Kirghizian Chamber of Industry and Commerce .

Oracle Span 1:  agreement => agree-01
Oracle Span 2:  agreement => agree-01
Oracle Span 3:  agreement => agree-01
Oracle Span 4:  agreement => agree-01
Oracle Span 5:  and => and
Oracle Span 6:  and => and
Oracle Span 7:  Chamber of Industry and Commerce => (name :op "Commerce" :op "and" :op "Industry" :op "of" :op "Chamber")
Oracle Span 8:  China => (name :op "China")
Oracle Span 9:  combined => combine-01
Oracle Span 10:  consular => consul
Oracle Span 11:  cooperating => cooperate-01
Oracle Span 12:  countries => country
Oracle Span 13:  countries => country
Oracle Span 14:  cultural => culture
Oracle Span 15:  documents => document
Oracle Span 16:  Economy and Trade Committee => (government-organization :name (name :op "Committee" :op "Trade" :op "and" :op "Economy"))
Oracle Span 17:  exchange => exchange-01
Oracle Span 18:  exchanging => exchange-01
Oracle Span 19:  forming => form-01
Oracle Span 20:  government => government-organization
Oracle Span 21:  governments => government-organization
Oracle Span 22:  Kirghizia => (name :op "Kirghizia")
Oracle Span 23:  letters => letter
Oracle Span 24:  loan => loan-01
Oracle Span 25:  materials => material
Oracle Span 26:  note => note
Oracle Span 27:  of => include-91
Oracle Span 28:  presenting => present-01
Oracle Span 29:  ratification => ratify-01
Oracle Span 30:  six => 6
Oracle Span 31:  Trade Promotion Council => (name :op "Council" :op "Promotion" :op "Trade")
Oracle Span 32:  treaties => treaty
NER Entity: (country :name (name :op "Kirghizia"))
NER Entity: (country :name (name :op "China"))
Spans:
Span 6-7:  agreement => agree-01
Span 18-19:  agreement => agree-01
Span 50-51:  agreement => agree-01
Span 72-73:  agreement => agree-01
Span 57-58:  and => and
Span 81-82:  and => and
Span 84-89:  Chamber of Industry and Commerce => (name :op "Commerce" :op "and" :op "Industry" :op "of" :op "Chamber")
Span 45-46:  China => (name :op "China")
Span 22-23:  combined => combine-01
Span 64-65:  consular => consul
Span 74-75:  cooperating => cooperate-01
Span 54-55:  countries => country
Span 69-70:  countries => country
Span 48-49:  cultural => culture
Span 2-3:  documents => document
Span 23-27:  Economy and Trade Committee => (government-organization :name (name :op "Committee" :op "Trade" :op "and" :op "Economy"))
Span 36-37:  exchange => exchange-01
Span 63-64:  exchanging => exchange-01
Span 20-21:  forming => form-01
Span 15-16:  government => government-organization
Span 32-33:  governments => government-organization
Span 14-15:  Kirghizia => (name :op "Kirghizia")
Span 61-62:  letters => letter
Span 11-12:  loan => loan-01
Span 41-42:  materials => material
Span 35-36:  note => note
Span 40-41:  of => include-91
Span 39-40:  presenting => present-01
Span 60-61:  ratification => ratify-01
Span 1-2:  six => 6
Span 78-81:  Trade Promotion Council => (name :op "Council" :op "Promotion" :op "Trade")
Span 65-66:  treaties => treaty

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 6-7:  agreement => agree-01
Oracle Span 18-19:  agreement => agree-01
Oracle Span 50-51:  agreement => agree-01
Oracle Span 72-73:  agreement => agree-01
Oracle Span 57-58:  and => and
Oracle Span 81-82:  and => and
Oracle Span 84-89:  Chamber of Industry and Commerce => (name :op "Commerce" :op "and" :op "Industry" :op "of" :op "Chamber")
Oracle Span 45-46:  China => (name :op "China")
Oracle Span 22-23:  combined => combine-01
Oracle Span 64-65:  consular => consul
Oracle Span 74-75:  cooperating => cooperate-01
Oracle Span 54-55:  countries => country
Oracle Span 69-70:  countries => country
Oracle Span 48-49:  cultural => culture
Oracle Span 2-3:  documents => document
Oracle Span 23-27:  Economy and Trade Committee => (government-organization :name (name :op "Committee" :op "Trade" :op "and" :op "Economy"))
Oracle Span 36-37:  exchange => exchange-01
Oracle Span 63-64:  exchanging => exchange-01
Oracle Span 20-21:  forming => form-01
Oracle Span 15-16:  government => government-organization
Oracle Span 32-33:  governments => government-organization
Oracle Span 14-15:  Kirghizia => (name :op "Kirghizia")
Oracle Span 61-62:  letters => letter
Oracle Span 11-12:  loan => loan-01
Oracle Span 41-42:  materials => material
Oracle Span 35-36:  note => note
Oracle Span 40-41:  of => include-91
Oracle Span 39-40:  presenting => present-01
Oracle Span 60-61:  ratification => ratify-01
Oracle Span 1-2:  six => 6
Oracle Span 78-81:  Trade Promotion Council => (name :op "Council" :op "Promotion" :op "Trade")
Oracle Span 65-66:  treaties => treaty

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	six	_	CD	CD	_	3	num	_	_
3	documents	_	NNS	NNS	_	7	nsubj	_	_
4	are	_	VBP	VBP	_	7	cop	_	_
5	:	_	:	:	_	7	punct	_	_
6	an	_	DT	DT	_	7	det	_	_
7	agreement	_	NN	NN	_	0	root	_	_
8	on	_	IN	IN	_	7	prep	_	_
9	Chinese	_	NNP	NNP	_	8	pobj	_	_
10	providing	_	VBG	VBG	_	9	vmod	_	_
11	a	_	DT	DT	_	12	det	_	_
12	loan	_	NN	NN	_	10	dobj	_	_
13	to	_	TO	TO	_	10	prep	_	_
14	the	_	DT	DT	_	16	det	_	_
15	Kirghizia	_	NNP	NNP	_	16	nn	_	_
16	government	_	NN	NN	_	13	pobj	_	_
17	,	_	,	,	_	9	punct	_	_
18	an	_	DT	DT	_	19	det	_	_
19	agreement	_	NN	NN	_	9	conj	_	_
20	on	_	IN	IN	_	19	prep	_	_
21	forming	_	VBG	VBG	_	20	pcomp	_	_
22	a	_	DT	DT	_	24	det	_	_
23	combined	_	JJ	JJ	_	24	amod	_	_
24	Economy	_	NN	NN	_	21	dobj	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	Trade	_	NNP	NNP	_	27	nn	_	_
27	Committee	_	NNP	NNP	_	24	conj	_	_
28	between	_	IN	IN	_	27	prep	_	_
29	the	_	DT	DT	_	30	det	_	_
30	Sino	_	NNP	NNP	_	28	pobj	_	_
31	-	_	:	:	_	27	punct	_	_
32	Kirghizian	_	JJ	JJ	_	33	amod	_	_
33	governments	_	NNS	NNS	_	27	dep	_	_
34	,	_	,	,	_	33	punct	_	_
35	an	_	DT	DT	_	37	det	_	_
36	note	_	NN	NN	_	37	nn	_	_
37	exchange	_	NN	NN	_	33	appos	_	_
38	on	_	IN	IN	_	21	prep	_	_
39	the	_	DT	DT	_	40	det	_	_
40	presenting	_	NN	NN	_	38	pobj	_	_
41	of	_	IN	IN	_	40	prep	_	_
42	materials	_	NNS	NNS	_	41	pobj	_	_
43	to	_	TO	TO	_	42	prep	_	_
44	Kirghizia	_	NNP	NNP	_	43	pobj	_	_
45	by	_	IN	IN	_	21	prep	_	_
46	China	_	NNP	NNP	_	45	pobj	_	_
47	,	_	,	,	_	9	punct	_	_
48	a	_	DT	DT	_	51	det	_	_
49	cultural	_	JJ	JJ	_	51	amod	_	_
50	cooperation	_	NN	NN	_	51	nn	_	_
51	agreement	_	NN	NN	_	9	conj	_	_
52	between	_	IN	IN	_	51	prep	_	_
53	the	_	DT	DT	_	55	det	_	_
54	two	_	CD	CD	_	55	num	_	_
55	countries	_	NNS	NNS	_	52	pobj	_	_
56	of	_	IN	IN	_	55	prep	_	_
57	China	_	NNP	NNP	_	56	pobj	_	_
58	and	_	CC	CC	_	57	cc	_	_
59	Kirghizia	_	NNP	NNP	_	57	conj	_	_
60	,	_	,	,	_	9	punct	_	_
61	ratification	_	NN	NN	_	62	nn	_	_
62	letters	_	NNS	NNS	_	9	conj	_	_
63	on	_	IN	IN	_	62	prep	_	_
64	exchanging	_	JJ	JJ	_	66	amod	_	_
65	consular	_	NN	NN	_	66	nn	_	_
66	treaties	_	NNS	NNS	_	63	pobj	_	_
67	between	_	IN	IN	_	66	prep	_	_
68	the	_	DT	DT	_	70	det	_	_
69	two	_	CD	CD	_	70	num	_	_
70	countries	_	NNS	NNS	_	67	pobj	_	_
71	,	_	,	,	_	9	punct	_	_
72	an	_	DT	DT	_	73	det	_	_
73	agreement	_	NN	NN	_	9	conj	_	_
74	on	_	IN	IN	_	73	prep	_	_
75	cooperating	_	VBG	VBG	_	74	pcomp	_	_
76	on	_	IN	IN	_	75	prep	_	_
77	the	_	DT	DT	_	81	det	_	_
78	China	_	NNP	NNP	_	81	nn	_	_
79	Trade	_	NNP	NNP	_	81	nn	_	_
80	Promotion	_	NNP	NNP	_	81	nn	_	_
81	Council	_	NNP	NNP	_	76	pobj	_	_
82	and	_	CC	CC	_	9	cc	_	_
83	the	_	DT	DT	_	85	det	_	_
84	Kirghizian	_	NNP	NNP	_	85	nn	_	_
85	Chamber	_	NNP	NNP	_	9	conj	_	_
86	of	_	IN	IN	_	85	prep	_	_
87	Industry	_	NNP	NNP	_	86	pobj	_	_
88	and	_	CC	CC	_	87	cc	_	_
89	Commerce	_	NNP	NNP	_	87	conj	_	_
90	.	_	.	.	_	7	punct	_	_

Oracle:
(a / and, op, a2 / agree-01)
(a / and, op, a3 / agree-01)
(a / and, op, a5 / agree-01)
(a / and, op, a7 / agree-01)
(a / and, op, e2 / exchange-01)
(a / and, op, l2 / letter)
(a2 / agree-01, ARG1, l / loan-01)
(a3 / agree-01, ARG1, f / form-01)
(a7 / agree-01, ARG1, c11 / cooperate-01)
(a8 / and, op, g10 / government-organization)
(a8 / and, op, g9 / government-organization)
(c11 / cooperate-01, ARG2, a8 / and)
(c5 / country, name, n4 / name)
(c6 / combine-01, ARG3, g4 / government-organization)
(c7 / country, name, n6 / name)
(d / document, quant, 6 / 6)
(e2 / exchange-01, mod, n7 / note)
(e2 / exchange-01, topic, p3 / present-01)
(e3 / exchange-01, ARG0, c7 / country)
(e3 / exchange-01, ARG1, t / treaty)
(e3 / exchange-01, ARG2, c5 / country)
(f / form-01, ARG1, g4 / government-organization)
(g10 / government-organization, name, n9 / name)
(g10 / government-organization, poss, c5 / country)
(g4 / government-organization, name, n5 / name)
(g9 / government-organization, name, n8 / name)
(g9 / government-organization, poss, c7 / country)
(i / include-91, ARG1, a / and)
(i / include-91, ARG2, d / document)
(l2 / letter, topic, e3 / exchange-01)
(n4 / name, op, "Kirghizia")
(n5 / name, op, "Committee")
(n5 / name, op, "Economy")
(n5 / name, op, "Trade")
(n5 / name, op, "and")
(n6 / name, op, "China")
(n8 / name, op, "Council")
(n8 / name, op, "Promotion")
(n8 / name, op, "Trade")
(n9 / name, op, "Chamber")
(n9 / name, op, "Commerce")
(n9 / name, op, "Industry")
(n9 / name, op, "and")
(n9 / name, op, "of")
(p3 / present-01, ARG0, c7 / country)
(p3 / present-01, ARG1, m / material)
(p3 / present-01, ARG2, c5 / country)
(r / ratify-01, ARG0, l2 / letter)
(t / treaty, mod, c10 / consul)

Input(Some(Graph((include-91 :ARG2 (document :quant 6) :ARG1 (and :op (agree-01 :ARG1 (cooperate-01 :ARG2 (and :op (government-organization :name (name :op "Commerce" :op "and" :op "Industry" :op "of" :op "Chamber") :poss country) :op (government-organization :name (name :op "Council" :op "Promotion" :op "Trade") :poss country)))) :op (letter :topic (exchange-01 :ARG1 (treaty :mod consul) :ARG0 country :ARG2 country) :ARG0-of ratify-01) :op (agree-01 :ARG1 (cooperate-01 :ARG1 culture :ARG0 country :ARG2 country) :ARG0 (and :op country :op country)) :op (exchange-01 :topic (present-01 :ARG1 material :ARG0 country :ARG2 country) :mod note) :op (agree-01 :ARG1 (form-01 :ARG1 (government-organization :ARG3-of combine-01 :name (name :op "Committee" :op "Trade" :op "and" :op "Economy")) :ARG0 (and :op (government-organization :ARG0-of (govern-01 :ARG1 (country :name (name :op "China")))) :op (government-organization :ARG0-of (govern-01 :ARG1 country))))) :op (agree-01 :ARG1 (loan-01 :ARG2 (government-organization :ARG0-of (govern-01 :ARG1 (country :name (name :op "Kirghizia")))) :ARG0 (person :mod country))))),ArrayBuffer(Span(14,15,List(0, 1),Kirghizia,(name :op "Kirghizia"),false), Span(45,46,List(2, 3),China,(name :op "China"),false), Span(23,27,List(4, 5, 6, 7, 8, 9),Economy and Trade Committee,(government-organization :name (name :op "Committee" :op "Trade" :op "and" :op "Economy")),false), Span(78,81,List(10, 11, 12, 13),Trade Promotion Council,(name :op "Council" :op "Promotion" :op "Trade"),false), Span(84,89,List(14, 15, 16, 17, 18, 19),Chamber of Industry and Commerce,(name :op "Commerce" :op "and" :op "Industry" :op "of" :op "Chamber"),false), Span(40,41,List(20),of,include-91,false), Span(2,3,List(21),documents,document,false), Span(1,2,List(22),six,6,false), Span(57,58,List(23),and,and,false), Span(74,75,List(24),cooperating,cooperate-01,false), Span(81,82,List(25),and,and,false), Span(61,62,List(26),letters,letter,false), Span(36,37,List(27),exchange,exchange-01,false), Span(65,66,List(28),treaties,treaty,false), Span(63,64,List(29),exchanging,exchange-01,false), Span(39,40,List(30),presenting,present-01,false), Span(41,42,List(31),materials,material,false), Span(35,36,List(32),note,note,false), Span(20,21,List(33),forming,form-01,false), Span(22,23,List(34),combined,combine-01,false), Span(54,55,List(35),countries,country,false), Span(11,12,List(36),loan,loan-01,false), Span(69,70,List(37),countries,country,false), Span(6,7,List(38),agreement,agree-01,false), Span(15,16,List(39),government,government-organization,false), Span(32,33,List(40),governments,government-organization,false), Span(64,65,List(41),consular,consul,false), Span(60,61,List(42),ratification,ratify-01,false), Span(18,19,List(43),agreement,agree-01,false), Span(48,49,List(44),cultural,culture,false), Span(50,51,List(45),agreement,agree-01,false), Span(72,73,List(46),agreement,agree-01,false)),Map(45 -> agree-01, 39 -> government-organization, 30 -> present-01, 2 -> name, 5 -> name, 33 -> form-01, 27 -> exchange-01, 12 -> "Promotion", 8 -> "and", 15 -> "Commerce", 42 -> ratify-01, 36 -> loan-01, 21 -> document, 18 -> "of", 24 -> cooperate-01, 41 -> consul, 35 -> country, 7 -> "Trade", 17 -> "Industry", 1 -> "Kirghizia", 44 -> culture, 23 -> and, 38 -> agree-01, 26 -> letter, 4 -> government-organization, 11 -> "Council", 32 -> note, 14 -> name, 29 -> exchange-01, 20 -> include-91, 46 -> agree-01, 34 -> combine-01, 28 -> treaty, 6 -> "Committee", 40 -> government-organization, 43 -> agree-01, 9 -> "Economy", 0 -> name, 22 -> 6, 16 -> "and", 37 -> country, 19 -> "Chamber", 3 -> "China", 10 -> name, 31 -> material, 25 -> and, 13 -> "Trade"),Map(a7 -> agree-01, g10 -> government-organization, t -> treaty, g9 -> government-organization, c7 -> country, n7 -> note, e2 -> exchange-01, c10 -> consul, a3 -> agree-01, n4 -> name, m -> material, d -> document, a -> and, a5 -> agree-01, n6 -> name, c6 -> combine-01, c9 -> culture, a8 -> and, n9 -> name, l2 -> letter, a2 -> agree-01, r -> ratify-01, i -> include-91, 6 -> 6, l -> loan-01, n8 -> name, f -> form-01, p3 -> present-01, e3 -> exchange-01, g4 -> government-organization, c11 -> cooperate-01, c5 -> country, n5 -> name))),[Ljava.lang.String;@9d5509a,Annotation([Ljava.lang.String;@179ece50,[Ljava.lang.String;@3b0090a4,[Ljava.lang.String;@3cd3e762),Annotation([Ljava.lang.String;@1fa121e2,[Ljava.lang.String;@7eac9008,[Ledu.cmu.lti.nlp.amr.Dependency;@4116aac9),Annotation([Ljava.lang.String;@62ddbd7e,[Ljava.lang.String;@74e52ef6,[Ljava.lang.String;@6ed3ccb2),Annotation([Ljava.lang.String;@1a677343,[Ljava.lang.String;@15de0b3c,[Ledu.cmu.lti.nlp.amr.Entity;@489115ef))
AMR:
(a2 / agree-01, ARG0, a / and)
(a2 / agree-01, ARG1, c11 / cooperate-01)
(a3 / agree-01, ARG0, c7 / country)
(a3 / agree-01, ARG1, l / loan-01)
(a5 / agree-01, ARG1, f / form-01)
(a7 / agree-01, ARG1, d / document)
(a7 / agree-01, ARG2, a5 / agree-01)
(a8 / and, op, a3 / agree-01)
(a8 / and, op, a5 / agree-01)
(a8 / and, op, l2 / letter)
(c11 / cooperate-01, ARG0, a8 / and)
(c11 / cooperate-01, ARG1, n8 / name)
(c5 / country, poss, c10 / consul)
(c6 / combine-01, ARG1, g4 / government-organization)
(c9 / culture, mod, c5 / country)
(d / document, quant, 6 / 6)
(e2 / exchange-01, ARG0, c7 / country)
(e2 / exchange-01, ARG1, t / treaty)
(e3 / exchange-01, ARG0, c7 / country)
(e3 / exchange-01, ARG1, n7 / note)
(f / form-01, ARG1, g4 / government-organization)
(g10 / government-organization, name, n4 / name)
(g4 / government-organization, name, n5 / name)
(i / include-91, ARG1, m / material)
(l / loan-01, ARG1, g9 / government-organization)
(l / loan-01, ARG2, g10 / government-organization)
(l2 / letter, mod, r / ratify-01)
(n4 / name, op, "Kirghizia")
(n5 / name, op, "Committee")
(n5 / name, op, "Economy")
(n5 / name, op, "Trade")
(n5 / name, op, "and")
(n6 / name, op, "China")
(n8 / name, op, "Council")
(n8 / name, op, "Promotion")
(n8 / name, op, "Trade")
(n9 / name, op, "Chamber")
(n9 / name, op, "Commerce")
(n9 / name, op, "Industry")
(n9 / name, op, "and")
(n9 / name, op, "of")
(p3 / present-01, ARG0, g4 / government-organization)
(p3 / present-01, ARG1, m / material)
(p3 / present-01, ARG2, n6 / name)
(r / ratify-01, ARG1, n9 / name)
(t / treaty, mod, c10 / consul)

WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.3
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.5.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.5.0.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.5.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.5.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.5.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.5.0.0.1.0.4
WARNING: makeIds can't find span Id: 0.0.5.0.0.1.0.3
WARNING: makeIds can't find span Id: 0.0.5.0.0.1.0.2
WARNING: makeIds can't find span Id: 0.0.5.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.5.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.5.0
WARNING: makeIds can't find span Id: 0.0.5.0.0
WARNING: makeIds can't find span Id: 0.0.4
WARNING: makeIds can't find span Id: 0.0.4.1
WARNING: makeIds can't find span Id: 0.0.4.1.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.5
WARNING: makeIds can't find span Id: 0.0.5.0.0.1
WARNING: makeIds can't find span Id: 0.0.5.0.0.0
WARNING: makeIds can't find span Id: 0.0.4.1.0.0
WARNING: makeIds can't find span Id: 0.0.4.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.1.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 2,633,718 microseconds
Sentence: After the signing ceremony , Kirghizian President Akayev and Premier Peng Li respectively answered questions from reporters .

Oracle Span 1:  After => after
Oracle Span 2:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 3:  and => and
Oracle Span 4:  answered => answer-01
Oracle Span 5:  ceremony => ceremony
Oracle Span 6:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 7:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 8:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 9:  President => (have-org-role-91 :ARG2 president)
Oracle Span 10:  questions => (thing :ARG1-of question-01)
Oracle Span 11:  reporters => (person :ARG0-of report-01)
Oracle Span 12:  respectively => respective
Oracle Span 13:  signing => sign-01
NER Entity: (person :name (name :op "Akayev"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
Spans:
Span 0-1:  After => after
Span 7-8:  Akayev => (person :name (name :op "Akayev"))
Span 8-9:  and => and
Span 13-14:  answered => answer-01
Span 3-4:  ceremony => ceremony
Span 5-6:  Kirghizian => (country :name (name :op "Kirghizia"))
Span 10-12:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 9-10:  Premier => (have-org-role-91 :ARG2 premier)
Span 6-7:  President => (have-org-role-91 :ARG2 president)
Span 14-15:  questions => (thing :ARG1-of question-01)
Span 16-17:  reporters => (person :ARG0-of report-01)
Span 12-13:  respectively => respective
Span 2-3:  signing => sign-01

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Oracle Span 0-1:  After => after
Oracle Span 7-8:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 8-9:  and => and
Oracle Span 13-14:  answered => answer-01
Oracle Span 3-4:  ceremony => ceremony
Oracle Span 5-6:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 10-12:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 9-10:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 6-7:  President => (have-org-role-91 :ARG2 president)
Oracle Span 14-15:  questions => (thing :ARG1-of question-01)
Oracle Span 16-17:  reporters => (person :ARG0-of report-01)
Oracle Span 12-13:  respectively => respective
Oracle Span 2-3:  signing => sign-01

Dependencies:
1	After	_	IN	IN	_	14	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	signing	_	NN	NN	_	4	nn	_	_
4	ceremony	_	NN	NN	_	1	pobj	_	_
5	,	_	,	,	_	14	punct	_	_
6	Kirghizian	_	NNP	NNP	_	8	nn	_	_
7	President	_	NNP	NNP	_	8	nn	_	_
8	Akayev	_	NNP	NNP	_	14	nsubj	_	_
9	and	_	CC	CC	_	8	cc	_	_
10	Premier	_	NNP	NNP	_	12	nn	_	_
11	Peng	_	NNP	NNP	_	12	nn	_	_
12	Li	_	NNP	NNP	_	8	conj	_	_
13	respectively	_	RB	RB	_	14	advmod	_	_
14	answered	_	VBD	VBD	_	0	root	_	_
15	questions	_	NNS	NNS	_	14	dobj	_	_
16	from	_	IN	IN	_	14	prep	_	_
17	reporters	_	NNS	NNS	_	16	pobj	_	_
18	.	_	.	.	_	14	punct	_	_

Oracle:
(a2 / answer-01, ARG0, a3 / and)
(a2 / answer-01, ARG1, t / thing)
(a2 / answer-01, mod, r / respective)
(a2 / answer-01, time, a4 / after)
(a3 / and, op, p / person)
(a3 / and, op, p3 / person)
(a4 / after, op, c2 / ceremony)
(c / country, name, n3 / name)
(c2 / ceremony, mod, s / sign-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG2, p4 / premier)
(n2 / name, op, "Akayev")
(n3 / name, op, "Kirghizia")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(p / person, name, n2 / name)
(p3 / person, name, n4 / name)
(q / question-01, ARG0, p6 / person)
(q / question-01, ARG1, t / thing)
(r2 / report-01, ARG0, p6 / person)

Input(Some(Graph((answer-01 :time (after :op (ceremony :mod sign-01)) :mod respective :ARG1 (thing :ARG1-of (question-01 :ARG0 (person :ARG0-of report-01))) :ARG0 (and :op (person :ARG0-of (have-org-role-91 :ARG2 premier) :name (name :op "Li" :op "Peng")) :op (person :ARG0-of (have-org-role-91 :ARG2 president :ARG1 (country :name (name :op "Kirghizia"))) :name (name :op "Akayev")))),ArrayBuffer(Span(7,8,List(0, 1, 2),Akayev,(person :name (name :op "Akayev")),false), Span(10,12,List(3, 4, 5, 6),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(5,6,List(7, 8, 9),Kirghizian,(country :name (name :op "Kirghizia")),false), Span(13,14,List(10),answered,answer-01,false), Span(0,1,List(11),After,after,false), Span(3,4,List(12),ceremony,ceremony,false), Span(2,3,List(13),signing,sign-01,false), Span(14,15,List(14, 15),questions,(thing :ARG1-of question-01),false), Span(16,17,List(16, 17),reporters,(person :ARG0-of report-01),false), Span(8,9,List(18),and,and,false), Span(9,10,List(19, 20),Premier,(have-org-role-91 :ARG2 premier),false), Span(6,7,List(21, 22),President,(have-org-role-91 :ARG2 president),false), Span(12,13,List(23),respectively,respective,false)),Map(2 -> "Akayev", 5 -> "Li", 12 -> ceremony, 15 -> question-01, 8 -> name, 21 -> have-org-role-91, 18 -> and, 7 -> country, 17 -> report-01, 1 -> name, 23 -> respective, 4 -> name, 11 -> after, 14 -> thing, 20 -> premier, 6 -> "Peng", 22 -> president, 9 -> "Kirghizia", 0 -> person, 16 -> person, 19 -> have-org-role-91, 10 -> answer-01, 3 -> person, 13 -> sign-01),Map(h -> have-org-role-91, q -> question-01, h2 -> have-org-role-91, t -> thing, p2 -> president, a3 -> and, n4 -> name, s -> sign-01, r2 -> report-01, p -> person, n3 -> name, p4 -> premier, r -> respective, a2 -> answer-01, c -> country, p6 -> person, p3 -> person, c2 -> ceremony, n2 -> name, a4 -> after))),[Ljava.lang.String;@3857f613,Annotation([Ljava.lang.String;@198b6731,[Ljava.lang.String;@7c6908d7,[Ljava.lang.String;@3c9754d8),Annotation([Ljava.lang.String;@3bf7ca37,[Ljava.lang.String;@79079097,[Ledu.cmu.lti.nlp.amr.Dependency;@4d1c00d0),Annotation([Ljava.lang.String;@4b2bac3f,[Ljava.lang.String;@4e08711f,[Ljava.lang.String;@bcec361),Annotation([Ljava.lang.String;@26794848,[Ljava.lang.String;@302552ec,[Ledu.cmu.lti.nlp.amr.Entity;@3d285d7e))
AMR:
(a2 / answer-01, ARG0, a3 / and)
(a2 / answer-01, ARG1, t / thing)
(a2 / answer-01, manner, r / respective)
(a2 / answer-01, time, a4 / after)
(a3 / and, op, p / person)
(a4 / after, op, c2 / ceremony)
(c / country, name, n3 / name)
(c2 / ceremony, mod, s / sign-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c / country)
(h / have-org-role-91, ARG2, p2 / president)
(h2 / have-org-role-91, ARG0, p3 / person)
(h2 / have-org-role-91, ARG1, c / country)
(h2 / have-org-role-91, ARG2, p4 / premier)
(n2 / name, op, "Akayev")
(n3 / name, op, "Kirghizia")
(n4 / name, op, "Li")
(n4 / name, op, "Peng")
(p / person, name, n2 / name)
(p3 / person, name, n4 / name)
(q / question-01, ARG1, t / thing)
(r2 / report-01, ARG0, p6 / person)
(r2 / report-01, ARG1, t / thing)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 1,270,273 microseconds
Sentence: Akayev highly commended the results of the conference with Peng Li

Oracle Span 1:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 2:  commended => commend-01
Oracle Span 3:  conference => conference
Oracle Span 4:  highly => high
Oracle Span 5:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 6:  results => (thing :ARG2-of result-01)
NER Entity: (person :name (name :op "Akayev"))
NER Entity: (person :name (name :op "Peng" :op "Li"))
Spans:
Span 0-1:  Akayev => (person :name (name :op "Akayev"))
Span 2-3:  commended => commend-01
Span 7-8:  conference => conference
Span 1-2:  highly => high
Span 9-11:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 4-5:  results => (thing :ARG2-of result-01)

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 0-1:  Akayev => (person :name (name :op "Akayev"))
Oracle Span 2-3:  commended => commend-01
Oracle Span 7-8:  conference => conference
Oracle Span 1-2:  highly => high
Oracle Span 9-11:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 4-5:  results => (thing :ARG2-of result-01)

Dependencies:
1	Akayev	_	VB	VB	_	0	root	_	_
2	highly	_	RB	RB	_	3	advmod	_	_
3	commended	_	JJ	JJ	_	1	acomp	_	_
4	the	_	DT	DT	_	5	det	_	_
5	results	_	NNS	NNS	_	3	dep	_	_
6	of	_	IN	IN	_	5	prep	_	_
7	the	_	DT	DT	_	8	det	_	_
8	conference	_	NN	NN	_	6	pobj	_	_
9	with	_	IN	IN	_	8	prep	_	_
10	Peng	_	NNP	NNP	_	11	nn	_	_
11	Li	_	NNP	NNP	_	9	pobj	_	_

Oracle:
(c / commend-01, ARG0, p / person)
(c / commend-01, ARG1, t / thing)
(c / commend-01, degree, h / high)
(c5 / conference, prep-with, p3 / person)
(n / name, op, "Akayev")
(n3 / name, op, "Li")
(n3 / name, op, "Peng")
(p / person, name, n / name)
(p3 / person, name, n3 / name)
(r2 / result-01, ARG1, c5 / conference)
(r2 / result-01, ARG2, t / thing)

Input(Some(Graph((commend-01 :degree high :ARG1 (thing :ARG2-of (result-01 :ARG1 (conference :prep-with (person :name (name :op "Li" :op "Peng"))))) :ARG0 (person :name (name :op "Akayev"))),ArrayBuffer(Span(0,1,List(0, 1, 2),Akayev,(person :name (name :op "Akayev")),false), Span(9,11,List(3, 4, 5, 6),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(2,3,List(7),commended,commend-01,false), Span(4,5,List(8, 9),results,(thing :ARG2-of result-01),false), Span(7,8,List(10),conference,conference,false), Span(1,2,List(11),highly,high,false)),Map(2 -> "Akayev", 5 -> "Li", 8 -> thing, 7 -> commend-01, 1 -> name, 11 -> high, 4 -> name, 6 -> "Peng", 9 -> result-01, 0 -> person, 10 -> conference, 3 -> person),Map(n -> name, h -> high, t -> thing, r2 -> result-01, p -> person, n3 -> name, c -> commend-01, p3 -> person, c5 -> conference))),[Ljava.lang.String;@40005471,Annotation([Ljava.lang.String;@2cd76f31,[Ljava.lang.String;@367ffa75,[Ljava.lang.String;@49438269),Annotation([Ljava.lang.String;@ba2f4ec,[Ljava.lang.String;@1c1bbc4e,[Ledu.cmu.lti.nlp.amr.Dependency;@55fe41ea),Annotation([Ljava.lang.String;@fbd1f6,[Ljava.lang.String;@1ce24091,[Ljava.lang.String;@5dda768f),Annotation([Ljava.lang.String;@7a8c8dcf,[Ljava.lang.String;@24269709,[Ledu.cmu.lti.nlp.amr.Entity;@2aceadd4))
AMR:
(c / commend-01, ARG1, t / thing)
(c / commend-01, ARG6, p / person)
(c / commend-01, degree, h / high)
(c5 / conference, poss, p3 / person)
(n / name, op, "Akayev")
(n3 / name, op, "Li")
(n3 / name, op, "Peng")
(p / person, name, n / name)
(p3 / person, name, n3 / name)
(r2 / result-01, ARG1, c5 / conference)
(r2 / result-01, ARG2, t / thing)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 255,128 microseconds
Sentence: He expressed that , this visit by Premier Peng Li would promote the peace , security and stability of the Central Asian region .

Oracle Span 1:  and => and
Oracle Span 2:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 3:  expressed => express-01
Oracle Span 4:  He => he
Oracle Span 5:  peace => peace
Oracle Span 6:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 8:  promote => promote-02
Oracle Span 9:  security => security
Oracle Span 10:  stability => stability
Oracle Span 11:  this => this
Oracle Span 12:  visit => visit-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (country :name (name :op "Central" :op "Asian"))
Spans:
Span 16-17:  and => and
Span 20-22:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Span 1-2:  expressed => express-01
Span 0-1:  He => he
Span 13-14:  peace => peace
Span 8-10:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 7-8:  Premier => (have-org-role-91 :ARG2 premier)
Span 11-12:  promote => promote-02
Span 15-16:  security => security
Span 17-18:  stability => stability
Span 4-5:  this => this
Span 5-6:  visit => visit-01

Langrangian relaxation converged after 70 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 20-22:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 1-2:  expressed => express-01
Oracle Span 0-1:  He => he
Oracle Span 13-14:  peace => peace
Oracle Span 8-10:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 7-8:  Premier => (have-org-role-91 :ARG2 premier)
Oracle Span 11-12:  promote => promote-02
Oracle Span 15-16:  security => security
Oracle Span 17-18:  stability => stability
Oracle Span 4-5:  this => this
Oracle Span 5-6:  visit => visit-01

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	expressed	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	12	mark	_	_
4	,	_	,	,	_	12	punct	_	_
5	this	_	DT	DT	_	6	det	_	_
6	visit	_	NN	NN	_	12	nsubj	_	_
7	by	_	IN	IN	_	6	prep	_	_
8	Premier	_	NNP	NNP	_	10	nn	_	_
9	Peng	_	NNP	NNP	_	10	nn	_	_
10	Li	_	NNP	NNP	_	7	pobj	_	_
11	would	_	MD	MD	_	12	aux	_	_
12	promote	_	VB	VB	_	2	ccomp	_	_
13	the	_	DT	DT	_	14	det	_	_
14	peace	_	NN	NN	_	12	dobj	_	_
15	,	_	,	,	_	14	punct	_	_
16	security	_	NN	NN	_	14	conj	_	_
17	and	_	CC	CC	_	14	cc	_	_
18	stability	_	NN	NN	_	14	conj	_	_
19	of	_	IN	IN	_	14	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	Central	_	NNP	NNP	_	23	nn	_	_
22	Asian	_	NNP	NNP	_	23	nn	_	_
23	region	_	NN	NN	_	19	pobj	_	_
24	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, p5 / peace)
(a / and, op, s / security)
(a / and, op, s2 / stability)
(e / express-01, ARG0, h / he)
(e / express-01, ARG1, p3 / promote-02)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG2, p2 / premier)
(n / name, op, "Li")
(n / name, op, "Peng")
(n2 / name, op, "Asia")
(n2 / name, op, "Central")
(p / person, name, n / name)
(p3 / promote-02, ARG0, v / visit-01)
(p3 / promote-02, ARG1, a / and)
(p5 / peace, poss, w / world-region)
(s / security, poss, w / world-region)
(s2 / stability, poss, w / world-region)
(v / visit-01, ARG0, p / person)
(v / visit-01, mod, t / this)
(w / world-region, name, n2 / name)

Input(Some(Graph((express-01 :ARG1 (promote-02 :ARG1 (and :op (stability :poss world-region) :op (security :poss world-region) :op (peace :poss (world-region :name (name :op "Asia" :op "Central")))) :ARG0 (visit-01 :mod this :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 premier) :name (name :op "Li" :op "Peng")))) :ARG0 he),ArrayBuffer(Span(8,10,List(0, 1, 2, 3),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(20,22,List(4, 5, 6, 7),Central Asian,(world-region :name (name :op "Asia" :op "Central")),false), Span(1,2,List(8),expressed,express-01,false), Span(11,12,List(9),promote,promote-02,false), Span(16,17,List(10),and,and,false), Span(17,18,List(11),stability,stability,false), Span(15,16,List(12),security,security,false), Span(13,14,List(13),peace,peace,false), Span(5,6,List(14),visit,visit-01,false), Span(4,5,List(15),this,this,false), Span(7,8,List(16, 17),Premier,(have-org-role-91 :ARG2 premier),false), Span(0,1,List(18),He,he,false)),Map(2 -> "Li", 5 -> name, 12 -> security, 15 -> this, 8 -> express-01, 18 -> he, 7 -> "Central", 17 -> premier, 1 -> name, 4 -> world-region, 11 -> stability, 14 -> visit-01, 6 -> "Asia", 9 -> promote-02, 0 -> person, 16 -> have-org-role-91, 10 -> and, 3 -> "Peng", 13 -> peace),Map(e -> express-01, w -> world-region, n -> name, h -> he, h2 -> have-org-role-91, p5 -> peace, s2 -> stability, t -> this, p2 -> premier, s -> security, v -> visit-01, p -> person, a -> and, p3 -> promote-02, n2 -> name))),[Ljava.lang.String;@24aed80c,Annotation([Ljava.lang.String;@3a52dba3,[Ljava.lang.String;@2a5c8d3f,[Ljava.lang.String;@752325ad),Annotation([Ljava.lang.String;@279fedbd,[Ljava.lang.String;@b3ca52e,[Ledu.cmu.lti.nlp.amr.Dependency;@45c7e403),Annotation([Ljava.lang.String;@2925bf5b,[Ljava.lang.String;@710f4dc7,[Ljava.lang.String;@1ff4931d),Annotation([Ljava.lang.String;@65e98b1c,[Ljava.lang.String;@61322f9d,[Ledu.cmu.lti.nlp.amr.Entity;@6ad82709))
AMR:
(a / and, op, p5 / peace)
(a / and, op, s2 / stability)
(e / express-01, ARG0, h / he)
(e / express-01, ARG1, p3 / promote-02)
(h2 / have-org-role-91, ARG0, p / person)
(h2 / have-org-role-91, ARG1, s / security)
(h2 / have-org-role-91, ARG2, p2 / premier)
(n / name, op, "Li")
(n / name, op, "Peng")
(n2 / name, op, "Asia")
(n2 / name, op, "Central")
(p / person, name, n / name)
(p3 / promote-02, ARG0, v / visit-01)
(p3 / promote-02, ARG1, a / and)
(v / visit-01, ARG0, p / person)
(v / visit-01, ARG1, w / world-region)
(v / visit-01, mod, t / this)
(w / world-region, name, n2 / name)

WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 1,216,740 microseconds
Sentence: He felt that , the recently signed documents were very important in enforcing good neighborhood relations and friendly cooperation between both countries .

Oracle Span 1:  and => and
Oracle Span 2:  both => both
Oracle Span 3:  cooperation => cooperate-01
Oracle Span 4:  countries => country
Oracle Span 5:  documents => document
Oracle Span 6:  enforcing => enforce-01
Oracle Span 7:  felt => feel-02
Oracle Span 8:  friendly => friendly-41
Oracle Span 9:  good => good
Oracle Span 10:  He => he
Oracle Span 11:  important => important
Oracle Span 12:  neighborhood => neighborhood
Oracle Span 13:  recently => recent
Oracle Span 14:  relations => relation
Oracle Span 15:  signed => sign-01
Oracle Span 16:  very => very
Spans:
Span 16-17:  and => and
Span 20-21:  both => both
Span 18-19:  cooperation => cooperate-01
Span 21-22:  countries => country
Span 7-8:  documents => document
Span 12-13:  enforcing => enforce-01
Span 1-2:  felt => feel-02
Span 17-18:  friendly => friendly-41
Span 13-14:  good => good
Span 0-1:  He => he
Span 10-11:  important => important
Span 14-15:  neighborhood => neighborhood
Span 5-6:  recently => recent
Span 15-16:  relations => relation
Span 6-7:  signed => sign-01
Span 9-10:  very => very

Langrangian relaxation converged after 66 iterations. Delta = 0.0
Oracle Span 16-17:  and => and
Oracle Span 20-21:  both => both
Oracle Span 18-19:  cooperation => cooperate-01
Oracle Span 21-22:  countries => country
Oracle Span 7-8:  documents => document
Oracle Span 12-13:  enforcing => enforce-01
Oracle Span 1-2:  felt => feel-02
Oracle Span 17-18:  friendly => friendly-41
Oracle Span 13-14:  good => good
Oracle Span 0-1:  He => he
Oracle Span 10-11:  important => important
Oracle Span 14-15:  neighborhood => neighborhood
Oracle Span 5-6:  recently => recent
Oracle Span 15-16:  relations => relation
Oracle Span 6-7:  signed => sign-01
Oracle Span 9-10:  very => very

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	felt	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	11	mark	_	_
4	,	_	,	,	_	11	punct	_	_
5	the	_	DT	DT	_	8	det	_	_
6	recently	_	RB	RB	_	7	advmod	_	_
7	signed	_	VBN	VBN	_	8	amod	_	_
8	documents	_	NNS	NNS	_	11	nsubj	_	_
9	were	_	VBD	VBD	_	11	cop	_	_
10	very	_	RB	RB	_	11	advmod	_	_
11	important	_	JJ	JJ	_	2	ccomp	_	_
12	in	_	IN	IN	_	11	prep	_	_
13	enforcing	_	VBG	VBG	_	12	pcomp	_	_
14	good	_	JJ	JJ	_	16	amod	_	_
15	neighborhood	_	NN	NN	_	16	nn	_	_
16	relations	_	NNS	NNS	_	13	dobj	_	_
17	and	_	CC	CC	_	16	cc	_	_
18	friendly	_	JJ	JJ	_	19	amod	_	_
19	cooperation	_	NN	NN	_	16	conj	_	_
20	between	_	IN	IN	_	19	prep	_	_
21	both	_	DT	DT	_	22	det	_	_
22	countries	_	NNS	NNS	_	20	pobj	_	_
23	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, c / cooperate-01)
(a / and, op, r2 / relation)
(c / cooperate-01, ARG0, c2 / country)
(c2 / country, mod, b / both)
(e / enforce-01, ARG1, a / and)
(f / feel-02, ARG0, h / he)
(f / feel-02, ARG1, i / important)
(f2 / friendly-41, ARG1, c / cooperate-01)
(i / important, degree, v / very)
(i / important, domain, d / document)
(i / important, purpose, e / enforce-01)
(r2 / relation, mod, g / good)
(r2 / relation, mod, n / neighborhood)
(s / sign-01, ARG1, d / document)
(s / sign-01, time, r / recent)

Input(Some(Graph((feel-02 :ARG1 (important :degree very :domain (document :ARG1-of (sign-01 :time recent)) :purpose (enforce-01 :ARG1 (and :op (cooperate-01 :ARG1-of friendly-41 :ARG0 (country :mod both)) :op (relation :mod good :mod neighborhood)))) :ARG0 he),ArrayBuffer(Span(1,2,List(0),felt,feel-02,false), Span(10,11,List(1),important,important,false), Span(9,10,List(2),very,very,false), Span(7,8,List(3),documents,document,false), Span(6,7,List(4),signed,sign-01,false), Span(12,13,List(5),enforcing,enforce-01,false), Span(16,17,List(6),and,and,false), Span(21,22,List(7),countries,country,false), Span(20,21,List(8),both,both,false), Span(17,18,List(9),friendly,friendly-41,false), Span(15,16,List(10),relations,relation,false), Span(13,14,List(11),good,good,false), Span(14,15,List(12),neighborhood,neighborhood,false), Span(0,1,List(13),He,he,false), Span(5,6,List(14),recently,recent,false), Span(18,19,List(15),cooperation,cooperate-01,false)),Map(2 -> very, 5 -> enforce-01, 12 -> neighborhood, 15 -> cooperate-01, 8 -> both, 7 -> country, 1 -> important, 4 -> sign-01, 11 -> good, 14 -> recent, 6 -> and, 9 -> friendly-41, 0 -> feel-02, 10 -> relation, 3 -> document, 13 -> he),Map(e -> enforce-01, n -> neighborhood, h -> he, b -> both, s -> sign-01, v -> very, d -> document, g -> good, r2 -> relation, a -> and, r -> recent, i -> important, c -> cooperate-01, f2 -> friendly-41, f -> feel-02, c2 -> country))),[Ljava.lang.String;@510f3d34,Annotation([Ljava.lang.String;@7817fd62,[Ljava.lang.String;@8297b3a,[Ljava.lang.String;@2362f559),Annotation([Ljava.lang.String;@b2c9a9c,[Ljava.lang.String;@4c178a76,[Ledu.cmu.lti.nlp.amr.Dependency;@fa4c865),Annotation([Ljava.lang.String;@3bd82cf5,[Ljava.lang.String;@544fa968,[Ljava.lang.String;@247bddad),Annotation([Ljava.lang.String;@d35dea7,[Ljava.lang.String;@7770f470,[Ledu.cmu.lti.nlp.amr.Entity;@5e5d171f))
AMR:
(a / and, op, c / cooperate-01)
(c / cooperate-01, ARG0, c2 / country)
(c / cooperate-01, ARG1, g / good)
(c2 / country, mod, b / both)
(e / enforce-01, ARG0, d / document)
(e / enforce-01, ARG1, a / and)
(e / enforce-01, ARG6, r2 / relation)
(f / feel-02, ARG0, h / he)
(f / feel-02, ARG1, i / important)
(f2 / friendly-41, ARG1, c / cooperate-01)
(i / important, degree, v / very)
(i / important, domain, d / document)
(r2 / relation, mod, n / neighborhood)
(s / sign-01, ARG1, d / document)
(s / sign-01, time, r / recent)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
Decoded in 1,088,239 microseconds
Sentence: Premier Peng Li said that , this visit had improved mutual friendship and understanding and set a good foundation for further cooperation between China and Kirghizia .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  cooperation => cooperate-01
Oracle Span 5:  foundation => foundation
Oracle Span 6:  friendship => friendship
Oracle Span 7:  further => further
Oracle Span 8:  good => good
Oracle Span 9:  had => have-org-role-91
Oracle Span 10:  improved => improve-01
Oracle Span 11:  Kirghizia => (country :name (name :op "Kirghizia"))
Oracle Span 12:  mutual => mutual
Oracle Span 13:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 14:  Premier => premier
Oracle Span 15:  said => say-01
Oracle Span 16:  set => set-02
Oracle Span 17:  this => this
Oracle Span 18:  understanding => understand-01
Oracle Span 19:  visit => visit-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Kirghizia"))
Spans:
Span 12-13:  and => and
Span 14-15:  and => and
Span 23-24:  China => (country :name (name :op "China"))
Span 21-22:  cooperation => cooperate-01
Span 18-19:  foundation => foundation
Span 11-12:  friendship => friendship
Span 20-21:  further => further
Span 17-18:  good => good
Span 8-9:  had => have-org-role-91
Span 9-10:  improved => improve-01
Span 25-26:  Kirghizia => (country :name (name :op "Kirghizia"))
Span 10-11:  mutual => mutual
Span 1-3:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 0-1:  Premier => premier
Span 3-4:  said => say-01
Span 15-16:  set => set-02
Span 6-7:  this => this
Span 13-14:  understanding => understand-01
Span 7-8:  visit => visit-01

Langrangian relaxation converged after 57 iterations. Delta = 0.0
Oracle Span 12-13:  and => and
Oracle Span 14-15:  and => and
Oracle Span 23-24:  China => (country :name (name :op "China"))
Oracle Span 21-22:  cooperation => cooperate-01
Oracle Span 18-19:  foundation => foundation
Oracle Span 11-12:  friendship => friendship
Oracle Span 20-21:  further => further
Oracle Span 17-18:  good => good
Oracle Span 8-9:  had => have-org-role-91
Oracle Span 9-10:  improved => improve-01
Oracle Span 25-26:  Kirghizia => (country :name (name :op "Kirghizia"))
Oracle Span 10-11:  mutual => mutual
Oracle Span 1-3:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 0-1:  Premier => premier
Oracle Span 3-4:  said => say-01
Oracle Span 15-16:  set => set-02
Oracle Span 6-7:  this => this
Oracle Span 13-14:  understanding => understand-01
Oracle Span 7-8:  visit => visit-01

Dependencies:
1	Premier	_	NNP	NNP	_	3	nn	_	_
2	Peng	_	NNP	NNP	_	3	nn	_	_
3	Li	_	NNP	NNP	_	4	nsubj	_	_
4	said	_	VBD	VBD	_	0	root	_	_
5	that	_	IN	IN	_	10	mark	_	_
6	,	_	,	,	_	10	punct	_	_
7	this	_	DT	DT	_	8	det	_	_
8	visit	_	NN	NN	_	10	nsubj	_	_
9	had	_	VBD	VBD	_	10	aux	_	_
10	improved	_	VBN	VBN	_	4	ccomp	_	_
11	mutual	_	JJ	JJ	_	12	amod	_	_
12	friendship	_	NN	NN	_	10	dobj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	understanding	_	NN	NN	_	12	conj	_	_
15	and	_	CC	CC	_	4	cc	_	_
16	set	_	VBD	VBD	_	4	conj	_	_
17	a	_	DT	DT	_	19	det	_	_
18	good	_	JJ	JJ	_	19	amod	_	_
19	foundation	_	NN	NN	_	16	dobj	_	_
20	for	_	IN	IN	_	16	prep	_	_
21	further	_	JJ	JJ	_	22	amod	_	_
22	cooperation	_	NN	NN	_	20	pobj	_	_
23	between	_	IN	IN	_	22	prep	_	_
24	China	_	NNP	NNP	_	23	pobj	_	_
25	and	_	CC	CC	_	24	cc	_	_
26	Kirghizia	_	NNP	NNP	_	24	conj	_	_
27	.	_	.	.	_	4	punct	_	_

Oracle:
(a / and, op, i / improve-01)
(a / and, op, s2 / set-02)
(a2 / and, mod, m / mutual)
(a2 / and, op, f / friendship)
(a2 / and, op, u / understand-01)
(c3 / cooperate-01, ARG0, c4 / country)
(c3 / cooperate-01, ARG1, c5 / country)
(c3 / cooperate-01, degree, f3 / further)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(f2 / foundation, mod, g2 / good)
(f2 / foundation, purpose, c3 / cooperate-01)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG2, p2 / premier)
(i / improve-01, ARG0, v / visit-01)
(i / improve-01, ARG1, a2 / and)
(n / name, op, "Li")
(n / name, op, "Peng")
(n2 / name, op, "China")
(n3 / name, op, "Kirghizia")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a / and)
(s2 / set-02, ARG0, v / visit-01)
(s2 / set-02, ARG1, f2 / foundation)
(v / visit-01, mod, t / this)

Input(Some(Graph((say-01 :ARG1 (and :op (set-02 :ARG1 (foundation :purpose (cooperate-01 :degree further :ARG1 (country :name (name :op "Kirghizia")) :ARG0 (country :name (name :op "China"))) :mod good) :ARG0 visit-01) :op (improve-01 :ARG1 (and :mod mutual :op understand-01 :op friendship) :ARG0 (visit-01 :mod this))) :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 premier) :name (name :op "Li" :op "Peng"))),ArrayBuffer(Span(1,3,List(0, 1, 2, 3),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(23,24,List(4, 5, 6),China,(country :name (name :op "China")),false), Span(25,26,List(7, 8, 9),Kirghizia,(country :name (name :op "Kirghizia")),false), Span(3,4,List(10),said,say-01,false), Span(12,13,List(11),and,and,false), Span(15,16,List(12),set,set-02,false), Span(18,19,List(13),foundation,foundation,false), Span(20,21,List(14),further,further,false), Span(17,18,List(15),good,good,false), Span(9,10,List(16),improved,improve-01,false), Span(14,15,List(17),and,and,false), Span(10,11,List(18),mutual,mutual,false), Span(13,14,List(19),understanding,understand-01,false), Span(11,12,List(20),friendship,friendship,false), Span(7,8,List(21),visit,visit-01,false), Span(6,7,List(22),this,this,false), Span(0,1,List(23),Premier,premier,false), Span(21,22,List(24),cooperation,cooperate-01,false), Span(8,9,List(25),had,have-org-role-91,false)),Map(2 -> "Li", 5 -> name, 12 -> set-02, 15 -> good, 8 -> name, 21 -> visit-01, 18 -> mutual, 24 -> cooperate-01, 7 -> country, 17 -> and, 1 -> name, 23 -> premier, 4 -> country, 11 -> and, 14 -> further, 20 -> friendship, 6 -> "China", 9 -> "Kirghizia", 0 -> person, 22 -> this, 16 -> improve-01, 19 -> understand-01, 10 -> say-01, 3 -> "Peng", 25 -> have-org-role-91, 13 -> foundation),Map(n -> name, h -> have-org-role-91, s2 -> set-02, t -> this, p2 -> premier, c4 -> country, s -> say-01, v -> visit-01, m -> mutual, g2 -> good, p -> person, c3 -> cooperate-01, a -> and, n3 -> name, f3 -> further, a2 -> and, i -> improve-01, u -> understand-01, f2 -> foundation, f -> friendship, n2 -> name, c5 -> country))),[Ljava.lang.String;@24313fcc,Annotation([Ljava.lang.String;@7d20d0b,[Ljava.lang.String;@77f1baf5,[Ljava.lang.String;@41a2befb),Annotation([Ljava.lang.String;@6c40365c,[Ljava.lang.String;@7bedc48a,[Ledu.cmu.lti.nlp.amr.Dependency;@131ef10),Annotation([Ljava.lang.String;@55b0dcab,[Ljava.lang.String;@38afe297,[Ljava.lang.String;@2df3b89c),Annotation([Ljava.lang.String;@23348b5d,[Ljava.lang.String;@70325e14,[Ledu.cmu.lti.nlp.amr.Entity;@37ceb1df))
AMR:
(a / and, op, u / understand-01)
(a2 / and, op, i / improve-01)
(a2 / and, op, s2 / set-02)
(c3 / cooperate-01, ARG0, c4 / country)
(c3 / cooperate-01, ARG1, c5 / country)
(c3 / cooperate-01, mod, f3 / further)
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(f / friendship, mod, m / mutual)
(f2 / foundation, mod, g2 / good)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, c5 / country)
(i / improve-01, ARG0, v / visit-01)
(i / improve-01, ARG1, f / friendship)
(n / name, op, "Li")
(n / name, op, "Peng")
(n2 / name, op, "China")
(n3 / name, op, "Kirghizia")
(p / person, name, n / name)
(s / say-01, ARG0, p / person)
(s / say-01, ARG1, a2 / and)
(s2 / set-02, ARG0, a / and)
(s2 / set-02, ARG1, f2 / foundation)
(v / visit-01, ARG1, p2 / premier)
(v / visit-01, mod, t / this)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.2
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.2
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 1,800,062 microseconds
Sentence: He expressed hopes that the Central Asian region would be stable and developed , and that the standard of living of the people would continuously improve .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 4:  continuously => continue-01
Oracle Span 5:  developed => develop-02
Oracle Span 6:  expressed => express-01
Oracle Span 7:  He => he
Oracle Span 8:  hopes => hope-01
Oracle Span 9:  improve => improve-01
Oracle Span 10:  living => live-01
Oracle Span 11:  stable => stable
Oracle Span 12:  standard => standard
NER Entity: (country :name (name :op "Central" :op "Asian"))
Spans:
Span 11-12:  and => and
Span 14-15:  and => and
Span 5-7:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Span 24-25:  continuously => continue-01
Span 12-13:  developed => develop-02
Span 1-2:  expressed => express-01
Span 0-1:  He => he
Span 2-3:  hopes => hope-01
Span 25-26:  improve => improve-01
Span 19-20:  living => live-01
Span 10-11:  stable => stable
Span 17-18:  standard => standard

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 11-12:  and => and
Oracle Span 14-15:  and => and
Oracle Span 5-7:  Central Asian => (world-region :name (name :op "Asia" :op "Central"))
Oracle Span 24-25:  continuously => continue-01
Oracle Span 12-13:  developed => develop-02
Oracle Span 1-2:  expressed => express-01
Oracle Span 0-1:  He => he
Oracle Span 2-3:  hopes => hope-01
Oracle Span 25-26:  improve => improve-01
Oracle Span 19-20:  living => live-01
Oracle Span 10-11:  stable => stable
Oracle Span 17-18:  standard => standard

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	expressed	_	VBD	VBD	_	0	root	_	_
3	hopes	_	VBZ	VBZ	_	2	ccomp	_	_
4	that	_	IN	IN	_	11	mark	_	_
5	the	_	DT	DT	_	8	det	_	_
6	Central	_	NNP	NNP	_	8	nn	_	_
7	Asian	_	NNP	NNP	_	8	nn	_	_
8	region	_	NN	NN	_	11	nsubj	_	_
9	would	_	MD	MD	_	11	aux	_	_
10	be	_	VB	VB	_	11	cop	_	_
11	stable	_	JJ	JJ	_	3	ccomp	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	developed	_	JJ	JJ	_	11	conj	_	_
14	,	_	,	,	_	3	punct	_	_
15	and	_	CC	CC	_	3	cc	_	_
16	that	_	IN	IN	_	26	mark	_	_
17	the	_	DT	DT	_	18	det	_	_
18	standard	_	NN	NN	_	26	nsubj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	living	_	NN	NN	_	19	pobj	_	_
21	of	_	IN	IN	_	20	prep	_	_
22	the	_	DT	DT	_	23	det	_	_
23	people	_	NNS	NNS	_	21	pobj	_	_
24	would	_	MD	MD	_	26	aux	_	_
25	continuously	_	RB	RB	_	26	advmod	_	_
26	improve	_	VB	VB	_	3	conj	_	_
27	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, a2 / and)
(a / and, op, i / improve-01)
(a2 / and, op, d / develop-02)
(a2 / and, op, s / stable)
(c / continue-01, ARG1, i / improve-01)
(d / develop-02, ARG1, w / world-region)
(e / express-01, ARG0, h / he)
(e / express-01, ARG1, h2 / hope-01)
(h2 / hope-01, ARG0, h / he)
(h2 / hope-01, ARG1, a / and)
(i / improve-01, ARG0, s2 / standard)
(n / name, op, "Asia")
(n / name, op, "Central")
(s / stable, domain, w / world-region)
(s2 / standard, mod, l / live-01)
(w / world-region, name, n / name)

Input(Some(Graph((express-01 :ARG1 (hope-01 :ARG1 (and :op (improve-01 :ARG1-of continue-01 :ARG0 (standard :poss person :mod live-01)) :op (and :op (develop-02 :ARG1 world-region) :op (stable :domain (world-region :name (name :op "Asia" :op "Central"))))) :ARG0 he) :ARG0 he),ArrayBuffer(Span(5,7,List(0, 1, 2, 3),Central Asian,(world-region :name (name :op "Asia" :op "Central")),false), Span(1,2,List(4),expressed,express-01,false), Span(2,3,List(5),hopes,hope-01,false), Span(11,12,List(6),and,and,false), Span(25,26,List(7),improve,improve-01,false), Span(17,18,List(8),standard,standard,false), Span(19,20,List(9),living,live-01,false), Span(14,15,List(10),and,and,false), Span(12,13,List(11),developed,develop-02,false), Span(10,11,List(12),stable,stable,false), Span(0,1,List(13),He,he,false), Span(24,25,List(14),continuously,continue-01,false)),Map(2 -> "Asia", 5 -> hope-01, 12 -> stable, 8 -> standard, 7 -> improve-01, 1 -> name, 4 -> express-01, 11 -> develop-02, 14 -> continue-01, 6 -> and, 9 -> live-01, 0 -> world-region, 10 -> and, 3 -> "Central", 13 -> he),Map(e -> express-01, n -> name, w -> world-region, h -> he, s2 -> standard, h2 -> hope-01, s -> stable, d -> develop-02, a -> and, a2 -> and, i -> improve-01, c -> continue-01, l -> live-01))),[Ljava.lang.String;@7c9d8e2,Annotation([Ljava.lang.String;@20d525,[Ljava.lang.String;@6200f9cb,[Ljava.lang.String;@2002fc1d),Annotation([Ljava.lang.String;@69453e37,[Ljava.lang.String;@6f4a47c7,[Ledu.cmu.lti.nlp.amr.Dependency;@ae13544),Annotation([Ljava.lang.String;@3d34d211,[Ljava.lang.String;@7dc0f706,[Ljava.lang.String;@4009e306),Annotation([Ljava.lang.String;@43c1b556,[Ljava.lang.String;@587e5365,[Ledu.cmu.lti.nlp.amr.Entity;@22fcf7ab))
AMR:
(a / and, op, d / develop-02)
(a2 / and, op, h2 / hope-01)
(a2 / and, op, i / improve-01)
(c / continue-01, ARG1, i / improve-01)
(d / develop-02, ARG1, w / world-region)
(e / express-01, ARG0, h / he)
(e / express-01, ARG1, a2 / and)
(h2 / hope-01, ARG1, a / and)
(i / improve-01, ARG1, s2 / standard)
(l / live-01, ARG1, h2 / hope-01)
(n / name, op, "Asia")
(n / name, op, "Central")
(s / stable, domain, a2 / and)
(w / world-region, name, n / name)

WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.0.1.1
Decoded in 543,335 microseconds
Sentence: Peng Li hoped that the Kirghizian news media would relay greetings from the Chinese people to the Kirghizian people .

Oracle Span 1:  Chinese => (person :mod (country :name (name :op "China")))
Oracle Span 2:  greetings => greet-01
Oracle Span 3:  hoped => hope-01
Oracle Span 4:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 5:  media => media
Oracle Span 6:  news => news
Oracle Span 7:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 8:  relay => relay-01
NER Entity: (person :name (name :op "Peng" :op "Li"))
NER Entity: (thing :name (name :op "Kirghizian"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 13-14:  Chinese => (person :mod (country :name (name :op "China")))
Span 10-11:  greetings => greet-01
Span 2-3:  hoped => hope-01
Span 5-6:  Kirghizian => (country :name (name :op "Kirghizia"))
Span 7-8:  media => media
Span 6-7:  news => news
Span 0-2:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Span 9-10:  relay => relay-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 13-14:  Chinese => (person :mod (country :name (name :op "China")))
Oracle Span 10-11:  greetings => greet-01
Oracle Span 2-3:  hoped => hope-01
Oracle Span 5-6:  Kirghizian => (country :name (name :op "Kirghizia"))
Oracle Span 7-8:  media => media
Oracle Span 6-7:  news => news
Oracle Span 0-2:  Peng Li => (person :name (name :op "Li" :op "Peng"))
Oracle Span 9-10:  relay => relay-01

Dependencies:
1	Peng	_	NNP	NNP	_	2	nn	_	_
2	Li	_	NNP	NNP	_	3	nsubj	_	_
3	hoped	_	VBD	VBD	_	0	root	_	_
4	that	_	IN	IN	_	10	mark	_	_
5	the	_	DT	DT	_	8	det	_	_
6	Kirghizian	_	NNP	NNP	_	8	nn	_	_
7	news	_	NN	NN	_	8	nn	_	_
8	media	_	NNS	NNS	_	10	nsubj	_	_
9	would	_	MD	MD	_	10	aux	_	_
10	relay	_	VB	VB	_	3	ccomp	_	_
11	greetings	_	NNS	NNS	_	10	dobj	_	_
12	from	_	IN	IN	_	10	prep	_	_
13	the	_	DT	DT	_	15	det	_	_
14	Chinese	_	JJ	JJ	_	15	amod	_	_
15	people	_	NNS	NNS	_	12	pobj	_	_
16	to	_	TO	TO	_	10	prep	_	_
17	the	_	DT	DT	_	19	det	_	_
18	Kirghizian	_	NNP	NNP	_	19	nn	_	_
19	people	_	NNS	NNS	_	16	pobj	_	_
20	.	_	.	.	_	3	punct	_	_

Oracle:
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(g / greet-01, ARG0, p4 / person)
(h / hope-01, ARG0, p / person)
(h / hope-01, ARG1, r / relay-01)
(m / media, mod, c3 / country)
(m / media, mod, n3 / news)
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(n4 / name, op, "Kirghizia")
(n5 / name, op, "China")
(p / person, name, n2 / name)
(p4 / person, mod, c4 / country)
(r / relay-01, ARG0, m / media)
(r / relay-01, ARG1, g / greet-01)

Input(Some(Graph((hope-01 :ARG1 (relay-01 :ARG1 (greet-01 :ARG1 (person :mod country) :ARG0 (person :mod (country :name (name :op "China")))) :ARG0 (media :mod (country :name (name :op "Kirghizia")) :mod news)) :ARG0 (person :name (name :op "Li" :op "Peng"))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Peng Li,(person :name (name :op "Li" :op "Peng")),false), Span(5,6,List(4, 5, 6),Kirghizian,(country :name (name :op "Kirghizia")),false), Span(13,14,List(7, 8, 9, 10),Chinese,(person :mod (country :name (name :op "China"))),false), Span(2,3,List(11),hoped,hope-01,false), Span(9,10,List(12),relay,relay-01,false), Span(7,8,List(13),media,media,false), Span(6,7,List(14),news,news,false), Span(10,11,List(15),greetings,greet-01,false)),Map(2 -> "Li", 5 -> name, 12 -> relay-01, 15 -> greet-01, 8 -> country, 7 -> person, 1 -> name, 4 -> country, 11 -> hope-01, 14 -> news, 6 -> "Kirghizia", 9 -> name, 0 -> person, 10 -> "China", 3 -> "Peng", 13 -> media),Map(h -> hope-01, c4 -> country, n4 -> name, m -> media, g -> greet-01, p -> person, n3 -> news, c3 -> country, p4 -> person, r -> relay-01, n2 -> name, n5 -> name))),[Ljava.lang.String;@2de23121,Annotation([Ljava.lang.String;@63475ace,[Ljava.lang.String;@4988d8b8,[Ljava.lang.String;@c0c2f8d),Annotation([Ljava.lang.String;@305b7c14,[Ljava.lang.String;@6913c1fb,[Ledu.cmu.lti.nlp.amr.Dependency;@66d18979),Annotation([Ljava.lang.String;@bccb269,[Ljava.lang.String;@609cd4d8,[Ljava.lang.String;@17f7cd29),Annotation([Ljava.lang.String;@7d8704ef,[Ljava.lang.String;@13b6aecc,[Ledu.cmu.lti.nlp.amr.Entity;@158a8276))
AMR:
(c3 / country, name, n4 / name)
(c4 / country, name, n5 / name)
(g / greet-01, ARG1, m / media)
(h / hope-01, ARG0, p / person)
(h / hope-01, ARG1, r / relay-01)
(m / media, mod, c3 / country)
(m / media, mod, n3 / news)
(n2 / name, op, "Li")
(n2 / name, op, "Peng")
(n4 / name, op, "Kirghizia")
(n5 / name, op, "China")
(p / person, name, n2 / name)
(p4 / person, mod, c4 / country)
(r / relay-01, ARG0, p4 / person)
(r / relay-01, ARG1, g / greet-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
Decoded in 429,424 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 1-2:  End => end-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(end-01,ArrayBuffer(Span(1,2,List(0),End,end-01,false)),Map(0 -> end-01),Map(e -> end-01))),[Ljava.lang.String;@3c3d9b6b,Annotation([Ljava.lang.String;@79d8407f,[Ljava.lang.String;@5fbe4146,[Ljava.lang.String;@1e66f1f5),Annotation([Ljava.lang.String;@4e50c791,[Ljava.lang.String;@7530ad9c,[Ledu.cmu.lti.nlp.amr.Dependency;@58a9760d),Annotation([Ljava.lang.String;@71e9ddb4,[Ljava.lang.String;@394df057,[Ljava.lang.String;@4961f6af),Annotation([Ljava.lang.String;@5aebe890,[Ljava.lang.String;@65d09a04,[Ledu.cmu.lti.nlp.amr.Entity;@33c911a1))
AMR:


Decoded in 3,372 microseconds
Sentence: Xinhua News Agency , Tokyo , September 1st , by reporter Yiguo Yu

Oracle Span 1:  reporter => report-01
Oracle Span 2:  September => 9
Oracle Span 3:  Tokyo => (city :name (name :op "Tokyo"))
Oracle Span 4:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
Oracle Span 5:  Yiguo Yu => (person :name (name :op "Yu" :op "Yiguo"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Yiguo" :op "Yu"))
NER Entity: (country :name (name :op "Tokyo"))
Spans:
Span 10-11:  reporter => report-01
Span 6-7:  September => 9
Span 4-5:  Tokyo => (city :name (name :op "Tokyo"))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
Span 11-13:  Yiguo Yu => (person :name (name :op "Yu" :op "Yiguo"))

Langrangian relaxation converged after 8 iterations. Delta = 0.0
Oracle Span 10-11:  reporter => report-01
Oracle Span 6-7:  September => 9
Oracle Span 4-5:  Tokyo => (city :name (name :op "Tokyo"))
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
Oracle Span 11-13:  Yiguo Yu => (person :name (name :op "Yu" :op "Yiguo"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Tokyo	_	NNP	NNP	_	7	nn	_	_
6	,	_	,	,	_	7	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporter	_	NN	NN	_	13	nn	_	_
12	Yiguo	_	NNP	NNP	_	13	nn	_	_
13	Yu	_	NNP	NNP	_	10	pobj	_	_

Oracle:
(c2 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Yiguo")
(n2 / name, op, "Yu")
(n3 / name, op, "Tokyo")
(p / person, name, n2 / name)
(p2 / publication, name, n / name)
(r / report-01, ARG0, p / person)

Input(Some(Graph((byline-91 :ARG0 (publication :name (name :op "Agency" :op "News" :op "Xinhua")) :ARG1 (person :ARG0-of report-01 :name (name :op "Yu" :op "Yiguo")) :location (city :name (name :op "Tokyo")) :time (date-entity :month 9 :day 1)),ArrayBuffer(Span(0,3,List(0, 1, 2, 3, 4),Xinhua News Agency,(publication :name (name :op "Agency" :op "News" :op "Xinhua")),false), Span(11,13,List(5, 6, 7, 8),Yiguo Yu,(person :name (name :op "Yu" :op "Yiguo")),false), Span(4,5,List(9, 10, 11),Tokyo,(city :name (name :op "Tokyo")),false), Span(10,11,List(12),reporter,report-01,false), Span(6,7,List(13),September,9,false)),Map(2 -> "Agency", 5 -> person, 12 -> report-01, 8 -> "Yiguo", 7 -> "Yu", 1 -> name, 4 -> "Xinhua", 11 -> "Tokyo", 6 -> name, 9 -> city, 0 -> publication, 10 -> name, 3 -> "News", 13 -> 9),Map(n -> name, p2 -> publication, p -> person, n3 -> name, r -> report-01, 9 -> 9, c2 -> city, n2 -> name))),[Ljava.lang.String;@75db5df9,Annotation([Ljava.lang.String;@707194ba,[Ljava.lang.String;@1190200a,[Ljava.lang.String;@6a2f6f80),Annotation([Ljava.lang.String;@45b4c3a9,[Ljava.lang.String;@399c4be1,[Ledu.cmu.lti.nlp.amr.Dependency;@291caca8),Annotation([Ljava.lang.String;@385e9564,[Ljava.lang.String;@5b94b04d,[Ljava.lang.String;@8c3b9d),Annotation([Ljava.lang.String;@4c39bec8,[Ljava.lang.String;@f79e,[Ledu.cmu.lti.nlp.amr.Entity;@7ee8290b))
AMR:
(c2 / city, location, 9 / 9)
(c2 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Yiguo")
(n2 / name, op, "Yu")
(n3 / name, op, "Tokyo")
(p / person, name, n2 / name)
(p2 / publication, name, n / name)
(p2 / publication, poss, p / person)
(r / report-01, ARG0, p / person)
(r / report-01, ARG1, 9 / 9)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.3.0
Decoded in 99,591 microseconds
Sentence: The Japanese delegation participating in the Sixth Far East and South Pacific Region Handicapped Sports Meet held a grand swearing in ceremony in Tokyo this afternoon .

Oracle Span 1:  afternoon => afternoon
Oracle Span 2:  ceremony => ceremony
Oracle Span 3:  delegation => delegation
Oracle Span 4:  Far East and South Pacific Region Handicapped Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "Handicapped" :op "Region" :op "Pacific" :op "South" :op "and" :op "East" :op "Far"))
Oracle Span 5:  grand => grand
Oracle Span 6:  held => hold-04
Oracle Span 7:  Japanese => (country :name (name :op "Japan"))
Oracle Span 8:  participating => participate-01
Oracle Span 9:  swearing => swear-06
Oracle Span 10:  this => this
Oracle Span 11:  Tokyo => (city :name (name :op "Tokyo"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 25-26:  afternoon => afternoon
Span 21-22:  ceremony => ceremony
Span 2-3:  delegation => delegation
Span 7-16:  Far East and South Pacific Region Handicapped Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "Handicapped" :op "Region" :op "Pacific" :op "South" :op "and" :op "East" :op "Far"))
Span 18-19:  grand => grand
Span 16-17:  held => hold-04
Span 1-2:  Japanese => (country :name (name :op "Japan"))
Span 3-4:  participating => participate-01
Span 19-20:  swearing => swear-06
Span 24-25:  this => this
Span 23-24:  Tokyo => (city :name (name :op "Tokyo"))

Langrangian relaxation converged after 39 iterations. Delta = 0.0
Oracle Span 25-26:  afternoon => afternoon
Oracle Span 21-22:  ceremony => ceremony
Oracle Span 2-3:  delegation => delegation
Oracle Span 7-16:  Far East and South Pacific Region Handicapped Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "Handicapped" :op "Region" :op "Pacific" :op "South" :op "and" :op "East" :op "Far"))
Oracle Span 18-19:  grand => grand
Oracle Span 16-17:  held => hold-04
Oracle Span 1-2:  Japanese => (country :name (name :op "Japan"))
Oracle Span 3-4:  participating => participate-01
Oracle Span 19-20:  swearing => swear-06
Oracle Span 24-25:  this => this
Oracle Span 23-24:  Tokyo => (city :name (name :op "Tokyo"))

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Japanese	_	JJ	JJ	_	3	amod	_	_
3	delegation	_	NN	NN	_	17	nsubj	_	_
4	participating	_	VBG	VBG	_	3	vmod	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	9	det	_	_
7	Sixth	_	NNP	NNP	_	9	nn	_	_
8	Far	_	NNP	NNP	_	9	nn	_	_
9	East	_	NNP	NNP	_	5	pobj	_	_
10	and	_	CC	CC	_	9	cc	_	_
11	South	_	NNP	NNP	_	16	nn	_	_
12	Pacific	_	NNP	NNP	_	16	nn	_	_
13	Region	_	NNP	NNP	_	16	nn	_	_
14	Handicapped	_	NNP	NNP	_	16	nn	_	_
15	Sports	_	NNPS	NNPS	_	16	nn	_	_
16	Meet	_	NNP	NNP	_	9	conj	_	_
17	held	_	VBD	VBD	_	0	root	_	_
18	a	_	DT	DT	_	20	det	_	_
19	grand	_	JJ	JJ	_	20	amod	_	_
20	swearing	_	NN	NN	_	17	dobj	_	_
21	in	_	IN	IN	_	17	prep	_	_
22	ceremony	_	NN	NN	_	21	pobj	_	_
23	in	_	IN	IN	_	17	prep	_	_
24	Tokyo	_	NNP	NNP	_	23	pobj	_	_
25	this	_	DT	DT	_	26	det	_	_
26	afternoon	_	NN	NN	_	17	tmod	_	_
27	.	_	.	.	_	17	punct	_	_

Oracle:
(a / afternoon, mod, t2 / this)
(c3 / ceremony, mod, g2 / grand)
(c3 / ceremony, mod, s2 / swear-06)
(c4 / city, name, n2 / name)
(c5 / country, name, n3 / name)
(d / delegation, mod, c5 / country)
(g / game, name, n / name)
(h / hold-04, ARG0, d / delegation)
(h / hold-04, ARG1, c3 / ceremony)
(h / hold-04, location, c4 / city)
(h / hold-04, time, a / afternoon)
(n / name, op, "East")
(n / name, op, "Far")
(n / name, op, "Handicapped")
(n / name, op, "Meet")
(n / name, op, "Pacific")
(n / name, op, "Region")
(n / name, op, "South")
(n / name, op, "Sports")
(n / name, op, "and")
(n2 / name, op, "Tokyo")
(n3 / name, op, "Japan")
(p / participate-01, ARG0, d / delegation)
(p / participate-01, ARG1, g / game)

Input(Some(Graph((hold-04 :time (afternoon :mod this) :location (city :name (name :op "Tokyo")) :ARG1 (ceremony :mod grand :mod swear-06) :ARG0 (delegation :mod (country :name (name :op "Japan")) :ARG0-of (participate-01 :ARG1 (game :ord (ordinal-entity :value 6) :name (name :op "Meet" :op "Sports" :op "Handicapped" :op "Region" :op "Pacific" :op "South" :op "and" :op "East" :op "Far"))))),ArrayBuffer(Span(7,16,List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),Far East and South Pacific Region Handicapped Sports Meet,(game :name (name :op "Meet" :op "Sports" :op "Handicapped" :op "Region" :op "Pacific" :op "South" :op "and" :op "East" :op "Far")),false), Span(23,24,List(11, 12, 13),Tokyo,(city :name (name :op "Tokyo")),false), Span(1,2,List(14, 15, 16),Japanese,(country :name (name :op "Japan")),false), Span(16,17,List(17),held,hold-04,false), Span(25,26,List(18),afternoon,afternoon,false), Span(24,25,List(19),this,this,false), Span(21,22,List(20),ceremony,ceremony,false), Span(18,19,List(21),grand,grand,false), Span(19,20,List(22),swearing,swear-06,false), Span(2,3,List(23),delegation,delegation,false), Span(3,4,List(24),participating,participate-01,false)),Map(2 -> "Meet", 5 -> "Region", 12 -> name, 15 -> name, 8 -> "and", 21 -> grand, 18 -> afternoon, 24 -> participate-01, 7 -> "South", 17 -> hold-04, 1 -> name, 23 -> delegation, 4 -> "Handicapped", 11 -> city, 14 -> country, 20 -> ceremony, 6 -> "Pacific", 9 -> "East", 0 -> game, 22 -> swear-06, 16 -> "Japan", 19 -> this, 10 -> "Far", 3 -> "Sports", 13 -> "Tokyo"),Map(n -> name, h -> hold-04, s2 -> swear-06, c4 -> city, d -> delegation, g2 -> grand, p -> participate-01, g -> game, c3 -> ceremony, a -> afternoon, n3 -> name, t2 -> this, n2 -> name, c5 -> country))),[Ljava.lang.String;@1f59a598,Annotation([Ljava.lang.String;@1e178745,[Ljava.lang.String;@192c3f1e,[Ljava.lang.String;@26b3fd41),Annotation([Ljava.lang.String;@7494f96a,[Ljava.lang.String;@561b6512,[Ledu.cmu.lti.nlp.amr.Dependency;@2e377400),Annotation([Ljava.lang.String;@1757cd72,[Ljava.lang.String;@445b295b,[Ljava.lang.String;@49e5f737),Annotation([Ljava.lang.String;@5c671d7f,[Ljava.lang.String;@757277dc,[Ledu.cmu.lti.nlp.amr.Entity;@687e99d8))
AMR:
(a / afternoon, mod, t2 / this)
(c4 / city, name, n2 / name)
(c5 / country, name, n3 / name)
(d / delegation, mod, c5 / country)
(g / game, name, n / name)
(h / hold-04, ARG0, d / delegation)
(h / hold-04, ARG1, s2 / swear-06)
(n / name, op, "East")
(n / name, op, "Far")
(n / name, op, "Handicapped")
(n / name, op, "Meet")
(n / name, op, "Pacific")
(n / name, op, "Region")
(n / name, op, "South")
(n / name, op, "Sports")
(n / name, op, "and")
(n2 / name, op, "Tokyo")
(n3 / name, op, "Japan")
(p / participate-01, ARG0, d / delegation)
(p / participate-01, ARG1, g / game)
(p / participate-01, ARG2, a / afternoon)
(s2 / swear-06, ARG1, c3 / ceremony)
(s2 / swear-06, location, c4 / city)
(s2 / swear-06, mod, g2 / grand)

WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.8
WARNING: makeIds can't find span Id: 0.0.0.0.0.7
WARNING: makeIds can't find span Id: 0.0.0.0.0.6
WARNING: makeIds can't find span Id: 0.0.0.0.0.5
WARNING: makeIds can't find span Id: 0.0.0.0.0.4
WARNING: makeIds can't find span Id: 0.0.0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 866,285 microseconds
Sentence: A Japanese flag hung from the Chairman 's stage .

Oracle Span 1:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 2:  flag => flag
Oracle Span 3:  hung => hang-01
Oracle Span 4:  Japanese => (country :name (name :op "Japan"))
Oracle Span 5:  stage => stage
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 6-7:  Chairman => (have-org-role-91 :ARG2 chairman)
Span 2-3:  flag => flag
Span 3-4:  hung => hang-01
Span 1-2:  Japanese => (country :name (name :op "Japan"))
Span 8-9:  stage => stage

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 6-7:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 2-3:  flag => flag
Oracle Span 3-4:  hung => hang-01
Oracle Span 1-2:  Japanese => (country :name (name :op "Japan"))
Oracle Span 8-9:  stage => stage

Dependencies:
1	A	_	DT	DT	_	3	det	_	_
2	Japanese	_	JJ	JJ	_	3	amod	_	_
3	flag	_	NN	NN	_	4	nsubj	_	_
4	hung	_	VBD	VBD	_	0	root	_	_
5	from	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	7	det	_	_
7	Chairman	_	NNP	NNP	_	9	poss	_	_
8	's	_	POS	POS	_	7	possessive	_	_
9	stage	_	NN	NN	_	5	pobj	_	_
10	.	_	.	.	_	4	punct	_	_

Oracle:
(c2 / country, name, n / name)
(f / flag, mod, c2 / country)
(h / hang-01, ARG1, f / flag)
(h / hang-01, ARG2, s / stage)
(h2 / have-org-role-91, ARG2, c3 / chairman)
(n / name, op, "Japan")

Input(Some(Graph((hang-01 :ARG2 (stage :poss (person :ARG0-of (have-org-role-91 :ARG2 chairman))) :ARG1 (flag :mod (country :name (name :op "Japan")))),ArrayBuffer(Span(1,2,List(0, 1, 2),Japanese,(country :name (name :op "Japan")),false), Span(3,4,List(3),hung,hang-01,false), Span(8,9,List(4),stage,stage,false), Span(6,7,List(5, 6),Chairman,(have-org-role-91 :ARG2 chairman),false), Span(2,3,List(7),flag,flag,false)),Map(2 -> "Japan", 5 -> have-org-role-91, 7 -> flag, 1 -> name, 4 -> stage, 6 -> chairman, 0 -> country, 3 -> hang-01),Map(n -> name, h -> hang-01, h2 -> have-org-role-91, s -> stage, c3 -> chairman, f -> flag, c2 -> country))),[Ljava.lang.String;@e4487af,Annotation([Ljava.lang.String;@6aaceffd,[Ljava.lang.String;@c86b9e3,[Ljava.lang.String;@10aa41f2),Annotation([Ljava.lang.String;@3af9c5b7,[Ljava.lang.String;@37271612,[Ledu.cmu.lti.nlp.amr.Dependency;@ed7f8b4),Annotation([Ljava.lang.String;@4c309d4d,[Ljava.lang.String;@38102d01,[Ljava.lang.String;@37883b97),Annotation([Ljava.lang.String;@6ab778a,[Ljava.lang.String;@4e3958e7,[Ledu.cmu.lti.nlp.amr.Entity;@77f80c04))
AMR:
(c2 / country, name, n / name)
(f / flag, mod, c2 / country)
(h / hang-01, ARG0, f / flag)
(h / hang-01, ARG1, s / stage)
(h2 / have-org-role-91, ARG1, c2 / country)
(h2 / have-org-role-91, ARG2, c3 / chairman)
(n / name, op, "Japan")

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 99,038 microseconds
Sentence: Sportsmen , coaches , doctors , nurses and officials of the delegation sat neatly below the stage .

Oracle Span 1:  and => and
Oracle Span 2:  below => below
Oracle Span 3:  coaches => (person :ARG0-of coach-01)
Oracle Span 4:  delegation => delegation
Oracle Span 5:  doctors => doctor
Oracle Span 6:  neatly => neat
Oracle Span 7:  nurses => nurse
Oracle Span 8:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 9:  sat => sit-01
Oracle Span 10:  Sportsmen => sportsman
Oracle Span 11:  stage => stage
Spans:
Span 7-8:  and => and
Span 14-15:  below => below
Span 2-3:  coaches => (person :ARG0-of coach-01)
Span 11-12:  delegation => delegation
Span 4-5:  doctors => doctor
Span 13-14:  neatly => neat
Span 6-7:  nurses => nurse
Span 8-9:  officials => (have-org-role-91 :ARG2 official)
Span 12-13:  sat => sit-01
Span 0-1:  Sportsmen => sportsman
Span 16-17:  stage => stage

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 14-15:  below => below
Oracle Span 2-3:  coaches => (person :ARG0-of coach-01)
Oracle Span 11-12:  delegation => delegation
Oracle Span 4-5:  doctors => doctor
Oracle Span 13-14:  neatly => neat
Oracle Span 6-7:  nurses => nurse
Oracle Span 8-9:  officials => (have-org-role-91 :ARG2 official)
Oracle Span 12-13:  sat => sit-01
Oracle Span 0-1:  Sportsmen => sportsman
Oracle Span 16-17:  stage => stage

Dependencies:
1	Sportsmen	_	JJ	JJ	_	13	nsubj	_	_
2	,	_	,	,	_	1	punct	_	_
3	coaches	_	NNS	NNS	_	1	conj	_	_
4	,	_	,	,	_	1	punct	_	_
5	doctors	_	NNS	NNS	_	1	conj	_	_
6	,	_	,	,	_	1	punct	_	_
7	nurses	_	NNS	NNS	_	1	conj	_	_
8	and	_	CC	CC	_	1	cc	_	_
9	officials	_	NNS	NNS	_	1	conj	_	_
10	of	_	IN	IN	_	1	prep	_	_
11	the	_	DT	DT	_	12	det	_	_
12	delegation	_	NN	NN	_	10	pobj	_	_
13	sat	_	VBD	VBD	_	0	root	_	_
14	neatly	_	RB	RB	_	13	advmod	_	_
15	below	_	IN	IN	_	13	prep	_	_
16	the	_	DT	DT	_	17	det	_	_
17	stage	_	NN	NN	_	15	pobj	_	_
18	.	_	.	.	_	13	punct	_	_

Oracle:
(a / and, op, d / doctor)
(a / and, op, n / nurse)
(a / and, op, p / person)
(a / and, op, s2 / sportsman)
(b / below, op, s3 / stage)
(c / coach-01, ARG0, p / person)
(h / have-org-role-91, ARG1, d2 / delegation)
(h / have-org-role-91, ARG2, o2 / official)
(s / sit-01, ARG1, a / and)
(s / sit-01, location, b / below)
(s / sit-01, manner, n2 / neat)

Input(Some(Graph((sit-01 :manner neat :location (below :op stage) :ARG1 (and :op (person :ARG0-of (have-org-role-91 :ARG2 official :ARG1 delegation)) :op nurse :op doctor :op (person :ARG0-of coach-01) :op sportsman)),ArrayBuffer(Span(12,13,List(0),sat,sit-01,false), Span(14,15,List(1),below,below,false), Span(16,17,List(2),stage,stage,false), Span(7,8,List(3),and,and,false), Span(11,12,List(4),delegation,delegation,false), Span(8,9,List(5, 6),officials,(have-org-role-91 :ARG2 official),false), Span(6,7,List(7),nurses,nurse,false), Span(4,5,List(8),doctors,doctor,false), Span(2,3,List(9, 10),coaches,(person :ARG0-of coach-01),false), Span(0,1,List(11),Sportsmen,sportsman,false), Span(13,14,List(12),neatly,neat,false)),Map(2 -> stage, 5 -> have-org-role-91, 12 -> neat, 8 -> doctor, 7 -> nurse, 1 -> below, 4 -> delegation, 11 -> sportsman, 6 -> official, 9 -> person, 0 -> sit-01, 10 -> coach-01, 3 -> and),Map(n -> nurse, h -> have-org-role-91, s2 -> sportsman, b -> below, s -> sit-01, d -> doctor, p -> person, a -> and, o2 -> official, d2 -> delegation, c -> coach-01, s3 -> stage, n2 -> neat))),[Ljava.lang.String;@1dac5ef,Annotation([Ljava.lang.String;@5c90e579,[Ljava.lang.String;@58ea606c,[Ljava.lang.String;@6f45df59),Annotation([Ljava.lang.String;@38e79ae3,[Ljava.lang.String;@63070bab,[Ledu.cmu.lti.nlp.amr.Dependency;@68e5eea7),Annotation([Ljava.lang.String;@291b4bf5,[Ljava.lang.String;@2d2ffcb7,[Ljava.lang.String;@762ef0ea),Annotation([Ljava.lang.String;@31f9b85e,[Ljava.lang.String;@424e1977,[Ledu.cmu.lti.nlp.amr.Entity;@10d68fcd))
AMR:
(a / and, op, d / doctor)
(a / and, op, p / person)
(a / and, op, s2 / sportsman)
(b / below, mod, n2 / neat)
(b / below, op, s3 / stage)
(c / coach-01, ARG0, p / person)
(c / coach-01, ARG1, s / sit-01)
(h / have-org-role-91, ARG1, s / sit-01)
(h / have-org-role-91, ARG2, o2 / official)
(s / sit-01, ARG0, d2 / delegation)
(s / sit-01, ARG1, n / nurse)
(s / sit-01, ARG6, b / below)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.4.0.0
WARNING: makeIds can't find span Id: 0.0.4.0
WARNING: makeIds can't find span Id: 0.0.4.0.1
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 360,635 microseconds
Sentence: An atmosphere of confidence and eagerness for progress filled the ceremony ground .

Oracle Span 1:  and => and
Oracle Span 2:  atmosphere => atmosphere
Oracle Span 3:  ceremony => ceremony
Oracle Span 4:  confidence => confident-41
Oracle Span 5:  eagerness => eager-41
Oracle Span 6:  filled => fill-01
Oracle Span 7:  ground => ground
Oracle Span 8:  progress => progress-01
Spans:
Span 4-5:  and => and
Span 1-2:  atmosphere => atmosphere
Span 10-11:  ceremony => ceremony
Span 3-4:  confidence => confident-41
Span 5-6:  eagerness => eager-41
Span 8-9:  filled => fill-01
Span 11-12:  ground => ground
Span 7-8:  progress => progress-01

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 1-2:  atmosphere => atmosphere
Oracle Span 10-11:  ceremony => ceremony
Oracle Span 3-4:  confidence => confident-41
Oracle Span 5-6:  eagerness => eager-41
Oracle Span 8-9:  filled => fill-01
Oracle Span 11-12:  ground => ground
Oracle Span 7-8:  progress => progress-01

Dependencies:
1	An	_	DT	DT	_	2	det	_	_
2	atmosphere	_	NN	NN	_	9	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	confidence	_	NN	NN	_	3	pobj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	eagerness	_	NN	NN	_	4	conj	_	_
7	for	_	IN	IN	_	4	prep	_	_
8	progress	_	NN	NN	_	7	pobj	_	_
9	filled	_	VBD	VBD	_	0	root	_	_
10	the	_	DT	DT	_	12	det	_	_
11	ceremony	_	NN	NN	_	12	nn	_	_
12	ground	_	NN	NN	_	9	dobj	_	_
13	.	_	.	.	_	9	punct	_	_

Oracle:
(a2 / and, consist, a / atmosphere)
(a2 / and, op, c / confident-41)
(a2 / and, op, e / eager-41)
(c2 / ceremony, location, g / ground)
(e / eager-41, ARG1, p / progress-01)
(f / fill-01, ARG1, g / ground)
(f / fill-01, ARG2, a / atmosphere)

Input(Some(Graph((fill-01 :ARG2 (atmosphere :consist-of (and :op (eager-41 :ARG1 progress-01) :op confident-41)) :ARG1 (ground :location-of ceremony)),ArrayBuffer(Span(8,9,List(0),filled,fill-01,false), Span(1,2,List(1),atmosphere,atmosphere,false), Span(4,5,List(2),and,and,false), Span(7,8,List(3),progress,progress-01,false), Span(11,12,List(4),ground,ground,false), Span(10,11,List(5),ceremony,ceremony,false), Span(5,6,List(6),eagerness,eager-41,false), Span(3,4,List(7),confidence,confident-41,false)),Map(2 -> and, 5 -> ceremony, 7 -> confident-41, 1 -> atmosphere, 4 -> ground, 6 -> eager-41, 0 -> fill-01, 3 -> progress-01),Map(e -> eager-41, g -> ground, p -> progress-01, a -> atmosphere, a2 -> and, c -> confident-41, f -> fill-01, c2 -> ceremony))),[Ljava.lang.String;@117e949d,Annotation([Ljava.lang.String;@6db9f5a4,[Ljava.lang.String;@5f8edcc5,[Ljava.lang.String;@7b02881e),Annotation([Ljava.lang.String;@1ebd319f,[Ljava.lang.String;@3c0be339,[Ledu.cmu.lti.nlp.amr.Dependency;@15ca7889),Annotation([Ljava.lang.String;@7a675056,[Ljava.lang.String;@d21a74c,[Ljava.lang.String;@6e509ffa),Annotation([Ljava.lang.String;@2898ac89,[Ljava.lang.String;@683dbc2c,[Ledu.cmu.lti.nlp.amr.Entity;@68267da0))
AMR:
(a2 / and, op, c / confident-41)
(a2 / and, op, e / eager-41)
(c / confident-41, ARG1, p / progress-01)
(c2 / ceremony, location, g / ground)
(e / eager-41, ARG1, f / fill-01)
(f / fill-01, ARG0, a / atmosphere)
(f / fill-01, ARG1, g / ground)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 100,094 microseconds
Sentence: Vice-minister of the Japanese State Welfare Ministry , Souyasen , delivered a " bolstering departure speech " to the delegation .

Oracle Span 1:  bolstering => bolster-01
Oracle Span 2:  delegation => delegation
Oracle Span 3:  delivered => deliver-01
Oracle Span 4:  departure => depart-01
Oracle Span 5:  Japanese => (country :name (name :op "Japan"))
Oracle Span 6:  minister => (have-org-role-91 :ARG2 minister)
Oracle Span 7:  Souyasen => (person :name (name :op "Souyasen"))
Oracle Span 8:  speech => speech
Oracle Span 9:  State Welfare Ministry => (government-organization :name (name :op "Ministry" :op "Welfare" :op "State"))
Oracle Span 10:  Vice => vice
NER Entity: (organization :name (name :op "Welfare" :op "Ministry"))
Spans:
Span 15-16:  bolstering => bolster-01
Span 21-22:  delegation => delegation
Span 12-13:  delivered => deliver-01
Span 16-17:  departure => depart-01
Span 5-6:  Japanese => (country :name (name :op "Japan"))
Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Span 10-11:  Souyasen => (person :name (name :op "Souyasen"))
Span 17-18:  speech => speech
Span 6-9:  State Welfare Ministry => (government-organization :name (name :op "Ministry" :op "Welfare" :op "State"))
Span 0-1:  Vice => vice

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 15-16:  bolstering => bolster-01
Oracle Span 21-22:  delegation => delegation
Oracle Span 12-13:  delivered => deliver-01
Oracle Span 16-17:  departure => depart-01
Oracle Span 5-6:  Japanese => (country :name (name :op "Japan"))
Oracle Span 2-3:  minister => (have-org-role-91 :ARG2 minister)
Oracle Span 10-11:  Souyasen => (person :name (name :op "Souyasen"))
Oracle Span 17-18:  speech => speech
Oracle Span 6-9:  State Welfare Ministry => (government-organization :name (name :op "Ministry" :op "Welfare" :op "State"))
Oracle Span 0-1:  Vice => vice

Dependencies:
1	Vice-minister	_	NN	NN	_	11	nsubj	_	_
2	of	_	IN	IN	_	1	prep	_	_
3	the	_	DT	DT	_	7	det	_	_
4	Japanese	_	JJ	JJ	_	7	amod	_	_
5	State	_	NNP	NNP	_	7	nn	_	_
6	Welfare	_	NNP	NNP	_	7	nn	_	_
7	Ministry	_	NNP	NNP	_	2	pobj	_	_
8	,	_	,	,	_	1	punct	_	_
9	Souyasen	_	NNP	NNP	_	1	appos	_	_
10	,	_	,	,	_	1	punct	_	_
11	delivered	_	VBD	VBD	_	0	root	_	_
12	a	_	SYM	SYM	_	11	dobj	_	_
13	"	_	''	''	_	12	punct	_	_
14	bolstering	_	VBG	VBG	_	12	vmod	_	_
15	departure	_	NN	NN	_	16	nn	_	_
16	speech	_	NN	NN	_	14	dobj	_	_
17	"	_	''	''	_	14	punct	_	_
18	to	_	TO	TO	_	14	prep	_	_
19	the	_	DT	DT	_	20	det	_	_
20	delegation	_	NN	NN	_	18	pobj	_	_
21	.	_	.	.	_	11	punct	_	_

Oracle:
(b / bolster-01, ARG0, s2 / speech)
(c / country, name, n3 / name)
(d / deliver-01, ARG0, p / person)
(d / deliver-01, ARG1, s2 / speech)
(d / deliver-01, ARG2, d3 / delegation)
(g / government-organization, mod, c / country)
(g / government-organization, name, n2 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, v / vice)
(n / name, op, "Souyasen")
(n2 / name, op, "Ministry")
(n2 / name, op, "State")
(n2 / name, op, "Welfare")
(n3 / name, op, "Japan")
(p / person, name, n / name)
(s2 / speech, mod, d2 / depart-01)

Input(Some(Graph((deliver-01 :ARG2 delegation :ARG1 (speech :ARG0-of bolster-01 :mod depart-01) :ARG0 (person :ARG0-of (have-org-role-91 :ARG2 (minister :mod vice) :ARG1 (government-organization :mod (country :name (name :op "Japan")) :name (name :op "Ministry" :op "Welfare" :op "State"))) :name (name :op "Souyasen"))),ArrayBuffer(Span(10,11,List(0, 1, 2),Souyasen,(person :name (name :op "Souyasen")),false), Span(6,9,List(3, 4, 5, 6, 7),State Welfare Ministry,(government-organization :name (name :op "Ministry" :op "Welfare" :op "State")),false), Span(5,6,List(8, 9, 10),Japanese,(country :name (name :op "Japan")),false), Span(12,13,List(11),delivered,deliver-01,false), Span(21,22,List(12),delegation,delegation,false), Span(17,18,List(13),speech,speech,false), Span(15,16,List(14),bolstering,bolster-01,false), Span(2,3,List(15, 16),minister,(have-org-role-91 :ARG2 minister),false), Span(0,1,List(17),Vice,vice,false), Span(16,17,List(18),departure,depart-01,false)),Map(2 -> "Souyasen", 5 -> "Ministry", 12 -> delegation, 15 -> have-org-role-91, 8 -> country, 18 -> depart-01, 7 -> "State", 17 -> vice, 1 -> name, 4 -> name, 11 -> deliver-01, 14 -> bolster-01, 6 -> "Welfare", 9 -> name, 0 -> person, 16 -> minister, 10 -> "Japan", 3 -> government-organization, 13 -> speech),Map(n -> name, h -> have-org-role-91, s2 -> speech, b -> bolster-01, d3 -> delegation, v -> vice, m -> minister, d -> deliver-01, g -> government-organization, p -> person, n3 -> name, d2 -> depart-01, c -> country, n2 -> name))),[Ljava.lang.String;@2638011,Annotation([Ljava.lang.String;@6ff29830,[Ljava.lang.String;@6a2b953e,[Ljava.lang.String;@313b2ea6),Annotation([Ljava.lang.String;@2f465398,[Ljava.lang.String;@548e6d58,[Ledu.cmu.lti.nlp.amr.Dependency;@623a8092),Annotation([Ljava.lang.String;@a1cdc6d,[Ljava.lang.String;@175b9425,[Ljava.lang.String;@3098cf3b),Annotation([Ljava.lang.String;@610f7aa,[Ljava.lang.String;@6a03bcb1,[Ledu.cmu.lti.nlp.amr.Entity;@21b2e768))
AMR:
(b / bolster-01, ARG1, s2 / speech)
(b / bolster-01, ARG2, d3 / delegation)
(c / country, name, n3 / name)
(d / deliver-01, ARG0, v / vice)
(d / deliver-01, ARG1, b / bolster-01)
(d2 / depart-01, ARG1, s2 / speech)
(g / government-organization, name, n2 / name)
(g / government-organization, poss, c / country)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, g / government-organization)
(h / have-org-role-91, ARG2, m / minister)
(m / minister, mod, v / vice)
(n / name, op, "Souyasen")
(n2 / name, op, "Ministry")
(n2 / name, op, "State")
(n2 / name, op, "Welfare")
(n3 / name, op, "Japan")
(p / person, name, n / name)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.2
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 448,265 microseconds
Sentence: Souya said , the Far South Sports Meet was an international sports meet that attracts the world 's attention , and the scale of this sports meet to be held in Beijing is the largest to date .

Oracle Span 1:  and => and
Oracle Span 2:  attention => attention
Oracle Span 3:  attracts => attract-01
Oracle Span 4:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 5:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Oracle Span 6:  held => hold-04
Oracle Span 7:  international => international
Oracle Span 8:  largest => (large :degree most)
Oracle Span 9:  meet => meet
Oracle Span 10:  said => say-01
Oracle Span 11:  scale => scale
Oracle Span 12:  Souya => (person :name (name :op "Souya"))
Oracle Span 13:  sports => sport
Oracle Span 14:  world => world
NER Entity: (person :name (name :op "Souya"))
NER Entity: (organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet"))
NER Entity: (country :name (name :op "Beijing"))
Spans:
Span 20-21:  and => and
Span 18-19:  attention => attention
Span 14-15:  attracts => attract-01
Span 31-32:  Beijing => (city :name (name :op "Beijing"))
Span 4-8:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Span 29-30:  held => hold-04
Span 10-11:  international => international
Span 34-35:  largest => (large :degree most)
Span 12-13:  meet => meet
Span 1-2:  said => say-01
Span 22-23:  scale => scale
Span 0-1:  Souya => (person :name (name :op "Souya"))
Span 11-12:  sports => sport
Span 16-17:  world => world

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 20-21:  and => and
Oracle Span 18-19:  attention => attention
Oracle Span 14-15:  attracts => attract-01
Oracle Span 31-32:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 4-8:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Oracle Span 29-30:  held => hold-04
Oracle Span 10-11:  international => international
Oracle Span 34-35:  largest => (large :degree most)
Oracle Span 12-13:  meet => meet
Oracle Span 1-2:  said => say-01
Oracle Span 22-23:  scale => scale
Oracle Span 0-1:  Souya => (person :name (name :op "Souya"))
Oracle Span 11-12:  sports => sport
Oracle Span 16-17:  world => world

Dependencies:
1	Souya	_	NNP	NNP	_	2	nsubj	_	_
2	said	_	VBD	VBD	_	0	root	_	_
3	,	_	,	,	_	12	punct	_	_
4	the	_	DT	DT	_	8	det	_	_
5	Far	_	NNP	NNP	_	8	nn	_	_
6	South	_	NNP	NNP	_	8	nn	_	_
7	Sports	_	NNP	NNP	_	8	nn	_	_
8	Meet	_	NNP	NNP	_	12	nsubj	_	_
9	was	_	VBD	VBD	_	12	cop	_	_
10	an	_	DT	DT	_	12	det	_	_
11	international	_	JJ	JJ	_	12	amod	_	_
12	sports	_	NNS	NNS	_	2	dep	_	_
13	meet	_	VBP	VBP	_	12	rcmod	_	_
14	that	_	IN	IN	_	15	mark	_	_
15	attracts	_	VBZ	VBZ	_	13	ccomp	_	_
16	the	_	DT	DT	_	17	det	_	_
17	world	_	NN	NN	_	19	poss	_	_
18	's	_	POS	POS	_	17	possessive	_	_
19	attention	_	NN	NN	_	15	dobj	_	_
20	,	_	,	,	_	12	punct	_	_
21	and	_	CC	CC	_	2	cc	_	_
22	the	_	DT	DT	_	23	det	_	_
23	scale	_	NN	NN	_	27	nsubj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	this	_	DT	DT	_	26	det	_	_
26	sports	_	NNS	NNS	_	24	pobj	_	_
27	meet	_	VBP	VBP	_	2	conj	_	_
28	to	_	TO	TO	_	30	aux	_	_
29	be	_	VB	VB	_	30	auxpass	_	_
30	held	_	VBN	VBN	_	27	xcomp	_	_
31	in	_	IN	IN	_	30	prep	_	_
32	Beijing	_	NNP	NNP	_	31	pobj	_	_
33	is	_	VBZ	VBZ	_	35	cop	_	_
34	the	_	DT	DT	_	35	det	_	_
35	largest	_	JJS	JJS	_	32	rcmod	_	_
36	to	_	TO	TO	_	35	prep	_	_
37	date	_	NN	NN	_	36	pobj	_	_
38	.	_	.	.	_	2	punct	_	_

Oracle:
(a / and, op, l / large)
(a / and, op, m3 / meet)
(a2 / attract-01, ARG0, m3 / meet)
(a2 / attract-01, ARG1, a3 / attention)
(a3 / attention, poss, w / world)
(c2 / city, name, n3 / name)
(g / game, name, n2 / name)
(h / hold-04, ARG1, m3 / meet)
(h / hold-04, location, c2 / city)
(l / large, degree, m2 / most)
(l / large, domain, s4 / scale)
(m3 / meet, domain, g / game)
(m3 / meet, mod, i / international)
(m3 / meet, mod, s3 / sport)
(n / name, op, "Souya")
(n2 / name, op, "Far")
(n2 / name, op, "Meet")
(n2 / name, op, "South")
(n2 / name, op, "Sports")
(n3 / name, op, "Beijing")
(p2 / person, name, n / name)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, a / and)
(s4 / scale, poss, g / game)

Input(Some(Graph((say-01 :ARG1 (and :op (large :domain (scale :poss game) :time to-date :degree most) :op (meet :ARG1-of (hold-04 :location (city :name (name :op "Beijing"))) :domain (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far")) :ARG0-of (attract-01 :ARG1 (attention :poss world)) :mod international :mod sport)) :ARG0 (person :name (name :op "Souya"))),ArrayBuffer(Span(0,1,List(0, 1, 2),Souya,(person :name (name :op "Souya")),false), Span(4,8,List(3, 4, 5, 6, 7, 8),Far South Sports Meet,(game :name (name :op "Meet" :op "Sports" :op "South" :op "Far")),false), Span(31,32,List(9, 10, 11),Beijing,(city :name (name :op "Beijing")),false), Span(1,2,List(12),said,say-01,false), Span(20,21,List(13),and,and,false), Span(34,35,List(14, 15),largest,(large :degree most),false), Span(22,23,List(16),scale,scale,false), Span(12,13,List(17),meet,meet,false), Span(29,30,List(18),held,hold-04,false), Span(14,15,List(19),attracts,attract-01,false), Span(18,19,List(20),attention,attention,false), Span(16,17,List(21),world,world,false), Span(10,11,List(22),international,international,false), Span(11,12,List(23),sports,sport,false)),Map(2 -> "Souya", 5 -> "Meet", 12 -> say-01, 15 -> most, 8 -> "Far", 21 -> world, 18 -> hold-04, 7 -> "South", 17 -> meet, 1 -> name, 23 -> sport, 4 -> name, 11 -> "Beijing", 14 -> large, 20 -> attention, 6 -> "Sports", 9 -> city, 0 -> person, 22 -> international, 16 -> scale, 19 -> attract-01, 10 -> name, 3 -> game, 13 -> and),Map(m3 -> meet, w -> world, n -> name, h -> hold-04, s2 -> say-01, m2 -> most, p2 -> person, a3 -> attention, s4 -> scale, g -> game, a -> and, n3 -> name, i -> international, a2 -> attract-01, s3 -> sport, l -> large, c2 -> city, n2 -> name))),[Ljava.lang.String;@57250572,Annotation([Ljava.lang.String;@5609159b,[Ljava.lang.String;@2118cddf,[Ljava.lang.String;@17a7f733),Annotation([Ljava.lang.String;@68567e20,[Ljava.lang.String;@76ed1b7c,[Ledu.cmu.lti.nlp.amr.Dependency;@11fc564b),Annotation([Ljava.lang.String;@394a2528,[Ljava.lang.String;@6236eb5f,[Ljava.lang.String;@7c1e2a9e),Annotation([Ljava.lang.String;@fa36558,[Ljava.lang.String;@672872e1,[Ledu.cmu.lti.nlp.amr.Entity;@32910148))
AMR:
(a / and, time, s3 / sport)
(a2 / attract-01, ARG0, w / world)
(a2 / attract-01, ARG1, a3 / attention)
(a2 / attract-01, ARG6, s3 / sport)
(c2 / city, name, n3 / name)
(g / game, name, n2 / name)
(h / hold-04, ARG0, s4 / scale)
(h / hold-04, ARG1, a / and)
(h / hold-04, location, c2 / city)
(l / large, calendar, c2 / city)
(l / large, degree, m2 / most)
(m3 / meet, calendar, a2 / attract-01)
(n / name, op, "Souya")
(n2 / name, op, "Far")
(n2 / name, op, "Meet")
(n2 / name, op, "South")
(n2 / name, op, "Sports")
(n3 / name, op, "Beijing")
(p2 / person, name, n / name)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, a / and)
(s3 / sport, domain, g / game)
(s3 / sport, mod, i / international)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.3
WARNING: makeIds can't find span Id: 0.1.0.3.0
WARNING: makeIds can't find span Id: 0.1.0.3.0.3
WARNING: makeIds can't find span Id: 0.1.0.3.0.2
WARNING: makeIds can't find span Id: 0.1.0.3.0.1
WARNING: makeIds can't find span Id: 0.1.0.3.0.0
WARNING: makeIds can't find span Id: 0.1.0.4.0
WARNING: makeIds can't find span Id: 0.1.0.4.0.0
WARNING: makeIds can't find span Id: 0.1.0.4.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.2
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.4
WARNING: makeIds can't find span Id: 0.1.0.2
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
Decoded in 891,132 microseconds
Sentence: He hoped that all the athletes would " fully demonstrate the strength and skill that they cultivate daily , as the competitors representing Japan , they should carry out competition with athletes from various countries honestly " .

Oracle Span 1:  all => all
Oracle Span 2:  and => and
Oracle Span 3:  athletes => athlete
Oracle Span 4:  athletes => athlete
Oracle Span 5:  competition => (person :ARG0-of compete-01)
Oracle Span 6:  competitors => compete-01
Oracle Span 7:  countries => country
Oracle Span 8:  cultivate => cultivate-01
Oracle Span 9:  demonstrate => demonstrate-01
Oracle Span 10:  fully => full
Oracle Span 11:  He => he
Oracle Span 12:  honestly => honest
Oracle Span 13:  hoped => hope-01
Oracle Span 14:  Japan => (country :name (name :op "Japan"))
Oracle Span 15:  representing => represent-01
Oracle Span 16:  should => recommend-01
Oracle Span 17:  skill => skill
Oracle Span 18:  strength => strength
Oracle Span 19:  various => various
NER Entity: (country :name (name :op "Japan"))
Spans:
Span 3-4:  all => all
Span 12-13:  and => and
Span 5-6:  athletes => athlete
Span 31-32:  athletes => athlete
Span 29-30:  competition => (person :ARG0-of compete-01)
Span 21-22:  competitors => compete-01
Span 34-35:  countries => country
Span 16-17:  cultivate => cultivate-01
Span 9-10:  demonstrate => demonstrate-01
Span 8-9:  fully => full
Span 0-1:  He => he
Span 35-36:  honestly => honest
Span 1-2:  hoped => hope-01
Span 23-24:  Japan => (country :name (name :op "Japan"))
Span 22-23:  representing => represent-01
Span 26-27:  should => recommend-01
Span 13-14:  skill => skill
Span 11-12:  strength => strength
Span 33-34:  various => various

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 3-4:  all => all
Oracle Span 12-13:  and => and
Oracle Span 5-6:  athletes => athlete
Oracle Span 31-32:  athletes => athlete
Oracle Span 29-30:  competition => (person :ARG0-of compete-01)
Oracle Span 21-22:  competitors => compete-01
Oracle Span 34-35:  countries => country
Oracle Span 16-17:  cultivate => cultivate-01
Oracle Span 9-10:  demonstrate => demonstrate-01
Oracle Span 8-9:  fully => full
Oracle Span 0-1:  He => he
Oracle Span 35-36:  honestly => honest
Oracle Span 1-2:  hoped => hope-01
Oracle Span 23-24:  Japan => (country :name (name :op "Japan"))
Oracle Span 22-23:  representing => represent-01
Oracle Span 26-27:  should => recommend-01
Oracle Span 13-14:  skill => skill
Oracle Span 11-12:  strength => strength
Oracle Span 33-34:  various => various

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	hoped	_	VBD	VBD	_	10	ccomp	_	_
3	that	_	IN	IN	_	7	mark	_	_
4	all	_	PDT	PDT	_	6	predet	_	_
5	the	_	DT	DT	_	6	det	_	_
6	athletes	_	NNS	NNS	_	7	nsubj	_	_
7	would	_	MD	MD	_	2	ccomp	_	_
8	"	_	''	''	_	10	punct	_	_
9	fully	_	RB	RB	_	10	advmod	_	_
10	demonstrate	_	VBP	VBP	_	0	root	_	_
11	the	_	DT	DT	_	12	det	_	_
12	strength	_	NN	NN	_	10	dobj	_	_
13	and	_	CC	CC	_	12	cc	_	_
14	skill	_	NN	NN	_	12	conj	_	_
15	that	_	IN	IN	_	17	mark	_	_
16	they	_	PRP	PRP	_	17	nsubj	_	_
17	cultivate	_	VBP	VBP	_	10	ccomp	_	_
18	daily	_	RB	RB	_	17	advmod	_	_
19	,	_	,	,	_	17	punct	_	_
20	as	_	IN	IN	_	17	prep	_	_
21	the	_	DT	DT	_	22	det	_	_
22	competitors	_	NNS	NNS	_	23	nsubj	_	_
23	representing	_	VBG	VBG	_	20	pcomp	_	_
24	Japan	_	NNP	NNP	_	28	nsubj	_	_
25	,	_	,	,	_	28	punct	_	_
26	they	_	PRP	PRP	_	28	nsubj	_	_
27	should	_	MD	MD	_	28	aux	_	_
28	carry	_	VB	VB	_	23	ccomp	_	_
29	out	_	RP	RP	_	28	prt	_	_
30	competition	_	NN	NN	_	28	dobj	_	_
31	with	_	IN	IN	_	28	prep	_	_
32	athletes	_	NNS	NNS	_	31	pobj	_	_
33	from	_	IN	IN	_	32	prep	_	_
34	various	_	JJ	JJ	_	35	amod	_	_
35	countries	_	NNS	NNS	_	33	pobj	_	_
36	honestly	_	RB	RB	_	28	advmod	_	_
37	"	_	''	''	_	28	punct	_	_
38	.	_	.	.	_	10	punct	_	_

Oracle:
(a / and, op, h / hope-01)
(a2 / athlete, quant, a3 / all)
(a5 / athlete, source, c4 / country)
(c2 / cultivate-01, ARG0, a2 / athlete)
(c3 / compete-01, ARG0, a2 / athlete)
(c3 / compete-01, ARG1, a5 / athlete)
(c3 / compete-01, manner, h3 / honest)
(c3 / compete-01, prep-as, p / person)
(c4 / country, mod, v / various)
(c5 / country, name, n / name)
(c6 / compete-01, ARG0, p / person)
(d / demonstrate-01, ARG0, a2 / athlete)
(d / demonstrate-01, degree, f / full)
(h / hope-01, ARG0, h2 / he)
(h / hope-01, ARG1, d / demonstrate-01)
(n / name, op, "Japan")
(r / recommend-01, ARG1, c3 / compete-01)
(r2 / represent-01, ARG0, p / person)
(r2 / represent-01, ARG1, c5 / country)

Input(Some(Graph((and :op (hope-01 :ARG1 (demonstrate-01 :ARG1-of (cause-01 :ARG0 (recommend-01 :ARG1 (compete-01 :prep-as (person :ARG0-of (represent-01 :ARG1 (country :name (name :op "Japan"))) :ARG0-of compete-01) :manner honest :ARG1 (athlete :source (country :mod various)) :ARG0 athlete))) :degree full :ARG1 (and :op strength :op skill :ARG1-of (cultivate-01 :frequency (rate-entity-91 :ARG2 (temporal-quantity :quant 1 :unit day)) :ARG0 athlete)) :ARG0 (athlete :quant all)) :ARG0 he)),ArrayBuffer(Span(23,24,List(0, 1, 2),Japan,(country :name (name :op "Japan")),false), Span(12,13,List(3),and,and,false), Span(1,2,List(4),hoped,hope-01,false), Span(9,10,List(5),demonstrate,demonstrate-01,false), Span(26,27,List(6),should,recommend-01,false), Span(5,6,List(7),athletes,athlete,false), Span(34,35,List(8),countries,country,false), Span(33,34,List(9),various,various,false), Span(22,23,List(10),representing,represent-01,false), Span(11,12,List(11),strength,strength,false), Span(13,14,List(12),skill,skill,false), Span(16,17,List(13),cultivate,cultivate-01,false), Span(31,32,List(14),athletes,athlete,false), Span(3,4,List(15),all,all,false), Span(0,1,List(16),He,he,false), Span(21,22,List(17),competitors,compete-01,false), Span(29,30,List(18, 19),competition,(person :ARG0-of compete-01),false), Span(35,36,List(20),honestly,honest,false), Span(8,9,List(21),fully,full,false)),Map(2 -> "Japan", 5 -> demonstrate-01, 12 -> skill, 15 -> all, 8 -> country, 21 -> full, 18 -> person, 7 -> athlete, 17 -> compete-01, 1 -> name, 4 -> hope-01, 11 -> strength, 14 -> athlete, 20 -> honest, 6 -> recommend-01, 9 -> various, 0 -> country, 16 -> he, 19 -> compete-01, 10 -> represent-01, 3 -> and, 13 -> cultivate-01),Map(n -> name, h -> hope-01, h2 -> he, s2 -> skill, a3 -> all, c4 -> country, s -> strength, v -> various, d -> demonstrate-01, r2 -> represent-01, p -> person, c3 -> compete-01, a -> and, a5 -> athlete, c6 -> compete-01, a2 -> athlete, r -> recommend-01, h3 -> honest, f -> full, c2 -> cultivate-01, c5 -> country))),[Ljava.lang.String;@3f56875e,Annotation([Ljava.lang.String;@2b4bac49,[Ljava.lang.String;@fd07cbb,[Ljava.lang.String;@3571b748),Annotation([Ljava.lang.String;@3e96bacf,[Ljava.lang.String;@484970b0,[Ledu.cmu.lti.nlp.amr.Dependency;@4470f8a6),Annotation([Ljava.lang.String;@7c83dc97,[Ljava.lang.String;@7748410a,[Ljava.lang.String;@740773a3),Annotation([Ljava.lang.String;@37f1104d,[Ljava.lang.String;@55740540,[Ledu.cmu.lti.nlp.amr.Entity;@60015ef5))
AMR:
(a / and, op, h / hope-01)
(a / and, op, s / strength)
(a / and, op, s2 / skill)
(a2 / athlete, location, c4 / country)
(a5 / athlete, quant, a3 / all)
(c2 / cultivate-01, ARG0, h3 / honest)
(c2 / cultivate-01, ARG1, r2 / represent-01)
(c4 / country, mod, v / various)
(c5 / country, name, n / name)
(c6 / compete-01, ARG0, p / person)
(c6 / compete-01, ARG1, a2 / athlete)
(d / demonstrate-01, ARG1, s / strength)
(d / demonstrate-01, ARG6, c2 / cultivate-01)
(d / demonstrate-01, manner, f / full)
(h / hope-01, ARG0, h2 / he)
(h / hope-01, ARG1, a3 / all)
(n / name, op, "Japan")
(p / person, location, c5 / country)
(r / recommend-01, ARG1, p / person)
(r2 / represent-01, ARG0, c3 / compete-01)
(r2 / represent-01, ARG1, r / recommend-01)

WARNING: makeIds can't find span Id: 0.0.1.3.0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.2.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.3.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.2.1
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.2
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.2
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.2.0
WARNING: makeIds can't find span Id: 0.0.1.3.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.2
Decoded in 940,053 microseconds
Sentence: Souya emphasized , the Japanese delegation must make use of this opportunity of participation in the Beijing Far South Sports Meet " to deepen friendship with athletes from various countries , and expand the scope of international friendliness . "

Oracle Span 1:  and => and
Oracle Span 2:  athletes => athlete
Oracle Span 3:  Beijing Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far" :op "Beijing"))
Oracle Span 4:  countries => country
Oracle Span 5:  deepen => deepen-01
Oracle Span 6:  delegation => delegation
Oracle Span 7:  emphasized => emphasize-01
Oracle Span 8:  expand => expand-01
Oracle Span 9:  friendliness => friendly-41
Oracle Span 10:  friendship => friendship
Oracle Span 11:  international => international
Oracle Span 12:  Japanese => (name :op "Japan")
Oracle Span 13:  opportunity => opportunity
Oracle Span 14:  participation => participate-01
Oracle Span 15:  scope => scope
Oracle Span 16:  Souya => (person :name (name :op "Souya"))
Oracle Span 17:  this => this
Oracle Span 18:  use => use-01
Oracle Span 19:  various => various
NER Entity: (person :name (name :op "Souya"))
NER Entity: (country :name (name :op "Beijing" :op "Far" :op "South" :op "Sports"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 31-32:  and => and
Span 26-27:  athletes => athlete
Span 16-21:  Beijing Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far" :op "Beijing"))
Span 29-30:  countries => country
Span 23-24:  deepen => deepen-01
Span 5-6:  delegation => delegation
Span 1-2:  emphasized => emphasize-01
Span 32-33:  expand => expand-01
Span 37-38:  friendliness => friendly-41
Span 24-25:  friendship => friendship
Span 36-37:  international => international
Span 4-5:  Japanese => (name :op "Japan")
Span 11-12:  opportunity => opportunity
Span 13-14:  participation => participate-01
Span 34-35:  scope => scope
Span 0-1:  Souya => (person :name (name :op "Souya"))
Span 10-11:  this => this
Span 8-9:  use => use-01
Span 28-29:  various => various

Langrangian relaxation converged after 20 iterations. Delta = 0.0
Oracle Span 31-32:  and => and
Oracle Span 26-27:  athletes => athlete
Oracle Span 16-21:  Beijing Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far" :op "Beijing"))
Oracle Span 29-30:  countries => country
Oracle Span 23-24:  deepen => deepen-01
Oracle Span 5-6:  delegation => delegation
Oracle Span 1-2:  emphasized => emphasize-01
Oracle Span 32-33:  expand => expand-01
Oracle Span 37-38:  friendliness => friendly-41
Oracle Span 24-25:  friendship => friendship
Oracle Span 36-37:  international => international
Oracle Span 4-5:  Japanese => (name :op "Japan")
Oracle Span 11-12:  opportunity => opportunity
Oracle Span 13-14:  participation => participate-01
Oracle Span 34-35:  scope => scope
Oracle Span 0-1:  Souya => (person :name (name :op "Souya"))
Oracle Span 10-11:  this => this
Oracle Span 8-9:  use => use-01
Oracle Span 28-29:  various => various

Dependencies:
1	Souya	_	NNP	NNP	_	2	nsubj	_	_
2	emphasized	_	VBD	VBD	_	8	ccomp	_	_
3	,	_	,	,	_	8	punct	_	_
4	the	_	DT	DT	_	6	det	_	_
5	Japanese	_	JJ	JJ	_	6	amod	_	_
6	delegation	_	NN	NN	_	8	nsubj	_	_
7	must	_	MD	MD	_	8	aux	_	_
8	make	_	VB	VB	_	0	root	_	_
9	use	_	NN	NN	_	8	dobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	this	_	DT	DT	_	12	det	_	_
12	opportunity	_	NN	NN	_	10	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	participation	_	NN	NN	_	13	pobj	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	the	_	DT	DT	_	21	det	_	_
17	Beijing	_	NNP	NNP	_	21	nn	_	_
18	Far	_	NNP	NNP	_	21	nn	_	_
19	South	_	NNP	NNP	_	21	nn	_	_
20	Sports	_	NNPS	NNPS	_	21	nn	_	_
21	Meet	_	NNP	NNP	_	15	pobj	_	_
22	"	_	''	''	_	8	punct	_	_
23	to	_	TO	TO	_	24	aux	_	_
24	deepen	_	VB	VB	_	8	vmod	_	_
25	friendship	_	NN	NN	_	24	dobj	_	_
26	with	_	IN	IN	_	24	prep	_	_
27	athletes	_	NNS	NNS	_	26	pobj	_	_
28	from	_	IN	IN	_	27	prep	_	_
29	various	_	JJ	JJ	_	30	amod	_	_
30	countries	_	NNS	NNS	_	28	pobj	_	_
31	,	_	,	,	_	24	punct	_	_
32	and	_	CC	CC	_	24	cc	_	_
33	expand	_	VB	VB	_	24	conj	_	_
34	the	_	DT	DT	_	35	det	_	_
35	scope	_	NN	NN	_	33	dobj	_	_
36	of	_	IN	IN	_	35	prep	_	_
37	international	_	JJ	JJ	_	38	amod	_	_
38	friendliness	_	NN	NN	_	36	pobj	_	_
39	.	_	.	.	_	8	punct	_	_
40	"	_	''	''	_	8	punct	_	_

Oracle:
(a / and, op, d2 / deepen-01)
(a / and, op, e3 / expand-01)
(c3 / country, name, n2 / name)
(d / delegation, mod, c3 / country)
(d2 / deepen-01, ARG0, d / delegation)
(d2 / deepen-01, ARG1, f2 / friendship)
(e2 / emphasize-01, ARG0, p2 / person)
(e3 / expand-01, ARG0, d / delegation)
(e3 / expand-01, ARG1, s2 / scope)
(f / friendly-41, mod, i / international)
(f2 / friendship, prep-with, a2 / athlete)
(g / game, name, n3 / name)
(n / name, op, "Souya")
(n2 / name, op, "Japan")
(n3 / name, op, "Beijing")
(n3 / name, op, "Far")
(n3 / name, op, "Meet")
(n3 / name, op, "South")
(n3 / name, op, "Sports")
(o2 / opportunity, mod, p3 / participate-01)
(o2 / opportunity, mod, t / this)
(p2 / person, name, n / name)
(p3 / participate-01, ARG0, d / delegation)
(p3 / participate-01, ARG1, g / game)
(s2 / scope, poss, f / friendly-41)
(u / use-01, ARG0, d / delegation)
(u / use-01, ARG1, o2 / opportunity)
(u / use-01, ARG2, a / and)

Input(Some(Graph((emphasize-01 :ARG1 (obligate-01 :ARG1 (delegation :mod (country :name (name :op "Japan"))) :ARG2 (use-01 :ARG2 (and :op (expand-01 :ARG1 (scope :poss (friendly-41 :mod international)) :ARG0 delegation) :op (deepen-01 :ARG1 (friendship :prep-with (athlete :source (country :mod various))) :ARG0 delegation)) :ARG1 (opportunity :mod (participate-01 :ARG1 (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far" :op "Beijing")) :ARG0 delegation) :mod this) :ARG0 delegation)) :ARG0 (person :name (name :op "Souya"))),ArrayBuffer(Span(0,1,List(0, 1, 2),Souya,(person :name (name :op "Souya")),false), Span(16,21,List(3, 4, 5, 6, 7, 8, 9),Beijing Far South Sports Meet,(game :name (name :op "Meet" :op "Sports" :op "South" :op "Far" :op "Beijing")),false), Span(4,5,List(10, 11),Japanese,(name :op "Japan"),false), Span(1,2,List(12),emphasized,emphasize-01,false), Span(5,6,List(13),delegation,delegation,false), Span(29,30,List(14),countries,country,false), Span(8,9,List(15),use,use-01,false), Span(31,32,List(16),and,and,false), Span(32,33,List(17),expand,expand-01,false), Span(34,35,List(18),scope,scope,false), Span(36,37,List(19),international,international,false), Span(23,24,List(20),deepen,deepen-01,false), Span(24,25,List(21),friendship,friendship,false), Span(26,27,List(22),athletes,athlete,false), Span(28,29,List(23),various,various,false), Span(11,12,List(24),opportunity,opportunity,false), Span(10,11,List(25),this,this,false), Span(37,38,List(26),friendliness,friendly-41,false), Span(13,14,List(27),participation,participate-01,false)),Map(2 -> "Souya", 5 -> "Meet", 27 -> participate-01, 12 -> emphasize-01, 15 -> use-01, 8 -> "Far", 21 -> friendship, 18 -> scope, 24 -> opportunity, 7 -> "South", 17 -> expand-01, 1 -> name, 23 -> various, 26 -> friendly-41, 4 -> name, 11 -> "Japan", 14 -> country, 20 -> deepen-01, 6 -> "Sports", 9 -> "Beijing", 0 -> person, 22 -> athlete, 16 -> and, 19 -> international, 10 -> name, 3 -> game, 25 -> this, 13 -> delegation),Map(n -> name, s2 -> scope, t -> this, e2 -> emphasize-01, p2 -> person, v -> various, d -> delegation, g -> game, a -> and, c3 -> country, n3 -> name, o2 -> opportunity, d2 -> deepen-01, a2 -> athlete, i -> international, f2 -> friendship, u -> use-01, f -> friendly-41, p3 -> participate-01, e3 -> expand-01, n2 -> name))),[Ljava.lang.String;@2f54a33d,Annotation([Ljava.lang.String;@1018bde2,[Ljava.lang.String;@65b3f4a4,[Ljava.lang.String;@f2ff811),Annotation([Ljava.lang.String;@568ff82,[Ljava.lang.String;@50caa560,[Ledu.cmu.lti.nlp.amr.Dependency;@2a266d09),Annotation([Ljava.lang.String;@5ab9e72c,[Ljava.lang.String;@186f8716,[Ljava.lang.String;@1d8bd0de),Annotation([Ljava.lang.String;@45ca843,[Ljava.lang.String;@11c9af63,[Ledu.cmu.lti.nlp.amr.Entity;@757acd7b))
AMR:
(a / and, op, c3 / country)
(a / and, op, d2 / deepen-01)
(a / and, op, e3 / expand-01)
(c3 / country, mod, v / various)
(d / delegation, name, n2 / name)
(d2 / deepen-01, ARG0, u / use-01)
(d2 / deepen-01, ARG1, f2 / friendship)
(e2 / emphasize-01, ARG0, p2 / person)
(e2 / emphasize-01, ARG1, a2 / athlete)
(e3 / expand-01, ARG1, s2 / scope)
(f / friendly-41, ARG1, p3 / participate-01)
(f / friendly-41, mod, i / international)
(g / game, name, n3 / name)
(n / name, op, "Souya")
(n2 / name, op, "Japan")
(n3 / name, op, "Beijing")
(n3 / name, op, "Far")
(n3 / name, op, "Meet")
(n3 / name, op, "South")
(n3 / name, op, "Sports")
(o2 / opportunity, beneficiary, p3 / participate-01)
(o2 / opportunity, mod, t / this)
(p2 / person, name, n / name)
(p3 / participate-01, ARG1, g / game)
(u / use-01, ARG0, d / delegation)
(u / use-01, ARG1, e2 / emphasize-01)
(u / use-01, ARG2, o2 / opportunity)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0.4
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0.3
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0.2
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
Decoded in 878,661 microseconds
Sentence: Souya handed over the delegation flag of the Japanese delegation to the head of the delegation and Director of the Tokyo Handicapped Integrated Sports Center , Banminyan .

Oracle Span 1:  Banminyan => (person :name (name :op "Banminyan"))
Oracle Span 2:  delegation => delegation
Oracle Span 3:  delegation => delegation
Oracle Span 4:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 5:  flag => flag
Oracle Span 6:  handed => hand-02
Oracle Span 7:  head => head-01
Oracle Span 8:  Japanese => (country :name (name :op "Japan"))
Oracle Span 9:  Souya => (person :name (name :op "Souya"))
Oracle Span 10:  Tokyo Handicapped Integrated Sports Center => (sports-facility :name (name :op "Center" :op "Sports" :op "Integrated" :op "Handicapped" :op "Tokyo"))
NER Entity: (person :name (name :op "Souya"))
NER Entity: (organization :name (name :op "Banminyan"))
NER Entity: (country :name (name :op "Tokyo"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 26-27:  Banminyan => (person :name (name :op "Banminyan"))
Span 4-5:  delegation => delegation
Span 9-10:  delegation => delegation
Span 17-18:  Director => (have-org-role-91 :ARG2 director)
Span 5-6:  flag => flag
Span 1-2:  handed => hand-02
Span 12-13:  head => head-01
Span 8-9:  Japanese => (country :name (name :op "Japan"))
Span 0-1:  Souya => (person :name (name :op "Souya"))
Span 20-25:  Tokyo Handicapped Integrated Sports Center => (sports-facility :name (name :op "Center" :op "Sports" :op "Integrated" :op "Handicapped" :op "Tokyo"))

Langrangian relaxation converged after 55 iterations. Delta = 0.0
Oracle Span 26-27:  Banminyan => (person :name (name :op "Banminyan"))
Oracle Span 4-5:  delegation => delegation
Oracle Span 9-10:  delegation => delegation
Oracle Span 17-18:  Director => (have-org-role-91 :ARG2 director)
Oracle Span 5-6:  flag => flag
Oracle Span 1-2:  handed => hand-02
Oracle Span 12-13:  head => head-01
Oracle Span 8-9:  Japanese => (country :name (name :op "Japan"))
Oracle Span 0-1:  Souya => (person :name (name :op "Souya"))
Oracle Span 20-25:  Tokyo Handicapped Integrated Sports Center => (sports-facility :name (name :op "Center" :op "Sports" :op "Integrated" :op "Handicapped" :op "Tokyo"))

Dependencies:
1	Souya	_	NNP	NNP	_	2	nsubj	_	_
2	handed	_	VBD	VBD	_	0	root	_	_
3	over	_	RP	RP	_	2	prt	_	_
4	the	_	DT	DT	_	6	det	_	_
5	delegation	_	NN	NN	_	6	nn	_	_
6	flag	_	NN	NN	_	2	dobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	10	det	_	_
9	Japanese	_	JJ	JJ	_	10	amod	_	_
10	delegation	_	NN	NN	_	7	pobj	_	_
11	to	_	TO	TO	_	2	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	head	_	NN	NN	_	11	pobj	_	_
14	of	_	IN	IN	_	13	prep	_	_
15	the	_	DT	DT	_	16	det	_	_
16	delegation	_	NN	NN	_	14	pobj	_	_
17	and	_	CC	CC	_	13	cc	_	_
18	Director	_	NNP	NNP	_	13	conj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	25	det	_	_
21	Tokyo	_	NNP	NNP	_	25	nn	_	_
22	Handicapped	_	NNP	NNP	_	25	nn	_	_
23	Integrated	_	NNP	NNP	_	25	nn	_	_
24	Sports	_	NNPS	NNPS	_	25	nn	_	_
25	Center	_	NNP	NNP	_	19	pobj	_	_
26	,	_	,	,	_	2	punct	_	_
27	Banminyan	_	NNP	NNP	_	2	dobj	_	_
28	.	_	.	.	_	2	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(d / delegation, source, c2 / country)
(f2 / flag, mod, d2 / delegation)
(f2 / flag, poss, d / delegation)
(h / hand-02, ARG0, p3 / person)
(h / hand-02, ARG1, f2 / flag)
(h / hand-02, ARG2, p / person)
(h2 / head-01, ARG0, p / person)
(h2 / head-01, ARG1, d / delegation)
(h3 / have-org-role-91, ARG0, p / person)
(h3 / have-org-role-91, ARG1, s2 / sports-facility)
(h3 / have-org-role-91, ARG2, d3 / director)
(n / name, op, "Souya")
(n2 / name, op, "Japan")
(n3 / name, op, "Banminyan")
(n4 / name, op, "Center")
(n4 / name, op, "Handicapped")
(n4 / name, op, "Integrated")
(n4 / name, op, "Sports")
(n4 / name, op, "Tokyo")
(p / person, name, n3 / name)
(p3 / person, name, n / name)
(s2 / sports-facility, name, n4 / name)

Input(Some(Graph((hand-02 :ARG2 (person :ARG0-of (have-org-role-91 :ARG2 director :ARG1 (sports-facility :name (name :op "Center" :op "Sports" :op "Integrated" :op "Handicapped" :op "Tokyo"))) :ARG0-of (head-01 :ARG1 delegation) :name (name :op "Banminyan")) :ARG1 (flag :mod delegation :poss (delegation :source (country :name (name :op "Japan")))) :ARG0 (person :name (name :op "Souya"))),ArrayBuffer(Span(0,1,List(0, 1, 2),Souya,(person :name (name :op "Souya")),false), Span(26,27,List(3, 4, 5),Banminyan,(person :name (name :op "Banminyan")),false), Span(20,25,List(6, 7, 8, 9, 10, 11, 12),Tokyo Handicapped Integrated Sports Center,(sports-facility :name (name :op "Center" :op "Sports" :op "Integrated" :op "Handicapped" :op "Tokyo")),false), Span(8,9,List(13, 14, 15),Japanese,(country :name (name :op "Japan")),false), Span(1,2,List(16),handed,hand-02,false), Span(12,13,List(17),head,head-01,false), Span(17,18,List(18, 19),Director,(have-org-role-91 :ARG2 director),false), Span(5,6,List(20),flag,flag,false), Span(4,5,List(21),delegation,delegation,false), Span(9,10,List(22),delegation,delegation,false)),Map(2 -> "Souya", 5 -> "Banminyan", 12 -> "Tokyo", 15 -> "Japan", 8 -> "Center", 21 -> delegation, 18 -> have-org-role-91, 7 -> name, 17 -> head-01, 1 -> name, 4 -> name, 11 -> "Handicapped", 14 -> name, 20 -> flag, 6 -> sports-facility, 22 -> delegation, 9 -> "Sports", 0 -> person, 16 -> hand-02, 19 -> director, 10 -> "Integrated", 3 -> person, 13 -> country),Map(n -> name, h -> hand-02, h2 -> head-01, s2 -> sports-facility, d3 -> director, n4 -> name, d -> delegation, p -> person, n3 -> name, d2 -> delegation, h3 -> have-org-role-91, f2 -> flag, p3 -> person, n2 -> name, c2 -> country))),[Ljava.lang.String;@36b4fe2a,Annotation([Ljava.lang.String;@574b560f,[Ljava.lang.String;@ba54932,[Ljava.lang.String;@28975c28),Annotation([Ljava.lang.String;@3943a2be,[Ljava.lang.String;@343570b7,[Ledu.cmu.lti.nlp.amr.Dependency;@157853da),Annotation([Ljava.lang.String;@71c3b41,[Ljava.lang.String;@236e3f4e,[Ljava.lang.String;@3cc1435c),Annotation([Ljava.lang.String;@6bf0219d,[Ljava.lang.String;@dd0c991,[Ledu.cmu.lti.nlp.amr.Entity;@5f16132a))
AMR:
(c2 / country, name, n2 / name)
(d / delegation, mod, c2 / country)
(f2 / flag, location, d / delegation)
(f2 / flag, mod, d2 / delegation)
(h / hand-02, ARG0, p3 / person)
(h / hand-02, ARG1, f2 / flag)
(h / hand-02, ARG2, h2 / head-01)
(h2 / head-01, ARG0, p / person)
(h3 / have-org-role-91, ARG0, p3 / person)
(h3 / have-org-role-91, ARG1, s2 / sports-facility)
(h3 / have-org-role-91, ARG2, d3 / director)
(n / name, op, "Souya")
(n2 / name, op, "Japan")
(n3 / name, op, "Banminyan")
(n4 / name, op, "Center")
(n4 / name, op, "Handicapped")
(n4 / name, op, "Integrated")
(n4 / name, op, "Sports")
(n4 / name, op, "Tokyo")
(p / person, name, n3 / name)
(p3 / person, name, n / name)
(s2 / sports-facility, name, n4 / name)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.2.0.0
WARNING: makeIds can't find span Id: 0.2.2.0.0.4
WARNING: makeIds can't find span Id: 0.2.2.0.0.3
WARNING: makeIds can't find span Id: 0.2.2.0.0.2
WARNING: makeIds can't find span Id: 0.2.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 1,155,738 microseconds
Sentence: From this tight , orderly , warm and serious swearing in ceremony , this reporter felt that , the Japanese Handicapped Sports Team was a team that was well trained , disciplined and possessed fighting spirit .

Oracle Span 1:  and => and
Oracle Span 2:  ceremony => ceremony
Oracle Span 3:  disciplined => discipline-01
Oracle Span 4:  felt => feel-02
Oracle Span 5:  fighting => fight-01
Oracle Span 6:  Japanese Handicapped Sports Team => (name :op "Team" :op "Sports" :op "Handicapped" :op "Japanese")
Oracle Span 7:  orderly => orderly
Oracle Span 8:  possessed => possess-01
Oracle Span 9:  reporter => (person :ARG0-of report-01)
Oracle Span 10:  serious => serious-41
Oracle Span 11:  spirit => spirit
Oracle Span 12:  swearing => swear-06
Oracle Span 13:  team => team
Oracle Span 14:  this => this
Oracle Span 15:  tight => tight
Oracle Span 16:  trained => train-01
Oracle Span 17:  warm => warm
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 7-8:  and => and
Span 11-12:  ceremony => ceremony
Span 31-32:  disciplined => discipline-01
Span 15-16:  felt => feel-02
Span 34-35:  fighting => fight-01
Span 19-23:  Japanese Handicapped Sports Team => (name :op "Team" :op "Sports" :op "Handicapped" :op "Japanese")
Span 4-5:  orderly => orderly
Span 33-34:  possessed => possess-01
Span 14-15:  reporter => (person :ARG0-of report-01)
Span 8-9:  serious => serious-41
Span 35-36:  spirit => spirit
Span 9-10:  swearing => swear-06
Span 25-26:  team => team
Span 1-2:  this => this
Span 2-3:  tight => tight
Span 29-30:  trained => train-01
Span 6-7:  warm => warm

Langrangian relaxation converged after 46 iterations. Delta = 0.0
Oracle Span 7-8:  and => and
Oracle Span 11-12:  ceremony => ceremony
Oracle Span 31-32:  disciplined => discipline-01
Oracle Span 15-16:  felt => feel-02
Oracle Span 34-35:  fighting => fight-01
Oracle Span 19-23:  Japanese Handicapped Sports Team => (name :op "Team" :op "Sports" :op "Handicapped" :op "Japanese")
Oracle Span 4-5:  orderly => orderly
Oracle Span 33-34:  possessed => possess-01
Oracle Span 14-15:  reporter => (person :ARG0-of report-01)
Oracle Span 8-9:  serious => serious-41
Oracle Span 35-36:  spirit => spirit
Oracle Span 9-10:  swearing => swear-06
Oracle Span 25-26:  team => team
Oracle Span 1-2:  this => this
Oracle Span 2-3:  tight => tight
Oracle Span 29-30:  trained => train-01
Oracle Span 6-7:  warm => warm

Dependencies:
1	From	_	IN	IN	_	16	prep	_	_
2	this	_	DT	DT	_	10	det	_	_
3	tight	_	JJ	JJ	_	10	amod	_	_
4	,	_	,	,	_	3	punct	_	_
5	orderly	_	JJ	JJ	_	3	conj	_	_
6	,	_	,	,	_	3	punct	_	_
7	warm	_	JJ	JJ	_	3	conj	_	_
8	and	_	CC	CC	_	3	cc	_	_
9	serious	_	JJ	JJ	_	3	conj	_	_
10	swearing	_	NN	NN	_	1	pobj	_	_
11	in	_	IN	IN	_	10	prep	_	_
12	ceremony	_	NN	NN	_	11	pobj	_	_
13	,	_	,	,	_	16	punct	_	_
14	this	_	DT	DT	_	15	det	_	_
15	reporter	_	NN	NN	_	16	nsubj	_	_
16	felt	_	VBD	VBD	_	0	root	_	_
17	that	_	IN	IN	_	26	mark	_	_
18	,	_	,	,	_	26	punct	_	_
19	the	_	DT	DT	_	23	det	_	_
20	Japanese	_	JJ	JJ	_	23	amod	_	_
21	Handicapped	_	NNP	NNP	_	23	nn	_	_
22	Sports	_	NNP	NNP	_	23	nn	_	_
23	Team	_	NNP	NNP	_	26	nsubj	_	_
24	was	_	VBD	VBD	_	26	cop	_	_
25	a	_	DT	DT	_	26	det	_	_
26	team	_	NN	NN	_	16	ccomp	_	_
27	that	_	WDT	WDT	_	30	nsubjpass	_	_
28	was	_	VBD	VBD	_	30	auxpass	_	_
29	well	_	RB	RB	_	30	advmod	_	_
30	trained	_	VBN	VBN	_	26	rcmod	_	_
31	,	_	,	,	_	30	punct	_	_
32	disciplined	_	VBN	VBN	_	30	conj	_	_
33	and	_	CC	CC	_	30	cc	_	_
34	possessed	_	VBN	VBN	_	30	conj	_	_
35	fighting	_	NN	NN	_	36	nn	_	_
36	spirit	_	NN	NN	_	30	dobj	_	_
37	.	_	.	.	_	16	punct	_	_

Oracle:
(a / and, op, d / discipline-01)
(a / and, op, p2 / possess-01)
(a / and, op, t3 / train-01)
(c3 / ceremony, mod, o2 / orderly)
(c3 / ceremony, mod, t4 / tight)
(c3 / ceremony, mod, w2 / warm)
(c3 / ceremony, purpose, s3 / swear-06)
(d / discipline-01, ARG1, t3 / train-01)
(f / feel-02, ARG0, p / person)
(f / feel-02, ARG1, a / and)
(n / name, op, "Handicapped")
(n / name, op, "Japanese")
(n / name, op, "Sports")
(n / name, op, "Team")
(p / person, mod, t / this)
(p2 / possess-01, ARG1, s / spirit)
(r / report-01, ARG0, p / person)
(s / spirit, mod, f2 / fight-01)
(s2 / serious-41, ARG1, c3 / ceremony)
(t2 / team, name, n / name)
(t3 / train-01, ARG2, t2 / team)

Input(Some(Graph((feel-02 :ARG1-of (cause-01 :ARG0 (ceremony :purpose swear-06 :ARG1-of serious-41 :mod warm :mod orderly :mod tight)) :ARG1 (and :op (possess-01 :ARG1 (spirit :mod fight-01)) :op (discipline-01 :ARG1 train-01) :op (train-01 :manner good :ARG2 (team :name (name :op "Team" :op "Sports" :op "Handicapped" :op "Japanese")))) :ARG0 (person :ARG0-of report-01 :mod this)),ArrayBuffer(Span(19,23,List(0, 1, 2, 3, 4),Japanese Handicapped Sports Team,(name :op "Team" :op "Sports" :op "Handicapped" :op "Japanese"),false), Span(15,16,List(5),felt,feel-02,false), Span(11,12,List(6),ceremony,ceremony,false), Span(9,10,List(7),swearing,swear-06,false), Span(8,9,List(8),serious,serious-41,false), Span(6,7,List(9),warm,warm,false), Span(4,5,List(10),orderly,orderly,false), Span(2,3,List(11),tight,tight,false), Span(7,8,List(12),and,and,false), Span(33,34,List(13),possessed,possess-01,false), Span(35,36,List(14),spirit,spirit,false), Span(34,35,List(15),fighting,fight-01,false), Span(31,32,List(16),disciplined,discipline-01,false), Span(29,30,List(17),trained,train-01,false), Span(25,26,List(18),team,team,false), Span(1,2,List(19),this,this,false), Span(14,15,List(20, 21),reporter,(person :ARG0-of report-01),false)),Map(2 -> "Sports", 5 -> feel-02, 12 -> and, 15 -> fight-01, 8 -> serious-41, 21 -> report-01, 18 -> team, 7 -> swear-06, 17 -> train-01, 1 -> "Team", 4 -> "Japanese", 11 -> tight, 14 -> spirit, 20 -> person, 6 -> ceremony, 9 -> warm, 0 -> name, 16 -> discipline-01, 19 -> this, 10 -> orderly, 3 -> "Handicapped", 13 -> possess-01),Map(n -> name, t4 -> tight, s2 -> serious-41, t -> this, p2 -> possess-01, s -> spirit, d -> discipline-01, t3 -> train-01, p -> person, a -> and, c3 -> ceremony, o2 -> orderly, t2 -> team, w2 -> warm, r -> report-01, s3 -> swear-06, f2 -> fight-01, f -> feel-02))),[Ljava.lang.String;@69fb6037,Annotation([Ljava.lang.String;@36d585c,[Ljava.lang.String;@87a85e1,[Ljava.lang.String;@671a5887),Annotation([Ljava.lang.String;@5552768b,[Ljava.lang.String;@3c947bc5,[Ledu.cmu.lti.nlp.amr.Dependency;@609db43b),Annotation([Ljava.lang.String;@55f616cf,[Ljava.lang.String;@1356d4d4,[Ljava.lang.String;@c03cf28),Annotation([Ljava.lang.String;@1329eff,[Ljava.lang.String;@6497b078,[Ledu.cmu.lti.nlp.amr.Entity;@41c2284a))
AMR:
(a / and, op, s3 / swear-06)
(d / discipline-01, ARG1, s / spirit)
(f / feel-02, ARG0, p / person)
(f / feel-02, ARG1, t2 / team)
(f2 / fight-01, ARG1, s / spirit)
(n / name, op, "Handicapped")
(n / name, op, "Japanese")
(n / name, op, "Sports")
(n / name, op, "Team")
(p2 / possess-01, ARG1, s / spirit)
(r / report-01, ARG0, p / person)
(r / report-01, ARG1, w2 / warm)
(s2 / serious-41, ARG1, s3 / swear-06)
(s2 / serious-41, ARG6, o2 / orderly)
(s3 / swear-06, ARG0, p / person)
(s3 / swear-06, ARG1, c3 / ceremony)
(s3 / swear-06, mod, t / this)
(s3 / swear-06, mod, t4 / tight)
(t3 / train-01, ARG1, s / spirit)
(t3 / train-01, ARG2, t2 / team)
(t3 / train-01, ARG6, n / name)

WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.3
WARNING: makeIds can't find span Id: 0.1.0.0.0.2
WARNING: makeIds can't find span Id: 0.1.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.4
WARNING: makeIds can't find span Id: 0.2.0.3
WARNING: makeIds can't find span Id: 0.2.0.2
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
Decoded in 1,188,537 microseconds
Sentence: The Japanese delegation will fly to Beijing on the 2nd .

Oracle Span 1:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 2:  delegation => delegation
Oracle Span 3:  fly => fly-01
Oracle Span 4:  Japanese => (country :name (name :op "Japan"))
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (thing :name (name :op "Japanese"))
Spans:
Span 6-7:  Beijing => (city :name (name :op "Beijing"))
Span 2-3:  delegation => delegation
Span 4-5:  fly => fly-01
Span 1-2:  Japanese => (country :name (name :op "Japan"))

Langrangian relaxation converged after 13 iterations. Delta = 0.0
Oracle Span 6-7:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 2-3:  delegation => delegation
Oracle Span 4-5:  fly => fly-01
Oracle Span 1-2:  Japanese => (country :name (name :op "Japan"))

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Japanese	_	JJ	JJ	_	3	amod	_	_
3	delegation	_	NN	NN	_	5	nsubj	_	_
4	will	_	MD	MD	_	5	aux	_	_
5	fly	_	VB	VB	_	0	root	_	_
6	to	_	TO	TO	_	5	prep	_	_
7	Beijing	_	NNP	NNP	_	6	pobj	_	_
8	on	_	IN	IN	_	5	prep	_	_
9	the	_	DT	DT	_	10	det	_	_
10	2nd	_	NNS	NNS	_	8	pobj	_	_
11	.	_	.	.	_	5	punct	_	_

Oracle:
(c3 / country, name, n / name)
(c4 / city, name, n2 / name)
(d2 / delegation, mod, c3 / country)
(f / fly-01, ARG1, d2 / delegation)
(f / fly-01, destination, c4 / city)
(n / name, op, "Japan")
(n2 / name, op, "Beijing")

Input(Some(Graph((fly-01 :time (date-entity :day 2) :destination (city :name (name :op "Beijing")) :ARG1 (delegation :mod (country :name (name :op "Japan")))),ArrayBuffer(Span(6,7,List(0, 1, 2),Beijing,(city :name (name :op "Beijing")),false), Span(1,2,List(3, 4, 5),Japanese,(country :name (name :op "Japan")),false), Span(4,5,List(6),fly,fly-01,false), Span(2,3,List(7),delegation,delegation,false)),Map(2 -> "Beijing", 5 -> "Japan", 7 -> delegation, 1 -> name, 4 -> name, 6 -> fly-01, 0 -> city, 3 -> country),Map(n -> name, c4 -> city, c3 -> country, d2 -> delegation, f -> fly-01, n2 -> name))),[Ljava.lang.String;@53aad5d5,Annotation([Ljava.lang.String;@46fa7c39,[Ljava.lang.String;@1fb700ee,[Ljava.lang.String;@4f67eb2a),Annotation([Ljava.lang.String;@4a668b6e,[Ljava.lang.String;@5f683daf,[Ledu.cmu.lti.nlp.amr.Dependency;@78ffe6dc),Annotation([Ljava.lang.String;@8317c52,[Ljava.lang.String;@76f2bbc1,[Ljava.lang.String;@68e965f5),Annotation([Ljava.lang.String;@6f27a732,[Ljava.lang.String;@6c779568,[Ledu.cmu.lti.nlp.amr.Entity;@f381794))
AMR:
(c3 / country, name, n / name)
(c4 / city, name, n2 / name)
(d2 / delegation, mod, c3 / country)
(f / fly-01, ARG0, d2 / delegation)
(f / fly-01, ARG1, c4 / city)
(n / name, op, "Japan")
(n2 / name, op, "Beijing")

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 79,701 microseconds
Sentence: After the closing ceremonies of the Sports Meet , they will continue to remain in Beijing for two days , to carry out interaction activities with relevant Chinese parties and visit and tour , and return to Japan on 13th .

Oracle Span 1:  activities => activity
Oracle Span 2:  After => after
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 6:  carry => carry-03
Oracle Span 7:  ceremonies => ceremony
Oracle Span 8:  Chinese => (country :name (name :op "China"))
Oracle Span 9:  closing => close-01
Oracle Span 10:  days => (temporal-quantity :unit day)
Oracle Span 11:  interaction => interact-01
Oracle Span 12:  Japan => (country :name (name :op "Japan"))
Oracle Span 13:  parties => party
Oracle Span 14:  relevant => relevant-41
Oracle Span 15:  remain => remain-01
Oracle Span 16:  return => return-01
Oracle Span 17:  Sports Meet => (game :name (name :op "Meet" :op "Sports"))
Oracle Span 18:  they => they
Oracle Span 19:  tour => tour-01
Oracle Span 20:  two => 2
Oracle Span 21:  visit => visit-01
NER Entity: (country :name (name :op "Beijing"))
NER Entity: (country :name (name :op "Japan"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 24-25:  activities => activity
Span 0-1:  After => after
Span 29-30:  and => and
Span 31-32:  and => and
Span 15-16:  Beijing => (city :name (name :op "Beijing"))
Span 21-22:  carry => carry-03
Span 3-4:  ceremonies => ceremony
Span 27-28:  Chinese => (country :name (name :op "China"))
Span 2-3:  closing => close-01
Span 18-19:  days => (temporal-quantity :unit day)
Span 23-24:  interaction => interact-01
Span 37-38:  Japan => (country :name (name :op "Japan"))
Span 28-29:  parties => party
Span 26-27:  relevant => relevant-41
Span 13-14:  remain => remain-01
Span 35-36:  return => return-01
Span 6-8:  Sports Meet => (game :name (name :op "Meet" :op "Sports"))
Span 9-10:  they => they
Span 32-33:  tour => tour-01
Span 17-18:  two => 2
Span 30-31:  visit => visit-01

Langrangian relaxation converged after 10 iterations. Delta = 0.0
Oracle Span 24-25:  activities => activity
Oracle Span 0-1:  After => after
Oracle Span 29-30:  and => and
Oracle Span 31-32:  and => and
Oracle Span 15-16:  Beijing => (city :name (name :op "Beijing"))
Oracle Span 21-22:  carry => carry-03
Oracle Span 3-4:  ceremonies => ceremony
Oracle Span 27-28:  Chinese => (country :name (name :op "China"))
Oracle Span 2-3:  closing => close-01
Oracle Span 18-19:  days => (temporal-quantity :unit day)
Oracle Span 23-24:  interaction => interact-01
Oracle Span 37-38:  Japan => (country :name (name :op "Japan"))
Oracle Span 28-29:  parties => party
Oracle Span 26-27:  relevant => relevant-41
Oracle Span 13-14:  remain => remain-01
Oracle Span 35-36:  return => return-01
Oracle Span 6-8:  Sports Meet => (game :name (name :op "Meet" :op "Sports"))
Oracle Span 9-10:  they => they
Oracle Span 32-33:  tour => tour-01
Oracle Span 17-18:  two => 2
Oracle Span 30-31:  visit => visit-01

Dependencies:
1	After	_	IN	IN	_	12	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	closing	_	VBG	VBG	_	4	amod	_	_
4	ceremonies	_	NNS	NNS	_	1	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	the	_	DT	DT	_	8	det	_	_
7	Sports	_	NNP	NNP	_	8	nn	_	_
8	Meet	_	NNP	NNP	_	5	pobj	_	_
9	,	_	,	,	_	12	punct	_	_
10	they	_	PRP	PRP	_	12	nsubj	_	_
11	will	_	MD	MD	_	12	aux	_	_
12	continue	_	VB	VB	_	0	root	_	_
13	to	_	TO	TO	_	14	aux	_	_
14	remain	_	VB	VB	_	12	xcomp	_	_
15	in	_	IN	IN	_	14	prep	_	_
16	Beijing	_	NNP	NNP	_	15	pobj	_	_
17	for	_	IN	IN	_	14	prep	_	_
18	two	_	CD	CD	_	19	num	_	_
19	days	_	NNS	NNS	_	17	pobj	_	_
20	,	_	,	,	_	14	punct	_	_
21	to	_	TO	TO	_	22	aux	_	_
22	carry	_	VB	VB	_	14	xcomp	_	_
23	out	_	RP	RP	_	22	prt	_	_
24	interaction	_	NN	NN	_	25	nn	_	_
25	activities	_	NNS	NNS	_	22	dobj	_	_
26	with	_	IN	IN	_	22	prep	_	_
27	relevant	_	JJ	JJ	_	29	amod	_	_
28	Chinese	_	JJ	JJ	_	29	amod	_	_
29	parties	_	NNS	NNS	_	26	pobj	_	_
30	and	_	CC	CC	_	22	cc	_	_
31	visit	_	VB	VB	_	22	conj	_	_
32	and	_	CC	CC	_	31	cc	_	_
33	tour	_	VB	VB	_	31	conj	_	_
34	,	_	,	,	_	22	punct	_	_
35	and	_	CC	CC	_	22	cc	_	_
36	return	_	VB	VB	_	22	conj	_	_
37	to	_	TO	TO	_	36	prep	_	_
38	Japan	_	NNP	NNP	_	37	pobj	_	_
39	on	_	IN	IN	_	36	prep	_	_
40	13th	_	NN	NN	_	39	pobj	_	_
41	.	_	.	.	_	12	punct	_	_

Oracle:
(a / and, op, r / remain-01)
(a / and, op, r3 / return-01)
(a2 / activity, mod, i / interact-01)
(a3 / after, op, c11 / ceremony)
(a4 / and, op, c7 / carry-03)
(a4 / and, op, t4 / tour-01)
(a4 / and, op, v / visit-01)
(c / close-01, ARG0, c11 / ceremony)
(c / close-01, ARG1, g / game)
(c6 / city, name, n / name)
(c7 / carry-03, ARG0, t2 / they)
(c7 / carry-03, ARG1, a2 / activity)
(c8 / country, name, n2 / name)
(c9 / country, name, n3 / name)
(g / game, name, n4 / name)
(i / interact-01, ARG0, t2 / they)
(i / interact-01, ARG1, p / party)
(n / name, op, "Beijing")
(n2 / name, op, "China")
(n3 / name, op, "Japan")
(n4 / name, op, "Meet")
(n4 / name, op, "Sports")
(p / party, mod, c8 / country)
(r / remain-01, ARG1, t2 / they)
(r / remain-01, duration, t3 / temporal-quantity)
(r / remain-01, location, c6 / city)
(r / remain-01, time, a3 / after)
(r2 / relevant-41, ARG1, p / party)
(r3 / return-01, ARG1, t2 / they)
(r3 / return-01, ARG4, c9 / country)
(t3 / temporal-quantity, quant, 2 / 2)
(t3 / temporal-quantity, unit, d3 / day)
(t4 / tour-01, ARG0, t2 / they)
(t4 / tour-01, ARG1, c6 / city)
(v / visit-01, ARG0, t2 / they)
(v / visit-01, ARG1, c6 / city)

Input(Some(Graph((and :op (return-01 :time (date-entity :day 13) :ARG4 (country :name (name :op "Japan")) :ARG1 they) :op (remain-01 :time (after :op (ceremony :ARG0-of (close-01 :ARG1 (game :name (name :op "Meet" :op "Sports"))))) :ARG1-of (have-purpose-91 :ARG2 (and :op (visit-01 :ARG0 they :ARG1 city) :op (tour-01 :ARG0 they :ARG1 city) :op (carry-03 :ARG1 (activity :mod (interact-01 :ARG1 (party :ARG1-of relevant-41 :mod (country :name (name :op "China"))) :ARG0 they)) :ARG0 they))) :duration (temporal-quantity :unit day :quant 2) :location (city :name (name :op "Beijing")) :ARG1 they)),ArrayBuffer(Span(15,16,List(0, 1, 2),Beijing,(city :name (name :op "Beijing")),false), Span(6,8,List(3, 4, 5, 6),Sports Meet,(game :name (name :op "Meet" :op "Sports")),false), Span(37,38,List(7, 8, 9),Japan,(country :name (name :op "Japan")),false), Span(27,28,List(10, 11, 12),Chinese,(country :name (name :op "China")),false), Span(29,30,List(13),and,and,false), Span(35,36,List(14),return,return-01,false), Span(13,14,List(15),remain,remain-01,false), Span(0,1,List(16),After,after,false), Span(3,4,List(17),ceremonies,ceremony,false), Span(2,3,List(18),closing,close-01,false), Span(31,32,List(19),and,and,false), Span(30,31,List(20),visit,visit-01,false), Span(32,33,List(21),tour,tour-01,false), Span(21,22,List(22),carry,carry-03,false), Span(24,25,List(23),activities,activity,false), Span(28,29,List(24),parties,party,false), Span(26,27,List(25),relevant,relevant-41,false), Span(17,18,List(26),two,2,false), Span(18,19,List(27, 28),days,(temporal-quantity :unit day),false), Span(9,10,List(29),they,they,false), Span(23,24,List(30),interaction,interact-01,false)),Map(30 -> interact-01, 2 -> "Beijing", 5 -> "Meet", 27 -> temporal-quantity, 12 -> "China", 15 -> remain-01, 8 -> name, 21 -> tour-01, 18 -> close-01, 24 -> party, 7 -> country, 17 -> ceremony, 1 -> name, 23 -> activity, 26 -> 2, 4 -> name, 11 -> name, 14 -> return-01, 29 -> they, 20 -> visit-01, 28 -> day, 6 -> "Sports", 9 -> "Japan", 0 -> city, 22 -> carry-03, 16 -> after, 19 -> and, 10 -> country, 3 -> game, 25 -> relevant-41, 13 -> and),Map(n -> name, c8 -> country, r3 -> return-01, t4 -> tour-01, 2 -> 2, d3 -> day, c7 -> carry-03, a3 -> after, n4 -> name, v -> visit-01, t3 -> temporal-quantity, r2 -> relevant-41, p -> party, g -> game, a -> and, n3 -> name, c6 -> city, c9 -> country, t2 -> they, i -> interact-01, a2 -> activity, r -> remain-01, c -> close-01, n2 -> name, a4 -> and, c11 -> ceremony))),[Ljava.lang.String;@2cdd0d4b,Annotation([Ljava.lang.String;@7e9131d5,[Ljava.lang.String;@2e1d27ba,[Ljava.lang.String;@61d6015a),Annotation([Ljava.lang.String;@2525ff7e,[Ljava.lang.String;@524d6d96,[Ledu.cmu.lti.nlp.amr.Dependency;@152aa092),Annotation([Ljava.lang.String;@44a7bfbc,[Ljava.lang.String;@4ef37659,[Ljava.lang.String;@776b83cc),Annotation([Ljava.lang.String;@37858383,[Ljava.lang.String;@4e268090,[Ledu.cmu.lti.nlp.amr.Entity;@1bb266b3))
AMR:
(a / and, op, c7 / carry-03)
(a / and, op, r3 / return-01)
(a / and, op, v / visit-01)
(a2 / activity, mod, i / interact-01)
(a3 / after, op, c11 / ceremony)
(a4 / and, op, p / party)
(a4 / and, op, t4 / tour-01)
(a4 / and, op, v / visit-01)
(c / close-01, ARG1, c11 / ceremony)
(c6 / city, name, n / name)
(c7 / carry-03, ARG1, a2 / activity)
(c8 / country, name, n2 / name)
(c9 / country, name, n3 / name)
(g / game, name, n4 / name)
(i / interact-01, ARG1, c / close-01)
(n / name, op, "Beijing")
(n2 / name, op, "China")
(n3 / name, op, "Japan")
(n4 / name, op, "Meet")
(n4 / name, op, "Sports")
(p / party, mod, c8 / country)
(r / remain-01, ARG0, t2 / they)
(r / remain-01, ARG1, a / and)
(r / remain-01, ARG3, c6 / city)
(r2 / relevant-41, ARG1, p / party)
(r3 / return-01, ARG1, t3 / temporal-quantity)
(r3 / return-01, ARG4, c9 / country)
(t3 / temporal-quantity, quant, 2 / 2)
(t3 / temporal-quantity, unit, d3 / day)
(v / visit-01, ARG1, g / game)

WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.4.0.0.0
WARNING: makeIds can't find span Id: 0.0.4.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.4.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.4.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.4
WARNING: makeIds can't find span Id: 0.0.4.0
WARNING: makeIds can't find span Id: 0.0.4.0.0
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.2
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0.0
Decoded in 788,775 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 1-2:  End => end-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(end-01,ArrayBuffer(Span(1,2,List(0),End,end-01,false)),Map(0 -> end-01),Map(e -> end-01))),[Ljava.lang.String;@306cf3ea,Annotation([Ljava.lang.String;@2beee7ff,[Ljava.lang.String;@5136d012,[Ljava.lang.String;@5939a379),Annotation([Ljava.lang.String;@e1de817,[Ljava.lang.String;@52102734,[Ledu.cmu.lti.nlp.amr.Dependency;@3541cb24),Annotation([Ljava.lang.String;@2177849e,[Ljava.lang.String;@40cb8df7,[Ljava.lang.String;@13b13b5d),Annotation([Ljava.lang.String;@2892dae4,[Ljava.lang.String;@355ce81c,[Ledu.cmu.lti.nlp.amr.Entity;@29647f75))
AMR:


Decoded in 3,334 microseconds
Sentence: In the script " Mongolian handicapped athletes prepare for the Far South Sports Meet " broadcast today , the " Sports Association Chairman Lahagewasu " at the end of paragraph three should be changed to " Sports Association Chairman Lahagewasulen " .

Oracle Span 1:  athletes => athlete
Oracle Span 2:  broadcast => broadcast-01
Oracle Span 3:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 4:  changed => change-01
Oracle Span 5:  end => end
Oracle Span 6:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Oracle Span 7:  handicapped => handicap-01
Oracle Span 8:  Lahagewasu => (person :name (name :op "Lahagewasu"))
Oracle Span 9:  Lahagewasulen => (person :name (name :op "Lahagewasulen"))
Oracle Span 10:  Mongolian => (country :name (name :op "Mongolia"))
Oracle Span 11:  paragraph => paragraph
Oracle Span 12:  prepare => prepare-02
Oracle Span 13:  script => script
Oracle Span 14:  should => recommend-01
Oracle Span 15:  Sports Association => (organization :name (name :op "Association" :op "Sports"))
Oracle Span 16:  three => 3
Oracle Span 17:  today => today
NER Entity: (thing :name (name :op "Lahagewasulen"))
NER Entity: (organization :name (name :op "Sports" :op "Association"))
NER Entity: (thing :name (name :op "Lahagewasu"))
NER Entity: (organization :name (name :op "Far" :op "South" :op "Sports" :op "Meet"))
NER Entity: (thing :name (name :op "Mongolian"))
Spans:
Span 6-7:  athletes => athlete
Span 15-16:  broadcast => broadcast-01
Span 22-23:  Chairman => (have-org-role-91 :ARG2 chairman)
Span 33-34:  changed => change-01
Span 27-28:  end => end
Span 10-14:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Span 5-6:  handicapped => handicap-01
Span 23-24:  Lahagewasu => (person :name (name :op "Lahagewasu"))
Span 39-40:  Lahagewasulen => (person :name (name :op "Lahagewasulen"))
Span 4-5:  Mongolian => (country :name (name :op "Mongolia"))
Span 29-30:  paragraph => paragraph
Span 7-8:  prepare => prepare-02
Span 2-3:  script => script
Span 31-32:  should => recommend-01
Span 20-22:  Sports Association => (organization :name (name :op "Association" :op "Sports"))
Span 30-31:  three => 3
Span 16-17:  today => today

Langrangian relaxation converged after 41 iterations. Delta = 0.0
Oracle Span 6-7:  athletes => athlete
Oracle Span 15-16:  broadcast => broadcast-01
Oracle Span 22-23:  Chairman => (have-org-role-91 :ARG2 chairman)
Oracle Span 33-34:  changed => change-01
Oracle Span 27-28:  end => end
Oracle Span 10-14:  Far South Sports Meet => (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far"))
Oracle Span 5-6:  handicapped => handicap-01
Oracle Span 23-24:  Lahagewasu => (person :name (name :op "Lahagewasu"))
Oracle Span 39-40:  Lahagewasulen => (person :name (name :op "Lahagewasulen"))
Oracle Span 4-5:  Mongolian => (country :name (name :op "Mongolia"))
Oracle Span 29-30:  paragraph => paragraph
Oracle Span 7-8:  prepare => prepare-02
Oracle Span 2-3:  script => script
Oracle Span 31-32:  should => recommend-01
Oracle Span 20-22:  Sports Association => (organization :name (name :op "Association" :op "Sports"))
Oracle Span 30-31:  three => 3
Oracle Span 16-17:  today => today

Dependencies:
1	In	_	IN	IN	_	34	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	script	_	NN	NN	_	1	pobj	_	_
4	"	_	''	''	_	3	punct	_	_
5	Mongolian	_	JJ	JJ	_	7	amod	_	_
6	handicapped	_	VBN	VBN	_	7	amod	_	_
7	athletes	_	NNS	NNS	_	8	nsubj	_	_
8	prepare	_	VBP	VBP	_	3	rcmod	_	_
9	for	_	IN	IN	_	8	prep	_	_
10	the	_	DT	DT	_	16	det	_	_
11	Far	_	NNP	NNP	_	16	nn	_	_
12	South	_	NNP	NNP	_	16	nn	_	_
13	Sports	_	NNPS	NNPS	_	16	nn	_	_
14	Meet	_	JJ	JJ	_	16	amod	_	_
15	"	_	''	''	_	16	punct	_	_
16	broadcast	_	NN	NN	_	9	pobj	_	_
17	today	_	NN	NN	_	34	tmod	_	_
18	,	_	,	,	_	34	punct	_	_
19	the	_	NNP	NNP	_	24	nn	_	_
20	"	_	''	''	_	24	punct	_	_
21	Sports	_	NNP	NNP	_	24	nn	_	_
22	Association	_	NNP	NNP	_	24	nn	_	_
23	Chairman	_	NNP	NNP	_	24	nn	_	_
24	Lahagewasu	_	NNP	NNP	_	34	nsubjpass	_	_
25	"	_	''	''	_	24	punct	_	_
26	at	_	IN	IN	_	34	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	end	_	NN	NN	_	26	pobj	_	_
29	of	_	IN	IN	_	28	prep	_	_
30	paragraph	_	NN	NN	_	29	pobj	_	_
31	three	_	CD	CD	_	30	num	_	_
32	should	_	MD	MD	_	34	aux	_	_
33	be	_	VB	VB	_	34	auxpass	_	_
34	changed	_	VBN	VBN	_	0	root	_	_
35	to	_	IN	IN	_	34	prep	_	_
36	"	_	''	''	_	35	punct	_	_
37	Sports	_	NNP	NNP	_	40	nn	_	_
38	Association	_	NNP	NNP	_	40	nn	_	_
39	Chairman	_	NNP	NNP	_	40	nn	_	_
40	Lahagewasulen	_	NNP	NNP	_	35	pobj	_	_
41	"	_	''	''	_	40	punct	_	_
42	.	_	.	.	_	34	punct	_	_

Oracle:
(a / athlete, mod, c3 / country)
(b / broadcast-01, ARG1, s / script)
(b / broadcast-01, time, t / today)
(c2 / change-01, ARG2, p / person)
(c2 / change-01, ARG3, p3 / person)
(c2 / change-01, location, s / script)
(c3 / country, name, n6 / name)
(e / end, op, p4 / paragraph)
(g / game, name, n7 / name)
(h / have-org-role-91, ARG0, p / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, c / chairman)
(h3 / handicap-01, ARG1, a / athlete)
(n2 / name, op, "Lahagewasulen")
(n4 / name, op, "Association")
(n4 / name, op, "Sports")
(n5 / name, op, "Lahagewasu")
(n6 / name, op, "Mongolia")
(n7 / name, op, "Far")
(n7 / name, op, "Meet")
(n7 / name, op, "South")
(n7 / name, op, "Sports")
(o / organization, name, n4 / name)
(p / person, name, n2 / name)
(p3 / person, location, e / end)
(p3 / person, name, n5 / name)
(p4 / paragraph, mod, 3 / 3)
(p5 / prepare-02, ARG0, a / athlete)
(p5 / prepare-02, ARG1, a / athlete)
(p5 / prepare-02, ARG2, g / game)
(r / recommend-01, ARG1, c2 / change-01)

Input(Some(Graph((recommend-01 :ARG1 (change-01 :location (script :ARG1-of (title-01 :ARG2 (prepare-02 :ARG2 (game :name (name :op "Meet" :op "Sports" :op "South" :op "Far")) :ARG0 (athlete :mod (country :name (name :op "Mongolia")) :ARG1-of handicap-01) :ARG1 athlete)) :ARG1-of (broadcast-01 :time today)) :ARG3 (person :location (end :op (paragraph :mod 3)) :ARG0-of (have-org-role-91 :ARG1 organization :ARG2 chairman) :name (name :op "Lahagewasu")) :ARG2 (person :ARG0-of (have-org-role-91 :ARG2 chairman :ARG1 (organization :name (name :op "Association" :op "Sports"))) :name (name :op "Lahagewasulen")))),ArrayBuffer(Span(39,40,List(0, 1, 2),Lahagewasulen,(person :name (name :op "Lahagewasulen")),false), Span(20,22,List(3, 4, 5, 6),Sports Association,(organization :name (name :op "Association" :op "Sports")),false), Span(23,24,List(7, 8, 9),Lahagewasu,(person :name (name :op "Lahagewasu")),false), Span(10,14,List(10, 11, 12, 13, 14, 15),Far South Sports Meet,(game :name (name :op "Meet" :op "Sports" :op "South" :op "Far")),false), Span(4,5,List(16, 17, 18),Mongolian,(country :name (name :op "Mongolia")),false), Span(31,32,List(19),should,recommend-01,false), Span(33,34,List(20),changed,change-01,false), Span(2,3,List(21),script,script,false), Span(7,8,List(22),prepare,prepare-02,false), Span(6,7,List(23),athletes,athlete,false), Span(5,6,List(24),handicapped,handicap-01,false), Span(15,16,List(25),broadcast,broadcast-01,false), Span(16,17,List(26),today,today,false), Span(27,28,List(27),end,end,false), Span(29,30,List(28),paragraph,paragraph,false), Span(30,31,List(29),three,3,false), Span(22,23,List(30, 31),Chairman,(have-org-role-91 :ARG2 chairman),false)),Map(30 -> have-org-role-91, 2 -> "Lahagewasulen", 5 -> "Association", 27 -> end, 12 -> "Meet", 15 -> "Far", 8 -> name, 21 -> script, 18 -> "Mongolia", 24 -> handicap-01, 7 -> person, 17 -> name, 1 -> name, 23 -> athlete, 26 -> today, 4 -> name, 11 -> name, 14 -> "South", 29 -> 3, 20 -> change-01, 28 -> paragraph, 6 -> "Sports", 9 -> "Lahagewasu", 0 -> person, 22 -> prepare-02, 16 -> country, 19 -> recommend-01, 10 -> game, 3 -> organization, 31 -> chairman, 25 -> broadcast-01, 13 -> "Sports"),Map(e -> end, h -> have-org-role-91, p5 -> prepare-02, t -> today, b -> broadcast-01, n7 -> name, n4 -> name, s -> script, g -> game, p -> person, a -> athlete, c3 -> country, p4 -> paragraph, n6 -> name, r -> recommend-01, c -> chairman, h3 -> handicap-01, o -> organization, 3 -> 3, p3 -> person, c2 -> change-01, n2 -> name, n5 -> name))),[Ljava.lang.String;@3315d2d7,Annotation([Ljava.lang.String;@d6e7bab,[Ljava.lang.String;@5fa07e12,[Ljava.lang.String;@55b53d44),Annotation([Ljava.lang.String;@482bce4f,[Ljava.lang.String;@366647c2,[Ledu.cmu.lti.nlp.amr.Dependency;@6a6afff2),Annotation([Ljava.lang.String;@1649b0e6,[Ljava.lang.String;@865dd6,[Ljava.lang.String;@4da4253),Annotation([Ljava.lang.String;@3972a855,[Ljava.lang.String;@62e7f11d,[Ledu.cmu.lti.nlp.amr.Entity;@503d687a))
AMR:
(a / athlete, mod, c3 / country)
(b / broadcast-01, ARG1, t / today)
(c2 / change-01, ARG1, p3 / person)
(c2 / change-01, ARG2, p / person)
(c3 / country, name, n6 / name)
(g / game, name, n7 / name)
(h / have-org-role-91, ARG0, p3 / person)
(h / have-org-role-91, ARG1, o / organization)
(h / have-org-role-91, ARG2, c / chairman)
(h3 / handicap-01, ARG0, e / end)
(h3 / handicap-01, ARG1, a / athlete)
(n2 / name, op, "Lahagewasulen")
(n4 / name, op, "Association")
(n4 / name, op, "Sports")
(n5 / name, op, "Lahagewasu")
(n6 / name, op, "Mongolia")
(n7 / name, op, "Far")
(n7 / name, op, "Meet")
(n7 / name, op, "South")
(n7 / name, op, "Sports")
(o / organization, name, n4 / name)
(p / person, name, n2 / name)
(p3 / person, name, n5 / name)
(p4 / paragraph, quant, e / end)
(p5 / prepare-02, ARG0, a / athlete)
(p5 / prepare-02, ARG1, b / broadcast-01)
(p5 / prepare-02, ARG6, s / script)
(r / recommend-01, ARG0, g / game)
(r / recommend-01, ARG1, c2 / change-01)
(r / recommend-01, ARG6, 3 / 3)
(s / script, poss, p3 / person)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.3
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.2
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
Decoded in 1,759,658 microseconds
Sentence: Xinhua News Agency , August 31st .

Oracle Span 1:  August => 8
Oracle Span 2:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
Spans:
Span 4-5:  August => 8
Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 4-5:  August => 8
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	August	_	NNP	NNP	_	6	nn	_	_
6	31st	_	NNP	NNP	_	3	appos	_	_
7	.	_	.	.	_	3	punct	_	_

Oracle:
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(p / publication, name, n / name)

Input(Some(Graph((byline-91 :ARG0 (publication :name (name :op "Agency" :op "News" :op "Xinhua")) :time (date-entity :month 8 :day 31)),ArrayBuffer(Span(0,3,List(0, 1, 2, 3, 4),Xinhua News Agency,(publication :name (name :op "Agency" :op "News" :op "Xinhua")),false), Span(4,5,List(5),August,8,false)),Map(2 -> "Agency", 5 -> 8, 1 -> name, 4 -> "Xinhua", 0 -> publication, 3 -> "News"),Map(n -> name, 8 -> 8, p -> publication))),[Ljava.lang.String;@6a370f4,Annotation([Ljava.lang.String;@2abf4075,[Ljava.lang.String;@770d3326,[Ljava.lang.String;@4cc8eb05),Annotation([Ljava.lang.String;@51f116b8,[Ljava.lang.String;@19d481b,[Ledu.cmu.lti.nlp.amr.Dependency;@1f97cf0d),Annotation([Ljava.lang.String;@140c9f39,[Ljava.lang.String;@4d910fd6,[Ljava.lang.String;@26275bef),Annotation([Ljava.lang.String;@7690781,[Ljava.lang.String;@77eca502,[Ledu.cmu.lti.nlp.amr.Entity;@3246fb96))
AMR:
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(p / publication, calendar, 8 / 8)
(p / publication, name, n / name)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 13,662 microseconds
Sentence: Xinhua News Agency , Seoul , August 31st , by reporter Shuifu Tang

Oracle Span 1:  August => 8
Oracle Span 2:  reporter => report-01
Oracle Span 3:  Seoul => (city :name (name :op "Seoul"))
Oracle Span 4:  Shuifu Tang => (person :name (name :op "Tang" :op "Shuifu"))
Oracle Span 5:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Shuifu" :op "Tang"))
NER Entity: (country :name (name :op "Seoul"))
Spans:
Span 6-7:  August => 8
Span 10-11:  reporter => report-01
Span 4-5:  Seoul => (city :name (name :op "Seoul"))
Span 11-13:  Shuifu Tang => (person :name (name :op "Tang" :op "Shuifu"))
Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Langrangian relaxation converged after 29 iterations. Delta = 0.0
Oracle Span 6-7:  August => 8
Oracle Span 10-11:  reporter => report-01
Oracle Span 4-5:  Seoul => (city :name (name :op "Seoul"))
Oracle Span 11-13:  Shuifu Tang => (person :name (name :op "Tang" :op "Shuifu"))
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Seoul	_	NNP	NNP	_	8	nn	_	_
6	,	_	,	,	_	8	punct	_	_
7	August	_	NNP	NNP	_	8	appos	_	_
8	31st	_	NNPS	NNPS	_	3	appos	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporter	_	NN	NN	_	13	nn	_	_
12	Shuifu	_	NNP	NNP	_	13	nn	_	_
13	Tang	_	NNP	NNP	_	10	pobj	_	_

Oracle:
(c3 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Shuifu")
(n2 / name, op, "Tang")
(n3 / name, op, "Seoul")
(p / publication, name, n / name)
(p2 / person, name, n2 / name)
(r / report-01, ARG0, p2 / person)

Input(Some(Graph((byline-91 :ARG0 (publication :name (name :op "Agency" :op "News" :op "Xinhua")) :ARG1 (person :ARG0-of report-01 :name (name :op "Tang" :op "Shuifu")) :location (city :name (name :op "Seoul")) :time (date-entity :month 8 :day 31)),ArrayBuffer(Span(0,3,List(0, 1, 2, 3, 4),Xinhua News Agency,(publication :name (name :op "Agency" :op "News" :op "Xinhua")),false), Span(11,13,List(5, 6, 7, 8),Shuifu Tang,(person :name (name :op "Tang" :op "Shuifu")),false), Span(4,5,List(9, 10, 11),Seoul,(city :name (name :op "Seoul")),false), Span(10,11,List(12),reporter,report-01,false), Span(6,7,List(13),August,8,false)),Map(2 -> "Agency", 5 -> person, 12 -> report-01, 8 -> "Shuifu", 7 -> "Tang", 1 -> name, 4 -> "Xinhua", 11 -> "Seoul", 6 -> name, 9 -> city, 0 -> publication, 10 -> name, 3 -> "News", 13 -> 8),Map(n -> name, 8 -> 8, p2 -> person, p -> publication, n3 -> name, c3 -> city, r -> report-01, n2 -> name))),[Ljava.lang.String;@2e222612,Annotation([Ljava.lang.String;@61386958,[Ljava.lang.String;@73ee04c8,[Ljava.lang.String;@7671cb68),Annotation([Ljava.lang.String;@49dc7102,[Ljava.lang.String;@6b8ca3c8,[Ledu.cmu.lti.nlp.amr.Dependency;@68c72235),Annotation([Ljava.lang.String;@10959ece,[Ljava.lang.String;@3a6bb9bf,[Ljava.lang.String;@34f7cfd9),Annotation([Ljava.lang.String;@65f095f8,[Ljava.lang.String;@59af0466,[Ledu.cmu.lti.nlp.amr.Entity;@3e6ef8ad))
AMR:
(c3 / city, calendar, 8 / 8)
(c3 / city, name, n3 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Shuifu")
(n2 / name, op, "Tang")
(n3 / name, op, "Seoul")
(p / publication, name, n / name)
(p / publication, poss, p2 / person)
(p2 / person, name, n2 / name)
(r / report-01, ARG0, p2 / person)
(r / report-01, ARG1, 8 / 8)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.3.0
Decoded in 252,614 microseconds
Sentence: The first " Le Tian Cup " China and Korea Go competition started today at Fushan , the second largest city of Korea .

Oracle Span 1:  China => (country :name (name :op "China"))
Oracle Span 2:  city => city
Oracle Span 3:  competition => compete-01
Oracle Span 4:  Fushan => (name :op "Fushan")
Oracle Span 5:  Go => (game :name (name :op "Go"))
Oracle Span 6:  Korea => (country :name (name :op "Korea"))
Oracle Span 7:  largest => (large :degree most)
Oracle Span 8:  Le Tian Cup => (name :op "Cup" :op "Tian" :op "Le")
Oracle Span 9:  started => start-01
Oracle Span 10:  today => today
NER Entity: (person :name (name :op "Le"))
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Fushan"))
NER Entity: (country :name (name :op "Korea"))
Spans:
Span 7-8:  China => (country :name (name :op "China"))
Span 20-21:  city => city
Span 11-12:  competition => compete-01
Span 15-16:  Fushan => (name :op "Fushan")
Span 10-11:  Go => (game :name (name :op "Go"))
Span 9-10:  Korea => (country :name (name :op "Korea"))
Span 19-20:  largest => (large :degree most)
Span 3-6:  Le Tian Cup => (name :op "Cup" :op "Tian" :op "Le")
Span 12-13:  started => start-01
Span 13-14:  today => today

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 7-8:  China => (country :name (name :op "China"))
Oracle Span 20-21:  city => city
Oracle Span 11-12:  competition => compete-01
Oracle Span 15-16:  Fushan => (name :op "Fushan")
Oracle Span 10-11:  Go => (game :name (name :op "Go"))
Oracle Span 9-10:  Korea => (country :name (name :op "Korea"))
Oracle Span 19-20:  largest => (large :degree most)
Oracle Span 3-6:  Le Tian Cup => (name :op "Cup" :op "Tian" :op "Le")
Oracle Span 12-13:  started => start-01
Oracle Span 13-14:  today => today

Dependencies:
1	The	_	DT	DT	_	4	det	_	_
2	first	_	JJ	JJ	_	4	amod	_	_
3	"	_	''	''	_	4	punct	_	_
4	Le	_	NNP	NNP	_	13	nsubj	_	_
5	Tian	_	NNP	NNP	_	8	nn	_	_
6	Cup	_	NNP	NNP	_	8	nn	_	_
7	"	_	''	''	_	8	punct	_	_
8	China	_	NNP	NNP	_	4	dep	_	_
9	and	_	CC	CC	_	4	cc	_	_
10	Korea	_	NNP	NNP	_	11	nn	_	_
11	Go	_	NNP	NNP	_	4	conj	_	_
12	competition	_	NN	NN	_	11	dep	_	_
13	started	_	VBD	VBD	_	0	root	_	_
14	today	_	NN	NN	_	13	tmod	_	_
15	at	_	IN	IN	_	13	prep	_	_
16	Fushan	_	NNP	NNP	_	15	pobj	_	_
17	,	_	,	,	_	13	punct	_	_
18	the	_	DT	DT	_	21	det	_	_
19	second	_	JJ	JJ	_	21	amod	_	_
20	largest	_	JJS	JJS	_	19	dep	_	_
21	city	_	NN	NN	_	13	dobj	_	_
22	of	_	IN	IN	_	21	prep	_	_
23	Korea	_	NNP	NNP	_	22	pobj	_	_
24	.	_	.	.	_	13	punct	_	_

Oracle:
(c3 / city, mod, l2 / large)
(c3 / city, name, n3 / name)
(c4 / country, name, n4 / name)
(c5 / country, name, n5 / name)
(c6 / compete-01, ARG0, c5 / country)
(c6 / compete-01, ARG1, c4 / country)
(c6 / compete-01, mod, g2 / game)
(c6 / compete-01, name, n6 / name)
(g2 / game, name, n2 / name)
(l2 / large, compared-to, c4 / country)
(l2 / large, degree, m / most)
(n2 / name, op, "Go")
(n3 / name, op, "Fushan")
(n4 / name, op, "Korea")
(n5 / name, op, "China")
(n6 / name, op, "Cup")
(n6 / name, op, "Le")
(n6 / name, op, "Tian")
(s / start-01, ARG1, c6 / compete-01)
(s / start-01, location, c3 / city)
(s / start-01, time, t / today)

Input(Some(Graph((start-01 :time today :location (city :mod (large :ord (ordinal-entity :value 2) :compared-to (country :name (name :op "Korea")) :degree most) :name (name :op "Fushan")) :ARG1 (compete-01 :mod (game :name (name :op "Go")) :ARG0 (country :name (name :op "China")) :name (name :op "Cup" :op "Tian" :op "Le") :ARG1 country)),ArrayBuffer(Span(3,6,List(0, 1, 2, 3),Le Tian Cup,(name :op "Cup" :op "Tian" :op "Le"),false), Span(7,8,List(4, 5, 6),China,(country :name (name :op "China")),false), Span(10,11,List(7, 8, 9),Go,(game :name (name :op "Go")),false), Span(15,16,List(10, 11),Fushan,(name :op "Fushan"),false), Span(9,10,List(12, 13, 14),Korea,(country :name (name :op "Korea")),false), Span(12,13,List(15),started,start-01,false), Span(13,14,List(16),today,today,false), Span(20,21,List(17),city,city,false), Span(19,20,List(18, 19),largest,(large :degree most),false), Span(11,12,List(20),competition,compete-01,false)),Map(2 -> "Tian", 5 -> name, 12 -> country, 15 -> start-01, 8 -> name, 18 -> large, 7 -> game, 17 -> city, 1 -> "Cup", 4 -> country, 11 -> "Fushan", 14 -> "Korea", 20 -> compete-01, 6 -> "China", 9 -> "Go", 0 -> name, 16 -> today, 19 -> most, 10 -> name, 3 -> "Le", 13 -> name),Map(t -> today, n4 -> name, c4 -> country, s -> start-01, m -> most, g2 -> game, c3 -> city, n3 -> name, n6 -> name, c6 -> compete-01, l2 -> large, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@346d61be,Annotation([Ljava.lang.String;@55536d9e,[Ljava.lang.String;@747edf66,[Ljava.lang.String;@3d1cfad4),Annotation([Ljava.lang.String;@62230c58,[Ljava.lang.String;@2cd2a21f,[Ledu.cmu.lti.nlp.amr.Dependency;@2e55dd0c),Annotation([Ljava.lang.String;@74455848,[Ljava.lang.String;@e7edb54,[Ljava.lang.String;@378542de),Annotation([Ljava.lang.String;@3738449f,[Ljava.lang.String;@69e1dd28,[Ledu.cmu.lti.nlp.amr.Entity;@11bd0f3b))
AMR:
(c3 / city, mod, l2 / large)
(c4 / country, name, n4 / name)
(c4 / country, name, n6 / name)
(c5 / country, name, n5 / name)
(c6 / compete-01, ARG1, g2 / game)
(g2 / game, mod, c4 / country)
(g2 / game, name, n2 / name)
(l2 / large, degree, m / most)
(n2 / name, op, "Go")
(n3 / name, op, "Fushan")
(n4 / name, op, "Korea")
(n5 / name, op, "China")
(n6 / name, op, "Cup")
(n6 / name, op, "Le")
(n6 / name, op, "Tian")
(s / start-01, ARG0, c4 / country)
(s / start-01, ARG1, c3 / city)
(s / start-01, ARG6, c5 / country)
(s / start-01, time, t / today)
(t / today, location, n3 / name)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 421,691 microseconds
Sentence: In the first round of competition , the Chinese team defeated the relatively stronger Korean team with a score of 4 : 3 .

Oracle Span 1:  3 => 3
Oracle Span 2:  4 => 4
Oracle Span 3:  Chinese => (country :name (name :op "China"))
Oracle Span 4:  competition => compete-01
Oracle Span 5:  defeated => defeat-01
Oracle Span 6:  Korean => (country :name (name :op "Korea"))
Oracle Span 7:  relatively => relative
Oracle Span 8:  round => round
Oracle Span 9:  score => score-entity
Oracle Span 10:  stronger => strong
Oracle Span 11:  team => team
Oracle Span 12:  team => team
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 22-23:  3 => 3
Span 20-21:  4 => 4
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 5-6:  competition => compete-01
Span 10-11:  defeated => defeat-01
Span 14-15:  Korean => (country :name (name :op "Korea"))
Span 12-13:  relatively => relative
Span 3-4:  round => round
Span 18-19:  score => score-entity
Span 13-14:  stronger => strong
Span 9-10:  team => team
Span 15-16:  team => team

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 22-23:  3 => 3
Oracle Span 20-21:  4 => 4
Oracle Span 8-9:  Chinese => (country :name (name :op "China"))
Oracle Span 5-6:  competition => compete-01
Oracle Span 10-11:  defeated => defeat-01
Oracle Span 14-15:  Korean => (country :name (name :op "Korea"))
Oracle Span 12-13:  relatively => relative
Oracle Span 3-4:  round => round
Oracle Span 18-19:  score => score-entity
Oracle Span 13-14:  stronger => strong
Oracle Span 9-10:  team => team
Oracle Span 15-16:  team => team

Dependencies:
1	In	_	IN	IN	_	11	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	first	_	JJ	JJ	_	4	amod	_	_
4	round	_	NN	NN	_	1	pobj	_	_
5	of	_	IN	IN	_	4	prep	_	_
6	competition	_	NN	NN	_	5	pobj	_	_
7	,	_	,	,	_	11	punct	_	_
8	the	_	DT	DT	_	10	det	_	_
9	Chinese	_	JJ	JJ	_	10	amod	_	_
10	team	_	NN	NN	_	11	nsubj	_	_
11	defeated	_	VBD	VBD	_	0	root	_	_
12	the	_	DT	DT	_	16	det	_	_
13	relatively	_	RB	RB	_	14	advmod	_	_
14	stronger	_	JJR	JJR	_	16	amod	_	_
15	Korean	_	JJ	JJ	_	16	amod	_	_
16	team	_	NN	NN	_	11	dobj	_	_
17	with	_	IN	IN	_	11	prep	_	_
18	a	_	DT	DT	_	19	det	_	_
19	score	_	NN	NN	_	17	pobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	4	_	CD	CD	_	20	pobj	_	_
22	:	_	:	:	_	19	punct	_	_
23	3	_	CD	CD	_	19	dep	_	_
24	.	_	.	.	_	11	punct	_	_

Oracle:
(c / compete-01, part, r / round)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(d / defeat-01, ARG0, t / team)
(d / defeat-01, ARG1, t2 / team)
(d / defeat-01, quant, s2 / score-entity)
(d / defeat-01, time, r / round)
(n / name, op, "China")
(n2 / name, op, "Korea")
(s / strong, compared-to, t / team)
(s / strong, degree, r2 / relative)
(s2 / score-entity, op, 3 / 3)
(s2 / score-entity, op, 4 / 4)
(t / team, mod, c4 / country)
(t2 / team, mod, c5 / country)
(t2 / team, mod, s / strong)

Input(Some(Graph((defeat-01 :quant (score-entity :op 3 :op 4) :time (round :ord (ordinal-entity :value 1) :part-of compete-01) :ARG1 (team :mod (strong :degree relative :degree more :compared-to team) :mod (country :name (name :op "Korea"))) :ARG0 (team :mod (country :name (name :op "China")))),ArrayBuffer(Span(8,9,List(0, 1, 2),Chinese,(country :name (name :op "China")),false), Span(14,15,List(3, 4, 5),Korean,(country :name (name :op "Korea")),false), Span(10,11,List(6),defeated,defeat-01,false), Span(20,21,List(7),4,4,false), Span(22,23,List(8),3,3,false), Span(3,4,List(9),round,round,false), Span(9,10,List(10),team,team,false), Span(13,14,List(11),stronger,strong,false), Span(15,16,List(12),team,team,false), Span(18,19,List(13),score,score-entity,false), Span(5,6,List(14),competition,compete-01,false), Span(12,13,List(15),relatively,relative,false)),Map(2 -> "China", 5 -> "Korea", 12 -> team, 15 -> relative, 8 -> 3, 7 -> 4, 1 -> name, 4 -> name, 11 -> strong, 14 -> compete-01, 6 -> defeat-01, 9 -> round, 0 -> country, 10 -> team, 3 -> country, 13 -> score-entity),Map(n -> name, s2 -> score-entity, t -> team, c4 -> country, s -> strong, d -> defeat-01, r2 -> relative, 4 -> 4, t2 -> team, r -> round, c -> compete-01, 3 -> 3, n2 -> name, c5 -> country))),[Ljava.lang.String;@c333c60,Annotation([Ljava.lang.String;@79da8dc5,[Ljava.lang.String;@1eb5174b,[Ljava.lang.String;@67080771),Annotation([Ljava.lang.String;@72cde7cc,[Ljava.lang.String;@5fd4f8f5,[Ledu.cmu.lti.nlp.amr.Dependency;@696da30b),Annotation([Ljava.lang.String;@4e7912d8,[Ljava.lang.String;@53976f5c,[Ljava.lang.String;@2bfc268b),Annotation([Ljava.lang.String;@2f8dad04,[Ljava.lang.String;@29e495ff,[Ledu.cmu.lti.nlp.amr.Entity;@41e1e210))
AMR:
(c / compete-01, ARG0, 3 / 3)
(c / compete-01, ARG1, 4 / 4)
(c4 / country, name, n / name)
(c5 / country, name, n2 / name)
(d / defeat-01, ARG0, t2 / team)
(d / defeat-01, ARG1, t / team)
(d / defeat-01, ARG2, s2 / score-entity)
(n / name, op, "China")
(n2 / name, op, "Korea")
(r / round, mod, c / compete-01)
(s / strong, mod, r2 / relative)
(t / team, location, r / round)
(t / team, mod, c5 / country)
(t / team, mod, s / strong)
(t2 / team, mod, c4 / country)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1.1.1
Decoded in 324,898 microseconds
Sentence: In the competition today , both sides each have 7 Go players participating .

Oracle Span 1:  7 => 7
Oracle Span 2:  both => both
Oracle Span 3:  competition => compete-01
Oracle Span 4:  each => each
Oracle Span 5:  Go => (game :name (name :op "Go"))
Oracle Span 6:  have => have-03
Oracle Span 7:  players => (person :ARG0-of play-01)
Oracle Span 8:  sides => side
Oracle Span 9:  today => today
Spans:
Span 9-10:  7 => 7
Span 5-6:  both => both
Span 2-3:  competition => compete-01
Span 7-8:  each => each
Span 10-11:  Go => (game :name (name :op "Go"))
Span 8-9:  have => have-03
Span 11-12:  players => (person :ARG0-of play-01)
Span 6-7:  sides => side
Span 3-4:  today => today

Langrangian relaxation converged after 33 iterations. Delta = 0.0
Oracle Span 9-10:  7 => 7
Oracle Span 5-6:  both => both
Oracle Span 2-3:  competition => compete-01
Oracle Span 7-8:  each => each
Oracle Span 10-11:  Go => (game :name (name :op "Go"))
Oracle Span 8-9:  have => have-03
Oracle Span 11-12:  players => (person :ARG0-of play-01)
Oracle Span 6-7:  sides => side
Oracle Span 3-4:  today => today

Dependencies:
1	In	_	IN	IN	_	9	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	competition	_	NN	NN	_	1	pobj	_	_
4	today	_	NN	NN	_	9	tmod	_	_
5	,	_	,	,	_	9	punct	_	_
6	both	_	DT	DT	_	7	det	_	_
7	sides	_	NNS	NNS	_	9	nsubj	_	_
8	each	_	DT	DT	_	9	dep	_	_
9	have	_	VBP	VBP	_	0	root	_	_
10	7	_	CD	CD	_	12	num	_	_
11	Go	_	NNP	NNP	_	12	nn	_	_
12	players	_	NNS	NNS	_	9	dobj	_	_
13	participating	_	VBG	VBG	_	12	vmod	_	_
14	.	_	.	.	_	9	punct	_	_

Oracle:
(c / compete-01, ARG0, p2 / person)
(c / compete-01, time, t / today)
(g / game, name, n / name)
(h / have-03, ARG0, s / side)
(h / have-03, ARG1, p2 / person)
(n / name, op, "Go")
(p2 / person, quant, 7 / 7)
(p3 / play-01, ARG0, p2 / person)
(p3 / play-01, ARG1, g / game)
(s / side, mod, b / both)
(s / side, mod, e2 / each)

Input(Some(Graph((have-03 :ARG1 (person :ARG0-of (compete-01 :time today) :ARG0-of (play-01 :ARG1 (game :name (name :op "Go"))) :quant 7) :ARG0 (side :mod each :mod both)),ArrayBuffer(Span(10,11,List(0, 1, 2),Go,(game :name (name :op "Go")),false), Span(8,9,List(3),have,have-03,false), Span(9,10,List(4),7,7,false), Span(11,12,List(5, 6),players,(person :ARG0-of play-01),false), Span(3,4,List(7),today,today,false), Span(6,7,List(8),sides,side,false), Span(7,8,List(9),each,each,false), Span(5,6,List(10),both,both,false), Span(2,3,List(11),competition,compete-01,false)),Map(2 -> "Go", 5 -> person, 8 -> side, 7 -> today, 1 -> name, 11 -> compete-01, 4 -> 7, 6 -> play-01, 9 -> each, 0 -> game, 10 -> both, 3 -> have-03),Map(n -> name, h -> have-03, b -> both, t -> today, e2 -> each, p2 -> person, s -> side, 7 -> 7, g -> game, c -> compete-01, p3 -> play-01))),[Ljava.lang.String;@44821a96,Annotation([Ljava.lang.String;@a3d8174,[Ljava.lang.String;@1ba9117e,[Ljava.lang.String;@732c2a62),Annotation([Ljava.lang.String;@272ed83b,[Ljava.lang.String;@41fecb8b,[Ledu.cmu.lti.nlp.amr.Dependency;@120f102b),Annotation([Ljava.lang.String;@625732,[Ljava.lang.String;@51dcb805,[Ljava.lang.String;@66498326),Annotation([Ljava.lang.String;@cad498c,[Ljava.lang.String;@1e6454ec,[Ledu.cmu.lti.nlp.amr.Entity;@2accdbb5))
AMR:
(c / compete-01, ARG0, p2 / person)
(c / compete-01, ARG1, t / today)
(g / game, name, n / name)
(h / have-03, ARG0, s / side)
(h / have-03, ARG1, p2 / person)
(h / have-03, ARG6, e2 / each)
(n / name, op, "Go")
(p2 / person, quant, 7 / 7)
(p3 / play-01, ARG0, p2 / person)
(p3 / play-01, ARG1, g / game)
(s / side, mod, b / both)

WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 332,178 microseconds
Sentence: Weiping Nie ( 9th level ) , Xiaoguang Liu ( 9th level ) , Hao Chang ( 6th level ) and Dayuan Cao ( 9th level ) from the Chinese team defeated Guibing Cui ( 6th level ) , Xiuying Zhang ( 9th level ) , Fengzhu Xu ( 9th level ) and Xuange Lin ( 8th level ) from the Korean team respectively .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  Chinese => (country :name (name :op "China"))
Oracle Span 4:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Oracle Span 5:  defeated => defeat-01
Oracle Span 6:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 7:  Guibing Cui => (person :name (name :op "Cui" :op "Guibing"))
Oracle Span 8:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 9:  Korean => (country :name (name :op "Korea"))
Oracle Span 10:  level => level
Oracle Span 11:  level => level
Oracle Span 12:  level => level
Oracle Span 13:  respectively => respective
Oracle Span 14:  team => team
Oracle Span 15:  team => team
Oracle Span 16:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 17:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))
Oracle Span 18:  Xiuying Zhang => (person :name (name :op "Zhang" :op "Xiuying"))
Oracle Span 19:  Xuange Lin => (person :name (name :op "Lin" :op "Xuange"))
NER Entity: (person :name (name :op "Xiaoguang" :op "Liu"))
NER Entity: (person :name (name :op "Hao" :op "Chang"))
NER Entity: (person :name (name :op "Dayuan" :op "Cao"))
NER Entity: (person :name (name :op "Guibing" :op "Cui"))
NER Entity: (person :name (name :op "Xiuying" :op "Zhang"))
NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
NER Entity: (person :name (name :op "Xuange" :op "Lin"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 20-21:  and => and
Span 52-53:  and => and
Span 29-30:  Chinese => (country :name (name :op "China"))
Span 21-23:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Span 31-32:  defeated => defeat-01
Span 46-48:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Span 32-34:  Guibing Cui => (person :name (name :op "Cui" :op "Guibing"))
Span 14-16:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Span 61-62:  Korean => (country :name (name :op "Korea"))
Span 4-5:  level => level
Span 11-12:  level => level
Span 18-19:  level => level
Span 63-64:  respectively => respective
Span 30-31:  team => team
Span 62-63:  team => team
Span 0-2:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Span 7-9:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))
Span 39-41:  Xiuying Zhang => (person :name (name :op "Zhang" :op "Xiuying"))
Span 53-55:  Xuange Lin => (person :name (name :op "Lin" :op "Xuange"))

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 20-21:  and => and
Oracle Span 52-53:  and => and
Oracle Span 29-30:  Chinese => (country :name (name :op "China"))
Oracle Span 21-23:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Oracle Span 31-32:  defeated => defeat-01
Oracle Span 46-48:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 32-34:  Guibing Cui => (person :name (name :op "Cui" :op "Guibing"))
Oracle Span 14-16:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 61-62:  Korean => (country :name (name :op "Korea"))
Oracle Span 4-5:  level => level
Oracle Span 11-12:  level => level
Oracle Span 18-19:  level => level
Oracle Span 63-64:  respectively => respective
Oracle Span 30-31:  team => team
Oracle Span 62-63:  team => team
Oracle Span 0-2:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 7-9:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))
Oracle Span 39-41:  Xiuying Zhang => (person :name (name :op "Zhang" :op "Xiuying"))
Oracle Span 53-55:  Xuange Lin => (person :name (name :op "Lin" :op "Xuange"))

Dependencies:
1	Weiping	_	NNP	NNP	_	16	nn	_	_
2	Nie	_	NNP	NNP	_	16	nn	_	_
3	(	_	(	(	_	5	punct	_	_
4	9th	_	JJ	JJ	_	5	amod	_	_
5	level	_	NN	NN	_	16	appos	_	_
6	)	_	)	)	_	5	punct	_	_
7	,	_	,	,	_	16	punct	_	_
8	Xiaoguang	_	NNP	NNP	_	16	dep	_	_
9	Liu	_	NNP	NNP	_	16	nn	_	_
10	(	_	(	(	_	12	punct	_	_
11	9th	_	JJ	JJ	_	12	amod	_	_
12	level	_	NN	NN	_	16	appos	_	_
13	)	_	)	)	_	12	punct	_	_
14	,	_	,	,	_	16	punct	_	_
15	Hao	_	NNP	NNP	_	16	dep	_	_
16	Chang	_	NNP	NNP	_	32	nsubj	_	_
17	(	_	(	(	_	19	punct	_	_
18	6th	_	JJ	JJ	_	19	amod	_	_
19	level	_	NN	NN	_	16	appos	_	_
20	)	_	)	)	_	19	punct	_	_
21	and	_	CC	CC	_	16	cc	_	_
22	Dayuan	_	NNP	NNP	_	23	nn	_	_
23	Cao	_	NNP	NNP	_	16	conj	_	_
24	(	_	(	(	_	26	punct	_	_
25	9th	_	JJ	JJ	_	26	amod	_	_
26	level	_	NN	NN	_	23	appos	_	_
27	)	_	)	)	_	26	punct	_	_
28	from	_	IN	IN	_	32	prep	_	_
29	the	_	DT	DT	_	31	det	_	_
30	Chinese	_	JJ	JJ	_	31	amod	_	_
31	team	_	NN	NN	_	28	pobj	_	_
32	defeated	_	VBD	VBD	_	0	root	_	_
33	Guibing	_	NNP	NNP	_	48	nn	_	_
34	Cui	_	NNP	NNP	_	48	nn	_	_
35	(	_	(	(	_	37	punct	_	_
36	6th	_	JJ	JJ	_	37	amod	_	_
37	level	_	NN	NN	_	48	appos	_	_
38	)	_	)	)	_	37	punct	_	_
39	,	_	,	,	_	48	punct	_	_
40	Xiuying	_	NNP	NNP	_	48	dep	_	_
41	Zhang	_	NNP	NNP	_	48	nn	_	_
42	(	_	(	(	_	44	punct	_	_
43	9th	_	JJ	JJ	_	44	amod	_	_
44	level	_	NN	NN	_	48	appos	_	_
45	)	_	)	)	_	44	punct	_	_
46	,	_	,	,	_	48	punct	_	_
47	Fengzhu	_	NNP	NNP	_	48	dep	_	_
48	Xu	_	NNP	NNP	_	32	dep	_	_
49	(	_	(	(	_	51	punct	_	_
50	9th	_	JJ	JJ	_	51	amod	_	_
51	level	_	NN	NN	_	48	appos	_	_
52	)	_	)	)	_	51	punct	_	_
53	and	_	CC	CC	_	48	cc	_	_
54	Xuange	_	NNP	NNP	_	55	nn	_	_
55	Lin	_	NNP	NNP	_	48	conj	_	_
56	(	_	(	(	_	58	punct	_	_
57	8th	_	JJ	JJ	_	58	amod	_	_
58	level	_	NN	NN	_	55	appos	_	_
59	)	_	)	)	_	58	punct	_	_
60	from	_	IN	IN	_	32	prep	_	_
61	the	_	DT	DT	_	63	det	_	_
62	Korean	_	JJ	JJ	_	63	amod	_	_
63	team	_	NN	NN	_	60	pobj	_	_
64	respectively	_	RB	RB	_	32	advmod	_	_
65	.	_	.	.	_	32	punct	_	_

Oracle:
(a / and, op, p10 / person)
(a / and, op, p11 / person)
(a / and, op, p12 / person)
(a / and, op, p9 / person)
(a2 / and, op, p13 / person)
(a2 / and, op, p14 / person)
(a2 / and, op, p15 / person)
(a2 / and, op, p16 / person)
(c4 / country, name, n5 / name)
(c5 / country, name, n10 / name)
(d2 / defeat-01, ARG0, a / and)
(d2 / defeat-01, ARG1, a2 / and)
(d2 / defeat-01, mod, r / respective)
(n / name, op, "Nie")
(n / name, op, "Weiping")
(n10 / name, op, "Korea")
(n2 / name, op, "Liu")
(n2 / name, op, "Xiaoguang")
(n3 / name, op, "Chang")
(n3 / name, op, "Hao")
(n4 / name, op, "Cao")
(n4 / name, op, "Dayuan")
(n5 / name, op, "China")
(n6 / name, op, "Cui")
(n6 / name, op, "Guibing")
(n7 / name, op, "Xiuying")
(n7 / name, op, "Zhang")
(n8 / name, op, "Fengzhu")
(n8 / name, op, "Xu")
(n9 / name, op, "Lin")
(n9 / name, op, "Xuange")
(p10 / person, mod, l / level)
(p10 / person, name, n2 / name)
(p11 / person, mod, l2 / level)
(p11 / person, name, n3 / name)
(p12 / person, mod, l / level)
(p12 / person, name, n4 / name)
(p13 / person, mod, l2 / level)
(p13 / person, name, n6 / name)
(p14 / person, mod, l / level)
(p14 / person, name, n7 / name)
(p15 / person, mod, l / level)
(p15 / person, name, n8 / name)
(p16 / person, mod, l3 / level)
(p16 / person, name, n9 / name)
(p9 / person, mod, l / level)
(p9 / person, name, n / name)
(t / team, mod, c4 / country)
(t / team, part, a / and)
(t2 / team, mod, c5 / country)
(t2 / team, part, a2 / and)

Input(Some(Graph((defeat-01 :mod respective :ARG1 (and :part-of (team :mod (country :name (name :op "Korea"))) :op (person :mod (level :ord (ordinal-entity :value 8)) :name (name :op "Lin" :op "Xuange")) :op (person :name (name :op "Xu" :op "Fengzhu") :mod level) :op (person :name (name :op "Zhang" :op "Xiuying") :mod level) :op (person :name (name :op "Cui" :op "Guibing") :mod level)) :ARG0 (and :part-of (team :mod (country :name (name :op "China"))) :op (person :name (name :op "Cao" :op "Dayuan") :mod level) :op (person :mod (level :ord (ordinal-entity :value 6)) :name (name :op "Chang" :op "Hao")) :op (person :name (name :op "Liu" :op "Xiaoguang") :mod level) :op (person :mod (level :ord (ordinal-entity :value 9)) :name (name :op "Nie" :op "Weiping")))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Weiping Nie,(person :name (name :op "Nie" :op "Weiping")),false), Span(7,9,List(4, 5, 6, 7),Xiaoguang Liu,(person :name (name :op "Liu" :op "Xiaoguang")),false), Span(14,16,List(8, 9, 10, 11),Hao Chang,(person :name (name :op "Chang" :op "Hao")),false), Span(21,23,List(12, 13, 14, 15),Dayuan Cao,(person :name (name :op "Cao" :op "Dayuan")),false), Span(32,34,List(16, 17, 18, 19),Guibing Cui,(person :name (name :op "Cui" :op "Guibing")),false), Span(39,41,List(20, 21, 22, 23),Xiuying Zhang,(person :name (name :op "Zhang" :op "Xiuying")),false), Span(46,48,List(24, 25, 26, 27),Fengzhu Xu,(person :name (name :op "Xu" :op "Fengzhu")),false), Span(53,55,List(28, 29, 30, 31),Xuange Lin,(person :name (name :op "Lin" :op "Xuange")),false), Span(29,30,List(32, 33, 34),Chinese,(country :name (name :op "China")),false), Span(61,62,List(35, 36, 37),Korean,(country :name (name :op "Korea")),false), Span(31,32,List(38),defeated,defeat-01,false), Span(20,21,List(39),and,and,false), Span(30,31,List(40),team,team,false), Span(4,5,List(41),level,level,false), Span(52,53,List(42),and,and,false), Span(62,63,List(43),team,team,false), Span(11,12,List(44),level,level,false), Span(18,19,List(45),level,level,false), Span(63,64,List(46),respectively,respective,false)),Map(45 -> level, 39 -> and, 30 -> "Lin", 2 -> "Nie", 5 -> name, 33 -> name, 27 -> "Fengzhu", 12 -> person, 8 -> person, 15 -> "Dayuan", 42 -> and, 36 -> name, 21 -> name, 18 -> "Cui", 24 -> person, 41 -> level, 35 -> country, 7 -> "Xiaoguang", 17 -> name, 1 -> name, 44 -> level, 23 -> "Xiuying", 38 -> defeat-01, 26 -> "Xu", 4 -> person, 11 -> "Hao", 32 -> country, 14 -> "Cao", 29 -> name, 20 -> person, 46 -> respective, 34 -> "China", 28 -> person, 6 -> "Liu", 40 -> team, 43 -> team, 9 -> name, 0 -> person, 22 -> "Zhang", 16 -> person, 37 -> "Korea", 19 -> "Guibing", 3 -> "Weiping", 10 -> "Chang", 31 -> "Xuange", 25 -> name, 13 -> name),Map(p10 -> person, n -> name, t -> team, n7 -> name, p12 -> person, l3 -> level, c4 -> country, n4 -> name, p15 -> person, a -> and, n3 -> name, p14 -> person, d2 -> defeat-01, n6 -> name, n10 -> name, n9 -> name, t2 -> team, p11 -> person, l2 -> level, r -> respective, a2 -> and, l -> level, n8 -> name, p9 -> person, p13 -> person, n2 -> name, c5 -> country, n5 -> name, p16 -> person))),[Ljava.lang.String;@b62d79,Annotation([Ljava.lang.String;@6631f5ca,[Ljava.lang.String;@5ace1ed4,[Ljava.lang.String;@1613674b),Annotation([Ljava.lang.String;@27ff5d15,[Ljava.lang.String;@4e096385,[Ledu.cmu.lti.nlp.amr.Dependency;@649bec2e),Annotation([Ljava.lang.String;@693fe6c9,[Ljava.lang.String;@34f5090e,[Ljava.lang.String;@31e5415e),Annotation([Ljava.lang.String;@a2431d0,[Ljava.lang.String;@1cbb87f3,[Ledu.cmu.lti.nlp.amr.Entity;@1a4013))
AMR:
(a / and, op, p14 / person)
(a / and, op, p15 / person)
(a / and, op, p16 / person)
(a2 / and, mod, r / respective)
(a2 / and, op, l2 / level)
(a2 / and, op, l3 / level)
(a2 / and, op, p10 / person)
(a2 / and, op, p11 / person)
(a2 / and, op, p12 / person)
(a2 / and, op, p15 / person)
(c4 / country, name, n5 / name)
(c5 / country, name, n10 / name)
(d2 / defeat-01, ARG0, p11 / person)
(d2 / defeat-01, ARG1, t2 / team)
(d2 / defeat-01, ARG2, p13 / person)
(d2 / defeat-01, ARG6, l / level)
(n / name, op, "Nie")
(n / name, op, "Weiping")
(n10 / name, op, "Korea")
(n2 / name, op, "Liu")
(n2 / name, op, "Xiaoguang")
(n3 / name, op, "Chang")
(n3 / name, op, "Hao")
(n4 / name, op, "Cao")
(n4 / name, op, "Dayuan")
(n5 / name, op, "China")
(n6 / name, op, "Cui")
(n6 / name, op, "Guibing")
(n7 / name, op, "Xiuying")
(n7 / name, op, "Zhang")
(n8 / name, op, "Fengzhu")
(n8 / name, op, "Xu")
(n9 / name, op, "Lin")
(n9 / name, op, "Xuange")
(p10 / person, name, n2 / name)
(p11 / person, name, n3 / name)
(p12 / person, name, n4 / name)
(p13 / person, name, n6 / name)
(p14 / person, mod, c5 / country)
(p14 / person, name, n7 / name)
(p15 / person, name, n8 / name)
(p16 / person, name, n9 / name)
(p9 / person, calendar, l3 / level)
(p9 / person, name, n / name)
(t / team, mod, c5 / country)
(t2 / team, mod, c4 / country)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.3.0.1
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.0.4.0
WARNING: makeIds can't find span Id: 0.0.4.0.0
WARNING: makeIds can't find span Id: 0.0.4.0.0.0
WARNING: makeIds can't find span Id: 0.1.4.0
WARNING: makeIds can't find span Id: 0.1.4.0.0
WARNING: makeIds can't find span Id: 0.1.4.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.4
WARNING: makeIds can't find span Id: 0.1.3.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.4
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 2,032,679 microseconds
Sentence: Among which , Weiping Nie , Xiaoguang Liu and Hao Chang both achieved victories in the middle games .

Oracle Span 1:  and => and
Oracle Span 2:  games => game
Oracle Span 3:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 4:  middle => middle
Oracle Span 5:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 6:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))
NER Entity: (person :name (name :op "Xiaoguang" :op "Liu"))
NER Entity: (person :name (name :op "Hao" :op "Chang"))
Spans:
Span 8-9:  and => and
Span 17-18:  games => game
Span 9-11:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Span 16-17:  middle => middle
Span 3-5:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Span 6-8:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  and => and
Oracle Span 17-18:  games => game
Oracle Span 9-11:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 16-17:  middle => middle
Oracle Span 3-5:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 6-8:  Xiaoguang Liu => (person :name (name :op "Liu" :op "Xiaoguang"))

Dependencies:
1	Among	_	IN	IN	_	13	prep	_	_
2	which	_	WDT	WDT	_	1	pobj	_	_
3	,	_	,	,	_	13	punct	_	_
4	Weiping	_	NNP	NNP	_	5	nn	_	_
5	Nie	_	NNP	NNP	_	13	nsubj	_	_
6	,	_	,	,	_	5	punct	_	_
7	Xiaoguang	_	NNP	NNP	_	8	nn	_	_
8	Liu	_	NNP	NNP	_	5	conj	_	_
9	and	_	CC	CC	_	5	cc	_	_
10	Hao	_	NNP	NNP	_	11	nn	_	_
11	Chang	_	NNP	NNP	_	5	conj	_	_
12	both	_	DT	DT	_	13	dep	_	_
13	achieved	_	VBD	VBD	_	0	root	_	_
14	victories	_	NNS	NNS	_	13	dobj	_	_
15	in	_	IN	IN	_	13	prep	_	_
16	the	_	DT	DT	_	18	det	_	_
17	middle	_	JJ	JJ	_	18	amod	_	_
18	games	_	NNS	NNS	_	15	pobj	_	_
19	.	_	.	.	_	13	punct	_	_

Oracle:
(a2 / and, op, p4 / person)
(a2 / and, op, p5 / person)
(a2 / and, op, p6 / person)
(g / game, mod, m / middle)
(n / name, op, "Liu")
(n / name, op, "Xiaoguang")
(n2 / name, op, "Chang")
(n2 / name, op, "Hao")
(n3 / name, op, "Nie")
(n3 / name, op, "Weiping")
(p4 / person, name, n / name)
(p5 / person, name, n2 / name)
(p6 / person, name, n3 / name)

Input(Some(Graph((win-01 :ARG0 (and :op (person :name (name :op "Nie" :op "Weiping")) :op (person :name (name :op "Chang" :op "Hao")) :op (person :name (name :op "Liu" :op "Xiaoguang"))) :time (game :mod middle) :ARG1-of include-91),ArrayBuffer(Span(6,8,List(0, 1, 2, 3),Xiaoguang Liu,(person :name (name :op "Liu" :op "Xiaoguang")),false), Span(9,11,List(4, 5, 6, 7),Hao Chang,(person :name (name :op "Chang" :op "Hao")),false), Span(3,5,List(8, 9, 10, 11),Weiping Nie,(person :name (name :op "Nie" :op "Weiping")),false), Span(8,9,List(12),and,and,false), Span(17,18,List(13),games,game,false), Span(16,17,List(14),middle,middle,false)),Map(2 -> "Liu", 5 -> name, 12 -> and, 8 -> person, 7 -> "Hao", 1 -> name, 4 -> person, 11 -> "Weiping", 14 -> middle, 6 -> "Chang", 9 -> name, 0 -> person, 10 -> "Nie", 3 -> "Xiaoguang", 13 -> game),Map(n -> name, p5 -> person, m -> middle, g -> game, n3 -> name, p4 -> person, a2 -> and, p6 -> person, n2 -> name))),[Ljava.lang.String;@1b6e1eff,Annotation([Ljava.lang.String;@306f16f3,[Ljava.lang.String;@702b8b12,[Ljava.lang.String;@22e357dc),Annotation([Ljava.lang.String;@49912c99,[Ljava.lang.String;@10163d6,[Ledu.cmu.lti.nlp.amr.Dependency;@2dde1bff),Annotation([Ljava.lang.String;@15bbf42f,[Ljava.lang.String;@550ee7e5,[Ljava.lang.String;@5f9b2141),Annotation([Ljava.lang.String;@247d8ae,[Ljava.lang.String;@48974e45,[Ledu.cmu.lti.nlp.amr.Entity;@6a84a97d))
AMR:
(a2 / and, op, p4 / person)
(a2 / and, op, p5 / person)
(a2 / and, op, p6 / person)
(a2 / and, poss, g / game)
(g / game, mod, m / middle)
(n / name, op, "Liu")
(n / name, op, "Xiaoguang")
(n2 / name, op, "Chang")
(n2 / name, op, "Hao")
(n3 / name, op, "Nie")
(n3 / name, op, "Weiping")
(p4 / person, name, n / name)
(p5 / person, name, n2 / name)
(p6 / person, name, n3 / name)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 68,058 microseconds
Sentence: Dayuan Cao achieved victory with an advantage of seven and a half ' mu ' .

Oracle Span 1:  advantage => advantage
Oracle Span 2:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Oracle Span 3:  mu => mu
NER Entity: (person :name (name :op "Dayuan" :op "Cao"))
Spans:
Span 6-7:  advantage => advantage
Span 0-2:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Span 13-14:  mu => mu

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 6-7:  advantage => advantage
Oracle Span 0-2:  Dayuan Cao => (person :name (name :op "Cao" :op "Dayuan"))
Oracle Span 13-14:  mu => mu

Dependencies:
1	Dayuan	_	NNP	NNP	_	2	nn	_	_
2	Cao	_	NNP	NNP	_	3	nsubj	_	_
3	achieved	_	VBD	VBD	_	0	root	_	_
4	victory	_	NN	NN	_	3	dobj	_	_
5	with	_	IN	IN	_	3	prep	_	_
6	an	_	DT	DT	_	7	det	_	_
7	advantage	_	NN	NN	_	5	pobj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	seven	_	CD	CD	_	8	pobj	_	_
10	and	_	CC	CC	_	7	cc	_	_
11	a	_	DT	DT	_	12	det	_	_
12	half	_	NN	NN	_	14	poss	_	_
13	'	_	POS	POS	_	12	possessive	_	_
14	mu	_	NN	NN	_	7	conj	_	_
15	'	_	''	''	_	3	punct	_	_
16	.	_	.	.	_	3	punct	_	_

Oracle:
(m / mu, consist, a2 / advantage)
(n / name, op, "Cao")
(n / name, op, "Dayuan")
(p2 / person, name, n / name)

Input(Some(Graph((win-01 :ARG0 (person :name (name :op "Cao" :op "Dayuan")) :manner (advantage :consist-of (mu :quant 7.5))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Dayuan Cao,(person :name (name :op "Cao" :op "Dayuan")),false), Span(6,7,List(4),advantage,advantage,false), Span(13,14,List(5),mu,mu,false)),Map(2 -> "Cao", 5 -> mu, 1 -> name, 4 -> advantage, 0 -> person, 3 -> "Dayuan"),Map(n -> name, p2 -> person, m -> mu, a2 -> advantage))),[Ljava.lang.String;@6c130c45,Annotation([Ljava.lang.String;@50ad3bc1,[Ljava.lang.String;@223aa2f7,[Ljava.lang.String;@6d3a388c),Annotation([Ljava.lang.String;@193f604a,[Ljava.lang.String;@20f5239f,[Ledu.cmu.lti.nlp.amr.Dependency;@57af006c),Annotation([Ljava.lang.String;@6bedbc4d,[Ljava.lang.String;@932bc4a,[Ljava.lang.String;@d29f28),Annotation([Ljava.lang.String;@2fd1433e,[Ljava.lang.String;@29d89d5d,[Ledu.cmu.lti.nlp.amr.Entity;@3514a4c0))
AMR:
(m / mu, poss, a2 / advantage)
(m / mu, poss, p2 / person)
(n / name, op, "Cao")
(n / name, op, "Dayuan")
(p2 / person, name, n / name)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 30,593 microseconds
Sentence: Xunxuan Cao ( 9th level ) , Changhao Li ( 7th level ) and Changhe Liu ( 6th level ) from the Korean team defeated Jing Liu ( 5th level ) , Xiaocun Ma ( 9th level ) and Jianhong Wang ( 7th level ) from the Chinese team respectively .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Oracle Span 4:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Oracle Span 5:  Chinese => (country :name (name :op "China"))
Oracle Span 6:  defeated => defeat-01
Oracle Span 7:  Jianhong Wang => (person :name (name :op "Wang" :op "Jianhong"))
Oracle Span 8:  Jing => "Jing"
Oracle Span 9:  Korean => (country :name (name :op "Korea"))
Oracle Span 10:  level => level
Oracle Span 11:  level => level
Oracle Span 12:  level => level
Oracle Span 13:  level => level
Oracle Span 14:  respectively => respective
Oracle Span 15:  team => team
Oracle Span 16:  team => team
Oracle Span 17:  Xiaocun Ma => (person :name (name :op "Ma" :op "Xiaocun"))
Oracle Span 18:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))
NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
NER Entity: (person :name (name :op "Changhao" :op "Li"))
NER Entity: (person :name (name :op "Changhe" :op "Liu"))
NER Entity: (person :name (name :op "Xiaocun" :op "Ma"))
NER Entity: (person :name (name :op "Jianhong" :op "Wang"))
NER Entity: (thing :name (name :op "Korean"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (person :name (name :op "Jing" :op "Liu"))
Spans:
Span 13-14:  and => and
Span 38-39:  and => and
Span 7-9:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Span 14-16:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Span 47-48:  Chinese => (country :name (name :op "China"))
Span 24-25:  defeated => defeat-01
Span 39-41:  Jianhong Wang => (person :name (name :op "Wang" :op "Jianhong"))
Span 25-26:  Jing => "Jing"
Span 22-23:  Korean => (country :name (name :op "Korea"))
Span 4-5:  level => level
Span 11-12:  level => level
Span 18-19:  level => level
Span 29-30:  level => level
Span 49-50:  respectively => respective
Span 23-24:  team => team
Span 48-49:  team => team
Span 32-34:  Xiaocun Ma => (person :name (name :op "Ma" :op "Xiaocun"))
Span 0-2:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Langrangian relaxation converged after 28 iterations. Delta = 0.0
Oracle Span 13-14:  and => and
Oracle Span 38-39:  and => and
Oracle Span 7-9:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Oracle Span 14-16:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Oracle Span 47-48:  Chinese => (country :name (name :op "China"))
Oracle Span 24-25:  defeated => defeat-01
Oracle Span 39-41:  Jianhong Wang => (person :name (name :op "Wang" :op "Jianhong"))
Oracle Span 25-26:  Jing => "Jing"
Oracle Span 22-23:  Korean => (country :name (name :op "Korea"))
Oracle Span 4-5:  level => level
Oracle Span 11-12:  level => level
Oracle Span 18-19:  level => level
Oracle Span 29-30:  level => level
Oracle Span 49-50:  respectively => respective
Oracle Span 23-24:  team => team
Oracle Span 48-49:  team => team
Oracle Span 32-34:  Xiaocun Ma => (person :name (name :op "Ma" :op "Xiaocun"))
Oracle Span 0-2:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Dependencies:
1	Xunxuan	_	NNP	NNP	_	9	nn	_	_
2	Cao	_	NNP	NNP	_	9	nn	_	_
3	(	_	(	(	_	5	punct	_	_
4	9th	_	JJ	JJ	_	5	amod	_	_
5	level	_	NN	NN	_	9	appos	_	_
6	)	_	)	)	_	5	punct	_	_
7	,	_	,	,	_	9	punct	_	_
8	Changhao	_	NNP	NNP	_	9	dep	_	_
9	Li	_	NNP	NNP	_	25	nsubj	_	_
10	(	_	(	(	_	12	punct	_	_
11	7th	_	JJ	JJ	_	12	amod	_	_
12	level	_	NN	NN	_	9	appos	_	_
13	)	_	)	)	_	12	punct	_	_
14	and	_	CC	CC	_	9	cc	_	_
15	Changhe	_	NNP	NNP	_	16	nn	_	_
16	Liu	_	NNP	NNP	_	9	conj	_	_
17	(	_	(	(	_	19	punct	_	_
18	6th	_	JJ	JJ	_	19	amod	_	_
19	level	_	NN	NN	_	16	appos	_	_
20	)	_	)	)	_	19	punct	_	_
21	from	_	IN	IN	_	25	prep	_	_
22	the	_	DT	DT	_	24	det	_	_
23	Korean	_	JJ	JJ	_	24	amod	_	_
24	team	_	NN	NN	_	21	pobj	_	_
25	defeated	_	VBD	VBD	_	0	root	_	_
26	Jing	_	NNP	NNP	_	34	nn	_	_
27	Liu	_	NNP	NNP	_	34	nn	_	_
28	(	_	(	(	_	30	punct	_	_
29	5th	_	JJ	JJ	_	30	amod	_	_
30	level	_	NN	NN	_	34	appos	_	_
31	)	_	)	)	_	30	punct	_	_
32	,	_	,	,	_	34	punct	_	_
33	Xiaocun	_	NNP	NNP	_	34	dep	_	_
34	Ma	_	NNP	NNP	_	25	dep	_	_
35	(	_	(	(	_	37	punct	_	_
36	9th	_	JJ	JJ	_	37	amod	_	_
37	level	_	NN	NN	_	34	appos	_	_
38	)	_	)	)	_	37	punct	_	_
39	and	_	CC	CC	_	34	cc	_	_
40	Jianhong	_	NNP	NNP	_	41	nn	_	_
41	Wang	_	NNP	NNP	_	34	conj	_	_
42	(	_	(	(	_	44	punct	_	_
43	7th	_	JJ	JJ	_	44	amod	_	_
44	level	_	NN	NN	_	41	appos	_	_
45	)	_	)	)	_	44	punct	_	_
46	from	_	IN	IN	_	25	prep	_	_
47	the	_	DT	DT	_	49	det	_	_
48	Chinese	_	JJ	JJ	_	49	amod	_	_
49	team	_	NN	NN	_	46	pobj	_	_
50	respectively	_	RB	RB	_	25	advmod	_	_
51	.	_	.	.	_	25	punct	_	_

Oracle:
(a / and, op, p7 / person)
(a / and, op, p8 / person)
(a / and, op, p9 / person)
(a2 / and, op, p11 / person)
(a2 / and, op, p12 / person)
(c6 / country, name, n4 / name)
(c7 / country, name, n8 / name)
(d / defeat-01, ARG0, a / and)
(d / defeat-01, ARG1, a2 / and)
(d / defeat-01, mod, r / respective)
(n / name, op, "Cao")
(n / name, op, "XunXuan")
(n2 / name, op, "Changhao")
(n2 / name, op, "Li")
(n3 / name, op, "Changhe")
(n3 / name, op, "Liu")
(n4 / name, op, "Korea")
(n6 / name, op, "Ma")
(n6 / name, op, "Xiaocun")
(n7 / name, op, "Jianhong")
(n7 / name, op, "Wang")
(n8 / name, op, "China")
(p11 / person, mod, l / level)
(p11 / person, name, n6 / name)
(p12 / person, mod, l2 / level)
(p12 / person, name, n7 / name)
(p7 / person, mod, l / level)
(p7 / person, name, n / name)
(p8 / person, mod, l2 / level)
(p8 / person, name, n2 / name)
(p9 / person, mod, l3 / level)
(p9 / person, name, n3 / name)
(t / team, mod, c6 / country)
(t / team, part, a / and)
(t2 / team, mod, c7 / country)
(t2 / team, part, a2 / and)

Input(Some(Graph((defeat-01 :mod respective :ARG1 (and :part-of (team :mod (country :name (name :op "China"))) :op (person :name (name :op "Wang" :op "Jianhong") :mod level) :op (person :name (name :op "Ma" :op "Xiaocun") :mod level) :op (person :name (name :op "Jing" :op "Lui") :mod (level :ord (ordinal-entity :value 5)))) :ARG0 (and :part-of (team :mod (country :name (name :op "Korea"))) :op (person :mod (level :ord (ordinal-entity :value 6)) :name (name :op "Liu" :op "Changhe")) :op (person :mod (level :ord (ordinal-entity :value 7)) :name (name :op "Li" :op "Changhao")) :op (person :mod (level :ord (ordinal-entity :value 9)) :name (name :op "Cao" :op "XunXuan")))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Xunxuan Cao,(person :name (name :op "Cao" :op "XunXuan")),false), Span(7,9,List(4, 5, 6, 7),Changhao Li,(person :name (name :op "Li" :op "Changhao")),false), Span(14,16,List(8, 9, 10, 11),Changhe Liu,(person :name (name :op "Liu" :op "Changhe")),false), Span(32,34,List(12, 13, 14, 15),Xiaocun Ma,(person :name (name :op "Ma" :op "Xiaocun")),false), Span(39,41,List(16, 17, 18, 19),Jianhong Wang,(person :name (name :op "Wang" :op "Jianhong")),false), Span(22,23,List(20, 21, 22),Korean,(country :name (name :op "Korea")),false), Span(47,48,List(23, 24, 25),Chinese,(country :name (name :op "China")),false), Span(24,25,List(26),defeated,defeat-01,false), Span(13,14,List(27),and,and,false), Span(23,24,List(28),team,team,false), Span(25,26,List(29),Jing,"Jing",false), Span(4,5,List(30),level,level,false), Span(38,39,List(31),and,and,false), Span(48,49,List(32),team,team,false), Span(11,12,List(33),level,level,false), Span(18,19,List(34),level,level,false), Span(29,30,List(35),level,level,false), Span(49,50,List(36),respectively,respective,false)),Map(30 -> level, 2 -> "Cao", 5 -> name, 33 -> level, 27 -> and, 12 -> person, 15 -> "Xiaocun", 8 -> person, 36 -> respective, 21 -> name, 18 -> "Wang", 24 -> name, 35 -> level, 7 -> "Changhao", 17 -> name, 1 -> name, 23 -> country, 26 -> defeat-01, 4 -> person, 11 -> "Changhe", 32 -> team, 14 -> "Ma", 29 -> "Jing", 20 -> country, 34 -> level, 28 -> team, 6 -> "Li", 9 -> name, 0 -> person, 22 -> "Korea", 16 -> person, 19 -> "Jianhong", 10 -> "Liu", 3 -> "XunXuan", 31 -> and, 25 -> "China", 13 -> name),Map(n -> name, t -> team, J -> "Jing", p8 -> person, c7 -> country, n7 -> name, p12 -> person, l3 -> level, n4 -> name, d -> defeat-01, a -> and, n3 -> name, n6 -> name, p7 -> person, c6 -> country, t2 -> team, p11 -> person, l2 -> level, r -> respective, a2 -> and, l -> level, n8 -> name, p9 -> person, n2 -> name, l4 -> level))),[Ljava.lang.String;@212b5695,Annotation([Ljava.lang.String;@446293d,[Ljava.lang.String;@69997e9d,[Ljava.lang.String;@793be5ca),Annotation([Ljava.lang.String;@2df9b86,[Ljava.lang.String;@37654521,[Ledu.cmu.lti.nlp.amr.Dependency;@15aab8c6),Annotation([Ljava.lang.String;@33990a0c,[Ljava.lang.String;@4de4b452,[Ljava.lang.String;@50b5ac82),Annotation([Ljava.lang.String;@101952da,[Ljava.lang.String;@6babf3bf,[Ledu.cmu.lti.nlp.amr.Entity;@3059cbc))
AMR:
(a / and, op, l / level)
(a / and, op, p11 / person)
(a / and, op, p12 / person)
(a / and, op, p9 / person)
(a2 / and, mod, r / respective)
(a2 / and, op, l2 / level)
(a2 / and, op, l4 / level)
(a2 / and, op, p8 / person)
(a2 / and, op, p9 / person)
(a2 / and, poss, t / team)
(c6 / country, name, n4 / name)
(c7 / country, name, n8 / name)
(d / defeat-01, ARG0, p8 / person)
(d / defeat-01, ARG1, t2 / team)
(d / defeat-01, ARG2, J / "Jing")
(d / defeat-01, ARG6, l3 / level)
(n / name, op, "Cao")
(n / name, op, "XunXuan")
(n2 / name, op, "Changhao")
(n2 / name, op, "Li")
(n3 / name, op, "Changhe")
(n3 / name, op, "Liu")
(n4 / name, op, "Korea")
(n6 / name, op, "Ma")
(n6 / name, op, "Xiaocun")
(n7 / name, op, "Jianhong")
(n7 / name, op, "Wang")
(n8 / name, op, "China")
(p11 / person, name, n6 / name)
(p12 / person, name, n7 / name)
(p7 / person, mod, c6 / country)
(p7 / person, name, n / name)
(p8 / person, name, n2 / name)
(p9 / person, name, n3 / name)
(t / team, mod, c7 / country)
(t2 / team, mod, c6 / country)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.1
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.1
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0.0
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 1,633,107 microseconds
Sentence: Among which , Xunxuan Cao achieved a victory in the middle game .

Oracle Span 1:  game => game
Oracle Span 2:  middle => middle
Oracle Span 3:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))
NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
Spans:
Span 11-12:  game => game
Span 10-11:  middle => middle
Span 3-5:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 11-12:  game => game
Oracle Span 10-11:  middle => middle
Oracle Span 3-5:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Dependencies:
1	Among	_	IN	IN	_	6	prep	_	_
2	which	_	WDT	WDT	_	1	pobj	_	_
3	,	_	,	,	_	6	punct	_	_
4	Xunxuan	_	NNP	NNP	_	5	nn	_	_
5	Cao	_	NNP	NNP	_	6	nsubj	_	_
6	achieved	_	VBD	VBD	_	0	root	_	_
7	a	_	DT	DT	_	8	det	_	_
8	victory	_	NN	NN	_	6	dobj	_	_
9	in	_	IN	IN	_	6	prep	_	_
10	the	_	DT	DT	_	12	det	_	_
11	middle	_	JJ	JJ	_	12	amod	_	_
12	game	_	NN	NN	_	9	pobj	_	_
13	.	_	.	.	_	6	punct	_	_

Oracle:
(g / game, mod, m / middle)
(n / name, op, "Cao")
(n / name, op, "XunXuan")
(p2 / person, name, n / name)

Input(Some(Graph((win-01 :ARG0 (person :name (name :op "Cao" :op "XunXuan")) :time (game :mod middle) :ARG1-of include-91),ArrayBuffer(Span(3,5,List(0, 1, 2, 3),Xunxuan Cao,(person :name (name :op "Cao" :op "XunXuan")),false), Span(11,12,List(4),game,game,false), Span(10,11,List(5),middle,middle,false)),Map(2 -> "Cao", 5 -> middle, 1 -> name, 4 -> game, 0 -> person, 3 -> "XunXuan"),Map(n -> name, p2 -> person, m -> middle, g -> game))),[Ljava.lang.String;@7ea9e1e2,Annotation([Ljava.lang.String;@24fcf36f,[Ljava.lang.String;@10feca44,[Ljava.lang.String;@3fb1549b),Annotation([Ljava.lang.String;@ea6147e,[Ljava.lang.String;@4d02f94e,[Ledu.cmu.lti.nlp.amr.Dependency;@2b48a640),Annotation([Ljava.lang.String;@1e683a3e,[Ljava.lang.String;@2053d869,[Ljava.lang.String;@7a419da4),Annotation([Ljava.lang.String;@14555e0a,[Ljava.lang.String;@4bb33f74,[Ledu.cmu.lti.nlp.amr.Entity;@759d26fb))
AMR:
(g / game, mod, m / middle)
(g / game, poss, p2 / person)
(n / name, op, "Cao")
(n / name, op, "XunXuan")
(p2 / person, name, n / name)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 24,682 microseconds
Sentence: Changhao Li and Changhe Liu achieved victories with advantages of six and a half ' mu ' and seven and a half ' mu ' respectively .

Oracle Span 1:  advantages => advantage
Oracle Span 2:  and => and
Oracle Span 3:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Oracle Span 4:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Oracle Span 5:  mu => mu
Oracle Span 6:  mu => mu
Oracle Span 7:  respectively => respective
NER Entity: (person :name (name :op "Changhao" :op "Li"))
NER Entity: (person :name (name :op "Changhe" :op "Liu"))
Spans:
Span 8-9:  advantages => advantage
Span 2-3:  and => and
Span 0-2:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Span 3-5:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Span 15-16:  mu => mu
Span 23-24:  mu => mu
Span 25-26:  respectively => respective

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 8-9:  advantages => advantage
Oracle Span 2-3:  and => and
Oracle Span 0-2:  Changhao Li => (person :name (name :op "Li" :op "Changhao"))
Oracle Span 3-5:  Changhe Liu => (person :name (name :op "Liu" :op "Changhe"))
Oracle Span 15-16:  mu => mu
Oracle Span 23-24:  mu => mu
Oracle Span 25-26:  respectively => respective

Dependencies:
1	Changhao	_	NNP	NNP	_	2	nn	_	_
2	Li	_	NNP	NNP	_	6	nsubj	_	_
3	and	_	CC	CC	_	2	cc	_	_
4	Changhe	_	NNP	NNP	_	5	nn	_	_
5	Liu	_	NNP	NNP	_	2	conj	_	_
6	achieved	_	VBD	VBD	_	0	root	_	_
7	victories	_	NNS	NNS	_	6	dobj	_	_
8	with	_	IN	IN	_	7	prep	_	_
9	advantages	_	NNS	NNS	_	8	pobj	_	_
10	of	_	IN	IN	_	9	prep	_	_
11	six	_	CD	CD	_	10	pobj	_	_
12	and	_	CC	CC	_	11	cc	_	_
13	a	_	DT	DT	_	14	det	_	_
14	half	_	NN	NN	_	16	poss	_	_
15	'	_	POS	POS	_	14	possessive	_	_
16	mu	_	NN	NN	_	11	conj	_	_
17	'	_	''	''	_	11	punct	_	_
18	and	_	CC	CC	_	11	cc	_	_
19	seven	_	CD	CD	_	11	conj	_	_
20	and	_	CC	CC	_	9	cc	_	_
21	a	_	DT	DT	_	22	det	_	_
22	half	_	NN	NN	_	24	poss	_	_
23	'	_	POS	POS	_	22	possessive	_	_
24	mu	_	NN	NN	_	9	conj	_	_
25	'	_	''	''	_	7	punct	_	_
26	respectively	_	RB	RB	_	6	advmod	_	_
27	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, mod, r / respective)
(m2 / mu, consist, a5 / advantage)
(n / name, op, "Changhao")
(n / name, op, "Li")
(n2 / name, op, "Changhe")
(n2 / name, op, "Liu")
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)

Input(Some(Graph((and :mod respective :op (win-01 :ARG0 (person :name (name :op "Liu" :op "Changhe")) :manner (advantage :consist-of (mu :quant 7.5))) :op (win-01 :ARG0 (person :name (name :op "Li" :op "Changhao")) :manner (advantage :consist-of (mu :quant 6.5)))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Changhao Li,(person :name (name :op "Li" :op "Changhao")),false), Span(3,5,List(4, 5, 6, 7),Changhe Liu,(person :name (name :op "Liu" :op "Changhe")),false), Span(2,3,List(8),and,and,false), Span(8,9,List(9),advantages,advantage,false), Span(15,16,List(10),mu,mu,false), Span(23,24,List(11),mu,mu,false), Span(25,26,List(12),respectively,respective,false)),Map(2 -> "Li", 5 -> name, 12 -> respective, 8 -> and, 7 -> "Changhe", 1 -> name, 4 -> person, 11 -> mu, 6 -> "Liu", 9 -> advantage, 0 -> person, 10 -> mu, 3 -> "Changhao"),Map(n -> name, m2 -> mu, m -> mu, a -> and, p4 -> person, a5 -> advantage, r -> respective, n2 -> name, p3 -> person))),[Ljava.lang.String;@3c73951,Annotation([Ljava.lang.String;@3d5c822d,[Ljava.lang.String;@6f46426d,[Ljava.lang.String;@73700b80),Annotation([Ljava.lang.String;@49c7b90e,[Ljava.lang.String;@10d307f1,[Ledu.cmu.lti.nlp.amr.Dependency;@4d5b6aac),Annotation([Ljava.lang.String;@3e84448c,[Ljava.lang.String;@4a7f959b,[Ljava.lang.String;@429bffaa),Annotation([Ljava.lang.String;@5403f35f,[Ljava.lang.String;@483f6d77,[Ledu.cmu.lti.nlp.amr.Entity;@7e5afaa6))
AMR:
(a / and, mod, m2 / mu)
(a / and, mod, r / respective)
(a / and, op, p3 / person)
(a / and, op, p4 / person)
(a5 / advantage, mod, m / mu)
(m / mu, mod, a / and)
(n / name, op, "Changhao")
(n / name, op, "Li")
(n2 / name, op, "Changhe")
(n2 / name, op, "Liu")
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 89,935 microseconds
Sentence: When receiving reporters telephone interviews , Runan Wang , leader of the Chinese delegation presented that , overall speaking , the strength of the Korean team was stronger than the Chinese team .

Oracle Span 1:  Chinese => (country :name (name :op "China"))
Oracle Span 2:  delegation => delegation
Oracle Span 3:  interviews => interview-01
Oracle Span 4:  Korean => (country :name (name :op "Korea"))
Oracle Span 5:  leader => lead-02
Oracle Span 6:  overall => overall
Oracle Span 7:  presented => present-00
Oracle Span 8:  receiving => receive-01
Oracle Span 9:  reporters => (person :ARG0-of report-01)
Oracle Span 10:  Runan Wang => (person :name (name :op "Wang" :op "Runan"))
Oracle Span 11:  speaking => speak-01
Oracle Span 12:  strength => strength
Oracle Span 13:  stronger => strong
Oracle Span 14:  team => team
Oracle Span 15:  team => team
Oracle Span 16:  telephone => telephone
NER Entity: (person :name (name :op "Runan" :op "Wang"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 12-13:  Chinese => (country :name (name :op "China"))
Span 13-14:  delegation => delegation
Span 4-5:  interviews => interview-01
Span 24-25:  Korean => (country :name (name :op "Korea"))
Span 9-10:  leader => lead-02
Span 17-18:  overall => overall
Span 14-15:  presented => present-00
Span 1-2:  receiving => receive-01
Span 2-3:  reporters => (person :ARG0-of report-01)
Span 6-8:  Runan Wang => (person :name (name :op "Wang" :op "Runan"))
Span 18-19:  speaking => speak-01
Span 21-22:  strength => strength
Span 27-28:  stronger => strong
Span 25-26:  team => team
Span 31-32:  team => team
Span 3-4:  telephone => telephone

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 12-13:  Chinese => (country :name (name :op "China"))
Oracle Span 13-14:  delegation => delegation
Oracle Span 4-5:  interviews => interview-01
Oracle Span 24-25:  Korean => (country :name (name :op "Korea"))
Oracle Span 9-10:  leader => lead-02
Oracle Span 17-18:  overall => overall
Oracle Span 14-15:  presented => present-00
Oracle Span 1-2:  receiving => receive-01
Oracle Span 2-3:  reporters => (person :ARG0-of report-01)
Oracle Span 6-8:  Runan Wang => (person :name (name :op "Wang" :op "Runan"))
Oracle Span 18-19:  speaking => speak-01
Oracle Span 21-22:  strength => strength
Oracle Span 27-28:  stronger => strong
Oracle Span 25-26:  team => team
Oracle Span 31-32:  team => team
Oracle Span 3-4:  telephone => telephone

Dependencies:
1	When	_	WRB	WRB	_	2	advmod	_	_
2	receiving	_	VBG	VBG	_	15	advcl	_	_
3	reporters	_	NNS	NNS	_	5	nn	_	_
4	telephone	_	NN	NN	_	5	nn	_	_
5	interviews	_	NNS	NNS	_	2	dobj	_	_
6	,	_	,	,	_	5	punct	_	_
7	Runan	_	NNP	NNP	_	8	nn	_	_
8	Wang	_	NNP	NNP	_	5	appos	_	_
9	,	_	,	,	_	15	punct	_	_
10	leader	_	NN	NN	_	15	nsubj	_	_
11	of	_	IN	IN	_	10	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	Chinese	_	JJ	JJ	_	14	amod	_	_
14	delegation	_	NN	NN	_	11	pobj	_	_
15	presented	_	VBD	VBD	_	0	root	_	_
16	that	_	IN	IN	_	28	mark	_	_
17	,	_	,	,	_	28	punct	_	_
18	overall	_	JJ	JJ	_	19	amod	_	_
19	speaking	_	NN	NN	_	28	nsubj	_	_
20	,	_	,	,	_	19	punct	_	_
21	the	_	DT	DT	_	22	det	_	_
22	strength	_	NN	NN	_	19	appos	_	_
23	of	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	26	det	_	_
25	Korean	_	JJ	JJ	_	26	amod	_	_
26	team	_	NN	NN	_	23	pobj	_	_
27	was	_	VBD	VBD	_	28	cop	_	_
28	stronger	_	JJR	JJR	_	15	ccomp	_	_
29	than	_	IN	IN	_	28	prep	_	_
30	the	_	DT	DT	_	32	det	_	_
31	Chinese	_	JJ	JJ	_	32	amod	_	_
32	team	_	NN	NN	_	29	pobj	_	_
33	.	_	.	.	_	15	punct	_	_

Oracle:
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(d / delegation, source, c4 / country)
(i / interview-01, ARG0, p3 / person)
(i / interview-01, instrument, t4 / telephone)
(l / lead-02, ARG0, p2 / person)
(l / lead-02, ARG1, d / delegation)
(n / name, op, "Runan")
(n / name, op, "Wang")
(n2 / name, op, "China")
(n3 / name, op, "Korea")
(p / present-00, ARG0, p2 / person)
(p / present-00, ARG1, s3 / strong)
(p / present-00, time, r2 / receive-01)
(p2 / person, name, n / name)
(r2 / receive-01, ARG0, p2 / person)
(r2 / receive-01, ARG1, i / interview-01)
(r2 / receive-01, ARG2, p3 / person)
(r3 / report-01, ARG0, p3 / person)
(s2 / strength, poss, t / team)
(s3 / strong, condition, s5 / speak-01)
(s3 / strong, domain, s2 / strength)
(s5 / speak-01, manner, o / overall)
(t / team, mod, c5 / country)
(t2 / team, mod, c4 / country)

Input(Some(Graph((present-00 :time (receive-01 :ARG2 (person :ARG0-of report-01) :ARG1 (interview-01 :instrument telephone :ARG0 person) :ARG0 person) :ARG1 (strong :condition (speak-01 :manner overall) :domain (strength :poss (team :mod (country :name (name :op "Korea")))) :compared-to (strength :poss (team :mod country)) :degree more) :ARG0 (person :ARG0-of (lead-02 :ARG1 (delegation :source (country :name (name :op "China")))) :name (name :op "Wang" :op "Runan"))),ArrayBuffer(Span(6,8,List(0, 1, 2, 3),Runan Wang,(person :name (name :op "Wang" :op "Runan")),false), Span(12,13,List(4, 5, 6),Chinese,(country :name (name :op "China")),false), Span(24,25,List(7, 8, 9),Korean,(country :name (name :op "Korea")),false), Span(14,15,List(10),presented,present-00,false), Span(1,2,List(11),receiving,receive-01,false), Span(2,3,List(12, 13),reporters,(person :ARG0-of report-01),false), Span(4,5,List(14),interviews,interview-01,false), Span(3,4,List(15),telephone,telephone,false), Span(27,28,List(16),stronger,strong,false), Span(18,19,List(17),speaking,speak-01,false), Span(17,18,List(18),overall,overall,false), Span(21,22,List(19),strength,strength,false), Span(25,26,List(20),team,team,false), Span(31,32,List(21),team,team,false), Span(9,10,List(22),leader,lead-02,false), Span(13,14,List(23),delegation,delegation,false)),Map(2 -> "Wang", 5 -> name, 12 -> person, 15 -> telephone, 8 -> name, 21 -> team, 18 -> overall, 7 -> country, 17 -> speak-01, 1 -> name, 23 -> delegation, 4 -> country, 11 -> receive-01, 14 -> interview-01, 20 -> team, 6 -> "China", 9 -> "Korea", 0 -> person, 22 -> lead-02, 16 -> strong, 19 -> strength, 10 -> present-00, 3 -> "Runan", 13 -> report-01),Map(s5 -> speak-01, n -> name, t4 -> telephone, r3 -> report-01, s2 -> strength, t -> team, p2 -> person, c4 -> country, d -> delegation, r2 -> receive-01, p -> present-00, n3 -> name, t2 -> team, i -> interview-01, s3 -> strong, l -> lead-02, o -> overall, p3 -> person, n2 -> name, c5 -> country))),[Ljava.lang.String;@63a12c68,Annotation([Ljava.lang.String;@28f3b248,[Ljava.lang.String;@1b1426f4,[Ljava.lang.String;@32b260fa),Annotation([Ljava.lang.String;@581ac8a8,[Ljava.lang.String;@6d4e5011,[Ledu.cmu.lti.nlp.amr.Dependency;@57d7f8ca),Annotation([Ljava.lang.String;@76c3e77a,[Ljava.lang.String;@78123e82,[Ljava.lang.String;@67c33749),Annotation([Ljava.lang.String;@fba92d3,[Ljava.lang.String;@662b4c69,[Ledu.cmu.lti.nlp.amr.Entity;@fa49800))
AMR:
(c4 / country, name, n2 / name)
(c5 / country, name, n3 / name)
(d / delegation, mod, c4 / country)
(i / interview-01, ARG0, p2 / person)
(i / interview-01, ARG1, t4 / telephone)
(l / lead-02, ARG0, c5 / country)
(l / lead-02, ARG1, d / delegation)
(n / name, op, "Runan")
(n / name, op, "Wang")
(n2 / name, op, "China")
(n3 / name, op, "Korea")
(p / present-00, ARG1, l / lead-02)
(p / present-00, purpose, r2 / receive-01)
(p2 / person, name, n / name)
(r2 / receive-01, ARG1, p3 / person)
(r3 / report-01, ARG0, p3 / person)
(r3 / report-01, ARG1, t2 / team)
(s3 / strong, domain, s5 / speak-01)
(s5 / speak-01, ARG1, p / present-00)
(s5 / speak-01, ARG6, s2 / strength)
(s5 / speak-01, mod, o / overall)
(t / team, mod, c5 / country)
(t4 / telephone, mod, p3 / person)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
Decoded in 1,545,806 microseconds
Sentence: However , the Chinese team performed better today , and therefore achieved victory .

Oracle Span 1:  better => good
Oracle Span 2:  Chinese => (country :name (name :op "China"))
Oracle Span 3:  performed => perform-01
Oracle Span 4:  team => team
Oracle Span 5:  today => today
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 6-7:  better => good
Span 3-4:  Chinese => (country :name (name :op "China"))
Span 5-6:  performed => perform-01
Span 4-5:  team => team
Span 7-8:  today => today

Langrangian relaxation converged after 6 iterations. Delta = 0.0
Oracle Span 6-7:  better => good
Oracle Span 3-4:  Chinese => (country :name (name :op "China"))
Oracle Span 5-6:  performed => perform-01
Oracle Span 4-5:  team => team
Oracle Span 7-8:  today => today

Dependencies:
1	However	_	RB	RB	_	6	advmod	_	_
2	,	_	,	,	_	6	punct	_	_
3	the	_	DT	DT	_	5	det	_	_
4	Chinese	_	JJ	JJ	_	5	amod	_	_
5	team	_	NN	NN	_	6	nsubj	_	_
6	performed	_	VBD	VBD	_	0	root	_	_
7	better	_	RBR	RBR	_	6	advmod	_	_
8	today	_	NN	NN	_	6	tmod	_	_
9	,	_	,	,	_	6	punct	_	_
10	and	_	CC	CC	_	6	cc	_	_
11	therefore	_	RB	RB	_	12	advmod	_	_
12	achieved	_	VBD	VBD	_	6	conj	_	_
13	victory	_	NN	NN	_	12	dobj	_	_
14	.	_	.	.	_	6	punct	_	_

Oracle:
(c3 / country, name, n / name)
(n / name, op, "China")
(p / perform-01, ARG0, t / team)
(p / perform-01, manner, g2 / good)
(p / perform-01, time, t2 / today)
(t / team, mod, c3 / country)

Input(Some(Graph((contrast-01 :ARG2 (perform-01 :time today :ARG0-of (cause-01 :ARG1 (win-01 :ARG0 team)) :manner (good :degree more) :ARG0 (team :mod (country :name (name :op "China"))))),ArrayBuffer(Span(3,4,List(0, 1, 2),Chinese,(country :name (name :op "China")),false), Span(5,6,List(3),performed,perform-01,false), Span(7,8,List(4),today,today,false), Span(6,7,List(5),better,good,false), Span(4,5,List(6),team,team,false)),Map(2 -> "China", 5 -> good, 1 -> name, 4 -> today, 6 -> team, 0 -> country, 3 -> perform-01),Map(n -> name, t -> team, g2 -> good, p -> perform-01, c3 -> country, t2 -> today))),[Ljava.lang.String;@71238fc2,Annotation([Ljava.lang.String;@2a54a73f,[Ljava.lang.String;@16a0ee18,[Ljava.lang.String;@3d6f0054),Annotation([Ljava.lang.String;@505fc5a4,[Ljava.lang.String;@5fbdfdcf,[Ledu.cmu.lti.nlp.amr.Dependency;@4efc180e),Annotation([Ljava.lang.String;@bd4dc25,[Ljava.lang.String;@25084a1e,[Ljava.lang.String;@156b88f5),Annotation([Ljava.lang.String;@3bf9ce3e,[Ljava.lang.String;@16610890,[Ledu.cmu.lti.nlp.amr.Entity;@71def8f8))
AMR:
(c3 / country, name, n / name)
(n / name, op, "China")
(p / perform-01, ARG0, t / team)
(p / perform-01, ARG1, g2 / good)
(p / perform-01, time, t2 / today)
(t / team, mod, c3 / country)

WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 53,371 microseconds
Sentence: The performance of our young competitor , Hao Chang , was especially outstanding today , defeating Fengzhu Xu of the Korean team in the middle game .

Oracle Span 1:  competitor => compete-01
Oracle Span 2:  defeating => defeat-01
Oracle Span 3:  especially => especially
Oracle Span 4:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 5:  game => game
Oracle Span 6:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 7:  Korean => (country :name (name :op "Korea"))
Oracle Span 8:  middle => middle
Oracle Span 9:  performance => perform-01
Oracle Span 10:  team => team
Oracle Span 11:  today => today
Oracle Span 12:  young => young
NER Entity: (person :name (name :op "Hao" :op "Chang"))
NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 5-6:  competitor => compete-01
Span 15-16:  defeating => defeat-01
Span 11-12:  especially => especially
Span 16-18:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Span 25-26:  game => game
Span 7-9:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Span 20-21:  Korean => (country :name (name :op "Korea"))
Span 24-25:  middle => middle
Span 1-2:  performance => perform-01
Span 21-22:  team => team
Span 13-14:  today => today
Span 4-5:  young => young

Langrangian relaxation converged after 38 iterations. Delta = 0.0
Oracle Span 5-6:  competitor => compete-01
Oracle Span 15-16:  defeating => defeat-01
Oracle Span 11-12:  especially => especially
Oracle Span 16-18:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 25-26:  game => game
Oracle Span 7-9:  Hao Chang => (person :name (name :op "Chang" :op "Hao"))
Oracle Span 20-21:  Korean => (country :name (name :op "Korea"))
Oracle Span 24-25:  middle => middle
Oracle Span 1-2:  performance => perform-01
Oracle Span 21-22:  team => team
Oracle Span 13-14:  today => today
Oracle Span 4-5:  young => young

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	performance	_	NN	NN	_	13	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	our	_	PRP$	PRP$	_	6	poss	_	_
5	young	_	JJ	JJ	_	6	amod	_	_
6	competitor	_	NN	NN	_	3	pobj	_	_
7	,	_	,	,	_	6	punct	_	_
8	Hao	_	NNP	NNP	_	9	nn	_	_
9	Chang	_	NNP	NNP	_	6	appos	_	_
10	,	_	,	,	_	6	punct	_	_
11	was	_	VBD	VBD	_	13	cop	_	_
12	especially	_	RB	RB	_	13	advmod	_	_
13	outstanding	_	JJ	JJ	_	0	root	_	_
14	today	_	NN	NN	_	13	tmod	_	_
15	,	_	,	,	_	13	punct	_	_
16	defeating	_	VBG	VBG	_	13	vmod	_	_
17	Fengzhu	_	NNP	NNP	_	18	nn	_	_
18	Xu	_	NNP	NNP	_	16	dobj	_	_
19	of	_	IN	IN	_	18	prep	_	_
20	the	_	DT	DT	_	22	det	_	_
21	Korean	_	JJ	JJ	_	22	amod	_	_
22	team	_	NN	NN	_	19	pobj	_	_
23	in	_	IN	IN	_	22	prep	_	_
24	the	_	DT	DT	_	26	det	_	_
25	middle	_	JJ	JJ	_	26	amod	_	_
26	game	_	NN	NN	_	23	pobj	_	_
27	.	_	.	.	_	13	punct	_	_

Oracle:
(c2 / compete-01, ARG0, p3 / person)
(c3 / country, name, n3 / name)
(d / defeat-01, ARG0, p3 / person)
(d / defeat-01, ARG1, p5 / person)
(d / defeat-01, time, g / game)
(g / game, mod, m / middle)
(n / name, op, "Chang")
(n / name, op, "Hao")
(n2 / name, op, "Fengzhu")
(n2 / name, op, "Xu")
(n3 / name, op, "Korea")
(p3 / person, mod, y / young)
(p3 / person, name, n / name)
(p4 / perform-01, ARG0, p3 / person)
(p5 / person, name, n2 / name)
(t / team, mod, c3 / country)
(t / team, part, p5 / person)

Input(Some(Graph((stand-06 :ARG1 (perform-01 :ARG0 (person :poss we :ARG0-of (defeat-01 :time (game :mod middle) :ARG1 (person :part-of (team :mod (country :name (name :op "Korea"))) :name (name :op "Xu" :op "Fengzhu"))) :mod young :ARG0-of compete-01 :name (name :op "Chang" :op "Hao"))) :time today :degree especially),ArrayBuffer(Span(7,9,List(0, 1, 2, 3),Hao Chang,(person :name (name :op "Chang" :op "Hao")),false), Span(16,18,List(4, 5, 6, 7),Fengzhu Xu,(person :name (name :op "Xu" :op "Fengzhu")),false), Span(20,21,List(8, 9, 10),Korean,(country :name (name :op "Korea")),false), Span(4,5,List(11),young,young,false), Span(15,16,List(12),defeating,defeat-01,false), Span(25,26,List(13),game,game,false), Span(24,25,List(14),middle,middle,false), Span(21,22,List(15),team,team,false), Span(13,14,List(16),today,today,false), Span(11,12,List(17),especially,especially,false), Span(1,2,List(18),performance,perform-01,false), Span(5,6,List(19),competitor,compete-01,false)),Map(2 -> "Chang", 5 -> name, 12 -> defeat-01, 15 -> team, 8 -> country, 18 -> perform-01, 7 -> "Fengzhu", 17 -> especially, 1 -> name, 4 -> person, 11 -> young, 14 -> middle, 6 -> "Xu", 9 -> name, 0 -> person, 16 -> today, 19 -> compete-01, 10 -> "Korea", 3 -> "Hao", 13 -> game),Map(e -> especially, n -> name, p5 -> person, t -> team, m -> middle, d -> defeat-01, g -> game, y -> young, n3 -> name, c3 -> country, p4 -> perform-01, t2 -> today, p3 -> person, c2 -> compete-01, n2 -> name))),[Ljava.lang.String;@383bfa16,Annotation([Ljava.lang.String;@4d465b11,[Ljava.lang.String;@53fdffa1,[Ljava.lang.String;@5562c41e),Annotation([Ljava.lang.String;@32ee6fee,[Ljava.lang.String;@4d0f2471,[Ledu.cmu.lti.nlp.amr.Dependency;@7133da86),Annotation([Ljava.lang.String;@3232a28a,[Ljava.lang.String;@73e22a3d,[Ljava.lang.String;@47faa49c),Annotation([Ljava.lang.String;@28f2a10f,[Ljava.lang.String;@f736069,[Ledu.cmu.lti.nlp.amr.Entity;@6da21078))
AMR:
(c2 / compete-01, ARG1, m / middle)
(c2 / compete-01, location, p3 / person)
(c2 / compete-01, mod, y / young)
(c3 / country, name, n3 / name)
(d / defeat-01, ARG0, p4 / perform-01)
(d / defeat-01, ARG1, p5 / person)
(d / defeat-01, ARG2, t / team)
(d / defeat-01, ARG6, t2 / today)
(g / game, mod, m / middle)
(n / name, op, "Chang")
(n / name, op, "Hao")
(n2 / name, op, "Fengzhu")
(n2 / name, op, "Xu")
(n3 / name, op, "Korea")
(p3 / person, name, n / name)
(p4 / perform-01, ARG1, c2 / compete-01)
(p5 / person, name, n2 / name)
(t / team, mod, c3 / country)
(t2 / today, calendar, e / especially)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3.0
WARNING: makeIds can't find span Id: 0.0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.0.3.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.3.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.3.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.3.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.3.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.3.1
WARNING: makeIds can't find span Id: 0.0.0.3.1.0
WARNING: makeIds can't find span Id: 0.0.0.3.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0.1
Decoded in 764,135 microseconds
Sentence: Fengzhu Xu has won many championships in international competitions before .

Oracle Span 1:  before => before
Oracle Span 2:  championships => championship
Oracle Span 3:  competitions => compete-01
Oracle Span 4:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 5:  international => international
Oracle Span 6:  many => many
Oracle Span 7:  won => win-01
NER Entity: (person :name (name :op "Fengzhu" :op "Xu"))
Spans:
Span 9-10:  before => before
Span 5-6:  championships => championship
Span 8-9:  competitions => compete-01
Span 0-2:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Span 7-8:  international => international
Span 4-5:  many => many
Span 3-4:  won => win-01

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 9-10:  before => before
Oracle Span 5-6:  championships => championship
Oracle Span 8-9:  competitions => compete-01
Oracle Span 0-2:  Fengzhu Xu => (person :name (name :op "Xu" :op "Fengzhu"))
Oracle Span 7-8:  international => international
Oracle Span 4-5:  many => many
Oracle Span 3-4:  won => win-01

Dependencies:
1	Fengzhu	_	NNP	NNP	_	2	nn	_	_
2	Xu	_	NNP	NNP	_	4	nsubj	_	_
3	has	_	VBZ	VBZ	_	4	aux	_	_
4	won	_	VBN	VBN	_	0	root	_	_
5	many	_	JJ	JJ	_	6	amod	_	_
6	championships	_	NNS	NNS	_	4	dobj	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	international	_	JJ	JJ	_	9	amod	_	_
9	competitions	_	NNS	NNS	_	7	pobj	_	_
10	before	_	RB	RB	_	4	advmod	_	_
11	.	_	.	.	_	4	punct	_	_

Oracle:
(c / championship, quant, m / many)
(c2 / compete-01, mod, i / international)
(c2 / compete-01, part, w / win-01)
(n / name, op, "Fengzhu")
(n / name, op, "Xu")
(p2 / person, name, n / name)
(w / win-01, ARG0, p2 / person)
(w / win-01, ARG1, c / championship)
(w / win-01, time, b / before)

Input(Some(Graph((win-01 :part-of (compete-01 :mod international) :time before :ARG1 (championship :quant many) :ARG0 (person :name (name :op "Xu" :op "Fengzhu"))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Fengzhu Xu,(person :name (name :op "Xu" :op "Fengzhu")),false), Span(3,4,List(4),won,win-01,false), Span(7,8,List(5),international,international,false), Span(9,10,List(6),before,before,false), Span(5,6,List(7),championships,championship,false), Span(4,5,List(8),many,many,false), Span(8,9,List(9),competitions,compete-01,false)),Map(2 -> "Xu", 5 -> international, 8 -> many, 7 -> championship, 1 -> name, 4 -> win-01, 6 -> before, 9 -> compete-01, 0 -> person, 3 -> "Fengzhu"),Map(w -> win-01, n -> name, b -> before, p2 -> person, m -> many, i -> international, c -> championship, c2 -> compete-01))),[Ljava.lang.String;@7fee8714,Annotation([Ljava.lang.String;@4229bb3f,[Ljava.lang.String;@56cdfb3b,[Ljava.lang.String;@2b91004a),Annotation([Ljava.lang.String;@20ccf40b,[Ljava.lang.String;@2fb3536e,[Ledu.cmu.lti.nlp.amr.Dependency;@169e6180),Annotation([Ljava.lang.String;@35aea049,[Ljava.lang.String;@7205765b,[Ljava.lang.String;@47987356),Annotation([Ljava.lang.String;@22ef9844,[Ljava.lang.String;@6283d8b8,[Ledu.cmu.lti.nlp.amr.Entity;@3b6ddd1d))
AMR:
(c / championship, quant, m / many)
(c2 / compete-01, ARG1, p2 / person)
(c2 / compete-01, ARG6, b / before)
(c2 / compete-01, mod, i / international)
(n / name, op, "Fengzhu")
(n / name, op, "Xu")
(p2 / person, name, n / name)
(w / win-01, ARG0, p2 / person)
(w / win-01, ARG1, c / championship)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.3
Decoded in 203,439 microseconds
Sentence: He had achieved complete victory in nine games with Chinese Go players before .

Oracle Span 1:  before => before
Oracle Span 2:  Chinese => (country :name (name :op "China"))
Oracle Span 3:  complete => complete
Oracle Span 4:  games => game
Oracle Span 5:  Go => (game :name (name :op "Go"))
Oracle Span 6:  He => he
Oracle Span 7:  nine => 9
Oracle Span 8:  players => play-01
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 12-13:  before => before
Span 9-10:  Chinese => (country :name (name :op "China"))
Span 3-4:  complete => complete
Span 7-8:  games => game
Span 10-11:  Go => (game :name (name :op "Go"))
Span 0-1:  He => he
Span 6-7:  nine => 9
Span 11-12:  players => play-01

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 12-13:  before => before
Oracle Span 9-10:  Chinese => (country :name (name :op "China"))
Oracle Span 3-4:  complete => complete
Oracle Span 7-8:  games => game
Oracle Span 10-11:  Go => (game :name (name :op "Go"))
Oracle Span 0-1:  He => he
Oracle Span 6-7:  nine => 9
Oracle Span 11-12:  players => play-01

Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	had	_	VBD	VBD	_	3	aux	_	_
3	achieved	_	VBN	VBN	_	0	root	_	_
4	complete	_	JJ	JJ	_	5	amod	_	_
5	victory	_	NN	NN	_	3	dobj	_	_
6	in	_	IN	IN	_	3	prep	_	_
7	nine	_	CD	CD	_	8	num	_	_
8	games	_	NNS	NNS	_	6	pobj	_	_
9	with	_	IN	IN	_	3	prep	_	_
10	Chinese	_	JJ	JJ	_	12	amod	_	_
11	Go	_	NNP	NNP	_	12	nn	_	_
12	players	_	NNS	NNS	_	9	pobj	_	_
13	before	_	RB	RB	_	3	advmod	_	_
14	.	_	.	.	_	3	punct	_	_

Oracle:
(c4 / country, name, n / name)
(g / game, quant, 9 / 9)
(g2 / game, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Go")
(p / play-01, ARG1, g / game)

Input(Some(Graph((win-01 :ARG0 he :ARG1 (game :ARG1-of (play-01 :ARG0 (and :op (person :mod (country :name (name :op "China")) :ARG0-of (play-01 :ARG1 (game :name (name :op "Go")))) :op he)) :quant 9) :degree complete :time before),ArrayBuffer(Span(10,11,List(0, 1, 2),Go,(game :name (name :op "Go")),false), Span(9,10,List(3, 4, 5),Chinese,(country :name (name :op "China")),false), Span(0,1,List(6),He,he,false), Span(7,8,List(7),games,game,false), Span(11,12,List(8),players,play-01,false), Span(6,7,List(9),nine,9,false), Span(3,4,List(10),complete,complete,false), Span(12,13,List(11),before,before,false)),Map(2 -> "Go", 5 -> "China", 8 -> play-01, 7 -> game, 1 -> name, 4 -> name, 11 -> before, 6 -> he, 9 -> 9, 0 -> game, 10 -> complete, 3 -> country),Map(n -> name, h -> he, b -> before, c4 -> country, g2 -> game, p -> play-01, g -> game, c -> complete, 9 -> 9, n2 -> name))),[Ljava.lang.String;@3f6b0be5,Annotation([Ljava.lang.String;@611889f4,[Ljava.lang.String;@1da2cb77,[Ljava.lang.String;@48f278eb),Annotation([Ljava.lang.String;@2f217633,[Ljava.lang.String;@a530d0a,[Ledu.cmu.lti.nlp.amr.Dependency;@1a18644),Annotation([Ljava.lang.String;@5acf93bb,[Ljava.lang.String;@7e7be63f,[Ljava.lang.String;@6cd28fa7),Annotation([Ljava.lang.String;@614ca7df,[Ljava.lang.String;@4738a206,[Ledu.cmu.lti.nlp.amr.Entity;@66d3eec0))
AMR:
(b / before, domain, h / he)
(c4 / country, name, n / name)
(g / game, mod, c / complete)
(g / game, mod, g2 / game)
(g / game, quant, 9 / 9)
(g2 / game, mod, c4 / country)
(g2 / game, name, n2 / name)
(n / name, op, "China")
(n2 / name, op, "Go")
(p / play-01, ARG0, g2 / game)
(p / play-01, ARG1, h / he)

WARNING: makeIds can't find span Id: 0.1.1.0.0.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.3
Decoded in 221,260 microseconds
Sentence: The Go teams from China and Korea will shift to Seoul on September 1st , and will hold the second competition in the Le Tian Hotel on the 2nd .

Oracle Span 1:  and => and
Oracle Span 2:  and => and
Oracle Span 3:  China => (country :name (name :op "China"))
Oracle Span 4:  competition => compete-01
Oracle Span 5:  Go => (game :name (name :op "Go"))
Oracle Span 6:  Korea => (country :name (name :op "Korea"))
Oracle Span 7:  Le Tian Hotel => (hotel :name (name :op "Hotel" :op "Tian" :op "Le"))
Oracle Span 8:  Seoul => (city :name (name :op "Seoul"))
Oracle Span 9:  September => 9
Oracle Span 10:  shift => shift-01
Oracle Span 11:  teams => team
NER Entity: (country :name (name :op "China"))
NER Entity: (country :name (name :op "Korea"))
NER Entity: (country :name (name :op "Seoul"))
NER Entity: (organization :name (name :op "Le" :op "Tian" :op "Hotel"))
Spans:
Span 5-6:  and => and
Span 15-16:  and => and
Span 4-5:  China => (country :name (name :op "China"))
Span 20-21:  competition => compete-01
Span 1-2:  Go => (game :name (name :op "Go"))
Span 6-7:  Korea => (country :name (name :op "Korea"))
Span 23-26:  Le Tian Hotel => (hotel :name (name :op "Hotel" :op "Tian" :op "Le"))
Span 10-11:  Seoul => (city :name (name :op "Seoul"))
Span 12-13:  September => 9
Span 8-9:  shift => shift-01
Span 2-3:  teams => team

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 5-6:  and => and
Oracle Span 15-16:  and => and
Oracle Span 4-5:  China => (country :name (name :op "China"))
Oracle Span 20-21:  competition => compete-01
Oracle Span 1-2:  Go => (game :name (name :op "Go"))
Oracle Span 6-7:  Korea => (country :name (name :op "Korea"))
Oracle Span 23-26:  Le Tian Hotel => (hotel :name (name :op "Hotel" :op "Tian" :op "Le"))
Oracle Span 10-11:  Seoul => (city :name (name :op "Seoul"))
Oracle Span 12-13:  September => 9
Oracle Span 8-9:  shift => shift-01
Oracle Span 2-3:  teams => team

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	Go	_	NNP	NNP	_	3	nn	_	_
3	teams	_	NNS	NNS	_	9	nsubj	_	_
4	from	_	IN	IN	_	3	prep	_	_
5	China	_	NNP	NNP	_	4	pobj	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	Korea	_	NNP	NNP	_	5	conj	_	_
8	will	_	MD	MD	_	9	aux	_	_
9	shift	_	VB	VB	_	0	root	_	_
10	to	_	TO	TO	_	9	prep	_	_
11	Seoul	_	NNP	NNP	_	10	pobj	_	_
12	on	_	IN	IN	_	9	prep	_	_
13	September	_	NNP	NNP	_	12	pobj	_	_
14	1st	_	CD	CD	_	13	num	_	_
15	,	_	,	,	_	9	punct	_	_
16	and	_	CC	CC	_	9	cc	_	_
17	will	_	MD	MD	_	18	aux	_	_
18	hold	_	VB	VB	_	9	conj	_	_
19	the	_	DT	DT	_	21	det	_	_
20	second	_	JJ	JJ	_	21	amod	_	_
21	competition	_	NN	NN	_	18	dobj	_	_
22	in	_	IN	IN	_	21	prep	_	_
23	the	_	DT	DT	_	26	det	_	_
24	Le	_	NNP	NNP	_	26	nn	_	_
25	Tian	_	NNP	NNP	_	26	nn	_	_
26	Hotel	_	NNP	NNP	_	22	pobj	_	_
27	on	_	IN	IN	_	18	prep	_	_
28	the	_	DT	DT	_	29	det	_	_
29	2nd	_	NNS	NNS	_	27	pobj	_	_
30	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, op, c / compete-01)
(a / and, op, s2 / shift-01)
(a2 / and, op, t2 / team)
(c / compete-01, ARG1, t2 / team)
(c / compete-01, location, h2 / hotel)
(c5 / country, name, n2 / name)
(c6 / country, name, n / name)
(c7 / city, name, n3 / name)
(g2 / game, name, n5 / name)
(h2 / hotel, name, n4 / name)
(n / name, op, "Korea")
(n2 / name, op, "China")
(n3 / name, op, "Seoul")
(n4 / name, op, "Hotel")
(n4 / name, op, "Le")
(n4 / name, op, "Tian")
(n5 / name, op, "Go")
(s2 / shift-01, ARG1, a2 / and)
(s2 / shift-01, ARG2, c7 / city)
(t2 / team, mod, c6 / country)
(t2 / team, mod, g2 / game)

Input(Some(Graph((and :op (compete-01 :time (date-entity :day 2) :location (hotel :name (name :op "Hotel" :op "Tian" :op "Le")) :ord (ordinal-entity :value 2) :ARG0 team :ARG1 team) :op (shift-01 :time (date-entity :month 9 :day 1) :ARG2 (city :name (name :op "Seoul")) :ARG1 (and :op (team :mod (country :name (name :op "Korea")) :mod game) :op (team :mod (country :name (name :op "China")) :mod (game :name (name :op "Go")))))),ArrayBuffer(Span(4,5,List(0, 1, 2),China,(country :name (name :op "China")),false), Span(1,2,List(3, 4, 5),Go,(game :name (name :op "Go")),false), Span(6,7,List(6, 7, 8),Korea,(country :name (name :op "Korea")),false), Span(10,11,List(9, 10, 11),Seoul,(city :name (name :op "Seoul")),false), Span(23,26,List(12, 13, 14, 15, 16),Le Tian Hotel,(hotel :name (name :op "Hotel" :op "Tian" :op "Le")),false), Span(5,6,List(17),and,and,false), Span(8,9,List(18),shift,shift-01,false), Span(12,13,List(19),September,9,false), Span(15,16,List(20),and,and,false), Span(2,3,List(21),teams,team,false), Span(20,21,List(22),competition,compete-01,false)),Map(2 -> "China", 5 -> "Go", 12 -> hotel, 15 -> "Tian", 8 -> "Korea", 21 -> team, 18 -> shift-01, 7 -> name, 17 -> and, 1 -> name, 4 -> name, 11 -> "Seoul", 14 -> "Hotel", 20 -> and, 6 -> country, 9 -> city, 0 -> country, 22 -> compete-01, 16 -> "Le", 19 -> 9, 10 -> name, 3 -> game, 13 -> name),Map(n -> name, s2 -> shift-01, h2 -> hotel, c7 -> city, n4 -> name, g2 -> game, a -> and, n3 -> name, c6 -> country, t2 -> team, a2 -> and, c -> compete-01, 9 -> 9, n2 -> name, n5 -> name, c5 -> country))),[Ljava.lang.String;@1e04fa0a,Annotation([Ljava.lang.String;@1af2d44a,[Ljava.lang.String;@18d87d80,[Ljava.lang.String;@618425b5),Annotation([Ljava.lang.String;@58695725,[Ljava.lang.String;@543588e6,[Ledu.cmu.lti.nlp.amr.Dependency;@f5acb9d),Annotation([Ljava.lang.String;@4fb3ee4e,[Ljava.lang.String;@5d7148e2,[Ljava.lang.String;@25fb8912),Annotation([Ljava.lang.String;@7c24b813,[Ljava.lang.String;@2c35e847,[Ledu.cmu.lti.nlp.amr.Entity;@7bd4937b))
AMR:
(a / and, op, c5 / country)
(a / and, op, c6 / country)
(a / and, op, s2 / shift-01)
(a2 / and, op, s2 / shift-01)
(c / compete-01, ARG0, h2 / hotel)
(c / compete-01, ARG1, a2 / and)
(c5 / country, name, n2 / name)
(c6 / country, name, n / name)
(c7 / city, name, n3 / name)
(g2 / game, name, n5 / name)
(h2 / hotel, name, n4 / name)
(n / name, op, "Korea")
(n2 / name, op, "China")
(n3 / name, op, "Seoul")
(n4 / name, op, "Hotel")
(n4 / name, op, "Le")
(n4 / name, op, "Tian")
(n5 / name, op, "Go")
(s2 / shift-01, ARG0, t2 / team)
(s2 / shift-01, ARG1, 9 / 9)
(s2 / shift-01, ARG2, c7 / city)
(t2 / team, mod, g2 / game)

WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.2
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.1
Decoded in 630,988 microseconds
Sentence: According to the rules discussed and agreed upon by both sides , if the two teams draw with 7 : 7 , then the final result will be determined by the result of the competition between Weiping Nie of the Chinese team and Xunxuan Cao of the Korean team .

Oracle Span 1:  7 => 7
Oracle Span 2:  7 => 7
Oracle Span 3:  agreed => agree-01
Oracle Span 4:  both => both
Oracle Span 5:  Chinese => (country :name (name :op "China"))
Oracle Span 6:  competition => compete-01
Oracle Span 7:  determined => determine-01
Oracle Span 8:  discussed => discuss-01
Oracle Span 9:  draw => draw-00
Oracle Span 10:  final => final
Oracle Span 11:  Korean => (country :name (name :op "Korea"))
Oracle Span 12:  result => result-01
Oracle Span 13:  result => (thing :ARG2-of result-01)
Oracle Span 14:  rules => rule
Oracle Span 15:  sides => side
Oracle Span 16:  team => team
Oracle Span 17:  teams => team
Oracle Span 18:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 19:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))
NER Entity: (person :name (name :op "Xunxuan" :op "Cao"))
NER Entity: (thing :name (name :op "Chinese"))
NER Entity: (thing :name (name :op "Korean"))
Spans:
Span 18-19:  7 => 7
Span 20-21:  7 => 7
Span 6-7:  agreed => agree-01
Span 9-10:  both => both
Span 40-41:  Chinese => (country :name (name :op "China"))
Span 34-35:  competition => compete-01
Span 28-29:  determined => determine-01
Span 4-5:  discussed => discuss-01
Span 16-17:  draw => draw-00
Span 24-25:  final => final
Span 47-48:  Korean => (country :name (name :op "Korea"))
Span 25-26:  result => result-01
Span 31-32:  result => (thing :ARG2-of result-01)
Span 3-4:  rules => rule
Span 10-11:  sides => side
Span 41-42:  team => team
Span 15-16:  teams => team
Span 36-38:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Span 43-45:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Langrangian relaxation converged after 36 iterations. Delta = 0.0
Oracle Span 18-19:  7 => 7
Oracle Span 20-21:  7 => 7
Oracle Span 6-7:  agreed => agree-01
Oracle Span 9-10:  both => both
Oracle Span 40-41:  Chinese => (country :name (name :op "China"))
Oracle Span 34-35:  competition => compete-01
Oracle Span 28-29:  determined => determine-01
Oracle Span 4-5:  discussed => discuss-01
Oracle Span 16-17:  draw => draw-00
Oracle Span 24-25:  final => final
Oracle Span 47-48:  Korean => (country :name (name :op "Korea"))
Oracle Span 25-26:  result => result-01
Oracle Span 31-32:  result => (thing :ARG2-of result-01)
Oracle Span 3-4:  rules => rule
Oracle Span 10-11:  sides => side
Oracle Span 41-42:  team => team
Oracle Span 15-16:  teams => team
Oracle Span 36-38:  Weiping Nie => (person :name (name :op "Nie" :op "Weiping"))
Oracle Span 43-45:  Xunxuan Cao => (person :name (name :op "Cao" :op "XunXuan"))

Dependencies:
1	According	_	VBG	VBG	_	29	prep	_	_
2	to	_	TO	TO	_	1	pcomp	_	_
3	the	_	DT	DT	_	4	det	_	_
4	rules	_	NNS	NNS	_	2	pobj	_	_
5	discussed	_	VBN	VBN	_	4	vmod	_	_
6	and	_	CC	CC	_	5	cc	_	_
7	agreed	_	VBN	VBN	_	5	conj	_	_
8	upon	_	IN	IN	_	9	dep	_	_
9	by	_	IN	IN	_	5	prep	_	_
10	both	_	DT	DT	_	11	det	_	_
11	sides	_	NNS	NNS	_	9	pobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	if	_	IN	IN	_	17	mark	_	_
14	the	_	DT	DT	_	16	det	_	_
15	two	_	CD	CD	_	16	num	_	_
16	teams	_	NNS	NNS	_	17	nsubj	_	_
17	draw	_	VBP	VBP	_	11	rcmod	_	_
18	with	_	IN	IN	_	17	prep	_	_
19	7	_	CD	CD	_	18	pobj	_	_
20	:	_	:	:	_	5	punct	_	_
21	7	_	CD	CD	_	5	dobj	_	_
22	,	_	,	,	_	29	punct	_	_
23	then	_	RB	RB	_	26	advmod	_	_
24	the	_	DT	DT	_	26	det	_	_
25	final	_	JJ	JJ	_	26	amod	_	_
26	result	_	NN	NN	_	29	nsubjpass	_	_
27	will	_	MD	MD	_	29	aux	_	_
28	be	_	VB	VB	_	29	auxpass	_	_
29	determined	_	VBN	VBN	_	0	root	_	_
30	by	_	IN	IN	_	29	prep	_	_
31	the	_	DT	DT	_	32	det	_	_
32	result	_	NN	NN	_	30	pobj	_	_
33	of	_	IN	IN	_	32	prep	_	_
34	the	_	DT	DT	_	35	det	_	_
35	competition	_	NN	NN	_	33	pobj	_	_
36	between	_	IN	IN	_	35	prep	_	_
37	Weiping	_	NNP	NNP	_	38	nn	_	_
38	Nie	_	NNP	NNP	_	36	pobj	_	_
39	of	_	IN	IN	_	38	prep	_	_
40	the	_	DT	DT	_	42	det	_	_
41	Chinese	_	JJ	JJ	_	42	amod	_	_
42	team	_	NN	NN	_	39	pobj	_	_
43	and	_	CC	CC	_	38	cc	_	_
44	Xunxuan	_	NNP	NNP	_	45	nn	_	_
45	Cao	_	NNP	NNP	_	38	conj	_	_
46	of	_	IN	IN	_	45	prep	_	_
47	the	_	DT	DT	_	49	det	_	_
48	Korean	_	JJ	JJ	_	49	amod	_	_
49	team	_	NN	NN	_	46	pobj	_	_
50	.	_	.	.	_	29	punct	_	_

Oracle:
(a / agree-01, ARG0, s2 / side)
(a / agree-01, ARG1, r / rule)
(c4 / compete-01, ARG0, p3 / person)
(c4 / compete-01, ARG1, p4 / person)
(c5 / country, name, n2 / name)
(c6 / country, name, n4 / name)
(d / discuss-01, ARG0, s2 / side)
(d / discuss-01, ARG1, r / rule)
(d2 / determine-01, ARG0, t4 / thing)
(d2 / determine-01, ARG1, r2 / result-01)
(d2 / determine-01, condition, d3 / draw-00)
(d3 / draw-00, ARG0, t / team)
(d3 / draw-00, ARG1, t2 / team)
(n / name, op, "Nie")
(n / name, op, "Weiping")
(n2 / name, op, "China")
(n3 / name, op, "Cao")
(n3 / name, op, "XunXuan")
(n4 / name, op, "Korea")
(p3 / person, name, n / name)
(p4 / person, name, n3 / name)
(r2 / result-01, mod, f / final)
(r3 / result-01, ARG1, c4 / compete-01)
(r3 / result-01, ARG2, t4 / thing)
(s2 / side, mod, b / both)
(t / team, mod, c5 / country)
(t / team, part, p3 / person)
(t2 / team, mod, c6 / country)
(t2 / team, part, p4 / person)

Input(Some(Graph((determine-01 :ARG1-of (conform-01 :ARG2 (rule :ARG1-of (agree-01 :ARG0 side) :ARG1-of (discuss-01 :ARG0 (side :mod both)))) :condition (draw-00 :quant (score-entity :op 7 :op 7) :ARG0 team :ARG1 team) :ARG1 (result-01 :mod final) :ARG0 (thing :ARG2-of (result-01 :ARG1 (compete-01 :ARG1 (person :part-of (team :mod (country :name (name :op "Korea"))) :name (name :op "Cao" :op "XunXuan")) :ARG0 (person :part-of (team :mod (country :name (name :op "China"))) :name (name :op "Nie" :op "Weiping")))))),ArrayBuffer(Span(36,38,List(0, 1, 2, 3),Weiping Nie,(person :name (name :op "Nie" :op "Weiping")),false), Span(43,45,List(4, 5, 6, 7),Xunxuan Cao,(person :name (name :op "Cao" :op "XunXuan")),false), Span(40,41,List(8, 9, 10),Chinese,(country :name (name :op "China")),false), Span(47,48,List(11, 12, 13),Korean,(country :name (name :op "Korea")),false), Span(28,29,List(14),determined,determine-01,false), Span(3,4,List(15),rules,rule,false), Span(6,7,List(16),agreed,agree-01,false), Span(4,5,List(17),discussed,discuss-01,false), Span(10,11,List(18),sides,side,false), Span(9,10,List(19),both,both,false), Span(16,17,List(20),draw,draw-00,false), Span(18,19,List(21),7,7,false), Span(20,21,List(22),7,7,false), Span(25,26,List(23),result,result-01,false), Span(24,25,List(24),final,final,false), Span(31,32,List(25, 26),result,(thing :ARG2-of result-01),false), Span(15,16,List(27),teams,team,false), Span(41,42,List(28),team,team,false), Span(34,35,List(29),competition,compete-01,false)),Map(2 -> "Nie", 5 -> name, 27 -> team, 12 -> name, 15 -> rule, 8 -> country, 21 -> 7, 18 -> side, 24 -> final, 7 -> "XunXuan", 17 -> discuss-01, 1 -> name, 23 -> result-01, 26 -> result-01, 4 -> person, 11 -> country, 14 -> determine-01, 29 -> compete-01, 20 -> draw-00, 28 -> team, 6 -> "Cao", 9 -> name, 0 -> person, 22 -> 7, 16 -> agree-01, 19 -> both, 10 -> "China", 3 -> "Weiping", 25 -> thing, 13 -> "Korea"),Map(n -> name, r3 -> result-01, t4 -> thing, 72 -> 7, s2 -> side, t -> team, b -> both, d3 -> draw-00, c4 -> compete-01, n4 -> name, 7 -> 7, d -> discuss-01, r2 -> result-01, a -> agree-01, n3 -> name, p4 -> person, d2 -> determine-01, c6 -> country, t2 -> team, r -> rule, f -> final, p3 -> person, n2 -> name, c5 -> country))),[Ljava.lang.String;@21e360a,Annotation([Ljava.lang.String;@5ba3f27a,[Ljava.lang.String;@58d75e99,[Ljava.lang.String;@74751b3),Annotation([Ljava.lang.String;@741a8937,[Ljava.lang.String;@306e95ec,[Ledu.cmu.lti.nlp.amr.Dependency;@52af26ee),Annotation([Ljava.lang.String;@6fd83fc1,[Ljava.lang.String;@4f2b503c,[Ljava.lang.String;@bae7dc0),Annotation([Ljava.lang.String;@209da20d,[Ljava.lang.String;@e15b7e8,[Ledu.cmu.lti.nlp.amr.Entity;@1b2abca6))
AMR:
(a / agree-01, ARG1, r / rule)
(c4 / compete-01, ARG0, p3 / person)
(c4 / compete-01, ARG1, p4 / person)
(c4 / compete-01, ARG2, t2 / team)
(c5 / country, name, n2 / name)
(c6 / country, mod, f / final)
(c6 / country, name, n4 / name)
(d / discuss-01, ARG0, s2 / side)
(d / discuss-01, ARG1, r / rule)
(d / discuss-01, ARG2, p3 / person)
(d2 / determine-01, ARG1, r2 / result-01)
(d2 / determine-01, ARG2, t4 / thing)
(d3 / draw-00, ARG0, t / team)
(d3 / draw-00, ARG1, 72 / 7)
(d3 / draw-00, ARG2, s2 / side)
(n / name, op, "Nie")
(n / name, op, "Weiping")
(n2 / name, op, "China")
(n3 / name, op, "Cao")
(n3 / name, op, "XunXuan")
(n4 / name, op, "Korea")
(p3 / person, name, n / name)
(p4 / person, name, n3 / name)
(r2 / result-01, ARG1, 7 / 7)
(r2 / result-01, mod, f / final)
(r3 / result-01, ARG1, c4 / compete-01)
(r3 / result-01, ARG2, t4 / thing)
(s2 / side, mod, b / both)
(t2 / team, mod, c5 / country)

WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.1
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.3.0.0.0
WARNING: makeIds can't find span Id: 0.3.0.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 1,674,303 microseconds
Sentence: The prize money of the competition this time is 100,000 US dollars , the team that wins will get 70,000 US dollars , while the team that loses will get 30,000 US dollars .

Oracle Span 1:  competition => compete-01
Oracle Span 2:  dollars => (monetary-quantity :unit dollar)
Oracle Span 3:  dollars => (monetary-quantity :unit dollar)
Oracle Span 4:  dollars => (monetary-quantity :unit dollar)
Oracle Span 5:  get => get-01
Oracle Span 6:  get => get-01
Oracle Span 7:  loses => lose-03
Oracle Span 8:  money => money
Oracle Span 9:  prize => prize
Oracle Span 10:  team => team
Oracle Span 11:  team => team
Oracle Span 12:  this => this
Oracle Span 13:  time => time
Oracle Span 14:  US => (country :name (name :op "States" :op "United"))
Oracle Span 15:  wins => win-01
Spans:
Span 5-6:  competition => compete-01
Span 11-12:  dollars => (monetary-quantity :unit dollar)
Span 21-22:  dollars => (monetary-quantity :unit dollar)
Span 32-33:  dollars => (monetary-quantity :unit dollar)
Span 18-19:  get => get-01
Span 29-30:  get => get-01
Span 27-28:  loses => lose-03
Span 2-3:  money => money
Span 1-2:  prize => prize
Span 14-15:  team => team
Span 25-26:  team => team
Span 6-7:  this => this
Span 7-8:  time => time
Span 10-11:  US => (country :name (name :op "States" :op "United"))
Span 16-17:  wins => win-01

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 5-6:  competition => compete-01
Oracle Span 11-12:  dollars => (monetary-quantity :unit dollar)
Oracle Span 21-22:  dollars => (monetary-quantity :unit dollar)
Oracle Span 32-33:  dollars => (monetary-quantity :unit dollar)
Oracle Span 18-19:  get => get-01
Oracle Span 29-30:  get => get-01
Oracle Span 27-28:  loses => lose-03
Oracle Span 2-3:  money => money
Oracle Span 1-2:  prize => prize
Oracle Span 14-15:  team => team
Oracle Span 25-26:  team => team
Oracle Span 6-7:  this => this
Oracle Span 7-8:  time => time
Oracle Span 10-11:  US => (country :name (name :op "States" :op "United"))
Oracle Span 16-17:  wins => win-01

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	prize	_	NN	NN	_	3	nn	_	_
3	money	_	NN	NN	_	12	nsubj	_	_
4	of	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	competition	_	NN	NN	_	4	pobj	_	_
7	this	_	DT	DT	_	8	det	_	_
8	time	_	NN	NN	_	12	tmod	_	_
9	is	_	VBZ	VBZ	_	12	cop	_	_
10	100,000	_	CD	CD	_	12	num	_	_
11	US	_	NNP	NNP	_	12	nn	_	_
12	dollars	_	NNS	NNS	_	0	root	_	_
13	,	_	,	,	_	12	punct	_	_
14	the	_	DT	DT	_	15	det	_	_
15	team	_	NN	NN	_	12	appos	_	_
16	that	_	IN	IN	_	19	mark	_	_
17	wins	_	NNS	NNS	_	19	nsubj	_	_
18	will	_	MD	MD	_	19	aux	_	_
19	get	_	VB	VB	_	15	dep	_	_
20	70,000	_	CD	CD	_	22	num	_	_
21	US	_	NNP	NNP	_	22	nn	_	_
22	dollars	_	NNS	NNS	_	19	dobj	_	_
23	,	_	,	,	_	12	punct	_	_
24	while	_	IN	IN	_	30	mark	_	_
25	the	_	DT	DT	_	26	det	_	_
26	team	_	NN	NN	_	30	nsubj	_	_
27	that	_	WDT	WDT	_	28	nsubj	_	_
28	loses	_	VBZ	VBZ	_	26	rcmod	_	_
29	will	_	MD	MD	_	30	aux	_	_
30	get	_	VB	VB	_	12	advcl	_	_
31	30,000	_	CD	CD	_	33	num	_	_
32	US	_	NNP	NNP	_	33	nn	_	_
33	dollars	_	NNS	NNS	_	30	dobj	_	_
34	.	_	.	.	_	12	punct	_	_

Oracle:
(c4 / country, name, n4 / name)
(d / dollar, mod, c4 / country)
(d2 / dollar, mod, c4 / country)
(d4 / dollar, mod, c4 / country)
(g / get-01, ARG0, t3 / team)
(g / get-01, ARG1, m6 / monetary-quantity)
(g2 / get-01, ARG0, t4 / team)
(g2 / get-01, ARG1, m7 / monetary-quantity)
(l / lose-03, ARG0, t4 / team)
(m4 / monetary-quantity, domain, m5 / money)
(m4 / monetary-quantity, time, t / time)
(m4 / monetary-quantity, unit, d4 / dollar)
(m5 / money, mod, p / prize)
(m5 / money, poss, c / compete-01)
(m6 / monetary-quantity, unit, d / dollar)
(m7 / monetary-quantity, unit, d2 / dollar)
(n4 / name, op, "States")
(n4 / name, op, "United")
(t / time, mod, t2 / this)
(w / win-01, ARG0, t3 / team)

Input(Some(Graph((multi-sentence :snt1 (monetary-quantity :time (time :mod this) :domain (money :poss compete-01 :mod prize) :unit (dollar :mod (country :name (name :op "States" :op "United"))) :quant 100000) :snt2 (and :op (get-01 :ARG1 (monetary-quantity :unit (dollar :mod country) :quant 70000) :ARG0 (team :ARG0-of win-01)) :op (get-01 :ARG1 (monetary-quantity :unit (dollar :mod country) :quant 30000) :ARG0 (team :ARG0-of lose-03)))),ArrayBuffer(Span(11,12,List(0, 1),dollars,(monetary-quantity :unit dollar),false), Span(2,3,List(2),money,money,false), Span(1,2,List(3),prize,prize,false), Span(7,8,List(4),time,time,false), Span(6,7,List(5),this,this,false), Span(18,19,List(6),get,get-01,false), Span(21,22,List(7, 8),dollars,(monetary-quantity :unit dollar),false), Span(14,15,List(9),team,team,false), Span(16,17,List(10),wins,win-01,false), Span(29,30,List(11),get,get-01,false), Span(32,33,List(12, 13),dollars,(monetary-quantity :unit dollar),false), Span(25,26,List(14),team,team,false), Span(27,28,List(15),loses,lose-03,false), Span(5,6,List(16),competition,compete-01,false), Span(10,11,List(17, 18, 19, 20),US,(country :name (name :op "States" :op "United")),false)),Map(2 -> money, 5 -> this, 12 -> monetary-quantity, 15 -> lose-03, 8 -> dollar, 18 -> name, 7 -> monetary-quantity, 17 -> country, 1 -> dollar, 4 -> time, 11 -> get-01, 14 -> team, 20 -> "United", 6 -> get-01, 9 -> team, 0 -> monetary-quantity, 16 -> compete-01, 19 -> "States", 10 -> win-01, 3 -> prize, 13 -> dollar),Map(w -> win-01, t4 -> team, t -> time, m5 -> money, n4 -> name, c4 -> country, d -> dollar, g2 -> get-01, t3 -> team, g -> get-01, p -> prize, m7 -> monetary-quantity, d2 -> dollar, t2 -> this, m4 -> monetary-quantity, c -> compete-01, l -> lose-03, d4 -> dollar, m6 -> monetary-quantity))),[Ljava.lang.String;@6392827e,Annotation([Ljava.lang.String;@2ed2d9cb,[Ljava.lang.String;@d5b810e,[Ljava.lang.String;@43dac38f),Annotation([Ljava.lang.String;@342c38f8,[Ljava.lang.String;@c88a337,[Ledu.cmu.lti.nlp.amr.Dependency;@5d0a1059),Annotation([Ljava.lang.String;@485966cc,[Ljava.lang.String;@1de76cc7,[Ljava.lang.String;@54bff557),Annotation([Ljava.lang.String;@593aaf41,[Ljava.lang.String;@5a56cdac,[Ledu.cmu.lti.nlp.amr.Entity;@7c711375))
AMR:
(c / compete-01, ARG1, l / lose-03)
(c4 / country, name, n4 / name)
(d4 / dollar, mod, c4 / country)
(g / get-01, ARG0, w / win-01)
(g / get-01, ARG1, m6 / monetary-quantity)
(g / get-01, ARG2, t3 / team)
(g2 / get-01, ARG0, t4 / team)
(g2 / get-01, ARG1, m7 / monetary-quantity)
(l / lose-03, ARG0, t4 / team)
(l / lose-03, ARG1, t2 / this)
(m4 / monetary-quantity, domain, m5 / money)
(m4 / monetary-quantity, mod, t3 / team)
(m4 / monetary-quantity, unit, d4 / dollar)
(m5 / money, mod, p / prize)
(m6 / monetary-quantity, unit, d / dollar)
(m7 / monetary-quantity, unit, d2 / dollar)
(n4 / name, op, "States")
(n4 / name, op, "United")
(t / time, mod, t2 / this)
(w / win-01, ARG1, t / time)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.1.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0.0
Decoded in 1,391,652 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 1-2:  End => end-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(end-01,ArrayBuffer(Span(1,2,List(0),End,end-01,false)),Map(0 -> end-01),Map(e -> end-01))),[Ljava.lang.String;@57cf54e1,Annotation([Ljava.lang.String;@5b03b9fe,[Ljava.lang.String;@37d4349f,[Ljava.lang.String;@434a63ab),Annotation([Ljava.lang.String;@6e0f5f7f,[Ljava.lang.String;@2805d709,[Ledu.cmu.lti.nlp.amr.Dependency;@3ee37e5a),Annotation([Ljava.lang.String;@2ea41516,[Ljava.lang.String;@3a44431a,[Ljava.lang.String;@3c7f66c4),Annotation([Ljava.lang.String;@194bcebf,[Ljava.lang.String;@17497425,[Ledu.cmu.lti.nlp.amr.Entity;@f0da945))
AMR:


Decoded in 3,193 microseconds
Sentence: Xinhua News Agency , Rome , September 1st , by reporters Aiguo Yang and Changrui Huang

Oracle Span 1:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Oracle Span 2:  and => and
Oracle Span 3:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Oracle Span 4:  reporters => report-01
Oracle Span 5:  Rome => (city :name (name :op "Rome"))
Oracle Span 6:  September => 9
Oracle Span 7:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Aiguo" :op "Yang"))
NER Entity: (person :name (name :op "Changrui" :op "Huang"))
NER Entity: (country :name (name :op "Rome"))
Spans:
Span 11-13:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Span 13-14:  and => and
Span 14-16:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Span 10-11:  reporters => report-01
Span 4-5:  Rome => (city :name (name :op "Rome"))
Span 6-7:  September => 9
Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 11-13:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Oracle Span 13-14:  and => and
Oracle Span 14-16:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Oracle Span 10-11:  reporters => report-01
Oracle Span 4-5:  Rome => (city :name (name :op "Rome"))
Oracle Span 6-7:  September => 9
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Rome	_	NNP	NNP	_	3	appos	_	_
6	,	_	,	,	_	3	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporters	_	NNS	NNS	_	10	pobj	_	_
12	Aiguo	_	NNP	NNP	_	13	nn	_	_
13	Yang	_	NNP	NNP	_	3	dep	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	Changrui	_	NNP	NNP	_	16	nn	_	_
16	Huang	_	NNP	NNP	_	13	conj	_	_

Oracle:
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(c4 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Aiguo")
(n2 / name, op, "Yang")
(n3 / name, op, "Changrui")
(n3 / name, op, "Huang")
(n4 / name, op, "Rome")
(p / publication, name, n / name)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(r2 / report-01, ARG0, a2 / and)

Input(Some(Graph((byline-91 :ARG0 (publication :name (name :op "Agency" :op "News" :op "Xinhua")) :ARG1 (and :ARG0-of report-01 :op (person :name (name :op "Huang" :op "Changrui")) :op (person :name (name :op "Yang" :op "Aiguo"))) :location (city :name (name :op "Rome")) :time (date-entity :month 9 :day 1)),ArrayBuffer(Span(0,3,List(0, 1, 2, 3, 4),Xinhua News Agency,(publication :name (name :op "Agency" :op "News" :op "Xinhua")),false), Span(11,13,List(5, 6, 7, 8),Aiguo Yang,(person :name (name :op "Yang" :op "Aiguo")),false), Span(14,16,List(9, 10, 11, 12),Changrui Huang,(person :name (name :op "Huang" :op "Changrui")),false), Span(4,5,List(13, 14, 15),Rome,(city :name (name :op "Rome")),false), Span(13,14,List(16),and,and,false), Span(10,11,List(17),reporters,report-01,false), Span(6,7,List(18),September,9,false)),Map(2 -> "Agency", 5 -> person, 12 -> "Changrui", 15 -> "Rome", 8 -> "Aiguo", 18 -> 9, 7 -> "Yang", 17 -> report-01, 1 -> name, 4 -> "Xinhua", 11 -> "Huang", 14 -> name, 6 -> name, 9 -> person, 0 -> publication, 16 -> and, 10 -> name, 3 -> "News", 13 -> city),Map(n -> name, n4 -> name, c4 -> city, r2 -> report-01, p -> publication, n3 -> name, p4 -> person, a2 -> and, 9 -> 9, n2 -> name, p3 -> person))),[Ljava.lang.String;@4803b726,Annotation([Ljava.lang.String;@ffaa6af,[Ljava.lang.String;@53ce1329,[Ljava.lang.String;@316bcf94),Annotation([Ljava.lang.String;@6404f418,[Ljava.lang.String;@3e11f9e9,[Ledu.cmu.lti.nlp.amr.Dependency;@1de5f259),Annotation([Ljava.lang.String;@729d991e,[Ljava.lang.String;@31fa1761,[Ljava.lang.String;@957e06),Annotation([Ljava.lang.String;@32502377,[Ljava.lang.String;@2c1b194a,[Ledu.cmu.lti.nlp.amr.Entity;@4dbb42b7))
AMR:
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(c4 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Aiguo")
(n2 / name, op, "Yang")
(n3 / name, op, "Changrui")
(n3 / name, op, "Huang")
(n4 / name, op, "Rome")
(p / publication, location, c4 / city)
(p / publication, name, n / name)
(p / publication, poss, r2 / report-01)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(r2 / report-01, ARG0, 9 / 9)
(r2 / report-01, ARG1, a2 / and)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.3.0
Decoded in 282,983 microseconds
Sentence: The 1 - meter diving board preliminaries of the Seventh World Swimming Championship were held here this morning .

Oracle Span 1:  1 => 1
Oracle Span 2:  board => board
Oracle Span 3:  diving => dive-01
Oracle Span 4:  held => hold-04
Oracle Span 5:  here => here
Oracle Span 6:  meter => (distance-quantity :unit meter)
Oracle Span 7:  morning => morning
Oracle Span 8:  preliminaries => preliminary
Oracle Span 9:  Seventh World Swimming Championship => (game :name (name :op "Championship" :op "Swimming" :op "World" :op "Seventh"))
Oracle Span 10:  this => this
NER Entity: (thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championship"))
Spans:
Span 1-2:  1 => 1
Span 5-6:  board => board
Span 4-5:  diving => dive-01
Span 14-15:  held => hold-04
Span 15-16:  here => here
Span 3-4:  meter => (distance-quantity :unit meter)
Span 17-18:  morning => morning
Span 6-7:  preliminaries => preliminary
Span 9-13:  Seventh World Swimming Championship => (game :name (name :op "Championship" :op "Swimming" :op "World" :op "Seventh"))
Span 16-17:  this => this

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 1-2:  1 => 1
Oracle Span 5-6:  board => board
Oracle Span 4-5:  diving => dive-01
Oracle Span 14-15:  held => hold-04
Oracle Span 15-16:  here => here
Oracle Span 3-4:  meter => (distance-quantity :unit meter)
Oracle Span 17-18:  morning => morning
Oracle Span 6-7:  preliminaries => preliminary
Oracle Span 9-13:  Seventh World Swimming Championship => (game :name (name :op "Championship" :op "Swimming" :op "World" :op "Seventh"))
Oracle Span 16-17:  this => this

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	1	_	CD	CD	_	15	dep	_	_
3	-	_	:	:	_	15	punct	_	_
4	meter	_	JJ	JJ	_	7	amod	_	_
5	diving	_	JJ	JJ	_	7	amod	_	_
6	board	_	NN	NN	_	7	nn	_	_
7	preliminaries	_	NNS	NNS	_	15	nsubjpass	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	13	det	_	_
10	Seventh	_	NNP	NNP	_	13	nn	_	_
11	World	_	NNP	NNP	_	13	nn	_	_
12	Swimming	_	NNP	NNP	_	13	nn	_	_
13	Championship	_	NNP	NNP	_	8	pobj	_	_
14	were	_	VBD	VBD	_	15	auxpass	_	_
15	held	_	VBN	VBN	_	0	root	_	_
16	here	_	RB	RB	_	15	advmod	_	_
17	this	_	DT	DT	_	18	det	_	_
18	morning	_	NN	NN	_	15	tmod	_	_
19	.	_	.	.	_	15	punct	_	_

Oracle:
(b / board, mod, d3 / distance-quantity)
(d2 / dive-01, instrument, b / board)
(d3 / distance-quantity, quant, 1 / 1)
(d3 / distance-quantity, unit, m2 / meter)
(g / game, name, n / name)
(g / game, subevent, p / preliminary)
(h / hold-04, ARG0, p / preliminary)
(h / hold-04, location, h2 / here)
(h / hold-04, time, m3 / morning)
(m3 / morning, mod, t / this)
(n / name, op, "Championship")
(n / name, op, "Seventh")
(n / name, op, "Swimming")
(n / name, op, "World")
(p / preliminary, topic, b / board)

Input(Some(Graph((hold-04 :time (morning :mod this) :location here :ARG0 (preliminary :topic (board :instrument-of dive-01 :mod (distance-quantity :unit meter :quant 1)) :subevent-of (game :name (name :op "Championship" :op "Swimming" :op "World" :op "Seventh")))),ArrayBuffer(Span(9,13,List(0, 1, 2, 3, 4, 5),Seventh World Swimming Championship,(game :name (name :op "Championship" :op "Swimming" :op "World" :op "Seventh")),false), Span(14,15,List(6),held,hold-04,false), Span(17,18,List(7),morning,morning,false), Span(16,17,List(8),this,this,false), Span(15,16,List(9),here,here,false), Span(6,7,List(10),preliminaries,preliminary,false), Span(5,6,List(11),board,board,false), Span(4,5,List(12),diving,dive-01,false), Span(1,2,List(13),1,1,false), Span(3,4,List(14, 15),meter,(distance-quantity :unit meter),false)),Map(2 -> "Championship", 5 -> "Seventh", 12 -> dive-01, 15 -> meter, 8 -> this, 7 -> morning, 1 -> name, 4 -> "World", 11 -> board, 14 -> distance-quantity, 6 -> hold-04, 9 -> here, 0 -> game, 10 -> preliminary, 3 -> "Swimming", 13 -> 1),Map(m3 -> morning, n -> name, h -> hold-04, b -> board, h2 -> here, t -> this, m2 -> meter, d3 -> distance-quantity, 1 -> 1, p -> preliminary, g -> game, d2 -> dive-01))),[Ljava.lang.String;@66f57048,Annotation([Ljava.lang.String;@550dbc7a,[Ljava.lang.String;@21282ed8,[Ljava.lang.String;@36916eb0),Annotation([Ljava.lang.String;@7bab3f1a,[Ljava.lang.String;@437da279,[Ledu.cmu.lti.nlp.amr.Dependency;@23c30a20),Annotation([Ljava.lang.String;@1e1a0406,[Ljava.lang.String;@3cebbb30,[Ljava.lang.String;@12aba8be),Annotation([Ljava.lang.String;@290222c1,[Ljava.lang.String;@67f639d3,[Ledu.cmu.lti.nlp.amr.Entity;@6253c26))
AMR:
(d2 / dive-01, ARG1, p / preliminary)
(d3 / distance-quantity, unit, m2 / meter)
(g / game, name, n / name)
(h / hold-04, ARG0, 1 / 1)
(h / hold-04, ARG1, p / preliminary)
(h / hold-04, ARG6, m3 / morning)
(h2 / here, op, t / this)
(m3 / morning, mod, t / this)
(m3 / morning, name, g / game)
(n / name, op, "Championship")
(n / name, op, "Seventh")
(n / name, op, "Swimming")
(n / name, op, "World")
(p / preliminary, mod, b / board)
(p / preliminary, mod, d3 / distance-quantity)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
Decoded in 375,945 microseconds
Sentence: Chinese competitor Lan Wei and Sheng Chen both received qualification for the semi-finals .

Oracle Span 1:  and => and
Oracle Span 2:  Chinese => (country :name (name :op "China"))
Oracle Span 3:  competitor => compete-01
Oracle Span 4:  finals => final
Oracle Span 5:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Oracle Span 6:  qualification => qualify-02
Oracle Span 7:  semi => semi
Oracle Span 8:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
NER Entity: (person :name (name :op "Lan" :op "Wei"))
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 4-5:  and => and
Span 0-1:  Chinese => (country :name (name :op "China"))
Span 1-2:  competitor => compete-01
Span 14-15:  finals => final
Span 2-4:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Span 9-10:  qualification => qualify-02
Span 12-13:  semi => semi
Span 5-7:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 4-5:  and => and
Oracle Span 0-1:  Chinese => (country :name (name :op "China"))
Oracle Span 1-2:  competitor => compete-01
Oracle Span 14-15:  finals => final
Oracle Span 2-4:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Oracle Span 9-10:  qualification => qualify-02
Oracle Span 12-13:  semi => semi
Oracle Span 5-7:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))

Dependencies:
1	Chinese	_	JJ	JJ	_	4	amod	_	_
2	competitor	_	NN	NN	_	4	nn	_	_
3	Lan	_	NNP	NNP	_	4	nn	_	_
4	Wei	_	NNP	NNP	_	9	nsubj	_	_
5	and	_	CC	CC	_	4	cc	_	_
6	Sheng	_	NNP	NNP	_	7	nn	_	_
7	Chen	_	NNP	NNP	_	4	conj	_	_
8	both	_	DT	DT	_	9	dep	_	_
9	received	_	VBD	VBD	_	0	root	_	_
10	qualification	_	NN	NN	_	9	dobj	_	_
11	for	_	IN	IN	_	9	prep	_	_
12	the	_	DT	DT	_	13	det	_	_
13	semi-finals	_	NNS	NNS	_	11	pobj	_	_
14	.	_	.	.	_	9	punct	_	_

Oracle:
(a / and, mod, c4 / country)
(a / and, op, p3 / person)
(a / and, op, p4 / person)
(c3 / compete-01, ARG0, a / and)
(c4 / country, name, n3 / name)
(f / final, mod, s2 / semi)
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Chen")
(n2 / name, op, "Sheng")
(n3 / name, op, "China")
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)
(q / qualify-02, ARG1, a / and)
(q / qualify-02, ARG2, f / final)

Input(Some(Graph((qualify-02 :ARG2 (final :mod semi) :ARG1 (and :mod (country :name (name :op "China")) :ARG0-of compete-01 :op (person :name (name :op "Chen" :op "Sheng")) :op (person :name (name :op "Wei" :op "Lan")))),ArrayBuffer(Span(2,4,List(0, 1, 2, 3),Lan Wei,(person :name (name :op "Wei" :op "Lan")),false), Span(5,7,List(4, 5, 6, 7),Sheng Chen,(person :name (name :op "Chen" :op "Sheng")),false), Span(0,1,List(8, 9, 10),Chinese,(country :name (name :op "China")),false), Span(4,5,List(11),and,and,false), Span(14,15,List(12),finals,final,false), Span(12,13,List(13),semi,semi,false), Span(9,10,List(14),qualification,qualify-02,false), Span(1,2,List(15),competitor,compete-01,false)),Map(2 -> "Wei", 5 -> name, 12 -> final, 15 -> compete-01, 8 -> country, 7 -> "Sheng", 1 -> name, 4 -> person, 11 -> and, 14 -> qualify-02, 6 -> "Chen", 9 -> name, 0 -> person, 10 -> "China", 3 -> "Lan", 13 -> semi),Map(n -> name, q -> qualify-02, s2 -> semi, c4 -> country, c3 -> compete-01, a -> and, n3 -> name, p4 -> person, f -> final, n2 -> name, p3 -> person))),[Ljava.lang.String;@49049a04,Annotation([Ljava.lang.String;@71a8adcf,[Ljava.lang.String;@27462a88,[Ljava.lang.String;@82de64a),Annotation([Ljava.lang.String;@659499f1,[Ljava.lang.String;@51e69659,[Ledu.cmu.lti.nlp.amr.Dependency;@47e2e487),Annotation([Ljava.lang.String;@201a4587,[Ljava.lang.String;@61001b64,[Ljava.lang.String;@4310d43),Annotation([Ljava.lang.String;@54a7079e,[Ljava.lang.String;@26e356f0,[Ledu.cmu.lti.nlp.amr.Entity;@47d9a273))
AMR:
(a / and, op, p3 / person)
(a / and, op, p4 / person)
(c3 / compete-01, ARG0, p3 / person)
(c3 / compete-01, ARG1, c4 / country)
(c4 / country, name, n3 / name)
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Chen")
(n2 / name, op, "Sheng")
(n3 / name, op, "China")
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)
(q / qualify-02, ARG1, p3 / person)
(q / qualify-02, location, f / final)
(q / qualify-02, location, s2 / semi)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 363,806 microseconds
Sentence: In the preliminaries , Wei Lan , who is 26 years old this year , from Guangdong , with outstanding skill , occupied the lead position with a total score of 355.35 points .

Oracle Span 1:  26 => 26
Oracle Span 2:  355.35 => 355.35
Oracle Span 3:  Guangdong => (province :name (name :op "Guangdong"))
Oracle Span 4:  lead => lead-01
Oracle Span 5:  occupied => occupy-01
Oracle Span 6:  points => point
Oracle Span 7:  position => position
Oracle Span 8:  preliminaries => preliminary
Oracle Span 9:  score => score-01
Oracle Span 10:  skill => skill
Oracle Span 11:  this => this
Oracle Span 12:  total => total
Oracle Span 13:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))
Oracle Span 14:  year => year
Oracle Span 15:  years => (temporal-quantity :unit year)
NER Entity: (person :name (name :op "Wei" :op "Lan"))
NER Entity: (country :name (name :op "Guangdong"))
Spans:
Span 9-10:  26 => 26
Span 31-32:  355.35 => 355.35
Span 16-17:  Guangdong => (province :name (name :op "Guangdong"))
Span 24-25:  lead => lead-01
Span 22-23:  occupied => occupy-01
Span 32-33:  points => point
Span 25-26:  position => position
Span 2-3:  preliminaries => preliminary
Span 29-30:  score => score-01
Span 20-21:  skill => skill
Span 12-13:  this => this
Span 28-29:  total => total
Span 4-6:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))
Span 13-14:  year => year
Span 10-11:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 9-10:  26 => 26
Oracle Span 31-32:  355.35 => 355.35
Oracle Span 16-17:  Guangdong => (province :name (name :op "Guangdong"))
Oracle Span 24-25:  lead => lead-01
Oracle Span 22-23:  occupied => occupy-01
Oracle Span 32-33:  points => point
Oracle Span 25-26:  position => position
Oracle Span 2-3:  preliminaries => preliminary
Oracle Span 29-30:  score => score-01
Oracle Span 20-21:  skill => skill
Oracle Span 12-13:  this => this
Oracle Span 28-29:  total => total
Oracle Span 4-6:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))
Oracle Span 13-14:  year => year
Oracle Span 10-11:  years => (temporal-quantity :unit year)

Dependencies:
1	In	_	IN	IN	_	23	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	preliminaries	_	NNS	NNS	_	1	pobj	_	_
4	,	_	,	,	_	23	punct	_	_
5	Wei	_	NNP	NNP	_	6	nn	_	_
6	Lan	_	NNP	NNP	_	23	nsubj	_	_
7	,	_	,	,	_	6	punct	_	_
8	who	_	WP	WP	_	12	nsubj	_	_
9	is	_	VBZ	VBZ	_	12	cop	_	_
10	26	_	CD	CD	_	11	num	_	_
11	years	_	NNS	NNS	_	12	npadvmod	_	_
12	old	_	JJ	JJ	_	6	rcmod	_	_
13	this	_	DT	DT	_	14	det	_	_
14	year	_	NN	NN	_	12	tmod	_	_
15	,	_	,	,	_	12	punct	_	_
16	from	_	IN	IN	_	12	prep	_	_
17	Guangdong	_	NNP	NNP	_	16	pobj	_	_
18	,	_	,	,	_	12	punct	_	_
19	with	_	IN	IN	_	12	prep	_	_
20	outstanding	_	JJ	JJ	_	21	amod	_	_
21	skill	_	NN	NN	_	19	pobj	_	_
22	,	_	,	,	_	6	punct	_	_
23	occupied	_	VBD	VBD	_	0	root	_	_
24	the	_	DT	DT	_	26	det	_	_
25	lead	_	JJ	JJ	_	26	amod	_	_
26	position	_	NN	NN	_	23	dobj	_	_
27	with	_	IN	IN	_	23	prep	_	_
28	a	_	DT	DT	_	30	det	_	_
29	total	_	JJ	JJ	_	30	amod	_	_
30	score	_	NN	NN	_	27	pobj	_	_
31	of	_	IN	IN	_	30	prep	_	_
32	355.35	_	CD	CD	_	33	num	_	_
33	points	_	NNS	NNS	_	31	pobj	_	_
34	.	_	.	.	_	23	punct	_	_

Oracle:
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Guangdong")
(o / occupy-01, ARG0, p2 / person)
(o / occupy-01, ARG1, p3 / position)
(o / occupy-01, ARG2, s2 / score-01)
(o / occupy-01, location, p5 / preliminary)
(p / province, name, n2 / name)
(p2 / person, name, n / name)
(p2 / person, prep-with, s / skill)
(p2 / person, source, p / province)
(p3 / position, mod, l / lead-01)
(p4 / point, quant, 3 / 355.35)
(s2 / score-01, ARG0, p2 / person)
(s2 / score-01, ARG1, p4 / point)
(s2 / score-01, mod, t2 / total)
(t / temporal-quantity, quant, 2 / 26)
(t / temporal-quantity, unit, y / year)
(y2 / year, mod, t3 / this)

Input(Some(Graph((occupy-01 :location preliminary :ARG2 (score-01 :mod total :ARG1 (point :quant 355.35) :ARG0 person) :ARG1 (position :mod lead-01) :ARG0 (person :ARG1-of (age-01 :ARG2 (temporal-quantity :unit year :quant 26) :time (year :mod this)) :prep-with (skill :ARG1-of stand-06) :source (province :name (name :op "Guangdong")) :name (name :op "Lan" :op "Wei"))),ArrayBuffer(Span(4,6,List(0, 1, 2, 3),Wei Lan,(person :name (name :op "Lan" :op "Wei")),false), Span(16,17,List(4, 5, 6),Guangdong,(province :name (name :op "Guangdong")),false), Span(22,23,List(7),occupied,occupy-01,false), Span(2,3,List(8),preliminaries,preliminary,false), Span(29,30,List(9),score,score-01,false), Span(28,29,List(10),total,total,false), Span(32,33,List(11),points,point,false), Span(31,32,List(12),355.35,355.35,false), Span(25,26,List(13),position,position,false), Span(24,25,List(14),lead,lead-01,false), Span(20,21,List(15),skill,skill,false), Span(9,10,List(16),26,26,false), Span(10,11,List(17, 18),years,(temporal-quantity :unit year),false), Span(13,14,List(19),year,year,false), Span(12,13,List(20),this,this,false)),Map(2 -> "Lan", 5 -> name, 12 -> 355.35, 15 -> skill, 8 -> preliminary, 18 -> year, 7 -> occupy-01, 17 -> temporal-quantity, 1 -> name, 4 -> province, 11 -> point, 14 -> lead-01, 20 -> this, 6 -> "Guangdong", 9 -> score-01, 0 -> person, 16 -> 26, 19 -> year, 10 -> total, 3 -> "Wei", 13 -> position),Map(n -> name, 2 -> 26, s2 -> score-01, p5 -> preliminary, t -> temporal-quantity, p2 -> person, s -> skill, t3 -> this, y -> year, p -> province, p4 -> point, t2 -> total, l -> lead-01, o -> occupy-01, 3 -> 355.35, p3 -> position, y2 -> year, n2 -> name))),[Ljava.lang.String;@4b8ee4de,Annotation([Ljava.lang.String;@27f981c6,[Ljava.lang.String;@1b11171f,[Ljava.lang.String;@1151e434),Annotation([Ljava.lang.String;@2dc54ad4,[Ljava.lang.String;@4659191b,[Ledu.cmu.lti.nlp.amr.Dependency;@55634720),Annotation([Ljava.lang.String;@4b0d79fc,[Ljava.lang.String;@4c1909a3,[Ljava.lang.String;@428640fa),Annotation([Ljava.lang.String;@d9345cd,[Ljava.lang.String;@2d710f1a,[Ledu.cmu.lti.nlp.amr.Entity;@29215f06))
AMR:
(l / lead-01, ARG0, 2 / 26)
(l / lead-01, ARG1, p5 / preliminary)
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Guangdong")
(o / occupy-01, ARG0, p2 / person)
(o / occupy-01, ARG1, p3 / position)
(o / occupy-01, ARG6, s / skill)
(p / province, name, n2 / name)
(p2 / person, name, n / name)
(p3 / position, mod, l / lead-01)
(p4 / point, quant, 3 / 355.35)
(s2 / score-01, ARG0, p2 / person)
(s2 / score-01, ARG1, p4 / point)
(s2 / score-01, mod, t2 / total)
(t / temporal-quantity, quant, 2 / 26)
(t / temporal-quantity, unit, y / year)
(y2 / year, calendar, t / temporal-quantity)
(y2 / year, location, p / province)
(y2 / year, mod, t3 / this)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.3.1
WARNING: makeIds can't find span Id: 0.0.3.1.0
Decoded in 591,652 microseconds
Sentence: Sheng Chen , who is 19 years old this year , from Hubei , is temporarily in the sixth position , the a total score of 342.60 points .

Oracle Span 1:  19 => 19
Oracle Span 2:  342.60 => 342.60
Oracle Span 3:  Hubei => (province :name (name :op "Hubei"))
Oracle Span 4:  points => point
Oracle Span 5:  position => position-01
Oracle Span 6:  score => score-01
Oracle Span 7:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 8:  temporarily => temporary
Oracle Span 9:  this => this
Oracle Span 10:  total => total
Oracle Span 11:  year => year
Oracle Span 12:  years => (temporal-quantity :unit year)
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (country :name (name :op "Hubei"))
Spans:
Span 5-6:  19 => 19
Span 26-27:  342.60 => 342.60
Span 12-13:  Hubei => (province :name (name :op "Hubei"))
Span 27-28:  points => point
Span 19-20:  position => position-01
Span 24-25:  score => score-01
Span 0-2:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Span 15-16:  temporarily => temporary
Span 8-9:  this => this
Span 23-24:  total => total
Span 9-10:  year => year
Span 6-7:  years => (temporal-quantity :unit year)

Langrangian relaxation converged after 16 iterations. Delta = 0.0
Oracle Span 5-6:  19 => 19
Oracle Span 26-27:  342.60 => 342.60
Oracle Span 12-13:  Hubei => (province :name (name :op "Hubei"))
Oracle Span 27-28:  points => point
Oracle Span 19-20:  position => position-01
Oracle Span 24-25:  score => score-01
Oracle Span 0-2:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 15-16:  temporarily => temporary
Oracle Span 8-9:  this => this
Oracle Span 23-24:  total => total
Oracle Span 9-10:  year => year
Oracle Span 6-7:  years => (temporal-quantity :unit year)

Dependencies:
1	Sheng	_	NNP	NNP	_	2	nn	_	_
2	Chen	_	NNP	NNP	_	15	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	who	_	WP	WP	_	8	nsubj	_	_
5	is	_	VBZ	VBZ	_	8	cop	_	_
6	19	_	CD	CD	_	7	num	_	_
7	years	_	NNS	NNS	_	8	npadvmod	_	_
8	old	_	JJ	JJ	_	2	rcmod	_	_
9	this	_	DT	DT	_	10	det	_	_
10	year	_	NN	NN	_	8	tmod	_	_
11	,	_	,	,	_	8	punct	_	_
12	from	_	IN	IN	_	8	prep	_	_
13	Hubei	_	NNP	NNP	_	12	pobj	_	_
14	,	_	,	,	_	2	punct	_	_
15	is	_	VBZ	VBZ	_	0	root	_	_
16	temporarily	_	RB	RB	_	15	advmod	_	_
17	in	_	IN	IN	_	15	prep	_	_
18	the	_	DT	DT	_	20	det	_	_
19	sixth	_	JJ	JJ	_	20	amod	_	_
20	position	_	NN	NN	_	17	pobj	_	_
21	,	_	,	,	_	20	punct	_	_
22	the	_	DT	DT	_	25	predet	_	_
23	a	_	DT	DT	_	25	det	_	_
24	total	_	JJ	JJ	_	25	amod	_	_
25	score	_	NN	NN	_	20	appos	_	_
26	of	_	IN	IN	_	25	prep	_	_
27	342.60	_	CD	CD	_	28	num	_	_
28	points	_	NNS	NNS	_	26	pobj	_	_
29	.	_	.	.	_	15	punct	_	_

Oracle:
(n / name, op, "Chen")
(n / name, op, "Sheng")
(n2 / name, op, "Hubei")
(p / position-01, ARG1, p3 / person)
(p / position-01, duration, t2 / temporary)
(p2 / point, quant, 3 / 342.60)
(p3 / person, name, n / name)
(p3 / person, source, p4 / province)
(p4 / province, name, n2 / name)
(s2 / score-01, ARG0, p3 / person)
(s2 / score-01, ARG1, p2 / point)
(s2 / score-01, mod, t3 / total)
(t / temporal-quantity, quant, 1 / 19)
(t / temporal-quantity, unit, y / year)
(y2 / year, mod, t4 / this)

Input(Some(Graph((position-01 :duration temporary :ord (ordinal-entity :value 6) :ARG1 (person :ARG1-of (age-01 :ARG2 (temporal-quantity :unit year :quant 19) :time (year :mod this)) :ARG0-of (score-01 :mod total :ARG1 (point :quant 342.60)) :source (province :name (name :op "Hubei")) :name (name :op "Chen" :op "Sheng"))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Sheng Chen,(person :name (name :op "Chen" :op "Sheng")),false), Span(12,13,List(4, 5, 6),Hubei,(province :name (name :op "Hubei")),false), Span(19,20,List(7),position,position-01,false), Span(24,25,List(8),score,score-01,false), Span(23,24,List(9),total,total,false), Span(27,28,List(10),points,point,false), Span(26,27,List(11),342.60,342.60,false), Span(5,6,List(12),19,19,false), Span(6,7,List(13, 14),years,(temporal-quantity :unit year),false), Span(9,10,List(15),year,year,false), Span(8,9,List(16),this,this,false), Span(15,16,List(17),temporarily,temporary,false)),Map(2 -> "Chen", 5 -> name, 12 -> 19, 15 -> year, 8 -> score-01, 7 -> position-01, 17 -> temporary, 1 -> name, 4 -> province, 11 -> 342.60, 14 -> year, 6 -> "Hubei", 9 -> total, 0 -> person, 16 -> this, 10 -> point, 3 -> "Sheng", 13 -> temporal-quantity),Map(n -> name, t4 -> this, s2 -> score-01, t -> temporal-quantity, p2 -> point, 1 -> 19, t3 -> total, y -> year, p -> position-01, p4 -> province, t2 -> temporary, 3 -> 342.60, p3 -> person, y2 -> year, n2 -> name))),[Ljava.lang.String;@59505b48,Annotation([Ljava.lang.String;@4efac082,[Ljava.lang.String;@6bd61f98,[Ljava.lang.String;@48aca48b),Annotation([Ljava.lang.String;@13fd2ccd,[Ljava.lang.String;@b9b00e0,[Ledu.cmu.lti.nlp.amr.Dependency;@506ae4d4),Annotation([Ljava.lang.String;@7d4f9aae,[Ljava.lang.String;@72e5a8e,[Ljava.lang.String;@54e1c68b),Annotation([Ljava.lang.String;@53aac487,[Ljava.lang.String;@52b1beb6,[Ledu.cmu.lti.nlp.amr.Entity;@273e7444))
AMR:
(n / name, op, "Chen")
(n / name, op, "Sheng")
(n2 / name, op, "Hubei")
(p / position-01, ARG0, p3 / person)
(p / position-01, ARG1, 1 / 19)
(p / position-01, ARG2, p4 / province)
(p2 / point, quant, 3 / 342.60)
(p3 / person, name, n / name)
(p4 / province, name, n2 / name)
(s2 / score-01, ARG0, t2 / temporary)
(s2 / score-01, ARG1, p2 / point)
(s2 / score-01, ARG6, p / position-01)
(s2 / score-01, mod, t3 / total)
(t / temporal-quantity, unit, y / year)
(y2 / year, calendar, t / temporal-quantity)
(y2 / year, location, p4 / province)
(y2 / year, mod, t4 / this)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.1
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.3.0.0
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0.3.0.1
WARNING: makeIds can't find span Id: 0.0.3.1
WARNING: makeIds can't find span Id: 0.0.3.1.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 376,081 microseconds
Sentence: The competitor who is temporarily in second place is the German athlete Bao Lizuo , with a total score of 355.02 points , slightly lower than Wei Lan .

Oracle Span 1:  355.02 => 355.02
Oracle Span 2:  athlete => athlete
Oracle Span 3:  Bao Lizuo => (name :op "Lizuo" :op "Bao")
Oracle Span 4:  competitor => (person :ARG0-of compete-01)
Oracle Span 5:  German => (country :name (name :op "Germany"))
Oracle Span 6:  lower => low
Oracle Span 7:  place => place-01
Oracle Span 8:  points => point
Oracle Span 9:  score => score-01
Oracle Span 10:  slightly => slight
Oracle Span 11:  temporarily => temporary
Oracle Span 12:  total => total-01
Oracle Span 13:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))
NER Entity: (person :name (name :op "Bao" :op "Lizuo"))
NER Entity: (person :name (name :op "Wei" :op "Lan"))
NER Entity: (thing :name (name :op "German"))
Spans:
Span 20-21:  355.02 => 355.02
Span 11-12:  athlete => athlete
Span 12-14:  Bao Lizuo => (name :op "Lizuo" :op "Bao")
Span 1-2:  competitor => (person :ARG0-of compete-01)
Span 10-11:  German => (country :name (name :op "Germany"))
Span 24-25:  lower => low
Span 7-8:  place => place-01
Span 21-22:  points => point
Span 18-19:  score => score-01
Span 23-24:  slightly => slight
Span 4-5:  temporarily => temporary
Span 17-18:  total => total-01
Span 26-28:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))

Langrangian relaxation converged after 30 iterations. Delta = 0.0
Oracle Span 20-21:  355.02 => 355.02
Oracle Span 11-12:  athlete => athlete
Oracle Span 12-14:  Bao Lizuo => (name :op "Lizuo" :op "Bao")
Oracle Span 1-2:  competitor => (person :ARG0-of compete-01)
Oracle Span 10-11:  German => (country :name (name :op "Germany"))
Oracle Span 24-25:  lower => low
Oracle Span 7-8:  place => place-01
Oracle Span 21-22:  points => point
Oracle Span 18-19:  score => score-01
Oracle Span 23-24:  slightly => slight
Oracle Span 4-5:  temporarily => temporary
Oracle Span 17-18:  total => total-01
Oracle Span 26-28:  Wei Lan => (person :name (name :op "Lan" :op "Wei"))

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	competitor	_	NN	NN	_	14	nsubj	_	_
3	who	_	WP	WP	_	4	nsubj	_	_
4	is	_	VBZ	VBZ	_	2	rcmod	_	_
5	temporarily	_	RB	RB	_	4	advmod	_	_
6	in	_	IN	IN	_	4	prep	_	_
7	second	_	JJ	JJ	_	8	amod	_	_
8	place	_	NN	NN	_	6	pobj	_	_
9	is	_	VBZ	VBZ	_	14	cop	_	_
10	the	_	DT	DT	_	14	det	_	_
11	German	_	JJ	JJ	_	14	amod	_	_
12	athlete	_	NN	NN	_	14	nn	_	_
13	Bao	_	NNP	NNP	_	14	nn	_	_
14	Lizuo	_	NNP	NNP	_	0	root	_	_
15	,	_	,	,	_	14	punct	_	_
16	with	_	IN	IN	_	14	prep	_	_
17	a	_	DT	DT	_	19	det	_	_
18	total	_	JJ	JJ	_	19	amod	_	_
19	score	_	NN	NN	_	16	pobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	355.02	_	CD	CD	_	22	num	_	_
22	points	_	NNS	NNS	_	20	pobj	_	_
23	,	_	,	,	_	14	punct	_	_
24	slightly	_	RB	RB	_	25	advmod	_	_
25	lower	_	JJR	JJR	_	14	amod	_	_
26	than	_	IN	IN	_	25	prep	_	_
27	Wei	_	NNP	NNP	_	28	nn	_	_
28	Lan	_	NNP	NNP	_	26	pobj	_	_
29	.	_	.	.	_	14	punct	_	_

Oracle:
(a / athlete, mod, c3 / country)
(a / athlete, name, n / name)
(c2 / compete-01, ARG0, p / person)
(c3 / country, name, n2 / name)
(l / low, compared-to, p5 / person)
(n / name, op, "Bao")
(n / name, op, "Lizuo")
(n2 / name, op, "Germany")
(n3 / name, op, "Lan")
(n3 / name, op, "Wei")
(p / person, domain, a / athlete)
(p2 / place-01, ARG1, p / person)
(p2 / place-01, duration, t / temporary)
(p4 / point, mod, l / low)
(p4 / point, quant, x / 355.02)
(p5 / person, name, n3 / name)
(s / score-01, ARG0, a / athlete)
(s / score-01, ARG1, p4 / point)
(t2 / total-01, ARG1, p4 / point)
(t2 / total-01, ARG2, x / 355.02)

Input(Some(Graph((person :domain (athlete :ARG0-of (score-01 :ARG1 (point :quant (355.02 :ARG2-of (total-01 :ARG1 point)) :mod (low :compared-to (person :name (name :op "Lan" :op "Wei")) :degree (more :degree slight)))) :mod (country :name (name :op "Germany")) :name (name :op "Lizuo" :op "Bao")) :ARG1-of (place-01 :duration temporary :ord (ordinal-entity :value 2)) :ARG0-of compete-01),ArrayBuffer(Span(12,14,List(0, 1, 2),Bao Lizuo,(name :op "Lizuo" :op "Bao"),false), Span(26,28,List(3, 4, 5, 6),Wei Lan,(person :name (name :op "Lan" :op "Wei")),false), Span(10,11,List(7, 8, 9),German,(country :name (name :op "Germany")),false), Span(7,8,List(10),place,place-01,false), Span(11,12,List(11),athlete,athlete,false), Span(18,19,List(12),score,score-01,false), Span(21,22,List(13),points,point,false), Span(20,21,List(14),355.02,355.02,false), Span(17,18,List(15),total,total-01,false), Span(24,25,List(16),lower,low,false), Span(1,2,List(17, 18),competitor,(person :ARG0-of compete-01),false), Span(4,5,List(19),temporarily,temporary,false), Span(23,24,List(20),slightly,slight,false)),Map(2 -> "Bao", 5 -> "Lan", 12 -> score-01, 15 -> total-01, 8 -> name, 18 -> compete-01, 7 -> country, 17 -> person, 1 -> "Lizuo", 4 -> name, 11 -> athlete, 14 -> 355.02, 20 -> slight, 6 -> "Wei", 9 -> "Germany", 0 -> name, 16 -> low, 19 -> temporary, 10 -> place-01, 3 -> person, 13 -> point),Map(n -> name, s2 -> slight, p5 -> person, t -> temporary, p2 -> place-01, s -> score-01, p -> person, a -> athlete, c3 -> country, n3 -> name, p4 -> point, x -> 355.02, t2 -> total-01, l -> low, c2 -> compete-01, n2 -> name))),[Ljava.lang.String;@7db12bb6,Annotation([Ljava.lang.String;@783a467b,[Ljava.lang.String;@272113c4,[Ljava.lang.String;@73e9cf30),Annotation([Ljava.lang.String;@771a660,[Ljava.lang.String;@2d52216b,[Ledu.cmu.lti.nlp.amr.Dependency;@242b836),Annotation([Ljava.lang.String;@3f6f6701,[Ljava.lang.String;@3527942a,[Ljava.lang.String;@942a29c),Annotation([Ljava.lang.String;@1ed6388a,[Ljava.lang.String;@5a45133e,[Ledu.cmu.lti.nlp.amr.Entity;@534a5a98))
AMR:
(a / athlete, mod, c3 / country)
(a / athlete, name, n / name)
(c2 / compete-01, ARG0, p / person)
(c2 / compete-01, ARG1, t / temporary)
(c3 / country, name, n2 / name)
(l / low, location, p5 / person)
(l / low, mod, s2 / slight)
(n / name, domain, p / person)
(n / name, op, "Bao")
(n / name, op, "Lizuo")
(n2 / name, op, "Germany")
(n3 / name, op, "Lan")
(n3 / name, op, "Wei")
(p2 / place-01, ARG0, p5 / person)
(p2 / place-01, time, t / temporary)
(p4 / point, quant, x / 355.02)
(p5 / person, name, n3 / name)
(s / score-01, ARG1, p4 / point)
(t2 / total-01, ARG0, l / low)
(t2 / total-01, ARG1, s / score-01)

WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.2.0.0.1
WARNING: makeIds can't find span Id: 0.2.2.0.0.1.0
WARNING: makeIds can't find span Id: 0.2.2.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.2.2.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.2.1.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.2.2
WARNING: makeIds can't find span Id: 0.2.2.0
WARNING: makeIds can't find span Id: 0.2.2.0.1
WARNING: makeIds can't find span Id: 0.2.2.0.1.0
WARNING: makeIds can't find span Id: 0.2.2.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.2.2.0.0.0.0
Decoded in 695,769 microseconds
Sentence: The competitor from Zimbabwe , Si Aiwan , who is temporarily in third place , has a total score of 354.39 points .

Oracle Span 1:  354.39 => 354.39
Oracle Span 2:  competitor => compete-01
Oracle Span 3:  place => place-01
Oracle Span 4:  points => point
Oracle Span 5:  score => score-01
Oracle Span 6:  Si Aiwan => (person :name (name :op "Aiwan" :op "Si"))
Oracle Span 7:  temporarily => temporary
Oracle Span 8:  total => total-01
Oracle Span 9:  Zimbabwe => (country :name (name :op "Zimbabwe"))
NER Entity: (person :name (name :op "Si" :op "Aiwan"))
NER Entity: (country :name (name :op "Zimbabwe"))
Spans:
Span 20-21:  354.39 => 354.39
Span 1-2:  competitor => compete-01
Span 13-14:  place => place-01
Span 21-22:  points => point
Span 18-19:  score => score-01
Span 5-7:  Si Aiwan => (person :name (name :op "Aiwan" :op "Si"))
Span 10-11:  temporarily => temporary
Span 17-18:  total => total-01
Span 3-4:  Zimbabwe => (country :name (name :op "Zimbabwe"))

Langrangian relaxation converged after 37 iterations. Delta = 0.0
Oracle Span 20-21:  354.39 => 354.39
Oracle Span 1-2:  competitor => compete-01
Oracle Span 13-14:  place => place-01
Oracle Span 21-22:  points => point
Oracle Span 18-19:  score => score-01
Oracle Span 5-7:  Si Aiwan => (person :name (name :op "Aiwan" :op "Si"))
Oracle Span 10-11:  temporarily => temporary
Oracle Span 17-18:  total => total-01
Oracle Span 3-4:  Zimbabwe => (country :name (name :op "Zimbabwe"))

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	competitor	_	NN	NN	_	16	nsubj	_	_
3	from	_	IN	IN	_	2	prep	_	_
4	Zimbabwe	_	NNP	NNP	_	7	nn	_	_
5	,	_	,	,	_	7	punct	_	_
6	Si	_	NNP	NNP	_	7	appos	_	_
7	Aiwan	_	NNP	NNP	_	3	pobj	_	_
8	,	_	,	,	_	2	punct	_	_
9	who	_	WP	WP	_	10	nsubj	_	_
10	is	_	VBZ	VBZ	_	2	rcmod	_	_
11	temporarily	_	RB	RB	_	10	advmod	_	_
12	in	_	IN	IN	_	10	prep	_	_
13	third	_	JJ	JJ	_	14	amod	_	_
14	place	_	NN	NN	_	12	pobj	_	_
15	,	_	,	,	_	2	punct	_	_
16	has	_	VBZ	VBZ	_	0	root	_	_
17	a	_	DT	DT	_	19	det	_	_
18	total	_	JJ	JJ	_	19	amod	_	_
19	score	_	NN	NN	_	16	dobj	_	_
20	of	_	IN	IN	_	19	prep	_	_
21	354.39	_	CD	CD	_	22	num	_	_
22	points	_	NNS	NNS	_	20	pobj	_	_
23	.	_	.	.	_	16	punct	_	_

Oracle:
(c2 / compete-01, ARG0, p3 / person)
(c3 / country, name, n2 / name)
(n / name, op, "Aiwan")
(n / name, op, "Si")
(n2 / name, op, "Zimbabwe")
(p / place-01, ARG1, p3 / person)
(p / place-01, duration, t / temporary)
(p3 / person, name, n / name)
(p3 / person, source, c3 / country)
(p4 / point, quant, x / 354.39)
(s / score-01, ARG0, p3 / person)
(s / score-01, ARG1, p4 / point)
(t2 / total-01, ARG1, p4 / point)
(t2 / total-01, ARG2, x / 354.39)

Input(Some(Graph((score-01 :ARG1 (point :quant (354.39 :ARG2-of (total-01 :ARG1 point))) :ARG0 (person :ARG1-of (place-01 :duration temporary :ord (ordinal-entity :value 3)) :source (country :name (name :op "Zimbabwe")) :ARG0-of compete-01 :name (name :op "Aiwan" :op "Si"))),ArrayBuffer(Span(5,7,List(0, 1, 2, 3),Si Aiwan,(person :name (name :op "Aiwan" :op "Si")),false), Span(3,4,List(4, 5, 6),Zimbabwe,(country :name (name :op "Zimbabwe")),false), Span(18,19,List(7),score,score-01,false), Span(21,22,List(8),points,point,false), Span(20,21,List(9),354.39,354.39,false), Span(17,18,List(10),total,total-01,false), Span(13,14,List(11),place,place-01,false), Span(1,2,List(12),competitor,compete-01,false), Span(10,11,List(13),temporarily,temporary,false)),Map(2 -> "Aiwan", 5 -> name, 12 -> compete-01, 8 -> point, 7 -> score-01, 1 -> name, 4 -> country, 11 -> place-01, 6 -> "Zimbabwe", 9 -> 354.39, 0 -> person, 10 -> total-01, 3 -> "Si", 13 -> temporary),Map(n -> name, t -> temporary, s -> score-01, p -> place-01, p4 -> point, c3 -> country, t2 -> total-01, x -> 354.39, c2 -> compete-01, n2 -> name, p3 -> person))),[Ljava.lang.String;@4f80542f,Annotation([Ljava.lang.String;@60bd273d,[Ljava.lang.String;@121314f7,[Ljava.lang.String;@130c12b7),Annotation([Ljava.lang.String;@5e600dd5,[Ljava.lang.String;@576d5deb,[Ledu.cmu.lti.nlp.amr.Dependency;@5d534f5d),Annotation([Ljava.lang.String;@2e3967ea,[Ljava.lang.String;@70e9c95d,[Ljava.lang.String;@4d5650ae),Annotation([Ljava.lang.String;@a38c7fe,[Ljava.lang.String;@6fdbe764,[Ledu.cmu.lti.nlp.amr.Entity;@51c668e3))
AMR:
(c2 / compete-01, ARG0, p3 / person)
(c2 / compete-01, ARG1, c3 / country)
(c3 / country, name, n2 / name)
(n / name, op, "Aiwan")
(n / name, op, "Si")
(n2 / name, op, "Zimbabwe")
(p / place-01, ARG1, t2 / total-01)
(p / place-01, time, t / temporary)
(p3 / person, name, n / name)
(p4 / point, quant, x / 354.39)
(s / score-01, ARG1, p3 / person)
(s / score-01, ARG2, p4 / point)
(t2 / total-01, ARG1, s / score-01)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.2.0
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.3.1
Decoded in 429,771 microseconds
Sentence: After the competition , the chief coach of the Chinese diving team said to our agency 's reporter : " Sheng Chen is a little nervous today . "

Oracle Span 1:  After => after
Oracle Span 2:  agency => (have-org-role-91 :ARG1 agency)
Oracle Span 3:  chief => chief
Oracle Span 4:  Chinese => (country :name (name :op "China"))
Oracle Span 5:  coach => (person :ARG0-of coach-01)
Oracle Span 6:  competition => compete-01
Oracle Span 7:  diving => dive-01
Oracle Span 8:  little => little
Oracle Span 9:  nervous => nervous-41
Oracle Span 10:  reporter => report-01
Oracle Span 11:  said => say-01
Oracle Span 12:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 13:  team => team
Oracle Span 14:  today => today
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 0-1:  After => after
Span 15-16:  agency => (have-org-role-91 :ARG1 agency)
Span 5-6:  chief => chief
Span 9-10:  Chinese => (country :name (name :op "China"))
Span 6-7:  coach => (person :ARG0-of coach-01)
Span 2-3:  competition => compete-01
Span 10-11:  diving => dive-01
Span 24-25:  little => little
Span 25-26:  nervous => nervous-41
Span 17-18:  reporter => report-01
Span 12-13:  said => say-01
Span 20-22:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Span 11-12:  team => team
Span 26-27:  today => today

Langrangian relaxation converged after 27 iterations. Delta = 0.0
Oracle Span 0-1:  After => after
Oracle Span 15-16:  agency => (have-org-role-91 :ARG1 agency)
Oracle Span 5-6:  chief => chief
Oracle Span 9-10:  Chinese => (country :name (name :op "China"))
Oracle Span 6-7:  coach => (person :ARG0-of coach-01)
Oracle Span 2-3:  competition => compete-01
Oracle Span 10-11:  diving => dive-01
Oracle Span 24-25:  little => little
Oracle Span 25-26:  nervous => nervous-41
Oracle Span 17-18:  reporter => report-01
Oracle Span 12-13:  said => say-01
Oracle Span 20-22:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 11-12:  team => team
Oracle Span 26-27:  today => today

Dependencies:
1	After	_	IN	IN	_	13	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	competition	_	NN	NN	_	1	pobj	_	_
4	,	_	,	,	_	13	punct	_	_
5	the	_	DT	DT	_	7	det	_	_
6	chief	_	JJ	JJ	_	7	amod	_	_
7	coach	_	NN	NN	_	13	nsubj	_	_
8	of	_	IN	IN	_	7	prep	_	_
9	the	_	DT	DT	_	12	det	_	_
10	Chinese	_	JJ	JJ	_	12	amod	_	_
11	diving	_	JJ	JJ	_	12	amod	_	_
12	team	_	NN	NN	_	8	pobj	_	_
13	said	_	VBD	VBD	_	0	root	_	_
14	to	_	TO	TO	_	13	prep	_	_
15	our	_	PRP$	PRP$	_	16	poss	_	_
16	agency	_	NN	NN	_	18	poss	_	_
17	's	_	POS	POS	_	16	possessive	_	_
18	reporter	_	NN	NN	_	14	pobj	_	_
19	:	_	:	:	_	13	punct	_	_
20	"	_	''	''	_	13	punct	_	_
21	Sheng	_	NNP	NNP	_	22	nn	_	_
22	Chen	_	NNP	NNP	_	26	nsubj	_	_
23	is	_	VBZ	VBZ	_	26	cop	_	_
24	a	_	DT	DT	_	25	det	_	_
25	little	_	RB	RB	_	26	npadvmod	_	_
26	nervous	_	JJ	JJ	_	13	parataxis	_	_
27	today	_	NN	NN	_	26	tmod	_	_
28	.	_	.	.	_	13	punct	_	_
29	"	_	''	''	_	13	punct	_	_

Oracle:
(a2 / after, op, c / compete-01)
(c3 / coach-01, ARG0, p2 / person)
(c3 / coach-01, ARG1, t / team)
(c3 / coach-01, mod, c5 / chief)
(c4 / country, name, n / name)
(d / dive-01, ARG0, t / team)
(h / have-org-role-91, ARG1, a / agency)
(h / have-org-role-91, ARG3, r / report-01)
(n / name, op, "China")
(n2 / nervous-41, ARG1, p4 / person)
(n2 / nervous-41, degree, l / little)
(n2 / nervous-41, time, t2 / today)
(n3 / name, op, "Chen")
(n3 / name, op, "Sheng")
(p4 / person, name, n3 / name)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, n2 / nervous-41)
(s2 / say-01, time, a2 / after)
(t / team, mod, c4 / country)

Input(Some(Graph((say-01 :time (after :op compete-01) :ARG2 (person :ARG0-of (have-org-role-91 :ARG3 report-01 :ARG1 (agency :poss we))) :ARG1 (nervous-41 :time today :degree little :ARG1 (person :name (name :op "Chen" :op "Sheng"))) :ARG0 (person :ARG0-of (coach-01 :mod chief :ARG1 (team :mod (country :name (name :op "China")) :ARG0-of dive-01)))),ArrayBuffer(Span(20,22,List(0, 1, 2, 3),Sheng Chen,(person :name (name :op "Chen" :op "Sheng")),false), Span(9,10,List(4, 5, 6),Chinese,(country :name (name :op "China")),false), Span(12,13,List(7),said,say-01,false), Span(0,1,List(8),After,after,false), Span(15,16,List(9, 10),agency,(have-org-role-91 :ARG1 agency),false), Span(17,18,List(11),reporter,report-01,false), Span(25,26,List(12),nervous,nervous-41,false), Span(26,27,List(13),today,today,false), Span(24,25,List(14),little,little,false), Span(6,7,List(15, 16),coach,(person :ARG0-of coach-01),false), Span(5,6,List(17),chief,chief,false), Span(11,12,List(18),team,team,false), Span(10,11,List(19),diving,dive-01,false), Span(2,3,List(20),competition,compete-01,false)),Map(2 -> "Chen", 5 -> name, 12 -> nervous-41, 15 -> person, 8 -> after, 18 -> team, 7 -> say-01, 17 -> chief, 1 -> name, 4 -> country, 11 -> report-01, 14 -> little, 20 -> compete-01, 6 -> "China", 9 -> have-org-role-91, 0 -> person, 16 -> coach-01, 19 -> dive-01, 10 -> agency, 3 -> "Sheng", 13 -> today),Map(n -> name, h -> have-org-role-91, s2 -> say-01, t -> team, p2 -> person, c4 -> country, d -> dive-01, c3 -> coach-01, a -> agency, n3 -> name, p4 -> person, t2 -> today, r -> report-01, a2 -> after, c -> compete-01, l -> little, n2 -> nervous-41, c5 -> chief))),[Ljava.lang.String;@2e6a8155,Annotation([Ljava.lang.String;@6221a451,[Ljava.lang.String;@52719fb6,[Ljava.lang.String;@3012646b),Annotation([Ljava.lang.String;@4a883b15,[Ljava.lang.String;@25641d39,[Ledu.cmu.lti.nlp.amr.Dependency;@7b36aa0c),Annotation([Ljava.lang.String;@5824a83d,[Ljava.lang.String;@537f60bf,[Ljava.lang.String;@5677323c),Annotation([Ljava.lang.String;@18df8434,[Ljava.lang.String;@65c7a252,[Ledu.cmu.lti.nlp.amr.Entity;@4d154ccd))
AMR:
(a2 / after, op, c / compete-01)
(c / compete-01, ARG1, l / little)
(c3 / coach-01, ARG0, p2 / person)
(c3 / coach-01, ARG1, t / team)
(c4 / country, name, n / name)
(d / dive-01, ARG1, t / team)
(h / have-org-role-91, ARG1, a / agency)
(n / name, op, "China")
(n2 / nervous-41, ARG0, t2 / today)
(n2 / nervous-41, ARG1, p4 / person)
(n2 / nervous-41, ARG6, l / little)
(n3 / name, op, "Chen")
(n3 / name, op, "Sheng")
(p4 / person, name, n3 / name)
(r / report-01, ARG0, a / agency)
(r / report-01, ARG1, c5 / chief)
(s2 / say-01, ARG0, p2 / person)
(s2 / say-01, ARG1, r / report-01)
(s2 / say-01, time, a2 / after)
(t / team, mod, c4 / country)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.0.0
WARNING: makeIds can't find span Id: 0.2.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.3.0
Decoded in 721,211 microseconds
Sentence: He also said : " Our athletes are not very used to carrying out competition under strong sunlight . "

Oracle Span 1:  also => also
Oracle Span 2:  athletes => athlete
Oracle Span 3:  competition => compete-01
Oracle Span 4:  He => he
Oracle Span 5:  said => say-01
Oracle Span 6:  strong => strong
Oracle Span 7:  sunlight => sunlight
Oracle Span 8:  under => under
Oracle Span 9:  used => use-02
Oracle Span 10:  very => very
Spans:
Span 1-2:  also => also
Span 6-7:  athletes => athlete
Span 14-15:  competition => compete-01
Span 0-1:  He => he
Span 2-3:  said => say-01
Span 16-17:  strong => strong
Span 17-18:  sunlight => sunlight
Span 15-16:  under => under
Span 10-11:  used => use-02
Span 9-10:  very => very

Langrangian relaxation converged after 22 iterations. Delta = 0.0
Oracle Span 1-2:  also => also
Oracle Span 6-7:  athletes => athlete
Oracle Span 14-15:  competition => compete-01
Oracle Span 0-1:  He => he
Oracle Span 2-3:  said => say-01
Oracle Span 16-17:  strong => strong
Oracle Span 17-18:  sunlight => sunlight
Oracle Span 15-16:  under => under
Oracle Span 10-11:  used => use-02
Oracle Span 9-10:  very => very

Dependencies:
1	He	_	PRP	PRP	_	3	nsubj	_	_
2	also	_	RB	RB	_	3	advmod	_	_
3	said	_	VBD	VBD	_	0	root	_	_
4	:	_	:	:	_	3	punct	_	_
5	"	_	''	''	_	3	punct	_	_
6	Our	_	PRP$	PRP$	_	7	poss	_	_
7	athletes	_	NNS	NNS	_	11	nsubjpass	_	_
8	are	_	VBP	VBP	_	11	auxpass	_	_
9	not	_	RB	RB	_	11	neg	_	_
10	very	_	RB	RB	_	11	advmod	_	_
11	used	_	VBN	VBN	_	3	parataxis	_	_
12	to	_	TO	TO	_	11	prep	_	_
13	carrying	_	VBG	VBG	_	12	pcomp	_	_
14	out	_	RP	RP	_	13	prt	_	_
15	competition	_	NN	NN	_	13	dobj	_	_
16	under	_	IN	IN	_	13	prep	_	_
17	strong	_	JJ	JJ	_	18	amod	_	_
18	sunlight	_	NN	NN	_	16	pobj	_	_
19	.	_	.	.	_	3	punct	_	_
20	"	_	''	''	_	3	punct	_	_

Oracle:
(c2 / compete-01, ARG0, a2 / athlete)
(c2 / compete-01, location, u / under)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, u2 / use-02)
(s / say-01, mod, a3 / also)
(s2 / sunlight, mod, s3 / strong)
(u / under, op, s2 / sunlight)
(u2 / use-02, ARG0, a2 / athlete)
(u2 / use-02, ARG1, c2 / compete-01)
(u2 / use-02, degree, v / very)

Input(Some(Graph((say-01 :mod also :ARG1 (use-02 :degree very :ARG1 (compete-01 :location (under :op (sunlight :mod strong)) :ARG0 athlete) :ARG0 (athlete :poss we) :polarity -) :ARG0 he),ArrayBuffer(Span(2,3,List(0),said,say-01,false), Span(1,2,List(1),also,also,false), Span(10,11,List(2),used,use-02,false), Span(9,10,List(3),very,very,false), Span(15,16,List(4),under,under,false), Span(17,18,List(5),sunlight,sunlight,false), Span(16,17,List(6),strong,strong,false), Span(6,7,List(7),athletes,athlete,false), Span(0,1,List(8),He,he,false), Span(14,15,List(9),competition,compete-01,false)),Map(2 -> use-02, 5 -> sunlight, 8 -> he, 7 -> athlete, 1 -> also, 4 -> under, 6 -> strong, 9 -> compete-01, 0 -> say-01, 3 -> very),Map(h -> he, s2 -> sunlight, u2 -> use-02, a3 -> also, s -> say-01, v -> very, a2 -> athlete, s3 -> strong, u -> under, c2 -> compete-01))),[Ljava.lang.String;@229c6181,Annotation([Ljava.lang.String;@4686afc2,[Ljava.lang.String;@1e0b4072,[Ljava.lang.String;@791f145a),Annotation([Ljava.lang.String;@38cee291,[Ljava.lang.String;@4b45a2f5,[Ledu.cmu.lti.nlp.amr.Dependency;@f09733f),Annotation([Ljava.lang.String;@e350b40,[Ljava.lang.String;@41a0aa7d,[Ljava.lang.String;@2794eab6),Annotation([Ljava.lang.String;@6340e5f0,[Ljava.lang.String;@45099dd3,[Ledu.cmu.lti.nlp.amr.Entity;@13e344d))
AMR:
(c2 / compete-01, ARG1, u2 / use-02)
(c2 / compete-01, location, u / under)
(s / say-01, ARG0, h / he)
(s / say-01, ARG1, a2 / athlete)
(s / say-01, mod, a3 / also)
(s2 / sunlight, mod, s3 / strong)
(u / under, op, s2 / sunlight)
(u2 / use-02, ARG1, a2 / athlete)
(u2 / use-02, manner, v / very)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.2
Decoded in 216,158 microseconds
Sentence: At home , they carry out indoor training mostly .

Oracle Span 1:  home => home
Oracle Span 2:  indoor => indoor
Oracle Span 3:  mostly => most
Oracle Span 4:  they => they
Oracle Span 5:  training => train-01
Spans:
Span 1-2:  home => home
Span 6-7:  indoor => indoor
Span 8-9:  mostly => most
Span 3-4:  they => they
Span 7-8:  training => train-01

Langrangian relaxation converged after 15 iterations. Delta = 0.0
Oracle Span 1-2:  home => home
Oracle Span 6-7:  indoor => indoor
Oracle Span 8-9:  mostly => most
Oracle Span 3-4:  they => they
Oracle Span 7-8:  training => train-01

Dependencies:
1	At	_	IN	IN	_	5	prep	_	_
2	home	_	NN	NN	_	1	pobj	_	_
3	,	_	,	,	_	5	punct	_	_
4	they	_	PRP	PRP	_	5	nsubj	_	_
5	carry	_	VBP	VBP	_	0	root	_	_
6	out	_	IN	IN	_	5	prep	_	_
7	indoor	_	JJ	JJ	_	8	amod	_	_
8	training	_	NN	NN	_	6	pobj	_	_
9	mostly	_	RB	RB	_	5	advmod	_	_
10	.	_	.	.	_	5	punct	_	_

Oracle:
(t2 / train-01, ARG2, t / they)
(t2 / train-01, degree, m / most)
(t2 / train-01, location, h / home)
(t2 / train-01, location, i / indoor)

Input(Some(Graph((train-01 :location home :degree most :location indoor :ARG2 they),ArrayBuffer(Span(7,8,List(0),training,train-01,false), Span(1,2,List(1),home,home,false), Span(6,7,List(2),indoor,indoor,false), Span(3,4,List(3),they,they,false), Span(8,9,List(4),mostly,most,false)),Map(2 -> indoor, 1 -> home, 4 -> most, 0 -> train-01, 3 -> they),Map(h -> home, t -> they, m -> most, t2 -> train-01, i -> indoor))),[Ljava.lang.String;@1ffaf86,Annotation([Ljava.lang.String;@6574a52c,[Ljava.lang.String;@6c1a5b54,[Ljava.lang.String;@1c7696c6),Annotation([Ljava.lang.String;@60099951,[Ljava.lang.String;@20140db9,[Ledu.cmu.lti.nlp.amr.Dependency;@1e6a3214),Annotation([Ljava.lang.String;@368247b9,[Ljava.lang.String;@1a6d8329,[Ljava.lang.String;@1a942c18),Annotation([Ljava.lang.String;@55a147cc,[Ljava.lang.String;@71ba6d4e,[Ledu.cmu.lti.nlp.amr.Entity;@738dc9b))
AMR:
(m / most, domain, t / they)
(t2 / train-01, ARG0, h / home)
(t2 / train-01, ARG1, i / indoor)
(t2 / train-01, ARG6, m / most)

WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
Decoded in 50,130 microseconds
Sentence: Looks like we still need to train more outdoors . "

Oracle Span 1:  Looks => look-02
Oracle Span 2:  more => more
Oracle Span 3:  need => need-01
Oracle Span 4:  outdoors => outdoor
Oracle Span 5:  still => still
Oracle Span 6:  train => train-01
Oracle Span 7:  we => we
Spans:
Span 0-1:  Looks => look-02
Span 7-8:  more => more
Span 4-5:  need => need-01
Span 8-9:  outdoors => outdoor
Span 3-4:  still => still
Span 6-7:  train => train-01
Span 2-3:  we => we

Langrangian relaxation converged after 24 iterations. Delta = 0.0
Oracle Span 0-1:  Looks => look-02
Oracle Span 7-8:  more => more
Oracle Span 4-5:  need => need-01
Oracle Span 8-9:  outdoors => outdoor
Oracle Span 3-4:  still => still
Oracle Span 6-7:  train => train-01
Oracle Span 2-3:  we => we

Dependencies:
1	Looks	_	NNS	NNS	_	2	nsubj	_	_
2	like	_	VBP	VBP	_	0	root	_	_
3	we	_	PRP	PRP	_	5	nsubj	_	_
4	still	_	RB	RB	_	5	advmod	_	_
5	need	_	VBP	VBP	_	2	ccomp	_	_
6	to	_	TO	TO	_	7	aux	_	_
7	train	_	VB	VB	_	5	xcomp	_	_
8	more	_	JJR	JJR	_	9	amod	_	_
9	outdoors	_	NNS	NNS	_	7	dobj	_	_
10	.	_	.	.	_	2	punct	_	_
11	"	_	''	''	_	2	punct	_	_

Oracle:
(l / look-02, ARG1, n / need-01)
(n / need-01, ARG0, w / we)
(n / need-01, ARG1, t / train-01)
(n / need-01, mod, s / still)
(t / train-01, ARG0, w / we)
(t / train-01, ARG2, w / we)
(t / train-01, location, o / outdoor)
(t / train-01, quant, m / more)

Input(Some(Graph((look-02 :ARG1 (need-01 :mod still :ARG1 (train-01 :location outdoor :quant more :ARG0 we :ARG2 we) :ARG0 we)),ArrayBuffer(Span(0,1,List(0),Looks,look-02,false), Span(4,5,List(1),need,need-01,false), Span(3,4,List(2),still,still,false), Span(6,7,List(3),train,train-01,false), Span(8,9,List(4),outdoors,outdoor,false), Span(7,8,List(5),more,more,false), Span(2,3,List(6),we,we,false)),Map(2 -> still, 5 -> more, 1 -> need-01, 4 -> outdoor, 6 -> we, 0 -> look-02, 3 -> train-01),Map(w -> we, n -> need-01, t -> train-01, s -> still, m -> more, l -> look-02, o -> outdoor))),[Ljava.lang.String;@3c77d488,Annotation([Ljava.lang.String;@63376bed,[Ljava.lang.String;@4145bad8,[Ljava.lang.String;@d86a6f),Annotation([Ljava.lang.String;@2892d68,[Ljava.lang.String;@5ab956d7,[Ledu.cmu.lti.nlp.amr.Dependency;@3646a422),Annotation([Ljava.lang.String;@750e2b97,[Ljava.lang.String;@3e27aa33,[Ljava.lang.String;@2e385cce),Annotation([Ljava.lang.String;@2ddc9a9f,[Ljava.lang.String;@298a5e20,[Ledu.cmu.lti.nlp.amr.Entity;@2a7f1f10))
AMR:
(n / need-01, ARG0, l / look-02)
(n / need-01, ARG1, t / train-01)
(n / need-01, ARG6, w / we)
(n / need-01, mod, s / still)
(o / outdoor, quant, m / more)
(t / train-01, ARG1, o / outdoor)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
Decoded in 119,906 microseconds
Sentence: He felt that , there were more new competitors from our country participating in this competition .

Oracle Span 1:  competition => compete-01
Oracle Span 2:  competitors => (person :ARG0-of compete-01)
Oracle Span 3:  country => country
Oracle Span 4:  felt => feel-02
Oracle Span 5:  He => he
Oracle Span 6:  more => more
Oracle Span 7:  new => new
Oracle Span 8:  participating => participate-01
Oracle Span 9:  this => this
Spans:
Span 15-16:  competition => compete-01
Span 8-9:  competitors => (person :ARG0-of compete-01)
Span 11-12:  country => country
Span 1-2:  felt => feel-02
Span 0-1:  He => he
Span 6-7:  more => more
Span 7-8:  new => new
Span 12-13:  participating => participate-01
Span 14-15:  this => this

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 15-16:  competition => compete-01
Oracle Span 8-9:  competitors => (person :ARG0-of compete-01)
Oracle Span 11-12:  country => country
Oracle Span 1-2:  felt => feel-02
Oracle Span 0-1:  He => he
Oracle Span 6-7:  more => more
Oracle Span 7-8:  new => new
Oracle Span 12-13:  participating => participate-01
Oracle Span 14-15:  this => this

Dependencies:
1	He	_	PRP	PRP	_	2	nsubj	_	_
2	felt	_	VBD	VBD	_	0	root	_	_
3	that	_	IN	IN	_	6	mark	_	_
4	,	_	,	,	_	6	punct	_	_
5	there	_	EX	EX	_	6	expl	_	_
6	were	_	VBD	VBD	_	2	ccomp	_	_
7	more	_	JJR	JJR	_	9	amod	_	_
8	new	_	JJ	JJ	_	9	amod	_	_
9	competitors	_	NNS	NNS	_	6	nsubj	_	_
10	from	_	IN	IN	_	6	prep	_	_
11	our	_	PRP$	PRP$	_	12	poss	_	_
12	country	_	NN	NN	_	10	pobj	_	_
13	participating	_	VBG	VBG	_	12	vmod	_	_
14	in	_	IN	IN	_	13	prep	_	_
15	this	_	DT	DT	_	16	det	_	_
16	competition	_	NN	NN	_	14	pobj	_	_
17	.	_	.	.	_	2	punct	_	_

Oracle:
(c / compete-01, ARG0, p / person)
(c3 / compete-01, mod, t / this)
(f / feel-02, ARG0, h / he)
(f / feel-02, ARG1, p / person)
(p / person, mod, n / new)
(p / person, quant, m / more)
(p / person, source, c2 / country)
(p2 / participate-01, ARG0, p / person)
(p2 / participate-01, ARG1, c3 / compete-01)

Input(Some(Graph((feel-02 :ARG1 (person :ARG0-of (participate-01 :ARG1 (compete-01 :mod this)) :source (country :poss we) :mod new :ARG0-of compete-01 :quant more) :ARG0 he),ArrayBuffer(Span(1,2,List(0),felt,feel-02,false), Span(6,7,List(1),more,more,false), Span(7,8,List(2),new,new,false), Span(11,12,List(3),country,country,false), Span(12,13,List(4),participating,participate-01,false), Span(14,15,List(5),this,this,false), Span(0,1,List(6),He,he,false), Span(8,9,List(7, 8),competitors,(person :ARG0-of compete-01),false), Span(15,16,List(9),competition,compete-01,false)),Map(2 -> new, 5 -> this, 8 -> compete-01, 7 -> person, 1 -> more, 4 -> participate-01, 6 -> he, 9 -> compete-01, 0 -> feel-02, 3 -> country),Map(n -> new, h -> he, t -> this, p2 -> participate-01, m -> more, p -> person, c3 -> compete-01, c -> compete-01, f -> feel-02, c2 -> country))),[Ljava.lang.String;@46cdf8bd,Annotation([Ljava.lang.String;@f0c8a99,[Ljava.lang.String;@740cae06,[Ljava.lang.String;@26d9b808),Annotation([Ljava.lang.String;@f78a47e,[Ljava.lang.String;@644baf4a,[Ledu.cmu.lti.nlp.amr.Dependency;@7526515b),Annotation([Ljava.lang.String;@1ed4ae0f,[Ljava.lang.String;@54c5a2ff,[Ljava.lang.String;@6d4d66d2),Annotation([Ljava.lang.String;@2a265ea9,[Ljava.lang.String;@11392934,[Ledu.cmu.lti.nlp.amr.Entity;@6892b3b6))
AMR:
(c / compete-01, ARG0, p / person)
(c / compete-01, ARG1, m / more)
(c3 / compete-01, ARG1, n / new)
(c3 / compete-01, mod, t / this)
(f / feel-02, ARG0, h / he)
(f / feel-02, ARG1, p2 / participate-01)
(p / person, mod, n / new)
(p2 / participate-01, ARG0, c2 / country)
(p2 / participate-01, ARG1, c3 / compete-01)

WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.4
WARNING: makeIds can't find span Id: 0.1.4.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.4.0
Decoded in 224,874 microseconds
Sentence: They still lack experience in international competitions .

Oracle Span 1:  competitions => compete-01
Oracle Span 2:  experience => experience-01
Oracle Span 3:  international => international
Oracle Span 4:  lack => lack-01
Oracle Span 5:  still => still
Oracle Span 6:  They => they
Spans:
Span 6-7:  competitions => compete-01
Span 3-4:  experience => experience-01
Span 5-6:  international => international
Span 2-3:  lack => lack-01
Span 1-2:  still => still
Span 0-1:  They => they

Langrangian relaxation converged after 5 iterations. Delta = 0.0
Oracle Span 6-7:  competitions => compete-01
Oracle Span 3-4:  experience => experience-01
Oracle Span 5-6:  international => international
Oracle Span 2-3:  lack => lack-01
Oracle Span 1-2:  still => still
Oracle Span 0-1:  They => they

Dependencies:
1	They	_	PRP	PRP	_	3	nsubj	_	_
2	still	_	RB	RB	_	3	advmod	_	_
3	lack	_	VBP	VBP	_	0	root	_	_
4	experience	_	NN	NN	_	3	dobj	_	_
5	in	_	IN	IN	_	4	prep	_	_
6	international	_	JJ	JJ	_	7	amod	_	_
7	competitions	_	NNS	NNS	_	5	pobj	_	_
8	.	_	.	.	_	3	punct	_	_

Oracle:
(c / compete-01, mod, i / international)
(e / experience-01, ARG0, t / they)
(e / experience-01, ARG1, c / compete-01)
(l / lack-01, ARG0, t / they)
(l / lack-01, ARG1, e / experience-01)
(l / lack-01, time, s / still)

Input(Some(Graph((lack-01 :time still :ARG1 (experience-01 :ARG1 (compete-01 :mod international) :ARG0 they) :ARG0 they),ArrayBuffer(Span(2,3,List(0),lack,lack-01,false), Span(1,2,List(1),still,still,false), Span(3,4,List(2),experience,experience-01,false), Span(5,6,List(3),international,international,false), Span(0,1,List(4),They,they,false), Span(6,7,List(5),competitions,compete-01,false)),Map(2 -> experience-01, 5 -> compete-01, 1 -> still, 4 -> they, 0 -> lack-01, 3 -> international),Map(e -> experience-01, t -> they, s -> still, i -> international, c -> compete-01, l -> lack-01))),[Ljava.lang.String;@6e6f2380,Annotation([Ljava.lang.String;@76a4ebf2,[Ljava.lang.String;@2e8c1c9b,[Ljava.lang.String;@53fe15ff),Annotation([Ljava.lang.String;@449a4f23,[Ljava.lang.String;@1530c739,[Ledu.cmu.lti.nlp.amr.Dependency;@5b1669c0),Annotation([Ljava.lang.String;@78e4deb0,[Ljava.lang.String;@6e9175d8,[Ljava.lang.String;@7d0b7e3c),Annotation([Ljava.lang.String;@15bb5034,[Ljava.lang.String;@4b741d6d,[Ledu.cmu.lti.nlp.amr.Entity;@2eae8e6e))
AMR:
(c / compete-01, mod, i / international)
(e / experience-01, ARG1, c / compete-01)
(l / lack-01, ARG0, t / they)
(l / lack-01, ARG1, e / experience-01)
(l / lack-01, mod, s / still)

WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.0
Decoded in 36,060 microseconds
Sentence: The preliminary competition for the women 's 10 - meter platform diving will be held this afternoon .

Oracle Span 1:  10 => 10
Oracle Span 2:  afternoon => afternoon
Oracle Span 3:  competition => compete-01
Oracle Span 4:  diving => dive-01
Oracle Span 5:  held => hold-04
Oracle Span 6:  meter => (distance-quantity :unit meter)
Oracle Span 7:  platform => platform
Oracle Span 8:  preliminary => preliminary
Oracle Span 9:  this => this
Oracle Span 10:  women => woman
Spans:
Span 7-8:  10 => 10
Span 16-17:  afternoon => afternoon
Span 2-3:  competition => compete-01
Span 11-12:  diving => dive-01
Span 14-15:  held => hold-04
Span 9-10:  meter => (distance-quantity :unit meter)
Span 10-11:  platform => platform
Span 1-2:  preliminary => preliminary
Span 15-16:  this => this
Span 5-6:  women => woman

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 7-8:  10 => 10
Oracle Span 16-17:  afternoon => afternoon
Oracle Span 2-3:  competition => compete-01
Oracle Span 11-12:  diving => dive-01
Oracle Span 14-15:  held => hold-04
Oracle Span 9-10:  meter => (distance-quantity :unit meter)
Oracle Span 10-11:  platform => platform
Oracle Span 1-2:  preliminary => preliminary
Oracle Span 15-16:  this => this
Oracle Span 5-6:  women => woman

Dependencies:
1	The	_	DT	DT	_	3	det	_	_
2	preliminary	_	JJ	JJ	_	3	amod	_	_
3	competition	_	NN	NN	_	8	nsubj	_	_
4	for	_	IN	IN	_	3	prep	_	_
5	the	_	DT	DT	_	6	det	_	_
6	women	_	NNS	NNS	_	4	pobj	_	_
7	's	_	VBZ	VBZ	_	8	cop	_	_
8	10	_	CD	CD	_	0	root	_	_
9	-	_	:	:	_	8	punct	_	_
10	meter	_	NN	NN	_	12	nn	_	_
11	platform	_	NN	NN	_	12	nn	_	_
12	diving	_	NN	NN	_	15	nsubjpass	_	_
13	will	_	MD	MD	_	15	aux	_	_
14	be	_	VB	VB	_	15	auxpass	_	_
15	held	_	VBN	VBN	_	8	parataxis	_	_
16	this	_	DT	DT	_	17	det	_	_
17	afternoon	_	NN	NN	_	15	tmod	_	_
18	.	_	.	.	_	8	punct	_	_

Oracle:
(a / afternoon, mod, t / this)
(c / compete-01, mod, d2 / dive-01)
(c / compete-01, mod, p / preliminary)
(d2 / dive-01, ARG0, w / woman)
(d2 / dive-01, mod, p2 / platform)
(d3 / distance-quantity, quant, 1 / 10)
(d3 / distance-quantity, unit, m2 / meter)
(h / hold-04, ARG1, c / compete-01)
(h / hold-04, time, a / afternoon)
(p2 / platform, mod, d3 / distance-quantity)

Input(Some(Graph((hold-04 :time (afternoon :mod this) :ARG1 (compete-01 :mod (dive-01 :mod (platform :mod (distance-quantity :unit meter :quant 10)) :ARG0 woman) :mod preliminary)),ArrayBuffer(Span(14,15,List(0),held,hold-04,false), Span(16,17,List(1),afternoon,afternoon,false), Span(15,16,List(2),this,this,false), Span(1,2,List(3),preliminary,preliminary,false), Span(11,12,List(4),diving,dive-01,false), Span(10,11,List(5),platform,platform,false), Span(7,8,List(6),10,10,false), Span(9,10,List(7, 8),meter,(distance-quantity :unit meter),false), Span(5,6,List(9),women,woman,false), Span(2,3,List(10),competition,compete-01,false)),Map(2 -> this, 5 -> platform, 8 -> meter, 7 -> distance-quantity, 1 -> afternoon, 4 -> dive-01, 6 -> 10, 9 -> woman, 0 -> hold-04, 10 -> compete-01, 3 -> preliminary),Map(w -> woman, h -> hold-04, t -> this, m2 -> meter, d3 -> distance-quantity, p2 -> platform, 1 -> 10, p -> preliminary, a -> afternoon, d2 -> dive-01, c -> compete-01))),[Ljava.lang.String;@8f2ef19,Annotation([Ljava.lang.String;@470734c3,[Ljava.lang.String;@2cf3d63b,[Ljava.lang.String;@7674f035),Annotation([Ljava.lang.String;@69e153c5,[Ljava.lang.String;@173ed316,[Ledu.cmu.lti.nlp.amr.Dependency;@25ce9dc4),Annotation([Ljava.lang.String;@74ea2410,[Ljava.lang.String;@17f62e33,[Ljava.lang.String;@76b1e9b8),Annotation([Ljava.lang.String;@27406a17,[Ljava.lang.String;@2af004b,[Ledu.cmu.lti.nlp.amr.Entity;@248e319b))
AMR:
(a / afternoon, mod, t / this)
(c / compete-01, ARG0, w / woman)
(c / compete-01, ARG6, 1 / 10)
(c / compete-01, mod, p / preliminary)
(d2 / dive-01, ARG1, p2 / platform)
(d2 / dive-01, ARG6, 1 / 10)
(d2 / dive-01, mod, d3 / distance-quantity)
(d3 / distance-quantity, unit, m2 / meter)
(h / hold-04, ARG1, d2 / dive-01)
(h / hold-04, time, a / afternoon)

WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.1
WARNING: makeIds can't find span Id: 0.0.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.1.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0
Decoded in 343,272 microseconds
Sentence: Mingxia Fu , who won the championship for our country at the World Championship and the Olympic Games , and the competitor from Hebei , Bin Chi , who won the championship at the World Cup will participate in the competition .

Oracle Span 1:  and => and
Oracle Span 2:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 3:  championship => championship
Oracle Span 4:  championship => championship
Oracle Span 5:  competition => compete-01
Oracle Span 6:  competitor => compete-01
Oracle Span 7:  country => country
Oracle Span 8:  Hebei => (province :name (name :op "Hebei"))
Oracle Span 9:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 10:  Olympic Games => (game :name (name :op "Games" :op "Olympic"))
Oracle Span 11:  participate => participate-01
Oracle Span 12:  won => win-01
Oracle Span 13:  won => win-01
Oracle Span 14:  World Championship => (game :name (name :op "Championship" :op "World"))
Oracle Span 15:  World Cup => (game :name (name :op "Cup" :op "World"))
NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (thing :name (name :op "World" :op "Championship"))
NER Entity: (thing :name (name :op "Olympic" :op "Games"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
NER Entity: (country :name (name :op "Hebei"))
NER Entity: (thing :name (name :op "World" :op "Cup"))
Spans:
Span 14-15:  and => and
Span 25-27:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Span 6-7:  championship => championship
Span 31-32:  championship => championship
Span 40-41:  competition => compete-01
Span 21-22:  competitor => compete-01
Span 9-10:  country => country
Span 23-24:  Hebei => (province :name (name :op "Hebei"))
Span 0-2:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Span 16-18:  Olympic Games => (game :name (name :op "Games" :op "Olympic"))
Span 37-38:  participate => participate-01
Span 4-5:  won => win-01
Span 29-30:  won => win-01
Span 12-14:  World Championship => (game :name (name :op "Championship" :op "World"))
Span 34-36:  World Cup => (game :name (name :op "Cup" :op "World"))

Langrangian relaxation converged after 45 iterations. Delta = 0.0
Oracle Span 14-15:  and => and
Oracle Span 25-27:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 6-7:  championship => championship
Oracle Span 31-32:  championship => championship
Oracle Span 40-41:  competition => compete-01
Oracle Span 21-22:  competitor => compete-01
Oracle Span 9-10:  country => country
Oracle Span 23-24:  Hebei => (province :name (name :op "Hebei"))
Oracle Span 0-2:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 16-18:  Olympic Games => (game :name (name :op "Games" :op "Olympic"))
Oracle Span 37-38:  participate => participate-01
Oracle Span 4-5:  won => win-01
Oracle Span 29-30:  won => win-01
Oracle Span 12-14:  World Championship => (game :name (name :op "Championship" :op "World"))
Oracle Span 34-36:  World Cup => (game :name (name :op "Cup" :op "World"))

Dependencies:
1	Mingxia	_	NNP	NNP	_	2	nn	_	_
2	Fu	_	NNP	NNP	_	38	nsubj	_	_
3	,	_	,	,	_	2	punct	_	_
4	who	_	WP	WP	_	5	nsubj	_	_
5	won	_	VBD	VBD	_	2	rcmod	_	_
6	the	_	DT	DT	_	7	det	_	_
7	championship	_	NN	NN	_	5	dobj	_	_
8	for	_	IN	IN	_	5	prep	_	_
9	our	_	PRP$	PRP$	_	10	poss	_	_
10	country	_	NN	NN	_	8	pobj	_	_
11	at	_	IN	IN	_	5	prep	_	_
12	the	_	DT	DT	_	14	det	_	_
13	World	_	NNP	NNP	_	14	nn	_	_
14	Championship	_	NNP	NNP	_	11	pobj	_	_
15	and	_	CC	CC	_	14	cc	_	_
16	the	_	DT	DT	_	18	det	_	_
17	Olympic	_	NNP	NNP	_	18	nn	_	_
18	Games	_	NNPS	NNPS	_	14	conj	_	_
19	,	_	,	,	_	2	punct	_	_
20	and	_	CC	CC	_	2	cc	_	_
21	the	_	DT	DT	_	22	det	_	_
22	competitor	_	NN	NN	_	2	conj	_	_
23	from	_	IN	IN	_	22	prep	_	_
24	Hebei	_	NNP	NNP	_	23	pobj	_	_
25	,	_	,	,	_	2	punct	_	_
26	Bin	_	NNP	NNP	_	27	nn	_	_
27	Chi	_	NNP	NNP	_	2	appos	_	_
28	,	_	,	,	_	2	punct	_	_
29	who	_	WP	WP	_	30	nsubj	_	_
30	won	_	VBD	VBD	_	2	rcmod	_	_
31	the	_	DT	DT	_	32	det	_	_
32	championship	_	NN	NN	_	30	dobj	_	_
33	at	_	IN	IN	_	30	prep	_	_
34	the	_	DT	DT	_	36	det	_	_
35	World	_	NNP	NNP	_	36	nn	_	_
36	Cup	_	NNP	NNP	_	33	pobj	_	_
37	will	_	MD	MD	_	38	aux	_	_
38	participate	_	VB	VB	_	0	root	_	_
39	in	_	IN	IN	_	38	prep	_	_
40	the	_	DT	DT	_	41	det	_	_
41	competition	_	NN	NN	_	39	pobj	_	_
42	.	_	.	.	_	38	punct	_	_

Oracle:
(a / and, op, p4 / person)
(a / and, op, p5 / person)
(c3 / compete-01, ARG0, p5 / person)
(g2 / game, name, n2 / name)
(g3 / game, name, n3 / name)
(g4 / game, name, n6 / name)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Championship")
(n2 / name, op, "World")
(n3 / name, op, "Games")
(n3 / name, op, "Olympic")
(n4 / name, op, "Bin")
(n4 / name, op, "Chi")
(n5 / name, op, "Hebei")
(n6 / name, op, "Cup")
(n6 / name, op, "World")
(p / participate-01, ARG0, a / and)
(p / participate-01, ARG1, c5 / compete-01)
(p2 / province, name, n5 / name)
(p4 / person, name, n / name)
(p5 / person, name, n4 / name)
(p5 / person, source, p2 / province)
(w3 / win-01, ARG0, p4 / person)
(w3 / win-01, ARG1, c / championship)
(w3 / win-01, beneficiary, c2 / country)
(w3 / win-01, location, g2 / game)
(w3 / win-01, location, g3 / game)
(w5 / win-01, ARG0, p5 / person)
(w5 / win-01, ARG1, c4 / championship)
(w5 / win-01, location, g4 / game)

Input(Some(Graph((participate-01 :ARG1 compete-01 :ARG0 (and :op (person :ARG0-of (win-01 :location (game :name (name :op "Cup" :op "World")) :ARG1 championship) :source (province :name (name :op "Hebei")) :ARG0-of compete-01 :name (name :op "Chi" :op "Bin")) :op (person :ARG0-of (win-01 :location (game :name (name :op "Games" :op "Olympic")) :location (game :name (name :op "Championship" :op "World")) :beneficiary (country :poss we) :ARG1 championship) :name (name :op "Fu" :op "Mingxia")))),ArrayBuffer(Span(0,2,List(0, 1, 2, 3),Mingxia Fu,(person :name (name :op "Fu" :op "Mingxia")),false), Span(12,14,List(4, 5, 6, 7),World Championship,(game :name (name :op "Championship" :op "World")),false), Span(16,18,List(8, 9, 10, 11),Olympic Games,(game :name (name :op "Games" :op "Olympic")),false), Span(25,27,List(12, 13, 14, 15),Bin Chi,(person :name (name :op "Chi" :op "Bin")),false), Span(23,24,List(16, 17, 18),Hebei,(province :name (name :op "Hebei")),false), Span(34,36,List(19, 20, 21, 22),World Cup,(game :name (name :op "Cup" :op "World")),false), Span(37,38,List(23),participate,participate-01,false), Span(14,15,List(24),and,and,false), Span(4,5,List(25),won,win-01,false), Span(6,7,List(26),championship,championship,false), Span(29,30,List(27),won,win-01,false), Span(9,10,List(28),country,country,false), Span(31,32,List(29),championship,championship,false), Span(21,22,List(30),competitor,compete-01,false), Span(40,41,List(31),competition,compete-01,false)),Map(30 -> compete-01, 2 -> "Fu", 5 -> name, 27 -> win-01, 12 -> person, 15 -> "Bin", 8 -> game, 21 -> "Cup", 18 -> "Hebei", 24 -> and, 7 -> "World", 17 -> name, 1 -> name, 23 -> participate-01, 26 -> championship, 4 -> game, 11 -> "Olympic", 14 -> "Chi", 29 -> championship, 20 -> name, 28 -> country, 6 -> "Championship", 9 -> name, 0 -> person, 22 -> "World", 16 -> province, 19 -> game, 10 -> "Games", 3 -> "Mingxia", 31 -> compete-01, 25 -> win-01, 13 -> name),Map(n -> name, g3 -> game, p5 -> person, p2 -> province, c4 -> championship, n4 -> name, w3 -> win-01, g2 -> game, p -> participate-01, c3 -> compete-01, a -> and, n3 -> name, p4 -> person, w5 -> win-01, n6 -> name, c -> championship, c2 -> country, g4 -> game, n2 -> name, c5 -> compete-01, n5 -> name))),[Ljava.lang.String;@5d0bf09b,Annotation([Ljava.lang.String;@793f29ff,[Ljava.lang.String;@3e8c3cb,[Ljava.lang.String;@563f38c4),Annotation([Ljava.lang.String;@543295b0,[Ljava.lang.String;@54422e18,[Ledu.cmu.lti.nlp.amr.Dependency;@117159c0),Annotation([Ljava.lang.String;@3e27ba32,[Ljava.lang.String;@7ef82753,[Ljava.lang.String;@3b0fe47a),Annotation([Ljava.lang.String;@202b0582,[Ljava.lang.String;@235ecd9f,[Ledu.cmu.lti.nlp.amr.Entity;@1ca3b418))
AMR:
(a / and, op, g2 / game)
(a / and, op, g3 / game)
(c3 / compete-01, ARG0, p4 / person)
(c3 / compete-01, ARG1, g4 / game)
(c4 / championship, location, c2 / country)
(c5 / compete-01, ARG1, p2 / province)
(g2 / game, name, n2 / name)
(g3 / game, name, n3 / name)
(g4 / game, name, n6 / name)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Championship")
(n2 / name, op, "World")
(n3 / name, op, "Games")
(n3 / name, op, "Olympic")
(n4 / name, op, "Bin")
(n4 / name, op, "Chi")
(n5 / name, op, "Hebei")
(n6 / name, op, "Cup")
(n6 / name, op, "World")
(p / participate-01, ARG0, p5 / person)
(p / participate-01, ARG1, c3 / compete-01)
(p2 / province, name, n5 / name)
(p4 / person, name, n / name)
(p5 / person, name, n4 / name)
(w3 / win-01, ARG0, p5 / person)
(w3 / win-01, ARG1, c / championship)
(w3 / win-01, ARG6, c5 / compete-01)
(w5 / win-01, ARG0, p4 / person)
(w5 / win-01, ARG1, c4 / championship)
(w5 / win-01, purpose, g2 / game)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.2
WARNING: makeIds can't find span Id: 0.0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.0.1.2.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.3
WARNING: makeIds can't find span Id: 0.0.0.1.3.0
WARNING: makeIds can't find span Id: 0.0.0.1.3.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.3.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.1.2
WARNING: makeIds can't find span Id: 0.0.1.2.0
WARNING: makeIds can't find span Id: 0.0.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.1.3.1
WARNING: makeIds can't find span Id: 0.0.1.3.1.0
WARNING: makeIds can't find span Id: 0.0.1.3.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.3.1.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1.3
WARNING: makeIds can't find span Id: 0.0.1.3.0
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0.1.1
Decoded in 1,696,557 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 1-2:  End => end-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(end-01,ArrayBuffer(Span(1,2,List(0),End,end-01,false)),Map(0 -> end-01),Map(e -> end-01))),[Ljava.lang.String;@58cbafc2,Annotation([Ljava.lang.String;@2034b64c,[Ljava.lang.String;@75d3a5e0,[Ljava.lang.String;@74d1dc36),Annotation([Ljava.lang.String;@7161d8d1,[Ljava.lang.String;@74e28667,[Ledu.cmu.lti.nlp.amr.Dependency;@1cf6d1be),Annotation([Ljava.lang.String;@663c9e7a,[Ljava.lang.String;@19e4653c,[Ljava.lang.String;@795509d9),Annotation([Ljava.lang.String;@53045c6c,[Ljava.lang.String;@5149d738,[Ledu.cmu.lti.nlp.amr.Entity;@6bbe85a8))
AMR:


Decoded in 3,122 microseconds
Sentence: Xinhua News Agency , Rome , September 1st , by reporters Changrui Huang and Aiguo Yang

Oracle Span 1:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Oracle Span 2:  and => and
Oracle Span 3:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Oracle Span 4:  reporters => report-01
Oracle Span 5:  Rome => (city :name (name :op "Rome"))
Oracle Span 6:  September => 9
Oracle Span 7:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))
NER Entity: (organization :name (name :op "Xinhua" :op "News" :op "Agency"))
NER Entity: (person :name (name :op "Changrui" :op "Huang"))
NER Entity: (person :name (name :op "Aiguo" :op "Yang"))
NER Entity: (country :name (name :op "Rome"))
Spans:
Span 14-16:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Span 13-14:  and => and
Span 11-13:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Span 10-11:  reporters => report-01
Span 4-5:  Rome => (city :name (name :op "Rome"))
Span 6-7:  September => 9
Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Langrangian relaxation converged after 19 iterations. Delta = 0.0
Oracle Span 14-16:  Aiguo Yang => (person :name (name :op "Yang" :op "Aiguo"))
Oracle Span 13-14:  and => and
Oracle Span 11-13:  Changrui Huang => (person :name (name :op "Huang" :op "Changrui"))
Oracle Span 10-11:  reporters => report-01
Oracle Span 4-5:  Rome => (city :name (name :op "Rome"))
Oracle Span 6-7:  September => 9
Oracle Span 0-3:  Xinhua News Agency => (publication :name (name :op "Agency" :op "News" :op "Xinhua"))

Dependencies:
1	Xinhua	_	NNP	NNP	_	3	nn	_	_
2	News	_	NNP	NNP	_	3	nn	_	_
3	Agency	_	NNP	NNP	_	0	root	_	_
4	,	_	,	,	_	3	punct	_	_
5	Rome	_	NNP	NNP	_	3	appos	_	_
6	,	_	,	,	_	3	punct	_	_
7	September	_	NNP	NNP	_	3	appos	_	_
8	1st	_	CD	CD	_	7	num	_	_
9	,	_	,	,	_	3	punct	_	_
10	by	_	IN	IN	_	3	prep	_	_
11	reporters	_	NNS	NNS	_	10	pobj	_	_
12	Changrui	_	NNP	NNP	_	13	nn	_	_
13	Huang	_	NNP	NNP	_	3	dep	_	_
14	and	_	CC	CC	_	13	cc	_	_
15	Aiguo	_	NNP	NNP	_	16	nn	_	_
16	Yang	_	NNP	NNP	_	13	conj	_	_

Oracle:
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(c4 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Changrui")
(n2 / name, op, "Huang")
(n3 / name, op, "Aiguo")
(n3 / name, op, "Yang")
(n4 / name, op, "Rome")
(p / publication, name, n / name)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(r2 / report-01, ARG0, p3 / person)
(r2 / report-01, ARG0, p4 / person)

Input(Some(Graph((byline-91 :ARG0 (publication :name (name :op "Agency" :op "News" :op "Xinhua")) :ARG1 (and :op (person :name (name :op "Yang" :op "Aiguo") :ARG0-of report-01) :op (person :ARG0-of report-01 :name (name :op "Huang" :op "Changrui"))) :time (date-entity :month 9 :day 1) :location (city :name (name :op "Rome"))),ArrayBuffer(Span(0,3,List(0, 1, 2, 3, 4),Xinhua News Agency,(publication :name (name :op "Agency" :op "News" :op "Xinhua")),false), Span(11,13,List(5, 6, 7, 8),Changrui Huang,(person :name (name :op "Huang" :op "Changrui")),false), Span(14,16,List(9, 10, 11, 12),Aiguo Yang,(person :name (name :op "Yang" :op "Aiguo")),false), Span(4,5,List(13, 14, 15),Rome,(city :name (name :op "Rome")),false), Span(13,14,List(16),and,and,false), Span(10,11,List(17),reporters,report-01,false), Span(6,7,List(18),September,9,false)),Map(2 -> "Agency", 5 -> person, 12 -> "Aiguo", 15 -> "Rome", 8 -> "Changrui", 18 -> 9, 7 -> "Huang", 17 -> report-01, 1 -> name, 4 -> "Xinhua", 11 -> "Yang", 14 -> name, 6 -> name, 9 -> person, 0 -> publication, 16 -> and, 10 -> name, 3 -> "News", 13 -> city),Map(n -> name, n4 -> name, c4 -> city, r2 -> report-01, p -> publication, n3 -> name, p4 -> person, a2 -> and, 9 -> 9, n2 -> name, p3 -> person))),[Ljava.lang.String;@3a7442c7,Annotation([Ljava.lang.String;@4be29ed9,[Ljava.lang.String;@548d708a,[Ljava.lang.String;@4b013c76),Annotation([Ljava.lang.String;@53fb3dab,[Ljava.lang.String;@cb0755b,[Ledu.cmu.lti.nlp.amr.Dependency;@33065d67),Annotation([Ljava.lang.String;@712625fd,[Ljava.lang.String;@7bba5817,[Ljava.lang.String;@742ff096),Annotation([Ljava.lang.String;@75437611,[Ljava.lang.String;@350aac89,[Ledu.cmu.lti.nlp.amr.Entity;@1c5920df))
AMR:
(a2 / and, op, p3 / person)
(a2 / and, op, p4 / person)
(c4 / city, name, n4 / name)
(n / name, op, "Agency")
(n / name, op, "News")
(n / name, op, "Xinhua")
(n2 / name, op, "Changrui")
(n2 / name, op, "Huang")
(n3 / name, op, "Aiguo")
(n3 / name, op, "Yang")
(n4 / name, op, "Rome")
(p / publication, location, c4 / city)
(p / publication, name, n / name)
(p / publication, poss, r2 / report-01)
(p3 / person, name, n2 / name)
(p4 / person, name, n3 / name)
(r2 / report-01, ARG0, 9 / 9)
(r2 / report-01, ARG1, a2 / and)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.2
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.1
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.3.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.2.0
Decoded in 283,097 microseconds
Sentence: The performance of the female competitors of the Chinese diving team , Mingxia Fu and Bin Chi , in the first 6 rounds of the 10 - meter platform diving preliminary competition at the Seventh World Swimming Championships held here today was ideal , and hopes of entering the heats are in sight .

Oracle Span 1:  10 => 10
Oracle Span 2:  6 => 6
Oracle Span 3:  and => and
Oracle Span 4:  and => and
Oracle Span 5:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 6:  Chinese => (country :name (name :op "China"))
Oracle Span 7:  competition => compete-01
Oracle Span 8:  competitors => compete-01
Oracle Span 9:  diving => dive-01
Oracle Span 10:  diving => dive-01
Oracle Span 11:  entering => enter-01
Oracle Span 12:  female => female
Oracle Span 13:  heats => heat
Oracle Span 14:  held => hold-04
Oracle Span 15:  here => here
Oracle Span 16:  hopes => hope-01
Oracle Span 17:  ideal => ideal
Oracle Span 18:  meter => (distance-quantity :unit meter)
Oracle Span 19:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 20:  performance => perform-01
Oracle Span 21:  platform => platform
Oracle Span 22:  preliminary => preliminary
Oracle Span 23:  rounds => round
Oracle Span 24:  Seventh World Swimming Championships => (game :name (name :op "Championships" :op "Swimming" :op "World" :op "Seventh"))
Oracle Span 25:  team => team
Oracle Span 26:  today => today
NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
NER Entity: (thing :name (name :op "Seventh" :op "World" :op "Swimming" :op "Championships"))
NER Entity: (thing :name (name :op "Chinese"))
Spans:
Span 25-26:  10 => 10
Span 21-22:  6 => 6
Span 14-15:  and => and
Span 44-45:  and => and
Span 15-17:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Span 8-9:  Chinese => (country :name (name :op "China"))
Span 31-32:  competition => compete-01
Span 5-6:  competitors => compete-01
Span 9-10:  diving => dive-01
Span 29-30:  diving => dive-01
Span 47-48:  entering => enter-01
Span 4-5:  female => female
Span 49-50:  heats => heat
Span 38-39:  held => hold-04
Span 39-40:  here => here
Span 45-46:  hopes => hope-01
Span 42-43:  ideal => ideal
Span 27-28:  meter => (distance-quantity :unit meter)
Span 12-14:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Span 1-2:  performance => perform-01
Span 28-29:  platform => platform
Span 30-31:  preliminary => preliminary
Span 22-23:  rounds => round
Span 34-38:  Seventh World Swimming Championships => (game :name (name :op "Championships" :op "Swimming" :op "World" :op "Seventh"))
Span 10-11:  team => team
Span 40-41:  today => today

Langrangian relaxation converged after 34 iterations. Delta = 0.0
Oracle Span 25-26:  10 => 10
Oracle Span 21-22:  6 => 6
Oracle Span 14-15:  and => and
Oracle Span 44-45:  and => and
Oracle Span 15-17:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 8-9:  Chinese => (country :name (name :op "China"))
Oracle Span 31-32:  competition => compete-01
Oracle Span 5-6:  competitors => compete-01
Oracle Span 9-10:  diving => dive-01
Oracle Span 29-30:  diving => dive-01
Oracle Span 47-48:  entering => enter-01
Oracle Span 4-5:  female => female
Oracle Span 49-50:  heats => heat
Oracle Span 38-39:  held => hold-04
Oracle Span 39-40:  here => here
Oracle Span 45-46:  hopes => hope-01
Oracle Span 42-43:  ideal => ideal
Oracle Span 27-28:  meter => (distance-quantity :unit meter)
Oracle Span 12-14:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 1-2:  performance => perform-01
Oracle Span 28-29:  platform => platform
Oracle Span 30-31:  preliminary => preliminary
Oracle Span 22-23:  rounds => round
Oracle Span 34-38:  Seventh World Swimming Championships => (game :name (name :op "Championships" :op "Swimming" :op "World" :op "Seventh"))
Oracle Span 10-11:  team => team
Oracle Span 40-41:  today => today

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	performance	_	NN	NN	_	51	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	the	_	DT	DT	_	6	det	_	_
5	female	_	JJ	JJ	_	6	amod	_	_
6	competitors	_	NNS	NNS	_	3	pobj	_	_
7	of	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	11	det	_	_
9	Chinese	_	JJ	JJ	_	11	amod	_	_
10	diving	_	JJ	JJ	_	11	amod	_	_
11	team	_	NN	NN	_	7	pobj	_	_
12	,	_	,	,	_	11	punct	_	_
13	Mingxia	_	NNP	NNP	_	14	nn	_	_
14	Fu	_	NNP	NNP	_	11	conj	_	_
15	and	_	CC	CC	_	11	cc	_	_
16	Bin	_	NNP	NNP	_	17	nn	_	_
17	Chi	_	NNP	NNP	_	11	conj	_	_
18	,	_	,	,	_	6	punct	_	_
19	in	_	IN	IN	_	6	prep	_	_
20	the	_	DT	DT	_	23	det	_	_
21	first	_	JJ	JJ	_	23	amod	_	_
22	6	_	CD	CD	_	23	num	_	_
23	rounds	_	NNS	NNS	_	19	pobj	_	_
24	of	_	IN	IN	_	23	prep	_	_
25	the	_	DT	DT	_	26	det	_	_
26	10	_	CD	CD	_	24	pobj	_	_
27	-	_	:	:	_	23	punct	_	_
28	meter	_	NN	NN	_	29	nn	_	_
29	platform	_	NN	NN	_	23	conj	_	_
30	diving	_	JJ	JJ	_	32	amod	_	_
31	preliminary	_	JJ	JJ	_	32	amod	_	_
32	competition	_	NN	NN	_	43	nsubj	_	_
33	at	_	IN	IN	_	32	prep	_	_
34	the	_	DT	DT	_	38	det	_	_
35	Seventh	_	NNP	NNP	_	38	nn	_	_
36	World	_	NNP	NNP	_	38	nn	_	_
37	Swimming	_	NNP	NNP	_	38	nn	_	_
38	Championships	_	NNP	NNP	_	33	pobj	_	_
39	held	_	VBN	VBN	_	32	vmod	_	_
40	here	_	RB	RB	_	39	advmod	_	_
41	today	_	NN	NN	_	39	tmod	_	_
42	was	_	VBD	VBD	_	43	cop	_	_
43	ideal	_	JJ	JJ	_	29	rcmod	_	_
44	,	_	,	,	_	23	punct	_	_
45	and	_	CC	CC	_	23	cc	_	_
46	hopes	_	NNS	NNS	_	23	conj	_	_
47	of	_	IN	IN	_	46	prep	_	_
48	entering	_	VBG	VBG	_	47	pcomp	_	_
49	the	_	DT	DT	_	50	det	_	_
50	heats	_	NN	NN	_	48	dobj	_	_
51	are	_	VBP	VBP	_	0	root	_	_
52	in	_	IN	IN	_	51	prep	_	_
53	sight	_	NN	NN	_	52	pobj	_	_
54	.	_	.	.	_	51	punct	_	_

Oracle:
(a / and, op, i / ideal)
(a2 / and, mod, f / female)
(a2 / and, op, p4 / person)
(a2 / and, op, p5 / person)
(c / compete-01, mod, d3 / dive-01)
(c / compete-01, mod, p6 / preliminary)
(c / compete-01, part, r / round)
(c3 / compete-01, ARG0, a2 / and)
(c4 / country, name, n3 / name)
(d2 / dive-01, ARG0, t / team)
(d3 / dive-01, mod, p7 / platform)
(d4 / distance-quantity, quant, 1 / 10)
(d4 / distance-quantity, unit, m3 / meter)
(e2 / enter-01, ARG0, a2 / and)
(e2 / enter-01, ARG1, h4 / heat)
(g / game, name, n4 / name)
(g / game, subevent, c / compete-01)
(h / hold-04, ARG1, c / compete-01)
(h / hold-04, location, h2 / here)
(h / hold-04, time, t2 / today)
(h3 / hope-01, ARG1, e2 / enter-01)
(i / ideal, domain, p3 / perform-01)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(n3 / name, op, "China")
(n4 / name, op, "Championships")
(n4 / name, op, "Seventh")
(n4 / name, op, "Swimming")
(n4 / name, op, "World")
(p3 / perform-01, ARG0, a2 / and)
(p3 / perform-01, time, r / round)
(p4 / person, name, n / name)
(p5 / person, name, n2 / name)
(p7 / platform, mod, d4 / distance-quantity)
(r / round, quant, 6 / 6)
(t / team, mod, c4 / country)
(t / team, part, a2 / and)

Input(Some(Graph((and :op (in-sight :domain (hope-01 :ARG1 (enter-01 :ARG1 heat :ARG0 and))) :op (ideal :domain (perform-01 :time (round :ord (ordinal-entity :value 1) :part-of (compete-01 :ARG1-of (hold-04 :time today :location here) :subevent-of (game :name (name :op "Championships" :op "Swimming" :op "World" :op "Seventh")) :mod (dive-01 :mod (platform :mod (distance-quantity :unit meter :quant 10))) :mod preliminary) :quant 6) :ARG0 (and :part-of (team :ARG0-of dive-01 :mod (country :name (name :op "China"))) :mod female :ARG0-of compete-01 :op (person :name (name :op "Chi" :op "Bin")) :op (person :name (name :op "Fu" :op "Mingxia")))))),ArrayBuffer(Span(12,14,List(0, 1, 2, 3),Mingxia Fu,(person :name (name :op "Fu" :op "Mingxia")),false), Span(15,17,List(4, 5, 6, 7),Bin Chi,(person :name (name :op "Chi" :op "Bin")),false), Span(34,38,List(8, 9, 10, 11, 12, 13),Seventh World Swimming Championships,(game :name (name :op "Championships" :op "Swimming" :op "World" :op "Seventh")),false), Span(8,9,List(14, 15, 16),Chinese,(country :name (name :op "China")),false), Span(14,15,List(17),and,and,false), Span(45,46,List(18),hopes,hope-01,false), Span(47,48,List(19),entering,enter-01,false), Span(49,50,List(20),heats,heat,false), Span(42,43,List(21),ideal,ideal,false), Span(44,45,List(22),and,and,false), Span(10,11,List(23),team,team,false), Span(9,10,List(24),diving,dive-01,false), Span(4,5,List(25),female,female,false), Span(22,23,List(26),rounds,round,false), Span(30,31,List(27),preliminary,preliminary,false), Span(29,30,List(28),diving,dive-01,false), Span(28,29,List(29),platform,platform,false), Span(25,26,List(30),10,10,false), Span(27,28,List(31, 32),meter,(distance-quantity :unit meter),false), Span(38,39,List(33),held,hold-04,false), Span(40,41,List(34),today,today,false), Span(39,40,List(35),here,here,false), Span(21,22,List(36),6,6,false), Span(1,2,List(37),performance,perform-01,false), Span(5,6,List(38),competitors,compete-01,false), Span(31,32,List(39),competition,compete-01,false)),Map(39 -> compete-01, 30 -> 10, 2 -> "Fu", 5 -> name, 33 -> hold-04, 27 -> preliminary, 12 -> "World", 15 -> name, 8 -> game, 36 -> 6, 21 -> ideal, 18 -> hope-01, 24 -> dive-01, 35 -> here, 7 -> "Bin", 17 -> and, 1 -> name, 23 -> team, 38 -> compete-01, 26 -> round, 4 -> person, 11 -> "Swimming", 32 -> meter, 14 -> country, 29 -> platform, 20 -> heat, 34 -> today, 28 -> dive-01, 6 -> "Chi", 9 -> name, 0 -> person, 22 -> and, 16 -> "China", 37 -> perform-01, 19 -> enter-01, 10 -> "Championships", 3 -> "Mingxia", 31 -> distance-quantity, 25 -> female, 13 -> "Seventh"),Map(m3 -> meter, n -> name, h -> hold-04, h2 -> here, p5 -> person, t -> team, d3 -> dive-01, e2 -> enter-01, c4 -> country, n4 -> name, h4 -> heat, 1 -> 10, g -> game, c3 -> compete-01, a -> and, n3 -> name, p4 -> person, d2 -> dive-01, p7 -> platform, t2 -> today, r -> round, a2 -> and, i -> ideal, 6 -> 6, c -> compete-01, h3 -> hope-01, p6 -> preliminary, d4 -> distance-quantity, f -> female, p3 -> perform-01, n2 -> name))),[Ljava.lang.String;@17f9d882,Annotation([Ljava.lang.String;@79e4c792,[Ljava.lang.String;@196a42c3,[Ljava.lang.String;@4c60d6e9),Annotation([Ljava.lang.String;@15043a2f,[Ljava.lang.String;@4a83a74a,[Ledu.cmu.lti.nlp.amr.Dependency;@1349883),Annotation([Ljava.lang.String;@4b29d1d2,[Ljava.lang.String;@7f485fda,[Ljava.lang.String;@28261e8e),Annotation([Ljava.lang.String;@d737b89,[Ljava.lang.String;@8519cb4,[Ledu.cmu.lti.nlp.amr.Entity;@35dab4eb))
AMR:
(a / and, op, p4 / person)
(a / and, op, p5 / person)
(a2 / and, op, h3 / hope-01)
(a2 / and, op, p7 / platform)
(a2 / and, op, r / round)
(c / compete-01, ARG1, a / and)
(c / compete-01, mod, f / female)
(c3 / compete-01, ARG0, g / game)
(c3 / compete-01, ARG1, h / hold-04)
(c3 / compete-01, ARG2, d4 / distance-quantity)
(c3 / compete-01, mod, p6 / preliminary)
(c4 / country, name, n3 / name)
(d2 / dive-01, ARG1, a / and)
(d3 / dive-01, ARG1, c3 / compete-01)
(d4 / distance-quantity, unit, m3 / meter)
(e2 / enter-01, ARG0, 1 / 10)
(e2 / enter-01, ARG1, h4 / heat)
(g / game, name, n4 / name)
(h / hold-04, ARG1, i / ideal)
(h / hold-04, time, t2 / today)
(h3 / hope-01, ARG0, p5 / person)
(h3 / hope-01, ARG1, e2 / enter-01)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(n3 / name, op, "China")
(n4 / name, op, "Championships")
(n4 / name, op, "Seventh")
(n4 / name, op, "Swimming")
(n4 / name, op, "World")
(p3 / perform-01, ARG1, c / compete-01)
(p4 / person, name, n / name)
(p5 / person, name, n2 / name)
(p7 / platform, mod, d4 / distance-quantity)
(r / round, quant, 6 / 6)
(t / team, mod, c4 / country)
(t / team, mod, d2 / dive-01)
(t2 / today, calendar, h2 / here)

WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.2
WARNING: makeIds can't find span Id: 0.0.0.1.1.2.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.2.0.3
WARNING: makeIds can't find span Id: 0.0.0.1.1.2.0.2
WARNING: makeIds can't find span Id: 0.0.0.1.1.2.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.2.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.4.0
WARNING: makeIds can't find span Id: 0.0.0.0.4.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.4.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.4
WARNING: makeIds can't find span Id: 0.0.0.0.4.1
WARNING: makeIds can't find span Id: 0.0.0.0.3
WARNING: makeIds can't find span Id: 0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.1.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.1.1.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.3
WARNING: makeIds can't find span Id: 0.0.0.1.1.3.1
WARNING: makeIds can't find span Id: 0.0.0.1.1.3.0
WARNING: makeIds can't find span Id: 0.0.0.1.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.1.1
WARNING: makeIds can't find span Id: 0.0.0.0.2
Decoded in 2,482,941 microseconds
Sentence: At the time this reporter dispatched , in the first 6 rounds of competition , Mingxia Fu and Bin Chi are temporarily occupying the first and third positions with total scores of 339.12 and 290.19 points respectively .

Oracle Span 1:  290.19 => 290.19
Oracle Span 2:  339.12 => 339.12
Oracle Span 3:  6 => 6
Oracle Span 4:  and => and
Oracle Span 5:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 6:  competition => compete-01
Oracle Span 7:  dispatched => dispatch-01
Oracle Span 8:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 9:  occupying => occupy-01
Oracle Span 10:  points => point
Oracle Span 11:  positions => position
Oracle Span 12:  reporter => (person :ARG0-of report-01)
Oracle Span 13:  respectively => respective
Oracle Span 14:  rounds => round
Oracle Span 15:  scores => score-01
Oracle Span 16:  temporarily => temporary
Oracle Span 17:  this => this
Oracle Span 18:  total => total-01
NER Entity: (person :name (name :op "Mingxia" :op "Fu"))
NER Entity: (person :name (name :op "Bin" :op "Chi"))
Spans:
Span 34-35:  290.19 => 290.19
Span 32-33:  339.12 => 339.12
Span 10-11:  6 => 6
Span 17-18:  and => and
Span 18-20:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Span 13-14:  competition => compete-01
Span 5-6:  dispatched => dispatch-01
Span 15-17:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Span 22-23:  occupying => occupy-01
Span 35-36:  points => point
Span 27-28:  positions => position
Span 4-5:  reporter => (person :ARG0-of report-01)
Span 36-37:  respectively => respective
Span 11-12:  rounds => round
Span 30-31:  scores => score-01
Span 21-22:  temporarily => temporary
Span 3-4:  this => this
Span 29-30:  total => total-01

Langrangian relaxation converged after 26 iterations. Delta = 0.0
Oracle Span 34-35:  290.19 => 290.19
Oracle Span 32-33:  339.12 => 339.12
Oracle Span 10-11:  6 => 6
Oracle Span 17-18:  and => and
Oracle Span 18-20:  Bin Chi => (person :name (name :op "Chi" :op "Bin"))
Oracle Span 13-14:  competition => compete-01
Oracle Span 5-6:  dispatched => dispatch-01
Oracle Span 15-17:  Mingxia Fu => (person :name (name :op "Fu" :op "Mingxia"))
Oracle Span 22-23:  occupying => occupy-01
Oracle Span 35-36:  points => point
Oracle Span 27-28:  positions => position
Oracle Span 4-5:  reporter => (person :ARG0-of report-01)
Oracle Span 36-37:  respectively => respective
Oracle Span 11-12:  rounds => round
Oracle Span 30-31:  scores => score-01
Oracle Span 21-22:  temporarily => temporary
Oracle Span 3-4:  this => this
Oracle Span 29-30:  total => total-01

Dependencies:
1	At	_	IN	IN	_	6	prep	_	_
2	the	_	DT	DT	_	3	det	_	_
3	time	_	NN	NN	_	1	pobj	_	_
4	this	_	DT	DT	_	5	det	_	_
5	reporter	_	NN	NN	_	6	nsubj	_	_
6	dispatched	_	VBD	VBD	_	23	ccomp	_	_
7	,	_	,	,	_	6	punct	_	_
8	in	_	IN	IN	_	6	prep	_	_
9	the	_	DT	DT	_	12	det	_	_
10	first	_	JJ	JJ	_	12	amod	_	_
11	6	_	CD	CD	_	12	num	_	_
12	rounds	_	NNS	NNS	_	8	pobj	_	_
13	of	_	IN	IN	_	12	prep	_	_
14	competition	_	NN	NN	_	13	pobj	_	_
15	,	_	,	,	_	23	punct	_	_
16	Mingxia	_	NNP	NNP	_	17	nn	_	_
17	Fu	_	NNP	NNP	_	23	nsubj	_	_
18	and	_	CC	CC	_	17	cc	_	_
19	Bin	_	NNP	NNP	_	20	nn	_	_
20	Chi	_	NNP	NNP	_	17	conj	_	_
21	are	_	VBP	VBP	_	23	aux	_	_
22	temporarily	_	RB	RB	_	23	advmod	_	_
23	occupying	_	VBG	VBG	_	0	root	_	_
24	the	_	DT	DT	_	28	det	_	_
25	first	_	JJ	JJ	_	28	amod	_	_
26	and	_	CC	CC	_	25	cc	_	_
27	third	_	JJ	JJ	_	25	conj	_	_
28	positions	_	NNS	NNS	_	23	dobj	_	_
29	with	_	IN	IN	_	23	prep	_	_
30	total	_	JJ	JJ	_	31	amod	_	_
31	scores	_	NNS	NNS	_	29	pobj	_	_
32	of	_	IN	IN	_	31	prep	_	_
33	339.12	_	CD	CD	_	36	nn	_	_
34	and	_	CC	CC	_	33	cc	_	_
35	290.19	_	CD	CD	_	33	conj	_	_
36	points	_	NNS	NNS	_	32	pobj	_	_
37	respectively	_	RB	RB	_	23	advmod	_	_
38	.	_	.	.	_	23	punct	_	_

Oracle:
(a / and, duration, t3 / temporary)
(a / and, mod, r / respective)
(a / and, op, o2 / occupy-01)
(a / and, time, d / dispatch-01)
(a / and, time, r3 / round)
(c / compete-01, part, r3 / round)
(d / dispatch-01, ARG0, p9 / person)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(o2 / occupy-01, ARG0, p6 / person)
(o2 / occupy-01, ARG1, p7 / position)
(o2 / occupy-01, ARG2, s2 / score-01)
(p3 / person, name, n / name)
(p6 / person, name, n2 / name)
(p8 / point, quant, 2 / 290.19)
(p9 / person, mod, t2 / this)
(r2 / report-01, ARG0, p9 / person)
(r3 / round, quant, 6 / 6)
(s2 / score-01, ARG0, p6 / person)
(s2 / score-01, ARG1, p8 / point)
(s2 / score-01, mod, t / total-01)
(t / total-01, ARG2, x / 339.12)

Input(Some(Graph((and :time (round :ord (ordinal-entity :value 1) :part-of compete-01 :quant 6) :time (dispatch-01 :ARG0 (person :mod this :ARG0-of report-01)) :duration temporary :mod respective :op (occupy-01 :ARG2 (score-01 :ARG1 (point :quant 290.19) :ARG0 person :mod total-01) :ARG1 (position :ord (ordinal-entity :value 3)) :ARG0 (person :name (name :op "Chi" :op "Bin"))) :op (occupy-01 :ARG0 (person :name (name :op "Fu" :op "Mingxia")) :ARG1 (position :ord (ordinal-entity :value 1)) :ARG2 (score-01 :ARG1 (point :quant (339.12 :ARG2-of (total-01 :ARG1 point))) :ARG0 person))),ArrayBuffer(Span(15,17,List(0, 1, 2, 3),Mingxia Fu,(person :name (name :op "Fu" :op "Mingxia")),false), Span(18,20,List(4, 5, 6, 7),Bin Chi,(person :name (name :op "Chi" :op "Bin")),false), Span(17,18,List(8),and,and,false), Span(11,12,List(9),rounds,round,false), Span(10,11,List(10),6,6,false), Span(5,6,List(11),dispatched,dispatch-01,false), Span(4,5,List(12, 13),reporter,(person :ARG0-of report-01),false), Span(3,4,List(14),this,this,false), Span(22,23,List(15),occupying,occupy-01,false), Span(30,31,List(16),scores,score-01,false), Span(35,36,List(17),points,point,false), Span(34,35,List(18),290.19,290.19,false), Span(27,28,List(19),positions,position,false), Span(32,33,List(20),339.12,339.12,false), Span(29,30,List(21),total,total-01,false), Span(13,14,List(22),competition,compete-01,false), Span(21,22,List(23),temporarily,temporary,false), Span(36,37,List(24),respectively,respective,false)),Map(2 -> "Fu", 5 -> name, 12 -> person, 15 -> occupy-01, 8 -> and, 21 -> total-01, 18 -> 290.19, 24 -> respective, 7 -> "Bin", 17 -> point, 1 -> name, 23 -> temporary, 4 -> person, 11 -> dispatch-01, 14 -> this, 20 -> 339.12, 6 -> "Chi", 9 -> round, 0 -> person, 22 -> compete-01, 16 -> score-01, 19 -> position, 10 -> 6, 3 -> "Mingxia", 13 -> report-01),Map(n -> name, r3 -> round, 2 -> 290.19, s2 -> score-01, t -> total-01, p8 -> point, d -> dispatch-01, t3 -> temporary, r2 -> report-01, a -> and, o2 -> occupy-01, p7 -> position, x -> 339.12, t2 -> this, r -> respective, 6 -> 6, c -> compete-01, p6 -> person, p9 -> person, p3 -> person, n2 -> name))),[Ljava.lang.String;@2d901eb0,Annotation([Ljava.lang.String;@3ba987b8,[Ljava.lang.String;@3f191845,[Ljava.lang.String;@5f049ea1),Annotation([Ljava.lang.String;@72cc7e6f,[Ljava.lang.String;@5afa3c9,[Ledu.cmu.lti.nlp.amr.Dependency;@72035809),Annotation([Ljava.lang.String;@909217e,[Ljava.lang.String;@18271936,[Ljava.lang.String;@606e4010),Annotation([Ljava.lang.String;@8458f04,[Ljava.lang.String;@48075da3,[Ledu.cmu.lti.nlp.amr.Entity;@68c9133c))
AMR:
(a / and, mod, r / respective)
(a / and, op, d / dispatch-01)
(a / and, op, o2 / occupy-01)
(a / and, op, p6 / person)
(c / compete-01, ARG1, r3 / round)
(d / dispatch-01, ARG0, p9 / person)
(d / dispatch-01, ARG1, r3 / round)
(n / name, op, "Fu")
(n / name, op, "Mingxia")
(n2 / name, op, "Bin")
(n2 / name, op, "Chi")
(o2 / occupy-01, ARG0, p3 / person)
(o2 / occupy-01, ARG1, p7 / position)
(o2 / occupy-01, duration, t3 / temporary)
(p3 / person, name, n / name)
(p6 / person, name, n2 / name)
(p8 / point, quant, 2 / 290.19)
(r2 / report-01, ARG0, p9 / person)
(r2 / report-01, ARG1, x / 339.12)
(r2 / report-01, mod, t2 / this)
(r3 / round, quant, 6 / 6)
(s2 / score-01, ARG0, p3 / person)
(s2 / score-01, ARG1, p8 / point)
(t / total-01, ARG1, s2 / score-01)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.5
WARNING: makeIds can't find span Id: 0.5.0
WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.4.0
WARNING: makeIds can't find span Id: 0.4.0.0
WARNING: makeIds can't find span Id: 0.4.0.1
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.0.2.0.0
WARNING: makeIds can't find span Id: 0.0.2.0.0.0
WARNING: makeIds can't find span Id: 0.5.1
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.2
Decoded in 1,016,298 microseconds
Sentence: If accidents do not occur , their hopes of entering the heats are already in sight .

Oracle Span 1:  accidents => accident
Oracle Span 2:  already => already
Oracle Span 3:  entering => enter-01
Oracle Span 4:  heats => heat
Oracle Span 5:  hopes => hope-01
Spans:
Span 1-2:  accidents => accident
Span 13-14:  already => already
Span 9-10:  entering => enter-01
Span 11-12:  heats => heat
Span 7-8:  hopes => hope-01

Langrangian relaxation converged after 25 iterations. Delta = 0.0
Oracle Span 1-2:  accidents => accident
Oracle Span 13-14:  already => already
Oracle Span 9-10:  entering => enter-01
Oracle Span 11-12:  heats => heat
Oracle Span 7-8:  hopes => hope-01

Dependencies:
1	If	_	IN	IN	_	5	mark	_	_
2	accidents	_	NNS	NNS	_	5	nsubj	_	_
3	do	_	VBP	VBP	_	5	aux	_	_
4	not	_	RB	RB	_	5	neg	_	_
5	occur	_	VB	VB	_	13	advcl	_	_
6	,	_	,	,	_	13	punct	_	_
7	their	_	PRP$	PRP$	_	8	poss	_	_
8	hopes	_	NNS	NNS	_	13	nsubj	_	_
9	of	_	IN	IN	_	8	prep	_	_
10	entering	_	VBG	VBG	_	9	pcomp	_	_
11	the	_	DT	DT	_	12	det	_	_
12	heats	_	NN	NN	_	10	dobj	_	_
13	are	_	VBP	VBP	_	0	root	_	_
14	already	_	RB	RB	_	13	advmod	_	_
15	in	_	IN	IN	_	13	prep	_	_
16	sight	_	NN	NN	_	15	pobj	_	_
17	.	_	.	.	_	13	punct	_	_

Oracle:
(e / enter-01, ARG1, h2 / heat)
(h / hope-01, ARG1, e / enter-01)

Input(Some(Graph((in-sight :domain (hope-01 :ARG1 (enter-01 :ARG1 heat :ARG0 they) :ARG0 they) :time already :condition (accident :polarity -)),ArrayBuffer(Span(7,8,List(0),hopes,hope-01,false), Span(9,10,List(1),entering,enter-01,false), Span(11,12,List(2),heats,heat,false), Span(13,14,List(3),already,already,false), Span(1,2,List(4),accidents,accident,false)),Map(2 -> heat, 1 -> enter-01, 4 -> accident, 0 -> hope-01, 3 -> already),Map(e -> enter-01, h -> hope-01, h2 -> heat, a -> already, a2 -> accident))),[Ljava.lang.String;@7a35b0f5,Annotation([Ljava.lang.String;@5e2c3d18,[Ljava.lang.String;@2cb4893b,[Ljava.lang.String;@cc43f62),Annotation([Ljava.lang.String;@5b218417,[Ljava.lang.String;@645aa696,[Ledu.cmu.lti.nlp.amr.Dependency;@6caf0677),Annotation([Ljava.lang.String;@413d1baf,[Ljava.lang.String;@16eb3ea3,[Ljava.lang.String;@273444fe),Annotation([Ljava.lang.String;@33bc72d1,[Ljava.lang.String;@1a75e76a,[Ledu.cmu.lti.nlp.amr.Entity;@5524cca1))
AMR:
(e / enter-01, ARG0, a2 / accident)
(e / enter-01, ARG1, h2 / heat)
(h / hope-01, ARG1, e / enter-01)
(h / hope-01, ARG6, a / already)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.2
Decoded in 86,761 microseconds
Sentence: Occupying the second position is the US competitor , Richard .

Oracle Span 1:  competitor => compete-01
Oracle Span 2:  Occupying => occupy-01
Oracle Span 3:  position => position
Oracle Span 4:  Richard => (person :name (name :op "Richard"))
Oracle Span 5:  US => (country :name (name :op "States" :op "United"))
NER Entity: (person :name (name :op "Richard"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 7-8:  competitor => compete-01
Span 0-1:  Occupying => occupy-01
Span 3-4:  position => position
Span 9-10:  Richard => (person :name (name :op "Richard"))
Span 6-7:  US => (country :name (name :op "States" :op "United"))

Langrangian relaxation converged after 40 iterations. Delta = 0.0
Oracle Span 7-8:  competitor => compete-01
Oracle Span 0-1:  Occupying => occupy-01
Oracle Span 3-4:  position => position
Oracle Span 9-10:  Richard => (person :name (name :op "Richard"))
Oracle Span 6-7:  US => (country :name (name :op "States" :op "United"))

Dependencies:
1	Occupying	_	VBG	VBG	_	0	root	_	_
2	the	_	DT	DT	_	4	det	_	_
3	second	_	JJ	JJ	_	4	amod	_	_
4	position	_	NN	NN	_	1	dobj	_	_
5	is	_	VBZ	VBZ	_	1	aux	_	_
6	the	_	DT	DT	_	8	det	_	_
7	US	_	NNP	NNP	_	8	nn	_	_
8	competitor	_	NN	NN	_	1	nsubj	_	_
9	,	_	,	,	_	8	punct	_	_
10	Richard	_	NNP	NNP	_	8	appos	_	_
11	.	_	.	.	_	1	punct	_	_

Oracle:
(c2 / country, name, n2 / name)
(c3 / compete-01, ARG0, p2 / person)
(n / name, op, "Richard")
(n2 / name, op, "States")
(n2 / name, op, "United")
(o / occupy-01, ARG0, p2 / person)
(o / occupy-01, ARG1, p3 / position)
(p2 / person, mod, c2 / country)
(p2 / person, name, n / name)

Input(Some(Graph((occupy-01 :ARG1 (position :ord (ordinal-entity :value 2)) :ARG0 (person :ARG0-of compete-01 :mod (country :name (name :op "States" :op "United")) :name (name :op "Richard"))),ArrayBuffer(Span(9,10,List(0, 1, 2),Richard,(person :name (name :op "Richard")),false), Span(0,1,List(3),Occupying,occupy-01,false), Span(3,4,List(4),position,position,false), Span(7,8,List(5),competitor,compete-01,false), Span(6,7,List(6, 7, 8, 9),US,(country :name (name :op "States" :op "United")),false)),Map(2 -> "Richard", 5 -> compete-01, 8 -> "States", 7 -> name, 1 -> name, 4 -> position, 6 -> country, 9 -> "United", 0 -> person, 3 -> occupy-01),Map(n -> name, p2 -> person, c3 -> compete-01, o -> occupy-01, n2 -> name, c2 -> country, p3 -> position))),[Ljava.lang.String;@5032714f,Annotation([Ljava.lang.String;@48bb62,[Ljava.lang.String;@353352b6,[Ljava.lang.String;@4681c175),Annotation([Ljava.lang.String;@57a78e3,[Ljava.lang.String;@402c4085,[Ledu.cmu.lti.nlp.amr.Dependency;@6fa51cd4),Annotation([Ljava.lang.String;@2767e23c,[Ljava.lang.String;@710c2b53,[Ljava.lang.String;@5386659f),Annotation([Ljava.lang.String;@14028087,[Ljava.lang.String;@cecf639,[Ledu.cmu.lti.nlp.amr.Entity;@1caa0244))
AMR:
(c2 / country, name, n2 / name)
(c3 / compete-01, ARG1, c2 / country)
(c3 / compete-01, location, p2 / person)
(n / name, op, "Richard")
(n2 / name, op, "States")
(n2 / name, op, "United")
(o / occupy-01, ARG0, p2 / person)
(o / occupy-01, ARG1, p3 / position)
(p2 / person, name, n / name)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
Decoded in 232,829 microseconds
Sentence: Her performance was 303.00 points .

Oracle Span 1:  303.00 => 303.00
Oracle Span 2:  performance => perform-01
Oracle Span 3:  points => point
Spans:
Span 3-4:  303.00 => 303.00
Span 1-2:  performance => perform-01
Span 4-5:  points => point

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 3-4:  303.00 => 303.00
Oracle Span 1-2:  performance => perform-01
Oracle Span 4-5:  points => point

Dependencies:
1	Her	_	PRP$	PRP$	_	2	poss	_	_
2	performance	_	NN	NN	_	5	nsubj	_	_
3	was	_	VBD	VBD	_	5	cop	_	_
4	303.00	_	CD	CD	_	5	num	_	_
5	points	_	NNS	NNS	_	0	root	_	_
6	.	_	.	.	_	5	punct	_	_

Oracle:
(p2 / point, domain, p / perform-01)
(p2 / point, quant, 3 / 303.00)

Input(Some(Graph((point :domain (perform-01 :ARG0 she) :quant 303.00),ArrayBuffer(Span(4,5,List(0),points,point,false), Span(3,4,List(1),303.00,303.00,false), Span(1,2,List(2),performance,perform-01,false)),Map(2 -> perform-01, 1 -> 303.00, 0 -> point),Map(p2 -> point, p -> perform-01, 3 -> 303.00))),[Ljava.lang.String;@7ce026d3,Annotation([Ljava.lang.String;@7ce69770,[Ljava.lang.String;@1750fbeb,[Ljava.lang.String;@5b247367),Annotation([Ljava.lang.String;@268f106e,[Ljava.lang.String;@6e9a5ed8,[Ledu.cmu.lti.nlp.amr.Dependency;@7e057f43),Annotation([Ljava.lang.String;@6c284af,[Ljava.lang.String;@5890e879,[Ljava.lang.String;@6440112d),Annotation([Ljava.lang.String;@31ea9581,[Ljava.lang.String;@231f98ef,[Ledu.cmu.lti.nlp.amr.Entity;@7c137fd5))
AMR:
(p / perform-01, ARG1, p2 / point)
(p2 / point, quant, 3 / 303.00)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1
Decoded in 10,149 microseconds
Sentence: In the preliminary men 's 1 - meter platform diving competition this morning , our competitors Lan Wei and Sheng Chen have already gained rights to the heats .

Oracle Span 1:  1 => 1
Oracle Span 2:  already => already
Oracle Span 3:  and => and
Oracle Span 4:  competition => compete-01
Oracle Span 5:  competitors => compete-01
Oracle Span 6:  diving => dive-01
Oracle Span 7:  gained => gain-02
Oracle Span 8:  heats => heat
Oracle Span 9:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Oracle Span 10:  men => man
Oracle Span 11:  meter => (distance-quantity :unit meter)
Oracle Span 12:  morning => morning
Oracle Span 13:  platform => platform
Oracle Span 14:  preliminary => preliminary
Oracle Span 15:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 16:  this => this
NER Entity: (person :name (name :op "Lan" :op "Wei"))
NER Entity: (person :name (name :op "Sheng" :op "Chen"))
Spans:
Span 5-6:  1 => 1
Span 22-23:  already => already
Span 18-19:  and => and
Span 10-11:  competition => compete-01
Span 15-16:  competitors => compete-01
Span 9-10:  diving => dive-01
Span 23-24:  gained => gain-02
Span 27-28:  heats => heat
Span 16-18:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Span 3-4:  men => man
Span 7-8:  meter => (distance-quantity :unit meter)
Span 12-13:  morning => morning
Span 8-9:  platform => platform
Span 2-3:  preliminary => preliminary
Span 19-21:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Span 11-12:  this => this

Langrangian relaxation converged after 35 iterations. Delta = 0.0
Oracle Span 5-6:  1 => 1
Oracle Span 22-23:  already => already
Oracle Span 18-19:  and => and
Oracle Span 10-11:  competition => compete-01
Oracle Span 15-16:  competitors => compete-01
Oracle Span 9-10:  diving => dive-01
Oracle Span 23-24:  gained => gain-02
Oracle Span 27-28:  heats => heat
Oracle Span 16-18:  Lan Wei => (person :name (name :op "Wei" :op "Lan"))
Oracle Span 3-4:  men => man
Oracle Span 7-8:  meter => (distance-quantity :unit meter)
Oracle Span 12-13:  morning => morning
Oracle Span 8-9:  platform => platform
Oracle Span 2-3:  preliminary => preliminary
Oracle Span 19-21:  Sheng Chen => (person :name (name :op "Chen" :op "Sheng"))
Oracle Span 11-12:  this => this

Dependencies:
1	In	_	IN	IN	_	6	prep	_	_
2	the	_	DT	DT	_	4	det	_	_
3	preliminary	_	JJ	JJ	_	4	amod	_	_
4	men	_	NNS	NNS	_	1	pobj	_	_
5	's	_	VBZ	VBZ	_	6	cop	_	_
6	1	_	CD	CD	_	0	root	_	_
7	-	_	:	:	_	6	punct	_	_
8	meter	_	NN	NN	_	11	nn	_	_
9	platform	_	NN	NN	_	11	nn	_	_
10	diving	_	NN	NN	_	11	nn	_	_
11	competition	_	NN	NN	_	6	dep	_	_
12	this	_	DT	DT	_	13	det	_	_
13	morning	_	NN	NN	_	6	nsubj	_	_
14	,	_	,	,	_	13	punct	_	_
15	our	_	PRP$	PRP$	_	16	poss	_	_
16	competitors	_	NNS	NNS	_	13	appos	_	_
17	Lan	_	NNP	NNP	_	18	nn	_	_
18	Wei	_	NNP	NNP	_	24	nsubj	_	_
19	and	_	CC	CC	_	18	cc	_	_
20	Sheng	_	NNP	NNP	_	21	nn	_	_
21	Chen	_	NNP	NNP	_	18	conj	_	_
22	have	_	VBP	VBP	_	24	aux	_	_
23	already	_	RB	RB	_	24	advmod	_	_
24	gained	_	VBN	VBN	_	16	rcmod	_	_
25	rights	_	NNS	NNS	_	24	dobj	_	_
26	to	_	TO	TO	_	24	prep	_	_
27	the	_	DT	DT	_	28	det	_	_
28	heats	_	NN	NN	_	26	pobj	_	_
29	.	_	.	.	_	6	punct	_	_

Oracle:
(a / and, op, p3 / person)
(a / and, op, p4 / person)
(c / compete-01, ARG0, a / and)
(c2 / compete-01, mod, d2 / dive-01)
(c2 / compete-01, mod, p5 / preliminary)
(d2 / dive-01, ARG0, m2 / man)
(d2 / dive-01, mod, p6 / platform)
(d3 / distance-quantity, quant, 1 / 1)
(d3 / distance-quantity, unit, m3 / meter)
(g / gain-02, ARG0, a / and)
(g / gain-02, time, a2 / already)
(g / gain-02, time, c2 / compete-01)
(g / gain-02, time, m4 / morning)
(m4 / morning, mod, t / this)
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Chen")
(n2 / name, op, "Sheng")
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)
(p6 / platform, mod, d3 / distance-quantity)

Input(Some(Graph((gain-02 :time already :time (morning :mod this) :time (compete-01 :mod (dive-01 :mod (platform :mod (distance-quantity :unit meter :quant 1)) :ARG0 man) :mod preliminary) :ARG1 (entitle-01 :ARG1 heat :ARG2 and) :ARG0 (and :ARG0-of (compete-01 :ARG1 we) :op (person :name (name :op "Chen" :op "Sheng")) :op (person :name (name :op "Wei" :op "Lan")))),ArrayBuffer(Span(16,18,List(0, 1, 2, 3),Lan Wei,(person :name (name :op "Wei" :op "Lan")),false), Span(19,21,List(4, 5, 6, 7),Sheng Chen,(person :name (name :op "Chen" :op "Sheng")),false), Span(23,24,List(8),gained,gain-02,false), Span(22,23,List(9),already,already,false), Span(12,13,List(10),morning,morning,false), Span(11,12,List(11),this,this,false), Span(2,3,List(12),preliminary,preliminary,false), Span(9,10,List(13),diving,dive-01,false), Span(8,9,List(14),platform,platform,false), Span(5,6,List(15),1,1,false), Span(7,8,List(16, 17),meter,(distance-quantity :unit meter),false), Span(3,4,List(18),men,man,false), Span(27,28,List(19),heats,heat,false), Span(18,19,List(20),and,and,false), Span(10,11,List(21),competition,compete-01,false), Span(15,16,List(22),competitors,compete-01,false)),Map(2 -> "Wei", 5 -> name, 12 -> preliminary, 15 -> 1, 8 -> gain-02, 21 -> compete-01, 18 -> man, 7 -> "Sheng", 17 -> meter, 1 -> name, 4 -> person, 11 -> this, 14 -> platform, 20 -> and, 6 -> "Chen", 9 -> already, 0 -> person, 22 -> compete-01, 16 -> distance-quantity, 19 -> heat, 10 -> morning, 3 -> "Lan", 13 -> dive-01),Map(m3 -> meter, n -> name, h -> heat, p5 -> preliminary, t -> this, m2 -> man, d3 -> distance-quantity, 1 -> 1, g -> gain-02, a -> and, p4 -> person, d2 -> dive-01, m4 -> morning, a2 -> already, c -> compete-01, p6 -> platform, p3 -> person, c2 -> compete-01, n2 -> name))),[Ljava.lang.String;@183ec003,Annotation([Ljava.lang.String;@7d9d0818,[Ljava.lang.String;@221a3fa4,[Ljava.lang.String;@451001e5),Annotation([Ljava.lang.String;@2b40ff9c,[Ljava.lang.String;@3e08ff24,[Ledu.cmu.lti.nlp.amr.Dependency;@4d1c005e),Annotation([Ljava.lang.String;@8462f31,[Ljava.lang.String;@24569dba,[Ljava.lang.String;@5ddeb7cb),Annotation([Ljava.lang.String;@70ed52de,[Ljava.lang.String;@496bc455,[Ledu.cmu.lti.nlp.amr.Entity;@59402b8f))
AMR:
(a / and, op, p3 / person)
(a / and, op, p4 / person)
(c / compete-01, ARG1, t / this)
(c2 / compete-01, ARG1, d2 / dive-01)
(c2 / compete-01, ARG6, m4 / morning)
(c2 / compete-01, mod, d3 / distance-quantity)
(d2 / dive-01, ARG0, m2 / man)
(d2 / dive-01, ARG1, p6 / platform)
(d2 / dive-01, ARG6, 1 / 1)
(d3 / distance-quantity, unit, m3 / meter)
(g / gain-02, ARG0, a / and)
(g / gain-02, ARG1, h / heat)
(g / gain-02, time, a2 / already)
(m2 / man, mod, p5 / preliminary)
(m4 / morning, mod, t / this)
(n / name, op, "Lan")
(n / name, op, "Wei")
(n2 / name, op, "Chen")
(n2 / name, op, "Sheng")
(p3 / person, name, c / compete-01)
(p3 / person, name, n / name)
(p4 / person, name, n2 / name)

WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0
WARNING: makeIds can't find span Id: 0.0.0.0.1
WARNING: makeIds can't find span Id: 0.0.0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.1.0
WARNING: makeIds can't find span Id: 0.0.1.0.1
WARNING: makeIds can't find span Id: 0.0.1.0.0
WARNING: makeIds can't find span Id: 0.4
WARNING: makeIds can't find span Id: 0.3
WARNING: makeIds can't find span Id: 0.3.0
WARNING: makeIds can't find span Id: 0.2.0
WARNING: makeIds can't find span Id: 0.2.1
WARNING: makeIds can't find span Id: 0.2.1.1
WARNING: makeIds can't find span Id: 0.2.1.1.0.0
WARNING: makeIds can't find span Id: 0.2.1.1.0
WARNING: makeIds can't find span Id: 0.2.1.1.0.1
WARNING: makeIds can't find span Id: 0.2.1.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.2
WARNING: makeIds can't find span Id: 0.0.2
Decoded in 982,628 microseconds
Sentence: The results of today 's preliminary women 's water - polo competition are : the Hungarian team defeated the Canadian team by 13 : 7 , the French team defeated the Brazilian team by 10 : 9 , the Australian team defeated the German team by 10 : 8 , the Russian team defeated the Dutch team by 7 : 6 , the US team defeated the Kazakhstani team by 10 : 5 , and the Italian team defeated the New Zealand team by 12 : 2 .

Oracle Span 1:  10 => 10
Oracle Span 2:  10 => 10
Oracle Span 3:  10 => 10
Oracle Span 4:  12 => 12
Oracle Span 5:  13 => 13
Oracle Span 6:  2 => 2
Oracle Span 7:  5 => 5
Oracle Span 8:  6 => 6
Oracle Span 9:  7 => 7
Oracle Span 10:  7 => 7
Oracle Span 11:  8 => 8
Oracle Span 12:  9 => 9
Oracle Span 13:  and => and
Oracle Span 14:  Australian => (country :name (name :op "Australia"))
Oracle Span 15:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 16:  Canadian => (country :name (name :op "Canada"))
Oracle Span 17:  competition => compete-01
Oracle Span 18:  defeated => defeat-01
Oracle Span 19:  defeated => defeat-01
Oracle Span 20:  defeated => defeat-01
Oracle Span 21:  defeated => defeat-01
Oracle Span 22:  defeated => defeat-01
Oracle Span 23:  defeated => defeat-01
Oracle Span 24:  French => (country :name (name :op "France"))
Oracle Span 25:  German => (country :name (name :op "Germany"))
Oracle Span 26:  Hungarian => (country :name (name :op "Hungary"))
Oracle Span 27:  Italian => (country :name (name :op "Italy"))
Oracle Span 28:  Kazakhstani => (country :name (name :op "Kazakhstan"))
Oracle Span 29:  New Zealand => (country :name (name :op "Zealand" :op "New"))
Oracle Span 30:  polo => polo
Oracle Span 31:  preliminary => preliminary
Oracle Span 32:  results => result-01
Oracle Span 33:  Russian => (country :name (name :op "Russia"))
Oracle Span 34:  team => team
Oracle Span 35:  team => team
Oracle Span 36:  team => team
Oracle Span 37:  team => team
Oracle Span 38:  team => team
Oracle Span 39:  team => team
Oracle Span 40:  team => team
Oracle Span 41:  team => team
Oracle Span 42:  team => team
Oracle Span 43:  team => team
Oracle Span 44:  team => team
Oracle Span 45:  team => team
Oracle Span 46:  today => today
Oracle Span 47:  US => (country :name (name :op "States" :op "United"))
Oracle Span 48:  water => water
Oracle Span 49:  women => woman
NER Entity: (country :name (name :op "New" :op "Zealand"))
NER Entity: (thing :name (name :op "Hungarian"))
NER Entity: (thing :name (name :op "Canadian"))
NER Entity: (thing :name (name :op "Brazilian"))
NER Entity: (thing :name (name :op "Australian"))
NER Entity: (thing :name (name :op "German"))
NER Entity: (thing :name (name :op "Russian"))
NER Entity: (person :name (name :op "Kazakhstani"))
NER Entity: (thing :name (name :op "Italian"))
NER Entity: (thing :name (name :op "French"))
NER Entity: (country :name (name :op "US"))
Spans:
Span 34-35:  10 => 10
Span 46-47:  10 => 10
Span 70-71:  10 => 10
Span 84-85:  12 => 12
Span 22-23:  13 => 13
Span 86-87:  2 => 2
Span 72-73:  5 => 5
Span 60-61:  6 => 6
Span 24-25:  7 => 7
Span 58-59:  7 => 7
Span 48-49:  8 => 8
Span 36-37:  9 => 9
Span 74-75:  and => and
Span 39-40:  Australian => (country :name (name :op "Australia"))
Span 31-32:  Brazilian => (country :name (name :op "Brazil"))
Span 19-20:  Canadian => (country :name (name :op "Canada"))
Span 11-12:  competition => compete-01
Span 17-18:  defeated => defeat-01
Span 29-30:  defeated => defeat-01
Span 41-42:  defeated => defeat-01
Span 53-54:  defeated => defeat-01
Span 65-66:  defeated => defeat-01
Span 78-79:  defeated => defeat-01
Span 27-28:  French => (country :name (name :op "France"))
Span 43-44:  German => (country :name (name :op "Germany"))
Span 15-16:  Hungarian => (country :name (name :op "Hungary"))
Span 76-77:  Italian => (country :name (name :op "Italy"))
Span 67-68:  Kazakhstani => (country :name (name :op "Kazakhstan"))
Span 80-82:  New Zealand => (country :name (name :op "Zealand" :op "New"))
Span 10-11:  polo => polo
Span 5-6:  preliminary => preliminary
Span 1-2:  results => result-01
Span 51-52:  Russian => (country :name (name :op "Russia"))
Span 16-17:  team => team
Span 20-21:  team => team
Span 28-29:  team => team
Span 32-33:  team => team
Span 40-41:  team => team
Span 44-45:  team => team
Span 52-53:  team => team
Span 56-57:  team => team
Span 64-65:  team => team
Span 68-69:  team => team
Span 77-78:  team => team
Span 82-83:  team => team
Span 3-4:  today => today
Span 63-64:  US => (country :name (name :op "States" :op "United"))
Span 8-9:  water => water
Span 6-7:  women => woman

Langrangian relaxation converged after 47 iterations. Delta = 0.0
Oracle Span 34-35:  10 => 10
Oracle Span 46-47:  10 => 10
Oracle Span 70-71:  10 => 10
Oracle Span 84-85:  12 => 12
Oracle Span 22-23:  13 => 13
Oracle Span 86-87:  2 => 2
Oracle Span 72-73:  5 => 5
Oracle Span 60-61:  6 => 6
Oracle Span 24-25:  7 => 7
Oracle Span 58-59:  7 => 7
Oracle Span 48-49:  8 => 8
Oracle Span 36-37:  9 => 9
Oracle Span 74-75:  and => and
Oracle Span 39-40:  Australian => (country :name (name :op "Australia"))
Oracle Span 31-32:  Brazilian => (country :name (name :op "Brazil"))
Oracle Span 19-20:  Canadian => (country :name (name :op "Canada"))
Oracle Span 11-12:  competition => compete-01
Oracle Span 17-18:  defeated => defeat-01
Oracle Span 29-30:  defeated => defeat-01
Oracle Span 41-42:  defeated => defeat-01
Oracle Span 53-54:  defeated => defeat-01
Oracle Span 65-66:  defeated => defeat-01
Oracle Span 78-79:  defeated => defeat-01
Oracle Span 27-28:  French => (country :name (name :op "France"))
Oracle Span 43-44:  German => (country :name (name :op "Germany"))
Oracle Span 15-16:  Hungarian => (country :name (name :op "Hungary"))
Oracle Span 76-77:  Italian => (country :name (name :op "Italy"))
Oracle Span 67-68:  Kazakhstani => (country :name (name :op "Kazakhstan"))
Oracle Span 80-82:  New Zealand => (country :name (name :op "Zealand" :op "New"))
Oracle Span 10-11:  polo => polo
Oracle Span 5-6:  preliminary => preliminary
Oracle Span 1-2:  results => result-01
Oracle Span 51-52:  Russian => (country :name (name :op "Russia"))
Oracle Span 16-17:  team => team
Oracle Span 20-21:  team => team
Oracle Span 28-29:  team => team
Oracle Span 32-33:  team => team
Oracle Span 40-41:  team => team
Oracle Span 44-45:  team => team
Oracle Span 52-53:  team => team
Oracle Span 56-57:  team => team
Oracle Span 64-65:  team => team
Oracle Span 68-69:  team => team
Oracle Span 77-78:  team => team
Oracle Span 82-83:  team => team
Oracle Span 3-4:  today => today
Oracle Span 63-64:  US => (country :name (name :op "States" :op "United"))
Oracle Span 8-9:  water => water
Oracle Span 6-7:  women => woman

Dependencies:
1	The	_	DT	DT	_	2	det	_	_
2	results	_	NNS	NNS	_	9	nsubj	_	_
3	of	_	IN	IN	_	2	prep	_	_
4	today	_	NN	NN	_	7	poss	_	_
5	's	_	POS	POS	_	4	possessive	_	_
6	preliminary	_	JJ	JJ	_	7	amod	_	_
7	women	_	NNS	NNS	_	3	pobj	_	_
8	's	_	VBZ	VBZ	_	9	cop	_	_
9	water	_	NN	NN	_	0	root	_	_
10	-	_	:	:	_	9	punct	_	_
11	polo	_	NN	NN	_	12	nn	_	_
12	competition	_	NN	NN	_	9	dep	_	_
13	are	_	VBP	VBP	_	12	dep	_	_
14	:	_	:	:	_	9	punct	_	_
15	the	_	DT	DT	_	17	det	_	_
16	Hungarian	_	JJ	JJ	_	17	amod	_	_
17	team	_	NN	NN	_	9	conj	_	_
18	defeated	_	VBN	VBN	_	17	vmod	_	_
19	the	_	DT	DT	_	21	det	_	_
20	Canadian	_	JJ	JJ	_	21	amod	_	_
21	team	_	NN	NN	_	18	dobj	_	_
22	by	_	IN	IN	_	18	prep	_	_
23	13	_	CD	CD	_	22	pobj	_	_
24	:	_	:	:	_	9	punct	_	_
25	7	_	CD	CD	_	9	conj	_	_
26	,	_	,	,	_	25	punct	_	_
27	the	_	DT	DT	_	29	det	_	_
28	French	_	JJ	JJ	_	29	amod	_	_
29	team	_	NN	NN	_	25	appos	_	_
30	defeated	_	VBN	VBN	_	29	vmod	_	_
31	the	_	DT	DT	_	33	det	_	_
32	Brazilian	_	JJ	JJ	_	33	amod	_	_
33	team	_	NN	NN	_	30	dobj	_	_
34	by	_	IN	IN	_	30	prep	_	_
35	10	_	CD	CD	_	34	pobj	_	_
36	:	_	:	:	_	9	punct	_	_
37	9	_	CD	CD	_	9	conj	_	_
38	,	_	,	,	_	37	punct	_	_
39	the	_	DT	DT	_	41	det	_	_
40	Australian	_	JJ	JJ	_	41	amod	_	_
41	team	_	NN	NN	_	37	appos	_	_
42	defeated	_	VBN	VBN	_	41	vmod	_	_
43	the	_	DT	DT	_	45	det	_	_
44	German	_	JJ	JJ	_	45	amod	_	_
45	team	_	NN	NN	_	42	dobj	_	_
46	by	_	IN	IN	_	42	prep	_	_
47	10	_	CD	CD	_	46	pobj	_	_
48	:	_	:	:	_	9	punct	_	_
49	8	_	CD	CD	_	9	conj	_	_
50	,	_	,	,	_	49	punct	_	_
51	the	_	DT	DT	_	53	det	_	_
52	Russian	_	JJ	JJ	_	53	amod	_	_
53	team	_	NN	NN	_	49	appos	_	_
54	defeated	_	VBN	VBN	_	53	vmod	_	_
55	the	_	DT	DT	_	57	det	_	_
56	Dutch	_	JJ	JJ	_	57	amod	_	_
57	team	_	NN	NN	_	54	dobj	_	_
58	by	_	IN	IN	_	54	prep	_	_
59	7	_	CD	CD	_	58	pobj	_	_
60	:	_	:	:	_	9	punct	_	_
61	6	_	CD	CD	_	9	conj	_	_
62	,	_	,	,	_	61	punct	_	_
63	the	_	DT	DT	_	65	det	_	_
64	US	_	NNP	NNP	_	65	nn	_	_
65	team	_	NN	NN	_	61	appos	_	_
66	defeated	_	VBN	VBN	_	65	vmod	_	_
67	the	_	DT	DT	_	69	det	_	_
68	Kazakhstani	_	NNP	NNP	_	69	nn	_	_
69	team	_	NN	NN	_	66	dobj	_	_
70	by	_	IN	IN	_	66	prep	_	_
71	10	_	CD	CD	_	70	pobj	_	_
72	:	_	:	:	_	71	punct	_	_
73	5	_	CD	CD	_	71	dep	_	_
74	,	_	,	,	_	9	punct	_	_
75	and	_	CC	CC	_	9	cc	_	_
76	the	_	DT	DT	_	78	det	_	_
77	Italian	_	JJ	JJ	_	78	amod	_	_
78	team	_	NN	NN	_	9	conj	_	_
79	defeated	_	VBN	VBN	_	78	vmod	_	_
80	the	_	DT	DT	_	83	det	_	_
81	New	_	NNP	NNP	_	83	nn	_	_
82	Zealand	_	NNP	NNP	_	83	nn	_	_
83	team	_	NN	NN	_	79	dobj	_	_
84	by	_	IN	IN	_	79	prep	_	_
85	12	_	CD	CD	_	84	pobj	_	_
86	:	_	:	:	_	9	punct	_	_
87	2	_	CD	CD	_	9	parataxis	_	_
88	.	_	.	.	_	9	punct	_	_

Oracle:
(a2 / and, op, d / defeat-01)
(a2 / and, op, d2 / defeat-01)
(a2 / and, op, d3 / defeat-01)
(a2 / and, op, d4 / defeat-01)
(a2 / and, op, d5 / defeat-01)
(a2 / and, op, d6 / defeat-01)
(c13 / compete-01, ARG0, w / woman)
(c13 / compete-01, mod, p / preliminary)
(c13 / compete-01, mod, p14 / polo)
(c13 / compete-01, time, t / today)
(c14 / country, name, n5 / name)
(c15 / country, name, n6 / name)
(c16 / country, name, n7 / name)
(c17 / country, name, n8 / name)
(c18 / country, name, n9 / name)
(c19 / country, name, n10 / name)
(c20 / country, name, n11 / name)
(c22 / country, name, n13 / name)
(c23 / country, name, n14 / name)
(c24 / country, name, n15 / name)
(c25 / country, name, n16 / name)
(d / defeat-01, ARG0, t2 / team)
(d / defeat-01, ARG1, t3 / team)
(d2 / defeat-01, ARG0, t4 / team)
(d2 / defeat-01, ARG1, t5 / team)
(d3 / defeat-01, ARG0, t6 / team)
(d3 / defeat-01, ARG1, t7 / team)
(d4 / defeat-01, ARG0, t8 / team)
(d4 / defeat-01, ARG1, t9 / team)
(d5 / defeat-01, ARG0, t10 / team)
(d5 / defeat-01, ARG1, t11 / team)
(d6 / defeat-01, ARG0, t12 / team)
(d6 / defeat-01, ARG1, t13 / team)
(n10 / name, op, "Germany")
(n11 / name, op, "Russia")
(n13 / name, op, "States")
(n13 / name, op, "United")
(n14 / name, op, "Kazakhstan")
(n15 / name, op, "Italy")
(n16 / name, op, "New")
(n16 / name, op, "Zealand")
(n5 / name, op, "Hungary")
(n6 / name, op, "Canada")
(n7 / name, op, "France")
(n8 / name, op, "Brazil")
(n9 / name, op, "Australia")
(p14 / polo, mod, w2 / water)
(r2 / result-01, ARG1, c13 / compete-01)
(r2 / result-01, ARG2, a2 / and)
(t10 / team, mod, c22 / country)
(t11 / team, mod, c23 / country)
(t12 / team, mod, c24 / country)
(t13 / team, mod, c25 / country)
(t2 / team, mod, c14 / country)
(t3 / team, mod, c15 / country)
(t4 / team, mod, c16 / country)
(t5 / team, mod, c17 / country)
(t6 / team, mod, c18 / country)
(t7 / team, mod, c19 / country)
(t8 / team, mod, c20 / country)

Input(Some(Graph((result-01 :ARG2 (and :op (defeat-01 :quant (score-entity :op 12 :op 2) :ARG1 (team :mod (country :name (name :op "Zealand" :op "New"))) :ARG0 (team :mod (country :name (name :op "Italy")))) :op (defeat-01 :quant (score-entity :op 10 :op 5) :ARG1 (team :mod (country :name (name :op "Kazakhstan"))) :ARG0 (team :mod (country :name (name :op "States" :op "United")))) :op (defeat-01 :quant (score-entity :op 7 :op 6) :ARG1 (team :mod (country :name (name :op "Netherlands"))) :ARG0 (team :mod (country :name (name :op "Russia")))) :op (defeat-01 :quant (score-entity :op 10 :op 8) :ARG1 (team :mod (country :name (name :op "Germany"))) :ARG0 (team :mod (country :name (name :op "Australia")))) :op (defeat-01 :quant (score-entity :op 10 :op 9) :ARG1 (team :mod (country :name (name :op "Brazil"))) :ARG0 (team :mod (country :name (name :op "France")))) :op (defeat-01 :quant (score-entity :op 13 :op 7) :ARG1 (team :mod (country :name (name :op "Canada"))) :ARG0 (team :mod (country :name (name :op "Hungary"))))) :ARG1 (compete-01 :mod (polo :mod water) :time today :mod preliminary :ARG0 woman)),ArrayBuffer(Span(80,82,List(0, 1, 2, 3),New Zealand,(country :name (name :op "Zealand" :op "New")),false), Span(15,16,List(4, 5, 6),Hungarian,(country :name (name :op "Hungary")),false), Span(19,20,List(7, 8, 9),Canadian,(country :name (name :op "Canada")),false), Span(31,32,List(10, 11, 12),Brazilian,(country :name (name :op "Brazil")),false), Span(39,40,List(13, 14, 15),Australian,(country :name (name :op "Australia")),false), Span(43,44,List(16, 17, 18),German,(country :name (name :op "Germany")),false), Span(51,52,List(19, 20, 21),Russian,(country :name (name :op "Russia")),false), Span(67,68,List(22, 23, 24),Kazakhstani,(country :name (name :op "Kazakhstan")),false), Span(76,77,List(25, 26, 27),Italian,(country :name (name :op "Italy")),false), Span(1,2,List(28),results,result-01,false), Span(74,75,List(29),and,and,false), Span(17,18,List(30),defeated,defeat-01,false), Span(84,85,List(31),12,12,false), Span(86,87,List(32),2,2,false), Span(16,17,List(33),team,team,false), Span(20,21,List(34),team,team,false), Span(29,30,List(35),defeated,defeat-01,false), Span(34,35,List(36),10,10,false), Span(72,73,List(37),5,5,false), Span(28,29,List(38),team,team,false), Span(32,33,List(39),team,team,false), Span(41,42,List(40),defeated,defeat-01,false), Span(24,25,List(41),7,7,false), Span(60,61,List(42),6,6,false), Span(40,41,List(43),team,team,false), Span(44,45,List(44),team,team,false), Span(53,54,List(45),defeated,defeat-01,false), Span(46,47,List(46),10,10,false), Span(48,49,List(47),8,8,false), Span(52,53,List(48),team,team,false), Span(56,57,List(49),team,team,false), Span(65,66,List(50),defeated,defeat-01,false), Span(70,71,List(51),10,10,false), Span(36,37,List(52),9,9,false), Span(64,65,List(53),team,team,false), Span(68,69,List(54),team,team,false), Span(27,28,List(55, 56, 57),French,(country :name (name :op "France")),false), Span(78,79,List(58),defeated,defeat-01,false), Span(22,23,List(59),13,13,false), Span(58,59,List(60),7,7,false), Span(77,78,List(61),team,team,false), Span(82,83,List(62),team,team,false), Span(6,7,List(63),women,woman,false), Span(5,6,List(64),preliminary,preliminary,false), Span(3,4,List(65),today,today,false), Span(10,11,List(66),polo,polo,false), Span(8,9,List(67),water,water,false), Span(11,12,List(68),competition,compete-01,false), Span(63,64,List(69, 70, 71, 72),US,(country :name (name :op "States" :op "United")),false)),Map(57 -> "France", 63 -> woman, 45 -> defeat-01, 39 -> team, 30 -> defeat-01, 66 -> polo, 51 -> 10, 2 -> "Zealand", 72 -> "United", 5 -> name, 48 -> team, 69 -> country, 33 -> team, 27 -> "Italy", 54 -> team, 12 -> "Brazil", 60 -> 7, 8 -> name, 15 -> "Australia", 42 -> 6, 36 -> 10, 21 -> "Russia", 71 -> "States", 18 -> "Germany", 24 -> "Kazakhstan", 68 -> compete-01, 53 -> team, 41 -> 7, 35 -> defeat-01, 62 -> team, 56 -> name, 7 -> country, 59 -> 13, 17 -> name, 1 -> name, 50 -> defeat-01, 44 -> team, 23 -> name, 65 -> today, 38 -> team, 47 -> 8, 26 -> name, 4 -> country, 11 -> name, 32 -> 2, 14 -> name, 29 -> and, 20 -> name, 70 -> name, 64 -> preliminary, 46 -> 10, 52 -> 9, 67 -> water, 34 -> team, 28 -> result-01, 6 -> "Hungary", 55 -> country, 40 -> defeat-01, 61 -> team, 49 -> team, 43 -> team, 9 -> "Canada", 0 -> country, 22 -> country, 58 -> defeat-01, 16 -> country, 37 -> 5, 19 -> country, 3 -> "New", 10 -> country, 31 -> 12, 25 -> country, 13 -> country),Map(c14 -> country, c20 -> country, w -> woman, c17 -> country, t4 -> team, 2 -> 2, 72 -> 7, 5 -> 5, 12 -> 10, t -> today, t11 -> team, 8 -> 8, d3 -> defeat-01, 15 -> 13, n11 -> name, n7 -> name, d6 -> defeat-01, n14 -> name, c16 -> country, c22 -> country, c19 -> country, c25 -> country, t6 -> team, c13 -> compete-01, t9 -> team, d -> defeat-01, 7 -> 7, 1 -> 12, t3 -> team, r2 -> result-01, p -> preliminary, n16 -> name, p14 -> polo, t10 -> team, d2 -> defeat-01, n6 -> name, 14 -> 10, t13 -> team, n10 -> name, c15 -> country, d5 -> defeat-01, n9 -> name, n13 -> name, t2 -> team, w2 -> water, t5 -> team, c24 -> country, c18 -> country, a2 -> and, 6 -> 6, t8 -> team, 9 -> 9, d4 -> defeat-01, n8 -> name, n15 -> name, c23 -> country, 13 -> 10, t7 -> team, t12 -> team, n5 -> name))),[Ljava.lang.String;@7188af83,Annotation([Ljava.lang.String;@6be968ce,[Ljava.lang.String;@7c37508a,[Ljava.lang.String;@247310d0),Annotation([Ljava.lang.String;@1033576a,[Ljava.lang.String;@303cf2ba,[Ledu.cmu.lti.nlp.amr.Dependency;@76494737),Annotation([Ljava.lang.String;@4a003cbe,[Ljava.lang.String;@4082ba93,[Ljava.lang.String;@17fc391b),Annotation([Ljava.lang.String;@2b30a42c,[Ljava.lang.String;@609e8838,[Ledu.cmu.lti.nlp.amr.Entity;@359df09a))
AMR:
(14 / 10, calendar, 5 / 5)
(5 / 5, mod, c20 / country)
(a2 / and, op, c20 / country)
(a2 / and, op, r2 / result-01)
(a2 / and, op, t13 / team)
(a2 / and, op, t3 / team)
(c13 / compete-01, ARG0, t13 / team)
(c13 / compete-01, ARG1, p14 / polo)
(c13 / compete-01, ARG6, 7 / 7)
(c14 / country, name, n5 / name)
(c15 / country, name, n6 / name)
(c16 / country, name, n7 / name)
(c17 / country, name, n8 / name)
(c18 / country, name, n9 / name)
(c19 / country, name, n10 / name)
(c20 / country, name, n11 / name)
(c22 / country, name, n13 / name)
(c23 / country, name, n14 / name)
(c24 / country, name, n15 / name)
(c25 / country, name, n16 / name)
(d / defeat-01, ARG1, t3 / team)
(d / defeat-01, ARG2, t2 / team)
(d / defeat-01, ARG6, 1 / 12)
(d2 / defeat-01, ARG0, t5 / team)
(d2 / defeat-01, ARG1, t4 / team)
(d2 / defeat-01, ARG2, 2 / 2)
(d2 / defeat-01, ARG6, 6 / 6)
(d3 / defeat-01, ARG0, t7 / team)
(d3 / defeat-01, ARG1, t6 / team)
(d3 / defeat-01, ARG6, 8 / 8)
(d3 / defeat-01, time, 72 / 7)
(d4 / defeat-01, ARG0, t9 / team)
(d4 / defeat-01, ARG1, t8 / team)
(d4 / defeat-01, ARG6, 9 / 9)
(d4 / defeat-01, time, 13 / 10)
(d5 / defeat-01, ARG0, t11 / team)
(d5 / defeat-01, ARG1, t10 / team)
(d5 / defeat-01, ARG6, 7 / 7)
(d5 / defeat-01, time, 12 / 10)
(d6 / defeat-01, ARG0, w2 / water)
(d6 / defeat-01, ARG1, t12 / team)
(d6 / defeat-01, ARG6, t13 / team)
(n10 / name, op, "Germany")
(n11 / name, op, "Russia")
(n13 / name, op, "States")
(n13 / name, op, "United")
(n14 / name, op, "Kazakhstan")
(n15 / name, op, "Italy")
(n16 / name, op, "New")
(n16 / name, op, "Zealand")
(n5 / name, op, "Hungary")
(n6 / name, op, "Canada")
(n7 / name, op, "France")
(n8 / name, op, "Brazil")
(n9 / name, op, "Australia")
(r2 / result-01, ARG0, 15 / 13)
(r2 / result-01, ARG1, w / woman)
(t10 / team, poss, c17 / country)
(t11 / team, mod, c16 / country)
(t12 / team, op, d4 / defeat-01)
(t12 / team, poss, c15 / country)
(t13 / team, mod, c14 / country)
(t2 / team, mod, c25 / country)
(t3 / team, mod, c24 / country)
(t4 / team, mod, c23 / country)
(t5 / team, mod, c22 / country)
(t7 / team, mod, c20 / country)
(t8 / team, mod, c19 / country)
(t8 / team, op, d2 / defeat-01)
(t9 / team, mod, c18 / country)
(w / woman, mod, p / preliminary)
(w / woman, poss, t / today)

WARNING: makeIds can't find span Id: 0.1.5.1.0
WARNING: makeIds can't find span Id: 0.1.5.1.0.0
WARNING: makeIds can't find span Id: 0.1.5.1.0.0.1
WARNING: makeIds can't find span Id: 0.1.5.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0
WARNING: makeIds can't find span Id: 0.1.0.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.2.1.0
WARNING: makeIds can't find span Id: 0.1.2.1.0.0
WARNING: makeIds can't find span Id: 0.1.2.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.0.0
WARNING: makeIds can't find span Id: 0.1.3.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.4.1.0
WARNING: makeIds can't find span Id: 0.1.4.1.0.0
WARNING: makeIds can't find span Id: 0.1.4.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.5.0.0
WARNING: makeIds can't find span Id: 0.1.5.0.0.0
WARNING: makeIds can't find span Id: 0.1.5.0.0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.1.5
WARNING: makeIds can't find span Id: 0.1.5.2.0
WARNING: makeIds can't find span Id: 0.1.5.2.1
WARNING: makeIds can't find span Id: 0.1.5.1
WARNING: makeIds can't find span Id: 0.1.5.0
WARNING: makeIds can't find span Id: 0.1.4
WARNING: makeIds can't find span Id: 0.1.4.2.0
WARNING: makeIds can't find span Id: 0.1.4.2.1
WARNING: makeIds can't find span Id: 0.1.4.1
WARNING: makeIds can't find span Id: 0.1.4.0
WARNING: makeIds can't find span Id: 0.1.3
WARNING: makeIds can't find span Id: 0.1.3.2.0
WARNING: makeIds can't find span Id: 0.1.3.2.1
WARNING: makeIds can't find span Id: 0.1.3.1
WARNING: makeIds can't find span Id: 0.1.3.0
WARNING: makeIds can't find span Id: 0.1.2
WARNING: makeIds can't find span Id: 0.1.2.2.0
WARNING: makeIds can't find span Id: 0.1.2.2.1
WARNING: makeIds can't find span Id: 0.1.2.1
WARNING: makeIds can't find span Id: 0.1.2.0
WARNING: makeIds can't find span Id: 0.1.1
WARNING: makeIds can't find span Id: 0.1.1.2.0
WARNING: makeIds can't find span Id: 0.1.1.2.1
WARNING: makeIds can't find span Id: 0.1.1.1
WARNING: makeIds can't find span Id: 0.1.1.0
WARNING: makeIds can't find span Id: 0.1.1.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0
WARNING: makeIds can't find span Id: 0.1.1.0.0.0.0
WARNING: makeIds can't find span Id: 0.1.0
WARNING: makeIds can't find span Id: 0.1.0.2.0
WARNING: makeIds can't find span Id: 0.1.0.2.1
WARNING: makeIds can't find span Id: 0.1.0.1
WARNING: makeIds can't find span Id: 0.1.0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.0.1
WARNING: makeIds can't find span Id: 0.0.2
WARNING: makeIds can't find span Id: 0.0.3
WARNING: makeIds can't find span Id: 0.0.3.0
WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.1.4.0.0
WARNING: makeIds can't find span Id: 0.1.4.0.0.0
WARNING: makeIds can't find span Id: 0.1.4.0.0.0.1
WARNING: makeIds can't find span Id: 0.1.4.0.0.0.0
Decoded in 10,400,669 microseconds
Sentence: There are 12 teams totally participating in the competition .

Oracle Span 1:  12 => 12
Oracle Span 2:  competition => compete-01
Oracle Span 3:  participating => participate-01
Oracle Span 4:  teams => team
Oracle Span 5:  totally => total-01
Spans:
Span 2-3:  12 => 12
Span 8-9:  competition => compete-01
Span 5-6:  participating => participate-01
Span 3-4:  teams => team
Span 4-5:  totally => total-01

Langrangian relaxation converged after 53 iterations. Delta = 0.0
Oracle Span 2-3:  12 => 12
Oracle Span 8-9:  competition => compete-01
Oracle Span 5-6:  participating => participate-01
Oracle Span 3-4:  teams => team
Oracle Span 4-5:  totally => total-01

Dependencies:
1	There	_	EX	EX	_	6	expl	_	_
2	are	_	VBP	VBP	_	6	aux	_	_
3	12	_	CD	CD	_	4	num	_	_
4	teams	_	NNS	NNS	_	5	npadvmod	_	_
5	totally	_	RB	RB	_	6	advmod	_	_
6	participating	_	VBG	VBG	_	0	root	_	_
7	in	_	IN	IN	_	6	prep	_	_
8	the	_	DT	DT	_	9	det	_	_
9	competition	_	NN	NN	_	7	pobj	_	_
10	.	_	.	.	_	6	punct	_	_

Oracle:
(p / participate-01, ARG0, t / team)
(p / participate-01, ARG1, c / compete-01)
(t / team, quant, x / 12)
(t2 / total-01, ARG1, t / team)
(t2 / total-01, ARG2, x / 12)

Input(Some(Graph((participate-01 :ARG1 compete-01 :ARG0 (team :quant (12 :ARG2-of (total-01 :ARG1 team)))),ArrayBuffer(Span(5,6,List(0),participating,participate-01,false), Span(3,4,List(1),teams,team,false), Span(2,3,List(2),12,12,false), Span(8,9,List(3),competition,compete-01,false), Span(4,5,List(4),totally,total-01,false)),Map(2 -> 12, 1 -> team, 4 -> total-01, 0 -> participate-01, 3 -> compete-01),Map(t -> team, p -> participate-01, t2 -> total-01, x -> 12, c -> compete-01))),[Ljava.lang.String;@43df23d3,Annotation([Ljava.lang.String;@6d60fe40,[Ljava.lang.String;@792b749c,[Ljava.lang.String;@23e84203),Annotation([Ljava.lang.String;@19932c16,[Ljava.lang.String;@73eb439a,[Ledu.cmu.lti.nlp.amr.Dependency;@514646ef),Annotation([Ljava.lang.String;@305ffe9e,[Ljava.lang.String;@302c971f,[Ljava.lang.String;@1972e513),Annotation([Ljava.lang.String;@7ae0a9ec,[Ljava.lang.String;@35841320,[Ledu.cmu.lti.nlp.amr.Entity;@61c4eee0))
AMR:
(c / compete-01, ARG1, x / 12)
(p / participate-01, ARG1, c / compete-01)
(p / participate-01, manner, t2 / total-01)
(t2 / total-01, ARG1, t / team)

WARNING: makeIds can't find span Id: 0.0
WARNING: makeIds can't find span Id: 0.0.0
WARNING: makeIds can't find span Id: 0.1
WARNING: makeIds can't find span Id: 0.0.0.0
Decoded in 134,922 microseconds
Sentence: ( End )

Oracle Span 1:  End => end-01
Spans:
Span 1-2:  End => end-01

Langrangian relaxation converged after 1 iterations. Delta = 0.0
Oracle Span 1-2:  End => end-01

Dependencies:
1	(	_	(	(	_	2	punct	_	_
2	End	_	NNP	NNP	_	0	root	_	_
3	)	_	)	)	_	2	punct	_	_

Oracle:


Input(Some(Graph(end-01,ArrayBuffer(Span(1,2,List(0),End,end-01,false)),Map(0 -> end-01),Map(e -> end-01))),[Ljava.lang.String;@6f10d5b6,Annotation([Ljava.lang.String;@1040be71,[Ljava.lang.String;@548a24a,[Ljava.lang.String;@433defed),Annotation([Ljava.lang.String;@2a693f59,[Ljava.lang.String;@3f4faf53,[Ledu.cmu.lti.nlp.amr.Dependency;@7fd50002),Annotation([Ljava.lang.String;@533bda92,[Ljava.lang.String;@304bb45b,[Ljava.lang.String;@723ca036),Annotation([Ljava.lang.String;@25be7b63,[Ljava.lang.String;@28dcca0c,[Ledu.cmu.lti.nlp.amr.Entity;@45d84a20))
AMR:


Decoded in 3,239 microseconds
